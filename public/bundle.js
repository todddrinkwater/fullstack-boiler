/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;
/******/
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var _react = __webpack_require__(1);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _reactDom = __webpack_require__(36);
	
	var _reactRedux = __webpack_require__(182);
	
	var _redux = __webpack_require__(191);
	
	var _reduxThunk = __webpack_require__(214);
	
	var _reduxThunk2 = _interopRequireDefault(_reduxThunk);
	
	var _reducers = __webpack_require__(215);
	
	var _reducers2 = _interopRequireDefault(_reducers);
	
	var _App = __webpack_require__(219);
	
	var _App2 = _interopRequireDefault(_App);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var store = (0, _redux.createStore)(_reducers2.default, (0, _redux.compose)((0, _redux.applyMiddleware)(_reduxThunk2.default), window.devToolsExtension ? window.devToolsExtension() : function (f) {
	  return f;
	}));
	
	document.addEventListener('DOMContentLoaded', function () {
	  (0, _reactDom.render)(_react2.default.createElement(
	    _reactRedux.Provider,
	    { store: store },
	    _react2.default.createElement(_App2.default, null)
	  ), document.getElementById('app'));
	});

/***/ }),
/* 1 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports = __webpack_require__(2);

/***/ }),
/* 2 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var _assign = __webpack_require__(4);
	
	var ReactChildren = __webpack_require__(5);
	var ReactComponent = __webpack_require__(18);
	var ReactPureComponent = __webpack_require__(21);
	var ReactClass = __webpack_require__(22);
	var ReactDOMFactories = __webpack_require__(24);
	var ReactElement = __webpack_require__(9);
	var ReactPropTypes = __webpack_require__(29);
	var ReactVersion = __webpack_require__(34);
	
	var onlyChild = __webpack_require__(35);
	var warning = __webpack_require__(11);
	
	var createElement = ReactElement.createElement;
	var createFactory = ReactElement.createFactory;
	var cloneElement = ReactElement.cloneElement;
	
	if (process.env.NODE_ENV !== 'production') {
	  var canDefineProperty = __webpack_require__(13);
	  var ReactElementValidator = __webpack_require__(25);
	  var didWarnPropTypesDeprecated = false;
	  createElement = ReactElementValidator.createElement;
	  createFactory = ReactElementValidator.createFactory;
	  cloneElement = ReactElementValidator.cloneElement;
	}
	
	var __spread = _assign;
	
	if (process.env.NODE_ENV !== 'production') {
	  var warned = false;
	  __spread = function __spread() {
	    process.env.NODE_ENV !== 'production' ? warning(warned, 'React.__spread is deprecated and should not be used. Use ' + 'Object.assign directly or another helper function with similar ' + 'semantics. You may be seeing this warning due to your compiler. ' + 'See https://fb.me/react-spread-deprecation for more details.') : void 0;
	    warned = true;
	    return _assign.apply(null, arguments);
	  };
	}
	
	var React = {
	
	  // Modern
	
	  Children: {
	    map: ReactChildren.map,
	    forEach: ReactChildren.forEach,
	    count: ReactChildren.count,
	    toArray: ReactChildren.toArray,
	    only: onlyChild
	  },
	
	  Component: ReactComponent,
	  PureComponent: ReactPureComponent,
	
	  createElement: createElement,
	  cloneElement: cloneElement,
	  isValidElement: ReactElement.isValidElement,
	
	  // Classic
	
	  PropTypes: ReactPropTypes,
	  createClass: ReactClass.createClass,
	  createFactory: createFactory,
	  createMixin: function createMixin(mixin) {
	    // Currently a noop. Will be used to validate and trace mixins.
	    return mixin;
	  },
	
	  // This looks DOM specific but these are actually isomorphic helpers
	  // since they are just generating DOM strings.
	  DOM: ReactDOMFactories,
	
	  version: ReactVersion,
	
	  // Deprecated hook for JSX spread, don't use this for anything.
	  __spread: __spread
	};
	
	// TODO: Fix tests so that this deprecation warning doesn't cause failures.
	if (process.env.NODE_ENV !== 'production') {
	  if (canDefineProperty) {
	    Object.defineProperty(React, 'PropTypes', {
	      get: function get() {
	        process.env.NODE_ENV !== 'production' ? warning(didWarnPropTypesDeprecated, 'Accessing PropTypes via the main React package is deprecated. Use ' + 'the prop-types package from npm instead.') : void 0;
	        didWarnPropTypesDeprecated = true;
	        return ReactPropTypes;
	      }
	    });
	  }
	}
	
	module.exports = React;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ }),
/* 3 */
/***/ (function(module, exports) {

	'use strict';
	
	// shim for using process in browser
	var process = module.exports = {};
	
	// cached from whatever global is present so that test runners that stub it
	// don't break things.  But we need to wrap it in a try catch in case it is
	// wrapped in strict mode code which doesn't define any globals.  It's inside a
	// function because try/catches deoptimize in certain engines.
	
	var cachedSetTimeout;
	var cachedClearTimeout;
	
	function defaultSetTimout() {
	    throw new Error('setTimeout has not been defined');
	}
	function defaultClearTimeout() {
	    throw new Error('clearTimeout has not been defined');
	}
	(function () {
	    try {
	        if (typeof setTimeout === 'function') {
	            cachedSetTimeout = setTimeout;
	        } else {
	            cachedSetTimeout = defaultSetTimout;
	        }
	    } catch (e) {
	        cachedSetTimeout = defaultSetTimout;
	    }
	    try {
	        if (typeof clearTimeout === 'function') {
	            cachedClearTimeout = clearTimeout;
	        } else {
	            cachedClearTimeout = defaultClearTimeout;
	        }
	    } catch (e) {
	        cachedClearTimeout = defaultClearTimeout;
	    }
	})();
	function runTimeout(fun) {
	    if (cachedSetTimeout === setTimeout) {
	        //normal enviroments in sane situations
	        return setTimeout(fun, 0);
	    }
	    // if setTimeout wasn't available but was latter defined
	    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
	        cachedSetTimeout = setTimeout;
	        return setTimeout(fun, 0);
	    }
	    try {
	        // when when somebody has screwed with setTimeout but no I.E. maddness
	        return cachedSetTimeout(fun, 0);
	    } catch (e) {
	        try {
	            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
	            return cachedSetTimeout.call(null, fun, 0);
	        } catch (e) {
	            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
	            return cachedSetTimeout.call(this, fun, 0);
	        }
	    }
	}
	function runClearTimeout(marker) {
	    if (cachedClearTimeout === clearTimeout) {
	        //normal enviroments in sane situations
	        return clearTimeout(marker);
	    }
	    // if clearTimeout wasn't available but was latter defined
	    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
	        cachedClearTimeout = clearTimeout;
	        return clearTimeout(marker);
	    }
	    try {
	        // when when somebody has screwed with setTimeout but no I.E. maddness
	        return cachedClearTimeout(marker);
	    } catch (e) {
	        try {
	            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
	            return cachedClearTimeout.call(null, marker);
	        } catch (e) {
	            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
	            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
	            return cachedClearTimeout.call(this, marker);
	        }
	    }
	}
	var queue = [];
	var draining = false;
	var currentQueue;
	var queueIndex = -1;
	
	function cleanUpNextTick() {
	    if (!draining || !currentQueue) {
	        return;
	    }
	    draining = false;
	    if (currentQueue.length) {
	        queue = currentQueue.concat(queue);
	    } else {
	        queueIndex = -1;
	    }
	    if (queue.length) {
	        drainQueue();
	    }
	}
	
	function drainQueue() {
	    if (draining) {
	        return;
	    }
	    var timeout = runTimeout(cleanUpNextTick);
	    draining = true;
	
	    var len = queue.length;
	    while (len) {
	        currentQueue = queue;
	        queue = [];
	        while (++queueIndex < len) {
	            if (currentQueue) {
	                currentQueue[queueIndex].run();
	            }
	        }
	        queueIndex = -1;
	        len = queue.length;
	    }
	    currentQueue = null;
	    draining = false;
	    runClearTimeout(timeout);
	}
	
	process.nextTick = function (fun) {
	    var args = new Array(arguments.length - 1);
	    if (arguments.length > 1) {
	        for (var i = 1; i < arguments.length; i++) {
	            args[i - 1] = arguments[i];
	        }
	    }
	    queue.push(new Item(fun, args));
	    if (queue.length === 1 && !draining) {
	        runTimeout(drainQueue);
	    }
	};
	
	// v8 likes predictible objects
	function Item(fun, array) {
	    this.fun = fun;
	    this.array = array;
	}
	Item.prototype.run = function () {
	    this.fun.apply(null, this.array);
	};
	process.title = 'browser';
	process.browser = true;
	process.env = {};
	process.argv = [];
	process.version = ''; // empty string to avoid regexp issues
	process.versions = {};
	
	function noop() {}
	
	process.on = noop;
	process.addListener = noop;
	process.once = noop;
	process.off = noop;
	process.removeListener = noop;
	process.removeAllListeners = noop;
	process.emit = noop;
	
	process.binding = function (name) {
	    throw new Error('process.binding is not supported');
	};
	
	process.cwd = function () {
	    return '/';
	};
	process.chdir = function (dir) {
	    throw new Error('process.chdir is not supported');
	};
	process.umask = function () {
	    return 0;
	};

/***/ }),
/* 4 */
/***/ (function(module, exports) {

	/*
	object-assign
	(c) Sindre Sorhus
	@license MIT
	*/
	
	'use strict';
	/* eslint-disable no-unused-vars */
	
	var getOwnPropertySymbols = Object.getOwnPropertySymbols;
	var hasOwnProperty = Object.prototype.hasOwnProperty;
	var propIsEnumerable = Object.prototype.propertyIsEnumerable;
	
	function toObject(val) {
		if (val === null || val === undefined) {
			throw new TypeError('Object.assign cannot be called with null or undefined');
		}
	
		return Object(val);
	}
	
	function shouldUseNative() {
		try {
			if (!Object.assign) {
				return false;
			}
	
			// Detect buggy property enumeration order in older V8 versions.
	
			// https://bugs.chromium.org/p/v8/issues/detail?id=4118
			var test1 = new String('abc'); // eslint-disable-line no-new-wrappers
			test1[5] = 'de';
			if (Object.getOwnPropertyNames(test1)[0] === '5') {
				return false;
			}
	
			// https://bugs.chromium.org/p/v8/issues/detail?id=3056
			var test2 = {};
			for (var i = 0; i < 10; i++) {
				test2['_' + String.fromCharCode(i)] = i;
			}
			var order2 = Object.getOwnPropertyNames(test2).map(function (n) {
				return test2[n];
			});
			if (order2.join('') !== '0123456789') {
				return false;
			}
	
			// https://bugs.chromium.org/p/v8/issues/detail?id=3056
			var test3 = {};
			'abcdefghijklmnopqrst'.split('').forEach(function (letter) {
				test3[letter] = letter;
			});
			if (Object.keys(Object.assign({}, test3)).join('') !== 'abcdefghijklmnopqrst') {
				return false;
			}
	
			return true;
		} catch (err) {
			// We don't expect any of the above to throw, but better to be safe.
			return false;
		}
	}
	
	module.exports = shouldUseNative() ? Object.assign : function (target, source) {
		var from;
		var to = toObject(target);
		var symbols;
	
		for (var s = 1; s < arguments.length; s++) {
			from = Object(arguments[s]);
	
			for (var key in from) {
				if (hasOwnProperty.call(from, key)) {
					to[key] = from[key];
				}
			}
	
			if (getOwnPropertySymbols) {
				symbols = getOwnPropertySymbols(from);
				for (var i = 0; i < symbols.length; i++) {
					if (propIsEnumerable.call(from, symbols[i])) {
						to[symbols[i]] = from[symbols[i]];
					}
				}
			}
		}
	
		return to;
	};

/***/ }),
/* 5 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var PooledClass = __webpack_require__(6);
	var ReactElement = __webpack_require__(9);
	
	var emptyFunction = __webpack_require__(12);
	var traverseAllChildren = __webpack_require__(15);
	
	var twoArgumentPooler = PooledClass.twoArgumentPooler;
	var fourArgumentPooler = PooledClass.fourArgumentPooler;
	
	var userProvidedKeyEscapeRegex = /\/+/g;
	function escapeUserProvidedKey(text) {
	  return ('' + text).replace(userProvidedKeyEscapeRegex, '$&/');
	}
	
	/**
	 * PooledClass representing the bookkeeping associated with performing a child
	 * traversal. Allows avoiding binding callbacks.
	 *
	 * @constructor ForEachBookKeeping
	 * @param {!function} forEachFunction Function to perform traversal with.
	 * @param {?*} forEachContext Context to perform context with.
	 */
	function ForEachBookKeeping(forEachFunction, forEachContext) {
	  this.func = forEachFunction;
	  this.context = forEachContext;
	  this.count = 0;
	}
	ForEachBookKeeping.prototype.destructor = function () {
	  this.func = null;
	  this.context = null;
	  this.count = 0;
	};
	PooledClass.addPoolingTo(ForEachBookKeeping, twoArgumentPooler);
	
	function forEachSingleChild(bookKeeping, child, name) {
	  var func = bookKeeping.func,
	      context = bookKeeping.context;
	
	  func.call(context, child, bookKeeping.count++);
	}
	
	/**
	 * Iterates through children that are typically specified as `props.children`.
	 *
	 * See https://facebook.github.io/react/docs/top-level-api.html#react.children.foreach
	 *
	 * The provided forEachFunc(child, index) will be called for each
	 * leaf child.
	 *
	 * @param {?*} children Children tree container.
	 * @param {function(*, int)} forEachFunc
	 * @param {*} forEachContext Context for forEachContext.
	 */
	function forEachChildren(children, forEachFunc, forEachContext) {
	  if (children == null) {
	    return children;
	  }
	  var traverseContext = ForEachBookKeeping.getPooled(forEachFunc, forEachContext);
	  traverseAllChildren(children, forEachSingleChild, traverseContext);
	  ForEachBookKeeping.release(traverseContext);
	}
	
	/**
	 * PooledClass representing the bookkeeping associated with performing a child
	 * mapping. Allows avoiding binding callbacks.
	 *
	 * @constructor MapBookKeeping
	 * @param {!*} mapResult Object containing the ordered map of results.
	 * @param {!function} mapFunction Function to perform mapping with.
	 * @param {?*} mapContext Context to perform mapping with.
	 */
	function MapBookKeeping(mapResult, keyPrefix, mapFunction, mapContext) {
	  this.result = mapResult;
	  this.keyPrefix = keyPrefix;
	  this.func = mapFunction;
	  this.context = mapContext;
	  this.count = 0;
	}
	MapBookKeeping.prototype.destructor = function () {
	  this.result = null;
	  this.keyPrefix = null;
	  this.func = null;
	  this.context = null;
	  this.count = 0;
	};
	PooledClass.addPoolingTo(MapBookKeeping, fourArgumentPooler);
	
	function mapSingleChildIntoContext(bookKeeping, child, childKey) {
	  var result = bookKeeping.result,
	      keyPrefix = bookKeeping.keyPrefix,
	      func = bookKeeping.func,
	      context = bookKeeping.context;
	
	  var mappedChild = func.call(context, child, bookKeeping.count++);
	  if (Array.isArray(mappedChild)) {
	    mapIntoWithKeyPrefixInternal(mappedChild, result, childKey, emptyFunction.thatReturnsArgument);
	  } else if (mappedChild != null) {
	    if (ReactElement.isValidElement(mappedChild)) {
	      mappedChild = ReactElement.cloneAndReplaceKey(mappedChild,
	      // Keep both the (mapped) and old keys if they differ, just as
	      // traverseAllChildren used to do for objects as children
	      keyPrefix + (mappedChild.key && (!child || child.key !== mappedChild.key) ? escapeUserProvidedKey(mappedChild.key) + '/' : '') + childKey);
	    }
	    result.push(mappedChild);
	  }
	}
	
	function mapIntoWithKeyPrefixInternal(children, array, prefix, func, context) {
	  var escapedPrefix = '';
	  if (prefix != null) {
	    escapedPrefix = escapeUserProvidedKey(prefix) + '/';
	  }
	  var traverseContext = MapBookKeeping.getPooled(array, escapedPrefix, func, context);
	  traverseAllChildren(children, mapSingleChildIntoContext, traverseContext);
	  MapBookKeeping.release(traverseContext);
	}
	
	/**
	 * Maps children that are typically specified as `props.children`.
	 *
	 * See https://facebook.github.io/react/docs/top-level-api.html#react.children.map
	 *
	 * The provided mapFunction(child, key, index) will be called for each
	 * leaf child.
	 *
	 * @param {?*} children Children tree container.
	 * @param {function(*, int)} func The map function.
	 * @param {*} context Context for mapFunction.
	 * @return {object} Object containing the ordered map of results.
	 */
	function mapChildren(children, func, context) {
	  if (children == null) {
	    return children;
	  }
	  var result = [];
	  mapIntoWithKeyPrefixInternal(children, result, null, func, context);
	  return result;
	}
	
	function forEachSingleChildDummy(traverseContext, child, name) {
	  return null;
	}
	
	/**
	 * Count the number of children that are typically specified as
	 * `props.children`.
	 *
	 * See https://facebook.github.io/react/docs/top-level-api.html#react.children.count
	 *
	 * @param {?*} children Children tree container.
	 * @return {number} The number of children.
	 */
	function countChildren(children, context) {
	  return traverseAllChildren(children, forEachSingleChildDummy, null);
	}
	
	/**
	 * Flatten a children object (typically specified as `props.children`) and
	 * return an array with appropriately re-keyed children.
	 *
	 * See https://facebook.github.io/react/docs/top-level-api.html#react.children.toarray
	 */
	function toArray(children) {
	  var result = [];
	  mapIntoWithKeyPrefixInternal(children, result, null, emptyFunction.thatReturnsArgument);
	  return result;
	}
	
	var ReactChildren = {
	  forEach: forEachChildren,
	  map: mapChildren,
	  mapIntoWithKeyPrefixInternal: mapIntoWithKeyPrefixInternal,
	  count: countChildren,
	  toArray: toArray
	};
	
	module.exports = ReactChildren;

/***/ }),
/* 6 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */
	
	'use strict';
	
	var _prodInvariant = __webpack_require__(7);
	
	var invariant = __webpack_require__(8);
	
	/**
	 * Static poolers. Several custom versions for each potential number of
	 * arguments. A completely generic pooler is easy to implement, but would
	 * require accessing the `arguments` object. In each of these, `this` refers to
	 * the Class itself, not an instance. If any others are needed, simply add them
	 * here, or in their own files.
	 */
	var oneArgumentPooler = function oneArgumentPooler(copyFieldsFrom) {
	  var Klass = this;
	  if (Klass.instancePool.length) {
	    var instance = Klass.instancePool.pop();
	    Klass.call(instance, copyFieldsFrom);
	    return instance;
	  } else {
	    return new Klass(copyFieldsFrom);
	  }
	};
	
	var twoArgumentPooler = function twoArgumentPooler(a1, a2) {
	  var Klass = this;
	  if (Klass.instancePool.length) {
	    var instance = Klass.instancePool.pop();
	    Klass.call(instance, a1, a2);
	    return instance;
	  } else {
	    return new Klass(a1, a2);
	  }
	};
	
	var threeArgumentPooler = function threeArgumentPooler(a1, a2, a3) {
	  var Klass = this;
	  if (Klass.instancePool.length) {
	    var instance = Klass.instancePool.pop();
	    Klass.call(instance, a1, a2, a3);
	    return instance;
	  } else {
	    return new Klass(a1, a2, a3);
	  }
	};
	
	var fourArgumentPooler = function fourArgumentPooler(a1, a2, a3, a4) {
	  var Klass = this;
	  if (Klass.instancePool.length) {
	    var instance = Klass.instancePool.pop();
	    Klass.call(instance, a1, a2, a3, a4);
	    return instance;
	  } else {
	    return new Klass(a1, a2, a3, a4);
	  }
	};
	
	var standardReleaser = function standardReleaser(instance) {
	  var Klass = this;
	  !(instance instanceof Klass) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Trying to release an instance into a pool of a different type.') : _prodInvariant('25') : void 0;
	  instance.destructor();
	  if (Klass.instancePool.length < Klass.poolSize) {
	    Klass.instancePool.push(instance);
	  }
	};
	
	var DEFAULT_POOL_SIZE = 10;
	var DEFAULT_POOLER = oneArgumentPooler;
	
	/**
	 * Augments `CopyConstructor` to be a poolable class, augmenting only the class
	 * itself (statically) not adding any prototypical fields. Any CopyConstructor
	 * you give this may have a `poolSize` property, and will look for a
	 * prototypical `destructor` on instances.
	 *
	 * @param {Function} CopyConstructor Constructor that can be used to reset.
	 * @param {Function} pooler Customizable pooler.
	 */
	var addPoolingTo = function addPoolingTo(CopyConstructor, pooler) {
	  // Casting as any so that flow ignores the actual implementation and trusts
	  // it to match the type we declared
	  var NewKlass = CopyConstructor;
	  NewKlass.instancePool = [];
	  NewKlass.getPooled = pooler || DEFAULT_POOLER;
	  if (!NewKlass.poolSize) {
	    NewKlass.poolSize = DEFAULT_POOL_SIZE;
	  }
	  NewKlass.release = standardReleaser;
	  return NewKlass;
	};
	
	var PooledClass = {
	  addPoolingTo: addPoolingTo,
	  oneArgumentPooler: oneArgumentPooler,
	  twoArgumentPooler: twoArgumentPooler,
	  threeArgumentPooler: threeArgumentPooler,
	  fourArgumentPooler: fourArgumentPooler
	};
	
	module.exports = PooledClass;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ }),
/* 7 */
/***/ (function(module, exports) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */
	'use strict';
	
	/**
	 * WARNING: DO NOT manually require this module.
	 * This is a replacement for `invariant(...)` used by the error code system
	 * and will _only_ be required by the corresponding babel pass.
	 * It always throws.
	 */
	
	function reactProdInvariant(code) {
	  var argCount = arguments.length - 1;
	
	  var message = 'Minified React error #' + code + '; visit ' + 'http://facebook.github.io/react/docs/error-decoder.html?invariant=' + code;
	
	  for (var argIdx = 0; argIdx < argCount; argIdx++) {
	    message += '&args[]=' + encodeURIComponent(arguments[argIdx + 1]);
	  }
	
	  message += ' for the full message or use the non-minified dev environment' + ' for full errors and additional helpful warnings.';
	
	  var error = new Error(message);
	  error.name = 'Invariant Violation';
	  error.framesToPop = 1; // we don't care about reactProdInvariant's own frame
	
	  throw error;
	}
	
	module.exports = reactProdInvariant;

/***/ }),
/* 8 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	/**
	 * Use invariant() to assert state which your program assumes to be true.
	 *
	 * Provide sprintf-style format (only %s is supported) and arguments
	 * to provide information about what broke and what you were
	 * expecting.
	 *
	 * The invariant message will be stripped in production, but the invariant
	 * will remain to ensure logic does not differ in production.
	 */
	
	var validateFormat = function validateFormat(format) {};
	
	if (process.env.NODE_ENV !== 'production') {
	  validateFormat = function validateFormat(format) {
	    if (format === undefined) {
	      throw new Error('invariant requires an error message argument');
	    }
	  };
	}
	
	function invariant(condition, format, a, b, c, d, e, f) {
	  validateFormat(format);
	
	  if (!condition) {
	    var error;
	    if (format === undefined) {
	      error = new Error('Minified exception occurred; use the non-minified dev environment ' + 'for the full error message and additional helpful warnings.');
	    } else {
	      var args = [a, b, c, d, e, f];
	      var argIndex = 0;
	      error = new Error(format.replace(/%s/g, function () {
	        return args[argIndex++];
	      }));
	      error.name = 'Invariant Violation';
	    }
	
	    error.framesToPop = 1; // we don't care about invariant's own frame
	    throw error;
	  }
	}
	
	module.exports = invariant;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ }),
/* 9 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2014-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
	
	var _assign = __webpack_require__(4);
	
	var ReactCurrentOwner = __webpack_require__(10);
	
	var warning = __webpack_require__(11);
	var canDefineProperty = __webpack_require__(13);
	var hasOwnProperty = Object.prototype.hasOwnProperty;
	
	var REACT_ELEMENT_TYPE = __webpack_require__(14);
	
	var RESERVED_PROPS = {
	  key: true,
	  ref: true,
	  __self: true,
	  __source: true
	};
	
	var specialPropKeyWarningShown, specialPropRefWarningShown;
	
	function hasValidRef(config) {
	  if (process.env.NODE_ENV !== 'production') {
	    if (hasOwnProperty.call(config, 'ref')) {
	      var getter = Object.getOwnPropertyDescriptor(config, 'ref').get;
	      if (getter && getter.isReactWarning) {
	        return false;
	      }
	    }
	  }
	  return config.ref !== undefined;
	}
	
	function hasValidKey(config) {
	  if (process.env.NODE_ENV !== 'production') {
	    if (hasOwnProperty.call(config, 'key')) {
	      var getter = Object.getOwnPropertyDescriptor(config, 'key').get;
	      if (getter && getter.isReactWarning) {
	        return false;
	      }
	    }
	  }
	  return config.key !== undefined;
	}
	
	function defineKeyPropWarningGetter(props, displayName) {
	  var warnAboutAccessingKey = function warnAboutAccessingKey() {
	    if (!specialPropKeyWarningShown) {
	      specialPropKeyWarningShown = true;
	      process.env.NODE_ENV !== 'production' ? warning(false, '%s: `key` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://fb.me/react-special-props)', displayName) : void 0;
	    }
	  };
	  warnAboutAccessingKey.isReactWarning = true;
	  Object.defineProperty(props, 'key', {
	    get: warnAboutAccessingKey,
	    configurable: true
	  });
	}
	
	function defineRefPropWarningGetter(props, displayName) {
	  var warnAboutAccessingRef = function warnAboutAccessingRef() {
	    if (!specialPropRefWarningShown) {
	      specialPropRefWarningShown = true;
	      process.env.NODE_ENV !== 'production' ? warning(false, '%s: `ref` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://fb.me/react-special-props)', displayName) : void 0;
	    }
	  };
	  warnAboutAccessingRef.isReactWarning = true;
	  Object.defineProperty(props, 'ref', {
	    get: warnAboutAccessingRef,
	    configurable: true
	  });
	}
	
	/**
	 * Factory method to create a new React element. This no longer adheres to
	 * the class pattern, so do not use new to call it. Also, no instanceof check
	 * will work. Instead test $$typeof field against Symbol.for('react.element') to check
	 * if something is a React Element.
	 *
	 * @param {*} type
	 * @param {*} key
	 * @param {string|object} ref
	 * @param {*} self A *temporary* helper to detect places where `this` is
	 * different from the `owner` when React.createElement is called, so that we
	 * can warn. We want to get rid of owner and replace string `ref`s with arrow
	 * functions, and as long as `this` and owner are the same, there will be no
	 * change in behavior.
	 * @param {*} source An annotation object (added by a transpiler or otherwise)
	 * indicating filename, line number, and/or other information.
	 * @param {*} owner
	 * @param {*} props
	 * @internal
	 */
	var ReactElement = function ReactElement(type, key, ref, self, source, owner, props) {
	  var element = {
	    // This tag allow us to uniquely identify this as a React Element
	    $$typeof: REACT_ELEMENT_TYPE,
	
	    // Built-in properties that belong on the element
	    type: type,
	    key: key,
	    ref: ref,
	    props: props,
	
	    // Record the component responsible for creating this element.
	    _owner: owner
	  };
	
	  if (process.env.NODE_ENV !== 'production') {
	    // The validation flag is currently mutative. We put it on
	    // an external backing store so that we can freeze the whole object.
	    // This can be replaced with a WeakMap once they are implemented in
	    // commonly used development environments.
	    element._store = {};
	
	    // To make comparing ReactElements easier for testing purposes, we make
	    // the validation flag non-enumerable (where possible, which should
	    // include every environment we run tests in), so the test framework
	    // ignores it.
	    if (canDefineProperty) {
	      Object.defineProperty(element._store, 'validated', {
	        configurable: false,
	        enumerable: false,
	        writable: true,
	        value: false
	      });
	      // self and source are DEV only properties.
	      Object.defineProperty(element, '_self', {
	        configurable: false,
	        enumerable: false,
	        writable: false,
	        value: self
	      });
	      // Two elements created in two different places should be considered
	      // equal for testing purposes and therefore we hide it from enumeration.
	      Object.defineProperty(element, '_source', {
	        configurable: false,
	        enumerable: false,
	        writable: false,
	        value: source
	      });
	    } else {
	      element._store.validated = false;
	      element._self = self;
	      element._source = source;
	    }
	    if (Object.freeze) {
	      Object.freeze(element.props);
	      Object.freeze(element);
	    }
	  }
	
	  return element;
	};
	
	/**
	 * Create and return a new ReactElement of the given type.
	 * See https://facebook.github.io/react/docs/top-level-api.html#react.createelement
	 */
	ReactElement.createElement = function (type, config, children) {
	  var propName;
	
	  // Reserved names are extracted
	  var props = {};
	
	  var key = null;
	  var ref = null;
	  var self = null;
	  var source = null;
	
	  if (config != null) {
	    if (hasValidRef(config)) {
	      ref = config.ref;
	    }
	    if (hasValidKey(config)) {
	      key = '' + config.key;
	    }
	
	    self = config.__self === undefined ? null : config.__self;
	    source = config.__source === undefined ? null : config.__source;
	    // Remaining properties are added to a new props object
	    for (propName in config) {
	      if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
	        props[propName] = config[propName];
	      }
	    }
	  }
	
	  // Children can be more than one argument, and those are transferred onto
	  // the newly allocated props object.
	  var childrenLength = arguments.length - 2;
	  if (childrenLength === 1) {
	    props.children = children;
	  } else if (childrenLength > 1) {
	    var childArray = Array(childrenLength);
	    for (var i = 0; i < childrenLength; i++) {
	      childArray[i] = arguments[i + 2];
	    }
	    if (process.env.NODE_ENV !== 'production') {
	      if (Object.freeze) {
	        Object.freeze(childArray);
	      }
	    }
	    props.children = childArray;
	  }
	
	  // Resolve default props
	  if (type && type.defaultProps) {
	    var defaultProps = type.defaultProps;
	    for (propName in defaultProps) {
	      if (props[propName] === undefined) {
	        props[propName] = defaultProps[propName];
	      }
	    }
	  }
	  if (process.env.NODE_ENV !== 'production') {
	    if (key || ref) {
	      if (typeof props.$$typeof === 'undefined' || props.$$typeof !== REACT_ELEMENT_TYPE) {
	        var displayName = typeof type === 'function' ? type.displayName || type.name || 'Unknown' : type;
	        if (key) {
	          defineKeyPropWarningGetter(props, displayName);
	        }
	        if (ref) {
	          defineRefPropWarningGetter(props, displayName);
	        }
	      }
	    }
	  }
	  return ReactElement(type, key, ref, self, source, ReactCurrentOwner.current, props);
	};
	
	/**
	 * Return a function that produces ReactElements of a given type.
	 * See https://facebook.github.io/react/docs/top-level-api.html#react.createfactory
	 */
	ReactElement.createFactory = function (type) {
	  var factory = ReactElement.createElement.bind(null, type);
	  // Expose the type on the factory and the prototype so that it can be
	  // easily accessed on elements. E.g. `<Foo />.type === Foo`.
	  // This should not be named `constructor` since this may not be the function
	  // that created the element, and it may not even be a constructor.
	  // Legacy hook TODO: Warn if this is accessed
	  factory.type = type;
	  return factory;
	};
	
	ReactElement.cloneAndReplaceKey = function (oldElement, newKey) {
	  var newElement = ReactElement(oldElement.type, newKey, oldElement.ref, oldElement._self, oldElement._source, oldElement._owner, oldElement.props);
	
	  return newElement;
	};
	
	/**
	 * Clone and return a new ReactElement using element as the starting point.
	 * See https://facebook.github.io/react/docs/top-level-api.html#react.cloneelement
	 */
	ReactElement.cloneElement = function (element, config, children) {
	  var propName;
	
	  // Original props are copied
	  var props = _assign({}, element.props);
	
	  // Reserved names are extracted
	  var key = element.key;
	  var ref = element.ref;
	  // Self is preserved since the owner is preserved.
	  var self = element._self;
	  // Source is preserved since cloneElement is unlikely to be targeted by a
	  // transpiler, and the original source is probably a better indicator of the
	  // true owner.
	  var source = element._source;
	
	  // Owner will be preserved, unless ref is overridden
	  var owner = element._owner;
	
	  if (config != null) {
	    if (hasValidRef(config)) {
	      // Silently steal the ref from the parent.
	      ref = config.ref;
	      owner = ReactCurrentOwner.current;
	    }
	    if (hasValidKey(config)) {
	      key = '' + config.key;
	    }
	
	    // Remaining properties override existing props
	    var defaultProps;
	    if (element.type && element.type.defaultProps) {
	      defaultProps = element.type.defaultProps;
	    }
	    for (propName in config) {
	      if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
	        if (config[propName] === undefined && defaultProps !== undefined) {
	          // Resolve default props
	          props[propName] = defaultProps[propName];
	        } else {
	          props[propName] = config[propName];
	        }
	      }
	    }
	  }
	
	  // Children can be more than one argument, and those are transferred onto
	  // the newly allocated props object.
	  var childrenLength = arguments.length - 2;
	  if (childrenLength === 1) {
	    props.children = children;
	  } else if (childrenLength > 1) {
	    var childArray = Array(childrenLength);
	    for (var i = 0; i < childrenLength; i++) {
	      childArray[i] = arguments[i + 2];
	    }
	    props.children = childArray;
	  }
	
	  return ReactElement(element.type, key, ref, self, source, owner, props);
	};
	
	/**
	 * Verifies the object is a ReactElement.
	 * See https://facebook.github.io/react/docs/top-level-api.html#react.isvalidelement
	 * @param {?object} object
	 * @return {boolean} True if `object` is a valid component.
	 * @final
	 */
	ReactElement.isValidElement = function (object) {
	  return (typeof object === 'undefined' ? 'undefined' : _typeof(object)) === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
	};
	
	module.exports = ReactElement;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ }),
/* 10 */
/***/ (function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */
	
	'use strict';
	
	/**
	 * Keeps track of the current owner.
	 *
	 * The current owner is the component who should own any components that are
	 * currently being constructed.
	 */
	
	var ReactCurrentOwner = {
	
	  /**
	   * @internal
	   * @type {ReactComponent}
	   */
	  current: null
	
	};
	
	module.exports = ReactCurrentOwner;

/***/ }),
/* 11 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var emptyFunction = __webpack_require__(12);
	
	/**
	 * Similar to invariant but only logs a warning if the condition is not met.
	 * This can be used to log issues in development environments in critical
	 * paths. Removing the logging code for production environments will keep the
	 * same logic and follow the same code paths.
	 */
	
	var warning = emptyFunction;
	
	if (process.env.NODE_ENV !== 'production') {
	  (function () {
	    var printWarning = function printWarning(format) {
	      for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
	        args[_key - 1] = arguments[_key];
	      }
	
	      var argIndex = 0;
	      var message = 'Warning: ' + format.replace(/%s/g, function () {
	        return args[argIndex++];
	      });
	      if (typeof console !== 'undefined') {
	        console.error(message);
	      }
	      try {
	        // --- Welcome to debugging React ---
	        // This error was thrown as a convenience so that you can use this stack
	        // to find the callsite that caused this warning to fire.
	        throw new Error(message);
	      } catch (x) {}
	    };
	
	    warning = function warning(condition, format) {
	      if (format === undefined) {
	        throw new Error('`warning(condition, format, ...args)` requires a warning ' + 'message argument');
	      }
	
	      if (format.indexOf('Failed Composite propType: ') === 0) {
	        return; // Ignore CompositeComponent proptype check.
	      }
	
	      if (!condition) {
	        for (var _len2 = arguments.length, args = Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {
	          args[_key2 - 2] = arguments[_key2];
	        }
	
	        printWarning.apply(undefined, [format].concat(args));
	      }
	    };
	  })();
	}
	
	module.exports = warning;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ }),
/* 12 */
/***/ (function(module, exports) {

	"use strict";
	
	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */
	
	function makeEmptyFunction(arg) {
	  return function () {
	    return arg;
	  };
	}
	
	/**
	 * This function accepts and discards inputs; it has no side effects. This is
	 * primarily useful idiomatically for overridable function endpoints which
	 * always need to be callable, since JS lacks a null-call idiom ala Cocoa.
	 */
	var emptyFunction = function emptyFunction() {};
	
	emptyFunction.thatReturns = makeEmptyFunction;
	emptyFunction.thatReturnsFalse = makeEmptyFunction(false);
	emptyFunction.thatReturnsTrue = makeEmptyFunction(true);
	emptyFunction.thatReturnsNull = makeEmptyFunction(null);
	emptyFunction.thatReturnsThis = function () {
	  return this;
	};
	emptyFunction.thatReturnsArgument = function (arg) {
	  return arg;
	};
	
	module.exports = emptyFunction;

/***/ }),
/* 13 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */
	
	'use strict';
	
	var canDefineProperty = false;
	if (process.env.NODE_ENV !== 'production') {
	  try {
	    // $FlowFixMe https://github.com/facebook/flow/issues/285
	    Object.defineProperty({}, 'x', { get: function get() {} });
	    canDefineProperty = true;
	  } catch (x) {
	    // IE will fail on defineProperty
	  }
	}
	
	module.exports = canDefineProperty;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ }),
/* 14 */
/***/ (function(module, exports) {

	/**
	 * Copyright 2014-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */
	
	'use strict';
	
	// The Symbol used to tag the ReactElement type. If there is no native Symbol
	// nor polyfill, then a plain number is used for performance.
	
	var REACT_ELEMENT_TYPE = typeof Symbol === 'function' && Symbol['for'] && Symbol['for']('react.element') || 0xeac7;
	
	module.exports = REACT_ELEMENT_TYPE;

/***/ }),
/* 15 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
	
	var _prodInvariant = __webpack_require__(7);
	
	var ReactCurrentOwner = __webpack_require__(10);
	var REACT_ELEMENT_TYPE = __webpack_require__(14);
	
	var getIteratorFn = __webpack_require__(16);
	var invariant = __webpack_require__(8);
	var KeyEscapeUtils = __webpack_require__(17);
	var warning = __webpack_require__(11);
	
	var SEPARATOR = '.';
	var SUBSEPARATOR = ':';
	
	/**
	 * This is inlined from ReactElement since this file is shared between
	 * isomorphic and renderers. We could extract this to a
	 *
	 */
	
	/**
	 * TODO: Test that a single child and an array with one item have the same key
	 * pattern.
	 */
	
	var didWarnAboutMaps = false;
	
	/**
	 * Generate a key string that identifies a component within a set.
	 *
	 * @param {*} component A component that could contain a manual key.
	 * @param {number} index Index that is used if a manual key is not provided.
	 * @return {string}
	 */
	function getComponentKey(component, index) {
	  // Do some typechecking here since we call this blindly. We want to ensure
	  // that we don't block potential future ES APIs.
	  if (component && (typeof component === 'undefined' ? 'undefined' : _typeof(component)) === 'object' && component.key != null) {
	    // Explicit key
	    return KeyEscapeUtils.escape(component.key);
	  }
	  // Implicit key determined by the index in the set
	  return index.toString(36);
	}
	
	/**
	 * @param {?*} children Children tree container.
	 * @param {!string} nameSoFar Name of the key path so far.
	 * @param {!function} callback Callback to invoke with each child found.
	 * @param {?*} traverseContext Used to pass information throughout the traversal
	 * process.
	 * @return {!number} The number of children in this subtree.
	 */
	function traverseAllChildrenImpl(children, nameSoFar, callback, traverseContext) {
	  var type = typeof children === 'undefined' ? 'undefined' : _typeof(children);
	
	  if (type === 'undefined' || type === 'boolean') {
	    // All of the above are perceived as null.
	    children = null;
	  }
	
	  if (children === null || type === 'string' || type === 'number' ||
	  // The following is inlined from ReactElement. This means we can optimize
	  // some checks. React Fiber also inlines this logic for similar purposes.
	  type === 'object' && children.$$typeof === REACT_ELEMENT_TYPE) {
	    callback(traverseContext, children,
	    // If it's the only child, treat the name as if it was wrapped in an array
	    // so that it's consistent if the number of children grows.
	    nameSoFar === '' ? SEPARATOR + getComponentKey(children, 0) : nameSoFar);
	    return 1;
	  }
	
	  var child;
	  var nextName;
	  var subtreeCount = 0; // Count of children found in the current subtree.
	  var nextNamePrefix = nameSoFar === '' ? SEPARATOR : nameSoFar + SUBSEPARATOR;
	
	  if (Array.isArray(children)) {
	    for (var i = 0; i < children.length; i++) {
	      child = children[i];
	      nextName = nextNamePrefix + getComponentKey(child, i);
	      subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
	    }
	  } else {
	    var iteratorFn = getIteratorFn(children);
	    if (iteratorFn) {
	      var iterator = iteratorFn.call(children);
	      var step;
	      if (iteratorFn !== children.entries) {
	        var ii = 0;
	        while (!(step = iterator.next()).done) {
	          child = step.value;
	          nextName = nextNamePrefix + getComponentKey(child, ii++);
	          subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
	        }
	      } else {
	        if (process.env.NODE_ENV !== 'production') {
	          var mapsAsChildrenAddendum = '';
	          if (ReactCurrentOwner.current) {
	            var mapsAsChildrenOwnerName = ReactCurrentOwner.current.getName();
	            if (mapsAsChildrenOwnerName) {
	              mapsAsChildrenAddendum = ' Check the render method of `' + mapsAsChildrenOwnerName + '`.';
	            }
	          }
	          process.env.NODE_ENV !== 'production' ? warning(didWarnAboutMaps, 'Using Maps as children is not yet fully supported. It is an ' + 'experimental feature that might be removed. Convert it to a ' + 'sequence / iterable of keyed ReactElements instead.%s', mapsAsChildrenAddendum) : void 0;
	          didWarnAboutMaps = true;
	        }
	        // Iterator will provide entry [k,v] tuples rather than values.
	        while (!(step = iterator.next()).done) {
	          var entry = step.value;
	          if (entry) {
	            child = entry[1];
	            nextName = nextNamePrefix + KeyEscapeUtils.escape(entry[0]) + SUBSEPARATOR + getComponentKey(child, 0);
	            subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
	          }
	        }
	      }
	    } else if (type === 'object') {
	      var addendum = '';
	      if (process.env.NODE_ENV !== 'production') {
	        addendum = ' If you meant to render a collection of children, use an array ' + 'instead or wrap the object using createFragment(object) from the ' + 'React add-ons.';
	        if (children._isReactElement) {
	          addendum = ' It looks like you\'re using an element created by a different ' + 'version of React. Make sure to use only one copy of React.';
	        }
	        if (ReactCurrentOwner.current) {
	          var name = ReactCurrentOwner.current.getName();
	          if (name) {
	            addendum += ' Check the render method of `' + name + '`.';
	          }
	        }
	      }
	      var childrenString = String(children);
	       true ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Objects are not valid as a React child (found: %s).%s', childrenString === '[object Object]' ? 'object with keys {' + Object.keys(children).join(', ') + '}' : childrenString, addendum) : _prodInvariant('31', childrenString === '[object Object]' ? 'object with keys {' + Object.keys(children).join(', ') + '}' : childrenString, addendum) : void 0;
	    }
	  }
	
	  return subtreeCount;
	}
	
	/**
	 * Traverses children that are typically specified as `props.children`, but
	 * might also be specified through attributes:
	 *
	 * - `traverseAllChildren(this.props.children, ...)`
	 * - `traverseAllChildren(this.props.leftPanelChildren, ...)`
	 *
	 * The `traverseContext` is an optional argument that is passed through the
	 * entire traversal. It can be used to store accumulations or anything else that
	 * the callback might find relevant.
	 *
	 * @param {?*} children Children tree object.
	 * @param {!function} callback To invoke upon traversing each child.
	 * @param {?*} traverseContext Context for traversal.
	 * @return {!number} The number of children in this subtree.
	 */
	function traverseAllChildren(children, callback, traverseContext) {
	  if (children == null) {
	    return 0;
	  }
	
	  return traverseAllChildrenImpl(children, '', callback, traverseContext);
	}
	
	module.exports = traverseAllChildren;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ }),
/* 16 */
/***/ (function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */
	
	'use strict';
	
	/* global Symbol */
	
	var ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;
	var FAUX_ITERATOR_SYMBOL = '@@iterator'; // Before Symbol spec.
	
	/**
	 * Returns the iterator method function contained on the iterable object.
	 *
	 * Be sure to invoke the function with the iterable as context:
	 *
	 *     var iteratorFn = getIteratorFn(myIterable);
	 *     if (iteratorFn) {
	 *       var iterator = iteratorFn.call(myIterable);
	 *       ...
	 *     }
	 *
	 * @param {?object} maybeIterable
	 * @return {?function}
	 */
	function getIteratorFn(maybeIterable) {
	  var iteratorFn = maybeIterable && (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL]);
	  if (typeof iteratorFn === 'function') {
	    return iteratorFn;
	  }
	}
	
	module.exports = getIteratorFn;

/***/ }),
/* 17 */
/***/ (function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */
	
	'use strict';
	
	/**
	 * Escape and wrap key so it is safe to use as a reactid
	 *
	 * @param {string} key to be escaped.
	 * @return {string} the escaped key.
	 */
	
	function escape(key) {
	  var escapeRegex = /[=:]/g;
	  var escaperLookup = {
	    '=': '=0',
	    ':': '=2'
	  };
	  var escapedString = ('' + key).replace(escapeRegex, function (match) {
	    return escaperLookup[match];
	  });
	
	  return '$' + escapedString;
	}
	
	/**
	 * Unescape and unwrap key for human-readable display
	 *
	 * @param {string} key to unescape.
	 * @return {string} the unescaped key.
	 */
	function unescape(key) {
	  var unescapeRegex = /(=0|=2)/g;
	  var unescaperLookup = {
	    '=0': '=',
	    '=2': ':'
	  };
	  var keySubstring = key[0] === '.' && key[1] === '$' ? key.substring(2) : key.substring(1);
	
	  return ('' + keySubstring).replace(unescapeRegex, function (match) {
	    return unescaperLookup[match];
	  });
	}
	
	var KeyEscapeUtils = {
	  escape: escape,
	  unescape: unescape
	};
	
	module.exports = KeyEscapeUtils;

/***/ }),
/* 18 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
	
	var _prodInvariant = __webpack_require__(7);
	
	var ReactNoopUpdateQueue = __webpack_require__(19);
	
	var canDefineProperty = __webpack_require__(13);
	var emptyObject = __webpack_require__(20);
	var invariant = __webpack_require__(8);
	var warning = __webpack_require__(11);
	
	/**
	 * Base class helpers for the updating state of a component.
	 */
	function ReactComponent(props, context, updater) {
	  this.props = props;
	  this.context = context;
	  this.refs = emptyObject;
	  // We initialize the default updater but the real one gets injected by the
	  // renderer.
	  this.updater = updater || ReactNoopUpdateQueue;
	}
	
	ReactComponent.prototype.isReactComponent = {};
	
	/**
	 * Sets a subset of the state. Always use this to mutate
	 * state. You should treat `this.state` as immutable.
	 *
	 * There is no guarantee that `this.state` will be immediately updated, so
	 * accessing `this.state` after calling this method may return the old value.
	 *
	 * There is no guarantee that calls to `setState` will run synchronously,
	 * as they may eventually be batched together.  You can provide an optional
	 * callback that will be executed when the call to setState is actually
	 * completed.
	 *
	 * When a function is provided to setState, it will be called at some point in
	 * the future (not synchronously). It will be called with the up to date
	 * component arguments (state, props, context). These values can be different
	 * from this.* because your function may be called after receiveProps but before
	 * shouldComponentUpdate, and this new state, props, and context will not yet be
	 * assigned to this.
	 *
	 * @param {object|function} partialState Next partial state or function to
	 *        produce next partial state to be merged with current state.
	 * @param {?function} callback Called after state is updated.
	 * @final
	 * @protected
	 */
	ReactComponent.prototype.setState = function (partialState, callback) {
	  !((typeof partialState === 'undefined' ? 'undefined' : _typeof(partialState)) === 'object' || typeof partialState === 'function' || partialState == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'setState(...): takes an object of state variables to update or a function which returns an object of state variables.') : _prodInvariant('85') : void 0;
	  this.updater.enqueueSetState(this, partialState);
	  if (callback) {
	    this.updater.enqueueCallback(this, callback, 'setState');
	  }
	};
	
	/**
	 * Forces an update. This should only be invoked when it is known with
	 * certainty that we are **not** in a DOM transaction.
	 *
	 * You may want to call this when you know that some deeper aspect of the
	 * component's state has changed but `setState` was not called.
	 *
	 * This will not invoke `shouldComponentUpdate`, but it will invoke
	 * `componentWillUpdate` and `componentDidUpdate`.
	 *
	 * @param {?function} callback Called after update is complete.
	 * @final
	 * @protected
	 */
	ReactComponent.prototype.forceUpdate = function (callback) {
	  this.updater.enqueueForceUpdate(this);
	  if (callback) {
	    this.updater.enqueueCallback(this, callback, 'forceUpdate');
	  }
	};
	
	/**
	 * Deprecated APIs. These APIs used to exist on classic React classes but since
	 * we would like to deprecate them, we're not going to move them over to this
	 * modern base class. Instead, we define a getter that warns if it's accessed.
	 */
	if (process.env.NODE_ENV !== 'production') {
	  var deprecatedAPIs = {
	    isMounted: ['isMounted', 'Instead, make sure to clean up subscriptions and pending requests in ' + 'componentWillUnmount to prevent memory leaks.'],
	    replaceState: ['replaceState', 'Refactor your code to use setState instead (see ' + 'https://github.com/facebook/react/issues/3236).']
	  };
	  var defineDeprecationWarning = function defineDeprecationWarning(methodName, info) {
	    if (canDefineProperty) {
	      Object.defineProperty(ReactComponent.prototype, methodName, {
	        get: function get() {
	          process.env.NODE_ENV !== 'production' ? warning(false, '%s(...) is deprecated in plain JavaScript React classes. %s', info[0], info[1]) : void 0;
	          return undefined;
	        }
	      });
	    }
	  };
	  for (var fnName in deprecatedAPIs) {
	    if (deprecatedAPIs.hasOwnProperty(fnName)) {
	      defineDeprecationWarning(fnName, deprecatedAPIs[fnName]);
	    }
	  }
	}
	
	module.exports = ReactComponent;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ }),
/* 19 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2015-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var warning = __webpack_require__(11);
	
	function warnNoop(publicInstance, callerName) {
	  if (process.env.NODE_ENV !== 'production') {
	    var constructor = publicInstance.constructor;
	    process.env.NODE_ENV !== 'production' ? warning(false, '%s(...): Can only update a mounted or mounting component. ' + 'This usually means you called %s() on an unmounted component. ' + 'This is a no-op. Please check the code for the %s component.', callerName, callerName, constructor && (constructor.displayName || constructor.name) || 'ReactClass') : void 0;
	  }
	}
	
	/**
	 * This is the abstract API for an update queue.
	 */
	var ReactNoopUpdateQueue = {
	
	  /**
	   * Checks whether or not this composite component is mounted.
	   * @param {ReactClass} publicInstance The instance we want to test.
	   * @return {boolean} True if mounted, false otherwise.
	   * @protected
	   * @final
	   */
	  isMounted: function isMounted(publicInstance) {
	    return false;
	  },
	
	  /**
	   * Enqueue a callback that will be executed after all the pending updates
	   * have processed.
	   *
	   * @param {ReactClass} publicInstance The instance to use as `this` context.
	   * @param {?function} callback Called after state is updated.
	   * @internal
	   */
	  enqueueCallback: function enqueueCallback(publicInstance, callback) {},
	
	  /**
	   * Forces an update. This should only be invoked when it is known with
	   * certainty that we are **not** in a DOM transaction.
	   *
	   * You may want to call this when you know that some deeper aspect of the
	   * component's state has changed but `setState` was not called.
	   *
	   * This will not invoke `shouldComponentUpdate`, but it will invoke
	   * `componentWillUpdate` and `componentDidUpdate`.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @internal
	   */
	  enqueueForceUpdate: function enqueueForceUpdate(publicInstance) {
	    warnNoop(publicInstance, 'forceUpdate');
	  },
	
	  /**
	   * Replaces all of the state. Always use this or `setState` to mutate state.
	   * You should treat `this.state` as immutable.
	   *
	   * There is no guarantee that `this.state` will be immediately updated, so
	   * accessing `this.state` after calling this method may return the old value.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @param {object} completeState Next state.
	   * @internal
	   */
	  enqueueReplaceState: function enqueueReplaceState(publicInstance, completeState) {
	    warnNoop(publicInstance, 'replaceState');
	  },
	
	  /**
	   * Sets a subset of the state. This only exists because _pendingState is
	   * internal. This provides a merging strategy that is not available to deep
	   * properties which is confusing. TODO: Expose pendingState or don't use it
	   * during the merge.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @param {object} partialState Next partial state to be merged with state.
	   * @internal
	   */
	  enqueueSetState: function enqueueSetState(publicInstance, partialState) {
	    warnNoop(publicInstance, 'setState');
	  }
	};
	
	module.exports = ReactNoopUpdateQueue;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ }),
/* 20 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var emptyObject = {};
	
	if (process.env.NODE_ENV !== 'production') {
	  Object.freeze(emptyObject);
	}
	
	module.exports = emptyObject;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ }),
/* 21 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var _assign = __webpack_require__(4);
	
	var ReactComponent = __webpack_require__(18);
	var ReactNoopUpdateQueue = __webpack_require__(19);
	
	var emptyObject = __webpack_require__(20);
	
	/**
	 * Base class helpers for the updating state of a component.
	 */
	function ReactPureComponent(props, context, updater) {
	  // Duplicated from ReactComponent.
	  this.props = props;
	  this.context = context;
	  this.refs = emptyObject;
	  // We initialize the default updater but the real one gets injected by the
	  // renderer.
	  this.updater = updater || ReactNoopUpdateQueue;
	}
	
	function ComponentDummy() {}
	ComponentDummy.prototype = ReactComponent.prototype;
	ReactPureComponent.prototype = new ComponentDummy();
	ReactPureComponent.prototype.constructor = ReactPureComponent;
	// Avoid an extra prototype jump for these methods.
	_assign(ReactPureComponent.prototype, ReactComponent.prototype);
	ReactPureComponent.prototype.isPureReactComponent = true;
	
	module.exports = ReactPureComponent;

/***/ }),
/* 22 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
	
	var _prodInvariant = __webpack_require__(7),
	    _assign = __webpack_require__(4);
	
	var ReactComponent = __webpack_require__(18);
	var ReactElement = __webpack_require__(9);
	var ReactPropTypeLocationNames = __webpack_require__(23);
	var ReactNoopUpdateQueue = __webpack_require__(19);
	
	var emptyObject = __webpack_require__(20);
	var invariant = __webpack_require__(8);
	var warning = __webpack_require__(11);
	
	var MIXINS_KEY = 'mixins';
	
	// Helper function to allow the creation of anonymous functions which do not
	// have .name set to the name of the variable being assigned to.
	function identity(fn) {
	  return fn;
	}
	
	/**
	 * Policies that describe methods in `ReactClassInterface`.
	 */
	
	var injectedMixins = [];
	
	/**
	 * Composite components are higher-level components that compose other composite
	 * or host components.
	 *
	 * To create a new type of `ReactClass`, pass a specification of
	 * your new class to `React.createClass`. The only requirement of your class
	 * specification is that you implement a `render` method.
	 *
	 *   var MyComponent = React.createClass({
	 *     render: function() {
	 *       return <div>Hello World</div>;
	 *     }
	 *   });
	 *
	 * The class specification supports a specific protocol of methods that have
	 * special meaning (e.g. `render`). See `ReactClassInterface` for
	 * more the comprehensive protocol. Any other properties and methods in the
	 * class specification will be available on the prototype.
	 *
	 * @interface ReactClassInterface
	 * @internal
	 */
	var ReactClassInterface = {
	
	  /**
	   * An array of Mixin objects to include when defining your component.
	   *
	   * @type {array}
	   * @optional
	   */
	  mixins: 'DEFINE_MANY',
	
	  /**
	   * An object containing properties and methods that should be defined on
	   * the component's constructor instead of its prototype (static methods).
	   *
	   * @type {object}
	   * @optional
	   */
	  statics: 'DEFINE_MANY',
	
	  /**
	   * Definition of prop types for this component.
	   *
	   * @type {object}
	   * @optional
	   */
	  propTypes: 'DEFINE_MANY',
	
	  /**
	   * Definition of context types for this component.
	   *
	   * @type {object}
	   * @optional
	   */
	  contextTypes: 'DEFINE_MANY',
	
	  /**
	   * Definition of context types this component sets for its children.
	   *
	   * @type {object}
	   * @optional
	   */
	  childContextTypes: 'DEFINE_MANY',
	
	  // ==== Definition methods ====
	
	  /**
	   * Invoked when the component is mounted. Values in the mapping will be set on
	   * `this.props` if that prop is not specified (i.e. using an `in` check).
	   *
	   * This method is invoked before `getInitialState` and therefore cannot rely
	   * on `this.state` or use `this.setState`.
	   *
	   * @return {object}
	   * @optional
	   */
	  getDefaultProps: 'DEFINE_MANY_MERGED',
	
	  /**
	   * Invoked once before the component is mounted. The return value will be used
	   * as the initial value of `this.state`.
	   *
	   *   getInitialState: function() {
	   *     return {
	   *       isOn: false,
	   *       fooBaz: new BazFoo()
	   *     }
	   *   }
	   *
	   * @return {object}
	   * @optional
	   */
	  getInitialState: 'DEFINE_MANY_MERGED',
	
	  /**
	   * @return {object}
	   * @optional
	   */
	  getChildContext: 'DEFINE_MANY_MERGED',
	
	  /**
	   * Uses props from `this.props` and state from `this.state` to render the
	   * structure of the component.
	   *
	   * No guarantees are made about when or how often this method is invoked, so
	   * it must not have side effects.
	   *
	   *   render: function() {
	   *     var name = this.props.name;
	   *     return <div>Hello, {name}!</div>;
	   *   }
	   *
	   * @return {ReactComponent}
	   * @required
	   */
	  render: 'DEFINE_ONCE',
	
	  // ==== Delegate methods ====
	
	  /**
	   * Invoked when the component is initially created and about to be mounted.
	   * This may have side effects, but any external subscriptions or data created
	   * by this method must be cleaned up in `componentWillUnmount`.
	   *
	   * @optional
	   */
	  componentWillMount: 'DEFINE_MANY',
	
	  /**
	   * Invoked when the component has been mounted and has a DOM representation.
	   * However, there is no guarantee that the DOM node is in the document.
	   *
	   * Use this as an opportunity to operate on the DOM when the component has
	   * been mounted (initialized and rendered) for the first time.
	   *
	   * @param {DOMElement} rootNode DOM element representing the component.
	   * @optional
	   */
	  componentDidMount: 'DEFINE_MANY',
	
	  /**
	   * Invoked before the component receives new props.
	   *
	   * Use this as an opportunity to react to a prop transition by updating the
	   * state using `this.setState`. Current props are accessed via `this.props`.
	   *
	   *   componentWillReceiveProps: function(nextProps, nextContext) {
	   *     this.setState({
	   *       likesIncreasing: nextProps.likeCount > this.props.likeCount
	   *     });
	   *   }
	   *
	   * NOTE: There is no equivalent `componentWillReceiveState`. An incoming prop
	   * transition may cause a state change, but the opposite is not true. If you
	   * need it, you are probably looking for `componentWillUpdate`.
	   *
	   * @param {object} nextProps
	   * @optional
	   */
	  componentWillReceiveProps: 'DEFINE_MANY',
	
	  /**
	   * Invoked while deciding if the component should be updated as a result of
	   * receiving new props, state and/or context.
	   *
	   * Use this as an opportunity to `return false` when you're certain that the
	   * transition to the new props/state/context will not require a component
	   * update.
	   *
	   *   shouldComponentUpdate: function(nextProps, nextState, nextContext) {
	   *     return !equal(nextProps, this.props) ||
	   *       !equal(nextState, this.state) ||
	   *       !equal(nextContext, this.context);
	   *   }
	   *
	   * @param {object} nextProps
	   * @param {?object} nextState
	   * @param {?object} nextContext
	   * @return {boolean} True if the component should update.
	   * @optional
	   */
	  shouldComponentUpdate: 'DEFINE_ONCE',
	
	  /**
	   * Invoked when the component is about to update due to a transition from
	   * `this.props`, `this.state` and `this.context` to `nextProps`, `nextState`
	   * and `nextContext`.
	   *
	   * Use this as an opportunity to perform preparation before an update occurs.
	   *
	   * NOTE: You **cannot** use `this.setState()` in this method.
	   *
	   * @param {object} nextProps
	   * @param {?object} nextState
	   * @param {?object} nextContext
	   * @param {ReactReconcileTransaction} transaction
	   * @optional
	   */
	  componentWillUpdate: 'DEFINE_MANY',
	
	  /**
	   * Invoked when the component's DOM representation has been updated.
	   *
	   * Use this as an opportunity to operate on the DOM when the component has
	   * been updated.
	   *
	   * @param {object} prevProps
	   * @param {?object} prevState
	   * @param {?object} prevContext
	   * @param {DOMElement} rootNode DOM element representing the component.
	   * @optional
	   */
	  componentDidUpdate: 'DEFINE_MANY',
	
	  /**
	   * Invoked when the component is about to be removed from its parent and have
	   * its DOM representation destroyed.
	   *
	   * Use this as an opportunity to deallocate any external resources.
	   *
	   * NOTE: There is no `componentDidUnmount` since your component will have been
	   * destroyed by that point.
	   *
	   * @optional
	   */
	  componentWillUnmount: 'DEFINE_MANY',
	
	  // ==== Advanced methods ====
	
	  /**
	   * Updates the component's currently mounted DOM representation.
	   *
	   * By default, this implements React's rendering and reconciliation algorithm.
	   * Sophisticated clients may wish to override this.
	   *
	   * @param {ReactReconcileTransaction} transaction
	   * @internal
	   * @overridable
	   */
	  updateComponent: 'OVERRIDE_BASE'
	
	};
	
	/**
	 * Mapping from class specification keys to special processing functions.
	 *
	 * Although these are declared like instance properties in the specification
	 * when defining classes using `React.createClass`, they are actually static
	 * and are accessible on the constructor instead of the prototype. Despite
	 * being static, they must be defined outside of the "statics" key under
	 * which all other static methods are defined.
	 */
	var RESERVED_SPEC_KEYS = {
	  displayName: function displayName(Constructor, _displayName) {
	    Constructor.displayName = _displayName;
	  },
	  mixins: function mixins(Constructor, _mixins) {
	    if (_mixins) {
	      for (var i = 0; i < _mixins.length; i++) {
	        mixSpecIntoComponent(Constructor, _mixins[i]);
	      }
	    }
	  },
	  childContextTypes: function childContextTypes(Constructor, _childContextTypes) {
	    if (process.env.NODE_ENV !== 'production') {
	      validateTypeDef(Constructor, _childContextTypes, 'childContext');
	    }
	    Constructor.childContextTypes = _assign({}, Constructor.childContextTypes, _childContextTypes);
	  },
	  contextTypes: function contextTypes(Constructor, _contextTypes) {
	    if (process.env.NODE_ENV !== 'production') {
	      validateTypeDef(Constructor, _contextTypes, 'context');
	    }
	    Constructor.contextTypes = _assign({}, Constructor.contextTypes, _contextTypes);
	  },
	  /**
	   * Special case getDefaultProps which should move into statics but requires
	   * automatic merging.
	   */
	  getDefaultProps: function getDefaultProps(Constructor, _getDefaultProps) {
	    if (Constructor.getDefaultProps) {
	      Constructor.getDefaultProps = createMergedResultFunction(Constructor.getDefaultProps, _getDefaultProps);
	    } else {
	      Constructor.getDefaultProps = _getDefaultProps;
	    }
	  },
	  propTypes: function propTypes(Constructor, _propTypes) {
	    if (process.env.NODE_ENV !== 'production') {
	      validateTypeDef(Constructor, _propTypes, 'prop');
	    }
	    Constructor.propTypes = _assign({}, Constructor.propTypes, _propTypes);
	  },
	  statics: function statics(Constructor, _statics) {
	    mixStaticSpecIntoComponent(Constructor, _statics);
	  },
	  autobind: function autobind() {} };
	
	function validateTypeDef(Constructor, typeDef, location) {
	  for (var propName in typeDef) {
	    if (typeDef.hasOwnProperty(propName)) {
	      // use a warning instead of an invariant so components
	      // don't show up in prod but only in __DEV__
	      process.env.NODE_ENV !== 'production' ? warning(typeof typeDef[propName] === 'function', '%s: %s type `%s` is invalid; it must be a function, usually from ' + 'React.PropTypes.', Constructor.displayName || 'ReactClass', ReactPropTypeLocationNames[location], propName) : void 0;
	    }
	  }
	}
	
	function validateMethodOverride(isAlreadyDefined, name) {
	  var specPolicy = ReactClassInterface.hasOwnProperty(name) ? ReactClassInterface[name] : null;
	
	  // Disallow overriding of base class methods unless explicitly allowed.
	  if (ReactClassMixin.hasOwnProperty(name)) {
	    !(specPolicy === 'OVERRIDE_BASE') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClassInterface: You are attempting to override `%s` from your class specification. Ensure that your method names do not overlap with React methods.', name) : _prodInvariant('73', name) : void 0;
	  }
	
	  // Disallow defining methods more than once unless explicitly allowed.
	  if (isAlreadyDefined) {
	    !(specPolicy === 'DEFINE_MANY' || specPolicy === 'DEFINE_MANY_MERGED') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClassInterface: You are attempting to define `%s` on your component more than once. This conflict may be due to a mixin.', name) : _prodInvariant('74', name) : void 0;
	  }
	}
	
	/**
	 * Mixin helper which handles policy validation and reserved
	 * specification keys when building React classes.
	 */
	function mixSpecIntoComponent(Constructor, spec) {
	  if (!spec) {
	    if (process.env.NODE_ENV !== 'production') {
	      var typeofSpec = typeof spec === 'undefined' ? 'undefined' : _typeof(spec);
	      var isMixinValid = typeofSpec === 'object' && spec !== null;
	
	      process.env.NODE_ENV !== 'production' ? warning(isMixinValid, '%s: You\'re attempting to include a mixin that is either null ' + 'or not an object. Check the mixins included by the component, ' + 'as well as any mixins they include themselves. ' + 'Expected object but got %s.', Constructor.displayName || 'ReactClass', spec === null ? null : typeofSpec) : void 0;
	    }
	
	    return;
	  }
	
	  !(typeof spec !== 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClass: You\'re attempting to use a component class or function as a mixin. Instead, just use a regular object.') : _prodInvariant('75') : void 0;
	  !!ReactElement.isValidElement(spec) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClass: You\'re attempting to use a component as a mixin. Instead, just use a regular object.') : _prodInvariant('76') : void 0;
	
	  var proto = Constructor.prototype;
	  var autoBindPairs = proto.__reactAutoBindPairs;
	
	  // By handling mixins before any other properties, we ensure the same
	  // chaining order is applied to methods with DEFINE_MANY policy, whether
	  // mixins are listed before or after these methods in the spec.
	  if (spec.hasOwnProperty(MIXINS_KEY)) {
	    RESERVED_SPEC_KEYS.mixins(Constructor, spec.mixins);
	  }
	
	  for (var name in spec) {
	    if (!spec.hasOwnProperty(name)) {
	      continue;
	    }
	
	    if (name === MIXINS_KEY) {
	      // We have already handled mixins in a special case above.
	      continue;
	    }
	
	    var property = spec[name];
	    var isAlreadyDefined = proto.hasOwnProperty(name);
	    validateMethodOverride(isAlreadyDefined, name);
	
	    if (RESERVED_SPEC_KEYS.hasOwnProperty(name)) {
	      RESERVED_SPEC_KEYS[name](Constructor, property);
	    } else {
	      // Setup methods on prototype:
	      // The following member methods should not be automatically bound:
	      // 1. Expected ReactClass methods (in the "interface").
	      // 2. Overridden methods (that were mixed in).
	      var isReactClassMethod = ReactClassInterface.hasOwnProperty(name);
	      var isFunction = typeof property === 'function';
	      var shouldAutoBind = isFunction && !isReactClassMethod && !isAlreadyDefined && spec.autobind !== false;
	
	      if (shouldAutoBind) {
	        autoBindPairs.push(name, property);
	        proto[name] = property;
	      } else {
	        if (isAlreadyDefined) {
	          var specPolicy = ReactClassInterface[name];
	
	          // These cases should already be caught by validateMethodOverride.
	          !(isReactClassMethod && (specPolicy === 'DEFINE_MANY_MERGED' || specPolicy === 'DEFINE_MANY')) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClass: Unexpected spec policy %s for key %s when mixing in component specs.', specPolicy, name) : _prodInvariant('77', specPolicy, name) : void 0;
	
	          // For methods which are defined more than once, call the existing
	          // methods before calling the new property, merging if appropriate.
	          if (specPolicy === 'DEFINE_MANY_MERGED') {
	            proto[name] = createMergedResultFunction(proto[name], property);
	          } else if (specPolicy === 'DEFINE_MANY') {
	            proto[name] = createChainedFunction(proto[name], property);
	          }
	        } else {
	          proto[name] = property;
	          if (process.env.NODE_ENV !== 'production') {
	            // Add verbose displayName to the function, which helps when looking
	            // at profiling tools.
	            if (typeof property === 'function' && spec.displayName) {
	              proto[name].displayName = spec.displayName + '_' + name;
	            }
	          }
	        }
	      }
	    }
	  }
	}
	
	function mixStaticSpecIntoComponent(Constructor, statics) {
	  if (!statics) {
	    return;
	  }
	  for (var name in statics) {
	    var property = statics[name];
	    if (!statics.hasOwnProperty(name)) {
	      continue;
	    }
	
	    var isReserved = name in RESERVED_SPEC_KEYS;
	    !!isReserved ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClass: You are attempting to define a reserved property, `%s`, that shouldn\'t be on the "statics" key. Define it as an instance property instead; it will still be accessible on the constructor.', name) : _prodInvariant('78', name) : void 0;
	
	    var isInherited = name in Constructor;
	    !!isInherited ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClass: You are attempting to define `%s` on your component more than once. This conflict may be due to a mixin.', name) : _prodInvariant('79', name) : void 0;
	    Constructor[name] = property;
	  }
	}
	
	/**
	 * Merge two objects, but throw if both contain the same key.
	 *
	 * @param {object} one The first object, which is mutated.
	 * @param {object} two The second object
	 * @return {object} one after it has been mutated to contain everything in two.
	 */
	function mergeIntoWithNoDuplicateKeys(one, two) {
	  !(one && two && (typeof one === 'undefined' ? 'undefined' : _typeof(one)) === 'object' && (typeof two === 'undefined' ? 'undefined' : _typeof(two)) === 'object') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'mergeIntoWithNoDuplicateKeys(): Cannot merge non-objects.') : _prodInvariant('80') : void 0;
	
	  for (var key in two) {
	    if (two.hasOwnProperty(key)) {
	      !(one[key] === undefined) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'mergeIntoWithNoDuplicateKeys(): Tried to merge two objects with the same key: `%s`. This conflict may be due to a mixin; in particular, this may be caused by two getInitialState() or getDefaultProps() methods returning objects with clashing keys.', key) : _prodInvariant('81', key) : void 0;
	      one[key] = two[key];
	    }
	  }
	  return one;
	}
	
	/**
	 * Creates a function that invokes two functions and merges their return values.
	 *
	 * @param {function} one Function to invoke first.
	 * @param {function} two Function to invoke second.
	 * @return {function} Function that invokes the two argument functions.
	 * @private
	 */
	function createMergedResultFunction(one, two) {
	  return function mergedResult() {
	    var a = one.apply(this, arguments);
	    var b = two.apply(this, arguments);
	    if (a == null) {
	      return b;
	    } else if (b == null) {
	      return a;
	    }
	    var c = {};
	    mergeIntoWithNoDuplicateKeys(c, a);
	    mergeIntoWithNoDuplicateKeys(c, b);
	    return c;
	  };
	}
	
	/**
	 * Creates a function that invokes two functions and ignores their return vales.
	 *
	 * @param {function} one Function to invoke first.
	 * @param {function} two Function to invoke second.
	 * @return {function} Function that invokes the two argument functions.
	 * @private
	 */
	function createChainedFunction(one, two) {
	  return function chainedFunction() {
	    one.apply(this, arguments);
	    two.apply(this, arguments);
	  };
	}
	
	/**
	 * Binds a method to the component.
	 *
	 * @param {object} component Component whose method is going to be bound.
	 * @param {function} method Method to be bound.
	 * @return {function} The bound method.
	 */
	function bindAutoBindMethod(component, method) {
	  var boundMethod = method.bind(component);
	  if (process.env.NODE_ENV !== 'production') {
	    boundMethod.__reactBoundContext = component;
	    boundMethod.__reactBoundMethod = method;
	    boundMethod.__reactBoundArguments = null;
	    var componentName = component.constructor.displayName;
	    var _bind = boundMethod.bind;
	    boundMethod.bind = function (newThis) {
	      for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
	        args[_key - 1] = arguments[_key];
	      }
	
	      // User is trying to bind() an autobound method; we effectively will
	      // ignore the value of "this" that the user is trying to use, so
	      // let's warn.
	      if (newThis !== component && newThis !== null) {
	        process.env.NODE_ENV !== 'production' ? warning(false, 'bind(): React component methods may only be bound to the ' + 'component instance. See %s', componentName) : void 0;
	      } else if (!args.length) {
	        process.env.NODE_ENV !== 'production' ? warning(false, 'bind(): You are binding a component method to the component. ' + 'React does this for you automatically in a high-performance ' + 'way, so you can safely remove this call. See %s', componentName) : void 0;
	        return boundMethod;
	      }
	      var reboundMethod = _bind.apply(boundMethod, arguments);
	      reboundMethod.__reactBoundContext = component;
	      reboundMethod.__reactBoundMethod = method;
	      reboundMethod.__reactBoundArguments = args;
	      return reboundMethod;
	    };
	  }
	  return boundMethod;
	}
	
	/**
	 * Binds all auto-bound methods in a component.
	 *
	 * @param {object} component Component whose method is going to be bound.
	 */
	function bindAutoBindMethods(component) {
	  var pairs = component.__reactAutoBindPairs;
	  for (var i = 0; i < pairs.length; i += 2) {
	    var autoBindKey = pairs[i];
	    var method = pairs[i + 1];
	    component[autoBindKey] = bindAutoBindMethod(component, method);
	  }
	}
	
	/**
	 * Add more to the ReactClass base class. These are all legacy features and
	 * therefore not already part of the modern ReactComponent.
	 */
	var ReactClassMixin = {
	
	  /**
	   * TODO: This will be deprecated because state should always keep a consistent
	   * type signature and the only use case for this, is to avoid that.
	   */
	  replaceState: function replaceState(newState, callback) {
	    this.updater.enqueueReplaceState(this, newState);
	    if (callback) {
	      this.updater.enqueueCallback(this, callback, 'replaceState');
	    }
	  },
	
	  /**
	   * Checks whether or not this composite component is mounted.
	   * @return {boolean} True if mounted, false otherwise.
	   * @protected
	   * @final
	   */
	  isMounted: function isMounted() {
	    return this.updater.isMounted(this);
	  }
	};
	
	var ReactClassComponent = function ReactClassComponent() {};
	_assign(ReactClassComponent.prototype, ReactComponent.prototype, ReactClassMixin);
	
	var didWarnDeprecated = false;
	
	/**
	 * Module for creating composite components.
	 *
	 * @class ReactClass
	 */
	var ReactClass = {
	
	  /**
	   * Creates a composite component class given a class specification.
	   * See https://facebook.github.io/react/docs/top-level-api.html#react.createclass
	   *
	   * @param {object} spec Class specification (which must define `render`).
	   * @return {function} Component constructor function.
	   * @public
	   */
	  createClass: function createClass(spec) {
	    if (process.env.NODE_ENV !== 'production') {
	      process.env.NODE_ENV !== 'production' ? warning(didWarnDeprecated, '%s: React.createClass is deprecated and will be removed in version 16. ' + 'Use plain JavaScript classes instead. If you\'re not yet ready to ' + 'migrate, create-react-class is available on npm as a ' + 'drop-in replacement.', spec && spec.displayName || 'A Component') : void 0;
	      didWarnDeprecated = true;
	    }
	
	    // To keep our warnings more understandable, we'll use a little hack here to
	    // ensure that Constructor.name !== 'Constructor'. This makes sure we don't
	    // unnecessarily identify a class without displayName as 'Constructor'.
	    var Constructor = identity(function (props, context, updater) {
	      // This constructor gets overridden by mocks. The argument is used
	      // by mocks to assert on what gets mounted.
	
	      if (process.env.NODE_ENV !== 'production') {
	        process.env.NODE_ENV !== 'production' ? warning(this instanceof Constructor, 'Something is calling a React component directly. Use a factory or ' + 'JSX instead. See: https://fb.me/react-legacyfactory') : void 0;
	      }
	
	      // Wire up auto-binding
	      if (this.__reactAutoBindPairs.length) {
	        bindAutoBindMethods(this);
	      }
	
	      this.props = props;
	      this.context = context;
	      this.refs = emptyObject;
	      this.updater = updater || ReactNoopUpdateQueue;
	
	      this.state = null;
	
	      // ReactClasses doesn't have constructors. Instead, they use the
	      // getInitialState and componentWillMount methods for initialization.
	
	      var initialState = this.getInitialState ? this.getInitialState() : null;
	      if (process.env.NODE_ENV !== 'production') {
	        // We allow auto-mocks to proceed as if they're returning null.
	        if (initialState === undefined && this.getInitialState._isMockFunction) {
	          // This is probably bad practice. Consider warning here and
	          // deprecating this convenience.
	          initialState = null;
	        }
	      }
	      !((typeof initialState === 'undefined' ? 'undefined' : _typeof(initialState)) === 'object' && !Array.isArray(initialState)) ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s.getInitialState(): must return an object or null', Constructor.displayName || 'ReactCompositeComponent') : _prodInvariant('82', Constructor.displayName || 'ReactCompositeComponent') : void 0;
	
	      this.state = initialState;
	    });
	    Constructor.prototype = new ReactClassComponent();
	    Constructor.prototype.constructor = Constructor;
	    Constructor.prototype.__reactAutoBindPairs = [];
	
	    injectedMixins.forEach(mixSpecIntoComponent.bind(null, Constructor));
	
	    mixSpecIntoComponent(Constructor, spec);
	
	    // Initialize the defaultProps property after all mixins have been merged.
	    if (Constructor.getDefaultProps) {
	      Constructor.defaultProps = Constructor.getDefaultProps();
	    }
	
	    if (process.env.NODE_ENV !== 'production') {
	      // This is a tag to indicate that the use of these method names is ok,
	      // since it's used with createClass. If it's not, then it's likely a
	      // mistake so we'll warn you to use the static property, property
	      // initializer or constructor respectively.
	      if (Constructor.getDefaultProps) {
	        Constructor.getDefaultProps.isReactClassApproved = {};
	      }
	      if (Constructor.prototype.getInitialState) {
	        Constructor.prototype.getInitialState.isReactClassApproved = {};
	      }
	    }
	
	    !Constructor.prototype.render ? process.env.NODE_ENV !== 'production' ? invariant(false, 'createClass(...): Class specification must implement a `render` method.') : _prodInvariant('83') : void 0;
	
	    if (process.env.NODE_ENV !== 'production') {
	      process.env.NODE_ENV !== 'production' ? warning(!Constructor.prototype.componentShouldUpdate, '%s has a method called ' + 'componentShouldUpdate(). Did you mean shouldComponentUpdate()? ' + 'The name is phrased as a question because the function is ' + 'expected to return a value.', spec.displayName || 'A component') : void 0;
	      process.env.NODE_ENV !== 'production' ? warning(!Constructor.prototype.componentWillRecieveProps, '%s has a method called ' + 'componentWillRecieveProps(). Did you mean componentWillReceiveProps()?', spec.displayName || 'A component') : void 0;
	    }
	
	    // Reduce time spent doing lookups by setting these on the prototype.
	    for (var methodName in ReactClassInterface) {
	      if (!Constructor.prototype[methodName]) {
	        Constructor.prototype[methodName] = null;
	      }
	    }
	
	    return Constructor;
	  },
	
	  injection: {
	    injectMixin: function injectMixin(mixin) {
	      injectedMixins.push(mixin);
	    }
	  }
	
	};
	
	module.exports = ReactClass;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ }),
/* 23 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */
	
	'use strict';
	
	var ReactPropTypeLocationNames = {};
	
	if (process.env.NODE_ENV !== 'production') {
	  ReactPropTypeLocationNames = {
	    prop: 'prop',
	    context: 'context',
	    childContext: 'child context'
	  };
	}
	
	module.exports = ReactPropTypeLocationNames;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ }),
/* 24 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var ReactElement = __webpack_require__(9);
	
	/**
	 * Create a factory that creates HTML tag elements.
	 *
	 * @private
	 */
	var createDOMFactory = ReactElement.createFactory;
	if (process.env.NODE_ENV !== 'production') {
	  var ReactElementValidator = __webpack_require__(25);
	  createDOMFactory = ReactElementValidator.createFactory;
	}
	
	/**
	 * Creates a mapping from supported HTML tags to `ReactDOMComponent` classes.
	 * This is also accessible via `React.DOM`.
	 *
	 * @public
	 */
	var ReactDOMFactories = {
	  a: createDOMFactory('a'),
	  abbr: createDOMFactory('abbr'),
	  address: createDOMFactory('address'),
	  area: createDOMFactory('area'),
	  article: createDOMFactory('article'),
	  aside: createDOMFactory('aside'),
	  audio: createDOMFactory('audio'),
	  b: createDOMFactory('b'),
	  base: createDOMFactory('base'),
	  bdi: createDOMFactory('bdi'),
	  bdo: createDOMFactory('bdo'),
	  big: createDOMFactory('big'),
	  blockquote: createDOMFactory('blockquote'),
	  body: createDOMFactory('body'),
	  br: createDOMFactory('br'),
	  button: createDOMFactory('button'),
	  canvas: createDOMFactory('canvas'),
	  caption: createDOMFactory('caption'),
	  cite: createDOMFactory('cite'),
	  code: createDOMFactory('code'),
	  col: createDOMFactory('col'),
	  colgroup: createDOMFactory('colgroup'),
	  data: createDOMFactory('data'),
	  datalist: createDOMFactory('datalist'),
	  dd: createDOMFactory('dd'),
	  del: createDOMFactory('del'),
	  details: createDOMFactory('details'),
	  dfn: createDOMFactory('dfn'),
	  dialog: createDOMFactory('dialog'),
	  div: createDOMFactory('div'),
	  dl: createDOMFactory('dl'),
	  dt: createDOMFactory('dt'),
	  em: createDOMFactory('em'),
	  embed: createDOMFactory('embed'),
	  fieldset: createDOMFactory('fieldset'),
	  figcaption: createDOMFactory('figcaption'),
	  figure: createDOMFactory('figure'),
	  footer: createDOMFactory('footer'),
	  form: createDOMFactory('form'),
	  h1: createDOMFactory('h1'),
	  h2: createDOMFactory('h2'),
	  h3: createDOMFactory('h3'),
	  h4: createDOMFactory('h4'),
	  h5: createDOMFactory('h5'),
	  h6: createDOMFactory('h6'),
	  head: createDOMFactory('head'),
	  header: createDOMFactory('header'),
	  hgroup: createDOMFactory('hgroup'),
	  hr: createDOMFactory('hr'),
	  html: createDOMFactory('html'),
	  i: createDOMFactory('i'),
	  iframe: createDOMFactory('iframe'),
	  img: createDOMFactory('img'),
	  input: createDOMFactory('input'),
	  ins: createDOMFactory('ins'),
	  kbd: createDOMFactory('kbd'),
	  keygen: createDOMFactory('keygen'),
	  label: createDOMFactory('label'),
	  legend: createDOMFactory('legend'),
	  li: createDOMFactory('li'),
	  link: createDOMFactory('link'),
	  main: createDOMFactory('main'),
	  map: createDOMFactory('map'),
	  mark: createDOMFactory('mark'),
	  menu: createDOMFactory('menu'),
	  menuitem: createDOMFactory('menuitem'),
	  meta: createDOMFactory('meta'),
	  meter: createDOMFactory('meter'),
	  nav: createDOMFactory('nav'),
	  noscript: createDOMFactory('noscript'),
	  object: createDOMFactory('object'),
	  ol: createDOMFactory('ol'),
	  optgroup: createDOMFactory('optgroup'),
	  option: createDOMFactory('option'),
	  output: createDOMFactory('output'),
	  p: createDOMFactory('p'),
	  param: createDOMFactory('param'),
	  picture: createDOMFactory('picture'),
	  pre: createDOMFactory('pre'),
	  progress: createDOMFactory('progress'),
	  q: createDOMFactory('q'),
	  rp: createDOMFactory('rp'),
	  rt: createDOMFactory('rt'),
	  ruby: createDOMFactory('ruby'),
	  s: createDOMFactory('s'),
	  samp: createDOMFactory('samp'),
	  script: createDOMFactory('script'),
	  section: createDOMFactory('section'),
	  select: createDOMFactory('select'),
	  small: createDOMFactory('small'),
	  source: createDOMFactory('source'),
	  span: createDOMFactory('span'),
	  strong: createDOMFactory('strong'),
	  style: createDOMFactory('style'),
	  sub: createDOMFactory('sub'),
	  summary: createDOMFactory('summary'),
	  sup: createDOMFactory('sup'),
	  table: createDOMFactory('table'),
	  tbody: createDOMFactory('tbody'),
	  td: createDOMFactory('td'),
	  textarea: createDOMFactory('textarea'),
	  tfoot: createDOMFactory('tfoot'),
	  th: createDOMFactory('th'),
	  thead: createDOMFactory('thead'),
	  time: createDOMFactory('time'),
	  title: createDOMFactory('title'),
	  tr: createDOMFactory('tr'),
	  track: createDOMFactory('track'),
	  u: createDOMFactory('u'),
	  ul: createDOMFactory('ul'),
	  'var': createDOMFactory('var'),
	  video: createDOMFactory('video'),
	  wbr: createDOMFactory('wbr'),
	
	  // SVG
	  circle: createDOMFactory('circle'),
	  clipPath: createDOMFactory('clipPath'),
	  defs: createDOMFactory('defs'),
	  ellipse: createDOMFactory('ellipse'),
	  g: createDOMFactory('g'),
	  image: createDOMFactory('image'),
	  line: createDOMFactory('line'),
	  linearGradient: createDOMFactory('linearGradient'),
	  mask: createDOMFactory('mask'),
	  path: createDOMFactory('path'),
	  pattern: createDOMFactory('pattern'),
	  polygon: createDOMFactory('polygon'),
	  polyline: createDOMFactory('polyline'),
	  radialGradient: createDOMFactory('radialGradient'),
	  rect: createDOMFactory('rect'),
	  stop: createDOMFactory('stop'),
	  svg: createDOMFactory('svg'),
	  text: createDOMFactory('text'),
	  tspan: createDOMFactory('tspan')
	};
	
	module.exports = ReactDOMFactories;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ }),
/* 25 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2014-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	/**
	 * ReactElementValidator provides a wrapper around a element factory
	 * which validates the props passed to the element. This is intended to be
	 * used only in DEV and could be replaced by a static type checker for languages
	 * that support it.
	 */
	
	'use strict';
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
	
	var ReactCurrentOwner = __webpack_require__(10);
	var ReactComponentTreeHook = __webpack_require__(26);
	var ReactElement = __webpack_require__(9);
	
	var checkReactTypeSpec = __webpack_require__(27);
	
	var canDefineProperty = __webpack_require__(13);
	var getIteratorFn = __webpack_require__(16);
	var warning = __webpack_require__(11);
	
	function getDeclarationErrorAddendum() {
	  if (ReactCurrentOwner.current) {
	    var name = ReactCurrentOwner.current.getName();
	    if (name) {
	      return ' Check the render method of `' + name + '`.';
	    }
	  }
	  return '';
	}
	
	function getSourceInfoErrorAddendum(elementProps) {
	  if (elementProps !== null && elementProps !== undefined && elementProps.__source !== undefined) {
	    var source = elementProps.__source;
	    var fileName = source.fileName.replace(/^.*[\\\/]/, '');
	    var lineNumber = source.lineNumber;
	    return ' Check your code at ' + fileName + ':' + lineNumber + '.';
	  }
	  return '';
	}
	
	/**
	 * Warn if there's no key explicitly set on dynamic arrays of children or
	 * object keys are not valid. This allows us to keep track of children between
	 * updates.
	 */
	var ownerHasKeyUseWarning = {};
	
	function getCurrentComponentErrorInfo(parentType) {
	  var info = getDeclarationErrorAddendum();
	
	  if (!info) {
	    var parentName = typeof parentType === 'string' ? parentType : parentType.displayName || parentType.name;
	    if (parentName) {
	      info = ' Check the top-level render call using <' + parentName + '>.';
	    }
	  }
	  return info;
	}
	
	/**
	 * Warn if the element doesn't have an explicit key assigned to it.
	 * This element is in an array. The array could grow and shrink or be
	 * reordered. All children that haven't already been validated are required to
	 * have a "key" property assigned to it. Error statuses are cached so a warning
	 * will only be shown once.
	 *
	 * @internal
	 * @param {ReactElement} element Element that requires a key.
	 * @param {*} parentType element's parent's type.
	 */
	function validateExplicitKey(element, parentType) {
	  if (!element._store || element._store.validated || element.key != null) {
	    return;
	  }
	  element._store.validated = true;
	
	  var memoizer = ownerHasKeyUseWarning.uniqueKey || (ownerHasKeyUseWarning.uniqueKey = {});
	
	  var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);
	  if (memoizer[currentComponentErrorInfo]) {
	    return;
	  }
	  memoizer[currentComponentErrorInfo] = true;
	
	  // Usually the current owner is the offender, but if it accepts children as a
	  // property, it may be the creator of the child that's responsible for
	  // assigning it a key.
	  var childOwner = '';
	  if (element && element._owner && element._owner !== ReactCurrentOwner.current) {
	    // Give the component that originally created this child.
	    childOwner = ' It was passed a child from ' + element._owner.getName() + '.';
	  }
	
	  process.env.NODE_ENV !== 'production' ? warning(false, 'Each child in an array or iterator should have a unique "key" prop.' + '%s%s See https://fb.me/react-warning-keys for more information.%s', currentComponentErrorInfo, childOwner, ReactComponentTreeHook.getCurrentStackAddendum(element)) : void 0;
	}
	
	/**
	 * Ensure that every element either is passed in a static location, in an
	 * array with an explicit keys property defined, or in an object literal
	 * with valid key property.
	 *
	 * @internal
	 * @param {ReactNode} node Statically passed child of any type.
	 * @param {*} parentType node's parent's type.
	 */
	function validateChildKeys(node, parentType) {
	  if ((typeof node === 'undefined' ? 'undefined' : _typeof(node)) !== 'object') {
	    return;
	  }
	  if (Array.isArray(node)) {
	    for (var i = 0; i < node.length; i++) {
	      var child = node[i];
	      if (ReactElement.isValidElement(child)) {
	        validateExplicitKey(child, parentType);
	      }
	    }
	  } else if (ReactElement.isValidElement(node)) {
	    // This element was passed in a valid location.
	    if (node._store) {
	      node._store.validated = true;
	    }
	  } else if (node) {
	    var iteratorFn = getIteratorFn(node);
	    // Entry iterators provide implicit keys.
	    if (iteratorFn) {
	      if (iteratorFn !== node.entries) {
	        var iterator = iteratorFn.call(node);
	        var step;
	        while (!(step = iterator.next()).done) {
	          if (ReactElement.isValidElement(step.value)) {
	            validateExplicitKey(step.value, parentType);
	          }
	        }
	      }
	    }
	  }
	}
	
	/**
	 * Given an element, validate that its props follow the propTypes definition,
	 * provided by the type.
	 *
	 * @param {ReactElement} element
	 */
	function validatePropTypes(element) {
	  var componentClass = element.type;
	  if (typeof componentClass !== 'function') {
	    return;
	  }
	  var name = componentClass.displayName || componentClass.name;
	  if (componentClass.propTypes) {
	    checkReactTypeSpec(componentClass.propTypes, element.props, 'prop', name, element, null);
	  }
	  if (typeof componentClass.getDefaultProps === 'function') {
	    process.env.NODE_ENV !== 'production' ? warning(componentClass.getDefaultProps.isReactClassApproved, 'getDefaultProps is only used on classic React.createClass ' + 'definitions. Use a static property named `defaultProps` instead.') : void 0;
	  }
	}
	
	var ReactElementValidator = {
	
	  createElement: function createElement(type, props, children) {
	    var validType = typeof type === 'string' || typeof type === 'function';
	    // We warn in this case but don't throw. We expect the element creation to
	    // succeed and there will likely be errors in render.
	    if (!validType) {
	      if (typeof type !== 'function' && typeof type !== 'string') {
	        var info = '';
	        if (type === undefined || (typeof type === 'undefined' ? 'undefined' : _typeof(type)) === 'object' && type !== null && Object.keys(type).length === 0) {
	          info += ' You likely forgot to export your component from the file ' + 'it\'s defined in.';
	        }
	
	        var sourceInfo = getSourceInfoErrorAddendum(props);
	        if (sourceInfo) {
	          info += sourceInfo;
	        } else {
	          info += getDeclarationErrorAddendum();
	        }
	
	        info += ReactComponentTreeHook.getCurrentStackAddendum();
	
	        process.env.NODE_ENV !== 'production' ? warning(false, 'React.createElement: type is invalid -- expected a string (for ' + 'built-in components) or a class/function (for composite ' + 'components) but got: %s.%s', type == null ? type : typeof type === 'undefined' ? 'undefined' : _typeof(type), info) : void 0;
	      }
	    }
	
	    var element = ReactElement.createElement.apply(this, arguments);
	
	    // The result can be nullish if a mock or a custom function is used.
	    // TODO: Drop this when these are no longer allowed as the type argument.
	    if (element == null) {
	      return element;
	    }
	
	    // Skip key warning if the type isn't valid since our key validation logic
	    // doesn't expect a non-string/function type and can throw confusing errors.
	    // We don't want exception behavior to differ between dev and prod.
	    // (Rendering will throw with a helpful message and as soon as the type is
	    // fixed, the key warnings will appear.)
	    if (validType) {
	      for (var i = 2; i < arguments.length; i++) {
	        validateChildKeys(arguments[i], type);
	      }
	    }
	
	    validatePropTypes(element);
	
	    return element;
	  },
	
	  createFactory: function createFactory(type) {
	    var validatedFactory = ReactElementValidator.createElement.bind(null, type);
	    // Legacy hook TODO: Warn if this is accessed
	    validatedFactory.type = type;
	
	    if (process.env.NODE_ENV !== 'production') {
	      if (canDefineProperty) {
	        Object.defineProperty(validatedFactory, 'type', {
	          enumerable: false,
	          get: function get() {
	            process.env.NODE_ENV !== 'production' ? warning(false, 'Factory.type is deprecated. Access the class directly ' + 'before passing it to createFactory.') : void 0;
	            Object.defineProperty(this, 'type', {
	              value: type
	            });
	            return type;
	          }
	        });
	      }
	    }
	
	    return validatedFactory;
	  },
	
	  cloneElement: function cloneElement(element, props, children) {
	    var newElement = ReactElement.cloneElement.apply(this, arguments);
	    for (var i = 2; i < arguments.length; i++) {
	      validateChildKeys(arguments[i], newElement.type);
	    }
	    validatePropTypes(newElement);
	    return newElement;
	  }
	
	};
	
	module.exports = ReactElementValidator;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ }),
/* 26 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2016-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */
	
	'use strict';
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
	
	var _prodInvariant = __webpack_require__(7);
	
	var ReactCurrentOwner = __webpack_require__(10);
	
	var invariant = __webpack_require__(8);
	var warning = __webpack_require__(11);
	
	function isNative(fn) {
	  // Based on isNative() from Lodash
	  var funcToString = Function.prototype.toString;
	  var hasOwnProperty = Object.prototype.hasOwnProperty;
	  var reIsNative = RegExp('^' + funcToString
	  // Take an example native function source for comparison
	  .call(hasOwnProperty)
	  // Strip regex characters so we can use it for regex
	  .replace(/[\\^$.*+?()[\]{}|]/g, '\\$&')
	  // Remove hasOwnProperty from the template to make it generic
	  .replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$');
	  try {
	    var source = funcToString.call(fn);
	    return reIsNative.test(source);
	  } catch (err) {
	    return false;
	  }
	}
	
	var canUseCollections =
	// Array.from
	typeof Array.from === 'function' &&
	// Map
	typeof Map === 'function' && isNative(Map) &&
	// Map.prototype.keys
	Map.prototype != null && typeof Map.prototype.keys === 'function' && isNative(Map.prototype.keys) &&
	// Set
	typeof Set === 'function' && isNative(Set) &&
	// Set.prototype.keys
	Set.prototype != null && typeof Set.prototype.keys === 'function' && isNative(Set.prototype.keys);
	
	var setItem;
	var getItem;
	var removeItem;
	var getItemIDs;
	var addRoot;
	var removeRoot;
	var getRootIDs;
	
	if (canUseCollections) {
	  var itemMap = new Map();
	  var rootIDSet = new Set();
	
	  setItem = function setItem(id, item) {
	    itemMap.set(id, item);
	  };
	  getItem = function getItem(id) {
	    return itemMap.get(id);
	  };
	  removeItem = function removeItem(id) {
	    itemMap['delete'](id);
	  };
	  getItemIDs = function getItemIDs() {
	    return Array.from(itemMap.keys());
	  };
	
	  addRoot = function addRoot(id) {
	    rootIDSet.add(id);
	  };
	  removeRoot = function removeRoot(id) {
	    rootIDSet['delete'](id);
	  };
	  getRootIDs = function getRootIDs() {
	    return Array.from(rootIDSet.keys());
	  };
	} else {
	  var itemByKey = {};
	  var rootByKey = {};
	
	  // Use non-numeric keys to prevent V8 performance issues:
	  // https://github.com/facebook/react/pull/7232
	  var getKeyFromID = function getKeyFromID(id) {
	    return '.' + id;
	  };
	  var getIDFromKey = function getIDFromKey(key) {
	    return parseInt(key.substr(1), 10);
	  };
	
	  setItem = function setItem(id, item) {
	    var key = getKeyFromID(id);
	    itemByKey[key] = item;
	  };
	  getItem = function getItem(id) {
	    var key = getKeyFromID(id);
	    return itemByKey[key];
	  };
	  removeItem = function removeItem(id) {
	    var key = getKeyFromID(id);
	    delete itemByKey[key];
	  };
	  getItemIDs = function getItemIDs() {
	    return Object.keys(itemByKey).map(getIDFromKey);
	  };
	
	  addRoot = function addRoot(id) {
	    var key = getKeyFromID(id);
	    rootByKey[key] = true;
	  };
	  removeRoot = function removeRoot(id) {
	    var key = getKeyFromID(id);
	    delete rootByKey[key];
	  };
	  getRootIDs = function getRootIDs() {
	    return Object.keys(rootByKey).map(getIDFromKey);
	  };
	}
	
	var unmountedIDs = [];
	
	function purgeDeep(id) {
	  var item = getItem(id);
	  if (item) {
	    var childIDs = item.childIDs;
	
	    removeItem(id);
	    childIDs.forEach(purgeDeep);
	  }
	}
	
	function describeComponentFrame(name, source, ownerName) {
	  return '\n    in ' + (name || 'Unknown') + (source ? ' (at ' + source.fileName.replace(/^.*[\\\/]/, '') + ':' + source.lineNumber + ')' : ownerName ? ' (created by ' + ownerName + ')' : '');
	}
	
	function _getDisplayName(element) {
	  if (element == null) {
	    return '#empty';
	  } else if (typeof element === 'string' || typeof element === 'number') {
	    return '#text';
	  } else if (typeof element.type === 'string') {
	    return element.type;
	  } else {
	    return element.type.displayName || element.type.name || 'Unknown';
	  }
	}
	
	function describeID(id) {
	  var name = ReactComponentTreeHook.getDisplayName(id);
	  var element = ReactComponentTreeHook.getElement(id);
	  var ownerID = ReactComponentTreeHook.getOwnerID(id);
	  var ownerName;
	  if (ownerID) {
	    ownerName = ReactComponentTreeHook.getDisplayName(ownerID);
	  }
	  process.env.NODE_ENV !== 'production' ? warning(element, 'ReactComponentTreeHook: Missing React element for debugID %s when ' + 'building stack', id) : void 0;
	  return describeComponentFrame(name, element && element._source, ownerName);
	}
	
	var ReactComponentTreeHook = {
	  onSetChildren: function onSetChildren(id, nextChildIDs) {
	    var item = getItem(id);
	    !item ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Item must have been set') : _prodInvariant('144') : void 0;
	    item.childIDs = nextChildIDs;
	
	    for (var i = 0; i < nextChildIDs.length; i++) {
	      var nextChildID = nextChildIDs[i];
	      var nextChild = getItem(nextChildID);
	      !nextChild ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Expected hook events to fire for the child before its parent includes it in onSetChildren().') : _prodInvariant('140') : void 0;
	      !(nextChild.childIDs != null || _typeof(nextChild.element) !== 'object' || nextChild.element == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Expected onSetChildren() to fire for a container child before its parent includes it in onSetChildren().') : _prodInvariant('141') : void 0;
	      !nextChild.isMounted ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Expected onMountComponent() to fire for the child before its parent includes it in onSetChildren().') : _prodInvariant('71') : void 0;
	      if (nextChild.parentID == null) {
	        nextChild.parentID = id;
	        // TODO: This shouldn't be necessary but mounting a new root during in
	        // componentWillMount currently causes not-yet-mounted components to
	        // be purged from our tree data so their parent id is missing.
	      }
	      !(nextChild.parentID === id) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Expected onBeforeMountComponent() parent and onSetChildren() to be consistent (%s has parents %s and %s).', nextChildID, nextChild.parentID, id) : _prodInvariant('142', nextChildID, nextChild.parentID, id) : void 0;
	    }
	  },
	  onBeforeMountComponent: function onBeforeMountComponent(id, element, parentID) {
	    var item = {
	      element: element,
	      parentID: parentID,
	      text: null,
	      childIDs: [],
	      isMounted: false,
	      updateCount: 0
	    };
	    setItem(id, item);
	  },
	  onBeforeUpdateComponent: function onBeforeUpdateComponent(id, element) {
	    var item = getItem(id);
	    if (!item || !item.isMounted) {
	      // We may end up here as a result of setState() in componentWillUnmount().
	      // In this case, ignore the element.
	      return;
	    }
	    item.element = element;
	  },
	  onMountComponent: function onMountComponent(id) {
	    var item = getItem(id);
	    !item ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Item must have been set') : _prodInvariant('144') : void 0;
	    item.isMounted = true;
	    var isRoot = item.parentID === 0;
	    if (isRoot) {
	      addRoot(id);
	    }
	  },
	  onUpdateComponent: function onUpdateComponent(id) {
	    var item = getItem(id);
	    if (!item || !item.isMounted) {
	      // We may end up here as a result of setState() in componentWillUnmount().
	      // In this case, ignore the element.
	      return;
	    }
	    item.updateCount++;
	  },
	  onUnmountComponent: function onUnmountComponent(id) {
	    var item = getItem(id);
	    if (item) {
	      // We need to check if it exists.
	      // `item` might not exist if it is inside an error boundary, and a sibling
	      // error boundary child threw while mounting. Then this instance never
	      // got a chance to mount, but it still gets an unmounting event during
	      // the error boundary cleanup.
	      item.isMounted = false;
	      var isRoot = item.parentID === 0;
	      if (isRoot) {
	        removeRoot(id);
	      }
	    }
	    unmountedIDs.push(id);
	  },
	  purgeUnmountedComponents: function purgeUnmountedComponents() {
	    if (ReactComponentTreeHook._preventPurging) {
	      // Should only be used for testing.
	      return;
	    }
	
	    for (var i = 0; i < unmountedIDs.length; i++) {
	      var id = unmountedIDs[i];
	      purgeDeep(id);
	    }
	    unmountedIDs.length = 0;
	  },
	  isMounted: function isMounted(id) {
	    var item = getItem(id);
	    return item ? item.isMounted : false;
	  },
	  getCurrentStackAddendum: function getCurrentStackAddendum(topElement) {
	    var info = '';
	    if (topElement) {
	      var name = _getDisplayName(topElement);
	      var owner = topElement._owner;
	      info += describeComponentFrame(name, topElement._source, owner && owner.getName());
	    }
	
	    var currentOwner = ReactCurrentOwner.current;
	    var id = currentOwner && currentOwner._debugID;
	
	    info += ReactComponentTreeHook.getStackAddendumByID(id);
	    return info;
	  },
	  getStackAddendumByID: function getStackAddendumByID(id) {
	    var info = '';
	    while (id) {
	      info += describeID(id);
	      id = ReactComponentTreeHook.getParentID(id);
	    }
	    return info;
	  },
	  getChildIDs: function getChildIDs(id) {
	    var item = getItem(id);
	    return item ? item.childIDs : [];
	  },
	  getDisplayName: function getDisplayName(id) {
	    var element = ReactComponentTreeHook.getElement(id);
	    if (!element) {
	      return null;
	    }
	    return _getDisplayName(element);
	  },
	  getElement: function getElement(id) {
	    var item = getItem(id);
	    return item ? item.element : null;
	  },
	  getOwnerID: function getOwnerID(id) {
	    var element = ReactComponentTreeHook.getElement(id);
	    if (!element || !element._owner) {
	      return null;
	    }
	    return element._owner._debugID;
	  },
	  getParentID: function getParentID(id) {
	    var item = getItem(id);
	    return item ? item.parentID : null;
	  },
	  getSource: function getSource(id) {
	    var item = getItem(id);
	    var element = item ? item.element : null;
	    var source = element != null ? element._source : null;
	    return source;
	  },
	  getText: function getText(id) {
	    var element = ReactComponentTreeHook.getElement(id);
	    if (typeof element === 'string') {
	      return element;
	    } else if (typeof element === 'number') {
	      return '' + element;
	    } else {
	      return null;
	    }
	  },
	  getUpdateCount: function getUpdateCount(id) {
	    var item = getItem(id);
	    return item ? item.updateCount : 0;
	  },
	
	  getRootIDs: getRootIDs,
	  getRegisteredIDs: getItemIDs
	};
	
	module.exports = ReactComponentTreeHook;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ }),
/* 27 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
	
	var _prodInvariant = __webpack_require__(7);
	
	var ReactPropTypeLocationNames = __webpack_require__(23);
	var ReactPropTypesSecret = __webpack_require__(28);
	
	var invariant = __webpack_require__(8);
	var warning = __webpack_require__(11);
	
	var ReactComponentTreeHook;
	
	if (typeof process !== 'undefined' && process.env && process.env.NODE_ENV === 'test') {
	  // Temporary hack.
	  // Inline requires don't work well with Jest:
	  // https://github.com/facebook/react/issues/7240
	  // Remove the inline requires when we don't need them anymore:
	  // https://github.com/facebook/react/pull/7178
	  ReactComponentTreeHook = __webpack_require__(26);
	}
	
	var loggedTypeFailures = {};
	
	/**
	 * Assert that the values match with the type specs.
	 * Error messages are memorized and will only be shown once.
	 *
	 * @param {object} typeSpecs Map of name to a ReactPropType
	 * @param {object} values Runtime values that need to be type-checked
	 * @param {string} location e.g. "prop", "context", "child context"
	 * @param {string} componentName Name of the component for error messages.
	 * @param {?object} element The React element that is being type-checked
	 * @param {?number} debugID The React component instance that is being type-checked
	 * @private
	 */
	function checkReactTypeSpec(typeSpecs, values, location, componentName, element, debugID) {
	  for (var typeSpecName in typeSpecs) {
	    if (typeSpecs.hasOwnProperty(typeSpecName)) {
	      var error;
	      // Prop type validation may throw. In case they do, we don't want to
	      // fail the render phase where it didn't fail before. So we log it.
	      // After these have been cleaned up, we'll let them throw.
	      try {
	        // This is intentionally an invariant that gets caught. It's the same
	        // behavior as without this statement except with a better message.
	        !(typeof typeSpecs[typeSpecName] === 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s: %s type `%s` is invalid; it must be a function, usually from React.PropTypes.', componentName || 'React class', ReactPropTypeLocationNames[location], typeSpecName) : _prodInvariant('84', componentName || 'React class', ReactPropTypeLocationNames[location], typeSpecName) : void 0;
	        error = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, ReactPropTypesSecret);
	      } catch (ex) {
	        error = ex;
	      }
	      process.env.NODE_ENV !== 'production' ? warning(!error || error instanceof Error, '%s: type specification of %s `%s` is invalid; the type checker ' + 'function must return `null` or an `Error` but returned a %s. ' + 'You may have forgotten to pass an argument to the type checker ' + 'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' + 'shape all require an argument).', componentName || 'React class', ReactPropTypeLocationNames[location], typeSpecName, typeof error === 'undefined' ? 'undefined' : _typeof(error)) : void 0;
	      if (error instanceof Error && !(error.message in loggedTypeFailures)) {
	        // Only monitor this failure once because there tends to be a lot of the
	        // same error.
	        loggedTypeFailures[error.message] = true;
	
	        var componentStackInfo = '';
	
	        if (process.env.NODE_ENV !== 'production') {
	          if (!ReactComponentTreeHook) {
	            ReactComponentTreeHook = __webpack_require__(26);
	          }
	          if (debugID !== null) {
	            componentStackInfo = ReactComponentTreeHook.getStackAddendumByID(debugID);
	          } else if (element !== null) {
	            componentStackInfo = ReactComponentTreeHook.getCurrentStackAddendum(element);
	          }
	        }
	
	        process.env.NODE_ENV !== 'production' ? warning(false, 'Failed %s type: %s%s', location, error.message, componentStackInfo) : void 0;
	      }
	    }
	  }
	}
	
	module.exports = checkReactTypeSpec;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ }),
/* 28 */
/***/ (function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */
	
	'use strict';
	
	var ReactPropTypesSecret = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';
	
	module.exports = ReactPropTypesSecret;

/***/ }),
/* 29 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var _require = __webpack_require__(9),
	    isValidElement = _require.isValidElement;
	
	var factory = __webpack_require__(30);
	
	module.exports = factory(isValidElement);

/***/ }),
/* 30 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 */
	
	'use strict';
	
	// React 15.5 references this module, and assumes PropTypes are still callable in production.
	// Therefore we re-export development-only version with all the PropTypes checks here.
	// However if one is migrating to the `prop-types` npm library, they will go through the
	// `index.js` entry point, and it will branch depending on the environment.
	
	var factory = __webpack_require__(31);
	module.exports = function (isValidElement) {
	  // It is still allowed in 15.5.
	  var throwOnDirectAccess = false;
	  return factory(isValidElement, throwOnDirectAccess);
	};

/***/ }),
/* 31 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 */
	
	'use strict';
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
	
	var emptyFunction = __webpack_require__(12);
	var invariant = __webpack_require__(8);
	var warning = __webpack_require__(11);
	
	var ReactPropTypesSecret = __webpack_require__(32);
	var checkPropTypes = __webpack_require__(33);
	
	module.exports = function (isValidElement, throwOnDirectAccess) {
	  /* global Symbol */
	  var ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;
	  var FAUX_ITERATOR_SYMBOL = '@@iterator'; // Before Symbol spec.
	
	  /**
	   * Returns the iterator method function contained on the iterable object.
	   *
	   * Be sure to invoke the function with the iterable as context:
	   *
	   *     var iteratorFn = getIteratorFn(myIterable);
	   *     if (iteratorFn) {
	   *       var iterator = iteratorFn.call(myIterable);
	   *       ...
	   *     }
	   *
	   * @param {?object} maybeIterable
	   * @return {?function}
	   */
	  function getIteratorFn(maybeIterable) {
	    var iteratorFn = maybeIterable && (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL]);
	    if (typeof iteratorFn === 'function') {
	      return iteratorFn;
	    }
	  }
	
	  /**
	   * Collection of methods that allow declaration and validation of props that are
	   * supplied to React components. Example usage:
	   *
	   *   var Props = require('ReactPropTypes');
	   *   var MyArticle = React.createClass({
	   *     propTypes: {
	   *       // An optional string prop named "description".
	   *       description: Props.string,
	   *
	   *       // A required enum prop named "category".
	   *       category: Props.oneOf(['News','Photos']).isRequired,
	   *
	   *       // A prop named "dialog" that requires an instance of Dialog.
	   *       dialog: Props.instanceOf(Dialog).isRequired
	   *     },
	   *     render: function() { ... }
	   *   });
	   *
	   * A more formal specification of how these methods are used:
	   *
	   *   type := array|bool|func|object|number|string|oneOf([...])|instanceOf(...)
	   *   decl := ReactPropTypes.{type}(.isRequired)?
	   *
	   * Each and every declaration produces a function with the same signature. This
	   * allows the creation of custom validation functions. For example:
	   *
	   *  var MyLink = React.createClass({
	   *    propTypes: {
	   *      // An optional string or URI prop named "href".
	   *      href: function(props, propName, componentName) {
	   *        var propValue = props[propName];
	   *        if (propValue != null && typeof propValue !== 'string' &&
	   *            !(propValue instanceof URI)) {
	   *          return new Error(
	   *            'Expected a string or an URI for ' + propName + ' in ' +
	   *            componentName
	   *          );
	   *        }
	   *      }
	   *    },
	   *    render: function() {...}
	   *  });
	   *
	   * @internal
	   */
	
	  var ANONYMOUS = '<<anonymous>>';
	
	  // Important!
	  // Keep this list in sync with production version in `./factoryWithThrowingShims.js`.
	  var ReactPropTypes = {
	    array: createPrimitiveTypeChecker('array'),
	    bool: createPrimitiveTypeChecker('boolean'),
	    func: createPrimitiveTypeChecker('function'),
	    number: createPrimitiveTypeChecker('number'),
	    object: createPrimitiveTypeChecker('object'),
	    string: createPrimitiveTypeChecker('string'),
	    symbol: createPrimitiveTypeChecker('symbol'),
	
	    any: createAnyTypeChecker(),
	    arrayOf: createArrayOfTypeChecker,
	    element: createElementTypeChecker(),
	    instanceOf: createInstanceTypeChecker,
	    node: createNodeChecker(),
	    objectOf: createObjectOfTypeChecker,
	    oneOf: createEnumTypeChecker,
	    oneOfType: createUnionTypeChecker,
	    shape: createShapeTypeChecker
	  };
	
	  /**
	   * inlined Object.is polyfill to avoid requiring consumers ship their own
	   * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is
	   */
	  /*eslint-disable no-self-compare*/
	  function is(x, y) {
	    // SameValue algorithm
	    if (x === y) {
	      // Steps 1-5, 7-10
	      // Steps 6.b-6.e: +0 != -0
	      return x !== 0 || 1 / x === 1 / y;
	    } else {
	      // Step 6.a: NaN == NaN
	      return x !== x && y !== y;
	    }
	  }
	  /*eslint-enable no-self-compare*/
	
	  /**
	   * We use an Error-like object for backward compatibility as people may call
	   * PropTypes directly and inspect their output. However, we don't use real
	   * Errors anymore. We don't inspect their stack anyway, and creating them
	   * is prohibitively expensive if they are created too often, such as what
	   * happens in oneOfType() for any type before the one that matched.
	   */
	  function PropTypeError(message) {
	    this.message = message;
	    this.stack = '';
	  }
	  // Make `instanceof Error` still work for returned errors.
	  PropTypeError.prototype = Error.prototype;
	
	  function createChainableTypeChecker(validate) {
	    if (process.env.NODE_ENV !== 'production') {
	      var manualPropTypeCallCache = {};
	      var manualPropTypeWarningCount = 0;
	    }
	    function checkType(isRequired, props, propName, componentName, location, propFullName, secret) {
	      componentName = componentName || ANONYMOUS;
	      propFullName = propFullName || propName;
	
	      if (secret !== ReactPropTypesSecret) {
	        if (throwOnDirectAccess) {
	          // New behavior only for users of `prop-types` package
	          invariant(false, 'Calling PropTypes validators directly is not supported by the `prop-types` package. ' + 'Use `PropTypes.checkPropTypes()` to call them. ' + 'Read more at http://fb.me/use-check-prop-types');
	        } else if (process.env.NODE_ENV !== 'production' && typeof console !== 'undefined') {
	          // Old behavior for people using React.PropTypes
	          var cacheKey = componentName + ':' + propName;
	          if (!manualPropTypeCallCache[cacheKey] &&
	          // Avoid spamming the console because they are often not actionable except for lib authors
	          manualPropTypeWarningCount < 3) {
	            warning(false, 'You are manually calling a React.PropTypes validation ' + 'function for the `%s` prop on `%s`. This is deprecated ' + 'and will throw in the standalone `prop-types` package. ' + 'You may be seeing this warning due to a third-party PropTypes ' + 'library. See https://fb.me/react-warning-dont-call-proptypes ' + 'for details.', propFullName, componentName);
	            manualPropTypeCallCache[cacheKey] = true;
	            manualPropTypeWarningCount++;
	          }
	        }
	      }
	      if (props[propName] == null) {
	        if (isRequired) {
	          if (props[propName] === null) {
	            return new PropTypeError('The ' + location + ' `' + propFullName + '` is marked as required ' + ('in `' + componentName + '`, but its value is `null`.'));
	          }
	          return new PropTypeError('The ' + location + ' `' + propFullName + '` is marked as required in ' + ('`' + componentName + '`, but its value is `undefined`.'));
	        }
	        return null;
	      } else {
	        return validate(props, propName, componentName, location, propFullName);
	      }
	    }
	
	    var chainedCheckType = checkType.bind(null, false);
	    chainedCheckType.isRequired = checkType.bind(null, true);
	
	    return chainedCheckType;
	  }
	
	  function createPrimitiveTypeChecker(expectedType) {
	    function validate(props, propName, componentName, location, propFullName, secret) {
	      var propValue = props[propName];
	      var propType = getPropType(propValue);
	      if (propType !== expectedType) {
	        // `propValue` being instance of, say, date/regexp, pass the 'object'
	        // check, but we can offer a more precise error message here rather than
	        // 'of type `object`'.
	        var preciseType = getPreciseType(propValue);
	
	        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + preciseType + '` supplied to `' + componentName + '`, expected ') + ('`' + expectedType + '`.'));
	      }
	      return null;
	    }
	    return createChainableTypeChecker(validate);
	  }
	
	  function createAnyTypeChecker() {
	    return createChainableTypeChecker(emptyFunction.thatReturnsNull);
	  }
	
	  function createArrayOfTypeChecker(typeChecker) {
	    function validate(props, propName, componentName, location, propFullName) {
	      if (typeof typeChecker !== 'function') {
	        return new PropTypeError('Property `' + propFullName + '` of component `' + componentName + '` has invalid PropType notation inside arrayOf.');
	      }
	      var propValue = props[propName];
	      if (!Array.isArray(propValue)) {
	        var propType = getPropType(propValue);
	        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an array.'));
	      }
	      for (var i = 0; i < propValue.length; i++) {
	        var error = typeChecker(propValue, i, componentName, location, propFullName + '[' + i + ']', ReactPropTypesSecret);
	        if (error instanceof Error) {
	          return error;
	        }
	      }
	      return null;
	    }
	    return createChainableTypeChecker(validate);
	  }
	
	  function createElementTypeChecker() {
	    function validate(props, propName, componentName, location, propFullName) {
	      var propValue = props[propName];
	      if (!isValidElement(propValue)) {
	        var propType = getPropType(propValue);
	        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected a single ReactElement.'));
	      }
	      return null;
	    }
	    return createChainableTypeChecker(validate);
	  }
	
	  function createInstanceTypeChecker(expectedClass) {
	    function validate(props, propName, componentName, location, propFullName) {
	      if (!(props[propName] instanceof expectedClass)) {
	        var expectedClassName = expectedClass.name || ANONYMOUS;
	        var actualClassName = getClassName(props[propName]);
	        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + actualClassName + '` supplied to `' + componentName + '`, expected ') + ('instance of `' + expectedClassName + '`.'));
	      }
	      return null;
	    }
	    return createChainableTypeChecker(validate);
	  }
	
	  function createEnumTypeChecker(expectedValues) {
	    if (!Array.isArray(expectedValues)) {
	      process.env.NODE_ENV !== 'production' ? warning(false, 'Invalid argument supplied to oneOf, expected an instance of array.') : void 0;
	      return emptyFunction.thatReturnsNull;
	    }
	
	    function validate(props, propName, componentName, location, propFullName) {
	      var propValue = props[propName];
	      for (var i = 0; i < expectedValues.length; i++) {
	        if (is(propValue, expectedValues[i])) {
	          return null;
	        }
	      }
	
	      var valuesString = JSON.stringify(expectedValues);
	      return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of value `' + propValue + '` ' + ('supplied to `' + componentName + '`, expected one of ' + valuesString + '.'));
	    }
	    return createChainableTypeChecker(validate);
	  }
	
	  function createObjectOfTypeChecker(typeChecker) {
	    function validate(props, propName, componentName, location, propFullName) {
	      if (typeof typeChecker !== 'function') {
	        return new PropTypeError('Property `' + propFullName + '` of component `' + componentName + '` has invalid PropType notation inside objectOf.');
	      }
	      var propValue = props[propName];
	      var propType = getPropType(propValue);
	      if (propType !== 'object') {
	        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an object.'));
	      }
	      for (var key in propValue) {
	        if (propValue.hasOwnProperty(key)) {
	          var error = typeChecker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret);
	          if (error instanceof Error) {
	            return error;
	          }
	        }
	      }
	      return null;
	    }
	    return createChainableTypeChecker(validate);
	  }
	
	  function createUnionTypeChecker(arrayOfTypeCheckers) {
	    if (!Array.isArray(arrayOfTypeCheckers)) {
	      process.env.NODE_ENV !== 'production' ? warning(false, 'Invalid argument supplied to oneOfType, expected an instance of array.') : void 0;
	      return emptyFunction.thatReturnsNull;
	    }
	
	    for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
	      var checker = arrayOfTypeCheckers[i];
	      if (typeof checker !== 'function') {
	        warning(false, 'Invalid argument supplid to oneOfType. Expected an array of check functions, but ' + 'received %s at index %s.', getPostfixForTypeWarning(checker), i);
	        return emptyFunction.thatReturnsNull;
	      }
	    }
	
	    function validate(props, propName, componentName, location, propFullName) {
	      for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
	        var checker = arrayOfTypeCheckers[i];
	        if (checker(props, propName, componentName, location, propFullName, ReactPropTypesSecret) == null) {
	          return null;
	        }
	      }
	
	      return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`.'));
	    }
	    return createChainableTypeChecker(validate);
	  }
	
	  function createNodeChecker() {
	    function validate(props, propName, componentName, location, propFullName) {
	      if (!isNode(props[propName])) {
	        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`, expected a ReactNode.'));
	      }
	      return null;
	    }
	    return createChainableTypeChecker(validate);
	  }
	
	  function createShapeTypeChecker(shapeTypes) {
	    function validate(props, propName, componentName, location, propFullName) {
	      var propValue = props[propName];
	      var propType = getPropType(propValue);
	      if (propType !== 'object') {
	        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type `' + propType + '` ' + ('supplied to `' + componentName + '`, expected `object`.'));
	      }
	      for (var key in shapeTypes) {
	        var checker = shapeTypes[key];
	        if (!checker) {
	          continue;
	        }
	        var error = checker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret);
	        if (error) {
	          return error;
	        }
	      }
	      return null;
	    }
	    return createChainableTypeChecker(validate);
	  }
	
	  function isNode(propValue) {
	    switch (typeof propValue === 'undefined' ? 'undefined' : _typeof(propValue)) {
	      case 'number':
	      case 'string':
	      case 'undefined':
	        return true;
	      case 'boolean':
	        return !propValue;
	      case 'object':
	        if (Array.isArray(propValue)) {
	          return propValue.every(isNode);
	        }
	        if (propValue === null || isValidElement(propValue)) {
	          return true;
	        }
	
	        var iteratorFn = getIteratorFn(propValue);
	        if (iteratorFn) {
	          var iterator = iteratorFn.call(propValue);
	          var step;
	          if (iteratorFn !== propValue.entries) {
	            while (!(step = iterator.next()).done) {
	              if (!isNode(step.value)) {
	                return false;
	              }
	            }
	          } else {
	            // Iterator will provide entry [k,v] tuples rather than values.
	            while (!(step = iterator.next()).done) {
	              var entry = step.value;
	              if (entry) {
	                if (!isNode(entry[1])) {
	                  return false;
	                }
	              }
	            }
	          }
	        } else {
	          return false;
	        }
	
	        return true;
	      default:
	        return false;
	    }
	  }
	
	  function isSymbol(propType, propValue) {
	    // Native Symbol.
	    if (propType === 'symbol') {
	      return true;
	    }
	
	    // 19.4.3.5 Symbol.prototype[@@toStringTag] === 'Symbol'
	    if (propValue['@@toStringTag'] === 'Symbol') {
	      return true;
	    }
	
	    // Fallback for non-spec compliant Symbols which are polyfilled.
	    if (typeof Symbol === 'function' && propValue instanceof Symbol) {
	      return true;
	    }
	
	    return false;
	  }
	
	  // Equivalent of `typeof` but with special handling for array and regexp.
	  function getPropType(propValue) {
	    var propType = typeof propValue === 'undefined' ? 'undefined' : _typeof(propValue);
	    if (Array.isArray(propValue)) {
	      return 'array';
	    }
	    if (propValue instanceof RegExp) {
	      // Old webkits (at least until Android 4.0) return 'function' rather than
	      // 'object' for typeof a RegExp. We'll normalize this here so that /bla/
	      // passes PropTypes.object.
	      return 'object';
	    }
	    if (isSymbol(propType, propValue)) {
	      return 'symbol';
	    }
	    return propType;
	  }
	
	  // This handles more types than `getPropType`. Only used for error messages.
	  // See `createPrimitiveTypeChecker`.
	  function getPreciseType(propValue) {
	    if (typeof propValue === 'undefined' || propValue === null) {
	      return '' + propValue;
	    }
	    var propType = getPropType(propValue);
	    if (propType === 'object') {
	      if (propValue instanceof Date) {
	        return 'date';
	      } else if (propValue instanceof RegExp) {
	        return 'regexp';
	      }
	    }
	    return propType;
	  }
	
	  // Returns a string that is postfixed to a warning about an invalid type.
	  // For example, "undefined" or "of type array"
	  function getPostfixForTypeWarning(value) {
	    var type = getPreciseType(value);
	    switch (type) {
	      case 'array':
	      case 'object':
	        return 'an ' + type;
	      case 'boolean':
	      case 'date':
	      case 'regexp':
	        return 'a ' + type;
	      default:
	        return type;
	    }
	  }
	
	  // Returns class name of the object, if any.
	  function getClassName(propValue) {
	    if (!propValue.constructor || !propValue.constructor.name) {
	      return ANONYMOUS;
	    }
	    return propValue.constructor.name;
	  }
	
	  ReactPropTypes.checkPropTypes = checkPropTypes;
	  ReactPropTypes.PropTypes = ReactPropTypes;
	
	  return ReactPropTypes;
	};
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ }),
/* 32 */
/***/ (function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 */
	
	'use strict';
	
	var ReactPropTypesSecret = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';
	
	module.exports = ReactPropTypesSecret;

/***/ }),
/* 33 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 */
	
	'use strict';
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
	
	if (process.env.NODE_ENV !== 'production') {
	  var invariant = __webpack_require__(8);
	  var warning = __webpack_require__(11);
	  var ReactPropTypesSecret = __webpack_require__(32);
	  var loggedTypeFailures = {};
	}
	
	/**
	 * Assert that the values match with the type specs.
	 * Error messages are memorized and will only be shown once.
	 *
	 * @param {object} typeSpecs Map of name to a ReactPropType
	 * @param {object} values Runtime values that need to be type-checked
	 * @param {string} location e.g. "prop", "context", "child context"
	 * @param {string} componentName Name of the component for error messages.
	 * @param {?Function} getStack Returns the component stack.
	 * @private
	 */
	function checkPropTypes(typeSpecs, values, location, componentName, getStack) {
	  if (process.env.NODE_ENV !== 'production') {
	    for (var typeSpecName in typeSpecs) {
	      if (typeSpecs.hasOwnProperty(typeSpecName)) {
	        var error;
	        // Prop type validation may throw. In case they do, we don't want to
	        // fail the render phase where it didn't fail before. So we log it.
	        // After these have been cleaned up, we'll let them throw.
	        try {
	          // This is intentionally an invariant that gets caught. It's the same
	          // behavior as without this statement except with a better message.
	          invariant(typeof typeSpecs[typeSpecName] === 'function', '%s: %s type `%s` is invalid; it must be a function, usually from ' + 'React.PropTypes.', componentName || 'React class', location, typeSpecName);
	          error = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, ReactPropTypesSecret);
	        } catch (ex) {
	          error = ex;
	        }
	        warning(!error || error instanceof Error, '%s: type specification of %s `%s` is invalid; the type checker ' + 'function must return `null` or an `Error` but returned a %s. ' + 'You may have forgotten to pass an argument to the type checker ' + 'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' + 'shape all require an argument).', componentName || 'React class', location, typeSpecName, typeof error === 'undefined' ? 'undefined' : _typeof(error));
	        if (error instanceof Error && !(error.message in loggedTypeFailures)) {
	          // Only monitor this failure once because there tends to be a lot of the
	          // same error.
	          loggedTypeFailures[error.message] = true;
	
	          var stack = getStack ? getStack() : '';
	
	          warning(false, 'Failed %s type: %s%s', location, error.message, stack != null ? stack : '');
	        }
	      }
	    }
	  }
	}
	
	module.exports = checkPropTypes;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ }),
/* 34 */
/***/ (function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	module.exports = '15.5.4';

/***/ }),
/* 35 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	'use strict';
	
	var _prodInvariant = __webpack_require__(7);
	
	var ReactElement = __webpack_require__(9);
	
	var invariant = __webpack_require__(8);
	
	/**
	 * Returns the first child in a collection of children and verifies that there
	 * is only one child in the collection.
	 *
	 * See https://facebook.github.io/react/docs/top-level-api.html#react.children.only
	 *
	 * The current implementation of this function assumes that a single child gets
	 * passed without a wrapper, but the purpose of this helper function is to
	 * abstract away the particular structure of children.
	 *
	 * @param {?object} children Child collection structure.
	 * @return {ReactElement} The first and only `ReactElement` contained in the
	 * structure.
	 */
	function onlyChild(children) {
	  !ReactElement.isValidElement(children) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'React.Children.only expected to receive a single React element child.') : _prodInvariant('143') : void 0;
	  return children;
	}
	
	module.exports = onlyChild;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ }),
/* 36 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports = __webpack_require__(37);

/***/ }),
/* 37 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	/* globals __REACT_DEVTOOLS_GLOBAL_HOOK__*/
	
	'use strict';
	
	var ReactDOMComponentTree = __webpack_require__(38);
	var ReactDefaultInjection = __webpack_require__(42);
	var ReactMount = __webpack_require__(170);
	var ReactReconciler = __webpack_require__(63);
	var ReactUpdates = __webpack_require__(60);
	var ReactVersion = __webpack_require__(175);
	
	var findDOMNode = __webpack_require__(176);
	var getHostComponentFromComposite = __webpack_require__(177);
	var renderSubtreeIntoContainer = __webpack_require__(178);
	var warning = __webpack_require__(11);
	
	ReactDefaultInjection.inject();
	
	var ReactDOM = {
	  findDOMNode: findDOMNode,
	  render: ReactMount.render,
	  unmountComponentAtNode: ReactMount.unmountComponentAtNode,
	  version: ReactVersion,
	
	  /* eslint-disable camelcase */
	  unstable_batchedUpdates: ReactUpdates.batchedUpdates,
	  unstable_renderSubtreeIntoContainer: renderSubtreeIntoContainer
	};
	
	// Inject the runtime into a devtools global hook regardless of browser.
	// Allows for debugging when the hook is injected on the page.
	if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== 'undefined' && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.inject === 'function') {
	  __REACT_DEVTOOLS_GLOBAL_HOOK__.inject({
	    ComponentTree: {
	      getClosestInstanceFromNode: ReactDOMComponentTree.getClosestInstanceFromNode,
	      getNodeFromInstance: function getNodeFromInstance(inst) {
	        // inst is an internal instance (but could be a composite)
	        if (inst._renderedComponent) {
	          inst = getHostComponentFromComposite(inst);
	        }
	        if (inst) {
	          return ReactDOMComponentTree.getNodeFromInstance(inst);
	        } else {
	          return null;
	        }
	      }
	    },
	    Mount: ReactMount,
	    Reconciler: ReactReconciler
	  });
	}
	
	if (process.env.NODE_ENV !== 'production') {
	  var ExecutionEnvironment = __webpack_require__(52);
	  if (ExecutionEnvironment.canUseDOM && window.top === window.self) {
	
	    // First check if devtools is not installed
	    if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === 'undefined') {
	      // If we're in Chrome or Firefox, provide a download link if not installed.
	      if (navigator.userAgent.indexOf('Chrome') > -1 && navigator.userAgent.indexOf('Edge') === -1 || navigator.userAgent.indexOf('Firefox') > -1) {
	        // Firefox does not have the issue with devtools loaded over file://
	        var showFileUrlMessage = window.location.protocol.indexOf('http') === -1 && navigator.userAgent.indexOf('Firefox') === -1;
	        console.debug('Download the React DevTools ' + (showFileUrlMessage ? 'and use an HTTP server (instead of a file: URL) ' : '') + 'for a better development experience: ' + 'https://fb.me/react-devtools');
	      }
	    }
	
	    var testFunc = function testFn() {};
	    process.env.NODE_ENV !== 'production' ? warning((testFunc.name || testFunc.toString()).indexOf('testFn') !== -1, 'It looks like you\'re using a minified copy of the development build ' + 'of React. When deploying React apps to production, make sure to use ' + 'the production build which skips development warnings and is faster. ' + 'See https://fb.me/react-minification for more details.') : void 0;
	
	    // If we're in IE8, check to see if we are in compatibility mode and provide
	    // information on preventing compatibility mode
	    var ieCompatibilityMode = document.documentMode && document.documentMode < 8;
	
	    process.env.NODE_ENV !== 'production' ? warning(!ieCompatibilityMode, 'Internet Explorer is running in compatibility mode; please add the ' + 'following tag to your HTML to prevent this from happening: ' + '<meta http-equiv="X-UA-Compatible" content="IE=edge" />') : void 0;
	
	    var expectedFeatures = [
	    // shims
	    Array.isArray, Array.prototype.every, Array.prototype.forEach, Array.prototype.indexOf, Array.prototype.map, Date.now, Function.prototype.bind, Object.keys, String.prototype.trim];
	
	    for (var i = 0; i < expectedFeatures.length; i++) {
	      if (!expectedFeatures[i]) {
	        process.env.NODE_ENV !== 'production' ? warning(false, 'One or more ES5 shims expected by React are not available: ' + 'https://fb.me/react-warning-polyfills') : void 0;
	        break;
	      }
	    }
	  }
	}
	
	if (process.env.NODE_ENV !== 'production') {
	  var ReactInstrumentation = __webpack_require__(66);
	  var ReactDOMUnknownPropertyHook = __webpack_require__(179);
	  var ReactDOMNullInputValuePropHook = __webpack_require__(180);
	  var ReactDOMInvalidARIAHook = __webpack_require__(181);
	
	  ReactInstrumentation.debugTool.addHook(ReactDOMUnknownPropertyHook);
	  ReactInstrumentation.debugTool.addHook(ReactDOMNullInputValuePropHook);
	  ReactInstrumentation.debugTool.addHook(ReactDOMInvalidARIAHook);
	}
	
	module.exports = ReactDOM;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ }),
/* 38 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var _prodInvariant = __webpack_require__(39);
	
	var DOMProperty = __webpack_require__(40);
	var ReactDOMComponentFlags = __webpack_require__(41);
	
	var invariant = __webpack_require__(8);
	
	var ATTR_NAME = DOMProperty.ID_ATTRIBUTE_NAME;
	var Flags = ReactDOMComponentFlags;
	
	var internalInstanceKey = '__reactInternalInstance$' + Math.random().toString(36).slice(2);
	
	/**
	 * Check if a given node should be cached.
	 */
	function shouldPrecacheNode(node, nodeID) {
	  return node.nodeType === 1 && node.getAttribute(ATTR_NAME) === String(nodeID) || node.nodeType === 8 && node.nodeValue === ' react-text: ' + nodeID + ' ' || node.nodeType === 8 && node.nodeValue === ' react-empty: ' + nodeID + ' ';
	}
	
	/**
	 * Drill down (through composites and empty components) until we get a host or
	 * host text component.
	 *
	 * This is pretty polymorphic but unavoidable with the current structure we have
	 * for `_renderedChildren`.
	 */
	function getRenderedHostOrTextFromComponent(component) {
	  var rendered;
	  while (rendered = component._renderedComponent) {
	    component = rendered;
	  }
	  return component;
	}
	
	/**
	 * Populate `_hostNode` on the rendered host/text component with the given
	 * DOM node. The passed `inst` can be a composite.
	 */
	function precacheNode(inst, node) {
	  var hostInst = getRenderedHostOrTextFromComponent(inst);
	  hostInst._hostNode = node;
	  node[internalInstanceKey] = hostInst;
	}
	
	function uncacheNode(inst) {
	  var node = inst._hostNode;
	  if (node) {
	    delete node[internalInstanceKey];
	    inst._hostNode = null;
	  }
	}
	
	/**
	 * Populate `_hostNode` on each child of `inst`, assuming that the children
	 * match up with the DOM (element) children of `node`.
	 *
	 * We cache entire levels at once to avoid an n^2 problem where we access the
	 * children of a node sequentially and have to walk from the start to our target
	 * node every time.
	 *
	 * Since we update `_renderedChildren` and the actual DOM at (slightly)
	 * different times, we could race here and see a newer `_renderedChildren` than
	 * the DOM nodes we see. To avoid this, ReactMultiChild calls
	 * `prepareToManageChildren` before we change `_renderedChildren`, at which
	 * time the container's child nodes are always cached (until it unmounts).
	 */
	function precacheChildNodes(inst, node) {
	  if (inst._flags & Flags.hasCachedChildNodes) {
	    return;
	  }
	  var children = inst._renderedChildren;
	  var childNode = node.firstChild;
	  outer: for (var name in children) {
	    if (!children.hasOwnProperty(name)) {
	      continue;
	    }
	    var childInst = children[name];
	    var childID = getRenderedHostOrTextFromComponent(childInst)._domID;
	    if (childID === 0) {
	      // We're currently unmounting this child in ReactMultiChild; skip it.
	      continue;
	    }
	    // We assume the child nodes are in the same order as the child instances.
	    for (; childNode !== null; childNode = childNode.nextSibling) {
	      if (shouldPrecacheNode(childNode, childID)) {
	        precacheNode(childInst, childNode);
	        continue outer;
	      }
	    }
	    // We reached the end of the DOM children without finding an ID match.
	     true ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Unable to find element with ID %s.', childID) : _prodInvariant('32', childID) : void 0;
	  }
	  inst._flags |= Flags.hasCachedChildNodes;
	}
	
	/**
	 * Given a DOM node, return the closest ReactDOMComponent or
	 * ReactDOMTextComponent instance ancestor.
	 */
	function getClosestInstanceFromNode(node) {
	  if (node[internalInstanceKey]) {
	    return node[internalInstanceKey];
	  }
	
	  // Walk up the tree until we find an ancestor whose instance we have cached.
	  var parents = [];
	  while (!node[internalInstanceKey]) {
	    parents.push(node);
	    if (node.parentNode) {
	      node = node.parentNode;
	    } else {
	      // Top of the tree. This node must not be part of a React tree (or is
	      // unmounted, potentially).
	      return null;
	    }
	  }
	
	  var closest;
	  var inst;
	  for (; node && (inst = node[internalInstanceKey]); node = parents.pop()) {
	    closest = inst;
	    if (parents.length) {
	      precacheChildNodes(inst, node);
	    }
	  }
	
	  return closest;
	}
	
	/**
	 * Given a DOM node, return the ReactDOMComponent or ReactDOMTextComponent
	 * instance, or null if the node was not rendered by this React.
	 */
	function getInstanceFromNode(node) {
	  var inst = getClosestInstanceFromNode(node);
	  if (inst != null && inst._hostNode === node) {
	    return inst;
	  } else {
	    return null;
	  }
	}
	
	/**
	 * Given a ReactDOMComponent or ReactDOMTextComponent, return the corresponding
	 * DOM node.
	 */
	function getNodeFromInstance(inst) {
	  // Without this first invariant, passing a non-DOM-component triggers the next
	  // invariant for a missing parent, which is super confusing.
	  !(inst._hostNode !== undefined) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'getNodeFromInstance: Invalid argument.') : _prodInvariant('33') : void 0;
	
	  if (inst._hostNode) {
	    return inst._hostNode;
	  }
	
	  // Walk up the tree until we find an ancestor whose DOM node we have cached.
	  var parents = [];
	  while (!inst._hostNode) {
	    parents.push(inst);
	    !inst._hostParent ? process.env.NODE_ENV !== 'production' ? invariant(false, 'React DOM tree root should always have a node reference.') : _prodInvariant('34') : void 0;
	    inst = inst._hostParent;
	  }
	
	  // Now parents contains each ancestor that does *not* have a cached native
	  // node, and `inst` is the deepest ancestor that does.
	  for (; parents.length; inst = parents.pop()) {
	    precacheChildNodes(inst, inst._hostNode);
	  }
	
	  return inst._hostNode;
	}
	
	var ReactDOMComponentTree = {
	  getClosestInstanceFromNode: getClosestInstanceFromNode,
	  getInstanceFromNode: getInstanceFromNode,
	  getNodeFromInstance: getNodeFromInstance,
	  precacheChildNodes: precacheChildNodes,
	  precacheNode: precacheNode,
	  uncacheNode: uncacheNode
	};
	
	module.exports = ReactDOMComponentTree;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ }),
/* 39 */
/***/ (function(module, exports) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */
	'use strict';
	
	/**
	 * WARNING: DO NOT manually require this module.
	 * This is a replacement for `invariant(...)` used by the error code system
	 * and will _only_ be required by the corresponding babel pass.
	 * It always throws.
	 */
	
	function reactProdInvariant(code) {
	  var argCount = arguments.length - 1;
	
	  var message = 'Minified React error #' + code + '; visit ' + 'http://facebook.github.io/react/docs/error-decoder.html?invariant=' + code;
	
	  for (var argIdx = 0; argIdx < argCount; argIdx++) {
	    message += '&args[]=' + encodeURIComponent(arguments[argIdx + 1]);
	  }
	
	  message += ' for the full message or use the non-minified dev environment' + ' for full errors and additional helpful warnings.';
	
	  var error = new Error(message);
	  error.name = 'Invariant Violation';
	  error.framesToPop = 1; // we don't care about reactProdInvariant's own frame
	
	  throw error;
	}
	
	module.exports = reactProdInvariant;

/***/ }),
/* 40 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var _prodInvariant = __webpack_require__(39);
	
	var invariant = __webpack_require__(8);
	
	function checkMask(value, bitmask) {
	  return (value & bitmask) === bitmask;
	}
	
	var DOMPropertyInjection = {
	  /**
	   * Mapping from normalized, camelcased property names to a configuration that
	   * specifies how the associated DOM property should be accessed or rendered.
	   */
	  MUST_USE_PROPERTY: 0x1,
	  HAS_BOOLEAN_VALUE: 0x4,
	  HAS_NUMERIC_VALUE: 0x8,
	  HAS_POSITIVE_NUMERIC_VALUE: 0x10 | 0x8,
	  HAS_OVERLOADED_BOOLEAN_VALUE: 0x20,
	
	  /**
	   * Inject some specialized knowledge about the DOM. This takes a config object
	   * with the following properties:
	   *
	   * isCustomAttribute: function that given an attribute name will return true
	   * if it can be inserted into the DOM verbatim. Useful for data-* or aria-*
	   * attributes where it's impossible to enumerate all of the possible
	   * attribute names,
	   *
	   * Properties: object mapping DOM property name to one of the
	   * DOMPropertyInjection constants or null. If your attribute isn't in here,
	   * it won't get written to the DOM.
	   *
	   * DOMAttributeNames: object mapping React attribute name to the DOM
	   * attribute name. Attribute names not specified use the **lowercase**
	   * normalized name.
	   *
	   * DOMAttributeNamespaces: object mapping React attribute name to the DOM
	   * attribute namespace URL. (Attribute names not specified use no namespace.)
	   *
	   * DOMPropertyNames: similar to DOMAttributeNames but for DOM properties.
	   * Property names not specified use the normalized name.
	   *
	   * DOMMutationMethods: Properties that require special mutation methods. If
	   * `value` is undefined, the mutation method should unset the property.
	   *
	   * @param {object} domPropertyConfig the config as described above.
	   */
	  injectDOMPropertyConfig: function injectDOMPropertyConfig(domPropertyConfig) {
	    var Injection = DOMPropertyInjection;
	    var Properties = domPropertyConfig.Properties || {};
	    var DOMAttributeNamespaces = domPropertyConfig.DOMAttributeNamespaces || {};
	    var DOMAttributeNames = domPropertyConfig.DOMAttributeNames || {};
	    var DOMPropertyNames = domPropertyConfig.DOMPropertyNames || {};
	    var DOMMutationMethods = domPropertyConfig.DOMMutationMethods || {};
	
	    if (domPropertyConfig.isCustomAttribute) {
	      DOMProperty._isCustomAttributeFunctions.push(domPropertyConfig.isCustomAttribute);
	    }
	
	    for (var propName in Properties) {
	      !!DOMProperty.properties.hasOwnProperty(propName) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'injectDOMPropertyConfig(...): You\'re trying to inject DOM property \'%s\' which has already been injected. You may be accidentally injecting the same DOM property config twice, or you may be injecting two configs that have conflicting property names.', propName) : _prodInvariant('48', propName) : void 0;
	
	      var lowerCased = propName.toLowerCase();
	      var propConfig = Properties[propName];
	
	      var propertyInfo = {
	        attributeName: lowerCased,
	        attributeNamespace: null,
	        propertyName: propName,
	        mutationMethod: null,
	
	        mustUseProperty: checkMask(propConfig, Injection.MUST_USE_PROPERTY),
	        hasBooleanValue: checkMask(propConfig, Injection.HAS_BOOLEAN_VALUE),
	        hasNumericValue: checkMask(propConfig, Injection.HAS_NUMERIC_VALUE),
	        hasPositiveNumericValue: checkMask(propConfig, Injection.HAS_POSITIVE_NUMERIC_VALUE),
	        hasOverloadedBooleanValue: checkMask(propConfig, Injection.HAS_OVERLOADED_BOOLEAN_VALUE)
	      };
	      !(propertyInfo.hasBooleanValue + propertyInfo.hasNumericValue + propertyInfo.hasOverloadedBooleanValue <= 1) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'DOMProperty: Value can be one of boolean, overloaded boolean, or numeric value, but not a combination: %s', propName) : _prodInvariant('50', propName) : void 0;
	
	      if (process.env.NODE_ENV !== 'production') {
	        DOMProperty.getPossibleStandardName[lowerCased] = propName;
	      }
	
	      if (DOMAttributeNames.hasOwnProperty(propName)) {
	        var attributeName = DOMAttributeNames[propName];
	        propertyInfo.attributeName = attributeName;
	        if (process.env.NODE_ENV !== 'production') {
	          DOMProperty.getPossibleStandardName[attributeName] = propName;
	        }
	      }
	
	      if (DOMAttributeNamespaces.hasOwnProperty(propName)) {
	        propertyInfo.attributeNamespace = DOMAttributeNamespaces[propName];
	      }
	
	      if (DOMPropertyNames.hasOwnProperty(propName)) {
	        propertyInfo.propertyName = DOMPropertyNames[propName];
	      }
	
	      if (DOMMutationMethods.hasOwnProperty(propName)) {
	        propertyInfo.mutationMethod = DOMMutationMethods[propName];
	      }
	
	      DOMProperty.properties[propName] = propertyInfo;
	    }
	  }
	};
	
	/* eslint-disable max-len */
	var ATTRIBUTE_NAME_START_CHAR = ':A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD';
	/* eslint-enable max-len */
	
	/**
	 * DOMProperty exports lookup objects that can be used like functions:
	 *
	 *   > DOMProperty.isValid['id']
	 *   true
	 *   > DOMProperty.isValid['foobar']
	 *   undefined
	 *
	 * Although this may be confusing, it performs better in general.
	 *
	 * @see http://jsperf.com/key-exists
	 * @see http://jsperf.com/key-missing
	 */
	var DOMProperty = {
	
	  ID_ATTRIBUTE_NAME: 'data-reactid',
	  ROOT_ATTRIBUTE_NAME: 'data-reactroot',
	
	  ATTRIBUTE_NAME_START_CHAR: ATTRIBUTE_NAME_START_CHAR,
	  ATTRIBUTE_NAME_CHAR: ATTRIBUTE_NAME_START_CHAR + '\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040',
	
	  /**
	   * Map from property "standard name" to an object with info about how to set
	   * the property in the DOM. Each object contains:
	   *
	   * attributeName:
	   *   Used when rendering markup or with `*Attribute()`.
	   * attributeNamespace
	   * propertyName:
	   *   Used on DOM node instances. (This includes properties that mutate due to
	   *   external factors.)
	   * mutationMethod:
	   *   If non-null, used instead of the property or `setAttribute()` after
	   *   initial render.
	   * mustUseProperty:
	   *   Whether the property must be accessed and mutated as an object property.
	   * hasBooleanValue:
	   *   Whether the property should be removed when set to a falsey value.
	   * hasNumericValue:
	   *   Whether the property must be numeric or parse as a numeric and should be
	   *   removed when set to a falsey value.
	   * hasPositiveNumericValue:
	   *   Whether the property must be positive numeric or parse as a positive
	   *   numeric and should be removed when set to a falsey value.
	   * hasOverloadedBooleanValue:
	   *   Whether the property can be used as a flag as well as with a value.
	   *   Removed when strictly equal to false; present without a value when
	   *   strictly equal to true; present with a value otherwise.
	   */
	  properties: {},
	
	  /**
	   * Mapping from lowercase property names to the properly cased version, used
	   * to warn in the case of missing properties. Available only in __DEV__.
	   *
	   * autofocus is predefined, because adding it to the property whitelist
	   * causes unintended side effects.
	   *
	   * @type {Object}
	   */
	  getPossibleStandardName: process.env.NODE_ENV !== 'production' ? { autofocus: 'autoFocus' } : null,
	
	  /**
	   * All of the isCustomAttribute() functions that have been injected.
	   */
	  _isCustomAttributeFunctions: [],
	
	  /**
	   * Checks whether a property name is a custom attribute.
	   * @method
	   */
	  isCustomAttribute: function isCustomAttribute(attributeName) {
	    for (var i = 0; i < DOMProperty._isCustomAttributeFunctions.length; i++) {
	      var isCustomAttributeFn = DOMProperty._isCustomAttributeFunctions[i];
	      if (isCustomAttributeFn(attributeName)) {
	        return true;
	      }
	    }
	    return false;
	  },
	
	  injection: DOMPropertyInjection
	};
	
	module.exports = DOMProperty;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ }),
/* 41 */
/***/ (function(module, exports) {

	/**
	 * Copyright 2015-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var ReactDOMComponentFlags = {
	  hasCachedChildNodes: 1 << 0
	};
	
	module.exports = ReactDOMComponentFlags;

/***/ }),
/* 42 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var ARIADOMPropertyConfig = __webpack_require__(43);
	var BeforeInputEventPlugin = __webpack_require__(44);
	var ChangeEventPlugin = __webpack_require__(59);
	var DefaultEventPluginOrder = __webpack_require__(76);
	var EnterLeaveEventPlugin = __webpack_require__(77);
	var HTMLDOMPropertyConfig = __webpack_require__(82);
	var ReactComponentBrowserEnvironment = __webpack_require__(83);
	var ReactDOMComponent = __webpack_require__(96);
	var ReactDOMComponentTree = __webpack_require__(38);
	var ReactDOMEmptyComponent = __webpack_require__(141);
	var ReactDOMTreeTraversal = __webpack_require__(142);
	var ReactDOMTextComponent = __webpack_require__(143);
	var ReactDefaultBatchingStrategy = __webpack_require__(144);
	var ReactEventListener = __webpack_require__(145);
	var ReactInjection = __webpack_require__(148);
	var ReactReconcileTransaction = __webpack_require__(149);
	var SVGDOMPropertyConfig = __webpack_require__(157);
	var SelectEventPlugin = __webpack_require__(158);
	var SimpleEventPlugin = __webpack_require__(159);
	
	var alreadyInjected = false;
	
	function inject() {
	  if (alreadyInjected) {
	    // TODO: This is currently true because these injections are shared between
	    // the client and the server package. They should be built independently
	    // and not share any injection state. Then this problem will be solved.
	    return;
	  }
	  alreadyInjected = true;
	
	  ReactInjection.EventEmitter.injectReactEventListener(ReactEventListener);
	
	  /**
	   * Inject modules for resolving DOM hierarchy and plugin ordering.
	   */
	  ReactInjection.EventPluginHub.injectEventPluginOrder(DefaultEventPluginOrder);
	  ReactInjection.EventPluginUtils.injectComponentTree(ReactDOMComponentTree);
	  ReactInjection.EventPluginUtils.injectTreeTraversal(ReactDOMTreeTraversal);
	
	  /**
	   * Some important event plugins included by default (without having to require
	   * them).
	   */
	  ReactInjection.EventPluginHub.injectEventPluginsByName({
	    SimpleEventPlugin: SimpleEventPlugin,
	    EnterLeaveEventPlugin: EnterLeaveEventPlugin,
	    ChangeEventPlugin: ChangeEventPlugin,
	    SelectEventPlugin: SelectEventPlugin,
	    BeforeInputEventPlugin: BeforeInputEventPlugin
	  });
	
	  ReactInjection.HostComponent.injectGenericComponentClass(ReactDOMComponent);
	
	  ReactInjection.HostComponent.injectTextComponentClass(ReactDOMTextComponent);
	
	  ReactInjection.DOMProperty.injectDOMPropertyConfig(ARIADOMPropertyConfig);
	  ReactInjection.DOMProperty.injectDOMPropertyConfig(HTMLDOMPropertyConfig);
	  ReactInjection.DOMProperty.injectDOMPropertyConfig(SVGDOMPropertyConfig);
	
	  ReactInjection.EmptyComponent.injectEmptyComponentFactory(function (instantiate) {
	    return new ReactDOMEmptyComponent(instantiate);
	  });
	
	  ReactInjection.Updates.injectReconcileTransaction(ReactReconcileTransaction);
	  ReactInjection.Updates.injectBatchingStrategy(ReactDefaultBatchingStrategy);
	
	  ReactInjection.Component.injectEnvironment(ReactComponentBrowserEnvironment);
	}
	
	module.exports = {
	  inject: inject
	};

/***/ }),
/* 43 */
/***/ (function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var ARIADOMPropertyConfig = {
	  Properties: {
	    // Global States and Properties
	    'aria-current': 0, // state
	    'aria-details': 0,
	    'aria-disabled': 0, // state
	    'aria-hidden': 0, // state
	    'aria-invalid': 0, // state
	    'aria-keyshortcuts': 0,
	    'aria-label': 0,
	    'aria-roledescription': 0,
	    // Widget Attributes
	    'aria-autocomplete': 0,
	    'aria-checked': 0,
	    'aria-expanded': 0,
	    'aria-haspopup': 0,
	    'aria-level': 0,
	    'aria-modal': 0,
	    'aria-multiline': 0,
	    'aria-multiselectable': 0,
	    'aria-orientation': 0,
	    'aria-placeholder': 0,
	    'aria-pressed': 0,
	    'aria-readonly': 0,
	    'aria-required': 0,
	    'aria-selected': 0,
	    'aria-sort': 0,
	    'aria-valuemax': 0,
	    'aria-valuemin': 0,
	    'aria-valuenow': 0,
	    'aria-valuetext': 0,
	    // Live Region Attributes
	    'aria-atomic': 0,
	    'aria-busy': 0,
	    'aria-live': 0,
	    'aria-relevant': 0,
	    // Drag-and-Drop Attributes
	    'aria-dropeffect': 0,
	    'aria-grabbed': 0,
	    // Relationship Attributes
	    'aria-activedescendant': 0,
	    'aria-colcount': 0,
	    'aria-colindex': 0,
	    'aria-colspan': 0,
	    'aria-controls': 0,
	    'aria-describedby': 0,
	    'aria-errormessage': 0,
	    'aria-flowto': 0,
	    'aria-labelledby': 0,
	    'aria-owns': 0,
	    'aria-posinset': 0,
	    'aria-rowcount': 0,
	    'aria-rowindex': 0,
	    'aria-rowspan': 0,
	    'aria-setsize': 0
	  },
	  DOMAttributeNames: {},
	  DOMPropertyNames: {}
	};
	
	module.exports = ARIADOMPropertyConfig;

/***/ }),
/* 44 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
	
	var EventPropagators = __webpack_require__(45);
	var ExecutionEnvironment = __webpack_require__(52);
	var FallbackCompositionState = __webpack_require__(53);
	var SyntheticCompositionEvent = __webpack_require__(56);
	var SyntheticInputEvent = __webpack_require__(58);
	
	var END_KEYCODES = [9, 13, 27, 32]; // Tab, Return, Esc, Space
	var START_KEYCODE = 229;
	
	var canUseCompositionEvent = ExecutionEnvironment.canUseDOM && 'CompositionEvent' in window;
	
	var documentMode = null;
	if (ExecutionEnvironment.canUseDOM && 'documentMode' in document) {
	  documentMode = document.documentMode;
	}
	
	// Webkit offers a very useful `textInput` event that can be used to
	// directly represent `beforeInput`. The IE `textinput` event is not as
	// useful, so we don't use it.
	var canUseTextInputEvent = ExecutionEnvironment.canUseDOM && 'TextEvent' in window && !documentMode && !isPresto();
	
	// In IE9+, we have access to composition events, but the data supplied
	// by the native compositionend event may be incorrect. Japanese ideographic
	// spaces, for instance (\u3000) are not recorded correctly.
	var useFallbackCompositionData = ExecutionEnvironment.canUseDOM && (!canUseCompositionEvent || documentMode && documentMode > 8 && documentMode <= 11);
	
	/**
	 * Opera <= 12 includes TextEvent in window, but does not fire
	 * text input events. Rely on keypress instead.
	 */
	function isPresto() {
	  var opera = window.opera;
	  return (typeof opera === 'undefined' ? 'undefined' : _typeof(opera)) === 'object' && typeof opera.version === 'function' && parseInt(opera.version(), 10) <= 12;
	}
	
	var SPACEBAR_CODE = 32;
	var SPACEBAR_CHAR = String.fromCharCode(SPACEBAR_CODE);
	
	// Events and their corresponding property names.
	var eventTypes = {
	  beforeInput: {
	    phasedRegistrationNames: {
	      bubbled: 'onBeforeInput',
	      captured: 'onBeforeInputCapture'
	    },
	    dependencies: ['topCompositionEnd', 'topKeyPress', 'topTextInput', 'topPaste']
	  },
	  compositionEnd: {
	    phasedRegistrationNames: {
	      bubbled: 'onCompositionEnd',
	      captured: 'onCompositionEndCapture'
	    },
	    dependencies: ['topBlur', 'topCompositionEnd', 'topKeyDown', 'topKeyPress', 'topKeyUp', 'topMouseDown']
	  },
	  compositionStart: {
	    phasedRegistrationNames: {
	      bubbled: 'onCompositionStart',
	      captured: 'onCompositionStartCapture'
	    },
	    dependencies: ['topBlur', 'topCompositionStart', 'topKeyDown', 'topKeyPress', 'topKeyUp', 'topMouseDown']
	  },
	  compositionUpdate: {
	    phasedRegistrationNames: {
	      bubbled: 'onCompositionUpdate',
	      captured: 'onCompositionUpdateCapture'
	    },
	    dependencies: ['topBlur', 'topCompositionUpdate', 'topKeyDown', 'topKeyPress', 'topKeyUp', 'topMouseDown']
	  }
	};
	
	// Track whether we've ever handled a keypress on the space key.
	var hasSpaceKeypress = false;
	
	/**
	 * Return whether a native keypress event is assumed to be a command.
	 * This is required because Firefox fires `keypress` events for key commands
	 * (cut, copy, select-all, etc.) even though no character is inserted.
	 */
	function isKeypressCommand(nativeEvent) {
	  return (nativeEvent.ctrlKey || nativeEvent.altKey || nativeEvent.metaKey) &&
	  // ctrlKey && altKey is equivalent to AltGr, and is not a command.
	  !(nativeEvent.ctrlKey && nativeEvent.altKey);
	}
	
	/**
	 * Translate native top level events into event types.
	 *
	 * @param {string} topLevelType
	 * @return {object}
	 */
	function getCompositionEventType(topLevelType) {
	  switch (topLevelType) {
	    case 'topCompositionStart':
	      return eventTypes.compositionStart;
	    case 'topCompositionEnd':
	      return eventTypes.compositionEnd;
	    case 'topCompositionUpdate':
	      return eventTypes.compositionUpdate;
	  }
	}
	
	/**
	 * Does our fallback best-guess model think this event signifies that
	 * composition has begun?
	 *
	 * @param {string} topLevelType
	 * @param {object} nativeEvent
	 * @return {boolean}
	 */
	function isFallbackCompositionStart(topLevelType, nativeEvent) {
	  return topLevelType === 'topKeyDown' && nativeEvent.keyCode === START_KEYCODE;
	}
	
	/**
	 * Does our fallback mode think that this event is the end of composition?
	 *
	 * @param {string} topLevelType
	 * @param {object} nativeEvent
	 * @return {boolean}
	 */
	function isFallbackCompositionEnd(topLevelType, nativeEvent) {
	  switch (topLevelType) {
	    case 'topKeyUp':
	      // Command keys insert or clear IME input.
	      return END_KEYCODES.indexOf(nativeEvent.keyCode) !== -1;
	    case 'topKeyDown':
	      // Expect IME keyCode on each keydown. If we get any other
	      // code we must have exited earlier.
	      return nativeEvent.keyCode !== START_KEYCODE;
	    case 'topKeyPress':
	    case 'topMouseDown':
	    case 'topBlur':
	      // Events are not possible without cancelling IME.
	      return true;
	    default:
	      return false;
	  }
	}
	
	/**
	 * Google Input Tools provides composition data via a CustomEvent,
	 * with the `data` property populated in the `detail` object. If this
	 * is available on the event object, use it. If not, this is a plain
	 * composition event and we have nothing special to extract.
	 *
	 * @param {object} nativeEvent
	 * @return {?string}
	 */
	function getDataFromCustomEvent(nativeEvent) {
	  var detail = nativeEvent.detail;
	  if ((typeof detail === 'undefined' ? 'undefined' : _typeof(detail)) === 'object' && 'data' in detail) {
	    return detail.data;
	  }
	  return null;
	}
	
	// Track the current IME composition fallback object, if any.
	var currentComposition = null;
	
	/**
	 * @return {?object} A SyntheticCompositionEvent.
	 */
	function extractCompositionEvent(topLevelType, targetInst, nativeEvent, nativeEventTarget) {
	  var eventType;
	  var fallbackData;
	
	  if (canUseCompositionEvent) {
	    eventType = getCompositionEventType(topLevelType);
	  } else if (!currentComposition) {
	    if (isFallbackCompositionStart(topLevelType, nativeEvent)) {
	      eventType = eventTypes.compositionStart;
	    }
	  } else if (isFallbackCompositionEnd(topLevelType, nativeEvent)) {
	    eventType = eventTypes.compositionEnd;
	  }
	
	  if (!eventType) {
	    return null;
	  }
	
	  if (useFallbackCompositionData) {
	    // The current composition is stored statically and must not be
	    // overwritten while composition continues.
	    if (!currentComposition && eventType === eventTypes.compositionStart) {
	      currentComposition = FallbackCompositionState.getPooled(nativeEventTarget);
	    } else if (eventType === eventTypes.compositionEnd) {
	      if (currentComposition) {
	        fallbackData = currentComposition.getData();
	      }
	    }
	  }
	
	  var event = SyntheticCompositionEvent.getPooled(eventType, targetInst, nativeEvent, nativeEventTarget);
	
	  if (fallbackData) {
	    // Inject data generated from fallback path into the synthetic event.
	    // This matches the property of native CompositionEventInterface.
	    event.data = fallbackData;
	  } else {
	    var customData = getDataFromCustomEvent(nativeEvent);
	    if (customData !== null) {
	      event.data = customData;
	    }
	  }
	
	  EventPropagators.accumulateTwoPhaseDispatches(event);
	  return event;
	}
	
	/**
	 * @param {string} topLevelType Record from `EventConstants`.
	 * @param {object} nativeEvent Native browser event.
	 * @return {?string} The string corresponding to this `beforeInput` event.
	 */
	function getNativeBeforeInputChars(topLevelType, nativeEvent) {
	  switch (topLevelType) {
	    case 'topCompositionEnd':
	      return getDataFromCustomEvent(nativeEvent);
	    case 'topKeyPress':
	      /**
	       * If native `textInput` events are available, our goal is to make
	       * use of them. However, there is a special case: the spacebar key.
	       * In Webkit, preventing default on a spacebar `textInput` event
	       * cancels character insertion, but it *also* causes the browser
	       * to fall back to its default spacebar behavior of scrolling the
	       * page.
	       *
	       * Tracking at:
	       * https://code.google.com/p/chromium/issues/detail?id=355103
	       *
	       * To avoid this issue, use the keypress event as if no `textInput`
	       * event is available.
	       */
	      var which = nativeEvent.which;
	      if (which !== SPACEBAR_CODE) {
	        return null;
	      }
	
	      hasSpaceKeypress = true;
	      return SPACEBAR_CHAR;
	
	    case 'topTextInput':
	      // Record the characters to be added to the DOM.
	      var chars = nativeEvent.data;
	
	      // If it's a spacebar character, assume that we have already handled
	      // it at the keypress level and bail immediately. Android Chrome
	      // doesn't give us keycodes, so we need to blacklist it.
	      if (chars === SPACEBAR_CHAR && hasSpaceKeypress) {
	        return null;
	      }
	
	      return chars;
	
	    default:
	      // For other native event types, do nothing.
	      return null;
	  }
	}
	
	/**
	 * For browsers that do not provide the `textInput` event, extract the
	 * appropriate string to use for SyntheticInputEvent.
	 *
	 * @param {string} topLevelType Record from `EventConstants`.
	 * @param {object} nativeEvent Native browser event.
	 * @return {?string} The fallback string for this `beforeInput` event.
	 */
	function getFallbackBeforeInputChars(topLevelType, nativeEvent) {
	  // If we are currently composing (IME) and using a fallback to do so,
	  // try to extract the composed characters from the fallback object.
	  // If composition event is available, we extract a string only at
	  // compositionevent, otherwise extract it at fallback events.
	  if (currentComposition) {
	    if (topLevelType === 'topCompositionEnd' || !canUseCompositionEvent && isFallbackCompositionEnd(topLevelType, nativeEvent)) {
	      var chars = currentComposition.getData();
	      FallbackCompositionState.release(currentComposition);
	      currentComposition = null;
	      return chars;
	    }
	    return null;
	  }
	
	  switch (topLevelType) {
	    case 'topPaste':
	      // If a paste event occurs after a keypress, throw out the input
	      // chars. Paste events should not lead to BeforeInput events.
	      return null;
	    case 'topKeyPress':
	      /**
	       * As of v27, Firefox may fire keypress events even when no character
	       * will be inserted. A few possibilities:
	       *
	       * - `which` is `0`. Arrow keys, Esc key, etc.
	       *
	       * - `which` is the pressed key code, but no char is available.
	       *   Ex: 'AltGr + d` in Polish. There is no modified character for
	       *   this key combination and no character is inserted into the
	       *   document, but FF fires the keypress for char code `100` anyway.
	       *   No `input` event will occur.
	       *
	       * - `which` is the pressed key code, but a command combination is
	       *   being used. Ex: `Cmd+C`. No character is inserted, and no
	       *   `input` event will occur.
	       */
	      if (nativeEvent.which && !isKeypressCommand(nativeEvent)) {
	        return String.fromCharCode(nativeEvent.which);
	      }
	      return null;
	    case 'topCompositionEnd':
	      return useFallbackCompositionData ? null : nativeEvent.data;
	    default:
	      return null;
	  }
	}
	
	/**
	 * Extract a SyntheticInputEvent for `beforeInput`, based on either native
	 * `textInput` or fallback behavior.
	 *
	 * @return {?object} A SyntheticInputEvent.
	 */
	function extractBeforeInputEvent(topLevelType, targetInst, nativeEvent, nativeEventTarget) {
	  var chars;
	
	  if (canUseTextInputEvent) {
	    chars = getNativeBeforeInputChars(topLevelType, nativeEvent);
	  } else {
	    chars = getFallbackBeforeInputChars(topLevelType, nativeEvent);
	  }
	
	  // If no characters are being inserted, no BeforeInput event should
	  // be fired.
	  if (!chars) {
	    return null;
	  }
	
	  var event = SyntheticInputEvent.getPooled(eventTypes.beforeInput, targetInst, nativeEvent, nativeEventTarget);
	
	  event.data = chars;
	  EventPropagators.accumulateTwoPhaseDispatches(event);
	  return event;
	}
	
	/**
	 * Create an `onBeforeInput` event to match
	 * http://www.w3.org/TR/2013/WD-DOM-Level-3-Events-20131105/#events-inputevents.
	 *
	 * This event plugin is based on the native `textInput` event
	 * available in Chrome, Safari, Opera, and IE. This event fires after
	 * `onKeyPress` and `onCompositionEnd`, but before `onInput`.
	 *
	 * `beforeInput` is spec'd but not implemented in any browsers, and
	 * the `input` event does not provide any useful information about what has
	 * actually been added, contrary to the spec. Thus, `textInput` is the best
	 * available event to identify the characters that have actually been inserted
	 * into the target node.
	 *
	 * This plugin is also responsible for emitting `composition` events, thus
	 * allowing us to share composition fallback code for both `beforeInput` and
	 * `composition` event types.
	 */
	var BeforeInputEventPlugin = {
	
	  eventTypes: eventTypes,
	
	  extractEvents: function extractEvents(topLevelType, targetInst, nativeEvent, nativeEventTarget) {
	    return [extractCompositionEvent(topLevelType, targetInst, nativeEvent, nativeEventTarget), extractBeforeInputEvent(topLevelType, targetInst, nativeEvent, nativeEventTarget)];
	  }
	};
	
	module.exports = BeforeInputEventPlugin;

/***/ }),
/* 45 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var EventPluginHub = __webpack_require__(46);
	var EventPluginUtils = __webpack_require__(48);
	
	var accumulateInto = __webpack_require__(50);
	var forEachAccumulated = __webpack_require__(51);
	var warning = __webpack_require__(11);
	
	var getListener = EventPluginHub.getListener;
	
	/**
	 * Some event types have a notion of different registration names for different
	 * "phases" of propagation. This finds listeners by a given phase.
	 */
	function listenerAtPhase(inst, event, propagationPhase) {
	  var registrationName = event.dispatchConfig.phasedRegistrationNames[propagationPhase];
	  return getListener(inst, registrationName);
	}
	
	/**
	 * Tags a `SyntheticEvent` with dispatched listeners. Creating this function
	 * here, allows us to not have to bind or create functions for each event.
	 * Mutating the event's members allows us to not have to create a wrapping
	 * "dispatch" object that pairs the event with the listener.
	 */
	function accumulateDirectionalDispatches(inst, phase, event) {
	  if (process.env.NODE_ENV !== 'production') {
	    process.env.NODE_ENV !== 'production' ? warning(inst, 'Dispatching inst must not be null') : void 0;
	  }
	  var listener = listenerAtPhase(inst, event, phase);
	  if (listener) {
	    event._dispatchListeners = accumulateInto(event._dispatchListeners, listener);
	    event._dispatchInstances = accumulateInto(event._dispatchInstances, inst);
	  }
	}
	
	/**
	 * Collect dispatches (must be entirely collected before dispatching - see unit
	 * tests). Lazily allocate the array to conserve memory.  We must loop through
	 * each event and perform the traversal for each one. We cannot perform a
	 * single traversal for the entire collection of events because each event may
	 * have a different target.
	 */
	function accumulateTwoPhaseDispatchesSingle(event) {
	  if (event && event.dispatchConfig.phasedRegistrationNames) {
	    EventPluginUtils.traverseTwoPhase(event._targetInst, accumulateDirectionalDispatches, event);
	  }
	}
	
	/**
	 * Same as `accumulateTwoPhaseDispatchesSingle`, but skips over the targetID.
	 */
	function accumulateTwoPhaseDispatchesSingleSkipTarget(event) {
	  if (event && event.dispatchConfig.phasedRegistrationNames) {
	    var targetInst = event._targetInst;
	    var parentInst = targetInst ? EventPluginUtils.getParentInstance(targetInst) : null;
	    EventPluginUtils.traverseTwoPhase(parentInst, accumulateDirectionalDispatches, event);
	  }
	}
	
	/**
	 * Accumulates without regard to direction, does not look for phased
	 * registration names. Same as `accumulateDirectDispatchesSingle` but without
	 * requiring that the `dispatchMarker` be the same as the dispatched ID.
	 */
	function accumulateDispatches(inst, ignoredDirection, event) {
	  if (event && event.dispatchConfig.registrationName) {
	    var registrationName = event.dispatchConfig.registrationName;
	    var listener = getListener(inst, registrationName);
	    if (listener) {
	      event._dispatchListeners = accumulateInto(event._dispatchListeners, listener);
	      event._dispatchInstances = accumulateInto(event._dispatchInstances, inst);
	    }
	  }
	}
	
	/**
	 * Accumulates dispatches on an `SyntheticEvent`, but only for the
	 * `dispatchMarker`.
	 * @param {SyntheticEvent} event
	 */
	function accumulateDirectDispatchesSingle(event) {
	  if (event && event.dispatchConfig.registrationName) {
	    accumulateDispatches(event._targetInst, null, event);
	  }
	}
	
	function accumulateTwoPhaseDispatches(events) {
	  forEachAccumulated(events, accumulateTwoPhaseDispatchesSingle);
	}
	
	function accumulateTwoPhaseDispatchesSkipTarget(events) {
	  forEachAccumulated(events, accumulateTwoPhaseDispatchesSingleSkipTarget);
	}
	
	function accumulateEnterLeaveDispatches(leave, enter, from, to) {
	  EventPluginUtils.traverseEnterLeave(from, to, accumulateDispatches, leave, enter);
	}
	
	function accumulateDirectDispatches(events) {
	  forEachAccumulated(events, accumulateDirectDispatchesSingle);
	}
	
	/**
	 * A small set of propagation patterns, each of which will accept a small amount
	 * of information, and generate a set of "dispatch ready event objects" - which
	 * are sets of events that have already been annotated with a set of dispatched
	 * listener functions/ids. The API is designed this way to discourage these
	 * propagation strategies from actually executing the dispatches, since we
	 * always want to collect the entire set of dispatches before executing event a
	 * single one.
	 *
	 * @constructor EventPropagators
	 */
	var EventPropagators = {
	  accumulateTwoPhaseDispatches: accumulateTwoPhaseDispatches,
	  accumulateTwoPhaseDispatchesSkipTarget: accumulateTwoPhaseDispatchesSkipTarget,
	  accumulateDirectDispatches: accumulateDirectDispatches,
	  accumulateEnterLeaveDispatches: accumulateEnterLeaveDispatches
	};
	
	module.exports = EventPropagators;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ }),
/* 46 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
	
	var _prodInvariant = __webpack_require__(39);
	
	var EventPluginRegistry = __webpack_require__(47);
	var EventPluginUtils = __webpack_require__(48);
	var ReactErrorUtils = __webpack_require__(49);
	
	var accumulateInto = __webpack_require__(50);
	var forEachAccumulated = __webpack_require__(51);
	var invariant = __webpack_require__(8);
	
	/**
	 * Internal store for event listeners
	 */
	var listenerBank = {};
	
	/**
	 * Internal queue of events that have accumulated their dispatches and are
	 * waiting to have their dispatches executed.
	 */
	var eventQueue = null;
	
	/**
	 * Dispatches an event and releases it back into the pool, unless persistent.
	 *
	 * @param {?object} event Synthetic event to be dispatched.
	 * @param {boolean} simulated If the event is simulated (changes exn behavior)
	 * @private
	 */
	var executeDispatchesAndRelease = function executeDispatchesAndRelease(event, simulated) {
	  if (event) {
	    EventPluginUtils.executeDispatchesInOrder(event, simulated);
	
	    if (!event.isPersistent()) {
	      event.constructor.release(event);
	    }
	  }
	};
	var executeDispatchesAndReleaseSimulated = function executeDispatchesAndReleaseSimulated(e) {
	  return executeDispatchesAndRelease(e, true);
	};
	var executeDispatchesAndReleaseTopLevel = function executeDispatchesAndReleaseTopLevel(e) {
	  return executeDispatchesAndRelease(e, false);
	};
	
	var getDictionaryKey = function getDictionaryKey(inst) {
	  // Prevents V8 performance issue:
	  // https://github.com/facebook/react/pull/7232
	  return '.' + inst._rootNodeID;
	};
	
	function isInteractive(tag) {
	  return tag === 'button' || tag === 'input' || tag === 'select' || tag === 'textarea';
	}
	
	function shouldPreventMouseEvent(name, type, props) {
	  switch (name) {
	    case 'onClick':
	    case 'onClickCapture':
	    case 'onDoubleClick':
	    case 'onDoubleClickCapture':
	    case 'onMouseDown':
	    case 'onMouseDownCapture':
	    case 'onMouseMove':
	    case 'onMouseMoveCapture':
	    case 'onMouseUp':
	    case 'onMouseUpCapture':
	      return !!(props.disabled && isInteractive(type));
	    default:
	      return false;
	  }
	}
	
	/**
	 * This is a unified interface for event plugins to be installed and configured.
	 *
	 * Event plugins can implement the following properties:
	 *
	 *   `extractEvents` {function(string, DOMEventTarget, string, object): *}
	 *     Required. When a top-level event is fired, this method is expected to
	 *     extract synthetic events that will in turn be queued and dispatched.
	 *
	 *   `eventTypes` {object}
	 *     Optional, plugins that fire events must publish a mapping of registration
	 *     names that are used to register listeners. Values of this mapping must
	 *     be objects that contain `registrationName` or `phasedRegistrationNames`.
	 *
	 *   `executeDispatch` {function(object, function, string)}
	 *     Optional, allows plugins to override how an event gets dispatched. By
	 *     default, the listener is simply invoked.
	 *
	 * Each plugin that is injected into `EventsPluginHub` is immediately operable.
	 *
	 * @public
	 */
	var EventPluginHub = {
	
	  /**
	   * Methods for injecting dependencies.
	   */
	  injection: {
	
	    /**
	     * @param {array} InjectedEventPluginOrder
	     * @public
	     */
	    injectEventPluginOrder: EventPluginRegistry.injectEventPluginOrder,
	
	    /**
	     * @param {object} injectedNamesToPlugins Map from names to plugin modules.
	     */
	    injectEventPluginsByName: EventPluginRegistry.injectEventPluginsByName
	
	  },
	
	  /**
	   * Stores `listener` at `listenerBank[registrationName][key]`. Is idempotent.
	   *
	   * @param {object} inst The instance, which is the source of events.
	   * @param {string} registrationName Name of listener (e.g. `onClick`).
	   * @param {function} listener The callback to store.
	   */
	  putListener: function putListener(inst, registrationName, listener) {
	    !(typeof listener === 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Expected %s listener to be a function, instead got type %s', registrationName, typeof listener === 'undefined' ? 'undefined' : _typeof(listener)) : _prodInvariant('94', registrationName, typeof listener === 'undefined' ? 'undefined' : _typeof(listener)) : void 0;
	
	    var key = getDictionaryKey(inst);
	    var bankForRegistrationName = listenerBank[registrationName] || (listenerBank[registrationName] = {});
	    bankForRegistrationName[key] = listener;
	
	    var PluginModule = EventPluginRegistry.registrationNameModules[registrationName];
	    if (PluginModule && PluginModule.didPutListener) {
	      PluginModule.didPutListener(inst, registrationName, listener);
	    }
	  },
	
	  /**
	   * @param {object} inst The instance, which is the source of events.
	   * @param {string} registrationName Name of listener (e.g. `onClick`).
	   * @return {?function} The stored callback.
	   */
	  getListener: function getListener(inst, registrationName) {
	    // TODO: shouldPreventMouseEvent is DOM-specific and definitely should not
	    // live here; needs to be moved to a better place soon
	    var bankForRegistrationName = listenerBank[registrationName];
	    if (shouldPreventMouseEvent(registrationName, inst._currentElement.type, inst._currentElement.props)) {
	      return null;
	    }
	    var key = getDictionaryKey(inst);
	    return bankForRegistrationName && bankForRegistrationName[key];
	  },
	
	  /**
	   * Deletes a listener from the registration bank.
	   *
	   * @param {object} inst The instance, which is the source of events.
	   * @param {string} registrationName Name of listener (e.g. `onClick`).
	   */
	  deleteListener: function deleteListener(inst, registrationName) {
	    var PluginModule = EventPluginRegistry.registrationNameModules[registrationName];
	    if (PluginModule && PluginModule.willDeleteListener) {
	      PluginModule.willDeleteListener(inst, registrationName);
	    }
	
	    var bankForRegistrationName = listenerBank[registrationName];
	    // TODO: This should never be null -- when is it?
	    if (bankForRegistrationName) {
	      var key = getDictionaryKey(inst);
	      delete bankForRegistrationName[key];
	    }
	  },
	
	  /**
	   * Deletes all listeners for the DOM element with the supplied ID.
	   *
	   * @param {object} inst The instance, which is the source of events.
	   */
	  deleteAllListeners: function deleteAllListeners(inst) {
	    var key = getDictionaryKey(inst);
	    for (var registrationName in listenerBank) {
	      if (!listenerBank.hasOwnProperty(registrationName)) {
	        continue;
	      }
	
	      if (!listenerBank[registrationName][key]) {
	        continue;
	      }
	
	      var PluginModule = EventPluginRegistry.registrationNameModules[registrationName];
	      if (PluginModule && PluginModule.willDeleteListener) {
	        PluginModule.willDeleteListener(inst, registrationName);
	      }
	
	      delete listenerBank[registrationName][key];
	    }
	  },
	
	  /**
	   * Allows registered plugins an opportunity to extract events from top-level
	   * native browser events.
	   *
	   * @return {*} An accumulation of synthetic events.
	   * @internal
	   */
	  extractEvents: function extractEvents(topLevelType, targetInst, nativeEvent, nativeEventTarget) {
	    var events;
	    var plugins = EventPluginRegistry.plugins;
	    for (var i = 0; i < plugins.length; i++) {
	      // Not every plugin in the ordering may be loaded at runtime.
	      var possiblePlugin = plugins[i];
	      if (possiblePlugin) {
	        var extractedEvents = possiblePlugin.extractEvents(topLevelType, targetInst, nativeEvent, nativeEventTarget);
	        if (extractedEvents) {
	          events = accumulateInto(events, extractedEvents);
	        }
	      }
	    }
	    return events;
	  },
	
	  /**
	   * Enqueues a synthetic event that should be dispatched when
	   * `processEventQueue` is invoked.
	   *
	   * @param {*} events An accumulation of synthetic events.
	   * @internal
	   */
	  enqueueEvents: function enqueueEvents(events) {
	    if (events) {
	      eventQueue = accumulateInto(eventQueue, events);
	    }
	  },
	
	  /**
	   * Dispatches all synthetic events on the event queue.
	   *
	   * @internal
	   */
	  processEventQueue: function processEventQueue(simulated) {
	    // Set `eventQueue` to null before processing it so that we can tell if more
	    // events get enqueued while processing.
	    var processingEventQueue = eventQueue;
	    eventQueue = null;
	    if (simulated) {
	      forEachAccumulated(processingEventQueue, executeDispatchesAndReleaseSimulated);
	    } else {
	      forEachAccumulated(processingEventQueue, executeDispatchesAndReleaseTopLevel);
	    }
	    !!eventQueue ? process.env.NODE_ENV !== 'production' ? invariant(false, 'processEventQueue(): Additional events were enqueued while processing an event queue. Support for this has not yet been implemented.') : _prodInvariant('95') : void 0;
	    // This would be a good time to rethrow if any of the event handlers threw.
	    ReactErrorUtils.rethrowCaughtError();
	  },
	
	  /**
	   * These are needed for tests only. Do not use!
	   */
	  __purge: function __purge() {
	    listenerBank = {};
	  },
	
	  __getListenerBank: function __getListenerBank() {
	    return listenerBank;
	  }
	
	};
	
	module.exports = EventPluginHub;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ }),
/* 47 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */
	
	'use strict';
	
	var _prodInvariant = __webpack_require__(39);
	
	var invariant = __webpack_require__(8);
	
	/**
	 * Injectable ordering of event plugins.
	 */
	var eventPluginOrder = null;
	
	/**
	 * Injectable mapping from names to event plugin modules.
	 */
	var namesToPlugins = {};
	
	/**
	 * Recomputes the plugin list using the injected plugins and plugin ordering.
	 *
	 * @private
	 */
	function recomputePluginOrdering() {
	  if (!eventPluginOrder) {
	    // Wait until an `eventPluginOrder` is injected.
	    return;
	  }
	  for (var pluginName in namesToPlugins) {
	    var pluginModule = namesToPlugins[pluginName];
	    var pluginIndex = eventPluginOrder.indexOf(pluginName);
	    !(pluginIndex > -1) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginRegistry: Cannot inject event plugins that do not exist in the plugin ordering, `%s`.', pluginName) : _prodInvariant('96', pluginName) : void 0;
	    if (EventPluginRegistry.plugins[pluginIndex]) {
	      continue;
	    }
	    !pluginModule.extractEvents ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginRegistry: Event plugins must implement an `extractEvents` method, but `%s` does not.', pluginName) : _prodInvariant('97', pluginName) : void 0;
	    EventPluginRegistry.plugins[pluginIndex] = pluginModule;
	    var publishedEvents = pluginModule.eventTypes;
	    for (var eventName in publishedEvents) {
	      !publishEventForPlugin(publishedEvents[eventName], pluginModule, eventName) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginRegistry: Failed to publish event `%s` for plugin `%s`.', eventName, pluginName) : _prodInvariant('98', eventName, pluginName) : void 0;
	    }
	  }
	}
	
	/**
	 * Publishes an event so that it can be dispatched by the supplied plugin.
	 *
	 * @param {object} dispatchConfig Dispatch configuration for the event.
	 * @param {object} PluginModule Plugin publishing the event.
	 * @return {boolean} True if the event was successfully published.
	 * @private
	 */
	function publishEventForPlugin(dispatchConfig, pluginModule, eventName) {
	  !!EventPluginRegistry.eventNameDispatchConfigs.hasOwnProperty(eventName) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginHub: More than one plugin attempted to publish the same event name, `%s`.', eventName) : _prodInvariant('99', eventName) : void 0;
	  EventPluginRegistry.eventNameDispatchConfigs[eventName] = dispatchConfig;
	
	  var phasedRegistrationNames = dispatchConfig.phasedRegistrationNames;
	  if (phasedRegistrationNames) {
	    for (var phaseName in phasedRegistrationNames) {
	      if (phasedRegistrationNames.hasOwnProperty(phaseName)) {
	        var phasedRegistrationName = phasedRegistrationNames[phaseName];
	        publishRegistrationName(phasedRegistrationName, pluginModule, eventName);
	      }
	    }
	    return true;
	  } else if (dispatchConfig.registrationName) {
	    publishRegistrationName(dispatchConfig.registrationName, pluginModule, eventName);
	    return true;
	  }
	  return false;
	}
	
	/**
	 * Publishes a registration name that is used to identify dispatched events and
	 * can be used with `EventPluginHub.putListener` to register listeners.
	 *
	 * @param {string} registrationName Registration name to add.
	 * @param {object} PluginModule Plugin publishing the event.
	 * @private
	 */
	function publishRegistrationName(registrationName, pluginModule, eventName) {
	  !!EventPluginRegistry.registrationNameModules[registrationName] ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginHub: More than one plugin attempted to publish the same registration name, `%s`.', registrationName) : _prodInvariant('100', registrationName) : void 0;
	  EventPluginRegistry.registrationNameModules[registrationName] = pluginModule;
	  EventPluginRegistry.registrationNameDependencies[registrationName] = pluginModule.eventTypes[eventName].dependencies;
	
	  if (process.env.NODE_ENV !== 'production') {
	    var lowerCasedName = registrationName.toLowerCase();
	    EventPluginRegistry.possibleRegistrationNames[lowerCasedName] = registrationName;
	
	    if (registrationName === 'onDoubleClick') {
	      EventPluginRegistry.possibleRegistrationNames.ondblclick = registrationName;
	    }
	  }
	}
	
	/**
	 * Registers plugins so that they can extract and dispatch events.
	 *
	 * @see {EventPluginHub}
	 */
	var EventPluginRegistry = {
	
	  /**
	   * Ordered list of injected plugins.
	   */
	  plugins: [],
	
	  /**
	   * Mapping from event name to dispatch config
	   */
	  eventNameDispatchConfigs: {},
	
	  /**
	   * Mapping from registration name to plugin module
	   */
	  registrationNameModules: {},
	
	  /**
	   * Mapping from registration name to event name
	   */
	  registrationNameDependencies: {},
	
	  /**
	   * Mapping from lowercase registration names to the properly cased version,
	   * used to warn in the case of missing event handlers. Available
	   * only in __DEV__.
	   * @type {Object}
	   */
	  possibleRegistrationNames: process.env.NODE_ENV !== 'production' ? {} : null,
	  // Trust the developer to only use possibleRegistrationNames in __DEV__
	
	  /**
	   * Injects an ordering of plugins (by plugin name). This allows the ordering
	   * to be decoupled from injection of the actual plugins so that ordering is
	   * always deterministic regardless of packaging, on-the-fly injection, etc.
	   *
	   * @param {array} InjectedEventPluginOrder
	   * @internal
	   * @see {EventPluginHub.injection.injectEventPluginOrder}
	   */
	  injectEventPluginOrder: function injectEventPluginOrder(injectedEventPluginOrder) {
	    !!eventPluginOrder ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginRegistry: Cannot inject event plugin ordering more than once. You are likely trying to load more than one copy of React.') : _prodInvariant('101') : void 0;
	    // Clone the ordering so it cannot be dynamically mutated.
	    eventPluginOrder = Array.prototype.slice.call(injectedEventPluginOrder);
	    recomputePluginOrdering();
	  },
	
	  /**
	   * Injects plugins to be used by `EventPluginHub`. The plugin names must be
	   * in the ordering injected by `injectEventPluginOrder`.
	   *
	   * Plugins can be injected as part of page initialization or on-the-fly.
	   *
	   * @param {object} injectedNamesToPlugins Map from names to plugin modules.
	   * @internal
	   * @see {EventPluginHub.injection.injectEventPluginsByName}
	   */
	  injectEventPluginsByName: function injectEventPluginsByName(injectedNamesToPlugins) {
	    var isOrderingDirty = false;
	    for (var pluginName in injectedNamesToPlugins) {
	      if (!injectedNamesToPlugins.hasOwnProperty(pluginName)) {
	        continue;
	      }
	      var pluginModule = injectedNamesToPlugins[pluginName];
	      if (!namesToPlugins.hasOwnProperty(pluginName) || namesToPlugins[pluginName] !== pluginModule) {
	        !!namesToPlugins[pluginName] ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginRegistry: Cannot inject two different event plugins using the same name, `%s`.', pluginName) : _prodInvariant('102', pluginName) : void 0;
	        namesToPlugins[pluginName] = pluginModule;
	        isOrderingDirty = true;
	      }
	    }
	    if (isOrderingDirty) {
	      recomputePluginOrdering();
	    }
	  },
	
	  /**
	   * Looks up the plugin for the supplied event.
	   *
	   * @param {object} event A synthetic event.
	   * @return {?object} The plugin that created the supplied event.
	   * @internal
	   */
	  getPluginModuleForEvent: function getPluginModuleForEvent(event) {
	    var dispatchConfig = event.dispatchConfig;
	    if (dispatchConfig.registrationName) {
	      return EventPluginRegistry.registrationNameModules[dispatchConfig.registrationName] || null;
	    }
	    if (dispatchConfig.phasedRegistrationNames !== undefined) {
	      // pulling phasedRegistrationNames out of dispatchConfig helps Flow see
	      // that it is not undefined.
	      var phasedRegistrationNames = dispatchConfig.phasedRegistrationNames;
	
	      for (var phase in phasedRegistrationNames) {
	        if (!phasedRegistrationNames.hasOwnProperty(phase)) {
	          continue;
	        }
	        var pluginModule = EventPluginRegistry.registrationNameModules[phasedRegistrationNames[phase]];
	        if (pluginModule) {
	          return pluginModule;
	        }
	      }
	    }
	    return null;
	  },
	
	  /**
	   * Exposed for unit testing.
	   * @private
	   */
	  _resetEventPlugins: function _resetEventPlugins() {
	    eventPluginOrder = null;
	    for (var pluginName in namesToPlugins) {
	      if (namesToPlugins.hasOwnProperty(pluginName)) {
	        delete namesToPlugins[pluginName];
	      }
	    }
	    EventPluginRegistry.plugins.length = 0;
	
	    var eventNameDispatchConfigs = EventPluginRegistry.eventNameDispatchConfigs;
	    for (var eventName in eventNameDispatchConfigs) {
	      if (eventNameDispatchConfigs.hasOwnProperty(eventName)) {
	        delete eventNameDispatchConfigs[eventName];
	      }
	    }
	
	    var registrationNameModules = EventPluginRegistry.registrationNameModules;
	    for (var registrationName in registrationNameModules) {
	      if (registrationNameModules.hasOwnProperty(registrationName)) {
	        delete registrationNameModules[registrationName];
	      }
	    }
	
	    if (process.env.NODE_ENV !== 'production') {
	      var possibleRegistrationNames = EventPluginRegistry.possibleRegistrationNames;
	      for (var lowerCasedName in possibleRegistrationNames) {
	        if (possibleRegistrationNames.hasOwnProperty(lowerCasedName)) {
	          delete possibleRegistrationNames[lowerCasedName];
	        }
	      }
	    }
	  }
	
	};
	
	module.exports = EventPluginRegistry;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ }),
/* 48 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var _prodInvariant = __webpack_require__(39);
	
	var ReactErrorUtils = __webpack_require__(49);
	
	var invariant = __webpack_require__(8);
	var warning = __webpack_require__(11);
	
	/**
	 * Injected dependencies:
	 */
	
	/**
	 * - `ComponentTree`: [required] Module that can convert between React instances
	 *   and actual node references.
	 */
	var ComponentTree;
	var TreeTraversal;
	var injection = {
	  injectComponentTree: function injectComponentTree(Injected) {
	    ComponentTree = Injected;
	    if (process.env.NODE_ENV !== 'production') {
	      process.env.NODE_ENV !== 'production' ? warning(Injected && Injected.getNodeFromInstance && Injected.getInstanceFromNode, 'EventPluginUtils.injection.injectComponentTree(...): Injected ' + 'module is missing getNodeFromInstance or getInstanceFromNode.') : void 0;
	    }
	  },
	  injectTreeTraversal: function injectTreeTraversal(Injected) {
	    TreeTraversal = Injected;
	    if (process.env.NODE_ENV !== 'production') {
	      process.env.NODE_ENV !== 'production' ? warning(Injected && Injected.isAncestor && Injected.getLowestCommonAncestor, 'EventPluginUtils.injection.injectTreeTraversal(...): Injected ' + 'module is missing isAncestor or getLowestCommonAncestor.') : void 0;
	    }
	  }
	};
	
	function isEndish(topLevelType) {
	  return topLevelType === 'topMouseUp' || topLevelType === 'topTouchEnd' || topLevelType === 'topTouchCancel';
	}
	
	function isMoveish(topLevelType) {
	  return topLevelType === 'topMouseMove' || topLevelType === 'topTouchMove';
	}
	function isStartish(topLevelType) {
	  return topLevelType === 'topMouseDown' || topLevelType === 'topTouchStart';
	}
	
	var validateEventDispatches;
	if (process.env.NODE_ENV !== 'production') {
	  validateEventDispatches = function validateEventDispatches(event) {
	    var dispatchListeners = event._dispatchListeners;
	    var dispatchInstances = event._dispatchInstances;
	
	    var listenersIsArr = Array.isArray(dispatchListeners);
	    var listenersLen = listenersIsArr ? dispatchListeners.length : dispatchListeners ? 1 : 0;
	
	    var instancesIsArr = Array.isArray(dispatchInstances);
	    var instancesLen = instancesIsArr ? dispatchInstances.length : dispatchInstances ? 1 : 0;
	
	    process.env.NODE_ENV !== 'production' ? warning(instancesIsArr === listenersIsArr && instancesLen === listenersLen, 'EventPluginUtils: Invalid `event`.') : void 0;
	  };
	}
	
	/**
	 * Dispatch the event to the listener.
	 * @param {SyntheticEvent} event SyntheticEvent to handle
	 * @param {boolean} simulated If the event is simulated (changes exn behavior)
	 * @param {function} listener Application-level callback
	 * @param {*} inst Internal component instance
	 */
	function executeDispatch(event, simulated, listener, inst) {
	  var type = event.type || 'unknown-event';
	  event.currentTarget = EventPluginUtils.getNodeFromInstance(inst);
	  if (simulated) {
	    ReactErrorUtils.invokeGuardedCallbackWithCatch(type, listener, event);
	  } else {
	    ReactErrorUtils.invokeGuardedCallback(type, listener, event);
	  }
	  event.currentTarget = null;
	}
	
	/**
	 * Standard/simple iteration through an event's collected dispatches.
	 */
	function executeDispatchesInOrder(event, simulated) {
	  var dispatchListeners = event._dispatchListeners;
	  var dispatchInstances = event._dispatchInstances;
	  if (process.env.NODE_ENV !== 'production') {
	    validateEventDispatches(event);
	  }
	  if (Array.isArray(dispatchListeners)) {
	    for (var i = 0; i < dispatchListeners.length; i++) {
	      if (event.isPropagationStopped()) {
	        break;
	      }
	      // Listeners and Instances are two parallel arrays that are always in sync.
	      executeDispatch(event, simulated, dispatchListeners[i], dispatchInstances[i]);
	    }
	  } else if (dispatchListeners) {
	    executeDispatch(event, simulated, dispatchListeners, dispatchInstances);
	  }
	  event._dispatchListeners = null;
	  event._dispatchInstances = null;
	}
	
	/**
	 * Standard/simple iteration through an event's collected dispatches, but stops
	 * at the first dispatch execution returning true, and returns that id.
	 *
	 * @return {?string} id of the first dispatch execution who's listener returns
	 * true, or null if no listener returned true.
	 */
	function executeDispatchesInOrderStopAtTrueImpl(event) {
	  var dispatchListeners = event._dispatchListeners;
	  var dispatchInstances = event._dispatchInstances;
	  if (process.env.NODE_ENV !== 'production') {
	    validateEventDispatches(event);
	  }
	  if (Array.isArray(dispatchListeners)) {
	    for (var i = 0; i < dispatchListeners.length; i++) {
	      if (event.isPropagationStopped()) {
	        break;
	      }
	      // Listeners and Instances are two parallel arrays that are always in sync.
	      if (dispatchListeners[i](event, dispatchInstances[i])) {
	        return dispatchInstances[i];
	      }
	    }
	  } else if (dispatchListeners) {
	    if (dispatchListeners(event, dispatchInstances)) {
	      return dispatchInstances;
	    }
	  }
	  return null;
	}
	
	/**
	 * @see executeDispatchesInOrderStopAtTrueImpl
	 */
	function executeDispatchesInOrderStopAtTrue(event) {
	  var ret = executeDispatchesInOrderStopAtTrueImpl(event);
	  event._dispatchInstances = null;
	  event._dispatchListeners = null;
	  return ret;
	}
	
	/**
	 * Execution of a "direct" dispatch - there must be at most one dispatch
	 * accumulated on the event or it is considered an error. It doesn't really make
	 * sense for an event with multiple dispatches (bubbled) to keep track of the
	 * return values at each dispatch execution, but it does tend to make sense when
	 * dealing with "direct" dispatches.
	 *
	 * @return {*} The return value of executing the single dispatch.
	 */
	function executeDirectDispatch(event) {
	  if (process.env.NODE_ENV !== 'production') {
	    validateEventDispatches(event);
	  }
	  var dispatchListener = event._dispatchListeners;
	  var dispatchInstance = event._dispatchInstances;
	  !!Array.isArray(dispatchListener) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'executeDirectDispatch(...): Invalid `event`.') : _prodInvariant('103') : void 0;
	  event.currentTarget = dispatchListener ? EventPluginUtils.getNodeFromInstance(dispatchInstance) : null;
	  var res = dispatchListener ? dispatchListener(event) : null;
	  event.currentTarget = null;
	  event._dispatchListeners = null;
	  event._dispatchInstances = null;
	  return res;
	}
	
	/**
	 * @param {SyntheticEvent} event
	 * @return {boolean} True iff number of dispatches accumulated is greater than 0.
	 */
	function hasDispatches(event) {
	  return !!event._dispatchListeners;
	}
	
	/**
	 * General utilities that are useful in creating custom Event Plugins.
	 */
	var EventPluginUtils = {
	  isEndish: isEndish,
	  isMoveish: isMoveish,
	  isStartish: isStartish,
	
	  executeDirectDispatch: executeDirectDispatch,
	  executeDispatchesInOrder: executeDispatchesInOrder,
	  executeDispatchesInOrderStopAtTrue: executeDispatchesInOrderStopAtTrue,
	  hasDispatches: hasDispatches,
	
	  getInstanceFromNode: function getInstanceFromNode(node) {
	    return ComponentTree.getInstanceFromNode(node);
	  },
	  getNodeFromInstance: function getNodeFromInstance(node) {
	    return ComponentTree.getNodeFromInstance(node);
	  },
	  isAncestor: function isAncestor(a, b) {
	    return TreeTraversal.isAncestor(a, b);
	  },
	  getLowestCommonAncestor: function getLowestCommonAncestor(a, b) {
	    return TreeTraversal.getLowestCommonAncestor(a, b);
	  },
	  getParentInstance: function getParentInstance(inst) {
	    return TreeTraversal.getParentInstance(inst);
	  },
	  traverseTwoPhase: function traverseTwoPhase(target, fn, arg) {
	    return TreeTraversal.traverseTwoPhase(target, fn, arg);
	  },
	  traverseEnterLeave: function traverseEnterLeave(from, to, fn, argFrom, argTo) {
	    return TreeTraversal.traverseEnterLeave(from, to, fn, argFrom, argTo);
	  },
	
	  injection: injection
	};
	
	module.exports = EventPluginUtils;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ }),
/* 49 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */
	
	'use strict';
	
	var caughtError = null;
	
	/**
	 * Call a function while guarding against errors that happens within it.
	 *
	 * @param {String} name of the guard to use for logging or debugging
	 * @param {Function} func The function to invoke
	 * @param {*} a First argument
	 * @param {*} b Second argument
	 */
	function invokeGuardedCallback(name, func, a) {
	  try {
	    func(a);
	  } catch (x) {
	    if (caughtError === null) {
	      caughtError = x;
	    }
	  }
	}
	
	var ReactErrorUtils = {
	  invokeGuardedCallback: invokeGuardedCallback,
	
	  /**
	   * Invoked by ReactTestUtils.Simulate so that any errors thrown by the event
	   * handler are sure to be rethrown by rethrowCaughtError.
	   */
	  invokeGuardedCallbackWithCatch: invokeGuardedCallback,
	
	  /**
	   * During execution of guarded functions we will capture the first error which
	   * we will rethrow to be handled by the top level error handler.
	   */
	  rethrowCaughtError: function rethrowCaughtError() {
	    if (caughtError) {
	      var error = caughtError;
	      caughtError = null;
	      throw error;
	    }
	  }
	};
	
	if (process.env.NODE_ENV !== 'production') {
	  /**
	   * To help development we can get better devtools integration by simulating a
	   * real browser event.
	   */
	  if (typeof window !== 'undefined' && typeof window.dispatchEvent === 'function' && typeof document !== 'undefined' && typeof document.createEvent === 'function') {
	    var fakeNode = document.createElement('react');
	    ReactErrorUtils.invokeGuardedCallback = function (name, func, a) {
	      var boundFunc = func.bind(null, a);
	      var evtType = 'react-' + name;
	      fakeNode.addEventListener(evtType, boundFunc, false);
	      var evt = document.createEvent('Event');
	      evt.initEvent(evtType, false, false);
	      fakeNode.dispatchEvent(evt);
	      fakeNode.removeEventListener(evtType, boundFunc, false);
	    };
	  }
	}
	
	module.exports = ReactErrorUtils;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ }),
/* 50 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2014-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */
	
	'use strict';
	
	var _prodInvariant = __webpack_require__(39);
	
	var invariant = __webpack_require__(8);
	
	/**
	 * Accumulates items that must not be null or undefined into the first one. This
	 * is used to conserve memory by avoiding array allocations, and thus sacrifices
	 * API cleanness. Since `current` can be null before being passed in and not
	 * null after this function, make sure to assign it back to `current`:
	 *
	 * `a = accumulateInto(a, b);`
	 *
	 * This API should be sparingly used. Try `accumulate` for something cleaner.
	 *
	 * @return {*|array<*>} An accumulation of items.
	 */
	
	function accumulateInto(current, next) {
	  !(next != null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'accumulateInto(...): Accumulated items must not be null or undefined.') : _prodInvariant('30') : void 0;
	
	  if (current == null) {
	    return next;
	  }
	
	  // Both are not empty. Warning: Never call x.concat(y) when you are not
	  // certain that x is an Array (x could be a string with concat method).
	  if (Array.isArray(current)) {
	    if (Array.isArray(next)) {
	      current.push.apply(current, next);
	      return current;
	    }
	    current.push(next);
	    return current;
	  }
	
	  if (Array.isArray(next)) {
	    // A bit too dangerous to mutate `next`.
	    return [current].concat(next);
	  }
	
	  return [current, next];
	}
	
	module.exports = accumulateInto;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ }),
/* 51 */
/***/ (function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */
	
	'use strict';
	
	/**
	 * @param {array} arr an "accumulation" of items which is either an Array or
	 * a single item. Useful when paired with the `accumulate` module. This is a
	 * simple utility that allows us to reason about a collection of items, but
	 * handling the case when there is exactly one item (and we do not need to
	 * allocate an array).
	 */
	
	function forEachAccumulated(arr, cb, scope) {
	  if (Array.isArray(arr)) {
	    arr.forEach(cb, scope);
	  } else if (arr) {
	    cb.call(scope, arr);
	  }
	}
	
	module.exports = forEachAccumulated;

/***/ }),
/* 52 */
/***/ (function(module, exports) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var canUseDOM = !!(typeof window !== 'undefined' && window.document && window.document.createElement);
	
	/**
	 * Simple, lightweight module assisting with the detection and context of
	 * Worker. Helps avoid circular dependencies and allows code to reason about
	 * whether or not they are in a Worker, even if they never include the main
	 * `ReactWorker` dependency.
	 */
	var ExecutionEnvironment = {
	
	  canUseDOM: canUseDOM,
	
	  canUseWorkers: typeof Worker !== 'undefined',
	
	  canUseEventListeners: canUseDOM && !!(window.addEventListener || window.attachEvent),
	
	  canUseViewport: canUseDOM && !!window.screen,
	
	  isInWorker: !canUseDOM // For now, this is true - might change in the future.
	
	};
	
	module.exports = ExecutionEnvironment;

/***/ }),
/* 53 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var _assign = __webpack_require__(4);
	
	var PooledClass = __webpack_require__(54);
	
	var getTextContentAccessor = __webpack_require__(55);
	
	/**
	 * This helper class stores information about text content of a target node,
	 * allowing comparison of content before and after a given event.
	 *
	 * Identify the node where selection currently begins, then observe
	 * both its text content and its current position in the DOM. Since the
	 * browser may natively replace the target node during composition, we can
	 * use its position to find its replacement.
	 *
	 * @param {DOMEventTarget} root
	 */
	function FallbackCompositionState(root) {
	  this._root = root;
	  this._startText = this.getText();
	  this._fallbackText = null;
	}
	
	_assign(FallbackCompositionState.prototype, {
	  destructor: function destructor() {
	    this._root = null;
	    this._startText = null;
	    this._fallbackText = null;
	  },
	
	  /**
	   * Get current text of input.
	   *
	   * @return {string}
	   */
	  getText: function getText() {
	    if ('value' in this._root) {
	      return this._root.value;
	    }
	    return this._root[getTextContentAccessor()];
	  },
	
	  /**
	   * Determine the differing substring between the initially stored
	   * text content and the current content.
	   *
	   * @return {string}
	   */
	  getData: function getData() {
	    if (this._fallbackText) {
	      return this._fallbackText;
	    }
	
	    var start;
	    var startValue = this._startText;
	    var startLength = startValue.length;
	    var end;
	    var endValue = this.getText();
	    var endLength = endValue.length;
	
	    for (start = 0; start < startLength; start++) {
	      if (startValue[start] !== endValue[start]) {
	        break;
	      }
	    }
	
	    var minEnd = startLength - start;
	    for (end = 1; end <= minEnd; end++) {
	      if (startValue[startLength - end] !== endValue[endLength - end]) {
	        break;
	      }
	    }
	
	    var sliceTail = end > 1 ? 1 - end : undefined;
	    this._fallbackText = endValue.slice(start, sliceTail);
	    return this._fallbackText;
	  }
	});
	
	PooledClass.addPoolingTo(FallbackCompositionState);
	
	module.exports = FallbackCompositionState;

/***/ }),
/* 54 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */
	
	'use strict';
	
	var _prodInvariant = __webpack_require__(39);
	
	var invariant = __webpack_require__(8);
	
	/**
	 * Static poolers. Several custom versions for each potential number of
	 * arguments. A completely generic pooler is easy to implement, but would
	 * require accessing the `arguments` object. In each of these, `this` refers to
	 * the Class itself, not an instance. If any others are needed, simply add them
	 * here, or in their own files.
	 */
	var oneArgumentPooler = function oneArgumentPooler(copyFieldsFrom) {
	  var Klass = this;
	  if (Klass.instancePool.length) {
	    var instance = Klass.instancePool.pop();
	    Klass.call(instance, copyFieldsFrom);
	    return instance;
	  } else {
	    return new Klass(copyFieldsFrom);
	  }
	};
	
	var twoArgumentPooler = function twoArgumentPooler(a1, a2) {
	  var Klass = this;
	  if (Klass.instancePool.length) {
	    var instance = Klass.instancePool.pop();
	    Klass.call(instance, a1, a2);
	    return instance;
	  } else {
	    return new Klass(a1, a2);
	  }
	};
	
	var threeArgumentPooler = function threeArgumentPooler(a1, a2, a3) {
	  var Klass = this;
	  if (Klass.instancePool.length) {
	    var instance = Klass.instancePool.pop();
	    Klass.call(instance, a1, a2, a3);
	    return instance;
	  } else {
	    return new Klass(a1, a2, a3);
	  }
	};
	
	var fourArgumentPooler = function fourArgumentPooler(a1, a2, a3, a4) {
	  var Klass = this;
	  if (Klass.instancePool.length) {
	    var instance = Klass.instancePool.pop();
	    Klass.call(instance, a1, a2, a3, a4);
	    return instance;
	  } else {
	    return new Klass(a1, a2, a3, a4);
	  }
	};
	
	var standardReleaser = function standardReleaser(instance) {
	  var Klass = this;
	  !(instance instanceof Klass) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Trying to release an instance into a pool of a different type.') : _prodInvariant('25') : void 0;
	  instance.destructor();
	  if (Klass.instancePool.length < Klass.poolSize) {
	    Klass.instancePool.push(instance);
	  }
	};
	
	var DEFAULT_POOL_SIZE = 10;
	var DEFAULT_POOLER = oneArgumentPooler;
	
	/**
	 * Augments `CopyConstructor` to be a poolable class, augmenting only the class
	 * itself (statically) not adding any prototypical fields. Any CopyConstructor
	 * you give this may have a `poolSize` property, and will look for a
	 * prototypical `destructor` on instances.
	 *
	 * @param {Function} CopyConstructor Constructor that can be used to reset.
	 * @param {Function} pooler Customizable pooler.
	 */
	var addPoolingTo = function addPoolingTo(CopyConstructor, pooler) {
	  // Casting as any so that flow ignores the actual implementation and trusts
	  // it to match the type we declared
	  var NewKlass = CopyConstructor;
	  NewKlass.instancePool = [];
	  NewKlass.getPooled = pooler || DEFAULT_POOLER;
	  if (!NewKlass.poolSize) {
	    NewKlass.poolSize = DEFAULT_POOL_SIZE;
	  }
	  NewKlass.release = standardReleaser;
	  return NewKlass;
	};
	
	var PooledClass = {
	  addPoolingTo: addPoolingTo,
	  oneArgumentPooler: oneArgumentPooler,
	  twoArgumentPooler: twoArgumentPooler,
	  threeArgumentPooler: threeArgumentPooler,
	  fourArgumentPooler: fourArgumentPooler
	};
	
	module.exports = PooledClass;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ }),
/* 55 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var ExecutionEnvironment = __webpack_require__(52);
	
	var contentKey = null;
	
	/**
	 * Gets the key used to access text content on a DOM node.
	 *
	 * @return {?string} Key used to access text content.
	 * @internal
	 */
	function getTextContentAccessor() {
	  if (!contentKey && ExecutionEnvironment.canUseDOM) {
	    // Prefer textContent to innerText because many browsers support both but
	    // SVG <text> elements don't support innerText even when <div> does.
	    contentKey = 'textContent' in document.documentElement ? 'textContent' : 'innerText';
	  }
	  return contentKey;
	}
	
	module.exports = getTextContentAccessor;

/***/ }),
/* 56 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var SyntheticEvent = __webpack_require__(57);
	
	/**
	 * @interface Event
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/#events-compositionevents
	 */
	var CompositionEventInterface = {
	  data: null
	};
	
	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticUIEvent}
	 */
	function SyntheticCompositionEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  return SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}
	
	SyntheticEvent.augmentClass(SyntheticCompositionEvent, CompositionEventInterface);
	
	module.exports = SyntheticCompositionEvent;

/***/ }),
/* 57 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var _assign = __webpack_require__(4);
	
	var PooledClass = __webpack_require__(54);
	
	var emptyFunction = __webpack_require__(12);
	var warning = __webpack_require__(11);
	
	var didWarnForAddedNewProperty = false;
	var isProxySupported = typeof Proxy === 'function';
	
	var shouldBeReleasedProperties = ['dispatchConfig', '_targetInst', 'nativeEvent', 'isDefaultPrevented', 'isPropagationStopped', '_dispatchListeners', '_dispatchInstances'];
	
	/**
	 * @interface Event
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */
	var EventInterface = {
	  type: null,
	  target: null,
	  // currentTarget is set when dispatching; no use in copying it here
	  currentTarget: emptyFunction.thatReturnsNull,
	  eventPhase: null,
	  bubbles: null,
	  cancelable: null,
	  timeStamp: function timeStamp(event) {
	    return event.timeStamp || Date.now();
	  },
	  defaultPrevented: null,
	  isTrusted: null
	};
	
	/**
	 * Synthetic events are dispatched by event plugins, typically in response to a
	 * top-level event delegation handler.
	 *
	 * These systems should generally use pooling to reduce the frequency of garbage
	 * collection. The system should check `isPersistent` to determine whether the
	 * event should be released into the pool after being dispatched. Users that
	 * need a persisted event should invoke `persist`.
	 *
	 * Synthetic events (and subclasses) implement the DOM Level 3 Events API by
	 * normalizing browser quirks. Subclasses do not necessarily have to implement a
	 * DOM interface; custom application-specific events can also subclass this.
	 *
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {*} targetInst Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @param {DOMEventTarget} nativeEventTarget Target node.
	 */
	function SyntheticEvent(dispatchConfig, targetInst, nativeEvent, nativeEventTarget) {
	  if (process.env.NODE_ENV !== 'production') {
	    // these have a getter/setter for warnings
	    delete this.nativeEvent;
	    delete this.preventDefault;
	    delete this.stopPropagation;
	  }
	
	  this.dispatchConfig = dispatchConfig;
	  this._targetInst = targetInst;
	  this.nativeEvent = nativeEvent;
	
	  var Interface = this.constructor.Interface;
	  for (var propName in Interface) {
	    if (!Interface.hasOwnProperty(propName)) {
	      continue;
	    }
	    if (process.env.NODE_ENV !== 'production') {
	      delete this[propName]; // this has a getter/setter for warnings
	    }
	    var normalize = Interface[propName];
	    if (normalize) {
	      this[propName] = normalize(nativeEvent);
	    } else {
	      if (propName === 'target') {
	        this.target = nativeEventTarget;
	      } else {
	        this[propName] = nativeEvent[propName];
	      }
	    }
	  }
	
	  var defaultPrevented = nativeEvent.defaultPrevented != null ? nativeEvent.defaultPrevented : nativeEvent.returnValue === false;
	  if (defaultPrevented) {
	    this.isDefaultPrevented = emptyFunction.thatReturnsTrue;
	  } else {
	    this.isDefaultPrevented = emptyFunction.thatReturnsFalse;
	  }
	  this.isPropagationStopped = emptyFunction.thatReturnsFalse;
	  return this;
	}
	
	_assign(SyntheticEvent.prototype, {
	
	  preventDefault: function preventDefault() {
	    this.defaultPrevented = true;
	    var event = this.nativeEvent;
	    if (!event) {
	      return;
	    }
	
	    if (event.preventDefault) {
	      event.preventDefault();
	    } else if (typeof event.returnValue !== 'unknown') {
	      // eslint-disable-line valid-typeof
	      event.returnValue = false;
	    }
	    this.isDefaultPrevented = emptyFunction.thatReturnsTrue;
	  },
	
	  stopPropagation: function stopPropagation() {
	    var event = this.nativeEvent;
	    if (!event) {
	      return;
	    }
	
	    if (event.stopPropagation) {
	      event.stopPropagation();
	    } else if (typeof event.cancelBubble !== 'unknown') {
	      // eslint-disable-line valid-typeof
	      // The ChangeEventPlugin registers a "propertychange" event for
	      // IE. This event does not support bubbling or cancelling, and
	      // any references to cancelBubble throw "Member not found".  A
	      // typeof check of "unknown" circumvents this issue (and is also
	      // IE specific).
	      event.cancelBubble = true;
	    }
	
	    this.isPropagationStopped = emptyFunction.thatReturnsTrue;
	  },
	
	  /**
	   * We release all dispatched `SyntheticEvent`s after each event loop, adding
	   * them back into the pool. This allows a way to hold onto a reference that
	   * won't be added back into the pool.
	   */
	  persist: function persist() {
	    this.isPersistent = emptyFunction.thatReturnsTrue;
	  },
	
	  /**
	   * Checks if this event should be released back into the pool.
	   *
	   * @return {boolean} True if this should not be released, false otherwise.
	   */
	  isPersistent: emptyFunction.thatReturnsFalse,
	
	  /**
	   * `PooledClass` looks for `destructor` on each instance it releases.
	   */
	  destructor: function destructor() {
	    var Interface = this.constructor.Interface;
	    for (var propName in Interface) {
	      if (process.env.NODE_ENV !== 'production') {
	        Object.defineProperty(this, propName, getPooledWarningPropertyDefinition(propName, Interface[propName]));
	      } else {
	        this[propName] = null;
	      }
	    }
	    for (var i = 0; i < shouldBeReleasedProperties.length; i++) {
	      this[shouldBeReleasedProperties[i]] = null;
	    }
	    if (process.env.NODE_ENV !== 'production') {
	      Object.defineProperty(this, 'nativeEvent', getPooledWarningPropertyDefinition('nativeEvent', null));
	      Object.defineProperty(this, 'preventDefault', getPooledWarningPropertyDefinition('preventDefault', emptyFunction));
	      Object.defineProperty(this, 'stopPropagation', getPooledWarningPropertyDefinition('stopPropagation', emptyFunction));
	    }
	  }
	
	});
	
	SyntheticEvent.Interface = EventInterface;
	
	if (process.env.NODE_ENV !== 'production') {
	  if (isProxySupported) {
	    /*eslint-disable no-func-assign */
	    SyntheticEvent = new Proxy(SyntheticEvent, {
	      construct: function construct(target, args) {
	        return this.apply(target, Object.create(target.prototype), args);
	      },
	      apply: function apply(constructor, that, args) {
	        return new Proxy(constructor.apply(that, args), {
	          set: function set(target, prop, value) {
	            if (prop !== 'isPersistent' && !target.constructor.Interface.hasOwnProperty(prop) && shouldBeReleasedProperties.indexOf(prop) === -1) {
	              process.env.NODE_ENV !== 'production' ? warning(didWarnForAddedNewProperty || target.isPersistent(), 'This synthetic event is reused for performance reasons. If you\'re ' + 'seeing this, you\'re adding a new property in the synthetic event object. ' + 'The property is never released. See ' + 'https://fb.me/react-event-pooling for more information.') : void 0;
	              didWarnForAddedNewProperty = true;
	            }
	            target[prop] = value;
	            return true;
	          }
	        });
	      }
	    });
	    /*eslint-enable no-func-assign */
	  }
	}
	/**
	 * Helper to reduce boilerplate when creating subclasses.
	 *
	 * @param {function} Class
	 * @param {?object} Interface
	 */
	SyntheticEvent.augmentClass = function (Class, Interface) {
	  var Super = this;
	
	  var E = function E() {};
	  E.prototype = Super.prototype;
	  var prototype = new E();
	
	  _assign(prototype, Class.prototype);
	  Class.prototype = prototype;
	  Class.prototype.constructor = Class;
	
	  Class.Interface = _assign({}, Super.Interface, Interface);
	  Class.augmentClass = Super.augmentClass;
	
	  PooledClass.addPoolingTo(Class, PooledClass.fourArgumentPooler);
	};
	
	PooledClass.addPoolingTo(SyntheticEvent, PooledClass.fourArgumentPooler);
	
	module.exports = SyntheticEvent;
	
	/**
	  * Helper to nullify syntheticEvent instance properties when destructing
	  *
	  * @param {object} SyntheticEvent
	  * @param {String} propName
	  * @return {object} defineProperty object
	  */
	function getPooledWarningPropertyDefinition(propName, getVal) {
	  var isFunction = typeof getVal === 'function';
	  return {
	    configurable: true,
	    set: set,
	    get: get
	  };
	
	  function set(val) {
	    var action = isFunction ? 'setting the method' : 'setting the property';
	    warn(action, 'This is effectively a no-op');
	    return val;
	  }
	
	  function get() {
	    var action = isFunction ? 'accessing the method' : 'accessing the property';
	    var result = isFunction ? 'This is a no-op function' : 'This is set to null';
	    warn(action, result);
	    return getVal;
	  }
	
	  function warn(action, result) {
	    var warningCondition = false;
	    process.env.NODE_ENV !== 'production' ? warning(warningCondition, 'This synthetic event is reused for performance reasons. If you\'re seeing this, ' + 'you\'re %s `%s` on a released/nullified synthetic event. %s. ' + 'If you must keep the original synthetic event around, use event.persist(). ' + 'See https://fb.me/react-event-pooling for more information.', action, propName, result) : void 0;
	  }
	}
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ }),
/* 58 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var SyntheticEvent = __webpack_require__(57);
	
	/**
	 * @interface Event
	 * @see http://www.w3.org/TR/2013/WD-DOM-Level-3-Events-20131105
	 *      /#events-inputevents
	 */
	var InputEventInterface = {
	  data: null
	};
	
	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticUIEvent}
	 */
	function SyntheticInputEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  return SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}
	
	SyntheticEvent.augmentClass(SyntheticInputEvent, InputEventInterface);
	
	module.exports = SyntheticInputEvent;

/***/ }),
/* 59 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var EventPluginHub = __webpack_require__(46);
	var EventPropagators = __webpack_require__(45);
	var ExecutionEnvironment = __webpack_require__(52);
	var ReactDOMComponentTree = __webpack_require__(38);
	var ReactUpdates = __webpack_require__(60);
	var SyntheticEvent = __webpack_require__(57);
	
	var getEventTarget = __webpack_require__(73);
	var isEventSupported = __webpack_require__(74);
	var isTextInputElement = __webpack_require__(75);
	
	var eventTypes = {
	  change: {
	    phasedRegistrationNames: {
	      bubbled: 'onChange',
	      captured: 'onChangeCapture'
	    },
	    dependencies: ['topBlur', 'topChange', 'topClick', 'topFocus', 'topInput', 'topKeyDown', 'topKeyUp', 'topSelectionChange']
	  }
	};
	
	/**
	 * For IE shims
	 */
	var activeElement = null;
	var activeElementInst = null;
	var activeElementValue = null;
	var activeElementValueProp = null;
	
	/**
	 * SECTION: handle `change` event
	 */
	function shouldUseChangeEvent(elem) {
	  var nodeName = elem.nodeName && elem.nodeName.toLowerCase();
	  return nodeName === 'select' || nodeName === 'input' && elem.type === 'file';
	}
	
	var doesChangeEventBubble = false;
	if (ExecutionEnvironment.canUseDOM) {
	  // See `handleChange` comment below
	  doesChangeEventBubble = isEventSupported('change') && (!document.documentMode || document.documentMode > 8);
	}
	
	function manualDispatchChangeEvent(nativeEvent) {
	  var event = SyntheticEvent.getPooled(eventTypes.change, activeElementInst, nativeEvent, getEventTarget(nativeEvent));
	  EventPropagators.accumulateTwoPhaseDispatches(event);
	
	  // If change and propertychange bubbled, we'd just bind to it like all the
	  // other events and have it go through ReactBrowserEventEmitter. Since it
	  // doesn't, we manually listen for the events and so we have to enqueue and
	  // process the abstract event manually.
	  //
	  // Batching is necessary here in order to ensure that all event handlers run
	  // before the next rerender (including event handlers attached to ancestor
	  // elements instead of directly on the input). Without this, controlled
	  // components don't work properly in conjunction with event bubbling because
	  // the component is rerendered and the value reverted before all the event
	  // handlers can run. See https://github.com/facebook/react/issues/708.
	  ReactUpdates.batchedUpdates(runEventInBatch, event);
	}
	
	function runEventInBatch(event) {
	  EventPluginHub.enqueueEvents(event);
	  EventPluginHub.processEventQueue(false);
	}
	
	function startWatchingForChangeEventIE8(target, targetInst) {
	  activeElement = target;
	  activeElementInst = targetInst;
	  activeElement.attachEvent('onchange', manualDispatchChangeEvent);
	}
	
	function stopWatchingForChangeEventIE8() {
	  if (!activeElement) {
	    return;
	  }
	  activeElement.detachEvent('onchange', manualDispatchChangeEvent);
	  activeElement = null;
	  activeElementInst = null;
	}
	
	function getTargetInstForChangeEvent(topLevelType, targetInst) {
	  if (topLevelType === 'topChange') {
	    return targetInst;
	  }
	}
	function handleEventsForChangeEventIE8(topLevelType, target, targetInst) {
	  if (topLevelType === 'topFocus') {
	    // stopWatching() should be a noop here but we call it just in case we
	    // missed a blur event somehow.
	    stopWatchingForChangeEventIE8();
	    startWatchingForChangeEventIE8(target, targetInst);
	  } else if (topLevelType === 'topBlur') {
	    stopWatchingForChangeEventIE8();
	  }
	}
	
	/**
	 * SECTION: handle `input` event
	 */
	var isInputEventSupported = false;
	if (ExecutionEnvironment.canUseDOM) {
	  // IE9 claims to support the input event but fails to trigger it when
	  // deleting text, so we ignore its input events.
	  // IE10+ fire input events to often, such when a placeholder
	  // changes or when an input with a placeholder is focused.
	  isInputEventSupported = isEventSupported('input') && (!document.documentMode || document.documentMode > 11);
	}
	
	/**
	 * (For IE <=11) Replacement getter/setter for the `value` property that gets
	 * set on the active element.
	 */
	var newValueProp = {
	  get: function get() {
	    return activeElementValueProp.get.call(this);
	  },
	  set: function set(val) {
	    // Cast to a string so we can do equality checks.
	    activeElementValue = '' + val;
	    activeElementValueProp.set.call(this, val);
	  }
	};
	
	/**
	 * (For IE <=11) Starts tracking propertychange events on the passed-in element
	 * and override the value property so that we can distinguish user events from
	 * value changes in JS.
	 */
	function startWatchingForValueChange(target, targetInst) {
	  activeElement = target;
	  activeElementInst = targetInst;
	  activeElementValue = target.value;
	  activeElementValueProp = Object.getOwnPropertyDescriptor(target.constructor.prototype, 'value');
	
	  // Not guarded in a canDefineProperty check: IE8 supports defineProperty only
	  // on DOM elements
	  Object.defineProperty(activeElement, 'value', newValueProp);
	  if (activeElement.attachEvent) {
	    activeElement.attachEvent('onpropertychange', handlePropertyChange);
	  } else {
	    activeElement.addEventListener('propertychange', handlePropertyChange, false);
	  }
	}
	
	/**
	 * (For IE <=11) Removes the event listeners from the currently-tracked element,
	 * if any exists.
	 */
	function stopWatchingForValueChange() {
	  if (!activeElement) {
	    return;
	  }
	
	  // delete restores the original property definition
	  delete activeElement.value;
	
	  if (activeElement.detachEvent) {
	    activeElement.detachEvent('onpropertychange', handlePropertyChange);
	  } else {
	    activeElement.removeEventListener('propertychange', handlePropertyChange, false);
	  }
	
	  activeElement = null;
	  activeElementInst = null;
	  activeElementValue = null;
	  activeElementValueProp = null;
	}
	
	/**
	 * (For IE <=11) Handles a propertychange event, sending a `change` event if
	 * the value of the active element has changed.
	 */
	function handlePropertyChange(nativeEvent) {
	  if (nativeEvent.propertyName !== 'value') {
	    return;
	  }
	  var value = nativeEvent.srcElement.value;
	  if (value === activeElementValue) {
	    return;
	  }
	  activeElementValue = value;
	
	  manualDispatchChangeEvent(nativeEvent);
	}
	
	/**
	 * If a `change` event should be fired, returns the target's ID.
	 */
	function getTargetInstForInputEvent(topLevelType, targetInst) {
	  if (topLevelType === 'topInput') {
	    // In modern browsers (i.e., not IE8 or IE9), the input event is exactly
	    // what we want so fall through here and trigger an abstract event
	    return targetInst;
	  }
	}
	
	function handleEventsForInputEventIE(topLevelType, target, targetInst) {
	  if (topLevelType === 'topFocus') {
	    // In IE8, we can capture almost all .value changes by adding a
	    // propertychange handler and looking for events with propertyName
	    // equal to 'value'
	    // In IE9-11, propertychange fires for most input events but is buggy and
	    // doesn't fire when text is deleted, but conveniently, selectionchange
	    // appears to fire in all of the remaining cases so we catch those and
	    // forward the event if the value has changed
	    // In either case, we don't want to call the event handler if the value
	    // is changed from JS so we redefine a setter for `.value` that updates
	    // our activeElementValue variable, allowing us to ignore those changes
	    //
	    // stopWatching() should be a noop here but we call it just in case we
	    // missed a blur event somehow.
	    stopWatchingForValueChange();
	    startWatchingForValueChange(target, targetInst);
	  } else if (topLevelType === 'topBlur') {
	    stopWatchingForValueChange();
	  }
	}
	
	// For IE8 and IE9.
	function getTargetInstForInputEventIE(topLevelType, targetInst) {
	  if (topLevelType === 'topSelectionChange' || topLevelType === 'topKeyUp' || topLevelType === 'topKeyDown') {
	    // On the selectionchange event, the target is just document which isn't
	    // helpful for us so just check activeElement instead.
	    //
	    // 99% of the time, keydown and keyup aren't necessary. IE8 fails to fire
	    // propertychange on the first input event after setting `value` from a
	    // script and fires only keydown, keypress, keyup. Catching keyup usually
	    // gets it and catching keydown lets us fire an event for the first
	    // keystroke if user does a key repeat (it'll be a little delayed: right
	    // before the second keystroke). Other input methods (e.g., paste) seem to
	    // fire selectionchange normally.
	    if (activeElement && activeElement.value !== activeElementValue) {
	      activeElementValue = activeElement.value;
	      return activeElementInst;
	    }
	  }
	}
	
	/**
	 * SECTION: handle `click` event
	 */
	function shouldUseClickEvent(elem) {
	  // Use the `click` event to detect changes to checkbox and radio inputs.
	  // This approach works across all browsers, whereas `change` does not fire
	  // until `blur` in IE8.
	  return elem.nodeName && elem.nodeName.toLowerCase() === 'input' && (elem.type === 'checkbox' || elem.type === 'radio');
	}
	
	function getTargetInstForClickEvent(topLevelType, targetInst) {
	  if (topLevelType === 'topClick') {
	    return targetInst;
	  }
	}
	
	function handleControlledInputBlur(inst, node) {
	  // TODO: In IE, inst is occasionally null. Why?
	  if (inst == null) {
	    return;
	  }
	
	  // Fiber and ReactDOM keep wrapper state in separate places
	  var state = inst._wrapperState || node._wrapperState;
	
	  if (!state || !state.controlled || node.type !== 'number') {
	    return;
	  }
	
	  // If controlled, assign the value attribute to the current value on blur
	  var value = '' + node.value;
	  if (node.getAttribute('value') !== value) {
	    node.setAttribute('value', value);
	  }
	}
	
	/**
	 * This plugin creates an `onChange` event that normalizes change events
	 * across form elements. This event fires at a time when it's possible to
	 * change the element's value without seeing a flicker.
	 *
	 * Supported elements are:
	 * - input (see `isTextInputElement`)
	 * - textarea
	 * - select
	 */
	var ChangeEventPlugin = {
	
	  eventTypes: eventTypes,
	
	  extractEvents: function extractEvents(topLevelType, targetInst, nativeEvent, nativeEventTarget) {
	    var targetNode = targetInst ? ReactDOMComponentTree.getNodeFromInstance(targetInst) : window;
	
	    var getTargetInstFunc, handleEventFunc;
	    if (shouldUseChangeEvent(targetNode)) {
	      if (doesChangeEventBubble) {
	        getTargetInstFunc = getTargetInstForChangeEvent;
	      } else {
	        handleEventFunc = handleEventsForChangeEventIE8;
	      }
	    } else if (isTextInputElement(targetNode)) {
	      if (isInputEventSupported) {
	        getTargetInstFunc = getTargetInstForInputEvent;
	      } else {
	        getTargetInstFunc = getTargetInstForInputEventIE;
	        handleEventFunc = handleEventsForInputEventIE;
	      }
	    } else if (shouldUseClickEvent(targetNode)) {
	      getTargetInstFunc = getTargetInstForClickEvent;
	    }
	
	    if (getTargetInstFunc) {
	      var inst = getTargetInstFunc(topLevelType, targetInst);
	      if (inst) {
	        var event = SyntheticEvent.getPooled(eventTypes.change, inst, nativeEvent, nativeEventTarget);
	        event.type = 'change';
	        EventPropagators.accumulateTwoPhaseDispatches(event);
	        return event;
	      }
	    }
	
	    if (handleEventFunc) {
	      handleEventFunc(topLevelType, targetNode, targetInst);
	    }
	
	    // When blurring, set the value attribute for number inputs
	    if (topLevelType === 'topBlur') {
	      handleControlledInputBlur(targetInst, targetNode);
	    }
	  }
	
	};
	
	module.exports = ChangeEventPlugin;

/***/ }),
/* 60 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var _prodInvariant = __webpack_require__(39),
	    _assign = __webpack_require__(4);
	
	var CallbackQueue = __webpack_require__(61);
	var PooledClass = __webpack_require__(54);
	var ReactFeatureFlags = __webpack_require__(62);
	var ReactReconciler = __webpack_require__(63);
	var Transaction = __webpack_require__(72);
	
	var invariant = __webpack_require__(8);
	
	var dirtyComponents = [];
	var updateBatchNumber = 0;
	var asapCallbackQueue = CallbackQueue.getPooled();
	var asapEnqueued = false;
	
	var batchingStrategy = null;
	
	function ensureInjected() {
	  !(ReactUpdates.ReactReconcileTransaction && batchingStrategy) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactUpdates: must inject a reconcile transaction class and batching strategy') : _prodInvariant('123') : void 0;
	}
	
	var NESTED_UPDATES = {
	  initialize: function initialize() {
	    this.dirtyComponentsLength = dirtyComponents.length;
	  },
	  close: function close() {
	    if (this.dirtyComponentsLength !== dirtyComponents.length) {
	      // Additional updates were enqueued by componentDidUpdate handlers or
	      // similar; before our own UPDATE_QUEUEING wrapper closes, we want to run
	      // these new updates so that if A's componentDidUpdate calls setState on
	      // B, B will update before the callback A's updater provided when calling
	      // setState.
	      dirtyComponents.splice(0, this.dirtyComponentsLength);
	      flushBatchedUpdates();
	    } else {
	      dirtyComponents.length = 0;
	    }
	  }
	};
	
	var UPDATE_QUEUEING = {
	  initialize: function initialize() {
	    this.callbackQueue.reset();
	  },
	  close: function close() {
	    this.callbackQueue.notifyAll();
	  }
	};
	
	var TRANSACTION_WRAPPERS = [NESTED_UPDATES, UPDATE_QUEUEING];
	
	function ReactUpdatesFlushTransaction() {
	  this.reinitializeTransaction();
	  this.dirtyComponentsLength = null;
	  this.callbackQueue = CallbackQueue.getPooled();
	  this.reconcileTransaction = ReactUpdates.ReactReconcileTransaction.getPooled(
	  /* useCreateElement */true);
	}
	
	_assign(ReactUpdatesFlushTransaction.prototype, Transaction, {
	  getTransactionWrappers: function getTransactionWrappers() {
	    return TRANSACTION_WRAPPERS;
	  },
	
	  destructor: function destructor() {
	    this.dirtyComponentsLength = null;
	    CallbackQueue.release(this.callbackQueue);
	    this.callbackQueue = null;
	    ReactUpdates.ReactReconcileTransaction.release(this.reconcileTransaction);
	    this.reconcileTransaction = null;
	  },
	
	  perform: function perform(method, scope, a) {
	    // Essentially calls `this.reconcileTransaction.perform(method, scope, a)`
	    // with this transaction's wrappers around it.
	    return Transaction.perform.call(this, this.reconcileTransaction.perform, this.reconcileTransaction, method, scope, a);
	  }
	});
	
	PooledClass.addPoolingTo(ReactUpdatesFlushTransaction);
	
	function batchedUpdates(callback, a, b, c, d, e) {
	  ensureInjected();
	  return batchingStrategy.batchedUpdates(callback, a, b, c, d, e);
	}
	
	/**
	 * Array comparator for ReactComponents by mount ordering.
	 *
	 * @param {ReactComponent} c1 first component you're comparing
	 * @param {ReactComponent} c2 second component you're comparing
	 * @return {number} Return value usable by Array.prototype.sort().
	 */
	function mountOrderComparator(c1, c2) {
	  return c1._mountOrder - c2._mountOrder;
	}
	
	function runBatchedUpdates(transaction) {
	  var len = transaction.dirtyComponentsLength;
	  !(len === dirtyComponents.length) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Expected flush transaction\'s stored dirty-components length (%s) to match dirty-components array length (%s).', len, dirtyComponents.length) : _prodInvariant('124', len, dirtyComponents.length) : void 0;
	
	  // Since reconciling a component higher in the owner hierarchy usually (not
	  // always -- see shouldComponentUpdate()) will reconcile children, reconcile
	  // them before their children by sorting the array.
	  dirtyComponents.sort(mountOrderComparator);
	
	  // Any updates enqueued while reconciling must be performed after this entire
	  // batch. Otherwise, if dirtyComponents is [A, B] where A has children B and
	  // C, B could update twice in a single batch if C's render enqueues an update
	  // to B (since B would have already updated, we should skip it, and the only
	  // way we can know to do so is by checking the batch counter).
	  updateBatchNumber++;
	
	  for (var i = 0; i < len; i++) {
	    // If a component is unmounted before pending changes apply, it will still
	    // be here, but we assume that it has cleared its _pendingCallbacks and
	    // that performUpdateIfNecessary is a noop.
	    var component = dirtyComponents[i];
	
	    // If performUpdateIfNecessary happens to enqueue any new updates, we
	    // shouldn't execute the callbacks until the next render happens, so
	    // stash the callbacks first
	    var callbacks = component._pendingCallbacks;
	    component._pendingCallbacks = null;
	
	    var markerName;
	    if (ReactFeatureFlags.logTopLevelRenders) {
	      var namedComponent = component;
	      // Duck type TopLevelWrapper. This is probably always true.
	      if (component._currentElement.type.isReactTopLevelWrapper) {
	        namedComponent = component._renderedComponent;
	      }
	      markerName = 'React update: ' + namedComponent.getName();
	      console.time(markerName);
	    }
	
	    ReactReconciler.performUpdateIfNecessary(component, transaction.reconcileTransaction, updateBatchNumber);
	
	    if (markerName) {
	      console.timeEnd(markerName);
	    }
	
	    if (callbacks) {
	      for (var j = 0; j < callbacks.length; j++) {
	        transaction.callbackQueue.enqueue(callbacks[j], component.getPublicInstance());
	      }
	    }
	  }
	}
	
	var flushBatchedUpdates = function flushBatchedUpdates() {
	  // ReactUpdatesFlushTransaction's wrappers will clear the dirtyComponents
	  // array and perform any updates enqueued by mount-ready handlers (i.e.,
	  // componentDidUpdate) but we need to check here too in order to catch
	  // updates enqueued by setState callbacks and asap calls.
	  while (dirtyComponents.length || asapEnqueued) {
	    if (dirtyComponents.length) {
	      var transaction = ReactUpdatesFlushTransaction.getPooled();
	      transaction.perform(runBatchedUpdates, null, transaction);
	      ReactUpdatesFlushTransaction.release(transaction);
	    }
	
	    if (asapEnqueued) {
	      asapEnqueued = false;
	      var queue = asapCallbackQueue;
	      asapCallbackQueue = CallbackQueue.getPooled();
	      queue.notifyAll();
	      CallbackQueue.release(queue);
	    }
	  }
	};
	
	/**
	 * Mark a component as needing a rerender, adding an optional callback to a
	 * list of functions which will be executed once the rerender occurs.
	 */
	function enqueueUpdate(component) {
	  ensureInjected();
	
	  // Various parts of our code (such as ReactCompositeComponent's
	  // _renderValidatedComponent) assume that calls to render aren't nested;
	  // verify that that's the case. (This is called by each top-level update
	  // function, like setState, forceUpdate, etc.; creation and
	  // destruction of top-level components is guarded in ReactMount.)
	
	  if (!batchingStrategy.isBatchingUpdates) {
	    batchingStrategy.batchedUpdates(enqueueUpdate, component);
	    return;
	  }
	
	  dirtyComponents.push(component);
	  if (component._updateBatchNumber == null) {
	    component._updateBatchNumber = updateBatchNumber + 1;
	  }
	}
	
	/**
	 * Enqueue a callback to be run at the end of the current batching cycle. Throws
	 * if no updates are currently being performed.
	 */
	function asap(callback, context) {
	  !batchingStrategy.isBatchingUpdates ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactUpdates.asap: Can\'t enqueue an asap callback in a context whereupdates are not being batched.') : _prodInvariant('125') : void 0;
	  asapCallbackQueue.enqueue(callback, context);
	  asapEnqueued = true;
	}
	
	var ReactUpdatesInjection = {
	  injectReconcileTransaction: function injectReconcileTransaction(ReconcileTransaction) {
	    !ReconcileTransaction ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactUpdates: must provide a reconcile transaction class') : _prodInvariant('126') : void 0;
	    ReactUpdates.ReactReconcileTransaction = ReconcileTransaction;
	  },
	
	  injectBatchingStrategy: function injectBatchingStrategy(_batchingStrategy) {
	    !_batchingStrategy ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactUpdates: must provide a batching strategy') : _prodInvariant('127') : void 0;
	    !(typeof _batchingStrategy.batchedUpdates === 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactUpdates: must provide a batchedUpdates() function') : _prodInvariant('128') : void 0;
	    !(typeof _batchingStrategy.isBatchingUpdates === 'boolean') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactUpdates: must provide an isBatchingUpdates boolean attribute') : _prodInvariant('129') : void 0;
	    batchingStrategy = _batchingStrategy;
	  }
	};
	
	var ReactUpdates = {
	  /**
	   * React references `ReactReconcileTransaction` using this property in order
	   * to allow dependency injection.
	   *
	   * @internal
	   */
	  ReactReconcileTransaction: null,
	
	  batchedUpdates: batchedUpdates,
	  enqueueUpdate: enqueueUpdate,
	  flushBatchedUpdates: flushBatchedUpdates,
	  injection: ReactUpdatesInjection,
	  asap: asap
	};
	
	module.exports = ReactUpdates;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ }),
/* 61 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */
	
	'use strict';
	
	var _prodInvariant = __webpack_require__(39);
	
	function _classCallCheck(instance, Constructor) {
	  if (!(instance instanceof Constructor)) {
	    throw new TypeError("Cannot call a class as a function");
	  }
	}
	
	var PooledClass = __webpack_require__(54);
	
	var invariant = __webpack_require__(8);
	
	/**
	 * A specialized pseudo-event module to help keep track of components waiting to
	 * be notified when their DOM representations are available for use.
	 *
	 * This implements `PooledClass`, so you should never need to instantiate this.
	 * Instead, use `CallbackQueue.getPooled()`.
	 *
	 * @class ReactMountReady
	 * @implements PooledClass
	 * @internal
	 */
	
	var CallbackQueue = function () {
	  function CallbackQueue(arg) {
	    _classCallCheck(this, CallbackQueue);
	
	    this._callbacks = null;
	    this._contexts = null;
	    this._arg = arg;
	  }
	
	  /**
	   * Enqueues a callback to be invoked when `notifyAll` is invoked.
	   *
	   * @param {function} callback Invoked when `notifyAll` is invoked.
	   * @param {?object} context Context to call `callback` with.
	   * @internal
	   */
	
	  CallbackQueue.prototype.enqueue = function enqueue(callback, context) {
	    this._callbacks = this._callbacks || [];
	    this._callbacks.push(callback);
	    this._contexts = this._contexts || [];
	    this._contexts.push(context);
	  };
	
	  /**
	   * Invokes all enqueued callbacks and clears the queue. This is invoked after
	   * the DOM representation of a component has been created or updated.
	   *
	   * @internal
	   */
	
	  CallbackQueue.prototype.notifyAll = function notifyAll() {
	    var callbacks = this._callbacks;
	    var contexts = this._contexts;
	    var arg = this._arg;
	    if (callbacks && contexts) {
	      !(callbacks.length === contexts.length) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Mismatched list of contexts in callback queue') : _prodInvariant('24') : void 0;
	      this._callbacks = null;
	      this._contexts = null;
	      for (var i = 0; i < callbacks.length; i++) {
	        callbacks[i].call(contexts[i], arg);
	      }
	      callbacks.length = 0;
	      contexts.length = 0;
	    }
	  };
	
	  CallbackQueue.prototype.checkpoint = function checkpoint() {
	    return this._callbacks ? this._callbacks.length : 0;
	  };
	
	  CallbackQueue.prototype.rollback = function rollback(len) {
	    if (this._callbacks && this._contexts) {
	      this._callbacks.length = len;
	      this._contexts.length = len;
	    }
	  };
	
	  /**
	   * Resets the internal queue.
	   *
	   * @internal
	   */
	
	  CallbackQueue.prototype.reset = function reset() {
	    this._callbacks = null;
	    this._contexts = null;
	  };
	
	  /**
	   * `PooledClass` looks for this.
	   */
	
	  CallbackQueue.prototype.destructor = function destructor() {
	    this.reset();
	  };
	
	  return CallbackQueue;
	}();
	
	module.exports = PooledClass.addPoolingTo(CallbackQueue);
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ }),
/* 62 */
/***/ (function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */
	
	'use strict';
	
	var ReactFeatureFlags = {
	  // When true, call console.time() before and .timeEnd() after each top-level
	  // render (both initial renders and updates). Useful when looking at prod-mode
	  // timeline profiles in Chrome, for example.
	  logTopLevelRenders: false
	};
	
	module.exports = ReactFeatureFlags;

/***/ }),
/* 63 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var ReactRef = __webpack_require__(64);
	var ReactInstrumentation = __webpack_require__(66);
	
	var warning = __webpack_require__(11);
	
	/**
	 * Helper to call ReactRef.attachRefs with this composite component, split out
	 * to avoid allocations in the transaction mount-ready queue.
	 */
	function attachRefs() {
	  ReactRef.attachRefs(this, this._currentElement);
	}
	
	var ReactReconciler = {
	
	  /**
	   * Initializes the component, renders markup, and registers event listeners.
	   *
	   * @param {ReactComponent} internalInstance
	   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
	   * @param {?object} the containing host component instance
	   * @param {?object} info about the host container
	   * @return {?string} Rendered markup to be inserted into the DOM.
	   * @final
	   * @internal
	   */
	  mountComponent: function mountComponent(internalInstance, transaction, hostParent, hostContainerInfo, context, parentDebugID // 0 in production and for roots
	  ) {
	    if (process.env.NODE_ENV !== 'production') {
	      if (internalInstance._debugID !== 0) {
	        ReactInstrumentation.debugTool.onBeforeMountComponent(internalInstance._debugID, internalInstance._currentElement, parentDebugID);
	      }
	    }
	    var markup = internalInstance.mountComponent(transaction, hostParent, hostContainerInfo, context, parentDebugID);
	    if (internalInstance._currentElement && internalInstance._currentElement.ref != null) {
	      transaction.getReactMountReady().enqueue(attachRefs, internalInstance);
	    }
	    if (process.env.NODE_ENV !== 'production') {
	      if (internalInstance._debugID !== 0) {
	        ReactInstrumentation.debugTool.onMountComponent(internalInstance._debugID);
	      }
	    }
	    return markup;
	  },
	
	  /**
	   * Returns a value that can be passed to
	   * ReactComponentEnvironment.replaceNodeWithMarkup.
	   */
	  getHostNode: function getHostNode(internalInstance) {
	    return internalInstance.getHostNode();
	  },
	
	  /**
	   * Releases any resources allocated by `mountComponent`.
	   *
	   * @final
	   * @internal
	   */
	  unmountComponent: function unmountComponent(internalInstance, safely) {
	    if (process.env.NODE_ENV !== 'production') {
	      if (internalInstance._debugID !== 0) {
	        ReactInstrumentation.debugTool.onBeforeUnmountComponent(internalInstance._debugID);
	      }
	    }
	    ReactRef.detachRefs(internalInstance, internalInstance._currentElement);
	    internalInstance.unmountComponent(safely);
	    if (process.env.NODE_ENV !== 'production') {
	      if (internalInstance._debugID !== 0) {
	        ReactInstrumentation.debugTool.onUnmountComponent(internalInstance._debugID);
	      }
	    }
	  },
	
	  /**
	   * Update a component using a new element.
	   *
	   * @param {ReactComponent} internalInstance
	   * @param {ReactElement} nextElement
	   * @param {ReactReconcileTransaction} transaction
	   * @param {object} context
	   * @internal
	   */
	  receiveComponent: function receiveComponent(internalInstance, nextElement, transaction, context) {
	    var prevElement = internalInstance._currentElement;
	
	    if (nextElement === prevElement && context === internalInstance._context) {
	      // Since elements are immutable after the owner is rendered,
	      // we can do a cheap identity compare here to determine if this is a
	      // superfluous reconcile. It's possible for state to be mutable but such
	      // change should trigger an update of the owner which would recreate
	      // the element. We explicitly check for the existence of an owner since
	      // it's possible for an element created outside a composite to be
	      // deeply mutated and reused.
	
	      // TODO: Bailing out early is just a perf optimization right?
	      // TODO: Removing the return statement should affect correctness?
	      return;
	    }
	
	    if (process.env.NODE_ENV !== 'production') {
	      if (internalInstance._debugID !== 0) {
	        ReactInstrumentation.debugTool.onBeforeUpdateComponent(internalInstance._debugID, nextElement);
	      }
	    }
	
	    var refsChanged = ReactRef.shouldUpdateRefs(prevElement, nextElement);
	
	    if (refsChanged) {
	      ReactRef.detachRefs(internalInstance, prevElement);
	    }
	
	    internalInstance.receiveComponent(nextElement, transaction, context);
	
	    if (refsChanged && internalInstance._currentElement && internalInstance._currentElement.ref != null) {
	      transaction.getReactMountReady().enqueue(attachRefs, internalInstance);
	    }
	
	    if (process.env.NODE_ENV !== 'production') {
	      if (internalInstance._debugID !== 0) {
	        ReactInstrumentation.debugTool.onUpdateComponent(internalInstance._debugID);
	      }
	    }
	  },
	
	  /**
	   * Flush any dirty changes in a component.
	   *
	   * @param {ReactComponent} internalInstance
	   * @param {ReactReconcileTransaction} transaction
	   * @internal
	   */
	  performUpdateIfNecessary: function performUpdateIfNecessary(internalInstance, transaction, updateBatchNumber) {
	    if (internalInstance._updateBatchNumber !== updateBatchNumber) {
	      // The component's enqueued batch number should always be the current
	      // batch or the following one.
	      process.env.NODE_ENV !== 'production' ? warning(internalInstance._updateBatchNumber == null || internalInstance._updateBatchNumber === updateBatchNumber + 1, 'performUpdateIfNecessary: Unexpected batch number (current %s, ' + 'pending %s)', updateBatchNumber, internalInstance._updateBatchNumber) : void 0;
	      return;
	    }
	    if (process.env.NODE_ENV !== 'production') {
	      if (internalInstance._debugID !== 0) {
	        ReactInstrumentation.debugTool.onBeforeUpdateComponent(internalInstance._debugID, internalInstance._currentElement);
	      }
	    }
	    internalInstance.performUpdateIfNecessary(transaction);
	    if (process.env.NODE_ENV !== 'production') {
	      if (internalInstance._debugID !== 0) {
	        ReactInstrumentation.debugTool.onUpdateComponent(internalInstance._debugID);
	      }
	    }
	  }
	
	};
	
	module.exports = ReactReconciler;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ }),
/* 64 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */
	
	'use strict';
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
	
	var ReactOwner = __webpack_require__(65);
	
	var ReactRef = {};
	
	function attachRef(ref, component, owner) {
	  if (typeof ref === 'function') {
	    ref(component.getPublicInstance());
	  } else {
	    // Legacy ref
	    ReactOwner.addComponentAsRefTo(component, ref, owner);
	  }
	}
	
	function detachRef(ref, component, owner) {
	  if (typeof ref === 'function') {
	    ref(null);
	  } else {
	    // Legacy ref
	    ReactOwner.removeComponentAsRefFrom(component, ref, owner);
	  }
	}
	
	ReactRef.attachRefs = function (instance, element) {
	  if (element === null || (typeof element === 'undefined' ? 'undefined' : _typeof(element)) !== 'object') {
	    return;
	  }
	  var ref = element.ref;
	  if (ref != null) {
	    attachRef(ref, instance, element._owner);
	  }
	};
	
	ReactRef.shouldUpdateRefs = function (prevElement, nextElement) {
	  // If either the owner or a `ref` has changed, make sure the newest owner
	  // has stored a reference to `this`, and the previous owner (if different)
	  // has forgotten the reference to `this`. We use the element instead
	  // of the public this.props because the post processing cannot determine
	  // a ref. The ref conceptually lives on the element.
	
	  // TODO: Should this even be possible? The owner cannot change because
	  // it's forbidden by shouldUpdateReactComponent. The ref can change
	  // if you swap the keys of but not the refs. Reconsider where this check
	  // is made. It probably belongs where the key checking and
	  // instantiateReactComponent is done.
	
	  var prevRef = null;
	  var prevOwner = null;
	  if (prevElement !== null && (typeof prevElement === 'undefined' ? 'undefined' : _typeof(prevElement)) === 'object') {
	    prevRef = prevElement.ref;
	    prevOwner = prevElement._owner;
	  }
	
	  var nextRef = null;
	  var nextOwner = null;
	  if (nextElement !== null && (typeof nextElement === 'undefined' ? 'undefined' : _typeof(nextElement)) === 'object') {
	    nextRef = nextElement.ref;
	    nextOwner = nextElement._owner;
	  }
	
	  return prevRef !== nextRef ||
	  // If owner changes but we have an unchanged function ref, don't update refs
	  typeof nextRef === 'string' && nextOwner !== prevOwner;
	};
	
	ReactRef.detachRefs = function (instance, element) {
	  if (element === null || (typeof element === 'undefined' ? 'undefined' : _typeof(element)) !== 'object') {
	    return;
	  }
	  var ref = element.ref;
	  if (ref != null) {
	    detachRef(ref, instance, element._owner);
	  }
	};
	
	module.exports = ReactRef;

/***/ }),
/* 65 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */
	
	'use strict';
	
	var _prodInvariant = __webpack_require__(39);
	
	var invariant = __webpack_require__(8);
	
	/**
	 * @param {?object} object
	 * @return {boolean} True if `object` is a valid owner.
	 * @final
	 */
	function isValidOwner(object) {
	  return !!(object && typeof object.attachRef === 'function' && typeof object.detachRef === 'function');
	}
	
	/**
	 * ReactOwners are capable of storing references to owned components.
	 *
	 * All components are capable of //being// referenced by owner components, but
	 * only ReactOwner components are capable of //referencing// owned components.
	 * The named reference is known as a "ref".
	 *
	 * Refs are available when mounted and updated during reconciliation.
	 *
	 *   var MyComponent = React.createClass({
	 *     render: function() {
	 *       return (
	 *         <div onClick={this.handleClick}>
	 *           <CustomComponent ref="custom" />
	 *         </div>
	 *       );
	 *     },
	 *     handleClick: function() {
	 *       this.refs.custom.handleClick();
	 *     },
	 *     componentDidMount: function() {
	 *       this.refs.custom.initialize();
	 *     }
	 *   });
	 *
	 * Refs should rarely be used. When refs are used, they should only be done to
	 * control data that is not handled by React's data flow.
	 *
	 * @class ReactOwner
	 */
	var ReactOwner = {
	  /**
	   * Adds a component by ref to an owner component.
	   *
	   * @param {ReactComponent} component Component to reference.
	   * @param {string} ref Name by which to refer to the component.
	   * @param {ReactOwner} owner Component on which to record the ref.
	   * @final
	   * @internal
	   */
	  addComponentAsRefTo: function addComponentAsRefTo(component, ref, owner) {
	    !isValidOwner(owner) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'addComponentAsRefTo(...): Only a ReactOwner can have refs. You might be adding a ref to a component that was not created inside a component\'s `render` method, or you have multiple copies of React loaded (details: https://fb.me/react-refs-must-have-owner).') : _prodInvariant('119') : void 0;
	    owner.attachRef(ref, component);
	  },
	
	  /**
	   * Removes a component by ref from an owner component.
	   *
	   * @param {ReactComponent} component Component to dereference.
	   * @param {string} ref Name of the ref to remove.
	   * @param {ReactOwner} owner Component on which the ref is recorded.
	   * @final
	   * @internal
	   */
	  removeComponentAsRefFrom: function removeComponentAsRefFrom(component, ref, owner) {
	    !isValidOwner(owner) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'removeComponentAsRefFrom(...): Only a ReactOwner can have refs. You might be removing a ref to a component that was not created inside a component\'s `render` method, or you have multiple copies of React loaded (details: https://fb.me/react-refs-must-have-owner).') : _prodInvariant('120') : void 0;
	    var ownerPublicInstance = owner.getPublicInstance();
	    // Check that `component`'s owner is still alive and that `component` is still the current ref
	    // because we do not want to detach the ref if another component stole it.
	    if (ownerPublicInstance && ownerPublicInstance.refs[ref] === component.getPublicInstance()) {
	      owner.detachRef(ref);
	    }
	  }
	
	};
	
	module.exports = ReactOwner;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ }),
/* 66 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2016-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */
	
	'use strict';
	
	// Trust the developer to only use ReactInstrumentation with a __DEV__ check
	
	var debugTool = null;
	
	if (process.env.NODE_ENV !== 'production') {
	  var ReactDebugTool = __webpack_require__(67);
	  debugTool = ReactDebugTool;
	}
	
	module.exports = { debugTool: debugTool };
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ }),
/* 67 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2016-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */
	
	'use strict';
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
	
	var ReactInvalidSetStateWarningHook = __webpack_require__(68);
	var ReactHostOperationHistoryHook = __webpack_require__(69);
	var ReactComponentTreeHook = __webpack_require__(26);
	var ExecutionEnvironment = __webpack_require__(52);
	
	var performanceNow = __webpack_require__(70);
	var warning = __webpack_require__(11);
	
	var hooks = [];
	var didHookThrowForEvent = {};
	
	function callHook(event, fn, context, arg1, arg2, arg3, arg4, arg5) {
	  try {
	    fn.call(context, arg1, arg2, arg3, arg4, arg5);
	  } catch (e) {
	    process.env.NODE_ENV !== 'production' ? warning(didHookThrowForEvent[event], 'Exception thrown by hook while handling %s: %s', event, e + '\n' + e.stack) : void 0;
	    didHookThrowForEvent[event] = true;
	  }
	}
	
	function emitEvent(event, arg1, arg2, arg3, arg4, arg5) {
	  for (var i = 0; i < hooks.length; i++) {
	    var hook = hooks[i];
	    var fn = hook[event];
	    if (fn) {
	      callHook(event, fn, hook, arg1, arg2, arg3, arg4, arg5);
	    }
	  }
	}
	
	var _isProfiling = false;
	var flushHistory = [];
	var lifeCycleTimerStack = [];
	var currentFlushNesting = 0;
	var currentFlushMeasurements = [];
	var currentFlushStartTime = 0;
	var currentTimerDebugID = null;
	var currentTimerStartTime = 0;
	var currentTimerNestedFlushDuration = 0;
	var currentTimerType = null;
	
	var lifeCycleTimerHasWarned = false;
	
	function clearHistory() {
	  ReactComponentTreeHook.purgeUnmountedComponents();
	  ReactHostOperationHistoryHook.clearHistory();
	}
	
	function getTreeSnapshot(registeredIDs) {
	  return registeredIDs.reduce(function (tree, id) {
	    var ownerID = ReactComponentTreeHook.getOwnerID(id);
	    var parentID = ReactComponentTreeHook.getParentID(id);
	    tree[id] = {
	      displayName: ReactComponentTreeHook.getDisplayName(id),
	      text: ReactComponentTreeHook.getText(id),
	      updateCount: ReactComponentTreeHook.getUpdateCount(id),
	      childIDs: ReactComponentTreeHook.getChildIDs(id),
	      // Text nodes don't have owners but this is close enough.
	      ownerID: ownerID || parentID && ReactComponentTreeHook.getOwnerID(parentID) || 0,
	      parentID: parentID
	    };
	    return tree;
	  }, {});
	}
	
	function resetMeasurements() {
	  var previousStartTime = currentFlushStartTime;
	  var previousMeasurements = currentFlushMeasurements;
	  var previousOperations = ReactHostOperationHistoryHook.getHistory();
	
	  if (currentFlushNesting === 0) {
	    currentFlushStartTime = 0;
	    currentFlushMeasurements = [];
	    clearHistory();
	    return;
	  }
	
	  if (previousMeasurements.length || previousOperations.length) {
	    var registeredIDs = ReactComponentTreeHook.getRegisteredIDs();
	    flushHistory.push({
	      duration: performanceNow() - previousStartTime,
	      measurements: previousMeasurements || [],
	      operations: previousOperations || [],
	      treeSnapshot: getTreeSnapshot(registeredIDs)
	    });
	  }
	
	  clearHistory();
	  currentFlushStartTime = performanceNow();
	  currentFlushMeasurements = [];
	}
	
	function checkDebugID(debugID) {
	  var allowRoot = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
	
	  if (allowRoot && debugID === 0) {
	    return;
	  }
	  if (!debugID) {
	    process.env.NODE_ENV !== 'production' ? warning(false, 'ReactDebugTool: debugID may not be empty.') : void 0;
	  }
	}
	
	function beginLifeCycleTimer(debugID, timerType) {
	  if (currentFlushNesting === 0) {
	    return;
	  }
	  if (currentTimerType && !lifeCycleTimerHasWarned) {
	    process.env.NODE_ENV !== 'production' ? warning(false, 'There is an internal error in the React performance measurement code. ' + 'Did not expect %s timer to start while %s timer is still in ' + 'progress for %s instance.', timerType, currentTimerType || 'no', debugID === currentTimerDebugID ? 'the same' : 'another') : void 0;
	    lifeCycleTimerHasWarned = true;
	  }
	  currentTimerStartTime = performanceNow();
	  currentTimerNestedFlushDuration = 0;
	  currentTimerDebugID = debugID;
	  currentTimerType = timerType;
	}
	
	function endLifeCycleTimer(debugID, timerType) {
	  if (currentFlushNesting === 0) {
	    return;
	  }
	  if (currentTimerType !== timerType && !lifeCycleTimerHasWarned) {
	    process.env.NODE_ENV !== 'production' ? warning(false, 'There is an internal error in the React performance measurement code. ' + 'We did not expect %s timer to stop while %s timer is still in ' + 'progress for %s instance. Please report this as a bug in React.', timerType, currentTimerType || 'no', debugID === currentTimerDebugID ? 'the same' : 'another') : void 0;
	    lifeCycleTimerHasWarned = true;
	  }
	  if (_isProfiling) {
	    currentFlushMeasurements.push({
	      timerType: timerType,
	      instanceID: debugID,
	      duration: performanceNow() - currentTimerStartTime - currentTimerNestedFlushDuration
	    });
	  }
	  currentTimerStartTime = 0;
	  currentTimerNestedFlushDuration = 0;
	  currentTimerDebugID = null;
	  currentTimerType = null;
	}
	
	function pauseCurrentLifeCycleTimer() {
	  var currentTimer = {
	    startTime: currentTimerStartTime,
	    nestedFlushStartTime: performanceNow(),
	    debugID: currentTimerDebugID,
	    timerType: currentTimerType
	  };
	  lifeCycleTimerStack.push(currentTimer);
	  currentTimerStartTime = 0;
	  currentTimerNestedFlushDuration = 0;
	  currentTimerDebugID = null;
	  currentTimerType = null;
	}
	
	function resumeCurrentLifeCycleTimer() {
	  var _lifeCycleTimerStack$ = lifeCycleTimerStack.pop(),
	      startTime = _lifeCycleTimerStack$.startTime,
	      nestedFlushStartTime = _lifeCycleTimerStack$.nestedFlushStartTime,
	      debugID = _lifeCycleTimerStack$.debugID,
	      timerType = _lifeCycleTimerStack$.timerType;
	
	  var nestedFlushDuration = performanceNow() - nestedFlushStartTime;
	  currentTimerStartTime = startTime;
	  currentTimerNestedFlushDuration += nestedFlushDuration;
	  currentTimerDebugID = debugID;
	  currentTimerType = timerType;
	}
	
	var lastMarkTimeStamp = 0;
	var canUsePerformanceMeasure = typeof performance !== 'undefined' && typeof performance.mark === 'function' && typeof performance.clearMarks === 'function' && typeof performance.measure === 'function' && typeof performance.clearMeasures === 'function';
	
	function shouldMark(debugID) {
	  if (!_isProfiling || !canUsePerformanceMeasure) {
	    return false;
	  }
	  var element = ReactComponentTreeHook.getElement(debugID);
	  if (element == null || (typeof element === 'undefined' ? 'undefined' : _typeof(element)) !== 'object') {
	    return false;
	  }
	  var isHostElement = typeof element.type === 'string';
	  if (isHostElement) {
	    return false;
	  }
	  return true;
	}
	
	function markBegin(debugID, markType) {
	  if (!shouldMark(debugID)) {
	    return;
	  }
	
	  var markName = debugID + '::' + markType;
	  lastMarkTimeStamp = performanceNow();
	  performance.mark(markName);
	}
	
	function markEnd(debugID, markType) {
	  if (!shouldMark(debugID)) {
	    return;
	  }
	
	  var markName = debugID + '::' + markType;
	  var displayName = ReactComponentTreeHook.getDisplayName(debugID) || 'Unknown';
	
	  // Chrome has an issue of dropping markers recorded too fast:
	  // https://bugs.chromium.org/p/chromium/issues/detail?id=640652
	  // To work around this, we will not report very small measurements.
	  // I determined the magic number by tweaking it back and forth.
	  // 0.05ms was enough to prevent the issue, but I set it to 0.1ms to be safe.
	  // When the bug is fixed, we can `measure()` unconditionally if we want to.
	  var timeStamp = performanceNow();
	  if (timeStamp - lastMarkTimeStamp > 0.1) {
	    var measurementName = displayName + ' [' + markType + ']';
	    performance.measure(measurementName, markName);
	  }
	
	  performance.clearMarks(markName);
	  performance.clearMeasures(measurementName);
	}
	
	var ReactDebugTool = {
	  addHook: function addHook(hook) {
	    hooks.push(hook);
	  },
	  removeHook: function removeHook(hook) {
	    for (var i = 0; i < hooks.length; i++) {
	      if (hooks[i] === hook) {
	        hooks.splice(i, 1);
	        i--;
	      }
	    }
	  },
	  isProfiling: function isProfiling() {
	    return _isProfiling;
	  },
	  beginProfiling: function beginProfiling() {
	    if (_isProfiling) {
	      return;
	    }
	
	    _isProfiling = true;
	    flushHistory.length = 0;
	    resetMeasurements();
	    ReactDebugTool.addHook(ReactHostOperationHistoryHook);
	  },
	  endProfiling: function endProfiling() {
	    if (!_isProfiling) {
	      return;
	    }
	
	    _isProfiling = false;
	    resetMeasurements();
	    ReactDebugTool.removeHook(ReactHostOperationHistoryHook);
	  },
	  getFlushHistory: function getFlushHistory() {
	    return flushHistory;
	  },
	  onBeginFlush: function onBeginFlush() {
	    currentFlushNesting++;
	    resetMeasurements();
	    pauseCurrentLifeCycleTimer();
	    emitEvent('onBeginFlush');
	  },
	  onEndFlush: function onEndFlush() {
	    resetMeasurements();
	    currentFlushNesting--;
	    resumeCurrentLifeCycleTimer();
	    emitEvent('onEndFlush');
	  },
	  onBeginLifeCycleTimer: function onBeginLifeCycleTimer(debugID, timerType) {
	    checkDebugID(debugID);
	    emitEvent('onBeginLifeCycleTimer', debugID, timerType);
	    markBegin(debugID, timerType);
	    beginLifeCycleTimer(debugID, timerType);
	  },
	  onEndLifeCycleTimer: function onEndLifeCycleTimer(debugID, timerType) {
	    checkDebugID(debugID);
	    endLifeCycleTimer(debugID, timerType);
	    markEnd(debugID, timerType);
	    emitEvent('onEndLifeCycleTimer', debugID, timerType);
	  },
	  onBeginProcessingChildContext: function onBeginProcessingChildContext() {
	    emitEvent('onBeginProcessingChildContext');
	  },
	  onEndProcessingChildContext: function onEndProcessingChildContext() {
	    emitEvent('onEndProcessingChildContext');
	  },
	  onHostOperation: function onHostOperation(operation) {
	    checkDebugID(operation.instanceID);
	    emitEvent('onHostOperation', operation);
	  },
	  onSetState: function onSetState() {
	    emitEvent('onSetState');
	  },
	  onSetChildren: function onSetChildren(debugID, childDebugIDs) {
	    checkDebugID(debugID);
	    childDebugIDs.forEach(checkDebugID);
	    emitEvent('onSetChildren', debugID, childDebugIDs);
	  },
	  onBeforeMountComponent: function onBeforeMountComponent(debugID, element, parentDebugID) {
	    checkDebugID(debugID);
	    checkDebugID(parentDebugID, true);
	    emitEvent('onBeforeMountComponent', debugID, element, parentDebugID);
	    markBegin(debugID, 'mount');
	  },
	  onMountComponent: function onMountComponent(debugID) {
	    checkDebugID(debugID);
	    markEnd(debugID, 'mount');
	    emitEvent('onMountComponent', debugID);
	  },
	  onBeforeUpdateComponent: function onBeforeUpdateComponent(debugID, element) {
	    checkDebugID(debugID);
	    emitEvent('onBeforeUpdateComponent', debugID, element);
	    markBegin(debugID, 'update');
	  },
	  onUpdateComponent: function onUpdateComponent(debugID) {
	    checkDebugID(debugID);
	    markEnd(debugID, 'update');
	    emitEvent('onUpdateComponent', debugID);
	  },
	  onBeforeUnmountComponent: function onBeforeUnmountComponent(debugID) {
	    checkDebugID(debugID);
	    emitEvent('onBeforeUnmountComponent', debugID);
	    markBegin(debugID, 'unmount');
	  },
	  onUnmountComponent: function onUnmountComponent(debugID) {
	    checkDebugID(debugID);
	    markEnd(debugID, 'unmount');
	    emitEvent('onUnmountComponent', debugID);
	  },
	  onTestEvent: function onTestEvent() {
	    emitEvent('onTestEvent');
	  }
	};
	
	// TODO remove these when RN/www gets updated
	ReactDebugTool.addDevtool = ReactDebugTool.addHook;
	ReactDebugTool.removeDevtool = ReactDebugTool.removeHook;
	
	ReactDebugTool.addHook(ReactInvalidSetStateWarningHook);
	ReactDebugTool.addHook(ReactComponentTreeHook);
	var url = ExecutionEnvironment.canUseDOM && window.location.href || '';
	if (/[?&]react_perf\b/.test(url)) {
	  ReactDebugTool.beginProfiling();
	}
	
	module.exports = ReactDebugTool;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ }),
/* 68 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2016-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */
	
	'use strict';
	
	var warning = __webpack_require__(11);
	
	if (process.env.NODE_ENV !== 'production') {
	  var processingChildContext = false;
	
	  var warnInvalidSetState = function warnInvalidSetState() {
	    process.env.NODE_ENV !== 'production' ? warning(!processingChildContext, 'setState(...): Cannot call setState() inside getChildContext()') : void 0;
	  };
	}
	
	var ReactInvalidSetStateWarningHook = {
	  onBeginProcessingChildContext: function onBeginProcessingChildContext() {
	    processingChildContext = true;
	  },
	  onEndProcessingChildContext: function onEndProcessingChildContext() {
	    processingChildContext = false;
	  },
	  onSetState: function onSetState() {
	    warnInvalidSetState();
	  }
	};
	
	module.exports = ReactInvalidSetStateWarningHook;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ }),
/* 69 */
/***/ (function(module, exports) {

	/**
	 * Copyright 2016-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */
	
	'use strict';
	
	var history = [];
	
	var ReactHostOperationHistoryHook = {
	  onHostOperation: function onHostOperation(operation) {
	    history.push(operation);
	  },
	  clearHistory: function clearHistory() {
	    if (ReactHostOperationHistoryHook._preventClearing) {
	      // Should only be used for tests.
	      return;
	    }
	
	    history = [];
	  },
	  getHistory: function getHistory() {
	    return history;
	  }
	};
	
	module.exports = ReactHostOperationHistoryHook;

/***/ }),
/* 70 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @typechecks
	 */
	
	var performance = __webpack_require__(71);
	
	var performanceNow;
	
	/**
	 * Detect if we can use `window.performance.now()` and gracefully fallback to
	 * `Date.now()` if it doesn't exist. We need to support Firefox < 15 for now
	 * because of Facebook's testing infrastructure.
	 */
	if (performance.now) {
	  performanceNow = function performanceNow() {
	    return performance.now();
	  };
	} else {
	  performanceNow = function performanceNow() {
	    return Date.now();
	  };
	}
	
	module.exports = performanceNow;

/***/ }),
/* 71 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @typechecks
	 */
	
	'use strict';
	
	var ExecutionEnvironment = __webpack_require__(52);
	
	var performance;
	
	if (ExecutionEnvironment.canUseDOM) {
	  performance = window.performance || window.msPerformance || window.webkitPerformance;
	}
	
	module.exports = performance || {};

/***/ }),
/* 72 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */
	
	'use strict';
	
	var _prodInvariant = __webpack_require__(39);
	
	var invariant = __webpack_require__(8);
	
	var OBSERVED_ERROR = {};
	
	/**
	 * `Transaction` creates a black box that is able to wrap any method such that
	 * certain invariants are maintained before and after the method is invoked
	 * (Even if an exception is thrown while invoking the wrapped method). Whoever
	 * instantiates a transaction can provide enforcers of the invariants at
	 * creation time. The `Transaction` class itself will supply one additional
	 * automatic invariant for you - the invariant that any transaction instance
	 * should not be run while it is already being run. You would typically create a
	 * single instance of a `Transaction` for reuse multiple times, that potentially
	 * is used to wrap several different methods. Wrappers are extremely simple -
	 * they only require implementing two methods.
	 *
	 * <pre>
	 *                       wrappers (injected at creation time)
	 *                                      +        +
	 *                                      |        |
	 *                    +-----------------|--------|--------------+
	 *                    |                 v        |              |
	 *                    |      +---------------+   |              |
	 *                    |   +--|    wrapper1   |---|----+         |
	 *                    |   |  +---------------+   v    |         |
	 *                    |   |          +-------------+  |         |
	 *                    |   |     +----|   wrapper2  |--------+   |
	 *                    |   |     |    +-------------+  |     |   |
	 *                    |   |     |                     |     |   |
	 *                    |   v     v                     v     v   | wrapper
	 *                    | +---+ +---+   +---------+   +---+ +---+ | invariants
	 * perform(anyMethod) | |   | |   |   |         |   |   | |   | | maintained
	 * +----------------->|-|---|-|---|-->|anyMethod|---|---|-|---|-|-------->
	 *                    | |   | |   |   |         |   |   | |   | |
	 *                    | |   | |   |   |         |   |   | |   | |
	 *                    | |   | |   |   |         |   |   | |   | |
	 *                    | +---+ +---+   +---------+   +---+ +---+ |
	 *                    |  initialize                    close    |
	 *                    +-----------------------------------------+
	 * </pre>
	 *
	 * Use cases:
	 * - Preserving the input selection ranges before/after reconciliation.
	 *   Restoring selection even in the event of an unexpected error.
	 * - Deactivating events while rearranging the DOM, preventing blurs/focuses,
	 *   while guaranteeing that afterwards, the event system is reactivated.
	 * - Flushing a queue of collected DOM mutations to the main UI thread after a
	 *   reconciliation takes place in a worker thread.
	 * - Invoking any collected `componentDidUpdate` callbacks after rendering new
	 *   content.
	 * - (Future use case): Wrapping particular flushes of the `ReactWorker` queue
	 *   to preserve the `scrollTop` (an automatic scroll aware DOM).
	 * - (Future use case): Layout calculations before and after DOM updates.
	 *
	 * Transactional plugin API:
	 * - A module that has an `initialize` method that returns any precomputation.
	 * - and a `close` method that accepts the precomputation. `close` is invoked
	 *   when the wrapped process is completed, or has failed.
	 *
	 * @param {Array<TransactionalWrapper>} transactionWrapper Wrapper modules
	 * that implement `initialize` and `close`.
	 * @return {Transaction} Single transaction for reuse in thread.
	 *
	 * @class Transaction
	 */
	var TransactionImpl = {
	  /**
	   * Sets up this instance so that it is prepared for collecting metrics. Does
	   * so such that this setup method may be used on an instance that is already
	   * initialized, in a way that does not consume additional memory upon reuse.
	   * That can be useful if you decide to make your subclass of this mixin a
	   * "PooledClass".
	   */
	  reinitializeTransaction: function reinitializeTransaction() {
	    this.transactionWrappers = this.getTransactionWrappers();
	    if (this.wrapperInitData) {
	      this.wrapperInitData.length = 0;
	    } else {
	      this.wrapperInitData = [];
	    }
	    this._isInTransaction = false;
	  },
	
	  _isInTransaction: false,
	
	  /**
	   * @abstract
	   * @return {Array<TransactionWrapper>} Array of transaction wrappers.
	   */
	  getTransactionWrappers: null,
	
	  isInTransaction: function isInTransaction() {
	    return !!this._isInTransaction;
	  },
	
	  /**
	   * Executes the function within a safety window. Use this for the top level
	   * methods that result in large amounts of computation/mutations that would
	   * need to be safety checked. The optional arguments helps prevent the need
	   * to bind in many cases.
	   *
	   * @param {function} method Member of scope to call.
	   * @param {Object} scope Scope to invoke from.
	   * @param {Object?=} a Argument to pass to the method.
	   * @param {Object?=} b Argument to pass to the method.
	   * @param {Object?=} c Argument to pass to the method.
	   * @param {Object?=} d Argument to pass to the method.
	   * @param {Object?=} e Argument to pass to the method.
	   * @param {Object?=} f Argument to pass to the method.
	   *
	   * @return {*} Return value from `method`.
	   */
	  perform: function perform(method, scope, a, b, c, d, e, f) {
	    !!this.isInTransaction() ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Transaction.perform(...): Cannot initialize a transaction when there is already an outstanding transaction.') : _prodInvariant('27') : void 0;
	    var errorThrown;
	    var ret;
	    try {
	      this._isInTransaction = true;
	      // Catching errors makes debugging more difficult, so we start with
	      // errorThrown set to true before setting it to false after calling
	      // close -- if it's still set to true in the finally block, it means
	      // one of these calls threw.
	      errorThrown = true;
	      this.initializeAll(0);
	      ret = method.call(scope, a, b, c, d, e, f);
	      errorThrown = false;
	    } finally {
	      try {
	        if (errorThrown) {
	          // If `method` throws, prefer to show that stack trace over any thrown
	          // by invoking `closeAll`.
	          try {
	            this.closeAll(0);
	          } catch (err) {}
	        } else {
	          // Since `method` didn't throw, we don't want to silence the exception
	          // here.
	          this.closeAll(0);
	        }
	      } finally {
	        this._isInTransaction = false;
	      }
	    }
	    return ret;
	  },
	
	  initializeAll: function initializeAll(startIndex) {
	    var transactionWrappers = this.transactionWrappers;
	    for (var i = startIndex; i < transactionWrappers.length; i++) {
	      var wrapper = transactionWrappers[i];
	      try {
	        // Catching errors makes debugging more difficult, so we start with the
	        // OBSERVED_ERROR state before overwriting it with the real return value
	        // of initialize -- if it's still set to OBSERVED_ERROR in the finally
	        // block, it means wrapper.initialize threw.
	        this.wrapperInitData[i] = OBSERVED_ERROR;
	        this.wrapperInitData[i] = wrapper.initialize ? wrapper.initialize.call(this) : null;
	      } finally {
	        if (this.wrapperInitData[i] === OBSERVED_ERROR) {
	          // The initializer for wrapper i threw an error; initialize the
	          // remaining wrappers but silence any exceptions from them to ensure
	          // that the first error is the one to bubble up.
	          try {
	            this.initializeAll(i + 1);
	          } catch (err) {}
	        }
	      }
	    }
	  },
	
	  /**
	   * Invokes each of `this.transactionWrappers.close[i]` functions, passing into
	   * them the respective return values of `this.transactionWrappers.init[i]`
	   * (`close`rs that correspond to initializers that failed will not be
	   * invoked).
	   */
	  closeAll: function closeAll(startIndex) {
	    !this.isInTransaction() ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Transaction.closeAll(): Cannot close transaction when none are open.') : _prodInvariant('28') : void 0;
	    var transactionWrappers = this.transactionWrappers;
	    for (var i = startIndex; i < transactionWrappers.length; i++) {
	      var wrapper = transactionWrappers[i];
	      var initData = this.wrapperInitData[i];
	      var errorThrown;
	      try {
	        // Catching errors makes debugging more difficult, so we start with
	        // errorThrown set to true before setting it to false after calling
	        // close -- if it's still set to true in the finally block, it means
	        // wrapper.close threw.
	        errorThrown = true;
	        if (initData !== OBSERVED_ERROR && wrapper.close) {
	          wrapper.close.call(this, initData);
	        }
	        errorThrown = false;
	      } finally {
	        if (errorThrown) {
	          // The closer for wrapper i threw an error; close the remaining
	          // wrappers but silence any exceptions from them to ensure that the
	          // first error is the one to bubble up.
	          try {
	            this.closeAll(i + 1);
	          } catch (e) {}
	        }
	      }
	    }
	    this.wrapperInitData.length = 0;
	  }
	};
	
	module.exports = TransactionImpl;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ }),
/* 73 */
/***/ (function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	/**
	 * Gets the target node from a native browser event by accounting for
	 * inconsistencies in browser DOM APIs.
	 *
	 * @param {object} nativeEvent Native browser event.
	 * @return {DOMEventTarget} Target node.
	 */
	
	function getEventTarget(nativeEvent) {
	  var target = nativeEvent.target || nativeEvent.srcElement || window;
	
	  // Normalize SVG <use> element events #4963
	  if (target.correspondingUseElement) {
	    target = target.correspondingUseElement;
	  }
	
	  // Safari may fire events on text nodes (Node.TEXT_NODE is 3).
	  // @see http://www.quirksmode.org/js/events_properties.html
	  return target.nodeType === 3 ? target.parentNode : target;
	}
	
	module.exports = getEventTarget;

/***/ }),
/* 74 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var ExecutionEnvironment = __webpack_require__(52);
	
	var useHasFeature;
	if (ExecutionEnvironment.canUseDOM) {
	  useHasFeature = document.implementation && document.implementation.hasFeature &&
	  // always returns true in newer browsers as per the standard.
	  // @see http://dom.spec.whatwg.org/#dom-domimplementation-hasfeature
	  document.implementation.hasFeature('', '') !== true;
	}
	
	/**
	 * Checks if an event is supported in the current execution environment.
	 *
	 * NOTE: This will not work correctly for non-generic events such as `change`,
	 * `reset`, `load`, `error`, and `select`.
	 *
	 * Borrows from Modernizr.
	 *
	 * @param {string} eventNameSuffix Event name, e.g. "click".
	 * @param {?boolean} capture Check if the capture phase is supported.
	 * @return {boolean} True if the event is supported.
	 * @internal
	 * @license Modernizr 3.0.0pre (Custom Build) | MIT
	 */
	function isEventSupported(eventNameSuffix, capture) {
	  if (!ExecutionEnvironment.canUseDOM || capture && !('addEventListener' in document)) {
	    return false;
	  }
	
	  var eventName = 'on' + eventNameSuffix;
	  var isSupported = eventName in document;
	
	  if (!isSupported) {
	    var element = document.createElement('div');
	    element.setAttribute(eventName, 'return;');
	    isSupported = typeof element[eventName] === 'function';
	  }
	
	  if (!isSupported && useHasFeature && eventNameSuffix === 'wheel') {
	    // This is the only way to test support for the `wheel` event in IE9+.
	    isSupported = document.implementation.hasFeature('Events.wheel', '3.0');
	  }
	
	  return isSupported;
	}
	
	module.exports = isEventSupported;

/***/ }),
/* 75 */
/***/ (function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */
	
	'use strict';
	
	/**
	 * @see http://www.whatwg.org/specs/web-apps/current-work/multipage/the-input-element.html#input-type-attr-summary
	 */
	
	var supportedInputTypes = {
	  'color': true,
	  'date': true,
	  'datetime': true,
	  'datetime-local': true,
	  'email': true,
	  'month': true,
	  'number': true,
	  'password': true,
	  'range': true,
	  'search': true,
	  'tel': true,
	  'text': true,
	  'time': true,
	  'url': true,
	  'week': true
	};
	
	function isTextInputElement(elem) {
	  var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
	
	  if (nodeName === 'input') {
	    return !!supportedInputTypes[elem.type];
	  }
	
	  if (nodeName === 'textarea') {
	    return true;
	  }
	
	  return false;
	}
	
	module.exports = isTextInputElement;

/***/ }),
/* 76 */
/***/ (function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	/**
	 * Module that is injectable into `EventPluginHub`, that specifies a
	 * deterministic ordering of `EventPlugin`s. A convenient way to reason about
	 * plugins, without having to package every one of them. This is better than
	 * having plugins be ordered in the same order that they are injected because
	 * that ordering would be influenced by the packaging order.
	 * `ResponderEventPlugin` must occur before `SimpleEventPlugin` so that
	 * preventing default on events is convenient in `SimpleEventPlugin` handlers.
	 */
	
	var DefaultEventPluginOrder = ['ResponderEventPlugin', 'SimpleEventPlugin', 'TapEventPlugin', 'EnterLeaveEventPlugin', 'ChangeEventPlugin', 'SelectEventPlugin', 'BeforeInputEventPlugin'];
	
	module.exports = DefaultEventPluginOrder;

/***/ }),
/* 77 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var EventPropagators = __webpack_require__(45);
	var ReactDOMComponentTree = __webpack_require__(38);
	var SyntheticMouseEvent = __webpack_require__(78);
	
	var eventTypes = {
	  mouseEnter: {
	    registrationName: 'onMouseEnter',
	    dependencies: ['topMouseOut', 'topMouseOver']
	  },
	  mouseLeave: {
	    registrationName: 'onMouseLeave',
	    dependencies: ['topMouseOut', 'topMouseOver']
	  }
	};
	
	var EnterLeaveEventPlugin = {
	
	  eventTypes: eventTypes,
	
	  /**
	   * For almost every interaction we care about, there will be both a top-level
	   * `mouseover` and `mouseout` event that occurs. Only use `mouseout` so that
	   * we do not extract duplicate events. However, moving the mouse into the
	   * browser from outside will not fire a `mouseout` event. In this case, we use
	   * the `mouseover` top-level event.
	   */
	  extractEvents: function extractEvents(topLevelType, targetInst, nativeEvent, nativeEventTarget) {
	    if (topLevelType === 'topMouseOver' && (nativeEvent.relatedTarget || nativeEvent.fromElement)) {
	      return null;
	    }
	    if (topLevelType !== 'topMouseOut' && topLevelType !== 'topMouseOver') {
	      // Must not be a mouse in or mouse out - ignoring.
	      return null;
	    }
	
	    var win;
	    if (nativeEventTarget.window === nativeEventTarget) {
	      // `nativeEventTarget` is probably a window object.
	      win = nativeEventTarget;
	    } else {
	      // TODO: Figure out why `ownerDocument` is sometimes undefined in IE8.
	      var doc = nativeEventTarget.ownerDocument;
	      if (doc) {
	        win = doc.defaultView || doc.parentWindow;
	      } else {
	        win = window;
	      }
	    }
	
	    var from;
	    var to;
	    if (topLevelType === 'topMouseOut') {
	      from = targetInst;
	      var related = nativeEvent.relatedTarget || nativeEvent.toElement;
	      to = related ? ReactDOMComponentTree.getClosestInstanceFromNode(related) : null;
	    } else {
	      // Moving to a node from outside the window.
	      from = null;
	      to = targetInst;
	    }
	
	    if (from === to) {
	      // Nothing pertains to our managed components.
	      return null;
	    }
	
	    var fromNode = from == null ? win : ReactDOMComponentTree.getNodeFromInstance(from);
	    var toNode = to == null ? win : ReactDOMComponentTree.getNodeFromInstance(to);
	
	    var leave = SyntheticMouseEvent.getPooled(eventTypes.mouseLeave, from, nativeEvent, nativeEventTarget);
	    leave.type = 'mouseleave';
	    leave.target = fromNode;
	    leave.relatedTarget = toNode;
	
	    var enter = SyntheticMouseEvent.getPooled(eventTypes.mouseEnter, to, nativeEvent, nativeEventTarget);
	    enter.type = 'mouseenter';
	    enter.target = toNode;
	    enter.relatedTarget = fromNode;
	
	    EventPropagators.accumulateEnterLeaveDispatches(leave, enter, from, to);
	
	    return [leave, enter];
	  }
	
	};
	
	module.exports = EnterLeaveEventPlugin;

/***/ }),
/* 78 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var SyntheticUIEvent = __webpack_require__(79);
	var ViewportMetrics = __webpack_require__(80);
	
	var getEventModifierState = __webpack_require__(81);
	
	/**
	 * @interface MouseEvent
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */
	var MouseEventInterface = {
	  screenX: null,
	  screenY: null,
	  clientX: null,
	  clientY: null,
	  ctrlKey: null,
	  shiftKey: null,
	  altKey: null,
	  metaKey: null,
	  getModifierState: getEventModifierState,
	  button: function button(event) {
	    // Webkit, Firefox, IE9+
	    // which:  1 2 3
	    // button: 0 1 2 (standard)
	    var button = event.button;
	    if ('which' in event) {
	      return button;
	    }
	    // IE<9
	    // which:  undefined
	    // button: 0 0 0
	    // button: 1 4 2 (onmouseup)
	    return button === 2 ? 2 : button === 4 ? 1 : 0;
	  },
	  buttons: null,
	  relatedTarget: function relatedTarget(event) {
	    return event.relatedTarget || (event.fromElement === event.srcElement ? event.toElement : event.fromElement);
	  },
	  // "Proprietary" Interface.
	  pageX: function pageX(event) {
	    return 'pageX' in event ? event.pageX : event.clientX + ViewportMetrics.currentScrollLeft;
	  },
	  pageY: function pageY(event) {
	    return 'pageY' in event ? event.pageY : event.clientY + ViewportMetrics.currentScrollTop;
	  }
	};
	
	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticUIEvent}
	 */
	function SyntheticMouseEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  return SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}
	
	SyntheticUIEvent.augmentClass(SyntheticMouseEvent, MouseEventInterface);
	
	module.exports = SyntheticMouseEvent;

/***/ }),
/* 79 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var SyntheticEvent = __webpack_require__(57);
	
	var getEventTarget = __webpack_require__(73);
	
	/**
	 * @interface UIEvent
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */
	var UIEventInterface = {
	  view: function view(event) {
	    if (event.view) {
	      return event.view;
	    }
	
	    var target = getEventTarget(event);
	    if (target.window === target) {
	      // target is a window object
	      return target;
	    }
	
	    var doc = target.ownerDocument;
	    // TODO: Figure out why `ownerDocument` is sometimes undefined in IE8.
	    if (doc) {
	      return doc.defaultView || doc.parentWindow;
	    } else {
	      return window;
	    }
	  },
	  detail: function detail(event) {
	    return event.detail || 0;
	  }
	};
	
	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticEvent}
	 */
	function SyntheticUIEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  return SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}
	
	SyntheticEvent.augmentClass(SyntheticUIEvent, UIEventInterface);
	
	module.exports = SyntheticUIEvent;

/***/ }),
/* 80 */
/***/ (function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var ViewportMetrics = {
	
	  currentScrollLeft: 0,
	
	  currentScrollTop: 0,
	
	  refreshScrollValues: function refreshScrollValues(scrollPosition) {
	    ViewportMetrics.currentScrollLeft = scrollPosition.x;
	    ViewportMetrics.currentScrollTop = scrollPosition.y;
	  }
	
	};
	
	module.exports = ViewportMetrics;

/***/ }),
/* 81 */
/***/ (function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	/**
	 * Translation from modifier key to the associated property in the event.
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/#keys-Modifiers
	 */
	
	var modifierKeyToProp = {
	  'Alt': 'altKey',
	  'Control': 'ctrlKey',
	  'Meta': 'metaKey',
	  'Shift': 'shiftKey'
	};
	
	// IE8 does not implement getModifierState so we simply map it to the only
	// modifier keys exposed by the event itself, does not support Lock-keys.
	// Currently, all major browsers except Chrome seems to support Lock-keys.
	function modifierStateGetter(keyArg) {
	  var syntheticEvent = this;
	  var nativeEvent = syntheticEvent.nativeEvent;
	  if (nativeEvent.getModifierState) {
	    return nativeEvent.getModifierState(keyArg);
	  }
	  var keyProp = modifierKeyToProp[keyArg];
	  return keyProp ? !!nativeEvent[keyProp] : false;
	}
	
	function getEventModifierState(nativeEvent) {
	  return modifierStateGetter;
	}
	
	module.exports = getEventModifierState;

/***/ }),
/* 82 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var DOMProperty = __webpack_require__(40);
	
	var MUST_USE_PROPERTY = DOMProperty.injection.MUST_USE_PROPERTY;
	var HAS_BOOLEAN_VALUE = DOMProperty.injection.HAS_BOOLEAN_VALUE;
	var HAS_NUMERIC_VALUE = DOMProperty.injection.HAS_NUMERIC_VALUE;
	var HAS_POSITIVE_NUMERIC_VALUE = DOMProperty.injection.HAS_POSITIVE_NUMERIC_VALUE;
	var HAS_OVERLOADED_BOOLEAN_VALUE = DOMProperty.injection.HAS_OVERLOADED_BOOLEAN_VALUE;
	
	var HTMLDOMPropertyConfig = {
	  isCustomAttribute: RegExp.prototype.test.bind(new RegExp('^(data|aria)-[' + DOMProperty.ATTRIBUTE_NAME_CHAR + ']*$')),
	  Properties: {
	    /**
	     * Standard Properties
	     */
	    accept: 0,
	    acceptCharset: 0,
	    accessKey: 0,
	    action: 0,
	    allowFullScreen: HAS_BOOLEAN_VALUE,
	    allowTransparency: 0,
	    alt: 0,
	    // specifies target context for links with `preload` type
	    as: 0,
	    async: HAS_BOOLEAN_VALUE,
	    autoComplete: 0,
	    // autoFocus is polyfilled/normalized by AutoFocusUtils
	    // autoFocus: HAS_BOOLEAN_VALUE,
	    autoPlay: HAS_BOOLEAN_VALUE,
	    capture: HAS_BOOLEAN_VALUE,
	    cellPadding: 0,
	    cellSpacing: 0,
	    charSet: 0,
	    challenge: 0,
	    checked: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
	    cite: 0,
	    classID: 0,
	    className: 0,
	    cols: HAS_POSITIVE_NUMERIC_VALUE,
	    colSpan: 0,
	    content: 0,
	    contentEditable: 0,
	    contextMenu: 0,
	    controls: HAS_BOOLEAN_VALUE,
	    coords: 0,
	    crossOrigin: 0,
	    data: 0, // For `<object />` acts as `src`.
	    dateTime: 0,
	    'default': HAS_BOOLEAN_VALUE,
	    defer: HAS_BOOLEAN_VALUE,
	    dir: 0,
	    disabled: HAS_BOOLEAN_VALUE,
	    download: HAS_OVERLOADED_BOOLEAN_VALUE,
	    draggable: 0,
	    encType: 0,
	    form: 0,
	    formAction: 0,
	    formEncType: 0,
	    formMethod: 0,
	    formNoValidate: HAS_BOOLEAN_VALUE,
	    formTarget: 0,
	    frameBorder: 0,
	    headers: 0,
	    height: 0,
	    hidden: HAS_BOOLEAN_VALUE,
	    high: 0,
	    href: 0,
	    hrefLang: 0,
	    htmlFor: 0,
	    httpEquiv: 0,
	    icon: 0,
	    id: 0,
	    inputMode: 0,
	    integrity: 0,
	    is: 0,
	    keyParams: 0,
	    keyType: 0,
	    kind: 0,
	    label: 0,
	    lang: 0,
	    list: 0,
	    loop: HAS_BOOLEAN_VALUE,
	    low: 0,
	    manifest: 0,
	    marginHeight: 0,
	    marginWidth: 0,
	    max: 0,
	    maxLength: 0,
	    media: 0,
	    mediaGroup: 0,
	    method: 0,
	    min: 0,
	    minLength: 0,
	    // Caution; `option.selected` is not updated if `select.multiple` is
	    // disabled with `removeAttribute`.
	    multiple: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
	    muted: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
	    name: 0,
	    nonce: 0,
	    noValidate: HAS_BOOLEAN_VALUE,
	    open: HAS_BOOLEAN_VALUE,
	    optimum: 0,
	    pattern: 0,
	    placeholder: 0,
	    playsInline: HAS_BOOLEAN_VALUE,
	    poster: 0,
	    preload: 0,
	    profile: 0,
	    radioGroup: 0,
	    readOnly: HAS_BOOLEAN_VALUE,
	    referrerPolicy: 0,
	    rel: 0,
	    required: HAS_BOOLEAN_VALUE,
	    reversed: HAS_BOOLEAN_VALUE,
	    role: 0,
	    rows: HAS_POSITIVE_NUMERIC_VALUE,
	    rowSpan: HAS_NUMERIC_VALUE,
	    sandbox: 0,
	    scope: 0,
	    scoped: HAS_BOOLEAN_VALUE,
	    scrolling: 0,
	    seamless: HAS_BOOLEAN_VALUE,
	    selected: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
	    shape: 0,
	    size: HAS_POSITIVE_NUMERIC_VALUE,
	    sizes: 0,
	    span: HAS_POSITIVE_NUMERIC_VALUE,
	    spellCheck: 0,
	    src: 0,
	    srcDoc: 0,
	    srcLang: 0,
	    srcSet: 0,
	    start: HAS_NUMERIC_VALUE,
	    step: 0,
	    style: 0,
	    summary: 0,
	    tabIndex: 0,
	    target: 0,
	    title: 0,
	    // Setting .type throws on non-<input> tags
	    type: 0,
	    useMap: 0,
	    value: 0,
	    width: 0,
	    wmode: 0,
	    wrap: 0,
	
	    /**
	     * RDFa Properties
	     */
	    about: 0,
	    datatype: 0,
	    inlist: 0,
	    prefix: 0,
	    // property is also supported for OpenGraph in meta tags.
	    property: 0,
	    resource: 0,
	    'typeof': 0,
	    vocab: 0,
	
	    /**
	     * Non-standard Properties
	     */
	    // autoCapitalize and autoCorrect are supported in Mobile Safari for
	    // keyboard hints.
	    autoCapitalize: 0,
	    autoCorrect: 0,
	    // autoSave allows WebKit/Blink to persist values of input fields on page reloads
	    autoSave: 0,
	    // color is for Safari mask-icon link
	    color: 0,
	    // itemProp, itemScope, itemType are for
	    // Microdata support. See http://schema.org/docs/gs.html
	    itemProp: 0,
	    itemScope: HAS_BOOLEAN_VALUE,
	    itemType: 0,
	    // itemID and itemRef are for Microdata support as well but
	    // only specified in the WHATWG spec document. See
	    // https://html.spec.whatwg.org/multipage/microdata.html#microdata-dom-api
	    itemID: 0,
	    itemRef: 0,
	    // results show looking glass icon and recent searches on input
	    // search fields in WebKit/Blink
	    results: 0,
	    // IE-only attribute that specifies security restrictions on an iframe
	    // as an alternative to the sandbox attribute on IE<10
	    security: 0,
	    // IE-only attribute that controls focus behavior
	    unselectable: 0
	  },
	  DOMAttributeNames: {
	    acceptCharset: 'accept-charset',
	    className: 'class',
	    htmlFor: 'for',
	    httpEquiv: 'http-equiv'
	  },
	  DOMPropertyNames: {},
	  DOMMutationMethods: {
	    value: function value(node, _value) {
	      if (_value == null) {
	        return node.removeAttribute('value');
	      }
	
	      // Number inputs get special treatment due to some edge cases in
	      // Chrome. Let everything else assign the value attribute as normal.
	      // https://github.com/facebook/react/issues/7253#issuecomment-236074326
	      if (node.type !== 'number' || node.hasAttribute('value') === false) {
	        node.setAttribute('value', '' + _value);
	      } else if (node.validity && !node.validity.badInput && node.ownerDocument.activeElement !== node) {
	        // Don't assign an attribute if validation reports bad
	        // input. Chrome will clear the value. Additionally, don't
	        // operate on inputs that have focus, otherwise Chrome might
	        // strip off trailing decimal places and cause the user's
	        // cursor position to jump to the beginning of the input.
	        //
	        // In ReactDOMInput, we have an onBlur event that will trigger
	        // this function again when focus is lost.
	        node.setAttribute('value', '' + _value);
	      }
	    }
	  }
	};
	
	module.exports = HTMLDOMPropertyConfig;

/***/ }),
/* 83 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var DOMChildrenOperations = __webpack_require__(84);
	var ReactDOMIDOperations = __webpack_require__(95);
	
	/**
	 * Abstracts away all functionality of the reconciler that requires knowledge of
	 * the browser context. TODO: These callers should be refactored to avoid the
	 * need for this injection.
	 */
	var ReactComponentBrowserEnvironment = {
	
	  processChildrenUpdates: ReactDOMIDOperations.dangerouslyProcessChildrenUpdates,
	
	  replaceNodeWithMarkup: DOMChildrenOperations.dangerouslyReplaceNodeWithMarkup
	
	};
	
	module.exports = ReactComponentBrowserEnvironment;

/***/ }),
/* 84 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var DOMLazyTree = __webpack_require__(85);
	var Danger = __webpack_require__(91);
	var ReactDOMComponentTree = __webpack_require__(38);
	var ReactInstrumentation = __webpack_require__(66);
	
	var createMicrosoftUnsafeLocalFunction = __webpack_require__(88);
	var setInnerHTML = __webpack_require__(87);
	var setTextContent = __webpack_require__(89);
	
	function getNodeAfter(parentNode, node) {
	  // Special case for text components, which return [open, close] comments
	  // from getHostNode.
	  if (Array.isArray(node)) {
	    node = node[1];
	  }
	  return node ? node.nextSibling : parentNode.firstChild;
	}
	
	/**
	 * Inserts `childNode` as a child of `parentNode` at the `index`.
	 *
	 * @param {DOMElement} parentNode Parent node in which to insert.
	 * @param {DOMElement} childNode Child node to insert.
	 * @param {number} index Index at which to insert the child.
	 * @internal
	 */
	var insertChildAt = createMicrosoftUnsafeLocalFunction(function (parentNode, childNode, referenceNode) {
	  // We rely exclusively on `insertBefore(node, null)` instead of also using
	  // `appendChild(node)`. (Using `undefined` is not allowed by all browsers so
	  // we are careful to use `null`.)
	  parentNode.insertBefore(childNode, referenceNode);
	});
	
	function insertLazyTreeChildAt(parentNode, childTree, referenceNode) {
	  DOMLazyTree.insertTreeBefore(parentNode, childTree, referenceNode);
	}
	
	function moveChild(parentNode, childNode, referenceNode) {
	  if (Array.isArray(childNode)) {
	    moveDelimitedText(parentNode, childNode[0], childNode[1], referenceNode);
	  } else {
	    insertChildAt(parentNode, childNode, referenceNode);
	  }
	}
	
	function removeChild(parentNode, childNode) {
	  if (Array.isArray(childNode)) {
	    var closingComment = childNode[1];
	    childNode = childNode[0];
	    removeDelimitedText(parentNode, childNode, closingComment);
	    parentNode.removeChild(closingComment);
	  }
	  parentNode.removeChild(childNode);
	}
	
	function moveDelimitedText(parentNode, openingComment, closingComment, referenceNode) {
	  var node = openingComment;
	  while (true) {
	    var nextNode = node.nextSibling;
	    insertChildAt(parentNode, node, referenceNode);
	    if (node === closingComment) {
	      break;
	    }
	    node = nextNode;
	  }
	}
	
	function removeDelimitedText(parentNode, startNode, closingComment) {
	  while (true) {
	    var node = startNode.nextSibling;
	    if (node === closingComment) {
	      // The closing comment is removed by ReactMultiChild.
	      break;
	    } else {
	      parentNode.removeChild(node);
	    }
	  }
	}
	
	function replaceDelimitedText(openingComment, closingComment, stringText) {
	  var parentNode = openingComment.parentNode;
	  var nodeAfterComment = openingComment.nextSibling;
	  if (nodeAfterComment === closingComment) {
	    // There are no text nodes between the opening and closing comments; insert
	    // a new one if stringText isn't empty.
	    if (stringText) {
	      insertChildAt(parentNode, document.createTextNode(stringText), nodeAfterComment);
	    }
	  } else {
	    if (stringText) {
	      // Set the text content of the first node after the opening comment, and
	      // remove all following nodes up until the closing comment.
	      setTextContent(nodeAfterComment, stringText);
	      removeDelimitedText(parentNode, nodeAfterComment, closingComment);
	    } else {
	      removeDelimitedText(parentNode, openingComment, closingComment);
	    }
	  }
	
	  if (process.env.NODE_ENV !== 'production') {
	    ReactInstrumentation.debugTool.onHostOperation({
	      instanceID: ReactDOMComponentTree.getInstanceFromNode(openingComment)._debugID,
	      type: 'replace text',
	      payload: stringText
	    });
	  }
	}
	
	var dangerouslyReplaceNodeWithMarkup = Danger.dangerouslyReplaceNodeWithMarkup;
	if (process.env.NODE_ENV !== 'production') {
	  dangerouslyReplaceNodeWithMarkup = function dangerouslyReplaceNodeWithMarkup(oldChild, markup, prevInstance) {
	    Danger.dangerouslyReplaceNodeWithMarkup(oldChild, markup);
	    if (prevInstance._debugID !== 0) {
	      ReactInstrumentation.debugTool.onHostOperation({
	        instanceID: prevInstance._debugID,
	        type: 'replace with',
	        payload: markup.toString()
	      });
	    } else {
	      var nextInstance = ReactDOMComponentTree.getInstanceFromNode(markup.node);
	      if (nextInstance._debugID !== 0) {
	        ReactInstrumentation.debugTool.onHostOperation({
	          instanceID: nextInstance._debugID,
	          type: 'mount',
	          payload: markup.toString()
	        });
	      }
	    }
	  };
	}
	
	/**
	 * Operations for updating with DOM children.
	 */
	var DOMChildrenOperations = {
	
	  dangerouslyReplaceNodeWithMarkup: dangerouslyReplaceNodeWithMarkup,
	
	  replaceDelimitedText: replaceDelimitedText,
	
	  /**
	   * Updates a component's children by processing a series of updates. The
	   * update configurations are each expected to have a `parentNode` property.
	   *
	   * @param {array<object>} updates List of update configurations.
	   * @internal
	   */
	  processUpdates: function processUpdates(parentNode, updates) {
	    if (process.env.NODE_ENV !== 'production') {
	      var parentNodeDebugID = ReactDOMComponentTree.getInstanceFromNode(parentNode)._debugID;
	    }
	
	    for (var k = 0; k < updates.length; k++) {
	      var update = updates[k];
	      switch (update.type) {
	        case 'INSERT_MARKUP':
	          insertLazyTreeChildAt(parentNode, update.content, getNodeAfter(parentNode, update.afterNode));
	          if (process.env.NODE_ENV !== 'production') {
	            ReactInstrumentation.debugTool.onHostOperation({
	              instanceID: parentNodeDebugID,
	              type: 'insert child',
	              payload: { toIndex: update.toIndex, content: update.content.toString() }
	            });
	          }
	          break;
	        case 'MOVE_EXISTING':
	          moveChild(parentNode, update.fromNode, getNodeAfter(parentNode, update.afterNode));
	          if (process.env.NODE_ENV !== 'production') {
	            ReactInstrumentation.debugTool.onHostOperation({
	              instanceID: parentNodeDebugID,
	              type: 'move child',
	              payload: { fromIndex: update.fromIndex, toIndex: update.toIndex }
	            });
	          }
	          break;
	        case 'SET_MARKUP':
	          setInnerHTML(parentNode, update.content);
	          if (process.env.NODE_ENV !== 'production') {
	            ReactInstrumentation.debugTool.onHostOperation({
	              instanceID: parentNodeDebugID,
	              type: 'replace children',
	              payload: update.content.toString()
	            });
	          }
	          break;
	        case 'TEXT_CONTENT':
	          setTextContent(parentNode, update.content);
	          if (process.env.NODE_ENV !== 'production') {
	            ReactInstrumentation.debugTool.onHostOperation({
	              instanceID: parentNodeDebugID,
	              type: 'replace text',
	              payload: update.content.toString()
	            });
	          }
	          break;
	        case 'REMOVE_NODE':
	          removeChild(parentNode, update.fromNode);
	          if (process.env.NODE_ENV !== 'production') {
	            ReactInstrumentation.debugTool.onHostOperation({
	              instanceID: parentNodeDebugID,
	              type: 'remove child',
	              payload: { fromIndex: update.fromIndex }
	            });
	          }
	          break;
	      }
	    }
	  }
	
	};
	
	module.exports = DOMChildrenOperations;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ }),
/* 85 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2015-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var DOMNamespaces = __webpack_require__(86);
	var setInnerHTML = __webpack_require__(87);
	
	var createMicrosoftUnsafeLocalFunction = __webpack_require__(88);
	var setTextContent = __webpack_require__(89);
	
	var ELEMENT_NODE_TYPE = 1;
	var DOCUMENT_FRAGMENT_NODE_TYPE = 11;
	
	/**
	 * In IE (8-11) and Edge, appending nodes with no children is dramatically
	 * faster than appending a full subtree, so we essentially queue up the
	 * .appendChild calls here and apply them so each node is added to its parent
	 * before any children are added.
	 *
	 * In other browsers, doing so is slower or neutral compared to the other order
	 * (in Firefox, twice as slow) so we only do this inversion in IE.
	 *
	 * See https://github.com/spicyj/innerhtml-vs-createelement-vs-clonenode.
	 */
	var enableLazy = typeof document !== 'undefined' && typeof document.documentMode === 'number' || typeof navigator !== 'undefined' && typeof navigator.userAgent === 'string' && /\bEdge\/\d/.test(navigator.userAgent);
	
	function insertTreeChildren(tree) {
	  if (!enableLazy) {
	    return;
	  }
	  var node = tree.node;
	  var children = tree.children;
	  if (children.length) {
	    for (var i = 0; i < children.length; i++) {
	      insertTreeBefore(node, children[i], null);
	    }
	  } else if (tree.html != null) {
	    setInnerHTML(node, tree.html);
	  } else if (tree.text != null) {
	    setTextContent(node, tree.text);
	  }
	}
	
	var insertTreeBefore = createMicrosoftUnsafeLocalFunction(function (parentNode, tree, referenceNode) {
	  // DocumentFragments aren't actually part of the DOM after insertion so
	  // appending children won't update the DOM. We need to ensure the fragment
	  // is properly populated first, breaking out of our lazy approach for just
	  // this level. Also, some <object> plugins (like Flash Player) will read
	  // <param> nodes immediately upon insertion into the DOM, so <object>
	  // must also be populated prior to insertion into the DOM.
	  if (tree.node.nodeType === DOCUMENT_FRAGMENT_NODE_TYPE || tree.node.nodeType === ELEMENT_NODE_TYPE && tree.node.nodeName.toLowerCase() === 'object' && (tree.node.namespaceURI == null || tree.node.namespaceURI === DOMNamespaces.html)) {
	    insertTreeChildren(tree);
	    parentNode.insertBefore(tree.node, referenceNode);
	  } else {
	    parentNode.insertBefore(tree.node, referenceNode);
	    insertTreeChildren(tree);
	  }
	});
	
	function replaceChildWithTree(oldNode, newTree) {
	  oldNode.parentNode.replaceChild(newTree.node, oldNode);
	  insertTreeChildren(newTree);
	}
	
	function queueChild(parentTree, childTree) {
	  if (enableLazy) {
	    parentTree.children.push(childTree);
	  } else {
	    parentTree.node.appendChild(childTree.node);
	  }
	}
	
	function queueHTML(tree, html) {
	  if (enableLazy) {
	    tree.html = html;
	  } else {
	    setInnerHTML(tree.node, html);
	  }
	}
	
	function queueText(tree, text) {
	  if (enableLazy) {
	    tree.text = text;
	  } else {
	    setTextContent(tree.node, text);
	  }
	}
	
	function toString() {
	  return this.node.nodeName;
	}
	
	function DOMLazyTree(node) {
	  return {
	    node: node,
	    children: [],
	    html: null,
	    text: null,
	    toString: toString
	  };
	}
	
	DOMLazyTree.insertTreeBefore = insertTreeBefore;
	DOMLazyTree.replaceChildWithTree = replaceChildWithTree;
	DOMLazyTree.queueChild = queueChild;
	DOMLazyTree.queueHTML = queueHTML;
	DOMLazyTree.queueText = queueText;
	
	module.exports = DOMLazyTree;

/***/ }),
/* 86 */
/***/ (function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var DOMNamespaces = {
	  html: 'http://www.w3.org/1999/xhtml',
	  mathml: 'http://www.w3.org/1998/Math/MathML',
	  svg: 'http://www.w3.org/2000/svg'
	};
	
	module.exports = DOMNamespaces;

/***/ }),
/* 87 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var ExecutionEnvironment = __webpack_require__(52);
	var DOMNamespaces = __webpack_require__(86);
	
	var WHITESPACE_TEST = /^[ \r\n\t\f]/;
	var NONVISIBLE_TEST = /<(!--|link|noscript|meta|script|style)[ \r\n\t\f\/>]/;
	
	var createMicrosoftUnsafeLocalFunction = __webpack_require__(88);
	
	// SVG temp container for IE lacking innerHTML
	var reusableSVGContainer;
	
	/**
	 * Set the innerHTML property of a node, ensuring that whitespace is preserved
	 * even in IE8.
	 *
	 * @param {DOMElement} node
	 * @param {string} html
	 * @internal
	 */
	var setInnerHTML = createMicrosoftUnsafeLocalFunction(function (node, html) {
	  // IE does not have innerHTML for SVG nodes, so instead we inject the
	  // new markup in a temp node and then move the child nodes across into
	  // the target node
	  if (node.namespaceURI === DOMNamespaces.svg && !('innerHTML' in node)) {
	    reusableSVGContainer = reusableSVGContainer || document.createElement('div');
	    reusableSVGContainer.innerHTML = '<svg>' + html + '</svg>';
	    var svgNode = reusableSVGContainer.firstChild;
	    while (svgNode.firstChild) {
	      node.appendChild(svgNode.firstChild);
	    }
	  } else {
	    node.innerHTML = html;
	  }
	});
	
	if (ExecutionEnvironment.canUseDOM) {
	  // IE8: When updating a just created node with innerHTML only leading
	  // whitespace is removed. When updating an existing node with innerHTML
	  // whitespace in root TextNodes is also collapsed.
	  // @see quirksmode.org/bugreports/archives/2004/11/innerhtml_and_t.html
	
	  // Feature detection; only IE8 is known to behave improperly like this.
	  var testElement = document.createElement('div');
	  testElement.innerHTML = ' ';
	  if (testElement.innerHTML === '') {
	    setInnerHTML = function setInnerHTML(node, html) {
	      // Magic theory: IE8 supposedly differentiates between added and updated
	      // nodes when processing innerHTML, innerHTML on updated nodes suffers
	      // from worse whitespace behavior. Re-adding a node like this triggers
	      // the initial and more favorable whitespace behavior.
	      // TODO: What to do on a detached node?
	      if (node.parentNode) {
	        node.parentNode.replaceChild(node, node);
	      }
	
	      // We also implement a workaround for non-visible tags disappearing into
	      // thin air on IE8, this only happens if there is no visible text
	      // in-front of the non-visible tags. Piggyback on the whitespace fix
	      // and simply check if any non-visible tags appear in the source.
	      if (WHITESPACE_TEST.test(html) || html[0] === '<' && NONVISIBLE_TEST.test(html)) {
	        // Recover leading whitespace by temporarily prepending any character.
	        // \uFEFF has the potential advantage of being zero-width/invisible.
	        // UglifyJS drops U+FEFF chars when parsing, so use String.fromCharCode
	        // in hopes that this is preserved even if "\uFEFF" is transformed to
	        // the actual Unicode character (by Babel, for example).
	        // https://github.com/mishoo/UglifyJS2/blob/v2.4.20/lib/parse.js#L216
	        node.innerHTML = String.fromCharCode(0xFEFF) + html;
	
	        // deleteData leaves an empty `TextNode` which offsets the index of all
	        // children. Definitely want to avoid this.
	        var textNode = node.firstChild;
	        if (textNode.data.length === 1) {
	          node.removeChild(textNode);
	        } else {
	          textNode.deleteData(0, 1);
	        }
	      } else {
	        node.innerHTML = html;
	      }
	    };
	  }
	  testElement = null;
	}
	
	module.exports = setInnerHTML;

/***/ }),
/* 88 */
/***/ (function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	/* globals MSApp */
	
	'use strict';
	
	/**
	 * Create a function which has 'unsafe' privileges (required by windows8 apps)
	 */
	
	var createMicrosoftUnsafeLocalFunction = function createMicrosoftUnsafeLocalFunction(func) {
	  if (typeof MSApp !== 'undefined' && MSApp.execUnsafeLocalFunction) {
	    return function (arg0, arg1, arg2, arg3) {
	      MSApp.execUnsafeLocalFunction(function () {
	        return func(arg0, arg1, arg2, arg3);
	      });
	    };
	  } else {
	    return func;
	  }
	};
	
	module.exports = createMicrosoftUnsafeLocalFunction;

/***/ }),
/* 89 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var ExecutionEnvironment = __webpack_require__(52);
	var escapeTextContentForBrowser = __webpack_require__(90);
	var setInnerHTML = __webpack_require__(87);
	
	/**
	 * Set the textContent property of a node, ensuring that whitespace is preserved
	 * even in IE8. innerText is a poor substitute for textContent and, among many
	 * issues, inserts <br> instead of the literal newline chars. innerHTML behaves
	 * as it should.
	 *
	 * @param {DOMElement} node
	 * @param {string} text
	 * @internal
	 */
	var setTextContent = function setTextContent(node, text) {
	  if (text) {
	    var firstChild = node.firstChild;
	
	    if (firstChild && firstChild === node.lastChild && firstChild.nodeType === 3) {
	      firstChild.nodeValue = text;
	      return;
	    }
	  }
	  node.textContent = text;
	};
	
	if (ExecutionEnvironment.canUseDOM) {
	  if (!('textContent' in document.documentElement)) {
	    setTextContent = function setTextContent(node, text) {
	      if (node.nodeType === 3) {
	        node.nodeValue = text;
	        return;
	      }
	      setInnerHTML(node, escapeTextContentForBrowser(text));
	    };
	  }
	}
	
	module.exports = setTextContent;

/***/ }),
/* 90 */
/***/ (function(module, exports) {

	/**
	 * Copyright 2016-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * Based on the escape-html library, which is used under the MIT License below:
	 *
	 * Copyright (c) 2012-2013 TJ Holowaychuk
	 * Copyright (c) 2015 Andreas Lubbe
	 * Copyright (c) 2015 Tiancheng "Timothy" Gu
	 *
	 * Permission is hereby granted, free of charge, to any person obtaining
	 * a copy of this software and associated documentation files (the
	 * 'Software'), to deal in the Software without restriction, including
	 * without limitation the rights to use, copy, modify, merge, publish,
	 * distribute, sublicense, and/or sell copies of the Software, and to
	 * permit persons to whom the Software is furnished to do so, subject to
	 * the following conditions:
	 *
	 * The above copyright notice and this permission notice shall be
	 * included in all copies or substantial portions of the Software.
	 *
	 * THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,
	 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
	 * IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
	 * CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
	 * TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
	 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
	 *
	 */
	
	'use strict';
	
	// code copied and modified from escape-html
	/**
	 * Module variables.
	 * @private
	 */
	
	var matchHtmlRegExp = /["'&<>]/;
	
	/**
	 * Escape special characters in the given string of html.
	 *
	 * @param  {string} string The string to escape for inserting into HTML
	 * @return {string}
	 * @public
	 */
	
	function escapeHtml(string) {
	  var str = '' + string;
	  var match = matchHtmlRegExp.exec(str);
	
	  if (!match) {
	    return str;
	  }
	
	  var escape;
	  var html = '';
	  var index = 0;
	  var lastIndex = 0;
	
	  for (index = match.index; index < str.length; index++) {
	    switch (str.charCodeAt(index)) {
	      case 34:
	        // "
	        escape = '&quot;';
	        break;
	      case 38:
	        // &
	        escape = '&amp;';
	        break;
	      case 39:
	        // '
	        escape = '&#x27;'; // modified from escape-html; used to be '&#39'
	        break;
	      case 60:
	        // <
	        escape = '&lt;';
	        break;
	      case 62:
	        // >
	        escape = '&gt;';
	        break;
	      default:
	        continue;
	    }
	
	    if (lastIndex !== index) {
	      html += str.substring(lastIndex, index);
	    }
	
	    lastIndex = index + 1;
	    html += escape;
	  }
	
	  return lastIndex !== index ? html + str.substring(lastIndex, index) : html;
	}
	// end code copied and modified from escape-html
	
	
	/**
	 * Escapes text to prevent scripting attacks.
	 *
	 * @param {*} text Text value to escape.
	 * @return {string} An escaped string.
	 */
	function escapeTextContentForBrowser(text) {
	  if (typeof text === 'boolean' || typeof text === 'number') {
	    // this shortcircuit helps perf for types that we know will never have
	    // special characters, especially given that this function is used often
	    // for numeric dom ids.
	    return '' + text;
	  }
	  return escapeHtml(text);
	}
	
	module.exports = escapeTextContentForBrowser;

/***/ }),
/* 91 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var _prodInvariant = __webpack_require__(39);
	
	var DOMLazyTree = __webpack_require__(85);
	var ExecutionEnvironment = __webpack_require__(52);
	
	var createNodesFromMarkup = __webpack_require__(92);
	var emptyFunction = __webpack_require__(12);
	var invariant = __webpack_require__(8);
	
	var Danger = {
	
	  /**
	   * Replaces a node with a string of markup at its current position within its
	   * parent. The markup must render into a single root node.
	   *
	   * @param {DOMElement} oldChild Child node to replace.
	   * @param {string} markup Markup to render in place of the child node.
	   * @internal
	   */
	  dangerouslyReplaceNodeWithMarkup: function dangerouslyReplaceNodeWithMarkup(oldChild, markup) {
	    !ExecutionEnvironment.canUseDOM ? process.env.NODE_ENV !== 'production' ? invariant(false, 'dangerouslyReplaceNodeWithMarkup(...): Cannot render markup in a worker thread. Make sure `window` and `document` are available globally before requiring React when unit testing or use ReactDOMServer.renderToString() for server rendering.') : _prodInvariant('56') : void 0;
	    !markup ? process.env.NODE_ENV !== 'production' ? invariant(false, 'dangerouslyReplaceNodeWithMarkup(...): Missing markup.') : _prodInvariant('57') : void 0;
	    !(oldChild.nodeName !== 'HTML') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'dangerouslyReplaceNodeWithMarkup(...): Cannot replace markup of the <html> node. This is because browser quirks make this unreliable and/or slow. If you want to render to the root you must use server rendering. See ReactDOMServer.renderToString().') : _prodInvariant('58') : void 0;
	
	    if (typeof markup === 'string') {
	      var newChild = createNodesFromMarkup(markup, emptyFunction)[0];
	      oldChild.parentNode.replaceChild(newChild, oldChild);
	    } else {
	      DOMLazyTree.replaceChildWithTree(oldChild, markup);
	    }
	  }
	
	};
	
	module.exports = Danger;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ }),
/* 92 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';
	
	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @typechecks
	 */
	
	/*eslint-disable fb-www/unsafe-html*/
	
	var ExecutionEnvironment = __webpack_require__(52);
	
	var createArrayFromMixed = __webpack_require__(93);
	var getMarkupWrap = __webpack_require__(94);
	var invariant = __webpack_require__(8);
	
	/**
	 * Dummy container used to render all markup.
	 */
	var dummyNode = ExecutionEnvironment.canUseDOM ? document.createElement('div') : null;
	
	/**
	 * Pattern used by `getNodeName`.
	 */
	var nodeNamePattern = /^\s*<(\w+)/;
	
	/**
	 * Extracts the `nodeName` of the first element in a string of markup.
	 *
	 * @param {string} markup String of markup.
	 * @return {?string} Node name of the supplied markup.
	 */
	function getNodeName(markup) {
	  var nodeNameMatch = markup.match(nodeNamePattern);
	  return nodeNameMatch && nodeNameMatch[1].toLowerCase();
	}
	
	/**
	 * Creates an array containing the nodes rendered from the supplied markup. The
	 * optionally supplied `handleScript` function will be invoked once for each
	 * <script> element that is rendered. If no `handleScript` function is supplied,
	 * an exception is thrown if any <script> elements are rendered.
	 *
	 * @param {string} markup A string of valid HTML markup.
	 * @param {?function} handleScript Invoked once for each rendered <script>.
	 * @return {array<DOMElement|DOMTextNode>} An array of rendered nodes.
	 */
	function createNodesFromMarkup(markup, handleScript) {
	  var node = dummyNode;
	  !!!dummyNode ? process.env.NODE_ENV !== 'production' ? invariant(false, 'createNodesFromMarkup dummy not initialized') : invariant(false) : void 0;
	  var nodeName = getNodeName(markup);
	
	  var wrap = nodeName && getMarkupWrap(nodeName);
	  if (wrap) {
	    node.innerHTML = wrap[1] + markup + wrap[2];
	
	    var wrapDepth = wrap[0];
	    while (wrapDepth--) {
	      node = node.lastChild;
	    }
	  } else {
	    node.innerHTML = markup;
	  }
	
	  var scripts = node.getElementsByTagName('script');
	  if (scripts.length) {
	    !handleScript ? process.env.NODE_ENV !== 'production' ? invariant(false, 'createNodesFromMarkup(...): Unexpected <script> element rendered.') : invariant(false) : void 0;
	    createArrayFromMixed(scripts).forEach(handleScript);
	  }
	
	  var nodes = Array.from(node.childNodes);
	  while (node.lastChild) {
	    node.removeChild(node.lastChild);
	  }
	  return nodes;
	}
	
	module.exports = createNodesFromMarkup;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ }),
/* 93 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';
	
	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @typechecks
	 */
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
	
	var invariant = __webpack_require__(8);
	
	/**
	 * Convert array-like objects to arrays.
	 *
	 * This API assumes the caller knows the contents of the data type. For less
	 * well defined inputs use createArrayFromMixed.
	 *
	 * @param {object|function|filelist} obj
	 * @return {array}
	 */
	function toArray(obj) {
	  var length = obj.length;
	
	  // Some browsers builtin objects can report typeof 'function' (e.g. NodeList
	  // in old versions of Safari).
	  !(!Array.isArray(obj) && ((typeof obj === 'undefined' ? 'undefined' : _typeof(obj)) === 'object' || typeof obj === 'function')) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'toArray: Array-like object expected') : invariant(false) : void 0;
	
	  !(typeof length === 'number') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'toArray: Object needs a length property') : invariant(false) : void 0;
	
	  !(length === 0 || length - 1 in obj) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'toArray: Object should have keys for indices') : invariant(false) : void 0;
	
	  !(typeof obj.callee !== 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'toArray: Object can\'t be `arguments`. Use rest params ' + '(function(...args) {}) or Array.from() instead.') : invariant(false) : void 0;
	
	  // Old IE doesn't give collections access to hasOwnProperty. Assume inputs
	  // without method will throw during the slice call and skip straight to the
	  // fallback.
	  if (obj.hasOwnProperty) {
	    try {
	      return Array.prototype.slice.call(obj);
	    } catch (e) {
	      // IE < 9 does not support Array#slice on collections objects
	    }
	  }
	
	  // Fall back to copying key by key. This assumes all keys have a value,
	  // so will not preserve sparsely populated inputs.
	  var ret = Array(length);
	  for (var ii = 0; ii < length; ii++) {
	    ret[ii] = obj[ii];
	  }
	  return ret;
	}
	
	/**
	 * Perform a heuristic test to determine if an object is "array-like".
	 *
	 *   A monk asked Joshu, a Zen master, "Has a dog Buddha nature?"
	 *   Joshu replied: "Mu."
	 *
	 * This function determines if its argument has "array nature": it returns
	 * true if the argument is an actual array, an `arguments' object, or an
	 * HTMLCollection (e.g. node.childNodes or node.getElementsByTagName()).
	 *
	 * It will return false for other array-like objects like Filelist.
	 *
	 * @param {*} obj
	 * @return {boolean}
	 */
	function hasArrayNature(obj) {
	  return (
	    // not null/false
	    !!obj && (
	    // arrays are objects, NodeLists are functions in Safari
	    (typeof obj === 'undefined' ? 'undefined' : _typeof(obj)) == 'object' || typeof obj == 'function') &&
	    // quacks like an array
	    'length' in obj &&
	    // not window
	    !('setInterval' in obj) &&
	    // no DOM node should be considered an array-like
	    // a 'select' element has 'length' and 'item' properties on IE8
	    typeof obj.nodeType != 'number' && (
	    // a real array
	    Array.isArray(obj) ||
	    // arguments
	    'callee' in obj ||
	    // HTMLCollection/NodeList
	    'item' in obj)
	  );
	}
	
	/**
	 * Ensure that the argument is an array by wrapping it in an array if it is not.
	 * Creates a copy of the argument if it is already an array.
	 *
	 * This is mostly useful idiomatically:
	 *
	 *   var createArrayFromMixed = require('createArrayFromMixed');
	 *
	 *   function takesOneOrMoreThings(things) {
	 *     things = createArrayFromMixed(things);
	 *     ...
	 *   }
	 *
	 * This allows you to treat `things' as an array, but accept scalars in the API.
	 *
	 * If you need to convert an array-like object, like `arguments`, into an array
	 * use toArray instead.
	 *
	 * @param {*} obj
	 * @return {array}
	 */
	function createArrayFromMixed(obj) {
	  if (!hasArrayNature(obj)) {
	    return [obj];
	  } else if (Array.isArray(obj)) {
	    return obj.slice();
	  } else {
	    return toArray(obj);
	  }
	}
	
	module.exports = createArrayFromMixed;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ }),
/* 94 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';
	
	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	/*eslint-disable fb-www/unsafe-html */
	
	var ExecutionEnvironment = __webpack_require__(52);
	
	var invariant = __webpack_require__(8);
	
	/**
	 * Dummy container used to detect which wraps are necessary.
	 */
	var dummyNode = ExecutionEnvironment.canUseDOM ? document.createElement('div') : null;
	
	/**
	 * Some browsers cannot use `innerHTML` to render certain elements standalone,
	 * so we wrap them, render the wrapped nodes, then extract the desired node.
	 *
	 * In IE8, certain elements cannot render alone, so wrap all elements ('*').
	 */
	
	var shouldWrap = {};
	
	var selectWrap = [1, '<select multiple="true">', '</select>'];
	var tableWrap = [1, '<table>', '</table>'];
	var trWrap = [3, '<table><tbody><tr>', '</tr></tbody></table>'];
	
	var svgWrap = [1, '<svg xmlns="http://www.w3.org/2000/svg">', '</svg>'];
	
	var markupWrap = {
	  '*': [1, '?<div>', '</div>'],
	
	  'area': [1, '<map>', '</map>'],
	  'col': [2, '<table><tbody></tbody><colgroup>', '</colgroup></table>'],
	  'legend': [1, '<fieldset>', '</fieldset>'],
	  'param': [1, '<object>', '</object>'],
	  'tr': [2, '<table><tbody>', '</tbody></table>'],
	
	  'optgroup': selectWrap,
	  'option': selectWrap,
	
	  'caption': tableWrap,
	  'colgroup': tableWrap,
	  'tbody': tableWrap,
	  'tfoot': tableWrap,
	  'thead': tableWrap,
	
	  'td': trWrap,
	  'th': trWrap
	};
	
	// Initialize the SVG elements since we know they'll always need to be wrapped
	// consistently. If they are created inside a <div> they will be initialized in
	// the wrong namespace (and will not display).
	var svgElements = ['circle', 'clipPath', 'defs', 'ellipse', 'g', 'image', 'line', 'linearGradient', 'mask', 'path', 'pattern', 'polygon', 'polyline', 'radialGradient', 'rect', 'stop', 'text', 'tspan'];
	svgElements.forEach(function (nodeName) {
	  markupWrap[nodeName] = svgWrap;
	  shouldWrap[nodeName] = true;
	});
	
	/**
	 * Gets the markup wrap configuration for the supplied `nodeName`.
	 *
	 * NOTE: This lazily detects which wraps are necessary for the current browser.
	 *
	 * @param {string} nodeName Lowercase `nodeName`.
	 * @return {?array} Markup wrap configuration, if applicable.
	 */
	function getMarkupWrap(nodeName) {
	  !!!dummyNode ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Markup wrapping node not initialized') : invariant(false) : void 0;
	  if (!markupWrap.hasOwnProperty(nodeName)) {
	    nodeName = '*';
	  }
	  if (!shouldWrap.hasOwnProperty(nodeName)) {
	    if (nodeName === '*') {
	      dummyNode.innerHTML = '<link />';
	    } else {
	      dummyNode.innerHTML = '<' + nodeName + '></' + nodeName + '>';
	    }
	    shouldWrap[nodeName] = !dummyNode.firstChild;
	  }
	  return shouldWrap[nodeName] ? markupWrap[nodeName] : null;
	}
	
	module.exports = getMarkupWrap;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ }),
/* 95 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var DOMChildrenOperations = __webpack_require__(84);
	var ReactDOMComponentTree = __webpack_require__(38);
	
	/**
	 * Operations used to process updates to DOM nodes.
	 */
	var ReactDOMIDOperations = {
	
	  /**
	   * Updates a component's children by processing a series of updates.
	   *
	   * @param {array<object>} updates List of update configurations.
	   * @internal
	   */
	  dangerouslyProcessChildrenUpdates: function dangerouslyProcessChildrenUpdates(parentInst, updates) {
	    var node = ReactDOMComponentTree.getNodeFromInstance(parentInst);
	    DOMChildrenOperations.processUpdates(node, updates);
	  }
	};
	
	module.exports = ReactDOMIDOperations;

/***/ }),
/* 96 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	/* global hasOwnProperty:true */
	
	'use strict';
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
	
	var _prodInvariant = __webpack_require__(39),
	    _assign = __webpack_require__(4);
	
	var AutoFocusUtils = __webpack_require__(97);
	var CSSPropertyOperations = __webpack_require__(99);
	var DOMLazyTree = __webpack_require__(85);
	var DOMNamespaces = __webpack_require__(86);
	var DOMProperty = __webpack_require__(40);
	var DOMPropertyOperations = __webpack_require__(107);
	var EventPluginHub = __webpack_require__(46);
	var EventPluginRegistry = __webpack_require__(47);
	var ReactBrowserEventEmitter = __webpack_require__(109);
	var ReactDOMComponentFlags = __webpack_require__(41);
	var ReactDOMComponentTree = __webpack_require__(38);
	var ReactDOMInput = __webpack_require__(112);
	var ReactDOMOption = __webpack_require__(115);
	var ReactDOMSelect = __webpack_require__(116);
	var ReactDOMTextarea = __webpack_require__(117);
	var ReactInstrumentation = __webpack_require__(66);
	var ReactMultiChild = __webpack_require__(118);
	var ReactServerRenderingTransaction = __webpack_require__(137);
	
	var emptyFunction = __webpack_require__(12);
	var escapeTextContentForBrowser = __webpack_require__(90);
	var invariant = __webpack_require__(8);
	var isEventSupported = __webpack_require__(74);
	var shallowEqual = __webpack_require__(127);
	var validateDOMNesting = __webpack_require__(140);
	var warning = __webpack_require__(11);
	
	var Flags = ReactDOMComponentFlags;
	var deleteListener = EventPluginHub.deleteListener;
	var getNode = ReactDOMComponentTree.getNodeFromInstance;
	var listenTo = ReactBrowserEventEmitter.listenTo;
	var registrationNameModules = EventPluginRegistry.registrationNameModules;
	
	// For quickly matching children type, to test if can be treated as content.
	var CONTENT_TYPES = { 'string': true, 'number': true };
	
	var STYLE = 'style';
	var HTML = '__html';
	var RESERVED_PROPS = {
	  children: null,
	  dangerouslySetInnerHTML: null,
	  suppressContentEditableWarning: null
	};
	
	// Node type for document fragments (Node.DOCUMENT_FRAGMENT_NODE).
	var DOC_FRAGMENT_TYPE = 11;
	
	function getDeclarationErrorAddendum(internalInstance) {
	  if (internalInstance) {
	    var owner = internalInstance._currentElement._owner || null;
	    if (owner) {
	      var name = owner.getName();
	      if (name) {
	        return ' This DOM node was rendered by `' + name + '`.';
	      }
	    }
	  }
	  return '';
	}
	
	function friendlyStringify(obj) {
	  if ((typeof obj === 'undefined' ? 'undefined' : _typeof(obj)) === 'object') {
	    if (Array.isArray(obj)) {
	      return '[' + obj.map(friendlyStringify).join(', ') + ']';
	    } else {
	      var pairs = [];
	      for (var key in obj) {
	        if (Object.prototype.hasOwnProperty.call(obj, key)) {
	          var keyEscaped = /^[a-z$_][\w$_]*$/i.test(key) ? key : JSON.stringify(key);
	          pairs.push(keyEscaped + ': ' + friendlyStringify(obj[key]));
	        }
	      }
	      return '{' + pairs.join(', ') + '}';
	    }
	  } else if (typeof obj === 'string') {
	    return JSON.stringify(obj);
	  } else if (typeof obj === 'function') {
	    return '[function object]';
	  }
	  // Differs from JSON.stringify in that undefined because undefined and that
	  // inf and nan don't become null
	  return String(obj);
	}
	
	var styleMutationWarning = {};
	
	function checkAndWarnForMutatedStyle(style1, style2, component) {
	  if (style1 == null || style2 == null) {
	    return;
	  }
	  if (shallowEqual(style1, style2)) {
	    return;
	  }
	
	  var componentName = component._tag;
	  var owner = component._currentElement._owner;
	  var ownerName;
	  if (owner) {
	    ownerName = owner.getName();
	  }
	
	  var hash = ownerName + '|' + componentName;
	
	  if (styleMutationWarning.hasOwnProperty(hash)) {
	    return;
	  }
	
	  styleMutationWarning[hash] = true;
	
	  process.env.NODE_ENV !== 'production' ? warning(false, '`%s` was passed a style object that has previously been mutated. ' + 'Mutating `style` is deprecated. Consider cloning it beforehand. Check ' + 'the `render` %s. Previous style: %s. Mutated style: %s.', componentName, owner ? 'of `' + ownerName + '`' : 'using <' + componentName + '>', friendlyStringify(style1), friendlyStringify(style2)) : void 0;
	}
	
	/**
	 * @param {object} component
	 * @param {?object} props
	 */
	function assertValidProps(component, props) {
	  if (!props) {
	    return;
	  }
	  // Note the use of `==` which checks for null or undefined.
	  if (voidElementTags[component._tag]) {
	    !(props.children == null && props.dangerouslySetInnerHTML == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s is a void element tag and must neither have `children` nor use `dangerouslySetInnerHTML`.%s', component._tag, component._currentElement._owner ? ' Check the render method of ' + component._currentElement._owner.getName() + '.' : '') : _prodInvariant('137', component._tag, component._currentElement._owner ? ' Check the render method of ' + component._currentElement._owner.getName() + '.' : '') : void 0;
	  }
	  if (props.dangerouslySetInnerHTML != null) {
	    !(props.children == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Can only set one of `children` or `props.dangerouslySetInnerHTML`.') : _prodInvariant('60') : void 0;
	    !(_typeof(props.dangerouslySetInnerHTML) === 'object' && HTML in props.dangerouslySetInnerHTML) ? process.env.NODE_ENV !== 'production' ? invariant(false, '`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. Please visit https://fb.me/react-invariant-dangerously-set-inner-html for more information.') : _prodInvariant('61') : void 0;
	  }
	  if (process.env.NODE_ENV !== 'production') {
	    process.env.NODE_ENV !== 'production' ? warning(props.innerHTML == null, 'Directly setting property `innerHTML` is not permitted. ' + 'For more information, lookup documentation on `dangerouslySetInnerHTML`.') : void 0;
	    process.env.NODE_ENV !== 'production' ? warning(props.suppressContentEditableWarning || !props.contentEditable || props.children == null, 'A component is `contentEditable` and contains `children` managed by ' + 'React. It is now your responsibility to guarantee that none of ' + 'those nodes are unexpectedly modified or duplicated. This is ' + 'probably not intentional.') : void 0;
	    process.env.NODE_ENV !== 'production' ? warning(props.onFocusIn == null && props.onFocusOut == null, 'React uses onFocus and onBlur instead of onFocusIn and onFocusOut. ' + 'All React events are normalized to bubble, so onFocusIn and onFocusOut ' + 'are not needed/supported by React.') : void 0;
	  }
	  !(props.style == null || _typeof(props.style) === 'object') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'The `style` prop expects a mapping from style properties to values, not a string. For example, style={{marginRight: spacing + \'em\'}} when using JSX.%s', getDeclarationErrorAddendum(component)) : _prodInvariant('62', getDeclarationErrorAddendum(component)) : void 0;
	}
	
	function enqueuePutListener(inst, registrationName, listener, transaction) {
	  if (transaction instanceof ReactServerRenderingTransaction) {
	    return;
	  }
	  if (process.env.NODE_ENV !== 'production') {
	    // IE8 has no API for event capturing and the `onScroll` event doesn't
	    // bubble.
	    process.env.NODE_ENV !== 'production' ? warning(registrationName !== 'onScroll' || isEventSupported('scroll', true), 'This browser doesn\'t support the `onScroll` event') : void 0;
	  }
	  var containerInfo = inst._hostContainerInfo;
	  var isDocumentFragment = containerInfo._node && containerInfo._node.nodeType === DOC_FRAGMENT_TYPE;
	  var doc = isDocumentFragment ? containerInfo._node : containerInfo._ownerDocument;
	  listenTo(registrationName, doc);
	  transaction.getReactMountReady().enqueue(putListener, {
	    inst: inst,
	    registrationName: registrationName,
	    listener: listener
	  });
	}
	
	function putListener() {
	  var listenerToPut = this;
	  EventPluginHub.putListener(listenerToPut.inst, listenerToPut.registrationName, listenerToPut.listener);
	}
	
	function inputPostMount() {
	  var inst = this;
	  ReactDOMInput.postMountWrapper(inst);
	}
	
	function textareaPostMount() {
	  var inst = this;
	  ReactDOMTextarea.postMountWrapper(inst);
	}
	
	function optionPostMount() {
	  var inst = this;
	  ReactDOMOption.postMountWrapper(inst);
	}
	
	var setAndValidateContentChildDev = emptyFunction;
	if (process.env.NODE_ENV !== 'production') {
	  setAndValidateContentChildDev = function setAndValidateContentChildDev(content) {
	    var hasExistingContent = this._contentDebugID != null;
	    var debugID = this._debugID;
	    // This ID represents the inlined child that has no backing instance:
	    var contentDebugID = -debugID;
	
	    if (content == null) {
	      if (hasExistingContent) {
	        ReactInstrumentation.debugTool.onUnmountComponent(this._contentDebugID);
	      }
	      this._contentDebugID = null;
	      return;
	    }
	
	    validateDOMNesting(null, String(content), this, this._ancestorInfo);
	    this._contentDebugID = contentDebugID;
	    if (hasExistingContent) {
	      ReactInstrumentation.debugTool.onBeforeUpdateComponent(contentDebugID, content);
	      ReactInstrumentation.debugTool.onUpdateComponent(contentDebugID);
	    } else {
	      ReactInstrumentation.debugTool.onBeforeMountComponent(contentDebugID, content, debugID);
	      ReactInstrumentation.debugTool.onMountComponent(contentDebugID);
	      ReactInstrumentation.debugTool.onSetChildren(debugID, [contentDebugID]);
	    }
	  };
	}
	
	// There are so many media events, it makes sense to just
	// maintain a list rather than create a `trapBubbledEvent` for each
	var mediaEvents = {
	  topAbort: 'abort',
	  topCanPlay: 'canplay',
	  topCanPlayThrough: 'canplaythrough',
	  topDurationChange: 'durationchange',
	  topEmptied: 'emptied',
	  topEncrypted: 'encrypted',
	  topEnded: 'ended',
	  topError: 'error',
	  topLoadedData: 'loadeddata',
	  topLoadedMetadata: 'loadedmetadata',
	  topLoadStart: 'loadstart',
	  topPause: 'pause',
	  topPlay: 'play',
	  topPlaying: 'playing',
	  topProgress: 'progress',
	  topRateChange: 'ratechange',
	  topSeeked: 'seeked',
	  topSeeking: 'seeking',
	  topStalled: 'stalled',
	  topSuspend: 'suspend',
	  topTimeUpdate: 'timeupdate',
	  topVolumeChange: 'volumechange',
	  topWaiting: 'waiting'
	};
	
	function trapBubbledEventsLocal() {
	  var inst = this;
	  // If a component renders to null or if another component fatals and causes
	  // the state of the tree to be corrupted, `node` here can be null.
	  !inst._rootNodeID ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Must be mounted to trap events') : _prodInvariant('63') : void 0;
	  var node = getNode(inst);
	  !node ? process.env.NODE_ENV !== 'production' ? invariant(false, 'trapBubbledEvent(...): Requires node to be rendered.') : _prodInvariant('64') : void 0;
	
	  switch (inst._tag) {
	    case 'iframe':
	    case 'object':
	      inst._wrapperState.listeners = [ReactBrowserEventEmitter.trapBubbledEvent('topLoad', 'load', node)];
	      break;
	    case 'video':
	    case 'audio':
	
	      inst._wrapperState.listeners = [];
	      // Create listener for each media event
	      for (var event in mediaEvents) {
	        if (mediaEvents.hasOwnProperty(event)) {
	          inst._wrapperState.listeners.push(ReactBrowserEventEmitter.trapBubbledEvent(event, mediaEvents[event], node));
	        }
	      }
	      break;
	    case 'source':
	      inst._wrapperState.listeners = [ReactBrowserEventEmitter.trapBubbledEvent('topError', 'error', node)];
	      break;
	    case 'img':
	      inst._wrapperState.listeners = [ReactBrowserEventEmitter.trapBubbledEvent('topError', 'error', node), ReactBrowserEventEmitter.trapBubbledEvent('topLoad', 'load', node)];
	      break;
	    case 'form':
	      inst._wrapperState.listeners = [ReactBrowserEventEmitter.trapBubbledEvent('topReset', 'reset', node), ReactBrowserEventEmitter.trapBubbledEvent('topSubmit', 'submit', node)];
	      break;
	    case 'input':
	    case 'select':
	    case 'textarea':
	      inst._wrapperState.listeners = [ReactBrowserEventEmitter.trapBubbledEvent('topInvalid', 'invalid', node)];
	      break;
	  }
	}
	
	function postUpdateSelectWrapper() {
	  ReactDOMSelect.postUpdateWrapper(this);
	}
	
	// For HTML, certain tags should omit their close tag. We keep a whitelist for
	// those special-case tags.
	
	var omittedCloseTags = {
	  'area': true,
	  'base': true,
	  'br': true,
	  'col': true,
	  'embed': true,
	  'hr': true,
	  'img': true,
	  'input': true,
	  'keygen': true,
	  'link': true,
	  'meta': true,
	  'param': true,
	  'source': true,
	  'track': true,
	  'wbr': true
	};
	
	var newlineEatingTags = {
	  'listing': true,
	  'pre': true,
	  'textarea': true
	};
	
	// For HTML, certain tags cannot have children. This has the same purpose as
	// `omittedCloseTags` except that `menuitem` should still have its closing tag.
	
	var voidElementTags = _assign({
	  'menuitem': true
	}, omittedCloseTags);
	
	// We accept any tag to be rendered but since this gets injected into arbitrary
	// HTML, we want to make sure that it's a safe tag.
	// http://www.w3.org/TR/REC-xml/#NT-Name
	
	var VALID_TAG_REGEX = /^[a-zA-Z][a-zA-Z:_\.\-\d]*$/; // Simplified subset
	var validatedTagCache = {};
	var hasOwnProperty = {}.hasOwnProperty;
	
	function validateDangerousTag(tag) {
	  if (!hasOwnProperty.call(validatedTagCache, tag)) {
	    !VALID_TAG_REGEX.test(tag) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Invalid tag: %s', tag) : _prodInvariant('65', tag) : void 0;
	    validatedTagCache[tag] = true;
	  }
	}
	
	function isCustomComponent(tagName, props) {
	  return tagName.indexOf('-') >= 0 || props.is != null;
	}
	
	var globalIdCounter = 1;
	
	/**
	 * Creates a new React class that is idempotent and capable of containing other
	 * React components. It accepts event listeners and DOM properties that are
	 * valid according to `DOMProperty`.
	 *
	 *  - Event listeners: `onClick`, `onMouseDown`, etc.
	 *  - DOM properties: `className`, `name`, `title`, etc.
	 *
	 * The `style` property functions differently from the DOM API. It accepts an
	 * object mapping of style properties to values.
	 *
	 * @constructor ReactDOMComponent
	 * @extends ReactMultiChild
	 */
	function ReactDOMComponent(element) {
	  var tag = element.type;
	  validateDangerousTag(tag);
	  this._currentElement = element;
	  this._tag = tag.toLowerCase();
	  this._namespaceURI = null;
	  this._renderedChildren = null;
	  this._previousStyle = null;
	  this._previousStyleCopy = null;
	  this._hostNode = null;
	  this._hostParent = null;
	  this._rootNodeID = 0;
	  this._domID = 0;
	  this._hostContainerInfo = null;
	  this._wrapperState = null;
	  this._topLevelWrapper = null;
	  this._flags = 0;
	  if (process.env.NODE_ENV !== 'production') {
	    this._ancestorInfo = null;
	    setAndValidateContentChildDev.call(this, null);
	  }
	}
	
	ReactDOMComponent.displayName = 'ReactDOMComponent';
	
	ReactDOMComponent.Mixin = {
	
	  /**
	   * Generates root tag markup then recurses. This method has side effects and
	   * is not idempotent.
	   *
	   * @internal
	   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
	   * @param {?ReactDOMComponent} the parent component instance
	   * @param {?object} info about the host container
	   * @param {object} context
	   * @return {string} The computed markup.
	   */
	  mountComponent: function mountComponent(transaction, hostParent, hostContainerInfo, context) {
	    this._rootNodeID = globalIdCounter++;
	    this._domID = hostContainerInfo._idCounter++;
	    this._hostParent = hostParent;
	    this._hostContainerInfo = hostContainerInfo;
	
	    var props = this._currentElement.props;
	
	    switch (this._tag) {
	      case 'audio':
	      case 'form':
	      case 'iframe':
	      case 'img':
	      case 'link':
	      case 'object':
	      case 'source':
	      case 'video':
	        this._wrapperState = {
	          listeners: null
	        };
	        transaction.getReactMountReady().enqueue(trapBubbledEventsLocal, this);
	        break;
	      case 'input':
	        ReactDOMInput.mountWrapper(this, props, hostParent);
	        props = ReactDOMInput.getHostProps(this, props);
	        transaction.getReactMountReady().enqueue(trapBubbledEventsLocal, this);
	        break;
	      case 'option':
	        ReactDOMOption.mountWrapper(this, props, hostParent);
	        props = ReactDOMOption.getHostProps(this, props);
	        break;
	      case 'select':
	        ReactDOMSelect.mountWrapper(this, props, hostParent);
	        props = ReactDOMSelect.getHostProps(this, props);
	        transaction.getReactMountReady().enqueue(trapBubbledEventsLocal, this);
	        break;
	      case 'textarea':
	        ReactDOMTextarea.mountWrapper(this, props, hostParent);
	        props = ReactDOMTextarea.getHostProps(this, props);
	        transaction.getReactMountReady().enqueue(trapBubbledEventsLocal, this);
	        break;
	    }
	
	    assertValidProps(this, props);
	
	    // We create tags in the namespace of their parent container, except HTML
	    // tags get no namespace.
	    var namespaceURI;
	    var parentTag;
	    if (hostParent != null) {
	      namespaceURI = hostParent._namespaceURI;
	      parentTag = hostParent._tag;
	    } else if (hostContainerInfo._tag) {
	      namespaceURI = hostContainerInfo._namespaceURI;
	      parentTag = hostContainerInfo._tag;
	    }
	    if (namespaceURI == null || namespaceURI === DOMNamespaces.svg && parentTag === 'foreignobject') {
	      namespaceURI = DOMNamespaces.html;
	    }
	    if (namespaceURI === DOMNamespaces.html) {
	      if (this._tag === 'svg') {
	        namespaceURI = DOMNamespaces.svg;
	      } else if (this._tag === 'math') {
	        namespaceURI = DOMNamespaces.mathml;
	      }
	    }
	    this._namespaceURI = namespaceURI;
	
	    if (process.env.NODE_ENV !== 'production') {
	      var parentInfo;
	      if (hostParent != null) {
	        parentInfo = hostParent._ancestorInfo;
	      } else if (hostContainerInfo._tag) {
	        parentInfo = hostContainerInfo._ancestorInfo;
	      }
	      if (parentInfo) {
	        // parentInfo should always be present except for the top-level
	        // component when server rendering
	        validateDOMNesting(this._tag, null, this, parentInfo);
	      }
	      this._ancestorInfo = validateDOMNesting.updatedAncestorInfo(parentInfo, this._tag, this);
	    }
	
	    var mountImage;
	    if (transaction.useCreateElement) {
	      var ownerDocument = hostContainerInfo._ownerDocument;
	      var el;
	      if (namespaceURI === DOMNamespaces.html) {
	        if (this._tag === 'script') {
	          // Create the script via .innerHTML so its "parser-inserted" flag is
	          // set to true and it does not execute
	          var div = ownerDocument.createElement('div');
	          var type = this._currentElement.type;
	          div.innerHTML = '<' + type + '></' + type + '>';
	          el = div.removeChild(div.firstChild);
	        } else if (props.is) {
	          el = ownerDocument.createElement(this._currentElement.type, props.is);
	        } else {
	          // Separate else branch instead of using `props.is || undefined` above becuase of a Firefox bug.
	          // See discussion in https://github.com/facebook/react/pull/6896
	          // and discussion in https://bugzilla.mozilla.org/show_bug.cgi?id=1276240
	          el = ownerDocument.createElement(this._currentElement.type);
	        }
	      } else {
	        el = ownerDocument.createElementNS(namespaceURI, this._currentElement.type);
	      }
	      ReactDOMComponentTree.precacheNode(this, el);
	      this._flags |= Flags.hasCachedChildNodes;
	      if (!this._hostParent) {
	        DOMPropertyOperations.setAttributeForRoot(el);
	      }
	      this._updateDOMProperties(null, props, transaction);
	      var lazyTree = DOMLazyTree(el);
	      this._createInitialChildren(transaction, props, context, lazyTree);
	      mountImage = lazyTree;
	    } else {
	      var tagOpen = this._createOpenTagMarkupAndPutListeners(transaction, props);
	      var tagContent = this._createContentMarkup(transaction, props, context);
	      if (!tagContent && omittedCloseTags[this._tag]) {
	        mountImage = tagOpen + '/>';
	      } else {
	        mountImage = tagOpen + '>' + tagContent + '</' + this._currentElement.type + '>';
	      }
	    }
	
	    switch (this._tag) {
	      case 'input':
	        transaction.getReactMountReady().enqueue(inputPostMount, this);
	        if (props.autoFocus) {
	          transaction.getReactMountReady().enqueue(AutoFocusUtils.focusDOMComponent, this);
	        }
	        break;
	      case 'textarea':
	        transaction.getReactMountReady().enqueue(textareaPostMount, this);
	        if (props.autoFocus) {
	          transaction.getReactMountReady().enqueue(AutoFocusUtils.focusDOMComponent, this);
	        }
	        break;
	      case 'select':
	        if (props.autoFocus) {
	          transaction.getReactMountReady().enqueue(AutoFocusUtils.focusDOMComponent, this);
	        }
	        break;
	      case 'button':
	        if (props.autoFocus) {
	          transaction.getReactMountReady().enqueue(AutoFocusUtils.focusDOMComponent, this);
	        }
	        break;
	      case 'option':
	        transaction.getReactMountReady().enqueue(optionPostMount, this);
	        break;
	    }
	
	    return mountImage;
	  },
	
	  /**
	   * Creates markup for the open tag and all attributes.
	   *
	   * This method has side effects because events get registered.
	   *
	   * Iterating over object properties is faster than iterating over arrays.
	   * @see http://jsperf.com/obj-vs-arr-iteration
	   *
	   * @private
	   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
	   * @param {object} props
	   * @return {string} Markup of opening tag.
	   */
	  _createOpenTagMarkupAndPutListeners: function _createOpenTagMarkupAndPutListeners(transaction, props) {
	    var ret = '<' + this._currentElement.type;
	
	    for (var propKey in props) {
	      if (!props.hasOwnProperty(propKey)) {
	        continue;
	      }
	      var propValue = props[propKey];
	      if (propValue == null) {
	        continue;
	      }
	      if (registrationNameModules.hasOwnProperty(propKey)) {
	        if (propValue) {
	          enqueuePutListener(this, propKey, propValue, transaction);
	        }
	      } else {
	        if (propKey === STYLE) {
	          if (propValue) {
	            if (process.env.NODE_ENV !== 'production') {
	              // See `_updateDOMProperties`. style block
	              this._previousStyle = propValue;
	            }
	            propValue = this._previousStyleCopy = _assign({}, props.style);
	          }
	          propValue = CSSPropertyOperations.createMarkupForStyles(propValue, this);
	        }
	        var markup = null;
	        if (this._tag != null && isCustomComponent(this._tag, props)) {
	          if (!RESERVED_PROPS.hasOwnProperty(propKey)) {
	            markup = DOMPropertyOperations.createMarkupForCustomAttribute(propKey, propValue);
	          }
	        } else {
	          markup = DOMPropertyOperations.createMarkupForProperty(propKey, propValue);
	        }
	        if (markup) {
	          ret += ' ' + markup;
	        }
	      }
	    }
	
	    // For static pages, no need to put React ID and checksum. Saves lots of
	    // bytes.
	    if (transaction.renderToStaticMarkup) {
	      return ret;
	    }
	
	    if (!this._hostParent) {
	      ret += ' ' + DOMPropertyOperations.createMarkupForRoot();
	    }
	    ret += ' ' + DOMPropertyOperations.createMarkupForID(this._domID);
	    return ret;
	  },
	
	  /**
	   * Creates markup for the content between the tags.
	   *
	   * @private
	   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
	   * @param {object} props
	   * @param {object} context
	   * @return {string} Content markup.
	   */
	  _createContentMarkup: function _createContentMarkup(transaction, props, context) {
	    var ret = '';
	
	    // Intentional use of != to avoid catching zero/false.
	    var innerHTML = props.dangerouslySetInnerHTML;
	    if (innerHTML != null) {
	      if (innerHTML.__html != null) {
	        ret = innerHTML.__html;
	      }
	    } else {
	      var contentToUse = CONTENT_TYPES[_typeof(props.children)] ? props.children : null;
	      var childrenToUse = contentToUse != null ? null : props.children;
	      if (contentToUse != null) {
	        // TODO: Validate that text is allowed as a child of this node
	        ret = escapeTextContentForBrowser(contentToUse);
	        if (process.env.NODE_ENV !== 'production') {
	          setAndValidateContentChildDev.call(this, contentToUse);
	        }
	      } else if (childrenToUse != null) {
	        var mountImages = this.mountChildren(childrenToUse, transaction, context);
	        ret = mountImages.join('');
	      }
	    }
	    if (newlineEatingTags[this._tag] && ret.charAt(0) === '\n') {
	      // text/html ignores the first character in these tags if it's a newline
	      // Prefer to break application/xml over text/html (for now) by adding
	      // a newline specifically to get eaten by the parser. (Alternately for
	      // textareas, replacing "^\n" with "\r\n" doesn't get eaten, and the first
	      // \r is normalized out by HTMLTextAreaElement#value.)
	      // See: <http://www.w3.org/TR/html-polyglot/#newlines-in-textarea-and-pre>
	      // See: <http://www.w3.org/TR/html5/syntax.html#element-restrictions>
	      // See: <http://www.w3.org/TR/html5/syntax.html#newlines>
	      // See: Parsing of "textarea" "listing" and "pre" elements
	      //  from <http://www.w3.org/TR/html5/syntax.html#parsing-main-inbody>
	      return '\n' + ret;
	    } else {
	      return ret;
	    }
	  },
	
	  _createInitialChildren: function _createInitialChildren(transaction, props, context, lazyTree) {
	    // Intentional use of != to avoid catching zero/false.
	    var innerHTML = props.dangerouslySetInnerHTML;
	    if (innerHTML != null) {
	      if (innerHTML.__html != null) {
	        DOMLazyTree.queueHTML(lazyTree, innerHTML.__html);
	      }
	    } else {
	      var contentToUse = CONTENT_TYPES[_typeof(props.children)] ? props.children : null;
	      var childrenToUse = contentToUse != null ? null : props.children;
	      // TODO: Validate that text is allowed as a child of this node
	      if (contentToUse != null) {
	        // Avoid setting textContent when the text is empty. In IE11 setting
	        // textContent on a text area will cause the placeholder to not
	        // show within the textarea until it has been focused and blurred again.
	        // https://github.com/facebook/react/issues/6731#issuecomment-254874553
	        if (contentToUse !== '') {
	          if (process.env.NODE_ENV !== 'production') {
	            setAndValidateContentChildDev.call(this, contentToUse);
	          }
	          DOMLazyTree.queueText(lazyTree, contentToUse);
	        }
	      } else if (childrenToUse != null) {
	        var mountImages = this.mountChildren(childrenToUse, transaction, context);
	        for (var i = 0; i < mountImages.length; i++) {
	          DOMLazyTree.queueChild(lazyTree, mountImages[i]);
	        }
	      }
	    }
	  },
	
	  /**
	   * Receives a next element and updates the component.
	   *
	   * @internal
	   * @param {ReactElement} nextElement
	   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
	   * @param {object} context
	   */
	  receiveComponent: function receiveComponent(nextElement, transaction, context) {
	    var prevElement = this._currentElement;
	    this._currentElement = nextElement;
	    this.updateComponent(transaction, prevElement, nextElement, context);
	  },
	
	  /**
	   * Updates a DOM component after it has already been allocated and
	   * attached to the DOM. Reconciles the root DOM node, then recurses.
	   *
	   * @param {ReactReconcileTransaction} transaction
	   * @param {ReactElement} prevElement
	   * @param {ReactElement} nextElement
	   * @internal
	   * @overridable
	   */
	  updateComponent: function updateComponent(transaction, prevElement, nextElement, context) {
	    var lastProps = prevElement.props;
	    var nextProps = this._currentElement.props;
	
	    switch (this._tag) {
	      case 'input':
	        lastProps = ReactDOMInput.getHostProps(this, lastProps);
	        nextProps = ReactDOMInput.getHostProps(this, nextProps);
	        break;
	      case 'option':
	        lastProps = ReactDOMOption.getHostProps(this, lastProps);
	        nextProps = ReactDOMOption.getHostProps(this, nextProps);
	        break;
	      case 'select':
	        lastProps = ReactDOMSelect.getHostProps(this, lastProps);
	        nextProps = ReactDOMSelect.getHostProps(this, nextProps);
	        break;
	      case 'textarea':
	        lastProps = ReactDOMTextarea.getHostProps(this, lastProps);
	        nextProps = ReactDOMTextarea.getHostProps(this, nextProps);
	        break;
	    }
	
	    assertValidProps(this, nextProps);
	    this._updateDOMProperties(lastProps, nextProps, transaction);
	    this._updateDOMChildren(lastProps, nextProps, transaction, context);
	
	    switch (this._tag) {
	      case 'input':
	        // Update the wrapper around inputs *after* updating props. This has to
	        // happen after `_updateDOMProperties`. Otherwise HTML5 input validations
	        // raise warnings and prevent the new value from being assigned.
	        ReactDOMInput.updateWrapper(this);
	        break;
	      case 'textarea':
	        ReactDOMTextarea.updateWrapper(this);
	        break;
	      case 'select':
	        // <select> value update needs to occur after <option> children
	        // reconciliation
	        transaction.getReactMountReady().enqueue(postUpdateSelectWrapper, this);
	        break;
	    }
	  },
	
	  /**
	   * Reconciles the properties by detecting differences in property values and
	   * updating the DOM as necessary. This function is probably the single most
	   * critical path for performance optimization.
	   *
	   * TODO: Benchmark whether checking for changed values in memory actually
	   *       improves performance (especially statically positioned elements).
	   * TODO: Benchmark the effects of putting this at the top since 99% of props
	   *       do not change for a given reconciliation.
	   * TODO: Benchmark areas that can be improved with caching.
	   *
	   * @private
	   * @param {object} lastProps
	   * @param {object} nextProps
	   * @param {?DOMElement} node
	   */
	  _updateDOMProperties: function _updateDOMProperties(lastProps, nextProps, transaction) {
	    var propKey;
	    var styleName;
	    var styleUpdates;
	    for (propKey in lastProps) {
	      if (nextProps.hasOwnProperty(propKey) || !lastProps.hasOwnProperty(propKey) || lastProps[propKey] == null) {
	        continue;
	      }
	      if (propKey === STYLE) {
	        var lastStyle = this._previousStyleCopy;
	        for (styleName in lastStyle) {
	          if (lastStyle.hasOwnProperty(styleName)) {
	            styleUpdates = styleUpdates || {};
	            styleUpdates[styleName] = '';
	          }
	        }
	        this._previousStyleCopy = null;
	      } else if (registrationNameModules.hasOwnProperty(propKey)) {
	        if (lastProps[propKey]) {
	          // Only call deleteListener if there was a listener previously or
	          // else willDeleteListener gets called when there wasn't actually a
	          // listener (e.g., onClick={null})
	          deleteListener(this, propKey);
	        }
	      } else if (isCustomComponent(this._tag, lastProps)) {
	        if (!RESERVED_PROPS.hasOwnProperty(propKey)) {
	          DOMPropertyOperations.deleteValueForAttribute(getNode(this), propKey);
	        }
	      } else if (DOMProperty.properties[propKey] || DOMProperty.isCustomAttribute(propKey)) {
	        DOMPropertyOperations.deleteValueForProperty(getNode(this), propKey);
	      }
	    }
	    for (propKey in nextProps) {
	      var nextProp = nextProps[propKey];
	      var lastProp = propKey === STYLE ? this._previousStyleCopy : lastProps != null ? lastProps[propKey] : undefined;
	      if (!nextProps.hasOwnProperty(propKey) || nextProp === lastProp || nextProp == null && lastProp == null) {
	        continue;
	      }
	      if (propKey === STYLE) {
	        if (nextProp) {
	          if (process.env.NODE_ENV !== 'production') {
	            checkAndWarnForMutatedStyle(this._previousStyleCopy, this._previousStyle, this);
	            this._previousStyle = nextProp;
	          }
	          nextProp = this._previousStyleCopy = _assign({}, nextProp);
	        } else {
	          this._previousStyleCopy = null;
	        }
	        if (lastProp) {
	          // Unset styles on `lastProp` but not on `nextProp`.
	          for (styleName in lastProp) {
	            if (lastProp.hasOwnProperty(styleName) && (!nextProp || !nextProp.hasOwnProperty(styleName))) {
	              styleUpdates = styleUpdates || {};
	              styleUpdates[styleName] = '';
	            }
	          }
	          // Update styles that changed since `lastProp`.
	          for (styleName in nextProp) {
	            if (nextProp.hasOwnProperty(styleName) && lastProp[styleName] !== nextProp[styleName]) {
	              styleUpdates = styleUpdates || {};
	              styleUpdates[styleName] = nextProp[styleName];
	            }
	          }
	        } else {
	          // Relies on `updateStylesByID` not mutating `styleUpdates`.
	          styleUpdates = nextProp;
	        }
	      } else if (registrationNameModules.hasOwnProperty(propKey)) {
	        if (nextProp) {
	          enqueuePutListener(this, propKey, nextProp, transaction);
	        } else if (lastProp) {
	          deleteListener(this, propKey);
	        }
	      } else if (isCustomComponent(this._tag, nextProps)) {
	        if (!RESERVED_PROPS.hasOwnProperty(propKey)) {
	          DOMPropertyOperations.setValueForAttribute(getNode(this), propKey, nextProp);
	        }
	      } else if (DOMProperty.properties[propKey] || DOMProperty.isCustomAttribute(propKey)) {
	        var node = getNode(this);
	        // If we're updating to null or undefined, we should remove the property
	        // from the DOM node instead of inadvertently setting to a string. This
	        // brings us in line with the same behavior we have on initial render.
	        if (nextProp != null) {
	          DOMPropertyOperations.setValueForProperty(node, propKey, nextProp);
	        } else {
	          DOMPropertyOperations.deleteValueForProperty(node, propKey);
	        }
	      }
	    }
	    if (styleUpdates) {
	      CSSPropertyOperations.setValueForStyles(getNode(this), styleUpdates, this);
	    }
	  },
	
	  /**
	   * Reconciles the children with the various properties that affect the
	   * children content.
	   *
	   * @param {object} lastProps
	   * @param {object} nextProps
	   * @param {ReactReconcileTransaction} transaction
	   * @param {object} context
	   */
	  _updateDOMChildren: function _updateDOMChildren(lastProps, nextProps, transaction, context) {
	    var lastContent = CONTENT_TYPES[_typeof(lastProps.children)] ? lastProps.children : null;
	    var nextContent = CONTENT_TYPES[_typeof(nextProps.children)] ? nextProps.children : null;
	
	    var lastHtml = lastProps.dangerouslySetInnerHTML && lastProps.dangerouslySetInnerHTML.__html;
	    var nextHtml = nextProps.dangerouslySetInnerHTML && nextProps.dangerouslySetInnerHTML.__html;
	
	    // Note the use of `!=` which checks for null or undefined.
	    var lastChildren = lastContent != null ? null : lastProps.children;
	    var nextChildren = nextContent != null ? null : nextProps.children;
	
	    // If we're switching from children to content/html or vice versa, remove
	    // the old content
	    var lastHasContentOrHtml = lastContent != null || lastHtml != null;
	    var nextHasContentOrHtml = nextContent != null || nextHtml != null;
	    if (lastChildren != null && nextChildren == null) {
	      this.updateChildren(null, transaction, context);
	    } else if (lastHasContentOrHtml && !nextHasContentOrHtml) {
	      this.updateTextContent('');
	      if (process.env.NODE_ENV !== 'production') {
	        ReactInstrumentation.debugTool.onSetChildren(this._debugID, []);
	      }
	    }
	
	    if (nextContent != null) {
	      if (lastContent !== nextContent) {
	        this.updateTextContent('' + nextContent);
	        if (process.env.NODE_ENV !== 'production') {
	          setAndValidateContentChildDev.call(this, nextContent);
	        }
	      }
	    } else if (nextHtml != null) {
	      if (lastHtml !== nextHtml) {
	        this.updateMarkup('' + nextHtml);
	      }
	      if (process.env.NODE_ENV !== 'production') {
	        ReactInstrumentation.debugTool.onSetChildren(this._debugID, []);
	      }
	    } else if (nextChildren != null) {
	      if (process.env.NODE_ENV !== 'production') {
	        setAndValidateContentChildDev.call(this, null);
	      }
	
	      this.updateChildren(nextChildren, transaction, context);
	    }
	  },
	
	  getHostNode: function getHostNode() {
	    return getNode(this);
	  },
	
	  /**
	   * Destroys all event registrations for this instance. Does not remove from
	   * the DOM. That must be done by the parent.
	   *
	   * @internal
	   */
	  unmountComponent: function unmountComponent(safely) {
	    switch (this._tag) {
	      case 'audio':
	      case 'form':
	      case 'iframe':
	      case 'img':
	      case 'link':
	      case 'object':
	      case 'source':
	      case 'video':
	        var listeners = this._wrapperState.listeners;
	        if (listeners) {
	          for (var i = 0; i < listeners.length; i++) {
	            listeners[i].remove();
	          }
	        }
	        break;
	      case 'html':
	      case 'head':
	      case 'body':
	        /**
	         * Components like <html> <head> and <body> can't be removed or added
	         * easily in a cross-browser way, however it's valuable to be able to
	         * take advantage of React's reconciliation for styling and <title>
	         * management. So we just document it and throw in dangerous cases.
	         */
	         true ? process.env.NODE_ENV !== 'production' ? invariant(false, '<%s> tried to unmount. Because of cross-browser quirks it is impossible to unmount some top-level components (eg <html>, <head>, and <body>) reliably and efficiently. To fix this, have a single top-level component that never unmounts render these elements.', this._tag) : _prodInvariant('66', this._tag) : void 0;
	        break;
	    }
	
	    this.unmountChildren(safely);
	    ReactDOMComponentTree.uncacheNode(this);
	    EventPluginHub.deleteAllListeners(this);
	    this._rootNodeID = 0;
	    this._domID = 0;
	    this._wrapperState = null;
	
	    if (process.env.NODE_ENV !== 'production') {
	      setAndValidateContentChildDev.call(this, null);
	    }
	  },
	
	  getPublicInstance: function getPublicInstance() {
	    return getNode(this);
	  }
	
	};
	
	_assign(ReactDOMComponent.prototype, ReactDOMComponent.Mixin, ReactMultiChild.Mixin);
	
	module.exports = ReactDOMComponent;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ }),
/* 97 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var ReactDOMComponentTree = __webpack_require__(38);
	
	var focusNode = __webpack_require__(98);
	
	var AutoFocusUtils = {
	  focusDOMComponent: function focusDOMComponent() {
	    focusNode(ReactDOMComponentTree.getNodeFromInstance(this));
	  }
	};
	
	module.exports = AutoFocusUtils;

/***/ }),
/* 98 */
/***/ (function(module, exports) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	/**
	 * @param {DOMElement} node input/textarea to focus
	 */
	
	function focusNode(node) {
	  // IE8 can throw "Can't move focus to the control because it is invisible,
	  // not enabled, or of a type that does not accept the focus." for all kinds of
	  // reasons that are too expensive and fragile to test.
	  try {
	    node.focus();
	  } catch (e) {}
	}
	
	module.exports = focusNode;

/***/ }),
/* 99 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var CSSProperty = __webpack_require__(100);
	var ExecutionEnvironment = __webpack_require__(52);
	var ReactInstrumentation = __webpack_require__(66);
	
	var camelizeStyleName = __webpack_require__(101);
	var dangerousStyleValue = __webpack_require__(103);
	var hyphenateStyleName = __webpack_require__(104);
	var memoizeStringOnly = __webpack_require__(106);
	var warning = __webpack_require__(11);
	
	var processStyleName = memoizeStringOnly(function (styleName) {
	  return hyphenateStyleName(styleName);
	});
	
	var hasShorthandPropertyBug = false;
	var styleFloatAccessor = 'cssFloat';
	if (ExecutionEnvironment.canUseDOM) {
	  var tempStyle = document.createElement('div').style;
	  try {
	    // IE8 throws "Invalid argument." if resetting shorthand style properties.
	    tempStyle.font = '';
	  } catch (e) {
	    hasShorthandPropertyBug = true;
	  }
	  // IE8 only supports accessing cssFloat (standard) as styleFloat
	  if (document.documentElement.style.cssFloat === undefined) {
	    styleFloatAccessor = 'styleFloat';
	  }
	}
	
	if (process.env.NODE_ENV !== 'production') {
	  // 'msTransform' is correct, but the other prefixes should be capitalized
	  var badVendoredStyleNamePattern = /^(?:webkit|moz|o)[A-Z]/;
	
	  // style values shouldn't contain a semicolon
	  var badStyleValueWithSemicolonPattern = /;\s*$/;
	
	  var warnedStyleNames = {};
	  var warnedStyleValues = {};
	  var warnedForNaNValue = false;
	
	  var warnHyphenatedStyleName = function warnHyphenatedStyleName(name, owner) {
	    if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
	      return;
	    }
	
	    warnedStyleNames[name] = true;
	    process.env.NODE_ENV !== 'production' ? warning(false, 'Unsupported style property %s. Did you mean %s?%s', name, camelizeStyleName(name), checkRenderMessage(owner)) : void 0;
	  };
	
	  var warnBadVendoredStyleName = function warnBadVendoredStyleName(name, owner) {
	    if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
	      return;
	    }
	
	    warnedStyleNames[name] = true;
	    process.env.NODE_ENV !== 'production' ? warning(false, 'Unsupported vendor-prefixed style property %s. Did you mean %s?%s', name, name.charAt(0).toUpperCase() + name.slice(1), checkRenderMessage(owner)) : void 0;
	  };
	
	  var warnStyleValueWithSemicolon = function warnStyleValueWithSemicolon(name, value, owner) {
	    if (warnedStyleValues.hasOwnProperty(value) && warnedStyleValues[value]) {
	      return;
	    }
	
	    warnedStyleValues[value] = true;
	    process.env.NODE_ENV !== 'production' ? warning(false, 'Style property values shouldn\'t contain a semicolon.%s ' + 'Try "%s: %s" instead.', checkRenderMessage(owner), name, value.replace(badStyleValueWithSemicolonPattern, '')) : void 0;
	  };
	
	  var warnStyleValueIsNaN = function warnStyleValueIsNaN(name, value, owner) {
	    if (warnedForNaNValue) {
	      return;
	    }
	
	    warnedForNaNValue = true;
	    process.env.NODE_ENV !== 'production' ? warning(false, '`NaN` is an invalid value for the `%s` css style property.%s', name, checkRenderMessage(owner)) : void 0;
	  };
	
	  var checkRenderMessage = function checkRenderMessage(owner) {
	    if (owner) {
	      var name = owner.getName();
	      if (name) {
	        return ' Check the render method of `' + name + '`.';
	      }
	    }
	    return '';
	  };
	
	  /**
	   * @param {string} name
	   * @param {*} value
	   * @param {ReactDOMComponent} component
	   */
	  var warnValidStyle = function warnValidStyle(name, value, component) {
	    var owner;
	    if (component) {
	      owner = component._currentElement._owner;
	    }
	    if (name.indexOf('-') > -1) {
	      warnHyphenatedStyleName(name, owner);
	    } else if (badVendoredStyleNamePattern.test(name)) {
	      warnBadVendoredStyleName(name, owner);
	    } else if (badStyleValueWithSemicolonPattern.test(value)) {
	      warnStyleValueWithSemicolon(name, value, owner);
	    }
	
	    if (typeof value === 'number' && isNaN(value)) {
	      warnStyleValueIsNaN(name, value, owner);
	    }
	  };
	}
	
	/**
	 * Operations for dealing with CSS properties.
	 */
	var CSSPropertyOperations = {
	
	  /**
	   * Serializes a mapping of style properties for use as inline styles:
	   *
	   *   > createMarkupForStyles({width: '200px', height: 0})
	   *   "width:200px;height:0;"
	   *
	   * Undefined values are ignored so that declarative programming is easier.
	   * The result should be HTML-escaped before insertion into the DOM.
	   *
	   * @param {object} styles
	   * @param {ReactDOMComponent} component
	   * @return {?string}
	   */
	  createMarkupForStyles: function createMarkupForStyles(styles, component) {
	    var serialized = '';
	    for (var styleName in styles) {
	      if (!styles.hasOwnProperty(styleName)) {
	        continue;
	      }
	      var styleValue = styles[styleName];
	      if (process.env.NODE_ENV !== 'production') {
	        warnValidStyle(styleName, styleValue, component);
	      }
	      if (styleValue != null) {
	        serialized += processStyleName(styleName) + ':';
	        serialized += dangerousStyleValue(styleName, styleValue, component) + ';';
	      }
	    }
	    return serialized || null;
	  },
	
	  /**
	   * Sets the value for multiple styles on a node.  If a value is specified as
	   * '' (empty string), the corresponding style property will be unset.
	   *
	   * @param {DOMElement} node
	   * @param {object} styles
	   * @param {ReactDOMComponent} component
	   */
	  setValueForStyles: function setValueForStyles(node, styles, component) {
	    if (process.env.NODE_ENV !== 'production') {
	      ReactInstrumentation.debugTool.onHostOperation({
	        instanceID: component._debugID,
	        type: 'update styles',
	        payload: styles
	      });
	    }
	
	    var style = node.style;
	    for (var styleName in styles) {
	      if (!styles.hasOwnProperty(styleName)) {
	        continue;
	      }
	      if (process.env.NODE_ENV !== 'production') {
	        warnValidStyle(styleName, styles[styleName], component);
	      }
	      var styleValue = dangerousStyleValue(styleName, styles[styleName], component);
	      if (styleName === 'float' || styleName === 'cssFloat') {
	        styleName = styleFloatAccessor;
	      }
	      if (styleValue) {
	        style[styleName] = styleValue;
	      } else {
	        var expansion = hasShorthandPropertyBug && CSSProperty.shorthandPropertyExpansions[styleName];
	        if (expansion) {
	          // Shorthand property that IE8 won't like unsetting, so unset each
	          // component to placate it
	          for (var individualStyleName in expansion) {
	            style[individualStyleName] = '';
	          }
	        } else {
	          style[styleName] = '';
	        }
	      }
	    }
	  }
	
	};
	
	module.exports = CSSPropertyOperations;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ }),
/* 100 */
/***/ (function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	/**
	 * CSS properties which accept numbers but are not in units of "px".
	 */
	
	var isUnitlessNumber = {
	  animationIterationCount: true,
	  borderImageOutset: true,
	  borderImageSlice: true,
	  borderImageWidth: true,
	  boxFlex: true,
	  boxFlexGroup: true,
	  boxOrdinalGroup: true,
	  columnCount: true,
	  flex: true,
	  flexGrow: true,
	  flexPositive: true,
	  flexShrink: true,
	  flexNegative: true,
	  flexOrder: true,
	  gridRow: true,
	  gridColumn: true,
	  fontWeight: true,
	  lineClamp: true,
	  lineHeight: true,
	  opacity: true,
	  order: true,
	  orphans: true,
	  tabSize: true,
	  widows: true,
	  zIndex: true,
	  zoom: true,
	
	  // SVG-related properties
	  fillOpacity: true,
	  floodOpacity: true,
	  stopOpacity: true,
	  strokeDasharray: true,
	  strokeDashoffset: true,
	  strokeMiterlimit: true,
	  strokeOpacity: true,
	  strokeWidth: true
	};
	
	/**
	 * @param {string} prefix vendor-specific prefix, eg: Webkit
	 * @param {string} key style name, eg: transitionDuration
	 * @return {string} style name prefixed with `prefix`, properly camelCased, eg:
	 * WebkitTransitionDuration
	 */
	function prefixKey(prefix, key) {
	  return prefix + key.charAt(0).toUpperCase() + key.substring(1);
	}
	
	/**
	 * Support style names that may come passed in prefixed by adding permutations
	 * of vendor prefixes.
	 */
	var prefixes = ['Webkit', 'ms', 'Moz', 'O'];
	
	// Using Object.keys here, or else the vanilla for-in loop makes IE8 go into an
	// infinite loop, because it iterates over the newly added props too.
	Object.keys(isUnitlessNumber).forEach(function (prop) {
	  prefixes.forEach(function (prefix) {
	    isUnitlessNumber[prefixKey(prefix, prop)] = isUnitlessNumber[prop];
	  });
	});
	
	/**
	 * Most style properties can be unset by doing .style[prop] = '' but IE8
	 * doesn't like doing that with shorthand properties so for the properties that
	 * IE8 breaks on, which are listed here, we instead unset each of the
	 * individual properties. See http://bugs.jquery.com/ticket/12385.
	 * The 4-value 'clock' properties like margin, padding, border-width seem to
	 * behave without any problems. Curiously, list-style works too without any
	 * special prodding.
	 */
	var shorthandPropertyExpansions = {
	  background: {
	    backgroundAttachment: true,
	    backgroundColor: true,
	    backgroundImage: true,
	    backgroundPositionX: true,
	    backgroundPositionY: true,
	    backgroundRepeat: true
	  },
	  backgroundPosition: {
	    backgroundPositionX: true,
	    backgroundPositionY: true
	  },
	  border: {
	    borderWidth: true,
	    borderStyle: true,
	    borderColor: true
	  },
	  borderBottom: {
	    borderBottomWidth: true,
	    borderBottomStyle: true,
	    borderBottomColor: true
	  },
	  borderLeft: {
	    borderLeftWidth: true,
	    borderLeftStyle: true,
	    borderLeftColor: true
	  },
	  borderRight: {
	    borderRightWidth: true,
	    borderRightStyle: true,
	    borderRightColor: true
	  },
	  borderTop: {
	    borderTopWidth: true,
	    borderTopStyle: true,
	    borderTopColor: true
	  },
	  font: {
	    fontStyle: true,
	    fontVariant: true,
	    fontWeight: true,
	    fontSize: true,
	    lineHeight: true,
	    fontFamily: true
	  },
	  outline: {
	    outlineWidth: true,
	    outlineStyle: true,
	    outlineColor: true
	  }
	};
	
	var CSSProperty = {
	  isUnitlessNumber: isUnitlessNumber,
	  shorthandPropertyExpansions: shorthandPropertyExpansions
	};
	
	module.exports = CSSProperty;

/***/ }),
/* 101 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @typechecks
	 */
	
	'use strict';
	
	var camelize = __webpack_require__(102);
	
	var msPattern = /^-ms-/;
	
	/**
	 * Camelcases a hyphenated CSS property name, for example:
	 *
	 *   > camelizeStyleName('background-color')
	 *   < "backgroundColor"
	 *   > camelizeStyleName('-moz-transition')
	 *   < "MozTransition"
	 *   > camelizeStyleName('-ms-transition')
	 *   < "msTransition"
	 *
	 * As Andi Smith suggests
	 * (http://www.andismith.com/blog/2012/02/modernizr-prefixed/), an `-ms` prefix
	 * is converted to lowercase `ms`.
	 *
	 * @param {string} string
	 * @return {string}
	 */
	function camelizeStyleName(string) {
	  return camelize(string.replace(msPattern, 'ms-'));
	}
	
	module.exports = camelizeStyleName;

/***/ }),
/* 102 */
/***/ (function(module, exports) {

	"use strict";
	
	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @typechecks
	 */
	
	var _hyphenPattern = /-(.)/g;
	
	/**
	 * Camelcases a hyphenated string, for example:
	 *
	 *   > camelize('background-color')
	 *   < "backgroundColor"
	 *
	 * @param {string} string
	 * @return {string}
	 */
	function camelize(string) {
	  return string.replace(_hyphenPattern, function (_, character) {
	    return character.toUpperCase();
	  });
	}
	
	module.exports = camelize;

/***/ }),
/* 103 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var CSSProperty = __webpack_require__(100);
	var warning = __webpack_require__(11);
	
	var isUnitlessNumber = CSSProperty.isUnitlessNumber;
	var styleWarnings = {};
	
	/**
	 * Convert a value into the proper css writable value. The style name `name`
	 * should be logical (no hyphens), as specified
	 * in `CSSProperty.isUnitlessNumber`.
	 *
	 * @param {string} name CSS property name such as `topMargin`.
	 * @param {*} value CSS property value such as `10px`.
	 * @param {ReactDOMComponent} component
	 * @return {string} Normalized style value with dimensions applied.
	 */
	function dangerousStyleValue(name, value, component) {
	  // Note that we've removed escapeTextForBrowser() calls here since the
	  // whole string will be escaped when the attribute is injected into
	  // the markup. If you provide unsafe user data here they can inject
	  // arbitrary CSS which may be problematic (I couldn't repro this):
	  // https://www.owasp.org/index.php/XSS_Filter_Evasion_Cheat_Sheet
	  // http://www.thespanner.co.uk/2007/11/26/ultimate-xss-css-injection/
	  // This is not an XSS hole but instead a potential CSS injection issue
	  // which has lead to a greater discussion about how we're going to
	  // trust URLs moving forward. See #2115901
	
	  var isEmpty = value == null || typeof value === 'boolean' || value === '';
	  if (isEmpty) {
	    return '';
	  }
	
	  var isNonNumeric = isNaN(value);
	  if (isNonNumeric || value === 0 || isUnitlessNumber.hasOwnProperty(name) && isUnitlessNumber[name]) {
	    return '' + value; // cast to string
	  }
	
	  if (typeof value === 'string') {
	    if (process.env.NODE_ENV !== 'production') {
	      // Allow '0' to pass through without warning. 0 is already special and
	      // doesn't require units, so we don't need to warn about it.
	      if (component && value !== '0') {
	        var owner = component._currentElement._owner;
	        var ownerName = owner ? owner.getName() : null;
	        if (ownerName && !styleWarnings[ownerName]) {
	          styleWarnings[ownerName] = {};
	        }
	        var warned = false;
	        if (ownerName) {
	          var warnings = styleWarnings[ownerName];
	          warned = warnings[name];
	          if (!warned) {
	            warnings[name] = true;
	          }
	        }
	        if (!warned) {
	          process.env.NODE_ENV !== 'production' ? warning(false, 'a `%s` tag (owner: `%s`) was passed a numeric string value ' + 'for CSS property `%s` (value: `%s`) which will be treated ' + 'as a unitless number in a future version of React.', component._currentElement.type, ownerName || 'unknown', name, value) : void 0;
	        }
	      }
	    }
	    value = value.trim();
	  }
	  return value + 'px';
	}
	
	module.exports = dangerousStyleValue;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ }),
/* 104 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @typechecks
	 */
	
	'use strict';
	
	var hyphenate = __webpack_require__(105);
	
	var msPattern = /^ms-/;
	
	/**
	 * Hyphenates a camelcased CSS property name, for example:
	 *
	 *   > hyphenateStyleName('backgroundColor')
	 *   < "background-color"
	 *   > hyphenateStyleName('MozTransition')
	 *   < "-moz-transition"
	 *   > hyphenateStyleName('msTransition')
	 *   < "-ms-transition"
	 *
	 * As Modernizr suggests (http://modernizr.com/docs/#prefixed), an `ms` prefix
	 * is converted to `-ms-`.
	 *
	 * @param {string} string
	 * @return {string}
	 */
	function hyphenateStyleName(string) {
	  return hyphenate(string).replace(msPattern, '-ms-');
	}
	
	module.exports = hyphenateStyleName;

/***/ }),
/* 105 */
/***/ (function(module, exports) {

	'use strict';
	
	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @typechecks
	 */
	
	var _uppercasePattern = /([A-Z])/g;
	
	/**
	 * Hyphenates a camelcased string, for example:
	 *
	 *   > hyphenate('backgroundColor')
	 *   < "background-color"
	 *
	 * For CSS style names, use `hyphenateStyleName` instead which works properly
	 * with all vendor prefixes, including `ms`.
	 *
	 * @param {string} string
	 * @return {string}
	 */
	function hyphenate(string) {
	  return string.replace(_uppercasePattern, '-$1').toLowerCase();
	}
	
	module.exports = hyphenate;

/***/ }),
/* 106 */
/***/ (function(module, exports) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 * @typechecks static-only
	 */
	
	'use strict';
	
	/**
	 * Memoizes the return value of a function that accepts one string argument.
	 */
	
	function memoizeStringOnly(callback) {
	  var cache = {};
	  return function (string) {
	    if (!cache.hasOwnProperty(string)) {
	      cache[string] = callback.call(this, string);
	    }
	    return cache[string];
	  };
	}
	
	module.exports = memoizeStringOnly;

/***/ }),
/* 107 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var DOMProperty = __webpack_require__(40);
	var ReactDOMComponentTree = __webpack_require__(38);
	var ReactInstrumentation = __webpack_require__(66);
	
	var quoteAttributeValueForBrowser = __webpack_require__(108);
	var warning = __webpack_require__(11);
	
	var VALID_ATTRIBUTE_NAME_REGEX = new RegExp('^[' + DOMProperty.ATTRIBUTE_NAME_START_CHAR + '][' + DOMProperty.ATTRIBUTE_NAME_CHAR + ']*$');
	var illegalAttributeNameCache = {};
	var validatedAttributeNameCache = {};
	
	function isAttributeNameSafe(attributeName) {
	  if (validatedAttributeNameCache.hasOwnProperty(attributeName)) {
	    return true;
	  }
	  if (illegalAttributeNameCache.hasOwnProperty(attributeName)) {
	    return false;
	  }
	  if (VALID_ATTRIBUTE_NAME_REGEX.test(attributeName)) {
	    validatedAttributeNameCache[attributeName] = true;
	    return true;
	  }
	  illegalAttributeNameCache[attributeName] = true;
	  process.env.NODE_ENV !== 'production' ? warning(false, 'Invalid attribute name: `%s`', attributeName) : void 0;
	  return false;
	}
	
	function shouldIgnoreValue(propertyInfo, value) {
	  return value == null || propertyInfo.hasBooleanValue && !value || propertyInfo.hasNumericValue && isNaN(value) || propertyInfo.hasPositiveNumericValue && value < 1 || propertyInfo.hasOverloadedBooleanValue && value === false;
	}
	
	/**
	 * Operations for dealing with DOM properties.
	 */
	var DOMPropertyOperations = {
	
	  /**
	   * Creates markup for the ID property.
	   *
	   * @param {string} id Unescaped ID.
	   * @return {string} Markup string.
	   */
	  createMarkupForID: function createMarkupForID(id) {
	    return DOMProperty.ID_ATTRIBUTE_NAME + '=' + quoteAttributeValueForBrowser(id);
	  },
	
	  setAttributeForID: function setAttributeForID(node, id) {
	    node.setAttribute(DOMProperty.ID_ATTRIBUTE_NAME, id);
	  },
	
	  createMarkupForRoot: function createMarkupForRoot() {
	    return DOMProperty.ROOT_ATTRIBUTE_NAME + '=""';
	  },
	
	  setAttributeForRoot: function setAttributeForRoot(node) {
	    node.setAttribute(DOMProperty.ROOT_ATTRIBUTE_NAME, '');
	  },
	
	  /**
	   * Creates markup for a property.
	   *
	   * @param {string} name
	   * @param {*} value
	   * @return {?string} Markup string, or null if the property was invalid.
	   */
	  createMarkupForProperty: function createMarkupForProperty(name, value) {
	    var propertyInfo = DOMProperty.properties.hasOwnProperty(name) ? DOMProperty.properties[name] : null;
	    if (propertyInfo) {
	      if (shouldIgnoreValue(propertyInfo, value)) {
	        return '';
	      }
	      var attributeName = propertyInfo.attributeName;
	      if (propertyInfo.hasBooleanValue || propertyInfo.hasOverloadedBooleanValue && value === true) {
	        return attributeName + '=""';
	      }
	      return attributeName + '=' + quoteAttributeValueForBrowser(value);
	    } else if (DOMProperty.isCustomAttribute(name)) {
	      if (value == null) {
	        return '';
	      }
	      return name + '=' + quoteAttributeValueForBrowser(value);
	    }
	    return null;
	  },
	
	  /**
	   * Creates markup for a custom property.
	   *
	   * @param {string} name
	   * @param {*} value
	   * @return {string} Markup string, or empty string if the property was invalid.
	   */
	  createMarkupForCustomAttribute: function createMarkupForCustomAttribute(name, value) {
	    if (!isAttributeNameSafe(name) || value == null) {
	      return '';
	    }
	    return name + '=' + quoteAttributeValueForBrowser(value);
	  },
	
	  /**
	   * Sets the value for a property on a node.
	   *
	   * @param {DOMElement} node
	   * @param {string} name
	   * @param {*} value
	   */
	  setValueForProperty: function setValueForProperty(node, name, value) {
	    var propertyInfo = DOMProperty.properties.hasOwnProperty(name) ? DOMProperty.properties[name] : null;
	    if (propertyInfo) {
	      var mutationMethod = propertyInfo.mutationMethod;
	      if (mutationMethod) {
	        mutationMethod(node, value);
	      } else if (shouldIgnoreValue(propertyInfo, value)) {
	        this.deleteValueForProperty(node, name);
	        return;
	      } else if (propertyInfo.mustUseProperty) {
	        // Contrary to `setAttribute`, object properties are properly
	        // `toString`ed by IE8/9.
	        node[propertyInfo.propertyName] = value;
	      } else {
	        var attributeName = propertyInfo.attributeName;
	        var namespace = propertyInfo.attributeNamespace;
	        // `setAttribute` with objects becomes only `[object]` in IE8/9,
	        // ('' + value) makes it output the correct toString()-value.
	        if (namespace) {
	          node.setAttributeNS(namespace, attributeName, '' + value);
	        } else if (propertyInfo.hasBooleanValue || propertyInfo.hasOverloadedBooleanValue && value === true) {
	          node.setAttribute(attributeName, '');
	        } else {
	          node.setAttribute(attributeName, '' + value);
	        }
	      }
	    } else if (DOMProperty.isCustomAttribute(name)) {
	      DOMPropertyOperations.setValueForAttribute(node, name, value);
	      return;
	    }
	
	    if (process.env.NODE_ENV !== 'production') {
	      var payload = {};
	      payload[name] = value;
	      ReactInstrumentation.debugTool.onHostOperation({
	        instanceID: ReactDOMComponentTree.getInstanceFromNode(node)._debugID,
	        type: 'update attribute',
	        payload: payload
	      });
	    }
	  },
	
	  setValueForAttribute: function setValueForAttribute(node, name, value) {
	    if (!isAttributeNameSafe(name)) {
	      return;
	    }
	    if (value == null) {
	      node.removeAttribute(name);
	    } else {
	      node.setAttribute(name, '' + value);
	    }
	
	    if (process.env.NODE_ENV !== 'production') {
	      var payload = {};
	      payload[name] = value;
	      ReactInstrumentation.debugTool.onHostOperation({
	        instanceID: ReactDOMComponentTree.getInstanceFromNode(node)._debugID,
	        type: 'update attribute',
	        payload: payload
	      });
	    }
	  },
	
	  /**
	   * Deletes an attributes from a node.
	   *
	   * @param {DOMElement} node
	   * @param {string} name
	   */
	  deleteValueForAttribute: function deleteValueForAttribute(node, name) {
	    node.removeAttribute(name);
	    if (process.env.NODE_ENV !== 'production') {
	      ReactInstrumentation.debugTool.onHostOperation({
	        instanceID: ReactDOMComponentTree.getInstanceFromNode(node)._debugID,
	        type: 'remove attribute',
	        payload: name
	      });
	    }
	  },
	
	  /**
	   * Deletes the value for a property on a node.
	   *
	   * @param {DOMElement} node
	   * @param {string} name
	   */
	  deleteValueForProperty: function deleteValueForProperty(node, name) {
	    var propertyInfo = DOMProperty.properties.hasOwnProperty(name) ? DOMProperty.properties[name] : null;
	    if (propertyInfo) {
	      var mutationMethod = propertyInfo.mutationMethod;
	      if (mutationMethod) {
	        mutationMethod(node, undefined);
	      } else if (propertyInfo.mustUseProperty) {
	        var propName = propertyInfo.propertyName;
	        if (propertyInfo.hasBooleanValue) {
	          node[propName] = false;
	        } else {
	          node[propName] = '';
	        }
	      } else {
	        node.removeAttribute(propertyInfo.attributeName);
	      }
	    } else if (DOMProperty.isCustomAttribute(name)) {
	      node.removeAttribute(name);
	    }
	
	    if (process.env.NODE_ENV !== 'production') {
	      ReactInstrumentation.debugTool.onHostOperation({
	        instanceID: ReactDOMComponentTree.getInstanceFromNode(node)._debugID,
	        type: 'remove attribute',
	        payload: name
	      });
	    }
	  }
	
	};
	
	module.exports = DOMPropertyOperations;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ }),
/* 108 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var escapeTextContentForBrowser = __webpack_require__(90);
	
	/**
	 * Escapes attribute value to prevent scripting attacks.
	 *
	 * @param {*} value Value to escape.
	 * @return {string} An escaped string.
	 */
	function quoteAttributeValueForBrowser(value) {
	  return '"' + escapeTextContentForBrowser(value) + '"';
	}
	
	module.exports = quoteAttributeValueForBrowser;

/***/ }),
/* 109 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var _assign = __webpack_require__(4);
	
	var EventPluginRegistry = __webpack_require__(47);
	var ReactEventEmitterMixin = __webpack_require__(110);
	var ViewportMetrics = __webpack_require__(80);
	
	var getVendorPrefixedEventName = __webpack_require__(111);
	var isEventSupported = __webpack_require__(74);
	
	/**
	 * Summary of `ReactBrowserEventEmitter` event handling:
	 *
	 *  - Top-level delegation is used to trap most native browser events. This
	 *    may only occur in the main thread and is the responsibility of
	 *    ReactEventListener, which is injected and can therefore support pluggable
	 *    event sources. This is the only work that occurs in the main thread.
	 *
	 *  - We normalize and de-duplicate events to account for browser quirks. This
	 *    may be done in the worker thread.
	 *
	 *  - Forward these native events (with the associated top-level type used to
	 *    trap it) to `EventPluginHub`, which in turn will ask plugins if they want
	 *    to extract any synthetic events.
	 *
	 *  - The `EventPluginHub` will then process each event by annotating them with
	 *    "dispatches", a sequence of listeners and IDs that care about that event.
	 *
	 *  - The `EventPluginHub` then dispatches the events.
	 *
	 * Overview of React and the event system:
	 *
	 * +------------+    .
	 * |    DOM     |    .
	 * +------------+    .
	 *       |           .
	 *       v           .
	 * +------------+    .
	 * | ReactEvent |    .
	 * |  Listener  |    .
	 * +------------+    .                         +-----------+
	 *       |           .               +--------+|SimpleEvent|
	 *       |           .               |         |Plugin     |
	 * +-----|------+    .               v         +-----------+
	 * |     |      |    .    +--------------+                    +------------+
	 * |     +-----------.--->|EventPluginHub|                    |    Event   |
	 * |            |    .    |              |     +-----------+  | Propagators|
	 * | ReactEvent |    .    |              |     |TapEvent   |  |------------|
	 * |  Emitter   |    .    |              |<---+|Plugin     |  |other plugin|
	 * |            |    .    |              |     +-----------+  |  utilities |
	 * |     +-----------.--->|              |                    +------------+
	 * |     |      |    .    +--------------+
	 * +-----|------+    .                ^        +-----------+
	 *       |           .                |        |Enter/Leave|
	 *       +           .                +-------+|Plugin     |
	 * +-------------+   .                         +-----------+
	 * | application |   .
	 * |-------------|   .
	 * |             |   .
	 * |             |   .
	 * +-------------+   .
	 *                   .
	 *    React Core     .  General Purpose Event Plugin System
	 */
	
	var hasEventPageXY;
	var alreadyListeningTo = {};
	var isMonitoringScrollValue = false;
	var reactTopListenersCounter = 0;
	
	// For events like 'submit' which don't consistently bubble (which we trap at a
	// lower node than `document`), binding at `document` would cause duplicate
	// events so we don't include them here
	var topEventMapping = {
	  topAbort: 'abort',
	  topAnimationEnd: getVendorPrefixedEventName('animationend') || 'animationend',
	  topAnimationIteration: getVendorPrefixedEventName('animationiteration') || 'animationiteration',
	  topAnimationStart: getVendorPrefixedEventName('animationstart') || 'animationstart',
	  topBlur: 'blur',
	  topCanPlay: 'canplay',
	  topCanPlayThrough: 'canplaythrough',
	  topChange: 'change',
	  topClick: 'click',
	  topCompositionEnd: 'compositionend',
	  topCompositionStart: 'compositionstart',
	  topCompositionUpdate: 'compositionupdate',
	  topContextMenu: 'contextmenu',
	  topCopy: 'copy',
	  topCut: 'cut',
	  topDoubleClick: 'dblclick',
	  topDrag: 'drag',
	  topDragEnd: 'dragend',
	  topDragEnter: 'dragenter',
	  topDragExit: 'dragexit',
	  topDragLeave: 'dragleave',
	  topDragOver: 'dragover',
	  topDragStart: 'dragstart',
	  topDrop: 'drop',
	  topDurationChange: 'durationchange',
	  topEmptied: 'emptied',
	  topEncrypted: 'encrypted',
	  topEnded: 'ended',
	  topError: 'error',
	  topFocus: 'focus',
	  topInput: 'input',
	  topKeyDown: 'keydown',
	  topKeyPress: 'keypress',
	  topKeyUp: 'keyup',
	  topLoadedData: 'loadeddata',
	  topLoadedMetadata: 'loadedmetadata',
	  topLoadStart: 'loadstart',
	  topMouseDown: 'mousedown',
	  topMouseMove: 'mousemove',
	  topMouseOut: 'mouseout',
	  topMouseOver: 'mouseover',
	  topMouseUp: 'mouseup',
	  topPaste: 'paste',
	  topPause: 'pause',
	  topPlay: 'play',
	  topPlaying: 'playing',
	  topProgress: 'progress',
	  topRateChange: 'ratechange',
	  topScroll: 'scroll',
	  topSeeked: 'seeked',
	  topSeeking: 'seeking',
	  topSelectionChange: 'selectionchange',
	  topStalled: 'stalled',
	  topSuspend: 'suspend',
	  topTextInput: 'textInput',
	  topTimeUpdate: 'timeupdate',
	  topTouchCancel: 'touchcancel',
	  topTouchEnd: 'touchend',
	  topTouchMove: 'touchmove',
	  topTouchStart: 'touchstart',
	  topTransitionEnd: getVendorPrefixedEventName('transitionend') || 'transitionend',
	  topVolumeChange: 'volumechange',
	  topWaiting: 'waiting',
	  topWheel: 'wheel'
	};
	
	/**
	 * To ensure no conflicts with other potential React instances on the page
	 */
	var topListenersIDKey = '_reactListenersID' + String(Math.random()).slice(2);
	
	function getListeningForDocument(mountAt) {
	  // In IE8, `mountAt` is a host object and doesn't have `hasOwnProperty`
	  // directly.
	  if (!Object.prototype.hasOwnProperty.call(mountAt, topListenersIDKey)) {
	    mountAt[topListenersIDKey] = reactTopListenersCounter++;
	    alreadyListeningTo[mountAt[topListenersIDKey]] = {};
	  }
	  return alreadyListeningTo[mountAt[topListenersIDKey]];
	}
	
	/**
	 * `ReactBrowserEventEmitter` is used to attach top-level event listeners. For
	 * example:
	 *
	 *   EventPluginHub.putListener('myID', 'onClick', myFunction);
	 *
	 * This would allocate a "registration" of `('onClick', myFunction)` on 'myID'.
	 *
	 * @internal
	 */
	var ReactBrowserEventEmitter = _assign({}, ReactEventEmitterMixin, {
	
	  /**
	   * Injectable event backend
	   */
	  ReactEventListener: null,
	
	  injection: {
	    /**
	     * @param {object} ReactEventListener
	     */
	    injectReactEventListener: function injectReactEventListener(ReactEventListener) {
	      ReactEventListener.setHandleTopLevel(ReactBrowserEventEmitter.handleTopLevel);
	      ReactBrowserEventEmitter.ReactEventListener = ReactEventListener;
	    }
	  },
	
	  /**
	   * Sets whether or not any created callbacks should be enabled.
	   *
	   * @param {boolean} enabled True if callbacks should be enabled.
	   */
	  setEnabled: function setEnabled(enabled) {
	    if (ReactBrowserEventEmitter.ReactEventListener) {
	      ReactBrowserEventEmitter.ReactEventListener.setEnabled(enabled);
	    }
	  },
	
	  /**
	   * @return {boolean} True if callbacks are enabled.
	   */
	  isEnabled: function isEnabled() {
	    return !!(ReactBrowserEventEmitter.ReactEventListener && ReactBrowserEventEmitter.ReactEventListener.isEnabled());
	  },
	
	  /**
	   * We listen for bubbled touch events on the document object.
	   *
	   * Firefox v8.01 (and possibly others) exhibited strange behavior when
	   * mounting `onmousemove` events at some node that was not the document
	   * element. The symptoms were that if your mouse is not moving over something
	   * contained within that mount point (for example on the background) the
	   * top-level listeners for `onmousemove` won't be called. However, if you
	   * register the `mousemove` on the document object, then it will of course
	   * catch all `mousemove`s. This along with iOS quirks, justifies restricting
	   * top-level listeners to the document object only, at least for these
	   * movement types of events and possibly all events.
	   *
	   * @see http://www.quirksmode.org/blog/archives/2010/09/click_event_del.html
	   *
	   * Also, `keyup`/`keypress`/`keydown` do not bubble to the window on IE, but
	   * they bubble to document.
	   *
	   * @param {string} registrationName Name of listener (e.g. `onClick`).
	   * @param {object} contentDocumentHandle Document which owns the container
	   */
	  listenTo: function listenTo(registrationName, contentDocumentHandle) {
	    var mountAt = contentDocumentHandle;
	    var isListening = getListeningForDocument(mountAt);
	    var dependencies = EventPluginRegistry.registrationNameDependencies[registrationName];
	
	    for (var i = 0; i < dependencies.length; i++) {
	      var dependency = dependencies[i];
	      if (!(isListening.hasOwnProperty(dependency) && isListening[dependency])) {
	        if (dependency === 'topWheel') {
	          if (isEventSupported('wheel')) {
	            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent('topWheel', 'wheel', mountAt);
	          } else if (isEventSupported('mousewheel')) {
	            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent('topWheel', 'mousewheel', mountAt);
	          } else {
	            // Firefox needs to capture a different mouse scroll event.
	            // @see http://www.quirksmode.org/dom/events/tests/scroll.html
	            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent('topWheel', 'DOMMouseScroll', mountAt);
	          }
	        } else if (dependency === 'topScroll') {
	
	          if (isEventSupported('scroll', true)) {
	            ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent('topScroll', 'scroll', mountAt);
	          } else {
	            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent('topScroll', 'scroll', ReactBrowserEventEmitter.ReactEventListener.WINDOW_HANDLE);
	          }
	        } else if (dependency === 'topFocus' || dependency === 'topBlur') {
	
	          if (isEventSupported('focus', true)) {
	            ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent('topFocus', 'focus', mountAt);
	            ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent('topBlur', 'blur', mountAt);
	          } else if (isEventSupported('focusin')) {
	            // IE has `focusin` and `focusout` events which bubble.
	            // @see http://www.quirksmode.org/blog/archives/2008/04/delegating_the.html
	            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent('topFocus', 'focusin', mountAt);
	            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent('topBlur', 'focusout', mountAt);
	          }
	
	          // to make sure blur and focus event listeners are only attached once
	          isListening.topBlur = true;
	          isListening.topFocus = true;
	        } else if (topEventMapping.hasOwnProperty(dependency)) {
	          ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(dependency, topEventMapping[dependency], mountAt);
	        }
	
	        isListening[dependency] = true;
	      }
	    }
	  },
	
	  trapBubbledEvent: function trapBubbledEvent(topLevelType, handlerBaseName, handle) {
	    return ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(topLevelType, handlerBaseName, handle);
	  },
	
	  trapCapturedEvent: function trapCapturedEvent(topLevelType, handlerBaseName, handle) {
	    return ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent(topLevelType, handlerBaseName, handle);
	  },
	
	  /**
	   * Protect against document.createEvent() returning null
	   * Some popup blocker extensions appear to do this:
	   * https://github.com/facebook/react/issues/6887
	   */
	  supportsEventPageXY: function supportsEventPageXY() {
	    if (!document.createEvent) {
	      return false;
	    }
	    var ev = document.createEvent('MouseEvent');
	    return ev != null && 'pageX' in ev;
	  },
	
	  /**
	   * Listens to window scroll and resize events. We cache scroll values so that
	   * application code can access them without triggering reflows.
	   *
	   * ViewportMetrics is only used by SyntheticMouse/TouchEvent and only when
	   * pageX/pageY isn't supported (legacy browsers).
	   *
	   * NOTE: Scroll events do not bubble.
	   *
	   * @see http://www.quirksmode.org/dom/events/scroll.html
	   */
	  ensureScrollValueMonitoring: function ensureScrollValueMonitoring() {
	    if (hasEventPageXY === undefined) {
	      hasEventPageXY = ReactBrowserEventEmitter.supportsEventPageXY();
	    }
	    if (!hasEventPageXY && !isMonitoringScrollValue) {
	      var refresh = ViewportMetrics.refreshScrollValues;
	      ReactBrowserEventEmitter.ReactEventListener.monitorScrollValue(refresh);
	      isMonitoringScrollValue = true;
	    }
	  }
	
	});
	
	module.exports = ReactBrowserEventEmitter;

/***/ }),
/* 110 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var EventPluginHub = __webpack_require__(46);
	
	function runEventQueueInBatch(events) {
	  EventPluginHub.enqueueEvents(events);
	  EventPluginHub.processEventQueue(false);
	}
	
	var ReactEventEmitterMixin = {
	
	  /**
	   * Streams a fired top-level event to `EventPluginHub` where plugins have the
	   * opportunity to create `ReactEvent`s to be dispatched.
	   */
	  handleTopLevel: function handleTopLevel(topLevelType, targetInst, nativeEvent, nativeEventTarget) {
	    var events = EventPluginHub.extractEvents(topLevelType, targetInst, nativeEvent, nativeEventTarget);
	    runEventQueueInBatch(events);
	  }
	};
	
	module.exports = ReactEventEmitterMixin;

/***/ }),
/* 111 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var ExecutionEnvironment = __webpack_require__(52);
	
	/**
	 * Generate a mapping of standard vendor prefixes using the defined style property and event name.
	 *
	 * @param {string} styleProp
	 * @param {string} eventName
	 * @returns {object}
	 */
	function makePrefixMap(styleProp, eventName) {
	  var prefixes = {};
	
	  prefixes[styleProp.toLowerCase()] = eventName.toLowerCase();
	  prefixes['Webkit' + styleProp] = 'webkit' + eventName;
	  prefixes['Moz' + styleProp] = 'moz' + eventName;
	  prefixes['ms' + styleProp] = 'MS' + eventName;
	  prefixes['O' + styleProp] = 'o' + eventName.toLowerCase();
	
	  return prefixes;
	}
	
	/**
	 * A list of event names to a configurable list of vendor prefixes.
	 */
	var vendorPrefixes = {
	  animationend: makePrefixMap('Animation', 'AnimationEnd'),
	  animationiteration: makePrefixMap('Animation', 'AnimationIteration'),
	  animationstart: makePrefixMap('Animation', 'AnimationStart'),
	  transitionend: makePrefixMap('Transition', 'TransitionEnd')
	};
	
	/**
	 * Event names that have already been detected and prefixed (if applicable).
	 */
	var prefixedEventNames = {};
	
	/**
	 * Element to check for prefixes on.
	 */
	var style = {};
	
	/**
	 * Bootstrap if a DOM exists.
	 */
	if (ExecutionEnvironment.canUseDOM) {
	  style = document.createElement('div').style;
	
	  // On some platforms, in particular some releases of Android 4.x,
	  // the un-prefixed "animation" and "transition" properties are defined on the
	  // style object but the events that fire will still be prefixed, so we need
	  // to check if the un-prefixed events are usable, and if not remove them from the map.
	  if (!('AnimationEvent' in window)) {
	    delete vendorPrefixes.animationend.animation;
	    delete vendorPrefixes.animationiteration.animation;
	    delete vendorPrefixes.animationstart.animation;
	  }
	
	  // Same as above
	  if (!('TransitionEvent' in window)) {
	    delete vendorPrefixes.transitionend.transition;
	  }
	}
	
	/**
	 * Attempts to determine the correct vendor prefixed event name.
	 *
	 * @param {string} eventName
	 * @returns {string}
	 */
	function getVendorPrefixedEventName(eventName) {
	  if (prefixedEventNames[eventName]) {
	    return prefixedEventNames[eventName];
	  } else if (!vendorPrefixes[eventName]) {
	    return eventName;
	  }
	
	  var prefixMap = vendorPrefixes[eventName];
	
	  for (var styleProp in prefixMap) {
	    if (prefixMap.hasOwnProperty(styleProp) && styleProp in style) {
	      return prefixedEventNames[eventName] = prefixMap[styleProp];
	    }
	  }
	
	  return '';
	}
	
	module.exports = getVendorPrefixedEventName;

/***/ }),
/* 112 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var _prodInvariant = __webpack_require__(39),
	    _assign = __webpack_require__(4);
	
	var DOMPropertyOperations = __webpack_require__(107);
	var LinkedValueUtils = __webpack_require__(113);
	var ReactDOMComponentTree = __webpack_require__(38);
	var ReactUpdates = __webpack_require__(60);
	
	var invariant = __webpack_require__(8);
	var warning = __webpack_require__(11);
	
	var didWarnValueLink = false;
	var didWarnCheckedLink = false;
	var didWarnValueDefaultValue = false;
	var didWarnCheckedDefaultChecked = false;
	var didWarnControlledToUncontrolled = false;
	var didWarnUncontrolledToControlled = false;
	
	function forceUpdateIfMounted() {
	  if (this._rootNodeID) {
	    // DOM component is still mounted; update
	    ReactDOMInput.updateWrapper(this);
	  }
	}
	
	function isControlled(props) {
	  var usesChecked = props.type === 'checkbox' || props.type === 'radio';
	  return usesChecked ? props.checked != null : props.value != null;
	}
	
	/**
	 * Implements an <input> host component that allows setting these optional
	 * props: `checked`, `value`, `defaultChecked`, and `defaultValue`.
	 *
	 * If `checked` or `value` are not supplied (or null/undefined), user actions
	 * that affect the checked state or value will trigger updates to the element.
	 *
	 * If they are supplied (and not null/undefined), the rendered element will not
	 * trigger updates to the element. Instead, the props must change in order for
	 * the rendered element to be updated.
	 *
	 * The rendered element will be initialized as unchecked (or `defaultChecked`)
	 * with an empty value (or `defaultValue`).
	 *
	 * @see http://www.w3.org/TR/2012/WD-html5-20121025/the-input-element.html
	 */
	var ReactDOMInput = {
	  getHostProps: function getHostProps(inst, props) {
	    var value = LinkedValueUtils.getValue(props);
	    var checked = LinkedValueUtils.getChecked(props);
	
	    var hostProps = _assign({
	      // Make sure we set .type before any other properties (setting .value
	      // before .type means .value is lost in IE11 and below)
	      type: undefined,
	      // Make sure we set .step before .value (setting .value before .step
	      // means .value is rounded on mount, based upon step precision)
	      step: undefined,
	      // Make sure we set .min & .max before .value (to ensure proper order
	      // in corner cases such as min or max deriving from value, e.g. Issue #7170)
	      min: undefined,
	      max: undefined
	    }, props, {
	      defaultChecked: undefined,
	      defaultValue: undefined,
	      value: value != null ? value : inst._wrapperState.initialValue,
	      checked: checked != null ? checked : inst._wrapperState.initialChecked,
	      onChange: inst._wrapperState.onChange
	    });
	
	    return hostProps;
	  },
	
	  mountWrapper: function mountWrapper(inst, props) {
	    if (process.env.NODE_ENV !== 'production') {
	      LinkedValueUtils.checkPropTypes('input', props, inst._currentElement._owner);
	
	      var owner = inst._currentElement._owner;
	
	      if (props.valueLink !== undefined && !didWarnValueLink) {
	        process.env.NODE_ENV !== 'production' ? warning(false, '`valueLink` prop on `input` is deprecated; set `value` and `onChange` instead.') : void 0;
	        didWarnValueLink = true;
	      }
	      if (props.checkedLink !== undefined && !didWarnCheckedLink) {
	        process.env.NODE_ENV !== 'production' ? warning(false, '`checkedLink` prop on `input` is deprecated; set `value` and `onChange` instead.') : void 0;
	        didWarnCheckedLink = true;
	      }
	      if (props.checked !== undefined && props.defaultChecked !== undefined && !didWarnCheckedDefaultChecked) {
	        process.env.NODE_ENV !== 'production' ? warning(false, '%s contains an input of type %s with both checked and defaultChecked props. ' + 'Input elements must be either controlled or uncontrolled ' + '(specify either the checked prop, or the defaultChecked prop, but not ' + 'both). Decide between using a controlled or uncontrolled input ' + 'element and remove one of these props. More info: ' + 'https://fb.me/react-controlled-components', owner && owner.getName() || 'A component', props.type) : void 0;
	        didWarnCheckedDefaultChecked = true;
	      }
	      if (props.value !== undefined && props.defaultValue !== undefined && !didWarnValueDefaultValue) {
	        process.env.NODE_ENV !== 'production' ? warning(false, '%s contains an input of type %s with both value and defaultValue props. ' + 'Input elements must be either controlled or uncontrolled ' + '(specify either the value prop, or the defaultValue prop, but not ' + 'both). Decide between using a controlled or uncontrolled input ' + 'element and remove one of these props. More info: ' + 'https://fb.me/react-controlled-components', owner && owner.getName() || 'A component', props.type) : void 0;
	        didWarnValueDefaultValue = true;
	      }
	    }
	
	    var defaultValue = props.defaultValue;
	    inst._wrapperState = {
	      initialChecked: props.checked != null ? props.checked : props.defaultChecked,
	      initialValue: props.value != null ? props.value : defaultValue,
	      listeners: null,
	      onChange: _handleChange.bind(inst),
	      controlled: isControlled(props)
	    };
	  },
	
	  updateWrapper: function updateWrapper(inst) {
	    var props = inst._currentElement.props;
	
	    if (process.env.NODE_ENV !== 'production') {
	      var controlled = isControlled(props);
	      var owner = inst._currentElement._owner;
	
	      if (!inst._wrapperState.controlled && controlled && !didWarnUncontrolledToControlled) {
	        process.env.NODE_ENV !== 'production' ? warning(false, '%s is changing an uncontrolled input of type %s to be controlled. ' + 'Input elements should not switch from uncontrolled to controlled (or vice versa). ' + 'Decide between using a controlled or uncontrolled input ' + 'element for the lifetime of the component. More info: https://fb.me/react-controlled-components', owner && owner.getName() || 'A component', props.type) : void 0;
	        didWarnUncontrolledToControlled = true;
	      }
	      if (inst._wrapperState.controlled && !controlled && !didWarnControlledToUncontrolled) {
	        process.env.NODE_ENV !== 'production' ? warning(false, '%s is changing a controlled input of type %s to be uncontrolled. ' + 'Input elements should not switch from controlled to uncontrolled (or vice versa). ' + 'Decide between using a controlled or uncontrolled input ' + 'element for the lifetime of the component. More info: https://fb.me/react-controlled-components', owner && owner.getName() || 'A component', props.type) : void 0;
	        didWarnControlledToUncontrolled = true;
	      }
	    }
	
	    // TODO: Shouldn't this be getChecked(props)?
	    var checked = props.checked;
	    if (checked != null) {
	      DOMPropertyOperations.setValueForProperty(ReactDOMComponentTree.getNodeFromInstance(inst), 'checked', checked || false);
	    }
	
	    var node = ReactDOMComponentTree.getNodeFromInstance(inst);
	    var value = LinkedValueUtils.getValue(props);
	    if (value != null) {
	      if (value === 0 && node.value === '') {
	        node.value = '0';
	        // Note: IE9 reports a number inputs as 'text', so check props instead.
	      } else if (props.type === 'number') {
	        // Simulate `input.valueAsNumber`. IE9 does not support it
	        var valueAsNumber = parseFloat(node.value, 10) || 0;
	
	        // eslint-disable-next-line
	        if (value != valueAsNumber) {
	          // Cast `value` to a string to ensure the value is set correctly. While
	          // browsers typically do this as necessary, jsdom doesn't.
	          node.value = '' + value;
	        }
	        // eslint-disable-next-line
	      } else if (value != node.value) {
	        // Cast `value` to a string to ensure the value is set correctly. While
	        // browsers typically do this as necessary, jsdom doesn't.
	        node.value = '' + value;
	      }
	    } else {
	      if (props.value == null && props.defaultValue != null) {
	        // In Chrome, assigning defaultValue to certain input types triggers input validation.
	        // For number inputs, the display value loses trailing decimal points. For email inputs,
	        // Chrome raises "The specified value <x> is not a valid email address".
	        //
	        // Here we check to see if the defaultValue has actually changed, avoiding these problems
	        // when the user is inputting text
	        //
	        // https://github.com/facebook/react/issues/7253
	        if (node.defaultValue !== '' + props.defaultValue) {
	          node.defaultValue = '' + props.defaultValue;
	        }
	      }
	      if (props.checked == null && props.defaultChecked != null) {
	        node.defaultChecked = !!props.defaultChecked;
	      }
	    }
	  },
	
	  postMountWrapper: function postMountWrapper(inst) {
	    var props = inst._currentElement.props;
	
	    // This is in postMount because we need access to the DOM node, which is not
	    // available until after the component has mounted.
	    var node = ReactDOMComponentTree.getNodeFromInstance(inst);
	
	    // Detach value from defaultValue. We won't do anything if we're working on
	    // submit or reset inputs as those values & defaultValues are linked. They
	    // are not resetable nodes so this operation doesn't matter and actually
	    // removes browser-default values (eg "Submit Query") when no value is
	    // provided.
	
	    switch (props.type) {
	      case 'submit':
	      case 'reset':
	        break;
	      case 'color':
	      case 'date':
	      case 'datetime':
	      case 'datetime-local':
	      case 'month':
	      case 'time':
	      case 'week':
	        // This fixes the no-show issue on iOS Safari and Android Chrome:
	        // https://github.com/facebook/react/issues/7233
	        node.value = '';
	        node.value = node.defaultValue;
	        break;
	      default:
	        node.value = node.value;
	        break;
	    }
	
	    // Normally, we'd just do `node.checked = node.checked` upon initial mount, less this bug
	    // this is needed to work around a chrome bug where setting defaultChecked
	    // will sometimes influence the value of checked (even after detachment).
	    // Reference: https://bugs.chromium.org/p/chromium/issues/detail?id=608416
	    // We need to temporarily unset name to avoid disrupting radio button groups.
	    var name = node.name;
	    if (name !== '') {
	      node.name = '';
	    }
	    node.defaultChecked = !node.defaultChecked;
	    node.defaultChecked = !node.defaultChecked;
	    if (name !== '') {
	      node.name = name;
	    }
	  }
	};
	
	function _handleChange(event) {
	  var props = this._currentElement.props;
	
	  var returnValue = LinkedValueUtils.executeOnChange(props, event);
	
	  // Here we use asap to wait until all updates have propagated, which
	  // is important when using controlled components within layers:
	  // https://github.com/facebook/react/issues/1698
	  ReactUpdates.asap(forceUpdateIfMounted, this);
	
	  var name = props.name;
	  if (props.type === 'radio' && name != null) {
	    var rootNode = ReactDOMComponentTree.getNodeFromInstance(this);
	    var queryRoot = rootNode;
	
	    while (queryRoot.parentNode) {
	      queryRoot = queryRoot.parentNode;
	    }
	
	    // If `rootNode.form` was non-null, then we could try `form.elements`,
	    // but that sometimes behaves strangely in IE8. We could also try using
	    // `form.getElementsByName`, but that will only return direct children
	    // and won't include inputs that use the HTML5 `form=` attribute. Since
	    // the input might not even be in a form, let's just use the global
	    // `querySelectorAll` to ensure we don't miss anything.
	    var group = queryRoot.querySelectorAll('input[name=' + JSON.stringify('' + name) + '][type="radio"]');
	
	    for (var i = 0; i < group.length; i++) {
	      var otherNode = group[i];
	      if (otherNode === rootNode || otherNode.form !== rootNode.form) {
	        continue;
	      }
	      // This will throw if radio buttons rendered by different copies of React
	      // and the same name are rendered into the same form (same as #1939).
	      // That's probably okay; we don't support it just as we don't support
	      // mixing React radio buttons with non-React ones.
	      var otherInstance = ReactDOMComponentTree.getInstanceFromNode(otherNode);
	      !otherInstance ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactDOMInput: Mixing React and non-React radio inputs with the same `name` is not supported.') : _prodInvariant('90') : void 0;
	      // If this is a controlled radio button group, forcing the input that
	      // was previously checked to update will cause it to be come re-checked
	      // as appropriate.
	      ReactUpdates.asap(forceUpdateIfMounted, otherInstance);
	    }
	  }
	
	  return returnValue;
	}
	
	module.exports = ReactDOMInput;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ }),
/* 113 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var _prodInvariant = __webpack_require__(39);
	
	var ReactPropTypesSecret = __webpack_require__(114);
	var propTypesFactory = __webpack_require__(30);
	
	var React = __webpack_require__(2);
	var PropTypes = propTypesFactory(React.isValidElement);
	
	var invariant = __webpack_require__(8);
	var warning = __webpack_require__(11);
	
	var hasReadOnlyValue = {
	  'button': true,
	  'checkbox': true,
	  'image': true,
	  'hidden': true,
	  'radio': true,
	  'reset': true,
	  'submit': true
	};
	
	function _assertSingleLink(inputProps) {
	  !(inputProps.checkedLink == null || inputProps.valueLink == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Cannot provide a checkedLink and a valueLink. If you want to use checkedLink, you probably don\'t want to use valueLink and vice versa.') : _prodInvariant('87') : void 0;
	}
	function _assertValueLink(inputProps) {
	  _assertSingleLink(inputProps);
	  !(inputProps.value == null && inputProps.onChange == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Cannot provide a valueLink and a value or onChange event. If you want to use value or onChange, you probably don\'t want to use valueLink.') : _prodInvariant('88') : void 0;
	}
	
	function _assertCheckedLink(inputProps) {
	  _assertSingleLink(inputProps);
	  !(inputProps.checked == null && inputProps.onChange == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Cannot provide a checkedLink and a checked property or onChange event. If you want to use checked or onChange, you probably don\'t want to use checkedLink') : _prodInvariant('89') : void 0;
	}
	
	var propTypes = {
	  value: function value(props, propName, componentName) {
	    if (!props[propName] || hasReadOnlyValue[props.type] || props.onChange || props.readOnly || props.disabled) {
	      return null;
	    }
	    return new Error('You provided a `value` prop to a form field without an ' + '`onChange` handler. This will render a read-only field. If ' + 'the field should be mutable use `defaultValue`. Otherwise, ' + 'set either `onChange` or `readOnly`.');
	  },
	  checked: function checked(props, propName, componentName) {
	    if (!props[propName] || props.onChange || props.readOnly || props.disabled) {
	      return null;
	    }
	    return new Error('You provided a `checked` prop to a form field without an ' + '`onChange` handler. This will render a read-only field. If ' + 'the field should be mutable use `defaultChecked`. Otherwise, ' + 'set either `onChange` or `readOnly`.');
	  },
	  onChange: PropTypes.func
	};
	
	var loggedTypeFailures = {};
	function getDeclarationErrorAddendum(owner) {
	  if (owner) {
	    var name = owner.getName();
	    if (name) {
	      return ' Check the render method of `' + name + '`.';
	    }
	  }
	  return '';
	}
	
	/**
	 * Provide a linked `value` attribute for controlled forms. You should not use
	 * this outside of the ReactDOM controlled form components.
	 */
	var LinkedValueUtils = {
	  checkPropTypes: function checkPropTypes(tagName, props, owner) {
	    for (var propName in propTypes) {
	      if (propTypes.hasOwnProperty(propName)) {
	        var error = propTypes[propName](props, propName, tagName, 'prop', null, ReactPropTypesSecret);
	      }
	      if (error instanceof Error && !(error.message in loggedTypeFailures)) {
	        // Only monitor this failure once because there tends to be a lot of the
	        // same error.
	        loggedTypeFailures[error.message] = true;
	
	        var addendum = getDeclarationErrorAddendum(owner);
	        process.env.NODE_ENV !== 'production' ? warning(false, 'Failed form propType: %s%s', error.message, addendum) : void 0;
	      }
	    }
	  },
	
	  /**
	   * @param {object} inputProps Props for form component
	   * @return {*} current value of the input either from value prop or link.
	   */
	  getValue: function getValue(inputProps) {
	    if (inputProps.valueLink) {
	      _assertValueLink(inputProps);
	      return inputProps.valueLink.value;
	    }
	    return inputProps.value;
	  },
	
	  /**
	   * @param {object} inputProps Props for form component
	   * @return {*} current checked status of the input either from checked prop
	   *             or link.
	   */
	  getChecked: function getChecked(inputProps) {
	    if (inputProps.checkedLink) {
	      _assertCheckedLink(inputProps);
	      return inputProps.checkedLink.value;
	    }
	    return inputProps.checked;
	  },
	
	  /**
	   * @param {object} inputProps Props for form component
	   * @param {SyntheticEvent} event change event to handle
	   */
	  executeOnChange: function executeOnChange(inputProps, event) {
	    if (inputProps.valueLink) {
	      _assertValueLink(inputProps);
	      return inputProps.valueLink.requestChange(event.target.value);
	    } else if (inputProps.checkedLink) {
	      _assertCheckedLink(inputProps);
	      return inputProps.checkedLink.requestChange(event.target.checked);
	    } else if (inputProps.onChange) {
	      return inputProps.onChange.call(undefined, event);
	    }
	  }
	};
	
	module.exports = LinkedValueUtils;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ }),
/* 114 */
/***/ (function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */
	
	'use strict';
	
	var ReactPropTypesSecret = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';
	
	module.exports = ReactPropTypesSecret;

/***/ }),
/* 115 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var _assign = __webpack_require__(4);
	
	var React = __webpack_require__(2);
	var ReactDOMComponentTree = __webpack_require__(38);
	var ReactDOMSelect = __webpack_require__(116);
	
	var warning = __webpack_require__(11);
	var didWarnInvalidOptionChildren = false;
	
	function flattenChildren(children) {
	  var content = '';
	
	  // Flatten children and warn if they aren't strings or numbers;
	  // invalid types are ignored.
	  React.Children.forEach(children, function (child) {
	    if (child == null) {
	      return;
	    }
	    if (typeof child === 'string' || typeof child === 'number') {
	      content += child;
	    } else if (!didWarnInvalidOptionChildren) {
	      didWarnInvalidOptionChildren = true;
	      process.env.NODE_ENV !== 'production' ? warning(false, 'Only strings and numbers are supported as <option> children.') : void 0;
	    }
	  });
	
	  return content;
	}
	
	/**
	 * Implements an <option> host component that warns when `selected` is set.
	 */
	var ReactDOMOption = {
	  mountWrapper: function mountWrapper(inst, props, hostParent) {
	    // TODO (yungsters): Remove support for `selected` in <option>.
	    if (process.env.NODE_ENV !== 'production') {
	      process.env.NODE_ENV !== 'production' ? warning(props.selected == null, 'Use the `defaultValue` or `value` props on <select> instead of ' + 'setting `selected` on <option>.') : void 0;
	    }
	
	    // Look up whether this option is 'selected'
	    var selectValue = null;
	    if (hostParent != null) {
	      var selectParent = hostParent;
	
	      if (selectParent._tag === 'optgroup') {
	        selectParent = selectParent._hostParent;
	      }
	
	      if (selectParent != null && selectParent._tag === 'select') {
	        selectValue = ReactDOMSelect.getSelectValueContext(selectParent);
	      }
	    }
	
	    // If the value is null (e.g., no specified value or after initial mount)
	    // or missing (e.g., for <datalist>), we don't change props.selected
	    var selected = null;
	    if (selectValue != null) {
	      var value;
	      if (props.value != null) {
	        value = props.value + '';
	      } else {
	        value = flattenChildren(props.children);
	      }
	      selected = false;
	      if (Array.isArray(selectValue)) {
	        // multiple
	        for (var i = 0; i < selectValue.length; i++) {
	          if ('' + selectValue[i] === value) {
	            selected = true;
	            break;
	          }
	        }
	      } else {
	        selected = '' + selectValue === value;
	      }
	    }
	
	    inst._wrapperState = { selected: selected };
	  },
	
	  postMountWrapper: function postMountWrapper(inst) {
	    // value="" should make a value attribute (#6219)
	    var props = inst._currentElement.props;
	    if (props.value != null) {
	      var node = ReactDOMComponentTree.getNodeFromInstance(inst);
	      node.setAttribute('value', props.value);
	    }
	  },
	
	  getHostProps: function getHostProps(inst, props) {
	    var hostProps = _assign({ selected: undefined, children: undefined }, props);
	
	    // Read state only from initial mount because <select> updates value
	    // manually; we need the initial state only for server rendering
	    if (inst._wrapperState.selected != null) {
	      hostProps.selected = inst._wrapperState.selected;
	    }
	
	    var content = flattenChildren(props.children);
	
	    if (content) {
	      hostProps.children = content;
	    }
	
	    return hostProps;
	  }
	
	};
	
	module.exports = ReactDOMOption;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ }),
/* 116 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var _assign = __webpack_require__(4);
	
	var LinkedValueUtils = __webpack_require__(113);
	var ReactDOMComponentTree = __webpack_require__(38);
	var ReactUpdates = __webpack_require__(60);
	
	var warning = __webpack_require__(11);
	
	var didWarnValueLink = false;
	var didWarnValueDefaultValue = false;
	
	function updateOptionsIfPendingUpdateAndMounted() {
	  if (this._rootNodeID && this._wrapperState.pendingUpdate) {
	    this._wrapperState.pendingUpdate = false;
	
	    var props = this._currentElement.props;
	    var value = LinkedValueUtils.getValue(props);
	
	    if (value != null) {
	      updateOptions(this, Boolean(props.multiple), value);
	    }
	  }
	}
	
	function getDeclarationErrorAddendum(owner) {
	  if (owner) {
	    var name = owner.getName();
	    if (name) {
	      return ' Check the render method of `' + name + '`.';
	    }
	  }
	  return '';
	}
	
	var valuePropNames = ['value', 'defaultValue'];
	
	/**
	 * Validation function for `value` and `defaultValue`.
	 * @private
	 */
	function checkSelectPropTypes(inst, props) {
	  var owner = inst._currentElement._owner;
	  LinkedValueUtils.checkPropTypes('select', props, owner);
	
	  if (props.valueLink !== undefined && !didWarnValueLink) {
	    process.env.NODE_ENV !== 'production' ? warning(false, '`valueLink` prop on `select` is deprecated; set `value` and `onChange` instead.') : void 0;
	    didWarnValueLink = true;
	  }
	
	  for (var i = 0; i < valuePropNames.length; i++) {
	    var propName = valuePropNames[i];
	    if (props[propName] == null) {
	      continue;
	    }
	    var isArray = Array.isArray(props[propName]);
	    if (props.multiple && !isArray) {
	      process.env.NODE_ENV !== 'production' ? warning(false, 'The `%s` prop supplied to <select> must be an array if ' + '`multiple` is true.%s', propName, getDeclarationErrorAddendum(owner)) : void 0;
	    } else if (!props.multiple && isArray) {
	      process.env.NODE_ENV !== 'production' ? warning(false, 'The `%s` prop supplied to <select> must be a scalar ' + 'value if `multiple` is false.%s', propName, getDeclarationErrorAddendum(owner)) : void 0;
	    }
	  }
	}
	
	/**
	 * @param {ReactDOMComponent} inst
	 * @param {boolean} multiple
	 * @param {*} propValue A stringable (with `multiple`, a list of stringables).
	 * @private
	 */
	function updateOptions(inst, multiple, propValue) {
	  var selectedValue, i;
	  var options = ReactDOMComponentTree.getNodeFromInstance(inst).options;
	
	  if (multiple) {
	    selectedValue = {};
	    for (i = 0; i < propValue.length; i++) {
	      selectedValue['' + propValue[i]] = true;
	    }
	    for (i = 0; i < options.length; i++) {
	      var selected = selectedValue.hasOwnProperty(options[i].value);
	      if (options[i].selected !== selected) {
	        options[i].selected = selected;
	      }
	    }
	  } else {
	    // Do not set `select.value` as exact behavior isn't consistent across all
	    // browsers for all cases.
	    selectedValue = '' + propValue;
	    for (i = 0; i < options.length; i++) {
	      if (options[i].value === selectedValue) {
	        options[i].selected = true;
	        return;
	      }
	    }
	    if (options.length) {
	      options[0].selected = true;
	    }
	  }
	}
	
	/**
	 * Implements a <select> host component that allows optionally setting the
	 * props `value` and `defaultValue`. If `multiple` is false, the prop must be a
	 * stringable. If `multiple` is true, the prop must be an array of stringables.
	 *
	 * If `value` is not supplied (or null/undefined), user actions that change the
	 * selected option will trigger updates to the rendered options.
	 *
	 * If it is supplied (and not null/undefined), the rendered options will not
	 * update in response to user actions. Instead, the `value` prop must change in
	 * order for the rendered options to update.
	 *
	 * If `defaultValue` is provided, any options with the supplied values will be
	 * selected.
	 */
	var ReactDOMSelect = {
	  getHostProps: function getHostProps(inst, props) {
	    return _assign({}, props, {
	      onChange: inst._wrapperState.onChange,
	      value: undefined
	    });
	  },
	
	  mountWrapper: function mountWrapper(inst, props) {
	    if (process.env.NODE_ENV !== 'production') {
	      checkSelectPropTypes(inst, props);
	    }
	
	    var value = LinkedValueUtils.getValue(props);
	    inst._wrapperState = {
	      pendingUpdate: false,
	      initialValue: value != null ? value : props.defaultValue,
	      listeners: null,
	      onChange: _handleChange.bind(inst),
	      wasMultiple: Boolean(props.multiple)
	    };
	
	    if (props.value !== undefined && props.defaultValue !== undefined && !didWarnValueDefaultValue) {
	      process.env.NODE_ENV !== 'production' ? warning(false, 'Select elements must be either controlled or uncontrolled ' + '(specify either the value prop, or the defaultValue prop, but not ' + 'both). Decide between using a controlled or uncontrolled select ' + 'element and remove one of these props. More info: ' + 'https://fb.me/react-controlled-components') : void 0;
	      didWarnValueDefaultValue = true;
	    }
	  },
	
	  getSelectValueContext: function getSelectValueContext(inst) {
	    // ReactDOMOption looks at this initial value so the initial generated
	    // markup has correct `selected` attributes
	    return inst._wrapperState.initialValue;
	  },
	
	  postUpdateWrapper: function postUpdateWrapper(inst) {
	    var props = inst._currentElement.props;
	
	    // After the initial mount, we control selected-ness manually so don't pass
	    // this value down
	    inst._wrapperState.initialValue = undefined;
	
	    var wasMultiple = inst._wrapperState.wasMultiple;
	    inst._wrapperState.wasMultiple = Boolean(props.multiple);
	
	    var value = LinkedValueUtils.getValue(props);
	    if (value != null) {
	      inst._wrapperState.pendingUpdate = false;
	      updateOptions(inst, Boolean(props.multiple), value);
	    } else if (wasMultiple !== Boolean(props.multiple)) {
	      // For simplicity, reapply `defaultValue` if `multiple` is toggled.
	      if (props.defaultValue != null) {
	        updateOptions(inst, Boolean(props.multiple), props.defaultValue);
	      } else {
	        // Revert the select back to its default unselected state.
	        updateOptions(inst, Boolean(props.multiple), props.multiple ? [] : '');
	      }
	    }
	  }
	};
	
	function _handleChange(event) {
	  var props = this._currentElement.props;
	  var returnValue = LinkedValueUtils.executeOnChange(props, event);
	
	  if (this._rootNodeID) {
	    this._wrapperState.pendingUpdate = true;
	  }
	  ReactUpdates.asap(updateOptionsIfPendingUpdateAndMounted, this);
	  return returnValue;
	}
	
	module.exports = ReactDOMSelect;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ }),
/* 117 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var _prodInvariant = __webpack_require__(39),
	    _assign = __webpack_require__(4);
	
	var LinkedValueUtils = __webpack_require__(113);
	var ReactDOMComponentTree = __webpack_require__(38);
	var ReactUpdates = __webpack_require__(60);
	
	var invariant = __webpack_require__(8);
	var warning = __webpack_require__(11);
	
	var didWarnValueLink = false;
	var didWarnValDefaultVal = false;
	
	function forceUpdateIfMounted() {
	  if (this._rootNodeID) {
	    // DOM component is still mounted; update
	    ReactDOMTextarea.updateWrapper(this);
	  }
	}
	
	/**
	 * Implements a <textarea> host component that allows setting `value`, and
	 * `defaultValue`. This differs from the traditional DOM API because value is
	 * usually set as PCDATA children.
	 *
	 * If `value` is not supplied (or null/undefined), user actions that affect the
	 * value will trigger updates to the element.
	 *
	 * If `value` is supplied (and not null/undefined), the rendered element will
	 * not trigger updates to the element. Instead, the `value` prop must change in
	 * order for the rendered element to be updated.
	 *
	 * The rendered element will be initialized with an empty value, the prop
	 * `defaultValue` if specified, or the children content (deprecated).
	 */
	var ReactDOMTextarea = {
	  getHostProps: function getHostProps(inst, props) {
	    !(props.dangerouslySetInnerHTML == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, '`dangerouslySetInnerHTML` does not make sense on <textarea>.') : _prodInvariant('91') : void 0;
	
	    // Always set children to the same thing. In IE9, the selection range will
	    // get reset if `textContent` is mutated.  We could add a check in setTextContent
	    // to only set the value if/when the value differs from the node value (which would
	    // completely solve this IE9 bug), but Sebastian+Ben seemed to like this solution.
	    // The value can be a boolean or object so that's why it's forced to be a string.
	    var hostProps = _assign({}, props, {
	      value: undefined,
	      defaultValue: undefined,
	      children: '' + inst._wrapperState.initialValue,
	      onChange: inst._wrapperState.onChange
	    });
	
	    return hostProps;
	  },
	
	  mountWrapper: function mountWrapper(inst, props) {
	    if (process.env.NODE_ENV !== 'production') {
	      LinkedValueUtils.checkPropTypes('textarea', props, inst._currentElement._owner);
	      if (props.valueLink !== undefined && !didWarnValueLink) {
	        process.env.NODE_ENV !== 'production' ? warning(false, '`valueLink` prop on `textarea` is deprecated; set `value` and `onChange` instead.') : void 0;
	        didWarnValueLink = true;
	      }
	      if (props.value !== undefined && props.defaultValue !== undefined && !didWarnValDefaultVal) {
	        process.env.NODE_ENV !== 'production' ? warning(false, 'Textarea elements must be either controlled or uncontrolled ' + '(specify either the value prop, or the defaultValue prop, but not ' + 'both). Decide between using a controlled or uncontrolled textarea ' + 'and remove one of these props. More info: ' + 'https://fb.me/react-controlled-components') : void 0;
	        didWarnValDefaultVal = true;
	      }
	    }
	
	    var value = LinkedValueUtils.getValue(props);
	    var initialValue = value;
	
	    // Only bother fetching default value if we're going to use it
	    if (value == null) {
	      var defaultValue = props.defaultValue;
	      // TODO (yungsters): Remove support for children content in <textarea>.
	      var children = props.children;
	      if (children != null) {
	        if (process.env.NODE_ENV !== 'production') {
	          process.env.NODE_ENV !== 'production' ? warning(false, 'Use the `defaultValue` or `value` props instead of setting ' + 'children on <textarea>.') : void 0;
	        }
	        !(defaultValue == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'If you supply `defaultValue` on a <textarea>, do not pass children.') : _prodInvariant('92') : void 0;
	        if (Array.isArray(children)) {
	          !(children.length <= 1) ? process.env.NODE_ENV !== 'production' ? invariant(false, '<textarea> can only have at most one child.') : _prodInvariant('93') : void 0;
	          children = children[0];
	        }
	
	        defaultValue = '' + children;
	      }
	      if (defaultValue == null) {
	        defaultValue = '';
	      }
	      initialValue = defaultValue;
	    }
	
	    inst._wrapperState = {
	      initialValue: '' + initialValue,
	      listeners: null,
	      onChange: _handleChange.bind(inst)
	    };
	  },
	
	  updateWrapper: function updateWrapper(inst) {
	    var props = inst._currentElement.props;
	
	    var node = ReactDOMComponentTree.getNodeFromInstance(inst);
	    var value = LinkedValueUtils.getValue(props);
	    if (value != null) {
	      // Cast `value` to a string to ensure the value is set correctly. While
	      // browsers typically do this as necessary, jsdom doesn't.
	      var newValue = '' + value;
	
	      // To avoid side effects (such as losing text selection), only set value if changed
	      if (newValue !== node.value) {
	        node.value = newValue;
	      }
	      if (props.defaultValue == null) {
	        node.defaultValue = newValue;
	      }
	    }
	    if (props.defaultValue != null) {
	      node.defaultValue = props.defaultValue;
	    }
	  },
	
	  postMountWrapper: function postMountWrapper(inst) {
	    // This is in postMount because we need access to the DOM node, which is not
	    // available until after the component has mounted.
	    var node = ReactDOMComponentTree.getNodeFromInstance(inst);
	    var textContent = node.textContent;
	
	    // Only set node.value if textContent is equal to the expected
	    // initial value. In IE10/IE11 there is a bug where the placeholder attribute
	    // will populate textContent as well.
	    // https://developer.microsoft.com/microsoft-edge/platform/issues/101525/
	    if (textContent === inst._wrapperState.initialValue) {
	      node.value = textContent;
	    }
	  }
	};
	
	function _handleChange(event) {
	  var props = this._currentElement.props;
	  var returnValue = LinkedValueUtils.executeOnChange(props, event);
	  ReactUpdates.asap(forceUpdateIfMounted, this);
	  return returnValue;
	}
	
	module.exports = ReactDOMTextarea;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ }),
/* 118 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var _prodInvariant = __webpack_require__(39);
	
	var ReactComponentEnvironment = __webpack_require__(119);
	var ReactInstanceMap = __webpack_require__(120);
	var ReactInstrumentation = __webpack_require__(66);
	
	var ReactCurrentOwner = __webpack_require__(10);
	var ReactReconciler = __webpack_require__(63);
	var ReactChildReconciler = __webpack_require__(121);
	
	var emptyFunction = __webpack_require__(12);
	var flattenChildren = __webpack_require__(136);
	var invariant = __webpack_require__(8);
	
	/**
	 * Make an update for markup to be rendered and inserted at a supplied index.
	 *
	 * @param {string} markup Markup that renders into an element.
	 * @param {number} toIndex Destination index.
	 * @private
	 */
	function makeInsertMarkup(markup, afterNode, toIndex) {
	  // NOTE: Null values reduce hidden classes.
	  return {
	    type: 'INSERT_MARKUP',
	    content: markup,
	    fromIndex: null,
	    fromNode: null,
	    toIndex: toIndex,
	    afterNode: afterNode
	  };
	}
	
	/**
	 * Make an update for moving an existing element to another index.
	 *
	 * @param {number} fromIndex Source index of the existing element.
	 * @param {number} toIndex Destination index of the element.
	 * @private
	 */
	function makeMove(child, afterNode, toIndex) {
	  // NOTE: Null values reduce hidden classes.
	  return {
	    type: 'MOVE_EXISTING',
	    content: null,
	    fromIndex: child._mountIndex,
	    fromNode: ReactReconciler.getHostNode(child),
	    toIndex: toIndex,
	    afterNode: afterNode
	  };
	}
	
	/**
	 * Make an update for removing an element at an index.
	 *
	 * @param {number} fromIndex Index of the element to remove.
	 * @private
	 */
	function makeRemove(child, node) {
	  // NOTE: Null values reduce hidden classes.
	  return {
	    type: 'REMOVE_NODE',
	    content: null,
	    fromIndex: child._mountIndex,
	    fromNode: node,
	    toIndex: null,
	    afterNode: null
	  };
	}
	
	/**
	 * Make an update for setting the markup of a node.
	 *
	 * @param {string} markup Markup that renders into an element.
	 * @private
	 */
	function makeSetMarkup(markup) {
	  // NOTE: Null values reduce hidden classes.
	  return {
	    type: 'SET_MARKUP',
	    content: markup,
	    fromIndex: null,
	    fromNode: null,
	    toIndex: null,
	    afterNode: null
	  };
	}
	
	/**
	 * Make an update for setting the text content.
	 *
	 * @param {string} textContent Text content to set.
	 * @private
	 */
	function makeTextContent(textContent) {
	  // NOTE: Null values reduce hidden classes.
	  return {
	    type: 'TEXT_CONTENT',
	    content: textContent,
	    fromIndex: null,
	    fromNode: null,
	    toIndex: null,
	    afterNode: null
	  };
	}
	
	/**
	 * Push an update, if any, onto the queue. Creates a new queue if none is
	 * passed and always returns the queue. Mutative.
	 */
	function enqueue(queue, update) {
	  if (update) {
	    queue = queue || [];
	    queue.push(update);
	  }
	  return queue;
	}
	
	/**
	 * Processes any enqueued updates.
	 *
	 * @private
	 */
	function processQueue(inst, updateQueue) {
	  ReactComponentEnvironment.processChildrenUpdates(inst, updateQueue);
	}
	
	var setChildrenForInstrumentation = emptyFunction;
	if (process.env.NODE_ENV !== 'production') {
	  var getDebugID = function getDebugID(inst) {
	    if (!inst._debugID) {
	      // Check for ART-like instances. TODO: This is silly/gross.
	      var internal;
	      if (internal = ReactInstanceMap.get(inst)) {
	        inst = internal;
	      }
	    }
	    return inst._debugID;
	  };
	  setChildrenForInstrumentation = function setChildrenForInstrumentation(children) {
	    var debugID = getDebugID(this);
	    // TODO: React Native empty components are also multichild.
	    // This means they still get into this method but don't have _debugID.
	    if (debugID !== 0) {
	      ReactInstrumentation.debugTool.onSetChildren(debugID, children ? Object.keys(children).map(function (key) {
	        return children[key]._debugID;
	      }) : []);
	    }
	  };
	}
	
	/**
	 * ReactMultiChild are capable of reconciling multiple children.
	 *
	 * @class ReactMultiChild
	 * @internal
	 */
	var ReactMultiChild = {
	
	  /**
	   * Provides common functionality for components that must reconcile multiple
	   * children. This is used by `ReactDOMComponent` to mount, update, and
	   * unmount child components.
	   *
	   * @lends {ReactMultiChild.prototype}
	   */
	  Mixin: {
	
	    _reconcilerInstantiateChildren: function _reconcilerInstantiateChildren(nestedChildren, transaction, context) {
	      if (process.env.NODE_ENV !== 'production') {
	        var selfDebugID = getDebugID(this);
	        if (this._currentElement) {
	          try {
	            ReactCurrentOwner.current = this._currentElement._owner;
	            return ReactChildReconciler.instantiateChildren(nestedChildren, transaction, context, selfDebugID);
	          } finally {
	            ReactCurrentOwner.current = null;
	          }
	        }
	      }
	      return ReactChildReconciler.instantiateChildren(nestedChildren, transaction, context);
	    },
	
	    _reconcilerUpdateChildren: function _reconcilerUpdateChildren(prevChildren, nextNestedChildrenElements, mountImages, removedNodes, transaction, context) {
	      var nextChildren;
	      var selfDebugID = 0;
	      if (process.env.NODE_ENV !== 'production') {
	        selfDebugID = getDebugID(this);
	        if (this._currentElement) {
	          try {
	            ReactCurrentOwner.current = this._currentElement._owner;
	            nextChildren = flattenChildren(nextNestedChildrenElements, selfDebugID);
	          } finally {
	            ReactCurrentOwner.current = null;
	          }
	          ReactChildReconciler.updateChildren(prevChildren, nextChildren, mountImages, removedNodes, transaction, this, this._hostContainerInfo, context, selfDebugID);
	          return nextChildren;
	        }
	      }
	      nextChildren = flattenChildren(nextNestedChildrenElements, selfDebugID);
	      ReactChildReconciler.updateChildren(prevChildren, nextChildren, mountImages, removedNodes, transaction, this, this._hostContainerInfo, context, selfDebugID);
	      return nextChildren;
	    },
	
	    /**
	     * Generates a "mount image" for each of the supplied children. In the case
	     * of `ReactDOMComponent`, a mount image is a string of markup.
	     *
	     * @param {?object} nestedChildren Nested child maps.
	     * @return {array} An array of mounted representations.
	     * @internal
	     */
	    mountChildren: function mountChildren(nestedChildren, transaction, context) {
	      var children = this._reconcilerInstantiateChildren(nestedChildren, transaction, context);
	      this._renderedChildren = children;
	
	      var mountImages = [];
	      var index = 0;
	      for (var name in children) {
	        if (children.hasOwnProperty(name)) {
	          var child = children[name];
	          var selfDebugID = 0;
	          if (process.env.NODE_ENV !== 'production') {
	            selfDebugID = getDebugID(this);
	          }
	          var mountImage = ReactReconciler.mountComponent(child, transaction, this, this._hostContainerInfo, context, selfDebugID);
	          child._mountIndex = index++;
	          mountImages.push(mountImage);
	        }
	      }
	
	      if (process.env.NODE_ENV !== 'production') {
	        setChildrenForInstrumentation.call(this, children);
	      }
	
	      return mountImages;
	    },
	
	    /**
	     * Replaces any rendered children with a text content string.
	     *
	     * @param {string} nextContent String of content.
	     * @internal
	     */
	    updateTextContent: function updateTextContent(nextContent) {
	      var prevChildren = this._renderedChildren;
	      // Remove any rendered children.
	      ReactChildReconciler.unmountChildren(prevChildren, false);
	      for (var name in prevChildren) {
	        if (prevChildren.hasOwnProperty(name)) {
	           true ? process.env.NODE_ENV !== 'production' ? invariant(false, 'updateTextContent called on non-empty component.') : _prodInvariant('118') : void 0;
	        }
	      }
	      // Set new text content.
	      var updates = [makeTextContent(nextContent)];
	      processQueue(this, updates);
	    },
	
	    /**
	     * Replaces any rendered children with a markup string.
	     *
	     * @param {string} nextMarkup String of markup.
	     * @internal
	     */
	    updateMarkup: function updateMarkup(nextMarkup) {
	      var prevChildren = this._renderedChildren;
	      // Remove any rendered children.
	      ReactChildReconciler.unmountChildren(prevChildren, false);
	      for (var name in prevChildren) {
	        if (prevChildren.hasOwnProperty(name)) {
	           true ? process.env.NODE_ENV !== 'production' ? invariant(false, 'updateTextContent called on non-empty component.') : _prodInvariant('118') : void 0;
	        }
	      }
	      var updates = [makeSetMarkup(nextMarkup)];
	      processQueue(this, updates);
	    },
	
	    /**
	     * Updates the rendered children with new children.
	     *
	     * @param {?object} nextNestedChildrenElements Nested child element maps.
	     * @param {ReactReconcileTransaction} transaction
	     * @internal
	     */
	    updateChildren: function updateChildren(nextNestedChildrenElements, transaction, context) {
	      // Hook used by React ART
	      this._updateChildren(nextNestedChildrenElements, transaction, context);
	    },
	
	    /**
	     * @param {?object} nextNestedChildrenElements Nested child element maps.
	     * @param {ReactReconcileTransaction} transaction
	     * @final
	     * @protected
	     */
	    _updateChildren: function _updateChildren(nextNestedChildrenElements, transaction, context) {
	      var prevChildren = this._renderedChildren;
	      var removedNodes = {};
	      var mountImages = [];
	      var nextChildren = this._reconcilerUpdateChildren(prevChildren, nextNestedChildrenElements, mountImages, removedNodes, transaction, context);
	      if (!nextChildren && !prevChildren) {
	        return;
	      }
	      var updates = null;
	      var name;
	      // `nextIndex` will increment for each child in `nextChildren`, but
	      // `lastIndex` will be the last index visited in `prevChildren`.
	      var nextIndex = 0;
	      var lastIndex = 0;
	      // `nextMountIndex` will increment for each newly mounted child.
	      var nextMountIndex = 0;
	      var lastPlacedNode = null;
	      for (name in nextChildren) {
	        if (!nextChildren.hasOwnProperty(name)) {
	          continue;
	        }
	        var prevChild = prevChildren && prevChildren[name];
	        var nextChild = nextChildren[name];
	        if (prevChild === nextChild) {
	          updates = enqueue(updates, this.moveChild(prevChild, lastPlacedNode, nextIndex, lastIndex));
	          lastIndex = Math.max(prevChild._mountIndex, lastIndex);
	          prevChild._mountIndex = nextIndex;
	        } else {
	          if (prevChild) {
	            // Update `lastIndex` before `_mountIndex` gets unset by unmounting.
	            lastIndex = Math.max(prevChild._mountIndex, lastIndex);
	            // The `removedNodes` loop below will actually remove the child.
	          }
	          // The child must be instantiated before it's mounted.
	          updates = enqueue(updates, this._mountChildAtIndex(nextChild, mountImages[nextMountIndex], lastPlacedNode, nextIndex, transaction, context));
	          nextMountIndex++;
	        }
	        nextIndex++;
	        lastPlacedNode = ReactReconciler.getHostNode(nextChild);
	      }
	      // Remove children that are no longer present.
	      for (name in removedNodes) {
	        if (removedNodes.hasOwnProperty(name)) {
	          updates = enqueue(updates, this._unmountChild(prevChildren[name], removedNodes[name]));
	        }
	      }
	      if (updates) {
	        processQueue(this, updates);
	      }
	      this._renderedChildren = nextChildren;
	
	      if (process.env.NODE_ENV !== 'production') {
	        setChildrenForInstrumentation.call(this, nextChildren);
	      }
	    },
	
	    /**
	     * Unmounts all rendered children. This should be used to clean up children
	     * when this component is unmounted. It does not actually perform any
	     * backend operations.
	     *
	     * @internal
	     */
	    unmountChildren: function unmountChildren(safely) {
	      var renderedChildren = this._renderedChildren;
	      ReactChildReconciler.unmountChildren(renderedChildren, safely);
	      this._renderedChildren = null;
	    },
	
	    /**
	     * Moves a child component to the supplied index.
	     *
	     * @param {ReactComponent} child Component to move.
	     * @param {number} toIndex Destination index of the element.
	     * @param {number} lastIndex Last index visited of the siblings of `child`.
	     * @protected
	     */
	    moveChild: function moveChild(child, afterNode, toIndex, lastIndex) {
	      // If the index of `child` is less than `lastIndex`, then it needs to
	      // be moved. Otherwise, we do not need to move it because a child will be
	      // inserted or moved before `child`.
	      if (child._mountIndex < lastIndex) {
	        return makeMove(child, afterNode, toIndex);
	      }
	    },
	
	    /**
	     * Creates a child component.
	     *
	     * @param {ReactComponent} child Component to create.
	     * @param {string} mountImage Markup to insert.
	     * @protected
	     */
	    createChild: function createChild(child, afterNode, mountImage) {
	      return makeInsertMarkup(mountImage, afterNode, child._mountIndex);
	    },
	
	    /**
	     * Removes a child component.
	     *
	     * @param {ReactComponent} child Child to remove.
	     * @protected
	     */
	    removeChild: function removeChild(child, node) {
	      return makeRemove(child, node);
	    },
	
	    /**
	     * Mounts a child with the supplied name.
	     *
	     * NOTE: This is part of `updateChildren` and is here for readability.
	     *
	     * @param {ReactComponent} child Component to mount.
	     * @param {string} name Name of the child.
	     * @param {number} index Index at which to insert the child.
	     * @param {ReactReconcileTransaction} transaction
	     * @private
	     */
	    _mountChildAtIndex: function _mountChildAtIndex(child, mountImage, afterNode, index, transaction, context) {
	      child._mountIndex = index;
	      return this.createChild(child, afterNode, mountImage);
	    },
	
	    /**
	     * Unmounts a rendered child.
	     *
	     * NOTE: This is part of `updateChildren` and is here for readability.
	     *
	     * @param {ReactComponent} child Component to unmount.
	     * @private
	     */
	    _unmountChild: function _unmountChild(child, node) {
	      var update = this.removeChild(child, node);
	      child._mountIndex = null;
	      return update;
	    }
	
	  }
	
	};
	
	module.exports = ReactMultiChild;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ }),
/* 119 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2014-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */
	
	'use strict';
	
	var _prodInvariant = __webpack_require__(39);
	
	var invariant = __webpack_require__(8);
	
	var injected = false;
	
	var ReactComponentEnvironment = {
	
	  /**
	   * Optionally injectable hook for swapping out mount images in the middle of
	   * the tree.
	   */
	  replaceNodeWithMarkup: null,
	
	  /**
	   * Optionally injectable hook for processing a queue of child updates. Will
	   * later move into MultiChildComponents.
	   */
	  processChildrenUpdates: null,
	
	  injection: {
	    injectEnvironment: function injectEnvironment(environment) {
	      !!injected ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactCompositeComponent: injectEnvironment() can only be called once.') : _prodInvariant('104') : void 0;
	      ReactComponentEnvironment.replaceNodeWithMarkup = environment.replaceNodeWithMarkup;
	      ReactComponentEnvironment.processChildrenUpdates = environment.processChildrenUpdates;
	      injected = true;
	    }
	  }
	
	};
	
	module.exports = ReactComponentEnvironment;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ }),
/* 120 */
/***/ (function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	/**
	 * `ReactInstanceMap` maintains a mapping from a public facing stateful
	 * instance (key) and the internal representation (value). This allows public
	 * methods to accept the user facing instance as an argument and map them back
	 * to internal methods.
	 */
	
	// TODO: Replace this with ES6: var ReactInstanceMap = new Map();
	
	var ReactInstanceMap = {
	
	  /**
	   * This API should be called `delete` but we'd have to make sure to always
	   * transform these to strings for IE support. When this transform is fully
	   * supported we can rename it.
	   */
	  remove: function remove(key) {
	    key._reactInternalInstance = undefined;
	  },
	
	  get: function get(key) {
	    return key._reactInternalInstance;
	  },
	
	  has: function has(key) {
	    return key._reactInternalInstance !== undefined;
	  },
	
	  set: function set(key, value) {
	    key._reactInternalInstance = value;
	  }
	
	};
	
	module.exports = ReactInstanceMap;

/***/ }),
/* 121 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2014-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var ReactReconciler = __webpack_require__(63);
	
	var instantiateReactComponent = __webpack_require__(122);
	var KeyEscapeUtils = __webpack_require__(132);
	var shouldUpdateReactComponent = __webpack_require__(128);
	var traverseAllChildren = __webpack_require__(133);
	var warning = __webpack_require__(11);
	
	var ReactComponentTreeHook;
	
	if (typeof process !== 'undefined' && process.env && process.env.NODE_ENV === 'test') {
	  // Temporary hack.
	  // Inline requires don't work well with Jest:
	  // https://github.com/facebook/react/issues/7240
	  // Remove the inline requires when we don't need them anymore:
	  // https://github.com/facebook/react/pull/7178
	  ReactComponentTreeHook = __webpack_require__(26);
	}
	
	function instantiateChild(childInstances, child, name, selfDebugID) {
	  // We found a component instance.
	  var keyUnique = childInstances[name] === undefined;
	  if (process.env.NODE_ENV !== 'production') {
	    if (!ReactComponentTreeHook) {
	      ReactComponentTreeHook = __webpack_require__(26);
	    }
	    if (!keyUnique) {
	      process.env.NODE_ENV !== 'production' ? warning(false, 'flattenChildren(...): Encountered two children with the same key, ' + '`%s`. Child keys must be unique; when two children share a key, only ' + 'the first child will be used.%s', KeyEscapeUtils.unescape(name), ReactComponentTreeHook.getStackAddendumByID(selfDebugID)) : void 0;
	    }
	  }
	  if (child != null && keyUnique) {
	    childInstances[name] = instantiateReactComponent(child, true);
	  }
	}
	
	/**
	 * ReactChildReconciler provides helpers for initializing or updating a set of
	 * children. Its output is suitable for passing it onto ReactMultiChild which
	 * does diffed reordering and insertion.
	 */
	var ReactChildReconciler = {
	  /**
	   * Generates a "mount image" for each of the supplied children. In the case
	   * of `ReactDOMComponent`, a mount image is a string of markup.
	   *
	   * @param {?object} nestedChildNodes Nested child maps.
	   * @return {?object} A set of child instances.
	   * @internal
	   */
	  instantiateChildren: function instantiateChildren(nestedChildNodes, transaction, context, selfDebugID // 0 in production and for roots
	  ) {
	    if (nestedChildNodes == null) {
	      return null;
	    }
	    var childInstances = {};
	
	    if (process.env.NODE_ENV !== 'production') {
	      traverseAllChildren(nestedChildNodes, function (childInsts, child, name) {
	        return instantiateChild(childInsts, child, name, selfDebugID);
	      }, childInstances);
	    } else {
	      traverseAllChildren(nestedChildNodes, instantiateChild, childInstances);
	    }
	    return childInstances;
	  },
	
	  /**
	   * Updates the rendered children and returns a new set of children.
	   *
	   * @param {?object} prevChildren Previously initialized set of children.
	   * @param {?object} nextChildren Flat child element maps.
	   * @param {ReactReconcileTransaction} transaction
	   * @param {object} context
	   * @return {?object} A new set of child instances.
	   * @internal
	   */
	  updateChildren: function updateChildren(prevChildren, nextChildren, mountImages, removedNodes, transaction, hostParent, hostContainerInfo, context, selfDebugID // 0 in production and for roots
	  ) {
	    // We currently don't have a way to track moves here but if we use iterators
	    // instead of for..in we can zip the iterators and check if an item has
	    // moved.
	    // TODO: If nothing has changed, return the prevChildren object so that we
	    // can quickly bailout if nothing has changed.
	    if (!nextChildren && !prevChildren) {
	      return;
	    }
	    var name;
	    var prevChild;
	    for (name in nextChildren) {
	      if (!nextChildren.hasOwnProperty(name)) {
	        continue;
	      }
	      prevChild = prevChildren && prevChildren[name];
	      var prevElement = prevChild && prevChild._currentElement;
	      var nextElement = nextChildren[name];
	      if (prevChild != null && shouldUpdateReactComponent(prevElement, nextElement)) {
	        ReactReconciler.receiveComponent(prevChild, nextElement, transaction, context);
	        nextChildren[name] = prevChild;
	      } else {
	        if (prevChild) {
	          removedNodes[name] = ReactReconciler.getHostNode(prevChild);
	          ReactReconciler.unmountComponent(prevChild, false);
	        }
	        // The child must be instantiated before it's mounted.
	        var nextChildInstance = instantiateReactComponent(nextElement, true);
	        nextChildren[name] = nextChildInstance;
	        // Creating mount image now ensures refs are resolved in right order
	        // (see https://github.com/facebook/react/pull/7101 for explanation).
	        var nextChildMountImage = ReactReconciler.mountComponent(nextChildInstance, transaction, hostParent, hostContainerInfo, context, selfDebugID);
	        mountImages.push(nextChildMountImage);
	      }
	    }
	    // Unmount children that are no longer present.
	    for (name in prevChildren) {
	      if (prevChildren.hasOwnProperty(name) && !(nextChildren && nextChildren.hasOwnProperty(name))) {
	        prevChild = prevChildren[name];
	        removedNodes[name] = ReactReconciler.getHostNode(prevChild);
	        ReactReconciler.unmountComponent(prevChild, false);
	      }
	    }
	  },
	
	  /**
	   * Unmounts all rendered children. This should be used to clean up children
	   * when this component is unmounted.
	   *
	   * @param {?object} renderedChildren Previously initialized set of children.
	   * @internal
	   */
	  unmountChildren: function unmountChildren(renderedChildren, safely) {
	    for (var name in renderedChildren) {
	      if (renderedChildren.hasOwnProperty(name)) {
	        var renderedChild = renderedChildren[name];
	        ReactReconciler.unmountComponent(renderedChild, safely);
	      }
	    }
	  }
	
	};
	
	module.exports = ReactChildReconciler;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ }),
/* 122 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
	
	var _prodInvariant = __webpack_require__(39),
	    _assign = __webpack_require__(4);
	
	var ReactCompositeComponent = __webpack_require__(123);
	var ReactEmptyComponent = __webpack_require__(129);
	var ReactHostComponent = __webpack_require__(130);
	
	var getNextDebugID = __webpack_require__(131);
	var invariant = __webpack_require__(8);
	var warning = __webpack_require__(11);
	
	// To avoid a cyclic dependency, we create the final class in this module
	var ReactCompositeComponentWrapper = function ReactCompositeComponentWrapper(element) {
	  this.construct(element);
	};
	
	function getDeclarationErrorAddendum(owner) {
	  if (owner) {
	    var name = owner.getName();
	    if (name) {
	      return ' Check the render method of `' + name + '`.';
	    }
	  }
	  return '';
	}
	
	/**
	 * Check if the type reference is a known internal type. I.e. not a user
	 * provided composite type.
	 *
	 * @param {function} type
	 * @return {boolean} Returns true if this is a valid internal type.
	 */
	function isInternalComponentType(type) {
	  return typeof type === 'function' && typeof type.prototype !== 'undefined' && typeof type.prototype.mountComponent === 'function' && typeof type.prototype.receiveComponent === 'function';
	}
	
	/**
	 * Given a ReactNode, create an instance that will actually be mounted.
	 *
	 * @param {ReactNode} node
	 * @param {boolean} shouldHaveDebugID
	 * @return {object} A new instance of the element's constructor.
	 * @protected
	 */
	function instantiateReactComponent(node, shouldHaveDebugID) {
	  var instance;
	
	  if (node === null || node === false) {
	    instance = ReactEmptyComponent.create(instantiateReactComponent);
	  } else if ((typeof node === 'undefined' ? 'undefined' : _typeof(node)) === 'object') {
	    var element = node;
	    var type = element.type;
	    if (typeof type !== 'function' && typeof type !== 'string') {
	      var info = '';
	      if (process.env.NODE_ENV !== 'production') {
	        if (type === undefined || (typeof type === 'undefined' ? 'undefined' : _typeof(type)) === 'object' && type !== null && Object.keys(type).length === 0) {
	          info += ' You likely forgot to export your component from the file ' + 'it\'s defined in.';
	        }
	      }
	      info += getDeclarationErrorAddendum(element._owner);
	       true ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) but got: %s.%s', type == null ? type : typeof type === 'undefined' ? 'undefined' : _typeof(type), info) : _prodInvariant('130', type == null ? type : typeof type === 'undefined' ? 'undefined' : _typeof(type), info) : void 0;
	    }
	
	    // Special case string values
	    if (typeof element.type === 'string') {
	      instance = ReactHostComponent.createInternalComponent(element);
	    } else if (isInternalComponentType(element.type)) {
	      // This is temporarily available for custom components that are not string
	      // representations. I.e. ART. Once those are updated to use the string
	      // representation, we can drop this code path.
	      instance = new element.type(element);
	
	      // We renamed this. Allow the old name for compat. :(
	      if (!instance.getHostNode) {
	        instance.getHostNode = instance.getNativeNode;
	      }
	    } else {
	      instance = new ReactCompositeComponentWrapper(element);
	    }
	  } else if (typeof node === 'string' || typeof node === 'number') {
	    instance = ReactHostComponent.createInstanceForText(node);
	  } else {
	     true ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Encountered invalid React node of type %s', typeof node === 'undefined' ? 'undefined' : _typeof(node)) : _prodInvariant('131', typeof node === 'undefined' ? 'undefined' : _typeof(node)) : void 0;
	  }
	
	  if (process.env.NODE_ENV !== 'production') {
	    process.env.NODE_ENV !== 'production' ? warning(typeof instance.mountComponent === 'function' && typeof instance.receiveComponent === 'function' && typeof instance.getHostNode === 'function' && typeof instance.unmountComponent === 'function', 'Only React Components can be mounted.') : void 0;
	  }
	
	  // These two fields are used by the DOM and ART diffing algorithms
	  // respectively. Instead of using expandos on components, we should be
	  // storing the state needed by the diffing algorithms elsewhere.
	  instance._mountIndex = 0;
	  instance._mountImage = null;
	
	  if (process.env.NODE_ENV !== 'production') {
	    instance._debugID = shouldHaveDebugID ? getNextDebugID() : 0;
	  }
	
	  // Internal instances should fully constructed at this point, so they should
	  // not get any new fields added to them at this point.
	  if (process.env.NODE_ENV !== 'production') {
	    if (Object.preventExtensions) {
	      Object.preventExtensions(instance);
	    }
	  }
	
	  return instance;
	}
	
	_assign(ReactCompositeComponentWrapper.prototype, ReactCompositeComponent, {
	  _instantiateReactComponent: instantiateReactComponent
	});
	
	module.exports = instantiateReactComponent;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ }),
/* 123 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
	
	var _prodInvariant = __webpack_require__(39),
	    _assign = __webpack_require__(4);
	
	var React = __webpack_require__(2);
	var ReactComponentEnvironment = __webpack_require__(119);
	var ReactCurrentOwner = __webpack_require__(10);
	var ReactErrorUtils = __webpack_require__(49);
	var ReactInstanceMap = __webpack_require__(120);
	var ReactInstrumentation = __webpack_require__(66);
	var ReactNodeTypes = __webpack_require__(124);
	var ReactReconciler = __webpack_require__(63);
	
	if (process.env.NODE_ENV !== 'production') {
	  var checkReactTypeSpec = __webpack_require__(125);
	}
	
	var emptyObject = __webpack_require__(20);
	var invariant = __webpack_require__(8);
	var shallowEqual = __webpack_require__(127);
	var shouldUpdateReactComponent = __webpack_require__(128);
	var warning = __webpack_require__(11);
	
	var CompositeTypes = {
	  ImpureClass: 0,
	  PureClass: 1,
	  StatelessFunctional: 2
	};
	
	function StatelessComponent(Component) {}
	StatelessComponent.prototype.render = function () {
	  var Component = ReactInstanceMap.get(this)._currentElement.type;
	  var element = Component(this.props, this.context, this.updater);
	  warnIfInvalidElement(Component, element);
	  return element;
	};
	
	function warnIfInvalidElement(Component, element) {
	  if (process.env.NODE_ENV !== 'production') {
	    process.env.NODE_ENV !== 'production' ? warning(element === null || element === false || React.isValidElement(element), '%s(...): A valid React element (or null) must be returned. You may have ' + 'returned undefined, an array or some other invalid object.', Component.displayName || Component.name || 'Component') : void 0;
	    process.env.NODE_ENV !== 'production' ? warning(!Component.childContextTypes, '%s(...): childContextTypes cannot be defined on a functional component.', Component.displayName || Component.name || 'Component') : void 0;
	  }
	}
	
	function shouldConstruct(Component) {
	  return !!(Component.prototype && Component.prototype.isReactComponent);
	}
	
	function isPureComponent(Component) {
	  return !!(Component.prototype && Component.prototype.isPureReactComponent);
	}
	
	// Separated into a function to contain deoptimizations caused by try/finally.
	function measureLifeCyclePerf(fn, debugID, timerType) {
	  if (debugID === 0) {
	    // Top-level wrappers (see ReactMount) and empty components (see
	    // ReactDOMEmptyComponent) are invisible to hooks and devtools.
	    // Both are implementation details that should go away in the future.
	    return fn();
	  }
	
	  ReactInstrumentation.debugTool.onBeginLifeCycleTimer(debugID, timerType);
	  try {
	    return fn();
	  } finally {
	    ReactInstrumentation.debugTool.onEndLifeCycleTimer(debugID, timerType);
	  }
	}
	
	/**
	 * ------------------ The Life-Cycle of a Composite Component ------------------
	 *
	 * - constructor: Initialization of state. The instance is now retained.
	 *   - componentWillMount
	 *   - render
	 *   - [children's constructors]
	 *     - [children's componentWillMount and render]
	 *     - [children's componentDidMount]
	 *     - componentDidMount
	 *
	 *       Update Phases:
	 *       - componentWillReceiveProps (only called if parent updated)
	 *       - shouldComponentUpdate
	 *         - componentWillUpdate
	 *           - render
	 *           - [children's constructors or receive props phases]
	 *         - componentDidUpdate
	 *
	 *     - componentWillUnmount
	 *     - [children's componentWillUnmount]
	 *   - [children destroyed]
	 * - (destroyed): The instance is now blank, released by React and ready for GC.
	 *
	 * -----------------------------------------------------------------------------
	 */
	
	/**
	 * An incrementing ID assigned to each component when it is mounted. This is
	 * used to enforce the order in which `ReactUpdates` updates dirty components.
	 *
	 * @private
	 */
	var nextMountID = 1;
	
	/**
	 * @lends {ReactCompositeComponent.prototype}
	 */
	var ReactCompositeComponent = {
	
	  /**
	   * Base constructor for all composite component.
	   *
	   * @param {ReactElement} element
	   * @final
	   * @internal
	   */
	  construct: function construct(element) {
	    this._currentElement = element;
	    this._rootNodeID = 0;
	    this._compositeType = null;
	    this._instance = null;
	    this._hostParent = null;
	    this._hostContainerInfo = null;
	
	    // See ReactUpdateQueue
	    this._updateBatchNumber = null;
	    this._pendingElement = null;
	    this._pendingStateQueue = null;
	    this._pendingReplaceState = false;
	    this._pendingForceUpdate = false;
	
	    this._renderedNodeType = null;
	    this._renderedComponent = null;
	    this._context = null;
	    this._mountOrder = 0;
	    this._topLevelWrapper = null;
	
	    // See ReactUpdates and ReactUpdateQueue.
	    this._pendingCallbacks = null;
	
	    // ComponentWillUnmount shall only be called once
	    this._calledComponentWillUnmount = false;
	
	    if (process.env.NODE_ENV !== 'production') {
	      this._warnedAboutRefsInRender = false;
	    }
	  },
	
	  /**
	   * Initializes the component, renders markup, and registers event listeners.
	   *
	   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
	   * @param {?object} hostParent
	   * @param {?object} hostContainerInfo
	   * @param {?object} context
	   * @return {?string} Rendered markup to be inserted into the DOM.
	   * @final
	   * @internal
	   */
	  mountComponent: function mountComponent(transaction, hostParent, hostContainerInfo, context) {
	    var _this = this;
	
	    this._context = context;
	    this._mountOrder = nextMountID++;
	    this._hostParent = hostParent;
	    this._hostContainerInfo = hostContainerInfo;
	
	    var publicProps = this._currentElement.props;
	    var publicContext = this._processContext(context);
	
	    var Component = this._currentElement.type;
	
	    var updateQueue = transaction.getUpdateQueue();
	
	    // Initialize the public class
	    var doConstruct = shouldConstruct(Component);
	    var inst = this._constructComponent(doConstruct, publicProps, publicContext, updateQueue);
	    var renderedElement;
	
	    // Support functional components
	    if (!doConstruct && (inst == null || inst.render == null)) {
	      renderedElement = inst;
	      warnIfInvalidElement(Component, renderedElement);
	      !(inst === null || inst === false || React.isValidElement(inst)) ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s(...): A valid React element (or null) must be returned. You may have returned undefined, an array or some other invalid object.', Component.displayName || Component.name || 'Component') : _prodInvariant('105', Component.displayName || Component.name || 'Component') : void 0;
	      inst = new StatelessComponent(Component);
	      this._compositeType = CompositeTypes.StatelessFunctional;
	    } else {
	      if (isPureComponent(Component)) {
	        this._compositeType = CompositeTypes.PureClass;
	      } else {
	        this._compositeType = CompositeTypes.ImpureClass;
	      }
	    }
	
	    if (process.env.NODE_ENV !== 'production') {
	      // This will throw later in _renderValidatedComponent, but add an early
	      // warning now to help debugging
	      if (inst.render == null) {
	        process.env.NODE_ENV !== 'production' ? warning(false, '%s(...): No `render` method found on the returned component ' + 'instance: you may have forgotten to define `render`.', Component.displayName || Component.name || 'Component') : void 0;
	      }
	
	      var propsMutated = inst.props !== publicProps;
	      var componentName = Component.displayName || Component.name || 'Component';
	
	      process.env.NODE_ENV !== 'production' ? warning(inst.props === undefined || !propsMutated, '%s(...): When calling super() in `%s`, make sure to pass ' + 'up the same props that your component\'s constructor was passed.', componentName, componentName) : void 0;
	    }
	
	    // These should be set up in the constructor, but as a convenience for
	    // simpler class abstractions, we set them up after the fact.
	    inst.props = publicProps;
	    inst.context = publicContext;
	    inst.refs = emptyObject;
	    inst.updater = updateQueue;
	
	    this._instance = inst;
	
	    // Store a reference from the instance back to the internal representation
	    ReactInstanceMap.set(inst, this);
	
	    if (process.env.NODE_ENV !== 'production') {
	      // Since plain JS classes are defined without any special initialization
	      // logic, we can not catch common errors early. Therefore, we have to
	      // catch them here, at initialization time, instead.
	      process.env.NODE_ENV !== 'production' ? warning(!inst.getInitialState || inst.getInitialState.isReactClassApproved || inst.state, 'getInitialState was defined on %s, a plain JavaScript class. ' + 'This is only supported for classes created using React.createClass. ' + 'Did you mean to define a state property instead?', this.getName() || 'a component') : void 0;
	      process.env.NODE_ENV !== 'production' ? warning(!inst.getDefaultProps || inst.getDefaultProps.isReactClassApproved, 'getDefaultProps was defined on %s, a plain JavaScript class. ' + 'This is only supported for classes created using React.createClass. ' + 'Use a static property to define defaultProps instead.', this.getName() || 'a component') : void 0;
	      process.env.NODE_ENV !== 'production' ? warning(!inst.propTypes, 'propTypes was defined as an instance property on %s. Use a static ' + 'property to define propTypes instead.', this.getName() || 'a component') : void 0;
	      process.env.NODE_ENV !== 'production' ? warning(!inst.contextTypes, 'contextTypes was defined as an instance property on %s. Use a ' + 'static property to define contextTypes instead.', this.getName() || 'a component') : void 0;
	      process.env.NODE_ENV !== 'production' ? warning(typeof inst.componentShouldUpdate !== 'function', '%s has a method called ' + 'componentShouldUpdate(). Did you mean shouldComponentUpdate()? ' + 'The name is phrased as a question because the function is ' + 'expected to return a value.', this.getName() || 'A component') : void 0;
	      process.env.NODE_ENV !== 'production' ? warning(typeof inst.componentDidUnmount !== 'function', '%s has a method called ' + 'componentDidUnmount(). But there is no such lifecycle method. ' + 'Did you mean componentWillUnmount()?', this.getName() || 'A component') : void 0;
	      process.env.NODE_ENV !== 'production' ? warning(typeof inst.componentWillRecieveProps !== 'function', '%s has a method called ' + 'componentWillRecieveProps(). Did you mean componentWillReceiveProps()?', this.getName() || 'A component') : void 0;
	    }
	
	    var initialState = inst.state;
	    if (initialState === undefined) {
	      inst.state = initialState = null;
	    }
	    !((typeof initialState === 'undefined' ? 'undefined' : _typeof(initialState)) === 'object' && !Array.isArray(initialState)) ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s.state: must be set to an object or null', this.getName() || 'ReactCompositeComponent') : _prodInvariant('106', this.getName() || 'ReactCompositeComponent') : void 0;
	
	    this._pendingStateQueue = null;
	    this._pendingReplaceState = false;
	    this._pendingForceUpdate = false;
	
	    var markup;
	    if (inst.unstable_handleError) {
	      markup = this.performInitialMountWithErrorHandling(renderedElement, hostParent, hostContainerInfo, transaction, context);
	    } else {
	      markup = this.performInitialMount(renderedElement, hostParent, hostContainerInfo, transaction, context);
	    }
	
	    if (inst.componentDidMount) {
	      if (process.env.NODE_ENV !== 'production') {
	        transaction.getReactMountReady().enqueue(function () {
	          measureLifeCyclePerf(function () {
	            return inst.componentDidMount();
	          }, _this._debugID, 'componentDidMount');
	        });
	      } else {
	        transaction.getReactMountReady().enqueue(inst.componentDidMount, inst);
	      }
	    }
	
	    return markup;
	  },
	
	  _constructComponent: function _constructComponent(doConstruct, publicProps, publicContext, updateQueue) {
	    if (process.env.NODE_ENV !== 'production') {
	      ReactCurrentOwner.current = this;
	      try {
	        return this._constructComponentWithoutOwner(doConstruct, publicProps, publicContext, updateQueue);
	      } finally {
	        ReactCurrentOwner.current = null;
	      }
	    } else {
	      return this._constructComponentWithoutOwner(doConstruct, publicProps, publicContext, updateQueue);
	    }
	  },
	
	  _constructComponentWithoutOwner: function _constructComponentWithoutOwner(doConstruct, publicProps, publicContext, updateQueue) {
	    var Component = this._currentElement.type;
	
	    if (doConstruct) {
	      if (process.env.NODE_ENV !== 'production') {
	        return measureLifeCyclePerf(function () {
	          return new Component(publicProps, publicContext, updateQueue);
	        }, this._debugID, 'ctor');
	      } else {
	        return new Component(publicProps, publicContext, updateQueue);
	      }
	    }
	
	    // This can still be an instance in case of factory components
	    // but we'll count this as time spent rendering as the more common case.
	    if (process.env.NODE_ENV !== 'production') {
	      return measureLifeCyclePerf(function () {
	        return Component(publicProps, publicContext, updateQueue);
	      }, this._debugID, 'render');
	    } else {
	      return Component(publicProps, publicContext, updateQueue);
	    }
	  },
	
	  performInitialMountWithErrorHandling: function performInitialMountWithErrorHandling(renderedElement, hostParent, hostContainerInfo, transaction, context) {
	    var markup;
	    var checkpoint = transaction.checkpoint();
	    try {
	      markup = this.performInitialMount(renderedElement, hostParent, hostContainerInfo, transaction, context);
	    } catch (e) {
	      // Roll back to checkpoint, handle error (which may add items to the transaction), and take a new checkpoint
	      transaction.rollback(checkpoint);
	      this._instance.unstable_handleError(e);
	      if (this._pendingStateQueue) {
	        this._instance.state = this._processPendingState(this._instance.props, this._instance.context);
	      }
	      checkpoint = transaction.checkpoint();
	
	      this._renderedComponent.unmountComponent(true);
	      transaction.rollback(checkpoint);
	
	      // Try again - we've informed the component about the error, so they can render an error message this time.
	      // If this throws again, the error will bubble up (and can be caught by a higher error boundary).
	      markup = this.performInitialMount(renderedElement, hostParent, hostContainerInfo, transaction, context);
	    }
	    return markup;
	  },
	
	  performInitialMount: function performInitialMount(renderedElement, hostParent, hostContainerInfo, transaction, context) {
	    var inst = this._instance;
	
	    var debugID = 0;
	    if (process.env.NODE_ENV !== 'production') {
	      debugID = this._debugID;
	    }
	
	    if (inst.componentWillMount) {
	      if (process.env.NODE_ENV !== 'production') {
	        measureLifeCyclePerf(function () {
	          return inst.componentWillMount();
	        }, debugID, 'componentWillMount');
	      } else {
	        inst.componentWillMount();
	      }
	      // When mounting, calls to `setState` by `componentWillMount` will set
	      // `this._pendingStateQueue` without triggering a re-render.
	      if (this._pendingStateQueue) {
	        inst.state = this._processPendingState(inst.props, inst.context);
	      }
	    }
	
	    // If not a stateless component, we now render
	    if (renderedElement === undefined) {
	      renderedElement = this._renderValidatedComponent();
	    }
	
	    var nodeType = ReactNodeTypes.getType(renderedElement);
	    this._renderedNodeType = nodeType;
	    var child = this._instantiateReactComponent(renderedElement, nodeType !== ReactNodeTypes.EMPTY /* shouldHaveDebugID */
	    );
	    this._renderedComponent = child;
	
	    var markup = ReactReconciler.mountComponent(child, transaction, hostParent, hostContainerInfo, this._processChildContext(context), debugID);
	
	    if (process.env.NODE_ENV !== 'production') {
	      if (debugID !== 0) {
	        var childDebugIDs = child._debugID !== 0 ? [child._debugID] : [];
	        ReactInstrumentation.debugTool.onSetChildren(debugID, childDebugIDs);
	      }
	    }
	
	    return markup;
	  },
	
	  getHostNode: function getHostNode() {
	    return ReactReconciler.getHostNode(this._renderedComponent);
	  },
	
	  /**
	   * Releases any resources allocated by `mountComponent`.
	   *
	   * @final
	   * @internal
	   */
	  unmountComponent: function unmountComponent(safely) {
	    if (!this._renderedComponent) {
	      return;
	    }
	
	    var inst = this._instance;
	
	    if (inst.componentWillUnmount && !inst._calledComponentWillUnmount) {
	      inst._calledComponentWillUnmount = true;
	
	      if (safely) {
	        var name = this.getName() + '.componentWillUnmount()';
	        ReactErrorUtils.invokeGuardedCallback(name, inst.componentWillUnmount.bind(inst));
	      } else {
	        if (process.env.NODE_ENV !== 'production') {
	          measureLifeCyclePerf(function () {
	            return inst.componentWillUnmount();
	          }, this._debugID, 'componentWillUnmount');
	        } else {
	          inst.componentWillUnmount();
	        }
	      }
	    }
	
	    if (this._renderedComponent) {
	      ReactReconciler.unmountComponent(this._renderedComponent, safely);
	      this._renderedNodeType = null;
	      this._renderedComponent = null;
	      this._instance = null;
	    }
	
	    // Reset pending fields
	    // Even if this component is scheduled for another update in ReactUpdates,
	    // it would still be ignored because these fields are reset.
	    this._pendingStateQueue = null;
	    this._pendingReplaceState = false;
	    this._pendingForceUpdate = false;
	    this._pendingCallbacks = null;
	    this._pendingElement = null;
	
	    // These fields do not really need to be reset since this object is no
	    // longer accessible.
	    this._context = null;
	    this._rootNodeID = 0;
	    this._topLevelWrapper = null;
	
	    // Delete the reference from the instance to this internal representation
	    // which allow the internals to be properly cleaned up even if the user
	    // leaks a reference to the public instance.
	    ReactInstanceMap.remove(inst);
	
	    // Some existing components rely on inst.props even after they've been
	    // destroyed (in event handlers).
	    // TODO: inst.props = null;
	    // TODO: inst.state = null;
	    // TODO: inst.context = null;
	  },
	
	  /**
	   * Filters the context object to only contain keys specified in
	   * `contextTypes`
	   *
	   * @param {object} context
	   * @return {?object}
	   * @private
	   */
	  _maskContext: function _maskContext(context) {
	    var Component = this._currentElement.type;
	    var contextTypes = Component.contextTypes;
	    if (!contextTypes) {
	      return emptyObject;
	    }
	    var maskedContext = {};
	    for (var contextName in contextTypes) {
	      maskedContext[contextName] = context[contextName];
	    }
	    return maskedContext;
	  },
	
	  /**
	   * Filters the context object to only contain keys specified in
	   * `contextTypes`, and asserts that they are valid.
	   *
	   * @param {object} context
	   * @return {?object}
	   * @private
	   */
	  _processContext: function _processContext(context) {
	    var maskedContext = this._maskContext(context);
	    if (process.env.NODE_ENV !== 'production') {
	      var Component = this._currentElement.type;
	      if (Component.contextTypes) {
	        this._checkContextTypes(Component.contextTypes, maskedContext, 'context');
	      }
	    }
	    return maskedContext;
	  },
	
	  /**
	   * @param {object} currentContext
	   * @return {object}
	   * @private
	   */
	  _processChildContext: function _processChildContext(currentContext) {
	    var Component = this._currentElement.type;
	    var inst = this._instance;
	    var childContext;
	
	    if (inst.getChildContext) {
	      if (process.env.NODE_ENV !== 'production') {
	        ReactInstrumentation.debugTool.onBeginProcessingChildContext();
	        try {
	          childContext = inst.getChildContext();
	        } finally {
	          ReactInstrumentation.debugTool.onEndProcessingChildContext();
	        }
	      } else {
	        childContext = inst.getChildContext();
	      }
	    }
	
	    if (childContext) {
	      !(_typeof(Component.childContextTypes) === 'object') ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s.getChildContext(): childContextTypes must be defined in order to use getChildContext().', this.getName() || 'ReactCompositeComponent') : _prodInvariant('107', this.getName() || 'ReactCompositeComponent') : void 0;
	      if (process.env.NODE_ENV !== 'production') {
	        this._checkContextTypes(Component.childContextTypes, childContext, 'child context');
	      }
	      for (var name in childContext) {
	        !(name in Component.childContextTypes) ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s.getChildContext(): key "%s" is not defined in childContextTypes.', this.getName() || 'ReactCompositeComponent', name) : _prodInvariant('108', this.getName() || 'ReactCompositeComponent', name) : void 0;
	      }
	      return _assign({}, currentContext, childContext);
	    }
	    return currentContext;
	  },
	
	  /**
	   * Assert that the context types are valid
	   *
	   * @param {object} typeSpecs Map of context field to a ReactPropType
	   * @param {object} values Runtime values that need to be type-checked
	   * @param {string} location e.g. "prop", "context", "child context"
	   * @private
	   */
	  _checkContextTypes: function _checkContextTypes(typeSpecs, values, location) {
	    if (process.env.NODE_ENV !== 'production') {
	      checkReactTypeSpec(typeSpecs, values, location, this.getName(), null, this._debugID);
	    }
	  },
	
	  receiveComponent: function receiveComponent(nextElement, transaction, nextContext) {
	    var prevElement = this._currentElement;
	    var prevContext = this._context;
	
	    this._pendingElement = null;
	
	    this.updateComponent(transaction, prevElement, nextElement, prevContext, nextContext);
	  },
	
	  /**
	   * If any of `_pendingElement`, `_pendingStateQueue`, or `_pendingForceUpdate`
	   * is set, update the component.
	   *
	   * @param {ReactReconcileTransaction} transaction
	   * @internal
	   */
	  performUpdateIfNecessary: function performUpdateIfNecessary(transaction) {
	    if (this._pendingElement != null) {
	      ReactReconciler.receiveComponent(this, this._pendingElement, transaction, this._context);
	    } else if (this._pendingStateQueue !== null || this._pendingForceUpdate) {
	      this.updateComponent(transaction, this._currentElement, this._currentElement, this._context, this._context);
	    } else {
	      this._updateBatchNumber = null;
	    }
	  },
	
	  /**
	   * Perform an update to a mounted component. The componentWillReceiveProps and
	   * shouldComponentUpdate methods are called, then (assuming the update isn't
	   * skipped) the remaining update lifecycle methods are called and the DOM
	   * representation is updated.
	   *
	   * By default, this implements React's rendering and reconciliation algorithm.
	   * Sophisticated clients may wish to override this.
	   *
	   * @param {ReactReconcileTransaction} transaction
	   * @param {ReactElement} prevParentElement
	   * @param {ReactElement} nextParentElement
	   * @internal
	   * @overridable
	   */
	  updateComponent: function updateComponent(transaction, prevParentElement, nextParentElement, prevUnmaskedContext, nextUnmaskedContext) {
	    var inst = this._instance;
	    !(inst != null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Attempted to update component `%s` that has already been unmounted (or failed to mount).', this.getName() || 'ReactCompositeComponent') : _prodInvariant('136', this.getName() || 'ReactCompositeComponent') : void 0;
	
	    var willReceive = false;
	    var nextContext;
	
	    // Determine if the context has changed or not
	    if (this._context === nextUnmaskedContext) {
	      nextContext = inst.context;
	    } else {
	      nextContext = this._processContext(nextUnmaskedContext);
	      willReceive = true;
	    }
	
	    var prevProps = prevParentElement.props;
	    var nextProps = nextParentElement.props;
	
	    // Not a simple state update but a props update
	    if (prevParentElement !== nextParentElement) {
	      willReceive = true;
	    }
	
	    // An update here will schedule an update but immediately set
	    // _pendingStateQueue which will ensure that any state updates gets
	    // immediately reconciled instead of waiting for the next batch.
	    if (willReceive && inst.componentWillReceiveProps) {
	      if (process.env.NODE_ENV !== 'production') {
	        measureLifeCyclePerf(function () {
	          return inst.componentWillReceiveProps(nextProps, nextContext);
	        }, this._debugID, 'componentWillReceiveProps');
	      } else {
	        inst.componentWillReceiveProps(nextProps, nextContext);
	      }
	    }
	
	    var nextState = this._processPendingState(nextProps, nextContext);
	    var shouldUpdate = true;
	
	    if (!this._pendingForceUpdate) {
	      if (inst.shouldComponentUpdate) {
	        if (process.env.NODE_ENV !== 'production') {
	          shouldUpdate = measureLifeCyclePerf(function () {
	            return inst.shouldComponentUpdate(nextProps, nextState, nextContext);
	          }, this._debugID, 'shouldComponentUpdate');
	        } else {
	          shouldUpdate = inst.shouldComponentUpdate(nextProps, nextState, nextContext);
	        }
	      } else {
	        if (this._compositeType === CompositeTypes.PureClass) {
	          shouldUpdate = !shallowEqual(prevProps, nextProps) || !shallowEqual(inst.state, nextState);
	        }
	      }
	    }
	
	    if (process.env.NODE_ENV !== 'production') {
	      process.env.NODE_ENV !== 'production' ? warning(shouldUpdate !== undefined, '%s.shouldComponentUpdate(): Returned undefined instead of a ' + 'boolean value. Make sure to return true or false.', this.getName() || 'ReactCompositeComponent') : void 0;
	    }
	
	    this._updateBatchNumber = null;
	    if (shouldUpdate) {
	      this._pendingForceUpdate = false;
	      // Will set `this.props`, `this.state` and `this.context`.
	      this._performComponentUpdate(nextParentElement, nextProps, nextState, nextContext, transaction, nextUnmaskedContext);
	    } else {
	      // If it's determined that a component should not update, we still want
	      // to set props and state but we shortcut the rest of the update.
	      this._currentElement = nextParentElement;
	      this._context = nextUnmaskedContext;
	      inst.props = nextProps;
	      inst.state = nextState;
	      inst.context = nextContext;
	    }
	  },
	
	  _processPendingState: function _processPendingState(props, context) {
	    var inst = this._instance;
	    var queue = this._pendingStateQueue;
	    var replace = this._pendingReplaceState;
	    this._pendingReplaceState = false;
	    this._pendingStateQueue = null;
	
	    if (!queue) {
	      return inst.state;
	    }
	
	    if (replace && queue.length === 1) {
	      return queue[0];
	    }
	
	    var nextState = _assign({}, replace ? queue[0] : inst.state);
	    for (var i = replace ? 1 : 0; i < queue.length; i++) {
	      var partial = queue[i];
	      _assign(nextState, typeof partial === 'function' ? partial.call(inst, nextState, props, context) : partial);
	    }
	
	    return nextState;
	  },
	
	  /**
	   * Merges new props and state, notifies delegate methods of update and
	   * performs update.
	   *
	   * @param {ReactElement} nextElement Next element
	   * @param {object} nextProps Next public object to set as properties.
	   * @param {?object} nextState Next object to set as state.
	   * @param {?object} nextContext Next public object to set as context.
	   * @param {ReactReconcileTransaction} transaction
	   * @param {?object} unmaskedContext
	   * @private
	   */
	  _performComponentUpdate: function _performComponentUpdate(nextElement, nextProps, nextState, nextContext, transaction, unmaskedContext) {
	    var _this2 = this;
	
	    var inst = this._instance;
	
	    var hasComponentDidUpdate = Boolean(inst.componentDidUpdate);
	    var prevProps;
	    var prevState;
	    var prevContext;
	    if (hasComponentDidUpdate) {
	      prevProps = inst.props;
	      prevState = inst.state;
	      prevContext = inst.context;
	    }
	
	    if (inst.componentWillUpdate) {
	      if (process.env.NODE_ENV !== 'production') {
	        measureLifeCyclePerf(function () {
	          return inst.componentWillUpdate(nextProps, nextState, nextContext);
	        }, this._debugID, 'componentWillUpdate');
	      } else {
	        inst.componentWillUpdate(nextProps, nextState, nextContext);
	      }
	    }
	
	    this._currentElement = nextElement;
	    this._context = unmaskedContext;
	    inst.props = nextProps;
	    inst.state = nextState;
	    inst.context = nextContext;
	
	    this._updateRenderedComponent(transaction, unmaskedContext);
	
	    if (hasComponentDidUpdate) {
	      if (process.env.NODE_ENV !== 'production') {
	        transaction.getReactMountReady().enqueue(function () {
	          measureLifeCyclePerf(inst.componentDidUpdate.bind(inst, prevProps, prevState, prevContext), _this2._debugID, 'componentDidUpdate');
	        });
	      } else {
	        transaction.getReactMountReady().enqueue(inst.componentDidUpdate.bind(inst, prevProps, prevState, prevContext), inst);
	      }
	    }
	  },
	
	  /**
	   * Call the component's `render` method and update the DOM accordingly.
	   *
	   * @param {ReactReconcileTransaction} transaction
	   * @internal
	   */
	  _updateRenderedComponent: function _updateRenderedComponent(transaction, context) {
	    var prevComponentInstance = this._renderedComponent;
	    var prevRenderedElement = prevComponentInstance._currentElement;
	    var nextRenderedElement = this._renderValidatedComponent();
	
	    var debugID = 0;
	    if (process.env.NODE_ENV !== 'production') {
	      debugID = this._debugID;
	    }
	
	    if (shouldUpdateReactComponent(prevRenderedElement, nextRenderedElement)) {
	      ReactReconciler.receiveComponent(prevComponentInstance, nextRenderedElement, transaction, this._processChildContext(context));
	    } else {
	      var oldHostNode = ReactReconciler.getHostNode(prevComponentInstance);
	      ReactReconciler.unmountComponent(prevComponentInstance, false);
	
	      var nodeType = ReactNodeTypes.getType(nextRenderedElement);
	      this._renderedNodeType = nodeType;
	      var child = this._instantiateReactComponent(nextRenderedElement, nodeType !== ReactNodeTypes.EMPTY /* shouldHaveDebugID */
	      );
	      this._renderedComponent = child;
	
	      var nextMarkup = ReactReconciler.mountComponent(child, transaction, this._hostParent, this._hostContainerInfo, this._processChildContext(context), debugID);
	
	      if (process.env.NODE_ENV !== 'production') {
	        if (debugID !== 0) {
	          var childDebugIDs = child._debugID !== 0 ? [child._debugID] : [];
	          ReactInstrumentation.debugTool.onSetChildren(debugID, childDebugIDs);
	        }
	      }
	
	      this._replaceNodeWithMarkup(oldHostNode, nextMarkup, prevComponentInstance);
	    }
	  },
	
	  /**
	   * Overridden in shallow rendering.
	   *
	   * @protected
	   */
	  _replaceNodeWithMarkup: function _replaceNodeWithMarkup(oldHostNode, nextMarkup, prevInstance) {
	    ReactComponentEnvironment.replaceNodeWithMarkup(oldHostNode, nextMarkup, prevInstance);
	  },
	
	  /**
	   * @protected
	   */
	  _renderValidatedComponentWithoutOwnerOrContext: function _renderValidatedComponentWithoutOwnerOrContext() {
	    var inst = this._instance;
	    var renderedElement;
	
	    if (process.env.NODE_ENV !== 'production') {
	      renderedElement = measureLifeCyclePerf(function () {
	        return inst.render();
	      }, this._debugID, 'render');
	    } else {
	      renderedElement = inst.render();
	    }
	
	    if (process.env.NODE_ENV !== 'production') {
	      // We allow auto-mocks to proceed as if they're returning null.
	      if (renderedElement === undefined && inst.render._isMockFunction) {
	        // This is probably bad practice. Consider warning here and
	        // deprecating this convenience.
	        renderedElement = null;
	      }
	    }
	
	    return renderedElement;
	  },
	
	  /**
	   * @private
	   */
	  _renderValidatedComponent: function _renderValidatedComponent() {
	    var renderedElement;
	    if (process.env.NODE_ENV !== 'production' || this._compositeType !== CompositeTypes.StatelessFunctional) {
	      ReactCurrentOwner.current = this;
	      try {
	        renderedElement = this._renderValidatedComponentWithoutOwnerOrContext();
	      } finally {
	        ReactCurrentOwner.current = null;
	      }
	    } else {
	      renderedElement = this._renderValidatedComponentWithoutOwnerOrContext();
	    }
	    !(
	    // TODO: An `isValidNode` function would probably be more appropriate
	    renderedElement === null || renderedElement === false || React.isValidElement(renderedElement)) ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s.render(): A valid React element (or null) must be returned. You may have returned undefined, an array or some other invalid object.', this.getName() || 'ReactCompositeComponent') : _prodInvariant('109', this.getName() || 'ReactCompositeComponent') : void 0;
	
	    return renderedElement;
	  },
	
	  /**
	   * Lazily allocates the refs object and stores `component` as `ref`.
	   *
	   * @param {string} ref Reference name.
	   * @param {component} component Component to store as `ref`.
	   * @final
	   * @private
	   */
	  attachRef: function attachRef(ref, component) {
	    var inst = this.getPublicInstance();
	    !(inst != null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Stateless function components cannot have refs.') : _prodInvariant('110') : void 0;
	    var publicComponentInstance = component.getPublicInstance();
	    if (process.env.NODE_ENV !== 'production') {
	      var componentName = component && component.getName ? component.getName() : 'a component';
	      process.env.NODE_ENV !== 'production' ? warning(publicComponentInstance != null || component._compositeType !== CompositeTypes.StatelessFunctional, 'Stateless function components cannot be given refs ' + '(See ref "%s" in %s created by %s). ' + 'Attempts to access this ref will fail.', ref, componentName, this.getName()) : void 0;
	    }
	    var refs = inst.refs === emptyObject ? inst.refs = {} : inst.refs;
	    refs[ref] = publicComponentInstance;
	  },
	
	  /**
	   * Detaches a reference name.
	   *
	   * @param {string} ref Name to dereference.
	   * @final
	   * @private
	   */
	  detachRef: function detachRef(ref) {
	    var refs = this.getPublicInstance().refs;
	    delete refs[ref];
	  },
	
	  /**
	   * Get a text description of the component that can be used to identify it
	   * in error messages.
	   * @return {string} The name or null.
	   * @internal
	   */
	  getName: function getName() {
	    var type = this._currentElement.type;
	    var constructor = this._instance && this._instance.constructor;
	    return type.displayName || constructor && constructor.displayName || type.name || constructor && constructor.name || null;
	  },
	
	  /**
	   * Get the publicly accessible representation of this component - i.e. what
	   * is exposed by refs and returned by render. Can be null for stateless
	   * components.
	   *
	   * @return {ReactComponent} the public component instance.
	   * @internal
	   */
	  getPublicInstance: function getPublicInstance() {
	    var inst = this._instance;
	    if (this._compositeType === CompositeTypes.StatelessFunctional) {
	      return null;
	    }
	    return inst;
	  },
	
	  // Stub
	  _instantiateReactComponent: null
	
	};
	
	module.exports = ReactCompositeComponent;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ }),
/* 124 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */
	
	'use strict';
	
	var _prodInvariant = __webpack_require__(39);
	
	var React = __webpack_require__(2);
	
	var invariant = __webpack_require__(8);
	
	var ReactNodeTypes = {
	  HOST: 0,
	  COMPOSITE: 1,
	  EMPTY: 2,
	
	  getType: function getType(node) {
	    if (node === null || node === false) {
	      return ReactNodeTypes.EMPTY;
	    } else if (React.isValidElement(node)) {
	      if (typeof node.type === 'function') {
	        return ReactNodeTypes.COMPOSITE;
	      } else {
	        return ReactNodeTypes.HOST;
	      }
	    }
	     true ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Unexpected node: %s', node) : _prodInvariant('26', node) : void 0;
	  }
	};
	
	module.exports = ReactNodeTypes;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ }),
/* 125 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
	
	var _prodInvariant = __webpack_require__(39);
	
	var ReactPropTypeLocationNames = __webpack_require__(126);
	var ReactPropTypesSecret = __webpack_require__(114);
	
	var invariant = __webpack_require__(8);
	var warning = __webpack_require__(11);
	
	var ReactComponentTreeHook;
	
	if (typeof process !== 'undefined' && process.env && process.env.NODE_ENV === 'test') {
	  // Temporary hack.
	  // Inline requires don't work well with Jest:
	  // https://github.com/facebook/react/issues/7240
	  // Remove the inline requires when we don't need them anymore:
	  // https://github.com/facebook/react/pull/7178
	  ReactComponentTreeHook = __webpack_require__(26);
	}
	
	var loggedTypeFailures = {};
	
	/**
	 * Assert that the values match with the type specs.
	 * Error messages are memorized and will only be shown once.
	 *
	 * @param {object} typeSpecs Map of name to a ReactPropType
	 * @param {object} values Runtime values that need to be type-checked
	 * @param {string} location e.g. "prop", "context", "child context"
	 * @param {string} componentName Name of the component for error messages.
	 * @param {?object} element The React element that is being type-checked
	 * @param {?number} debugID The React component instance that is being type-checked
	 * @private
	 */
	function checkReactTypeSpec(typeSpecs, values, location, componentName, element, debugID) {
	  for (var typeSpecName in typeSpecs) {
	    if (typeSpecs.hasOwnProperty(typeSpecName)) {
	      var error;
	      // Prop type validation may throw. In case they do, we don't want to
	      // fail the render phase where it didn't fail before. So we log it.
	      // After these have been cleaned up, we'll let them throw.
	      try {
	        // This is intentionally an invariant that gets caught. It's the same
	        // behavior as without this statement except with a better message.
	        !(typeof typeSpecs[typeSpecName] === 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s: %s type `%s` is invalid; it must be a function, usually from React.PropTypes.', componentName || 'React class', ReactPropTypeLocationNames[location], typeSpecName) : _prodInvariant('84', componentName || 'React class', ReactPropTypeLocationNames[location], typeSpecName) : void 0;
	        error = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, ReactPropTypesSecret);
	      } catch (ex) {
	        error = ex;
	      }
	      process.env.NODE_ENV !== 'production' ? warning(!error || error instanceof Error, '%s: type specification of %s `%s` is invalid; the type checker ' + 'function must return `null` or an `Error` but returned a %s. ' + 'You may have forgotten to pass an argument to the type checker ' + 'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' + 'shape all require an argument).', componentName || 'React class', ReactPropTypeLocationNames[location], typeSpecName, typeof error === 'undefined' ? 'undefined' : _typeof(error)) : void 0;
	      if (error instanceof Error && !(error.message in loggedTypeFailures)) {
	        // Only monitor this failure once because there tends to be a lot of the
	        // same error.
	        loggedTypeFailures[error.message] = true;
	
	        var componentStackInfo = '';
	
	        if (process.env.NODE_ENV !== 'production') {
	          if (!ReactComponentTreeHook) {
	            ReactComponentTreeHook = __webpack_require__(26);
	          }
	          if (debugID !== null) {
	            componentStackInfo = ReactComponentTreeHook.getStackAddendumByID(debugID);
	          } else if (element !== null) {
	            componentStackInfo = ReactComponentTreeHook.getCurrentStackAddendum(element);
	          }
	        }
	
	        process.env.NODE_ENV !== 'production' ? warning(false, 'Failed %s type: %s%s', location, error.message, componentStackInfo) : void 0;
	      }
	    }
	  }
	}
	
	module.exports = checkReactTypeSpec;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ }),
/* 126 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */
	
	'use strict';
	
	var ReactPropTypeLocationNames = {};
	
	if (process.env.NODE_ENV !== 'production') {
	  ReactPropTypeLocationNames = {
	    prop: 'prop',
	    context: 'context',
	    childContext: 'child context'
	  };
	}
	
	module.exports = ReactPropTypeLocationNames;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ }),
/* 127 */
/***/ (function(module, exports) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @typechecks
	 * 
	 */
	
	/*eslint-disable no-self-compare */
	
	'use strict';
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
	
	var hasOwnProperty = Object.prototype.hasOwnProperty;
	
	/**
	 * inlined Object.is polyfill to avoid requiring consumers ship their own
	 * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is
	 */
	function is(x, y) {
	  // SameValue algorithm
	  if (x === y) {
	    // Steps 1-5, 7-10
	    // Steps 6.b-6.e: +0 != -0
	    // Added the nonzero y check to make Flow happy, but it is redundant
	    return x !== 0 || y !== 0 || 1 / x === 1 / y;
	  } else {
	    // Step 6.a: NaN == NaN
	    return x !== x && y !== y;
	  }
	}
	
	/**
	 * Performs equality by iterating through keys on an object and returning false
	 * when any key has values which are not strictly equal between the arguments.
	 * Returns true when the values of all keys are strictly equal.
	 */
	function shallowEqual(objA, objB) {
	  if (is(objA, objB)) {
	    return true;
	  }
	
	  if ((typeof objA === 'undefined' ? 'undefined' : _typeof(objA)) !== 'object' || objA === null || (typeof objB === 'undefined' ? 'undefined' : _typeof(objB)) !== 'object' || objB === null) {
	    return false;
	  }
	
	  var keysA = Object.keys(objA);
	  var keysB = Object.keys(objB);
	
	  if (keysA.length !== keysB.length) {
	    return false;
	  }
	
	  // Test for A's keys different from B.
	  for (var i = 0; i < keysA.length; i++) {
	    if (!hasOwnProperty.call(objB, keysA[i]) || !is(objA[keysA[i]], objB[keysA[i]])) {
	      return false;
	    }
	  }
	
	  return true;
	}
	
	module.exports = shallowEqual;

/***/ }),
/* 128 */
/***/ (function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	/**
	 * Given a `prevElement` and `nextElement`, determines if the existing
	 * instance should be updated as opposed to being destroyed or replaced by a new
	 * instance. Both arguments are elements. This ensures that this logic can
	 * operate on stateless trees without any backing instance.
	 *
	 * @param {?object} prevElement
	 * @param {?object} nextElement
	 * @return {boolean} True if the existing instance should be updated.
	 * @protected
	 */
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
	
	function shouldUpdateReactComponent(prevElement, nextElement) {
	  var prevEmpty = prevElement === null || prevElement === false;
	  var nextEmpty = nextElement === null || nextElement === false;
	  if (prevEmpty || nextEmpty) {
	    return prevEmpty === nextEmpty;
	  }
	
	  var prevType = typeof prevElement === 'undefined' ? 'undefined' : _typeof(prevElement);
	  var nextType = typeof nextElement === 'undefined' ? 'undefined' : _typeof(nextElement);
	  if (prevType === 'string' || prevType === 'number') {
	    return nextType === 'string' || nextType === 'number';
	  } else {
	    return nextType === 'object' && prevElement.type === nextElement.type && prevElement.key === nextElement.key;
	  }
	}
	
	module.exports = shouldUpdateReactComponent;

/***/ }),
/* 129 */
/***/ (function(module, exports) {

	/**
	 * Copyright 2014-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var emptyComponentFactory;
	
	var ReactEmptyComponentInjection = {
	  injectEmptyComponentFactory: function injectEmptyComponentFactory(factory) {
	    emptyComponentFactory = factory;
	  }
	};
	
	var ReactEmptyComponent = {
	  create: function create(instantiate) {
	    return emptyComponentFactory(instantiate);
	  }
	};
	
	ReactEmptyComponent.injection = ReactEmptyComponentInjection;
	
	module.exports = ReactEmptyComponent;

/***/ }),
/* 130 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2014-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var _prodInvariant = __webpack_require__(39);
	
	var invariant = __webpack_require__(8);
	
	var genericComponentClass = null;
	var textComponentClass = null;
	
	var ReactHostComponentInjection = {
	  // This accepts a class that receives the tag string. This is a catch all
	  // that can render any kind of tag.
	  injectGenericComponentClass: function injectGenericComponentClass(componentClass) {
	    genericComponentClass = componentClass;
	  },
	  // This accepts a text component class that takes the text string to be
	  // rendered as props.
	  injectTextComponentClass: function injectTextComponentClass(componentClass) {
	    textComponentClass = componentClass;
	  }
	};
	
	/**
	 * Get a host internal component class for a specific tag.
	 *
	 * @param {ReactElement} element The element to create.
	 * @return {function} The internal class constructor function.
	 */
	function createInternalComponent(element) {
	  !genericComponentClass ? process.env.NODE_ENV !== 'production' ? invariant(false, 'There is no registered component for the tag %s', element.type) : _prodInvariant('111', element.type) : void 0;
	  return new genericComponentClass(element);
	}
	
	/**
	 * @param {ReactText} text
	 * @return {ReactComponent}
	 */
	function createInstanceForText(text) {
	  return new textComponentClass(text);
	}
	
	/**
	 * @param {ReactComponent} component
	 * @return {boolean}
	 */
	function isTextComponent(component) {
	  return component instanceof textComponentClass;
	}
	
	var ReactHostComponent = {
	  createInternalComponent: createInternalComponent,
	  createInstanceForText: createInstanceForText,
	  isTextComponent: isTextComponent,
	  injection: ReactHostComponentInjection
	};
	
	module.exports = ReactHostComponent;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ }),
/* 131 */
/***/ (function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */
	
	'use strict';
	
	var nextDebugID = 1;
	
	function getNextDebugID() {
	  return nextDebugID++;
	}
	
	module.exports = getNextDebugID;

/***/ }),
/* 132 */
/***/ (function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */
	
	'use strict';
	
	/**
	 * Escape and wrap key so it is safe to use as a reactid
	 *
	 * @param {string} key to be escaped.
	 * @return {string} the escaped key.
	 */
	
	function escape(key) {
	  var escapeRegex = /[=:]/g;
	  var escaperLookup = {
	    '=': '=0',
	    ':': '=2'
	  };
	  var escapedString = ('' + key).replace(escapeRegex, function (match) {
	    return escaperLookup[match];
	  });
	
	  return '$' + escapedString;
	}
	
	/**
	 * Unescape and unwrap key for human-readable display
	 *
	 * @param {string} key to unescape.
	 * @return {string} the unescaped key.
	 */
	function unescape(key) {
	  var unescapeRegex = /(=0|=2)/g;
	  var unescaperLookup = {
	    '=0': '=',
	    '=2': ':'
	  };
	  var keySubstring = key[0] === '.' && key[1] === '$' ? key.substring(2) : key.substring(1);
	
	  return ('' + keySubstring).replace(unescapeRegex, function (match) {
	    return unescaperLookup[match];
	  });
	}
	
	var KeyEscapeUtils = {
	  escape: escape,
	  unescape: unescape
	};
	
	module.exports = KeyEscapeUtils;

/***/ }),
/* 133 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
	
	var _prodInvariant = __webpack_require__(39);
	
	var ReactCurrentOwner = __webpack_require__(10);
	var REACT_ELEMENT_TYPE = __webpack_require__(134);
	
	var getIteratorFn = __webpack_require__(135);
	var invariant = __webpack_require__(8);
	var KeyEscapeUtils = __webpack_require__(132);
	var warning = __webpack_require__(11);
	
	var SEPARATOR = '.';
	var SUBSEPARATOR = ':';
	
	/**
	 * This is inlined from ReactElement since this file is shared between
	 * isomorphic and renderers. We could extract this to a
	 *
	 */
	
	/**
	 * TODO: Test that a single child and an array with one item have the same key
	 * pattern.
	 */
	
	var didWarnAboutMaps = false;
	
	/**
	 * Generate a key string that identifies a component within a set.
	 *
	 * @param {*} component A component that could contain a manual key.
	 * @param {number} index Index that is used if a manual key is not provided.
	 * @return {string}
	 */
	function getComponentKey(component, index) {
	  // Do some typechecking here since we call this blindly. We want to ensure
	  // that we don't block potential future ES APIs.
	  if (component && (typeof component === 'undefined' ? 'undefined' : _typeof(component)) === 'object' && component.key != null) {
	    // Explicit key
	    return KeyEscapeUtils.escape(component.key);
	  }
	  // Implicit key determined by the index in the set
	  return index.toString(36);
	}
	
	/**
	 * @param {?*} children Children tree container.
	 * @param {!string} nameSoFar Name of the key path so far.
	 * @param {!function} callback Callback to invoke with each child found.
	 * @param {?*} traverseContext Used to pass information throughout the traversal
	 * process.
	 * @return {!number} The number of children in this subtree.
	 */
	function traverseAllChildrenImpl(children, nameSoFar, callback, traverseContext) {
	  var type = typeof children === 'undefined' ? 'undefined' : _typeof(children);
	
	  if (type === 'undefined' || type === 'boolean') {
	    // All of the above are perceived as null.
	    children = null;
	  }
	
	  if (children === null || type === 'string' || type === 'number' ||
	  // The following is inlined from ReactElement. This means we can optimize
	  // some checks. React Fiber also inlines this logic for similar purposes.
	  type === 'object' && children.$$typeof === REACT_ELEMENT_TYPE) {
	    callback(traverseContext, children,
	    // If it's the only child, treat the name as if it was wrapped in an array
	    // so that it's consistent if the number of children grows.
	    nameSoFar === '' ? SEPARATOR + getComponentKey(children, 0) : nameSoFar);
	    return 1;
	  }
	
	  var child;
	  var nextName;
	  var subtreeCount = 0; // Count of children found in the current subtree.
	  var nextNamePrefix = nameSoFar === '' ? SEPARATOR : nameSoFar + SUBSEPARATOR;
	
	  if (Array.isArray(children)) {
	    for (var i = 0; i < children.length; i++) {
	      child = children[i];
	      nextName = nextNamePrefix + getComponentKey(child, i);
	      subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
	    }
	  } else {
	    var iteratorFn = getIteratorFn(children);
	    if (iteratorFn) {
	      var iterator = iteratorFn.call(children);
	      var step;
	      if (iteratorFn !== children.entries) {
	        var ii = 0;
	        while (!(step = iterator.next()).done) {
	          child = step.value;
	          nextName = nextNamePrefix + getComponentKey(child, ii++);
	          subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
	        }
	      } else {
	        if (process.env.NODE_ENV !== 'production') {
	          var mapsAsChildrenAddendum = '';
	          if (ReactCurrentOwner.current) {
	            var mapsAsChildrenOwnerName = ReactCurrentOwner.current.getName();
	            if (mapsAsChildrenOwnerName) {
	              mapsAsChildrenAddendum = ' Check the render method of `' + mapsAsChildrenOwnerName + '`.';
	            }
	          }
	          process.env.NODE_ENV !== 'production' ? warning(didWarnAboutMaps, 'Using Maps as children is not yet fully supported. It is an ' + 'experimental feature that might be removed. Convert it to a ' + 'sequence / iterable of keyed ReactElements instead.%s', mapsAsChildrenAddendum) : void 0;
	          didWarnAboutMaps = true;
	        }
	        // Iterator will provide entry [k,v] tuples rather than values.
	        while (!(step = iterator.next()).done) {
	          var entry = step.value;
	          if (entry) {
	            child = entry[1];
	            nextName = nextNamePrefix + KeyEscapeUtils.escape(entry[0]) + SUBSEPARATOR + getComponentKey(child, 0);
	            subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
	          }
	        }
	      }
	    } else if (type === 'object') {
	      var addendum = '';
	      if (process.env.NODE_ENV !== 'production') {
	        addendum = ' If you meant to render a collection of children, use an array ' + 'instead or wrap the object using createFragment(object) from the ' + 'React add-ons.';
	        if (children._isReactElement) {
	          addendum = ' It looks like you\'re using an element created by a different ' + 'version of React. Make sure to use only one copy of React.';
	        }
	        if (ReactCurrentOwner.current) {
	          var name = ReactCurrentOwner.current.getName();
	          if (name) {
	            addendum += ' Check the render method of `' + name + '`.';
	          }
	        }
	      }
	      var childrenString = String(children);
	       true ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Objects are not valid as a React child (found: %s).%s', childrenString === '[object Object]' ? 'object with keys {' + Object.keys(children).join(', ') + '}' : childrenString, addendum) : _prodInvariant('31', childrenString === '[object Object]' ? 'object with keys {' + Object.keys(children).join(', ') + '}' : childrenString, addendum) : void 0;
	    }
	  }
	
	  return subtreeCount;
	}
	
	/**
	 * Traverses children that are typically specified as `props.children`, but
	 * might also be specified through attributes:
	 *
	 * - `traverseAllChildren(this.props.children, ...)`
	 * - `traverseAllChildren(this.props.leftPanelChildren, ...)`
	 *
	 * The `traverseContext` is an optional argument that is passed through the
	 * entire traversal. It can be used to store accumulations or anything else that
	 * the callback might find relevant.
	 *
	 * @param {?*} children Children tree object.
	 * @param {!function} callback To invoke upon traversing each child.
	 * @param {?*} traverseContext Context for traversal.
	 * @return {!number} The number of children in this subtree.
	 */
	function traverseAllChildren(children, callback, traverseContext) {
	  if (children == null) {
	    return 0;
	  }
	
	  return traverseAllChildrenImpl(children, '', callback, traverseContext);
	}
	
	module.exports = traverseAllChildren;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ }),
/* 134 */
/***/ (function(module, exports) {

	/**
	 * Copyright 2014-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */
	
	'use strict';
	
	// The Symbol used to tag the ReactElement type. If there is no native Symbol
	// nor polyfill, then a plain number is used for performance.
	
	var REACT_ELEMENT_TYPE = typeof Symbol === 'function' && Symbol['for'] && Symbol['for']('react.element') || 0xeac7;
	
	module.exports = REACT_ELEMENT_TYPE;

/***/ }),
/* 135 */
/***/ (function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */
	
	'use strict';
	
	/* global Symbol */
	
	var ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;
	var FAUX_ITERATOR_SYMBOL = '@@iterator'; // Before Symbol spec.
	
	/**
	 * Returns the iterator method function contained on the iterable object.
	 *
	 * Be sure to invoke the function with the iterable as context:
	 *
	 *     var iteratorFn = getIteratorFn(myIterable);
	 *     if (iteratorFn) {
	 *       var iterator = iteratorFn.call(myIterable);
	 *       ...
	 *     }
	 *
	 * @param {?object} maybeIterable
	 * @return {?function}
	 */
	function getIteratorFn(maybeIterable) {
	  var iteratorFn = maybeIterable && (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL]);
	  if (typeof iteratorFn === 'function') {
	    return iteratorFn;
	  }
	}
	
	module.exports = getIteratorFn;

/***/ }),
/* 136 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */
	
	'use strict';
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
	
	var KeyEscapeUtils = __webpack_require__(132);
	var traverseAllChildren = __webpack_require__(133);
	var warning = __webpack_require__(11);
	
	var ReactComponentTreeHook;
	
	if (typeof process !== 'undefined' && process.env && process.env.NODE_ENV === 'test') {
	  // Temporary hack.
	  // Inline requires don't work well with Jest:
	  // https://github.com/facebook/react/issues/7240
	  // Remove the inline requires when we don't need them anymore:
	  // https://github.com/facebook/react/pull/7178
	  ReactComponentTreeHook = __webpack_require__(26);
	}
	
	/**
	 * @param {function} traverseContext Context passed through traversal.
	 * @param {?ReactComponent} child React child component.
	 * @param {!string} name String name of key path to child.
	 * @param {number=} selfDebugID Optional debugID of the current internal instance.
	 */
	function flattenSingleChildIntoContext(traverseContext, child, name, selfDebugID) {
	  // We found a component instance.
	  if (traverseContext && (typeof traverseContext === 'undefined' ? 'undefined' : _typeof(traverseContext)) === 'object') {
	    var result = traverseContext;
	    var keyUnique = result[name] === undefined;
	    if (process.env.NODE_ENV !== 'production') {
	      if (!ReactComponentTreeHook) {
	        ReactComponentTreeHook = __webpack_require__(26);
	      }
	      if (!keyUnique) {
	        process.env.NODE_ENV !== 'production' ? warning(false, 'flattenChildren(...): Encountered two children with the same key, ' + '`%s`. Child keys must be unique; when two children share a key, only ' + 'the first child will be used.%s', KeyEscapeUtils.unescape(name), ReactComponentTreeHook.getStackAddendumByID(selfDebugID)) : void 0;
	      }
	    }
	    if (keyUnique && child != null) {
	      result[name] = child;
	    }
	  }
	}
	
	/**
	 * Flattens children that are typically specified as `props.children`. Any null
	 * children will not be included in the resulting object.
	 * @return {!object} flattened children keyed by name.
	 */
	function flattenChildren(children, selfDebugID) {
	  if (children == null) {
	    return children;
	  }
	  var result = {};
	
	  if (process.env.NODE_ENV !== 'production') {
	    traverseAllChildren(children, function (traverseContext, child, name) {
	      return flattenSingleChildIntoContext(traverseContext, child, name, selfDebugID);
	    }, result);
	  } else {
	    traverseAllChildren(children, flattenSingleChildIntoContext, result);
	  }
	  return result;
	}
	
	module.exports = flattenChildren;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ }),
/* 137 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2014-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var _assign = __webpack_require__(4);
	
	var PooledClass = __webpack_require__(54);
	var Transaction = __webpack_require__(72);
	var ReactInstrumentation = __webpack_require__(66);
	var ReactServerUpdateQueue = __webpack_require__(138);
	
	/**
	 * Executed within the scope of the `Transaction` instance. Consider these as
	 * being member methods, but with an implied ordering while being isolated from
	 * each other.
	 */
	var TRANSACTION_WRAPPERS = [];
	
	if (process.env.NODE_ENV !== 'production') {
	  TRANSACTION_WRAPPERS.push({
	    initialize: ReactInstrumentation.debugTool.onBeginFlush,
	    close: ReactInstrumentation.debugTool.onEndFlush
	  });
	}
	
	var noopCallbackQueue = {
	  enqueue: function enqueue() {}
	};
	
	/**
	 * @class ReactServerRenderingTransaction
	 * @param {boolean} renderToStaticMarkup
	 */
	function ReactServerRenderingTransaction(renderToStaticMarkup) {
	  this.reinitializeTransaction();
	  this.renderToStaticMarkup = renderToStaticMarkup;
	  this.useCreateElement = false;
	  this.updateQueue = new ReactServerUpdateQueue(this);
	}
	
	var Mixin = {
	  /**
	   * @see Transaction
	   * @abstract
	   * @final
	   * @return {array} Empty list of operation wrap procedures.
	   */
	  getTransactionWrappers: function getTransactionWrappers() {
	    return TRANSACTION_WRAPPERS;
	  },
	
	  /**
	   * @return {object} The queue to collect `onDOMReady` callbacks with.
	   */
	  getReactMountReady: function getReactMountReady() {
	    return noopCallbackQueue;
	  },
	
	  /**
	   * @return {object} The queue to collect React async events.
	   */
	  getUpdateQueue: function getUpdateQueue() {
	    return this.updateQueue;
	  },
	
	  /**
	   * `PooledClass` looks for this, and will invoke this before allowing this
	   * instance to be reused.
	   */
	  destructor: function destructor() {},
	
	  checkpoint: function checkpoint() {},
	
	  rollback: function rollback() {}
	};
	
	_assign(ReactServerRenderingTransaction.prototype, Transaction, Mixin);
	
	PooledClass.addPoolingTo(ReactServerRenderingTransaction);
	
	module.exports = ReactServerRenderingTransaction;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ }),
/* 138 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2015-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */
	
	'use strict';
	
	function _classCallCheck(instance, Constructor) {
	  if (!(instance instanceof Constructor)) {
	    throw new TypeError("Cannot call a class as a function");
	  }
	}
	
	var ReactUpdateQueue = __webpack_require__(139);
	
	var warning = __webpack_require__(11);
	
	function warnNoop(publicInstance, callerName) {
	  if (process.env.NODE_ENV !== 'production') {
	    var constructor = publicInstance.constructor;
	    process.env.NODE_ENV !== 'production' ? warning(false, '%s(...): Can only update a mounting component. ' + 'This usually means you called %s() outside componentWillMount() on the server. ' + 'This is a no-op. Please check the code for the %s component.', callerName, callerName, constructor && (constructor.displayName || constructor.name) || 'ReactClass') : void 0;
	  }
	}
	
	/**
	 * This is the update queue used for server rendering.
	 * It delegates to ReactUpdateQueue while server rendering is in progress and
	 * switches to ReactNoopUpdateQueue after the transaction has completed.
	 * @class ReactServerUpdateQueue
	 * @param {Transaction} transaction
	 */
	
	var ReactServerUpdateQueue = function () {
	  function ReactServerUpdateQueue(transaction) {
	    _classCallCheck(this, ReactServerUpdateQueue);
	
	    this.transaction = transaction;
	  }
	
	  /**
	   * Checks whether or not this composite component is mounted.
	   * @param {ReactClass} publicInstance The instance we want to test.
	   * @return {boolean} True if mounted, false otherwise.
	   * @protected
	   * @final
	   */
	
	  ReactServerUpdateQueue.prototype.isMounted = function isMounted(publicInstance) {
	    return false;
	  };
	
	  /**
	   * Enqueue a callback that will be executed after all the pending updates
	   * have processed.
	   *
	   * @param {ReactClass} publicInstance The instance to use as `this` context.
	   * @param {?function} callback Called after state is updated.
	   * @internal
	   */
	
	  ReactServerUpdateQueue.prototype.enqueueCallback = function enqueueCallback(publicInstance, callback, callerName) {
	    if (this.transaction.isInTransaction()) {
	      ReactUpdateQueue.enqueueCallback(publicInstance, callback, callerName);
	    }
	  };
	
	  /**
	   * Forces an update. This should only be invoked when it is known with
	   * certainty that we are **not** in a DOM transaction.
	   *
	   * You may want to call this when you know that some deeper aspect of the
	   * component's state has changed but `setState` was not called.
	   *
	   * This will not invoke `shouldComponentUpdate`, but it will invoke
	   * `componentWillUpdate` and `componentDidUpdate`.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @internal
	   */
	
	  ReactServerUpdateQueue.prototype.enqueueForceUpdate = function enqueueForceUpdate(publicInstance) {
	    if (this.transaction.isInTransaction()) {
	      ReactUpdateQueue.enqueueForceUpdate(publicInstance);
	    } else {
	      warnNoop(publicInstance, 'forceUpdate');
	    }
	  };
	
	  /**
	   * Replaces all of the state. Always use this or `setState` to mutate state.
	   * You should treat `this.state` as immutable.
	   *
	   * There is no guarantee that `this.state` will be immediately updated, so
	   * accessing `this.state` after calling this method may return the old value.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @param {object|function} completeState Next state.
	   * @internal
	   */
	
	  ReactServerUpdateQueue.prototype.enqueueReplaceState = function enqueueReplaceState(publicInstance, completeState) {
	    if (this.transaction.isInTransaction()) {
	      ReactUpdateQueue.enqueueReplaceState(publicInstance, completeState);
	    } else {
	      warnNoop(publicInstance, 'replaceState');
	    }
	  };
	
	  /**
	   * Sets a subset of the state. This only exists because _pendingState is
	   * internal. This provides a merging strategy that is not available to deep
	   * properties which is confusing. TODO: Expose pendingState or don't use it
	   * during the merge.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @param {object|function} partialState Next partial state to be merged with state.
	   * @internal
	   */
	
	  ReactServerUpdateQueue.prototype.enqueueSetState = function enqueueSetState(publicInstance, partialState) {
	    if (this.transaction.isInTransaction()) {
	      ReactUpdateQueue.enqueueSetState(publicInstance, partialState);
	    } else {
	      warnNoop(publicInstance, 'setState');
	    }
	  };
	
	  return ReactServerUpdateQueue;
	}();
	
	module.exports = ReactServerUpdateQueue;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ }),
/* 139 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2015-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
	
	var _prodInvariant = __webpack_require__(39);
	
	var ReactCurrentOwner = __webpack_require__(10);
	var ReactInstanceMap = __webpack_require__(120);
	var ReactInstrumentation = __webpack_require__(66);
	var ReactUpdates = __webpack_require__(60);
	
	var invariant = __webpack_require__(8);
	var warning = __webpack_require__(11);
	
	function enqueueUpdate(internalInstance) {
	  ReactUpdates.enqueueUpdate(internalInstance);
	}
	
	function formatUnexpectedArgument(arg) {
	  var type = typeof arg === 'undefined' ? 'undefined' : _typeof(arg);
	  if (type !== 'object') {
	    return type;
	  }
	  var displayName = arg.constructor && arg.constructor.name || type;
	  var keys = Object.keys(arg);
	  if (keys.length > 0 && keys.length < 20) {
	    return displayName + ' (keys: ' + keys.join(', ') + ')';
	  }
	  return displayName;
	}
	
	function getInternalInstanceReadyForUpdate(publicInstance, callerName) {
	  var internalInstance = ReactInstanceMap.get(publicInstance);
	  if (!internalInstance) {
	    if (process.env.NODE_ENV !== 'production') {
	      var ctor = publicInstance.constructor;
	      // Only warn when we have a callerName. Otherwise we should be silent.
	      // We're probably calling from enqueueCallback. We don't want to warn
	      // there because we already warned for the corresponding lifecycle method.
	      process.env.NODE_ENV !== 'production' ? warning(!callerName, '%s(...): Can only update a mounted or mounting component. ' + 'This usually means you called %s() on an unmounted component. ' + 'This is a no-op. Please check the code for the %s component.', callerName, callerName, ctor && (ctor.displayName || ctor.name) || 'ReactClass') : void 0;
	    }
	    return null;
	  }
	
	  if (process.env.NODE_ENV !== 'production') {
	    process.env.NODE_ENV !== 'production' ? warning(ReactCurrentOwner.current == null, '%s(...): Cannot update during an existing state transition (such as ' + 'within `render` or another component\'s constructor). Render methods ' + 'should be a pure function of props and state; constructor ' + 'side-effects are an anti-pattern, but can be moved to ' + '`componentWillMount`.', callerName) : void 0;
	  }
	
	  return internalInstance;
	}
	
	/**
	 * ReactUpdateQueue allows for state updates to be scheduled into a later
	 * reconciliation step.
	 */
	var ReactUpdateQueue = {
	
	  /**
	   * Checks whether or not this composite component is mounted.
	   * @param {ReactClass} publicInstance The instance we want to test.
	   * @return {boolean} True if mounted, false otherwise.
	   * @protected
	   * @final
	   */
	  isMounted: function isMounted(publicInstance) {
	    if (process.env.NODE_ENV !== 'production') {
	      var owner = ReactCurrentOwner.current;
	      if (owner !== null) {
	        process.env.NODE_ENV !== 'production' ? warning(owner._warnedAboutRefsInRender, '%s is accessing isMounted inside its render() function. ' + 'render() should be a pure function of props and state. It should ' + 'never access something that requires stale data from the previous ' + 'render, such as refs. Move this logic to componentDidMount and ' + 'componentDidUpdate instead.', owner.getName() || 'A component') : void 0;
	        owner._warnedAboutRefsInRender = true;
	      }
	    }
	    var internalInstance = ReactInstanceMap.get(publicInstance);
	    if (internalInstance) {
	      // During componentWillMount and render this will still be null but after
	      // that will always render to something. At least for now. So we can use
	      // this hack.
	      return !!internalInstance._renderedComponent;
	    } else {
	      return false;
	    }
	  },
	
	  /**
	   * Enqueue a callback that will be executed after all the pending updates
	   * have processed.
	   *
	   * @param {ReactClass} publicInstance The instance to use as `this` context.
	   * @param {?function} callback Called after state is updated.
	   * @param {string} callerName Name of the calling function in the public API.
	   * @internal
	   */
	  enqueueCallback: function enqueueCallback(publicInstance, callback, callerName) {
	    ReactUpdateQueue.validateCallback(callback, callerName);
	    var internalInstance = getInternalInstanceReadyForUpdate(publicInstance);
	
	    // Previously we would throw an error if we didn't have an internal
	    // instance. Since we want to make it a no-op instead, we mirror the same
	    // behavior we have in other enqueue* methods.
	    // We also need to ignore callbacks in componentWillMount. See
	    // enqueueUpdates.
	    if (!internalInstance) {
	      return null;
	    }
	
	    if (internalInstance._pendingCallbacks) {
	      internalInstance._pendingCallbacks.push(callback);
	    } else {
	      internalInstance._pendingCallbacks = [callback];
	    }
	    // TODO: The callback here is ignored when setState is called from
	    // componentWillMount. Either fix it or disallow doing so completely in
	    // favor of getInitialState. Alternatively, we can disallow
	    // componentWillMount during server-side rendering.
	    enqueueUpdate(internalInstance);
	  },
	
	  enqueueCallbackInternal: function enqueueCallbackInternal(internalInstance, callback) {
	    if (internalInstance._pendingCallbacks) {
	      internalInstance._pendingCallbacks.push(callback);
	    } else {
	      internalInstance._pendingCallbacks = [callback];
	    }
	    enqueueUpdate(internalInstance);
	  },
	
	  /**
	   * Forces an update. This should only be invoked when it is known with
	   * certainty that we are **not** in a DOM transaction.
	   *
	   * You may want to call this when you know that some deeper aspect of the
	   * component's state has changed but `setState` was not called.
	   *
	   * This will not invoke `shouldComponentUpdate`, but it will invoke
	   * `componentWillUpdate` and `componentDidUpdate`.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @internal
	   */
	  enqueueForceUpdate: function enqueueForceUpdate(publicInstance) {
	    var internalInstance = getInternalInstanceReadyForUpdate(publicInstance, 'forceUpdate');
	
	    if (!internalInstance) {
	      return;
	    }
	
	    internalInstance._pendingForceUpdate = true;
	
	    enqueueUpdate(internalInstance);
	  },
	
	  /**
	   * Replaces all of the state. Always use this or `setState` to mutate state.
	   * You should treat `this.state` as immutable.
	   *
	   * There is no guarantee that `this.state` will be immediately updated, so
	   * accessing `this.state` after calling this method may return the old value.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @param {object} completeState Next state.
	   * @internal
	   */
	  enqueueReplaceState: function enqueueReplaceState(publicInstance, completeState, callback) {
	    var internalInstance = getInternalInstanceReadyForUpdate(publicInstance, 'replaceState');
	
	    if (!internalInstance) {
	      return;
	    }
	
	    internalInstance._pendingStateQueue = [completeState];
	    internalInstance._pendingReplaceState = true;
	
	    // Future-proof 15.5
	    if (callback !== undefined && callback !== null) {
	      ReactUpdateQueue.validateCallback(callback, 'replaceState');
	      if (internalInstance._pendingCallbacks) {
	        internalInstance._pendingCallbacks.push(callback);
	      } else {
	        internalInstance._pendingCallbacks = [callback];
	      }
	    }
	
	    enqueueUpdate(internalInstance);
	  },
	
	  /**
	   * Sets a subset of the state. This only exists because _pendingState is
	   * internal. This provides a merging strategy that is not available to deep
	   * properties which is confusing. TODO: Expose pendingState or don't use it
	   * during the merge.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @param {object} partialState Next partial state to be merged with state.
	   * @internal
	   */
	  enqueueSetState: function enqueueSetState(publicInstance, partialState) {
	    if (process.env.NODE_ENV !== 'production') {
	      ReactInstrumentation.debugTool.onSetState();
	      process.env.NODE_ENV !== 'production' ? warning(partialState != null, 'setState(...): You passed an undefined or null state object; ' + 'instead, use forceUpdate().') : void 0;
	    }
	
	    var internalInstance = getInternalInstanceReadyForUpdate(publicInstance, 'setState');
	
	    if (!internalInstance) {
	      return;
	    }
	
	    var queue = internalInstance._pendingStateQueue || (internalInstance._pendingStateQueue = []);
	    queue.push(partialState);
	
	    enqueueUpdate(internalInstance);
	  },
	
	  enqueueElementInternal: function enqueueElementInternal(internalInstance, nextElement, nextContext) {
	    internalInstance._pendingElement = nextElement;
	    // TODO: introduce _pendingContext instead of setting it directly.
	    internalInstance._context = nextContext;
	    enqueueUpdate(internalInstance);
	  },
	
	  validateCallback: function validateCallback(callback, callerName) {
	    !(!callback || typeof callback === 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s(...): Expected the last optional `callback` argument to be a function. Instead received: %s.', callerName, formatUnexpectedArgument(callback)) : _prodInvariant('122', callerName, formatUnexpectedArgument(callback)) : void 0;
	  }
	
	};
	
	module.exports = ReactUpdateQueue;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ }),
/* 140 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2015-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var _assign = __webpack_require__(4);
	
	var emptyFunction = __webpack_require__(12);
	var warning = __webpack_require__(11);
	
	var validateDOMNesting = emptyFunction;
	
	if (process.env.NODE_ENV !== 'production') {
	  // This validation code was written based on the HTML5 parsing spec:
	  // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-scope
	  //
	  // Note: this does not catch all invalid nesting, nor does it try to (as it's
	  // not clear what practical benefit doing so provides); instead, we warn only
	  // for cases where the parser will give a parse tree differing from what React
	  // intended. For example, <b><div></div></b> is invalid but we don't warn
	  // because it still parses correctly; we do warn for other cases like nested
	  // <p> tags where the beginning of the second element implicitly closes the
	  // first, causing a confusing mess.
	
	  // https://html.spec.whatwg.org/multipage/syntax.html#special
	  var specialTags = ['address', 'applet', 'area', 'article', 'aside', 'base', 'basefont', 'bgsound', 'blockquote', 'body', 'br', 'button', 'caption', 'center', 'col', 'colgroup', 'dd', 'details', 'dir', 'div', 'dl', 'dt', 'embed', 'fieldset', 'figcaption', 'figure', 'footer', 'form', 'frame', 'frameset', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'head', 'header', 'hgroup', 'hr', 'html', 'iframe', 'img', 'input', 'isindex', 'li', 'link', 'listing', 'main', 'marquee', 'menu', 'menuitem', 'meta', 'nav', 'noembed', 'noframes', 'noscript', 'object', 'ol', 'p', 'param', 'plaintext', 'pre', 'script', 'section', 'select', 'source', 'style', 'summary', 'table', 'tbody', 'td', 'template', 'textarea', 'tfoot', 'th', 'thead', 'title', 'tr', 'track', 'ul', 'wbr', 'xmp'];
	
	  // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-scope
	  var inScopeTags = ['applet', 'caption', 'html', 'table', 'td', 'th', 'marquee', 'object', 'template',
	
	  // https://html.spec.whatwg.org/multipage/syntax.html#html-integration-point
	  // TODO: Distinguish by namespace here -- for <title>, including it here
	  // errs on the side of fewer warnings
	  'foreignObject', 'desc', 'title'];
	
	  // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-button-scope
	  var buttonScopeTags = inScopeTags.concat(['button']);
	
	  // https://html.spec.whatwg.org/multipage/syntax.html#generate-implied-end-tags
	  var impliedEndTags = ['dd', 'dt', 'li', 'option', 'optgroup', 'p', 'rp', 'rt'];
	
	  var emptyAncestorInfo = {
	    current: null,
	
	    formTag: null,
	    aTagInScope: null,
	    buttonTagInScope: null,
	    nobrTagInScope: null,
	    pTagInButtonScope: null,
	
	    listItemTagAutoclosing: null,
	    dlItemTagAutoclosing: null
	  };
	
	  var updatedAncestorInfo = function updatedAncestorInfo(oldInfo, tag, instance) {
	    var ancestorInfo = _assign({}, oldInfo || emptyAncestorInfo);
	    var info = { tag: tag, instance: instance };
	
	    if (inScopeTags.indexOf(tag) !== -1) {
	      ancestorInfo.aTagInScope = null;
	      ancestorInfo.buttonTagInScope = null;
	      ancestorInfo.nobrTagInScope = null;
	    }
	    if (buttonScopeTags.indexOf(tag) !== -1) {
	      ancestorInfo.pTagInButtonScope = null;
	    }
	
	    // See rules for 'li', 'dd', 'dt' start tags in
	    // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inbody
	    if (specialTags.indexOf(tag) !== -1 && tag !== 'address' && tag !== 'div' && tag !== 'p') {
	      ancestorInfo.listItemTagAutoclosing = null;
	      ancestorInfo.dlItemTagAutoclosing = null;
	    }
	
	    ancestorInfo.current = info;
	
	    if (tag === 'form') {
	      ancestorInfo.formTag = info;
	    }
	    if (tag === 'a') {
	      ancestorInfo.aTagInScope = info;
	    }
	    if (tag === 'button') {
	      ancestorInfo.buttonTagInScope = info;
	    }
	    if (tag === 'nobr') {
	      ancestorInfo.nobrTagInScope = info;
	    }
	    if (tag === 'p') {
	      ancestorInfo.pTagInButtonScope = info;
	    }
	    if (tag === 'li') {
	      ancestorInfo.listItemTagAutoclosing = info;
	    }
	    if (tag === 'dd' || tag === 'dt') {
	      ancestorInfo.dlItemTagAutoclosing = info;
	    }
	
	    return ancestorInfo;
	  };
	
	  /**
	   * Returns whether
	   */
	  var isTagValidWithParent = function isTagValidWithParent(tag, parentTag) {
	    // First, let's check if we're in an unusual parsing mode...
	    switch (parentTag) {
	      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inselect
	      case 'select':
	        return tag === 'option' || tag === 'optgroup' || tag === '#text';
	      case 'optgroup':
	        return tag === 'option' || tag === '#text';
	      // Strictly speaking, seeing an <option> doesn't mean we're in a <select>
	      // but
	      case 'option':
	        return tag === '#text';
	
	      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intd
	      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-incaption
	      // No special behavior since these rules fall back to "in body" mode for
	      // all except special table nodes which cause bad parsing behavior anyway.
	
	      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intr
	      case 'tr':
	        return tag === 'th' || tag === 'td' || tag === 'style' || tag === 'script' || tag === 'template';
	
	      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intbody
	      case 'tbody':
	      case 'thead':
	      case 'tfoot':
	        return tag === 'tr' || tag === 'style' || tag === 'script' || tag === 'template';
	
	      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-incolgroup
	      case 'colgroup':
	        return tag === 'col' || tag === 'template';
	
	      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intable
	      case 'table':
	        return tag === 'caption' || tag === 'colgroup' || tag === 'tbody' || tag === 'tfoot' || tag === 'thead' || tag === 'style' || tag === 'script' || tag === 'template';
	
	      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inhead
	      case 'head':
	        return tag === 'base' || tag === 'basefont' || tag === 'bgsound' || tag === 'link' || tag === 'meta' || tag === 'title' || tag === 'noscript' || tag === 'noframes' || tag === 'style' || tag === 'script' || tag === 'template';
	
	      // https://html.spec.whatwg.org/multipage/semantics.html#the-html-element
	      case 'html':
	        return tag === 'head' || tag === 'body';
	      case '#document':
	        return tag === 'html';
	    }
	
	    // Probably in the "in body" parsing mode, so we outlaw only tag combos
	    // where the parsing rules cause implicit opens or closes to be added.
	    // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inbody
	    switch (tag) {
	      case 'h1':
	      case 'h2':
	      case 'h3':
	      case 'h4':
	      case 'h5':
	      case 'h6':
	        return parentTag !== 'h1' && parentTag !== 'h2' && parentTag !== 'h3' && parentTag !== 'h4' && parentTag !== 'h5' && parentTag !== 'h6';
	
	      case 'rp':
	      case 'rt':
	        return impliedEndTags.indexOf(parentTag) === -1;
	
	      case 'body':
	      case 'caption':
	      case 'col':
	      case 'colgroup':
	      case 'frame':
	      case 'head':
	      case 'html':
	      case 'tbody':
	      case 'td':
	      case 'tfoot':
	      case 'th':
	      case 'thead':
	      case 'tr':
	        // These tags are only valid with a few parents that have special child
	        // parsing rules -- if we're down here, then none of those matched and
	        // so we allow it only if we don't know what the parent is, as all other
	        // cases are invalid.
	        return parentTag == null;
	    }
	
	    return true;
	  };
	
	  /**
	   * Returns whether
	   */
	  var findInvalidAncestorForTag = function findInvalidAncestorForTag(tag, ancestorInfo) {
	    switch (tag) {
	      case 'address':
	      case 'article':
	      case 'aside':
	      case 'blockquote':
	      case 'center':
	      case 'details':
	      case 'dialog':
	      case 'dir':
	      case 'div':
	      case 'dl':
	      case 'fieldset':
	      case 'figcaption':
	      case 'figure':
	      case 'footer':
	      case 'header':
	      case 'hgroup':
	      case 'main':
	      case 'menu':
	      case 'nav':
	      case 'ol':
	      case 'p':
	      case 'section':
	      case 'summary':
	      case 'ul':
	      case 'pre':
	      case 'listing':
	      case 'table':
	      case 'hr':
	      case 'xmp':
	      case 'h1':
	      case 'h2':
	      case 'h3':
	      case 'h4':
	      case 'h5':
	      case 'h6':
	        return ancestorInfo.pTagInButtonScope;
	
	      case 'form':
	        return ancestorInfo.formTag || ancestorInfo.pTagInButtonScope;
	
	      case 'li':
	        return ancestorInfo.listItemTagAutoclosing;
	
	      case 'dd':
	      case 'dt':
	        return ancestorInfo.dlItemTagAutoclosing;
	
	      case 'button':
	        return ancestorInfo.buttonTagInScope;
	
	      case 'a':
	        // Spec says something about storing a list of markers, but it sounds
	        // equivalent to this check.
	        return ancestorInfo.aTagInScope;
	
	      case 'nobr':
	        return ancestorInfo.nobrTagInScope;
	    }
	
	    return null;
	  };
	
	  /**
	   * Given a ReactCompositeComponent instance, return a list of its recursive
	   * owners, starting at the root and ending with the instance itself.
	   */
	  var findOwnerStack = function findOwnerStack(instance) {
	    if (!instance) {
	      return [];
	    }
	
	    var stack = [];
	    do {
	      stack.push(instance);
	    } while (instance = instance._currentElement._owner);
	    stack.reverse();
	    return stack;
	  };
	
	  var didWarn = {};
	
	  validateDOMNesting = function validateDOMNesting(childTag, childText, childInstance, ancestorInfo) {
	    ancestorInfo = ancestorInfo || emptyAncestorInfo;
	    var parentInfo = ancestorInfo.current;
	    var parentTag = parentInfo && parentInfo.tag;
	
	    if (childText != null) {
	      process.env.NODE_ENV !== 'production' ? warning(childTag == null, 'validateDOMNesting: when childText is passed, childTag should be null') : void 0;
	      childTag = '#text';
	    }
	
	    var invalidParent = isTagValidWithParent(childTag, parentTag) ? null : parentInfo;
	    var invalidAncestor = invalidParent ? null : findInvalidAncestorForTag(childTag, ancestorInfo);
	    var problematic = invalidParent || invalidAncestor;
	
	    if (problematic) {
	      var ancestorTag = problematic.tag;
	      var ancestorInstance = problematic.instance;
	
	      var childOwner = childInstance && childInstance._currentElement._owner;
	      var ancestorOwner = ancestorInstance && ancestorInstance._currentElement._owner;
	
	      var childOwners = findOwnerStack(childOwner);
	      var ancestorOwners = findOwnerStack(ancestorOwner);
	
	      var minStackLen = Math.min(childOwners.length, ancestorOwners.length);
	      var i;
	
	      var deepestCommon = -1;
	      for (i = 0; i < minStackLen; i++) {
	        if (childOwners[i] === ancestorOwners[i]) {
	          deepestCommon = i;
	        } else {
	          break;
	        }
	      }
	
	      var UNKNOWN = '(unknown)';
	      var childOwnerNames = childOwners.slice(deepestCommon + 1).map(function (inst) {
	        return inst.getName() || UNKNOWN;
	      });
	      var ancestorOwnerNames = ancestorOwners.slice(deepestCommon + 1).map(function (inst) {
	        return inst.getName() || UNKNOWN;
	      });
	      var ownerInfo = [].concat(
	      // If the parent and child instances have a common owner ancestor, start
	      // with that -- otherwise we just start with the parent's owners.
	      deepestCommon !== -1 ? childOwners[deepestCommon].getName() || UNKNOWN : [], ancestorOwnerNames, ancestorTag,
	      // If we're warning about an invalid (non-parent) ancestry, add '...'
	      invalidAncestor ? ['...'] : [], childOwnerNames, childTag).join(' > ');
	
	      var warnKey = !!invalidParent + '|' + childTag + '|' + ancestorTag + '|' + ownerInfo;
	      if (didWarn[warnKey]) {
	        return;
	      }
	      didWarn[warnKey] = true;
	
	      var tagDisplayName = childTag;
	      var whitespaceInfo = '';
	      if (childTag === '#text') {
	        if (/\S/.test(childText)) {
	          tagDisplayName = 'Text nodes';
	        } else {
	          tagDisplayName = 'Whitespace text nodes';
	          whitespaceInfo = ' Make sure you don\'t have any extra whitespace between tags on ' + 'each line of your source code.';
	        }
	      } else {
	        tagDisplayName = '<' + childTag + '>';
	      }
	
	      if (invalidParent) {
	        var info = '';
	        if (ancestorTag === 'table' && childTag === 'tr') {
	          info += ' Add a <tbody> to your code to match the DOM tree generated by ' + 'the browser.';
	        }
	        process.env.NODE_ENV !== 'production' ? warning(false, 'validateDOMNesting(...): %s cannot appear as a child of <%s>.%s ' + 'See %s.%s', tagDisplayName, ancestorTag, whitespaceInfo, ownerInfo, info) : void 0;
	      } else {
	        process.env.NODE_ENV !== 'production' ? warning(false, 'validateDOMNesting(...): %s cannot appear as a descendant of ' + '<%s>. See %s.', tagDisplayName, ancestorTag, ownerInfo) : void 0;
	      }
	    }
	  };
	
	  validateDOMNesting.updatedAncestorInfo = updatedAncestorInfo;
	
	  // For testing
	  validateDOMNesting.isTagValidInContext = function (tag, ancestorInfo) {
	    ancestorInfo = ancestorInfo || emptyAncestorInfo;
	    var parentInfo = ancestorInfo.current;
	    var parentTag = parentInfo && parentInfo.tag;
	    return isTagValidWithParent(tag, parentTag) && !findInvalidAncestorForTag(tag, ancestorInfo);
	  };
	}
	
	module.exports = validateDOMNesting;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ }),
/* 141 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2014-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var _assign = __webpack_require__(4);
	
	var DOMLazyTree = __webpack_require__(85);
	var ReactDOMComponentTree = __webpack_require__(38);
	
	var ReactDOMEmptyComponent = function ReactDOMEmptyComponent(instantiate) {
	  // ReactCompositeComponent uses this:
	  this._currentElement = null;
	  // ReactDOMComponentTree uses these:
	  this._hostNode = null;
	  this._hostParent = null;
	  this._hostContainerInfo = null;
	  this._domID = 0;
	};
	_assign(ReactDOMEmptyComponent.prototype, {
	  mountComponent: function mountComponent(transaction, hostParent, hostContainerInfo, context) {
	    var domID = hostContainerInfo._idCounter++;
	    this._domID = domID;
	    this._hostParent = hostParent;
	    this._hostContainerInfo = hostContainerInfo;
	
	    var nodeValue = ' react-empty: ' + this._domID + ' ';
	    if (transaction.useCreateElement) {
	      var ownerDocument = hostContainerInfo._ownerDocument;
	      var node = ownerDocument.createComment(nodeValue);
	      ReactDOMComponentTree.precacheNode(this, node);
	      return DOMLazyTree(node);
	    } else {
	      if (transaction.renderToStaticMarkup) {
	        // Normally we'd insert a comment node, but since this is a situation
	        // where React won't take over (static pages), we can simply return
	        // nothing.
	        return '';
	      }
	      return '<!--' + nodeValue + '-->';
	    }
	  },
	  receiveComponent: function receiveComponent() {},
	  getHostNode: function getHostNode() {
	    return ReactDOMComponentTree.getNodeFromInstance(this);
	  },
	  unmountComponent: function unmountComponent() {
	    ReactDOMComponentTree.uncacheNode(this);
	  }
	});
	
	module.exports = ReactDOMEmptyComponent;

/***/ }),
/* 142 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2015-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var _prodInvariant = __webpack_require__(39);
	
	var invariant = __webpack_require__(8);
	
	/**
	 * Return the lowest common ancestor of A and B, or null if they are in
	 * different trees.
	 */
	function getLowestCommonAncestor(instA, instB) {
	  !('_hostNode' in instA) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'getNodeFromInstance: Invalid argument.') : _prodInvariant('33') : void 0;
	  !('_hostNode' in instB) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'getNodeFromInstance: Invalid argument.') : _prodInvariant('33') : void 0;
	
	  var depthA = 0;
	  for (var tempA = instA; tempA; tempA = tempA._hostParent) {
	    depthA++;
	  }
	  var depthB = 0;
	  for (var tempB = instB; tempB; tempB = tempB._hostParent) {
	    depthB++;
	  }
	
	  // If A is deeper, crawl up.
	  while (depthA - depthB > 0) {
	    instA = instA._hostParent;
	    depthA--;
	  }
	
	  // If B is deeper, crawl up.
	  while (depthB - depthA > 0) {
	    instB = instB._hostParent;
	    depthB--;
	  }
	
	  // Walk in lockstep until we find a match.
	  var depth = depthA;
	  while (depth--) {
	    if (instA === instB) {
	      return instA;
	    }
	    instA = instA._hostParent;
	    instB = instB._hostParent;
	  }
	  return null;
	}
	
	/**
	 * Return if A is an ancestor of B.
	 */
	function isAncestor(instA, instB) {
	  !('_hostNode' in instA) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'isAncestor: Invalid argument.') : _prodInvariant('35') : void 0;
	  !('_hostNode' in instB) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'isAncestor: Invalid argument.') : _prodInvariant('35') : void 0;
	
	  while (instB) {
	    if (instB === instA) {
	      return true;
	    }
	    instB = instB._hostParent;
	  }
	  return false;
	}
	
	/**
	 * Return the parent instance of the passed-in instance.
	 */
	function getParentInstance(inst) {
	  !('_hostNode' in inst) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'getParentInstance: Invalid argument.') : _prodInvariant('36') : void 0;
	
	  return inst._hostParent;
	}
	
	/**
	 * Simulates the traversal of a two-phase, capture/bubble event dispatch.
	 */
	function traverseTwoPhase(inst, fn, arg) {
	  var path = [];
	  while (inst) {
	    path.push(inst);
	    inst = inst._hostParent;
	  }
	  var i;
	  for (i = path.length; i-- > 0;) {
	    fn(path[i], 'captured', arg);
	  }
	  for (i = 0; i < path.length; i++) {
	    fn(path[i], 'bubbled', arg);
	  }
	}
	
	/**
	 * Traverses the ID hierarchy and invokes the supplied `cb` on any IDs that
	 * should would receive a `mouseEnter` or `mouseLeave` event.
	 *
	 * Does not invoke the callback on the nearest common ancestor because nothing
	 * "entered" or "left" that element.
	 */
	function traverseEnterLeave(from, to, fn, argFrom, argTo) {
	  var common = from && to ? getLowestCommonAncestor(from, to) : null;
	  var pathFrom = [];
	  while (from && from !== common) {
	    pathFrom.push(from);
	    from = from._hostParent;
	  }
	  var pathTo = [];
	  while (to && to !== common) {
	    pathTo.push(to);
	    to = to._hostParent;
	  }
	  var i;
	  for (i = 0; i < pathFrom.length; i++) {
	    fn(pathFrom[i], 'bubbled', argFrom);
	  }
	  for (i = pathTo.length; i-- > 0;) {
	    fn(pathTo[i], 'captured', argTo);
	  }
	}
	
	module.exports = {
	  isAncestor: isAncestor,
	  getLowestCommonAncestor: getLowestCommonAncestor,
	  getParentInstance: getParentInstance,
	  traverseTwoPhase: traverseTwoPhase,
	  traverseEnterLeave: traverseEnterLeave
	};
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ }),
/* 143 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var _prodInvariant = __webpack_require__(39),
	    _assign = __webpack_require__(4);
	
	var DOMChildrenOperations = __webpack_require__(84);
	var DOMLazyTree = __webpack_require__(85);
	var ReactDOMComponentTree = __webpack_require__(38);
	
	var escapeTextContentForBrowser = __webpack_require__(90);
	var invariant = __webpack_require__(8);
	var validateDOMNesting = __webpack_require__(140);
	
	/**
	 * Text nodes violate a couple assumptions that React makes about components:
	 *
	 *  - When mounting text into the DOM, adjacent text nodes are merged.
	 *  - Text nodes cannot be assigned a React root ID.
	 *
	 * This component is used to wrap strings between comment nodes so that they
	 * can undergo the same reconciliation that is applied to elements.
	 *
	 * TODO: Investigate representing React components in the DOM with text nodes.
	 *
	 * @class ReactDOMTextComponent
	 * @extends ReactComponent
	 * @internal
	 */
	var ReactDOMTextComponent = function ReactDOMTextComponent(text) {
	  // TODO: This is really a ReactText (ReactNode), not a ReactElement
	  this._currentElement = text;
	  this._stringText = '' + text;
	  // ReactDOMComponentTree uses these:
	  this._hostNode = null;
	  this._hostParent = null;
	
	  // Properties
	  this._domID = 0;
	  this._mountIndex = 0;
	  this._closingComment = null;
	  this._commentNodes = null;
	};
	
	_assign(ReactDOMTextComponent.prototype, {
	
	  /**
	   * Creates the markup for this text node. This node is not intended to have
	   * any features besides containing text content.
	   *
	   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
	   * @return {string} Markup for this text node.
	   * @internal
	   */
	  mountComponent: function mountComponent(transaction, hostParent, hostContainerInfo, context) {
	    if (process.env.NODE_ENV !== 'production') {
	      var parentInfo;
	      if (hostParent != null) {
	        parentInfo = hostParent._ancestorInfo;
	      } else if (hostContainerInfo != null) {
	        parentInfo = hostContainerInfo._ancestorInfo;
	      }
	      if (parentInfo) {
	        // parentInfo should always be present except for the top-level
	        // component when server rendering
	        validateDOMNesting(null, this._stringText, this, parentInfo);
	      }
	    }
	
	    var domID = hostContainerInfo._idCounter++;
	    var openingValue = ' react-text: ' + domID + ' ';
	    var closingValue = ' /react-text ';
	    this._domID = domID;
	    this._hostParent = hostParent;
	    if (transaction.useCreateElement) {
	      var ownerDocument = hostContainerInfo._ownerDocument;
	      var openingComment = ownerDocument.createComment(openingValue);
	      var closingComment = ownerDocument.createComment(closingValue);
	      var lazyTree = DOMLazyTree(ownerDocument.createDocumentFragment());
	      DOMLazyTree.queueChild(lazyTree, DOMLazyTree(openingComment));
	      if (this._stringText) {
	        DOMLazyTree.queueChild(lazyTree, DOMLazyTree(ownerDocument.createTextNode(this._stringText)));
	      }
	      DOMLazyTree.queueChild(lazyTree, DOMLazyTree(closingComment));
	      ReactDOMComponentTree.precacheNode(this, openingComment);
	      this._closingComment = closingComment;
	      return lazyTree;
	    } else {
	      var escapedText = escapeTextContentForBrowser(this._stringText);
	
	      if (transaction.renderToStaticMarkup) {
	        // Normally we'd wrap this between comment nodes for the reasons stated
	        // above, but since this is a situation where React won't take over
	        // (static pages), we can simply return the text as it is.
	        return escapedText;
	      }
	
	      return '<!--' + openingValue + '-->' + escapedText + '<!--' + closingValue + '-->';
	    }
	  },
	
	  /**
	   * Updates this component by updating the text content.
	   *
	   * @param {ReactText} nextText The next text content
	   * @param {ReactReconcileTransaction} transaction
	   * @internal
	   */
	  receiveComponent: function receiveComponent(nextText, transaction) {
	    if (nextText !== this._currentElement) {
	      this._currentElement = nextText;
	      var nextStringText = '' + nextText;
	      if (nextStringText !== this._stringText) {
	        // TODO: Save this as pending props and use performUpdateIfNecessary
	        // and/or updateComponent to do the actual update for consistency with
	        // other component types?
	        this._stringText = nextStringText;
	        var commentNodes = this.getHostNode();
	        DOMChildrenOperations.replaceDelimitedText(commentNodes[0], commentNodes[1], nextStringText);
	      }
	    }
	  },
	
	  getHostNode: function getHostNode() {
	    var hostNode = this._commentNodes;
	    if (hostNode) {
	      return hostNode;
	    }
	    if (!this._closingComment) {
	      var openingComment = ReactDOMComponentTree.getNodeFromInstance(this);
	      var node = openingComment.nextSibling;
	      while (true) {
	        !(node != null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Missing closing comment for text component %s', this._domID) : _prodInvariant('67', this._domID) : void 0;
	        if (node.nodeType === 8 && node.nodeValue === ' /react-text ') {
	          this._closingComment = node;
	          break;
	        }
	        node = node.nextSibling;
	      }
	    }
	    hostNode = [this._hostNode, this._closingComment];
	    this._commentNodes = hostNode;
	    return hostNode;
	  },
	
	  unmountComponent: function unmountComponent() {
	    this._closingComment = null;
	    this._commentNodes = null;
	    ReactDOMComponentTree.uncacheNode(this);
	  }
	
	});
	
	module.exports = ReactDOMTextComponent;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ }),
/* 144 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var _assign = __webpack_require__(4);
	
	var ReactUpdates = __webpack_require__(60);
	var Transaction = __webpack_require__(72);
	
	var emptyFunction = __webpack_require__(12);
	
	var RESET_BATCHED_UPDATES = {
	  initialize: emptyFunction,
	  close: function close() {
	    ReactDefaultBatchingStrategy.isBatchingUpdates = false;
	  }
	};
	
	var FLUSH_BATCHED_UPDATES = {
	  initialize: emptyFunction,
	  close: ReactUpdates.flushBatchedUpdates.bind(ReactUpdates)
	};
	
	var TRANSACTION_WRAPPERS = [FLUSH_BATCHED_UPDATES, RESET_BATCHED_UPDATES];
	
	function ReactDefaultBatchingStrategyTransaction() {
	  this.reinitializeTransaction();
	}
	
	_assign(ReactDefaultBatchingStrategyTransaction.prototype, Transaction, {
	  getTransactionWrappers: function getTransactionWrappers() {
	    return TRANSACTION_WRAPPERS;
	  }
	});
	
	var transaction = new ReactDefaultBatchingStrategyTransaction();
	
	var ReactDefaultBatchingStrategy = {
	  isBatchingUpdates: false,
	
	  /**
	   * Call the provided function in a context within which calls to `setState`
	   * and friends are batched such that components aren't updated unnecessarily.
	   */
	  batchedUpdates: function batchedUpdates(callback, a, b, c, d, e) {
	    var alreadyBatchingUpdates = ReactDefaultBatchingStrategy.isBatchingUpdates;
	
	    ReactDefaultBatchingStrategy.isBatchingUpdates = true;
	
	    // The code is written this way to avoid extra allocations
	    if (alreadyBatchingUpdates) {
	      return callback(a, b, c, d, e);
	    } else {
	      return transaction.perform(callback, null, a, b, c, d, e);
	    }
	  }
	};
	
	module.exports = ReactDefaultBatchingStrategy;

/***/ }),
/* 145 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var _assign = __webpack_require__(4);
	
	var EventListener = __webpack_require__(146);
	var ExecutionEnvironment = __webpack_require__(52);
	var PooledClass = __webpack_require__(54);
	var ReactDOMComponentTree = __webpack_require__(38);
	var ReactUpdates = __webpack_require__(60);
	
	var getEventTarget = __webpack_require__(73);
	var getUnboundedScrollPosition = __webpack_require__(147);
	
	/**
	 * Find the deepest React component completely containing the root of the
	 * passed-in instance (for use when entire React trees are nested within each
	 * other). If React trees are not nested, returns null.
	 */
	function findParent(inst) {
	  // TODO: It may be a good idea to cache this to prevent unnecessary DOM
	  // traversal, but caching is difficult to do correctly without using a
	  // mutation observer to listen for all DOM changes.
	  while (inst._hostParent) {
	    inst = inst._hostParent;
	  }
	  var rootNode = ReactDOMComponentTree.getNodeFromInstance(inst);
	  var container = rootNode.parentNode;
	  return ReactDOMComponentTree.getClosestInstanceFromNode(container);
	}
	
	// Used to store ancestor hierarchy in top level callback
	function TopLevelCallbackBookKeeping(topLevelType, nativeEvent) {
	  this.topLevelType = topLevelType;
	  this.nativeEvent = nativeEvent;
	  this.ancestors = [];
	}
	_assign(TopLevelCallbackBookKeeping.prototype, {
	  destructor: function destructor() {
	    this.topLevelType = null;
	    this.nativeEvent = null;
	    this.ancestors.length = 0;
	  }
	});
	PooledClass.addPoolingTo(TopLevelCallbackBookKeeping, PooledClass.twoArgumentPooler);
	
	function handleTopLevelImpl(bookKeeping) {
	  var nativeEventTarget = getEventTarget(bookKeeping.nativeEvent);
	  var targetInst = ReactDOMComponentTree.getClosestInstanceFromNode(nativeEventTarget);
	
	  // Loop through the hierarchy, in case there's any nested components.
	  // It's important that we build the array of ancestors before calling any
	  // event handlers, because event handlers can modify the DOM, leading to
	  // inconsistencies with ReactMount's node cache. See #1105.
	  var ancestor = targetInst;
	  do {
	    bookKeeping.ancestors.push(ancestor);
	    ancestor = ancestor && findParent(ancestor);
	  } while (ancestor);
	
	  for (var i = 0; i < bookKeeping.ancestors.length; i++) {
	    targetInst = bookKeeping.ancestors[i];
	    ReactEventListener._handleTopLevel(bookKeeping.topLevelType, targetInst, bookKeeping.nativeEvent, getEventTarget(bookKeeping.nativeEvent));
	  }
	}
	
	function scrollValueMonitor(cb) {
	  var scrollPosition = getUnboundedScrollPosition(window);
	  cb(scrollPosition);
	}
	
	var ReactEventListener = {
	  _enabled: true,
	  _handleTopLevel: null,
	
	  WINDOW_HANDLE: ExecutionEnvironment.canUseDOM ? window : null,
	
	  setHandleTopLevel: function setHandleTopLevel(handleTopLevel) {
	    ReactEventListener._handleTopLevel = handleTopLevel;
	  },
	
	  setEnabled: function setEnabled(enabled) {
	    ReactEventListener._enabled = !!enabled;
	  },
	
	  isEnabled: function isEnabled() {
	    return ReactEventListener._enabled;
	  },
	
	  /**
	   * Traps top-level events by using event bubbling.
	   *
	   * @param {string} topLevelType Record from `EventConstants`.
	   * @param {string} handlerBaseName Event name (e.g. "click").
	   * @param {object} element Element on which to attach listener.
	   * @return {?object} An object with a remove function which will forcefully
	   *                  remove the listener.
	   * @internal
	   */
	  trapBubbledEvent: function trapBubbledEvent(topLevelType, handlerBaseName, element) {
	    if (!element) {
	      return null;
	    }
	    return EventListener.listen(element, handlerBaseName, ReactEventListener.dispatchEvent.bind(null, topLevelType));
	  },
	
	  /**
	   * Traps a top-level event by using event capturing.
	   *
	   * @param {string} topLevelType Record from `EventConstants`.
	   * @param {string} handlerBaseName Event name (e.g. "click").
	   * @param {object} element Element on which to attach listener.
	   * @return {?object} An object with a remove function which will forcefully
	   *                  remove the listener.
	   * @internal
	   */
	  trapCapturedEvent: function trapCapturedEvent(topLevelType, handlerBaseName, element) {
	    if (!element) {
	      return null;
	    }
	    return EventListener.capture(element, handlerBaseName, ReactEventListener.dispatchEvent.bind(null, topLevelType));
	  },
	
	  monitorScrollValue: function monitorScrollValue(refresh) {
	    var callback = scrollValueMonitor.bind(null, refresh);
	    EventListener.listen(window, 'scroll', callback);
	  },
	
	  dispatchEvent: function dispatchEvent(topLevelType, nativeEvent) {
	    if (!ReactEventListener._enabled) {
	      return;
	    }
	
	    var bookKeeping = TopLevelCallbackBookKeeping.getPooled(topLevelType, nativeEvent);
	    try {
	      // Event queue being processed in the same cycle allows
	      // `preventDefault`.
	      ReactUpdates.batchedUpdates(handleTopLevelImpl, bookKeeping);
	    } finally {
	      TopLevelCallbackBookKeeping.release(bookKeeping);
	    }
	  }
	};
	
	module.exports = ReactEventListener;

/***/ }),
/* 146 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';
	
	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 * http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 *
	 * @typechecks
	 */
	
	var emptyFunction = __webpack_require__(12);
	
	/**
	 * Upstream version of event listener. Does not take into account specific
	 * nature of platform.
	 */
	var EventListener = {
	  /**
	   * Listen to DOM events during the bubble phase.
	   *
	   * @param {DOMEventTarget} target DOM element to register listener on.
	   * @param {string} eventType Event type, e.g. 'click' or 'mouseover'.
	   * @param {function} callback Callback function.
	   * @return {object} Object with a `remove` method.
	   */
	  listen: function listen(target, eventType, callback) {
	    if (target.addEventListener) {
	      target.addEventListener(eventType, callback, false);
	      return {
	        remove: function remove() {
	          target.removeEventListener(eventType, callback, false);
	        }
	      };
	    } else if (target.attachEvent) {
	      target.attachEvent('on' + eventType, callback);
	      return {
	        remove: function remove() {
	          target.detachEvent('on' + eventType, callback);
	        }
	      };
	    }
	  },
	
	  /**
	   * Listen to DOM events during the capture phase.
	   *
	   * @param {DOMEventTarget} target DOM element to register listener on.
	   * @param {string} eventType Event type, e.g. 'click' or 'mouseover'.
	   * @param {function} callback Callback function.
	   * @return {object} Object with a `remove` method.
	   */
	  capture: function capture(target, eventType, callback) {
	    if (target.addEventListener) {
	      target.addEventListener(eventType, callback, true);
	      return {
	        remove: function remove() {
	          target.removeEventListener(eventType, callback, true);
	        }
	      };
	    } else {
	      if (process.env.NODE_ENV !== 'production') {
	        console.error('Attempted to listen to events during the capture phase on a ' + 'browser that does not support the capture phase. Your application ' + 'will not receive some events.');
	      }
	      return {
	        remove: emptyFunction
	      };
	    }
	  },
	
	  registerDefault: function registerDefault() {}
	};
	
	module.exports = EventListener;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ }),
/* 147 */
/***/ (function(module, exports) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @typechecks
	 */
	
	'use strict';
	
	/**
	 * Gets the scroll position of the supplied element or window.
	 *
	 * The return values are unbounded, unlike `getScrollPosition`. This means they
	 * may be negative or exceed the element boundaries (which is possible using
	 * inertial scrolling).
	 *
	 * @param {DOMWindow|DOMElement} scrollable
	 * @return {object} Map with `x` and `y` keys.
	 */
	
	function getUnboundedScrollPosition(scrollable) {
	  if (scrollable.Window && scrollable instanceof scrollable.Window) {
	    return {
	      x: scrollable.pageXOffset || scrollable.document.documentElement.scrollLeft,
	      y: scrollable.pageYOffset || scrollable.document.documentElement.scrollTop
	    };
	  }
	  return {
	    x: scrollable.scrollLeft,
	    y: scrollable.scrollTop
	  };
	}
	
	module.exports = getUnboundedScrollPosition;

/***/ }),
/* 148 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var DOMProperty = __webpack_require__(40);
	var EventPluginHub = __webpack_require__(46);
	var EventPluginUtils = __webpack_require__(48);
	var ReactComponentEnvironment = __webpack_require__(119);
	var ReactEmptyComponent = __webpack_require__(129);
	var ReactBrowserEventEmitter = __webpack_require__(109);
	var ReactHostComponent = __webpack_require__(130);
	var ReactUpdates = __webpack_require__(60);
	
	var ReactInjection = {
	  Component: ReactComponentEnvironment.injection,
	  DOMProperty: DOMProperty.injection,
	  EmptyComponent: ReactEmptyComponent.injection,
	  EventPluginHub: EventPluginHub.injection,
	  EventPluginUtils: EventPluginUtils.injection,
	  EventEmitter: ReactBrowserEventEmitter.injection,
	  HostComponent: ReactHostComponent.injection,
	  Updates: ReactUpdates.injection
	};
	
	module.exports = ReactInjection;

/***/ }),
/* 149 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var _assign = __webpack_require__(4);
	
	var CallbackQueue = __webpack_require__(61);
	var PooledClass = __webpack_require__(54);
	var ReactBrowserEventEmitter = __webpack_require__(109);
	var ReactInputSelection = __webpack_require__(150);
	var ReactInstrumentation = __webpack_require__(66);
	var Transaction = __webpack_require__(72);
	var ReactUpdateQueue = __webpack_require__(139);
	
	/**
	 * Ensures that, when possible, the selection range (currently selected text
	 * input) is not disturbed by performing the transaction.
	 */
	var SELECTION_RESTORATION = {
	  /**
	   * @return {Selection} Selection information.
	   */
	  initialize: ReactInputSelection.getSelectionInformation,
	  /**
	   * @param {Selection} sel Selection information returned from `initialize`.
	   */
	  close: ReactInputSelection.restoreSelection
	};
	
	/**
	 * Suppresses events (blur/focus) that could be inadvertently dispatched due to
	 * high level DOM manipulations (like temporarily removing a text input from the
	 * DOM).
	 */
	var EVENT_SUPPRESSION = {
	  /**
	   * @return {boolean} The enabled status of `ReactBrowserEventEmitter` before
	   * the reconciliation.
	   */
	  initialize: function initialize() {
	    var currentlyEnabled = ReactBrowserEventEmitter.isEnabled();
	    ReactBrowserEventEmitter.setEnabled(false);
	    return currentlyEnabled;
	  },
	
	  /**
	   * @param {boolean} previouslyEnabled Enabled status of
	   *   `ReactBrowserEventEmitter` before the reconciliation occurred. `close`
	   *   restores the previous value.
	   */
	  close: function close(previouslyEnabled) {
	    ReactBrowserEventEmitter.setEnabled(previouslyEnabled);
	  }
	};
	
	/**
	 * Provides a queue for collecting `componentDidMount` and
	 * `componentDidUpdate` callbacks during the transaction.
	 */
	var ON_DOM_READY_QUEUEING = {
	  /**
	   * Initializes the internal `onDOMReady` queue.
	   */
	  initialize: function initialize() {
	    this.reactMountReady.reset();
	  },
	
	  /**
	   * After DOM is flushed, invoke all registered `onDOMReady` callbacks.
	   */
	  close: function close() {
	    this.reactMountReady.notifyAll();
	  }
	};
	
	/**
	 * Executed within the scope of the `Transaction` instance. Consider these as
	 * being member methods, but with an implied ordering while being isolated from
	 * each other.
	 */
	var TRANSACTION_WRAPPERS = [SELECTION_RESTORATION, EVENT_SUPPRESSION, ON_DOM_READY_QUEUEING];
	
	if (process.env.NODE_ENV !== 'production') {
	  TRANSACTION_WRAPPERS.push({
	    initialize: ReactInstrumentation.debugTool.onBeginFlush,
	    close: ReactInstrumentation.debugTool.onEndFlush
	  });
	}
	
	/**
	 * Currently:
	 * - The order that these are listed in the transaction is critical:
	 * - Suppresses events.
	 * - Restores selection range.
	 *
	 * Future:
	 * - Restore document/overflow scroll positions that were unintentionally
	 *   modified via DOM insertions above the top viewport boundary.
	 * - Implement/integrate with customized constraint based layout system and keep
	 *   track of which dimensions must be remeasured.
	 *
	 * @class ReactReconcileTransaction
	 */
	function ReactReconcileTransaction(useCreateElement) {
	  this.reinitializeTransaction();
	  // Only server-side rendering really needs this option (see
	  // `ReactServerRendering`), but server-side uses
	  // `ReactServerRenderingTransaction` instead. This option is here so that it's
	  // accessible and defaults to false when `ReactDOMComponent` and
	  // `ReactDOMTextComponent` checks it in `mountComponent`.`
	  this.renderToStaticMarkup = false;
	  this.reactMountReady = CallbackQueue.getPooled(null);
	  this.useCreateElement = useCreateElement;
	}
	
	var Mixin = {
	  /**
	   * @see Transaction
	   * @abstract
	   * @final
	   * @return {array<object>} List of operation wrap procedures.
	   *   TODO: convert to array<TransactionWrapper>
	   */
	  getTransactionWrappers: function getTransactionWrappers() {
	    return TRANSACTION_WRAPPERS;
	  },
	
	  /**
	   * @return {object} The queue to collect `onDOMReady` callbacks with.
	   */
	  getReactMountReady: function getReactMountReady() {
	    return this.reactMountReady;
	  },
	
	  /**
	   * @return {object} The queue to collect React async events.
	   */
	  getUpdateQueue: function getUpdateQueue() {
	    return ReactUpdateQueue;
	  },
	
	  /**
	   * Save current transaction state -- if the return value from this method is
	   * passed to `rollback`, the transaction will be reset to that state.
	   */
	  checkpoint: function checkpoint() {
	    // reactMountReady is the our only stateful wrapper
	    return this.reactMountReady.checkpoint();
	  },
	
	  rollback: function rollback(checkpoint) {
	    this.reactMountReady.rollback(checkpoint);
	  },
	
	  /**
	   * `PooledClass` looks for this, and will invoke this before allowing this
	   * instance to be reused.
	   */
	  destructor: function destructor() {
	    CallbackQueue.release(this.reactMountReady);
	    this.reactMountReady = null;
	  }
	};
	
	_assign(ReactReconcileTransaction.prototype, Transaction, Mixin);
	
	PooledClass.addPoolingTo(ReactReconcileTransaction);
	
	module.exports = ReactReconcileTransaction;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ }),
/* 150 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var ReactDOMSelection = __webpack_require__(151);
	
	var containsNode = __webpack_require__(153);
	var focusNode = __webpack_require__(98);
	var getActiveElement = __webpack_require__(156);
	
	function isInDocument(node) {
	  return containsNode(document.documentElement, node);
	}
	
	/**
	 * @ReactInputSelection: React input selection module. Based on Selection.js,
	 * but modified to be suitable for react and has a couple of bug fixes (doesn't
	 * assume buttons have range selections allowed).
	 * Input selection module for React.
	 */
	var ReactInputSelection = {
	
	  hasSelectionCapabilities: function hasSelectionCapabilities(elem) {
	    var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
	    return nodeName && (nodeName === 'input' && elem.type === 'text' || nodeName === 'textarea' || elem.contentEditable === 'true');
	  },
	
	  getSelectionInformation: function getSelectionInformation() {
	    var focusedElem = getActiveElement();
	    return {
	      focusedElem: focusedElem,
	      selectionRange: ReactInputSelection.hasSelectionCapabilities(focusedElem) ? ReactInputSelection.getSelection(focusedElem) : null
	    };
	  },
	
	  /**
	   * @restoreSelection: If any selection information was potentially lost,
	   * restore it. This is useful when performing operations that could remove dom
	   * nodes and place them back in, resulting in focus being lost.
	   */
	  restoreSelection: function restoreSelection(priorSelectionInformation) {
	    var curFocusedElem = getActiveElement();
	    var priorFocusedElem = priorSelectionInformation.focusedElem;
	    var priorSelectionRange = priorSelectionInformation.selectionRange;
	    if (curFocusedElem !== priorFocusedElem && isInDocument(priorFocusedElem)) {
	      if (ReactInputSelection.hasSelectionCapabilities(priorFocusedElem)) {
	        ReactInputSelection.setSelection(priorFocusedElem, priorSelectionRange);
	      }
	      focusNode(priorFocusedElem);
	    }
	  },
	
	  /**
	   * @getSelection: Gets the selection bounds of a focused textarea, input or
	   * contentEditable node.
	   * -@input: Look up selection bounds of this input
	   * -@return {start: selectionStart, end: selectionEnd}
	   */
	  getSelection: function getSelection(input) {
	    var selection;
	
	    if ('selectionStart' in input) {
	      // Modern browser with input or textarea.
	      selection = {
	        start: input.selectionStart,
	        end: input.selectionEnd
	      };
	    } else if (document.selection && input.nodeName && input.nodeName.toLowerCase() === 'input') {
	      // IE8 input.
	      var range = document.selection.createRange();
	      // There can only be one selection per document in IE, so it must
	      // be in our element.
	      if (range.parentElement() === input) {
	        selection = {
	          start: -range.moveStart('character', -input.value.length),
	          end: -range.moveEnd('character', -input.value.length)
	        };
	      }
	    } else {
	      // Content editable or old IE textarea.
	      selection = ReactDOMSelection.getOffsets(input);
	    }
	
	    return selection || { start: 0, end: 0 };
	  },
	
	  /**
	   * @setSelection: Sets the selection bounds of a textarea or input and focuses
	   * the input.
	   * -@input     Set selection bounds of this input or textarea
	   * -@offsets   Object of same form that is returned from get*
	   */
	  setSelection: function setSelection(input, offsets) {
	    var start = offsets.start;
	    var end = offsets.end;
	    if (end === undefined) {
	      end = start;
	    }
	
	    if ('selectionStart' in input) {
	      input.selectionStart = start;
	      input.selectionEnd = Math.min(end, input.value.length);
	    } else if (document.selection && input.nodeName && input.nodeName.toLowerCase() === 'input') {
	      var range = input.createTextRange();
	      range.collapse(true);
	      range.moveStart('character', start);
	      range.moveEnd('character', end - start);
	      range.select();
	    } else {
	      ReactDOMSelection.setOffsets(input, offsets);
	    }
	  }
	};
	
	module.exports = ReactInputSelection;

/***/ }),
/* 151 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var ExecutionEnvironment = __webpack_require__(52);
	
	var getNodeForCharacterOffset = __webpack_require__(152);
	var getTextContentAccessor = __webpack_require__(55);
	
	/**
	 * While `isCollapsed` is available on the Selection object and `collapsed`
	 * is available on the Range object, IE11 sometimes gets them wrong.
	 * If the anchor/focus nodes and offsets are the same, the range is collapsed.
	 */
	function isCollapsed(anchorNode, anchorOffset, focusNode, focusOffset) {
	  return anchorNode === focusNode && anchorOffset === focusOffset;
	}
	
	/**
	 * Get the appropriate anchor and focus node/offset pairs for IE.
	 *
	 * The catch here is that IE's selection API doesn't provide information
	 * about whether the selection is forward or backward, so we have to
	 * behave as though it's always forward.
	 *
	 * IE text differs from modern selection in that it behaves as though
	 * block elements end with a new line. This means character offsets will
	 * differ between the two APIs.
	 *
	 * @param {DOMElement} node
	 * @return {object}
	 */
	function getIEOffsets(node) {
	  var selection = document.selection;
	  var selectedRange = selection.createRange();
	  var selectedLength = selectedRange.text.length;
	
	  // Duplicate selection so we can move range without breaking user selection.
	  var fromStart = selectedRange.duplicate();
	  fromStart.moveToElementText(node);
	  fromStart.setEndPoint('EndToStart', selectedRange);
	
	  var startOffset = fromStart.text.length;
	  var endOffset = startOffset + selectedLength;
	
	  return {
	    start: startOffset,
	    end: endOffset
	  };
	}
	
	/**
	 * @param {DOMElement} node
	 * @return {?object}
	 */
	function getModernOffsets(node) {
	  var selection = window.getSelection && window.getSelection();
	
	  if (!selection || selection.rangeCount === 0) {
	    return null;
	  }
	
	  var anchorNode = selection.anchorNode;
	  var anchorOffset = selection.anchorOffset;
	  var focusNode = selection.focusNode;
	  var focusOffset = selection.focusOffset;
	
	  var currentRange = selection.getRangeAt(0);
	
	  // In Firefox, range.startContainer and range.endContainer can be "anonymous
	  // divs", e.g. the up/down buttons on an <input type="number">. Anonymous
	  // divs do not seem to expose properties, triggering a "Permission denied
	  // error" if any of its properties are accessed. The only seemingly possible
	  // way to avoid erroring is to access a property that typically works for
	  // non-anonymous divs and catch any error that may otherwise arise. See
	  // https://bugzilla.mozilla.org/show_bug.cgi?id=208427
	  try {
	    /* eslint-disable no-unused-expressions */
	    currentRange.startContainer.nodeType;
	    currentRange.endContainer.nodeType;
	    /* eslint-enable no-unused-expressions */
	  } catch (e) {
	    return null;
	  }
	
	  // If the node and offset values are the same, the selection is collapsed.
	  // `Selection.isCollapsed` is available natively, but IE sometimes gets
	  // this value wrong.
	  var isSelectionCollapsed = isCollapsed(selection.anchorNode, selection.anchorOffset, selection.focusNode, selection.focusOffset);
	
	  var rangeLength = isSelectionCollapsed ? 0 : currentRange.toString().length;
	
	  var tempRange = currentRange.cloneRange();
	  tempRange.selectNodeContents(node);
	  tempRange.setEnd(currentRange.startContainer, currentRange.startOffset);
	
	  var isTempRangeCollapsed = isCollapsed(tempRange.startContainer, tempRange.startOffset, tempRange.endContainer, tempRange.endOffset);
	
	  var start = isTempRangeCollapsed ? 0 : tempRange.toString().length;
	  var end = start + rangeLength;
	
	  // Detect whether the selection is backward.
	  var detectionRange = document.createRange();
	  detectionRange.setStart(anchorNode, anchorOffset);
	  detectionRange.setEnd(focusNode, focusOffset);
	  var isBackward = detectionRange.collapsed;
	
	  return {
	    start: isBackward ? end : start,
	    end: isBackward ? start : end
	  };
	}
	
	/**
	 * @param {DOMElement|DOMTextNode} node
	 * @param {object} offsets
	 */
	function setIEOffsets(node, offsets) {
	  var range = document.selection.createRange().duplicate();
	  var start, end;
	
	  if (offsets.end === undefined) {
	    start = offsets.start;
	    end = start;
	  } else if (offsets.start > offsets.end) {
	    start = offsets.end;
	    end = offsets.start;
	  } else {
	    start = offsets.start;
	    end = offsets.end;
	  }
	
	  range.moveToElementText(node);
	  range.moveStart('character', start);
	  range.setEndPoint('EndToStart', range);
	  range.moveEnd('character', end - start);
	  range.select();
	}
	
	/**
	 * In modern non-IE browsers, we can support both forward and backward
	 * selections.
	 *
	 * Note: IE10+ supports the Selection object, but it does not support
	 * the `extend` method, which means that even in modern IE, it's not possible
	 * to programmatically create a backward selection. Thus, for all IE
	 * versions, we use the old IE API to create our selections.
	 *
	 * @param {DOMElement|DOMTextNode} node
	 * @param {object} offsets
	 */
	function setModernOffsets(node, offsets) {
	  if (!window.getSelection) {
	    return;
	  }
	
	  var selection = window.getSelection();
	  var length = node[getTextContentAccessor()].length;
	  var start = Math.min(offsets.start, length);
	  var end = offsets.end === undefined ? start : Math.min(offsets.end, length);
	
	  // IE 11 uses modern selection, but doesn't support the extend method.
	  // Flip backward selections, so we can set with a single range.
	  if (!selection.extend && start > end) {
	    var temp = end;
	    end = start;
	    start = temp;
	  }
	
	  var startMarker = getNodeForCharacterOffset(node, start);
	  var endMarker = getNodeForCharacterOffset(node, end);
	
	  if (startMarker && endMarker) {
	    var range = document.createRange();
	    range.setStart(startMarker.node, startMarker.offset);
	    selection.removeAllRanges();
	
	    if (start > end) {
	      selection.addRange(range);
	      selection.extend(endMarker.node, endMarker.offset);
	    } else {
	      range.setEnd(endMarker.node, endMarker.offset);
	      selection.addRange(range);
	    }
	  }
	}
	
	var useIEOffsets = ExecutionEnvironment.canUseDOM && 'selection' in document && !('getSelection' in window);
	
	var ReactDOMSelection = {
	  /**
	   * @param {DOMElement} node
	   */
	  getOffsets: useIEOffsets ? getIEOffsets : getModernOffsets,
	
	  /**
	   * @param {DOMElement|DOMTextNode} node
	   * @param {object} offsets
	   */
	  setOffsets: useIEOffsets ? setIEOffsets : setModernOffsets
	};
	
	module.exports = ReactDOMSelection;

/***/ }),
/* 152 */
/***/ (function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	/**
	 * Given any node return the first leaf node without children.
	 *
	 * @param {DOMElement|DOMTextNode} node
	 * @return {DOMElement|DOMTextNode}
	 */
	
	function getLeafNode(node) {
	  while (node && node.firstChild) {
	    node = node.firstChild;
	  }
	  return node;
	}
	
	/**
	 * Get the next sibling within a container. This will walk up the
	 * DOM if a node's siblings have been exhausted.
	 *
	 * @param {DOMElement|DOMTextNode} node
	 * @return {?DOMElement|DOMTextNode}
	 */
	function getSiblingNode(node) {
	  while (node) {
	    if (node.nextSibling) {
	      return node.nextSibling;
	    }
	    node = node.parentNode;
	  }
	}
	
	/**
	 * Get object describing the nodes which contain characters at offset.
	 *
	 * @param {DOMElement|DOMTextNode} root
	 * @param {number} offset
	 * @return {?object}
	 */
	function getNodeForCharacterOffset(root, offset) {
	  var node = getLeafNode(root);
	  var nodeStart = 0;
	  var nodeEnd = 0;
	
	  while (node) {
	    if (node.nodeType === 3) {
	      nodeEnd = nodeStart + node.textContent.length;
	
	      if (nodeStart <= offset && nodeEnd >= offset) {
	        return {
	          node: node,
	          offset: offset - nodeStart
	        };
	      }
	
	      nodeStart = nodeEnd;
	    }
	
	    node = getLeafNode(getSiblingNode(node));
	  }
	}
	
	module.exports = getNodeForCharacterOffset;

/***/ }),
/* 153 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */
	
	var isTextNode = __webpack_require__(154);
	
	/*eslint-disable no-bitwise */
	
	/**
	 * Checks if a given DOM node contains or is another DOM node.
	 */
	function containsNode(outerNode, innerNode) {
	  if (!outerNode || !innerNode) {
	    return false;
	  } else if (outerNode === innerNode) {
	    return true;
	  } else if (isTextNode(outerNode)) {
	    return false;
	  } else if (isTextNode(innerNode)) {
	    return containsNode(outerNode, innerNode.parentNode);
	  } else if ('contains' in outerNode) {
	    return outerNode.contains(innerNode);
	  } else if (outerNode.compareDocumentPosition) {
	    return !!(outerNode.compareDocumentPosition(innerNode) & 16);
	  } else {
	    return false;
	  }
	}
	
	module.exports = containsNode;

/***/ }),
/* 154 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @typechecks
	 */
	
	var isNode = __webpack_require__(155);
	
	/**
	 * @param {*} object The object to check.
	 * @return {boolean} Whether or not the object is a DOM text node.
	 */
	function isTextNode(object) {
	  return isNode(object) && object.nodeType == 3;
	}
	
	module.exports = isTextNode;

/***/ }),
/* 155 */
/***/ (function(module, exports) {

	'use strict';
	
	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @typechecks
	 */
	
	/**
	 * @param {*} object The object to check.
	 * @return {boolean} Whether or not the object is a DOM node.
	 */
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
	
	function isNode(object) {
	  var doc = object ? object.ownerDocument || object : document;
	  var defaultView = doc.defaultView || window;
	  return !!(object && (typeof defaultView.Node === 'function' ? object instanceof defaultView.Node : (typeof object === 'undefined' ? 'undefined' : _typeof(object)) === 'object' && typeof object.nodeType === 'number' && typeof object.nodeName === 'string'));
	}
	
	module.exports = isNode;

/***/ }),
/* 156 */
/***/ (function(module, exports) {

	'use strict';
	
	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @typechecks
	 */
	
	/* eslint-disable fb-www/typeof-undefined */
	
	/**
	 * Same as document.activeElement but wraps in a try-catch block. In IE it is
	 * not safe to call document.activeElement if there is nothing focused.
	 *
	 * The activeElement will be null only if the document or document body is not
	 * yet defined.
	 *
	 * @param {?DOMDocument} doc Defaults to current document.
	 * @return {?DOMElement}
	 */
	
	function getActiveElement(doc) /*?DOMElement*/{
	  doc = doc || (typeof document !== 'undefined' ? document : undefined);
	  if (typeof doc === 'undefined') {
	    return null;
	  }
	  try {
	    return doc.activeElement || doc.body;
	  } catch (e) {
	    return doc.body;
	  }
	}
	
	module.exports = getActiveElement;

/***/ }),
/* 157 */
/***/ (function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var NS = {
	  xlink: 'http://www.w3.org/1999/xlink',
	  xml: 'http://www.w3.org/XML/1998/namespace'
	};
	
	// We use attributes for everything SVG so let's avoid some duplication and run
	// code instead.
	// The following are all specified in the HTML config already so we exclude here.
	// - class (as className)
	// - color
	// - height
	// - id
	// - lang
	// - max
	// - media
	// - method
	// - min
	// - name
	// - style
	// - target
	// - type
	// - width
	var ATTRS = {
	  accentHeight: 'accent-height',
	  accumulate: 0,
	  additive: 0,
	  alignmentBaseline: 'alignment-baseline',
	  allowReorder: 'allowReorder',
	  alphabetic: 0,
	  amplitude: 0,
	  arabicForm: 'arabic-form',
	  ascent: 0,
	  attributeName: 'attributeName',
	  attributeType: 'attributeType',
	  autoReverse: 'autoReverse',
	  azimuth: 0,
	  baseFrequency: 'baseFrequency',
	  baseProfile: 'baseProfile',
	  baselineShift: 'baseline-shift',
	  bbox: 0,
	  begin: 0,
	  bias: 0,
	  by: 0,
	  calcMode: 'calcMode',
	  capHeight: 'cap-height',
	  clip: 0,
	  clipPath: 'clip-path',
	  clipRule: 'clip-rule',
	  clipPathUnits: 'clipPathUnits',
	  colorInterpolation: 'color-interpolation',
	  colorInterpolationFilters: 'color-interpolation-filters',
	  colorProfile: 'color-profile',
	  colorRendering: 'color-rendering',
	  contentScriptType: 'contentScriptType',
	  contentStyleType: 'contentStyleType',
	  cursor: 0,
	  cx: 0,
	  cy: 0,
	  d: 0,
	  decelerate: 0,
	  descent: 0,
	  diffuseConstant: 'diffuseConstant',
	  direction: 0,
	  display: 0,
	  divisor: 0,
	  dominantBaseline: 'dominant-baseline',
	  dur: 0,
	  dx: 0,
	  dy: 0,
	  edgeMode: 'edgeMode',
	  elevation: 0,
	  enableBackground: 'enable-background',
	  end: 0,
	  exponent: 0,
	  externalResourcesRequired: 'externalResourcesRequired',
	  fill: 0,
	  fillOpacity: 'fill-opacity',
	  fillRule: 'fill-rule',
	  filter: 0,
	  filterRes: 'filterRes',
	  filterUnits: 'filterUnits',
	  floodColor: 'flood-color',
	  floodOpacity: 'flood-opacity',
	  focusable: 0,
	  fontFamily: 'font-family',
	  fontSize: 'font-size',
	  fontSizeAdjust: 'font-size-adjust',
	  fontStretch: 'font-stretch',
	  fontStyle: 'font-style',
	  fontVariant: 'font-variant',
	  fontWeight: 'font-weight',
	  format: 0,
	  from: 0,
	  fx: 0,
	  fy: 0,
	  g1: 0,
	  g2: 0,
	  glyphName: 'glyph-name',
	  glyphOrientationHorizontal: 'glyph-orientation-horizontal',
	  glyphOrientationVertical: 'glyph-orientation-vertical',
	  glyphRef: 'glyphRef',
	  gradientTransform: 'gradientTransform',
	  gradientUnits: 'gradientUnits',
	  hanging: 0,
	  horizAdvX: 'horiz-adv-x',
	  horizOriginX: 'horiz-origin-x',
	  ideographic: 0,
	  imageRendering: 'image-rendering',
	  'in': 0,
	  in2: 0,
	  intercept: 0,
	  k: 0,
	  k1: 0,
	  k2: 0,
	  k3: 0,
	  k4: 0,
	  kernelMatrix: 'kernelMatrix',
	  kernelUnitLength: 'kernelUnitLength',
	  kerning: 0,
	  keyPoints: 'keyPoints',
	  keySplines: 'keySplines',
	  keyTimes: 'keyTimes',
	  lengthAdjust: 'lengthAdjust',
	  letterSpacing: 'letter-spacing',
	  lightingColor: 'lighting-color',
	  limitingConeAngle: 'limitingConeAngle',
	  local: 0,
	  markerEnd: 'marker-end',
	  markerMid: 'marker-mid',
	  markerStart: 'marker-start',
	  markerHeight: 'markerHeight',
	  markerUnits: 'markerUnits',
	  markerWidth: 'markerWidth',
	  mask: 0,
	  maskContentUnits: 'maskContentUnits',
	  maskUnits: 'maskUnits',
	  mathematical: 0,
	  mode: 0,
	  numOctaves: 'numOctaves',
	  offset: 0,
	  opacity: 0,
	  operator: 0,
	  order: 0,
	  orient: 0,
	  orientation: 0,
	  origin: 0,
	  overflow: 0,
	  overlinePosition: 'overline-position',
	  overlineThickness: 'overline-thickness',
	  paintOrder: 'paint-order',
	  panose1: 'panose-1',
	  pathLength: 'pathLength',
	  patternContentUnits: 'patternContentUnits',
	  patternTransform: 'patternTransform',
	  patternUnits: 'patternUnits',
	  pointerEvents: 'pointer-events',
	  points: 0,
	  pointsAtX: 'pointsAtX',
	  pointsAtY: 'pointsAtY',
	  pointsAtZ: 'pointsAtZ',
	  preserveAlpha: 'preserveAlpha',
	  preserveAspectRatio: 'preserveAspectRatio',
	  primitiveUnits: 'primitiveUnits',
	  r: 0,
	  radius: 0,
	  refX: 'refX',
	  refY: 'refY',
	  renderingIntent: 'rendering-intent',
	  repeatCount: 'repeatCount',
	  repeatDur: 'repeatDur',
	  requiredExtensions: 'requiredExtensions',
	  requiredFeatures: 'requiredFeatures',
	  restart: 0,
	  result: 0,
	  rotate: 0,
	  rx: 0,
	  ry: 0,
	  scale: 0,
	  seed: 0,
	  shapeRendering: 'shape-rendering',
	  slope: 0,
	  spacing: 0,
	  specularConstant: 'specularConstant',
	  specularExponent: 'specularExponent',
	  speed: 0,
	  spreadMethod: 'spreadMethod',
	  startOffset: 'startOffset',
	  stdDeviation: 'stdDeviation',
	  stemh: 0,
	  stemv: 0,
	  stitchTiles: 'stitchTiles',
	  stopColor: 'stop-color',
	  stopOpacity: 'stop-opacity',
	  strikethroughPosition: 'strikethrough-position',
	  strikethroughThickness: 'strikethrough-thickness',
	  string: 0,
	  stroke: 0,
	  strokeDasharray: 'stroke-dasharray',
	  strokeDashoffset: 'stroke-dashoffset',
	  strokeLinecap: 'stroke-linecap',
	  strokeLinejoin: 'stroke-linejoin',
	  strokeMiterlimit: 'stroke-miterlimit',
	  strokeOpacity: 'stroke-opacity',
	  strokeWidth: 'stroke-width',
	  surfaceScale: 'surfaceScale',
	  systemLanguage: 'systemLanguage',
	  tableValues: 'tableValues',
	  targetX: 'targetX',
	  targetY: 'targetY',
	  textAnchor: 'text-anchor',
	  textDecoration: 'text-decoration',
	  textRendering: 'text-rendering',
	  textLength: 'textLength',
	  to: 0,
	  transform: 0,
	  u1: 0,
	  u2: 0,
	  underlinePosition: 'underline-position',
	  underlineThickness: 'underline-thickness',
	  unicode: 0,
	  unicodeBidi: 'unicode-bidi',
	  unicodeRange: 'unicode-range',
	  unitsPerEm: 'units-per-em',
	  vAlphabetic: 'v-alphabetic',
	  vHanging: 'v-hanging',
	  vIdeographic: 'v-ideographic',
	  vMathematical: 'v-mathematical',
	  values: 0,
	  vectorEffect: 'vector-effect',
	  version: 0,
	  vertAdvY: 'vert-adv-y',
	  vertOriginX: 'vert-origin-x',
	  vertOriginY: 'vert-origin-y',
	  viewBox: 'viewBox',
	  viewTarget: 'viewTarget',
	  visibility: 0,
	  widths: 0,
	  wordSpacing: 'word-spacing',
	  writingMode: 'writing-mode',
	  x: 0,
	  xHeight: 'x-height',
	  x1: 0,
	  x2: 0,
	  xChannelSelector: 'xChannelSelector',
	  xlinkActuate: 'xlink:actuate',
	  xlinkArcrole: 'xlink:arcrole',
	  xlinkHref: 'xlink:href',
	  xlinkRole: 'xlink:role',
	  xlinkShow: 'xlink:show',
	  xlinkTitle: 'xlink:title',
	  xlinkType: 'xlink:type',
	  xmlBase: 'xml:base',
	  xmlns: 0,
	  xmlnsXlink: 'xmlns:xlink',
	  xmlLang: 'xml:lang',
	  xmlSpace: 'xml:space',
	  y: 0,
	  y1: 0,
	  y2: 0,
	  yChannelSelector: 'yChannelSelector',
	  z: 0,
	  zoomAndPan: 'zoomAndPan'
	};
	
	var SVGDOMPropertyConfig = {
	  Properties: {},
	  DOMAttributeNamespaces: {
	    xlinkActuate: NS.xlink,
	    xlinkArcrole: NS.xlink,
	    xlinkHref: NS.xlink,
	    xlinkRole: NS.xlink,
	    xlinkShow: NS.xlink,
	    xlinkTitle: NS.xlink,
	    xlinkType: NS.xlink,
	    xmlBase: NS.xml,
	    xmlLang: NS.xml,
	    xmlSpace: NS.xml
	  },
	  DOMAttributeNames: {}
	};
	
	Object.keys(ATTRS).forEach(function (key) {
	  SVGDOMPropertyConfig.Properties[key] = 0;
	  if (ATTRS[key]) {
	    SVGDOMPropertyConfig.DOMAttributeNames[key] = ATTRS[key];
	  }
	});
	
	module.exports = SVGDOMPropertyConfig;

/***/ }),
/* 158 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var EventPropagators = __webpack_require__(45);
	var ExecutionEnvironment = __webpack_require__(52);
	var ReactDOMComponentTree = __webpack_require__(38);
	var ReactInputSelection = __webpack_require__(150);
	var SyntheticEvent = __webpack_require__(57);
	
	var getActiveElement = __webpack_require__(156);
	var isTextInputElement = __webpack_require__(75);
	var shallowEqual = __webpack_require__(127);
	
	var skipSelectionChangeEvent = ExecutionEnvironment.canUseDOM && 'documentMode' in document && document.documentMode <= 11;
	
	var eventTypes = {
	  select: {
	    phasedRegistrationNames: {
	      bubbled: 'onSelect',
	      captured: 'onSelectCapture'
	    },
	    dependencies: ['topBlur', 'topContextMenu', 'topFocus', 'topKeyDown', 'topKeyUp', 'topMouseDown', 'topMouseUp', 'topSelectionChange']
	  }
	};
	
	var activeElement = null;
	var activeElementInst = null;
	var lastSelection = null;
	var mouseDown = false;
	
	// Track whether a listener exists for this plugin. If none exist, we do
	// not extract events. See #3639.
	var hasListener = false;
	
	/**
	 * Get an object which is a unique representation of the current selection.
	 *
	 * The return value will not be consistent across nodes or browsers, but
	 * two identical selections on the same node will return identical objects.
	 *
	 * @param {DOMElement} node
	 * @return {object}
	 */
	function getSelection(node) {
	  if ('selectionStart' in node && ReactInputSelection.hasSelectionCapabilities(node)) {
	    return {
	      start: node.selectionStart,
	      end: node.selectionEnd
	    };
	  } else if (window.getSelection) {
	    var selection = window.getSelection();
	    return {
	      anchorNode: selection.anchorNode,
	      anchorOffset: selection.anchorOffset,
	      focusNode: selection.focusNode,
	      focusOffset: selection.focusOffset
	    };
	  } else if (document.selection) {
	    var range = document.selection.createRange();
	    return {
	      parentElement: range.parentElement(),
	      text: range.text,
	      top: range.boundingTop,
	      left: range.boundingLeft
	    };
	  }
	}
	
	/**
	 * Poll selection to see whether it's changed.
	 *
	 * @param {object} nativeEvent
	 * @return {?SyntheticEvent}
	 */
	function constructSelectEvent(nativeEvent, nativeEventTarget) {
	  // Ensure we have the right element, and that the user is not dragging a
	  // selection (this matches native `select` event behavior). In HTML5, select
	  // fires only on input and textarea thus if there's no focused element we
	  // won't dispatch.
	  if (mouseDown || activeElement == null || activeElement !== getActiveElement()) {
	    return null;
	  }
	
	  // Only fire when selection has actually changed.
	  var currentSelection = getSelection(activeElement);
	  if (!lastSelection || !shallowEqual(lastSelection, currentSelection)) {
	    lastSelection = currentSelection;
	
	    var syntheticEvent = SyntheticEvent.getPooled(eventTypes.select, activeElementInst, nativeEvent, nativeEventTarget);
	
	    syntheticEvent.type = 'select';
	    syntheticEvent.target = activeElement;
	
	    EventPropagators.accumulateTwoPhaseDispatches(syntheticEvent);
	
	    return syntheticEvent;
	  }
	
	  return null;
	}
	
	/**
	 * This plugin creates an `onSelect` event that normalizes select events
	 * across form elements.
	 *
	 * Supported elements are:
	 * - input (see `isTextInputElement`)
	 * - textarea
	 * - contentEditable
	 *
	 * This differs from native browser implementations in the following ways:
	 * - Fires on contentEditable fields as well as inputs.
	 * - Fires for collapsed selection.
	 * - Fires after user input.
	 */
	var SelectEventPlugin = {
	
	  eventTypes: eventTypes,
	
	  extractEvents: function extractEvents(topLevelType, targetInst, nativeEvent, nativeEventTarget) {
	    if (!hasListener) {
	      return null;
	    }
	
	    var targetNode = targetInst ? ReactDOMComponentTree.getNodeFromInstance(targetInst) : window;
	
	    switch (topLevelType) {
	      // Track the input node that has focus.
	      case 'topFocus':
	        if (isTextInputElement(targetNode) || targetNode.contentEditable === 'true') {
	          activeElement = targetNode;
	          activeElementInst = targetInst;
	          lastSelection = null;
	        }
	        break;
	      case 'topBlur':
	        activeElement = null;
	        activeElementInst = null;
	        lastSelection = null;
	        break;
	
	      // Don't fire the event while the user is dragging. This matches the
	      // semantics of the native select event.
	      case 'topMouseDown':
	        mouseDown = true;
	        break;
	      case 'topContextMenu':
	      case 'topMouseUp':
	        mouseDown = false;
	        return constructSelectEvent(nativeEvent, nativeEventTarget);
	
	      // Chrome and IE fire non-standard event when selection is changed (and
	      // sometimes when it hasn't). IE's event fires out of order with respect
	      // to key and input events on deletion, so we discard it.
	      //
	      // Firefox doesn't support selectionchange, so check selection status
	      // after each key entry. The selection changes after keydown and before
	      // keyup, but we check on keydown as well in the case of holding down a
	      // key, when multiple keydown events are fired but only one keyup is.
	      // This is also our approach for IE handling, for the reason above.
	      case 'topSelectionChange':
	        if (skipSelectionChangeEvent) {
	          break;
	        }
	      // falls through
	      case 'topKeyDown':
	      case 'topKeyUp':
	        return constructSelectEvent(nativeEvent, nativeEventTarget);
	    }
	
	    return null;
	  },
	
	  didPutListener: function didPutListener(inst, registrationName, listener) {
	    if (registrationName === 'onSelect') {
	      hasListener = true;
	    }
	  }
	};
	
	module.exports = SelectEventPlugin;

/***/ }),
/* 159 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */
	
	'use strict';
	
	var _prodInvariant = __webpack_require__(39);
	
	var EventListener = __webpack_require__(146);
	var EventPropagators = __webpack_require__(45);
	var ReactDOMComponentTree = __webpack_require__(38);
	var SyntheticAnimationEvent = __webpack_require__(160);
	var SyntheticClipboardEvent = __webpack_require__(161);
	var SyntheticEvent = __webpack_require__(57);
	var SyntheticFocusEvent = __webpack_require__(162);
	var SyntheticKeyboardEvent = __webpack_require__(163);
	var SyntheticMouseEvent = __webpack_require__(78);
	var SyntheticDragEvent = __webpack_require__(166);
	var SyntheticTouchEvent = __webpack_require__(167);
	var SyntheticTransitionEvent = __webpack_require__(168);
	var SyntheticUIEvent = __webpack_require__(79);
	var SyntheticWheelEvent = __webpack_require__(169);
	
	var emptyFunction = __webpack_require__(12);
	var getEventCharCode = __webpack_require__(164);
	var invariant = __webpack_require__(8);
	
	/**
	 * Turns
	 * ['abort', ...]
	 * into
	 * eventTypes = {
	 *   'abort': {
	 *     phasedRegistrationNames: {
	 *       bubbled: 'onAbort',
	 *       captured: 'onAbortCapture',
	 *     },
	 *     dependencies: ['topAbort'],
	 *   },
	 *   ...
	 * };
	 * topLevelEventsToDispatchConfig = {
	 *   'topAbort': { sameConfig }
	 * };
	 */
	var eventTypes = {};
	var topLevelEventsToDispatchConfig = {};
	['abort', 'animationEnd', 'animationIteration', 'animationStart', 'blur', 'canPlay', 'canPlayThrough', 'click', 'contextMenu', 'copy', 'cut', 'doubleClick', 'drag', 'dragEnd', 'dragEnter', 'dragExit', 'dragLeave', 'dragOver', 'dragStart', 'drop', 'durationChange', 'emptied', 'encrypted', 'ended', 'error', 'focus', 'input', 'invalid', 'keyDown', 'keyPress', 'keyUp', 'load', 'loadedData', 'loadedMetadata', 'loadStart', 'mouseDown', 'mouseMove', 'mouseOut', 'mouseOver', 'mouseUp', 'paste', 'pause', 'play', 'playing', 'progress', 'rateChange', 'reset', 'scroll', 'seeked', 'seeking', 'stalled', 'submit', 'suspend', 'timeUpdate', 'touchCancel', 'touchEnd', 'touchMove', 'touchStart', 'transitionEnd', 'volumeChange', 'waiting', 'wheel'].forEach(function (event) {
	  var capitalizedEvent = event[0].toUpperCase() + event.slice(1);
	  var onEvent = 'on' + capitalizedEvent;
	  var topEvent = 'top' + capitalizedEvent;
	
	  var type = {
	    phasedRegistrationNames: {
	      bubbled: onEvent,
	      captured: onEvent + 'Capture'
	    },
	    dependencies: [topEvent]
	  };
	  eventTypes[event] = type;
	  topLevelEventsToDispatchConfig[topEvent] = type;
	});
	
	var onClickListeners = {};
	
	function getDictionaryKey(inst) {
	  // Prevents V8 performance issue:
	  // https://github.com/facebook/react/pull/7232
	  return '.' + inst._rootNodeID;
	}
	
	function isInteractive(tag) {
	  return tag === 'button' || tag === 'input' || tag === 'select' || tag === 'textarea';
	}
	
	var SimpleEventPlugin = {
	
	  eventTypes: eventTypes,
	
	  extractEvents: function extractEvents(topLevelType, targetInst, nativeEvent, nativeEventTarget) {
	    var dispatchConfig = topLevelEventsToDispatchConfig[topLevelType];
	    if (!dispatchConfig) {
	      return null;
	    }
	    var EventConstructor;
	    switch (topLevelType) {
	      case 'topAbort':
	      case 'topCanPlay':
	      case 'topCanPlayThrough':
	      case 'topDurationChange':
	      case 'topEmptied':
	      case 'topEncrypted':
	      case 'topEnded':
	      case 'topError':
	      case 'topInput':
	      case 'topInvalid':
	      case 'topLoad':
	      case 'topLoadedData':
	      case 'topLoadedMetadata':
	      case 'topLoadStart':
	      case 'topPause':
	      case 'topPlay':
	      case 'topPlaying':
	      case 'topProgress':
	      case 'topRateChange':
	      case 'topReset':
	      case 'topSeeked':
	      case 'topSeeking':
	      case 'topStalled':
	      case 'topSubmit':
	      case 'topSuspend':
	      case 'topTimeUpdate':
	      case 'topVolumeChange':
	      case 'topWaiting':
	        // HTML Events
	        // @see http://www.w3.org/TR/html5/index.html#events-0
	        EventConstructor = SyntheticEvent;
	        break;
	      case 'topKeyPress':
	        // Firefox creates a keypress event for function keys too. This removes
	        // the unwanted keypress events. Enter is however both printable and
	        // non-printable. One would expect Tab to be as well (but it isn't).
	        if (getEventCharCode(nativeEvent) === 0) {
	          return null;
	        }
	      /* falls through */
	      case 'topKeyDown':
	      case 'topKeyUp':
	        EventConstructor = SyntheticKeyboardEvent;
	        break;
	      case 'topBlur':
	      case 'topFocus':
	        EventConstructor = SyntheticFocusEvent;
	        break;
	      case 'topClick':
	        // Firefox creates a click event on right mouse clicks. This removes the
	        // unwanted click events.
	        if (nativeEvent.button === 2) {
	          return null;
	        }
	      /* falls through */
	      case 'topDoubleClick':
	      case 'topMouseDown':
	      case 'topMouseMove':
	      case 'topMouseUp':
	      // TODO: Disabled elements should not respond to mouse events
	      /* falls through */
	      case 'topMouseOut':
	      case 'topMouseOver':
	      case 'topContextMenu':
	        EventConstructor = SyntheticMouseEvent;
	        break;
	      case 'topDrag':
	      case 'topDragEnd':
	      case 'topDragEnter':
	      case 'topDragExit':
	      case 'topDragLeave':
	      case 'topDragOver':
	      case 'topDragStart':
	      case 'topDrop':
	        EventConstructor = SyntheticDragEvent;
	        break;
	      case 'topTouchCancel':
	      case 'topTouchEnd':
	      case 'topTouchMove':
	      case 'topTouchStart':
	        EventConstructor = SyntheticTouchEvent;
	        break;
	      case 'topAnimationEnd':
	      case 'topAnimationIteration':
	      case 'topAnimationStart':
	        EventConstructor = SyntheticAnimationEvent;
	        break;
	      case 'topTransitionEnd':
	        EventConstructor = SyntheticTransitionEvent;
	        break;
	      case 'topScroll':
	        EventConstructor = SyntheticUIEvent;
	        break;
	      case 'topWheel':
	        EventConstructor = SyntheticWheelEvent;
	        break;
	      case 'topCopy':
	      case 'topCut':
	      case 'topPaste':
	        EventConstructor = SyntheticClipboardEvent;
	        break;
	    }
	    !EventConstructor ? process.env.NODE_ENV !== 'production' ? invariant(false, 'SimpleEventPlugin: Unhandled event type, `%s`.', topLevelType) : _prodInvariant('86', topLevelType) : void 0;
	    var event = EventConstructor.getPooled(dispatchConfig, targetInst, nativeEvent, nativeEventTarget);
	    EventPropagators.accumulateTwoPhaseDispatches(event);
	    return event;
	  },
	
	  didPutListener: function didPutListener(inst, registrationName, listener) {
	    // Mobile Safari does not fire properly bubble click events on
	    // non-interactive elements, which means delegated click listeners do not
	    // fire. The workaround for this bug involves attaching an empty click
	    // listener on the target node.
	    // http://www.quirksmode.org/blog/archives/2010/09/click_event_del.html
	    if (registrationName === 'onClick' && !isInteractive(inst._tag)) {
	      var key = getDictionaryKey(inst);
	      var node = ReactDOMComponentTree.getNodeFromInstance(inst);
	      if (!onClickListeners[key]) {
	        onClickListeners[key] = EventListener.listen(node, 'click', emptyFunction);
	      }
	    }
	  },
	
	  willDeleteListener: function willDeleteListener(inst, registrationName) {
	    if (registrationName === 'onClick' && !isInteractive(inst._tag)) {
	      var key = getDictionaryKey(inst);
	      onClickListeners[key].remove();
	      delete onClickListeners[key];
	    }
	  }
	
	};
	
	module.exports = SimpleEventPlugin;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ }),
/* 160 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var SyntheticEvent = __webpack_require__(57);
	
	/**
	 * @interface Event
	 * @see http://www.w3.org/TR/css3-animations/#AnimationEvent-interface
	 * @see https://developer.mozilla.org/en-US/docs/Web/API/AnimationEvent
	 */
	var AnimationEventInterface = {
	  animationName: null,
	  elapsedTime: null,
	  pseudoElement: null
	};
	
	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticEvent}
	 */
	function SyntheticAnimationEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  return SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}
	
	SyntheticEvent.augmentClass(SyntheticAnimationEvent, AnimationEventInterface);
	
	module.exports = SyntheticAnimationEvent;

/***/ }),
/* 161 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var SyntheticEvent = __webpack_require__(57);
	
	/**
	 * @interface Event
	 * @see http://www.w3.org/TR/clipboard-apis/
	 */
	var ClipboardEventInterface = {
	  clipboardData: function clipboardData(event) {
	    return 'clipboardData' in event ? event.clipboardData : window.clipboardData;
	  }
	};
	
	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticUIEvent}
	 */
	function SyntheticClipboardEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  return SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}
	
	SyntheticEvent.augmentClass(SyntheticClipboardEvent, ClipboardEventInterface);
	
	module.exports = SyntheticClipboardEvent;

/***/ }),
/* 162 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var SyntheticUIEvent = __webpack_require__(79);
	
	/**
	 * @interface FocusEvent
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */
	var FocusEventInterface = {
	  relatedTarget: null
	};
	
	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticUIEvent}
	 */
	function SyntheticFocusEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  return SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}
	
	SyntheticUIEvent.augmentClass(SyntheticFocusEvent, FocusEventInterface);
	
	module.exports = SyntheticFocusEvent;

/***/ }),
/* 163 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var SyntheticUIEvent = __webpack_require__(79);
	
	var getEventCharCode = __webpack_require__(164);
	var getEventKey = __webpack_require__(165);
	var getEventModifierState = __webpack_require__(81);
	
	/**
	 * @interface KeyboardEvent
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */
	var KeyboardEventInterface = {
	  key: getEventKey,
	  location: null,
	  ctrlKey: null,
	  shiftKey: null,
	  altKey: null,
	  metaKey: null,
	  repeat: null,
	  locale: null,
	  getModifierState: getEventModifierState,
	  // Legacy Interface
	  charCode: function charCode(event) {
	    // `charCode` is the result of a KeyPress event and represents the value of
	    // the actual printable character.
	
	    // KeyPress is deprecated, but its replacement is not yet final and not
	    // implemented in any major browser. Only KeyPress has charCode.
	    if (event.type === 'keypress') {
	      return getEventCharCode(event);
	    }
	    return 0;
	  },
	  keyCode: function keyCode(event) {
	    // `keyCode` is the result of a KeyDown/Up event and represents the value of
	    // physical keyboard key.
	
	    // The actual meaning of the value depends on the users' keyboard layout
	    // which cannot be detected. Assuming that it is a US keyboard layout
	    // provides a surprisingly accurate mapping for US and European users.
	    // Due to this, it is left to the user to implement at this time.
	    if (event.type === 'keydown' || event.type === 'keyup') {
	      return event.keyCode;
	    }
	    return 0;
	  },
	  which: function which(event) {
	    // `which` is an alias for either `keyCode` or `charCode` depending on the
	    // type of the event.
	    if (event.type === 'keypress') {
	      return getEventCharCode(event);
	    }
	    if (event.type === 'keydown' || event.type === 'keyup') {
	      return event.keyCode;
	    }
	    return 0;
	  }
	};
	
	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticUIEvent}
	 */
	function SyntheticKeyboardEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  return SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}
	
	SyntheticUIEvent.augmentClass(SyntheticKeyboardEvent, KeyboardEventInterface);
	
	module.exports = SyntheticKeyboardEvent;

/***/ }),
/* 164 */
/***/ (function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	/**
	 * `charCode` represents the actual "character code" and is safe to use with
	 * `String.fromCharCode`. As such, only keys that correspond to printable
	 * characters produce a valid `charCode`, the only exception to this is Enter.
	 * The Tab-key is considered non-printable and does not have a `charCode`,
	 * presumably because it does not produce a tab-character in browsers.
	 *
	 * @param {object} nativeEvent Native browser event.
	 * @return {number} Normalized `charCode` property.
	 */
	
	function getEventCharCode(nativeEvent) {
	  var charCode;
	  var keyCode = nativeEvent.keyCode;
	
	  if ('charCode' in nativeEvent) {
	    charCode = nativeEvent.charCode;
	
	    // FF does not set `charCode` for the Enter-key, check against `keyCode`.
	    if (charCode === 0 && keyCode === 13) {
	      charCode = 13;
	    }
	  } else {
	    // IE8 does not implement `charCode`, but `keyCode` has the correct value.
	    charCode = keyCode;
	  }
	
	  // Some non-printable keys are reported in `charCode`/`keyCode`, discard them.
	  // Must not discard the (non-)printable Enter-key.
	  if (charCode >= 32 || charCode === 13) {
	    return charCode;
	  }
	
	  return 0;
	}
	
	module.exports = getEventCharCode;

/***/ }),
/* 165 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var getEventCharCode = __webpack_require__(164);
	
	/**
	 * Normalization of deprecated HTML5 `key` values
	 * @see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent#Key_names
	 */
	var normalizeKey = {
	  'Esc': 'Escape',
	  'Spacebar': ' ',
	  'Left': 'ArrowLeft',
	  'Up': 'ArrowUp',
	  'Right': 'ArrowRight',
	  'Down': 'ArrowDown',
	  'Del': 'Delete',
	  'Win': 'OS',
	  'Menu': 'ContextMenu',
	  'Apps': 'ContextMenu',
	  'Scroll': 'ScrollLock',
	  'MozPrintableKey': 'Unidentified'
	};
	
	/**
	 * Translation from legacy `keyCode` to HTML5 `key`
	 * Only special keys supported, all others depend on keyboard layout or browser
	 * @see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent#Key_names
	 */
	var translateToKey = {
	  8: 'Backspace',
	  9: 'Tab',
	  12: 'Clear',
	  13: 'Enter',
	  16: 'Shift',
	  17: 'Control',
	  18: 'Alt',
	  19: 'Pause',
	  20: 'CapsLock',
	  27: 'Escape',
	  32: ' ',
	  33: 'PageUp',
	  34: 'PageDown',
	  35: 'End',
	  36: 'Home',
	  37: 'ArrowLeft',
	  38: 'ArrowUp',
	  39: 'ArrowRight',
	  40: 'ArrowDown',
	  45: 'Insert',
	  46: 'Delete',
	  112: 'F1', 113: 'F2', 114: 'F3', 115: 'F4', 116: 'F5', 117: 'F6',
	  118: 'F7', 119: 'F8', 120: 'F9', 121: 'F10', 122: 'F11', 123: 'F12',
	  144: 'NumLock',
	  145: 'ScrollLock',
	  224: 'Meta'
	};
	
	/**
	 * @param {object} nativeEvent Native browser event.
	 * @return {string} Normalized `key` property.
	 */
	function getEventKey(nativeEvent) {
	  if (nativeEvent.key) {
	    // Normalize inconsistent values reported by browsers due to
	    // implementations of a working draft specification.
	
	    // FireFox implements `key` but returns `MozPrintableKey` for all
	    // printable characters (normalized to `Unidentified`), ignore it.
	    var key = normalizeKey[nativeEvent.key] || nativeEvent.key;
	    if (key !== 'Unidentified') {
	      return key;
	    }
	  }
	
	  // Browser does not implement `key`, polyfill as much of it as we can.
	  if (nativeEvent.type === 'keypress') {
	    var charCode = getEventCharCode(nativeEvent);
	
	    // The enter-key is technically both printable and non-printable and can
	    // thus be captured by `keypress`, no other non-printable key should.
	    return charCode === 13 ? 'Enter' : String.fromCharCode(charCode);
	  }
	  if (nativeEvent.type === 'keydown' || nativeEvent.type === 'keyup') {
	    // While user keyboard layout determines the actual meaning of each
	    // `keyCode` value, almost all function keys have a universal value.
	    return translateToKey[nativeEvent.keyCode] || 'Unidentified';
	  }
	  return '';
	}
	
	module.exports = getEventKey;

/***/ }),
/* 166 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var SyntheticMouseEvent = __webpack_require__(78);
	
	/**
	 * @interface DragEvent
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */
	var DragEventInterface = {
	  dataTransfer: null
	};
	
	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticUIEvent}
	 */
	function SyntheticDragEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  return SyntheticMouseEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}
	
	SyntheticMouseEvent.augmentClass(SyntheticDragEvent, DragEventInterface);
	
	module.exports = SyntheticDragEvent;

/***/ }),
/* 167 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var SyntheticUIEvent = __webpack_require__(79);
	
	var getEventModifierState = __webpack_require__(81);
	
	/**
	 * @interface TouchEvent
	 * @see http://www.w3.org/TR/touch-events/
	 */
	var TouchEventInterface = {
	  touches: null,
	  targetTouches: null,
	  changedTouches: null,
	  altKey: null,
	  metaKey: null,
	  ctrlKey: null,
	  shiftKey: null,
	  getModifierState: getEventModifierState
	};
	
	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticUIEvent}
	 */
	function SyntheticTouchEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  return SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}
	
	SyntheticUIEvent.augmentClass(SyntheticTouchEvent, TouchEventInterface);
	
	module.exports = SyntheticTouchEvent;

/***/ }),
/* 168 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var SyntheticEvent = __webpack_require__(57);
	
	/**
	 * @interface Event
	 * @see http://www.w3.org/TR/2009/WD-css3-transitions-20090320/#transition-events-
	 * @see https://developer.mozilla.org/en-US/docs/Web/API/TransitionEvent
	 */
	var TransitionEventInterface = {
	  propertyName: null,
	  elapsedTime: null,
	  pseudoElement: null
	};
	
	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticEvent}
	 */
	function SyntheticTransitionEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  return SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}
	
	SyntheticEvent.augmentClass(SyntheticTransitionEvent, TransitionEventInterface);
	
	module.exports = SyntheticTransitionEvent;

/***/ }),
/* 169 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var SyntheticMouseEvent = __webpack_require__(78);
	
	/**
	 * @interface WheelEvent
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */
	var WheelEventInterface = {
	  deltaX: function deltaX(event) {
	    return 'deltaX' in event ? event.deltaX :
	    // Fallback to `wheelDeltaX` for Webkit and normalize (right is positive).
	    'wheelDeltaX' in event ? -event.wheelDeltaX : 0;
	  },
	  deltaY: function deltaY(event) {
	    return 'deltaY' in event ? event.deltaY :
	    // Fallback to `wheelDeltaY` for Webkit and normalize (down is positive).
	    'wheelDeltaY' in event ? -event.wheelDeltaY :
	    // Fallback to `wheelDelta` for IE<9 and normalize (down is positive).
	    'wheelDelta' in event ? -event.wheelDelta : 0;
	  },
	  deltaZ: null,
	
	  // Browsers without "deltaMode" is reporting in raw wheel delta where one
	  // notch on the scroll is always +/- 120, roughly equivalent to pixels.
	  // A good approximation of DOM_DELTA_LINE (1) is 5% of viewport size or
	  // ~40 pixels, for DOM_DELTA_SCREEN (2) it is 87.5% of viewport size.
	  deltaMode: null
	};
	
	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticMouseEvent}
	 */
	function SyntheticWheelEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  return SyntheticMouseEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}
	
	SyntheticMouseEvent.augmentClass(SyntheticWheelEvent, WheelEventInterface);
	
	module.exports = SyntheticWheelEvent;

/***/ }),
/* 170 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var _prodInvariant = __webpack_require__(39);
	
	var DOMLazyTree = __webpack_require__(85);
	var DOMProperty = __webpack_require__(40);
	var React = __webpack_require__(2);
	var ReactBrowserEventEmitter = __webpack_require__(109);
	var ReactCurrentOwner = __webpack_require__(10);
	var ReactDOMComponentTree = __webpack_require__(38);
	var ReactDOMContainerInfo = __webpack_require__(171);
	var ReactDOMFeatureFlags = __webpack_require__(172);
	var ReactFeatureFlags = __webpack_require__(62);
	var ReactInstanceMap = __webpack_require__(120);
	var ReactInstrumentation = __webpack_require__(66);
	var ReactMarkupChecksum = __webpack_require__(173);
	var ReactReconciler = __webpack_require__(63);
	var ReactUpdateQueue = __webpack_require__(139);
	var ReactUpdates = __webpack_require__(60);
	
	var emptyObject = __webpack_require__(20);
	var instantiateReactComponent = __webpack_require__(122);
	var invariant = __webpack_require__(8);
	var setInnerHTML = __webpack_require__(87);
	var shouldUpdateReactComponent = __webpack_require__(128);
	var warning = __webpack_require__(11);
	
	var ATTR_NAME = DOMProperty.ID_ATTRIBUTE_NAME;
	var ROOT_ATTR_NAME = DOMProperty.ROOT_ATTRIBUTE_NAME;
	
	var ELEMENT_NODE_TYPE = 1;
	var DOC_NODE_TYPE = 9;
	var DOCUMENT_FRAGMENT_NODE_TYPE = 11;
	
	var instancesByReactRootID = {};
	
	/**
	 * Finds the index of the first character
	 * that's not common between the two given strings.
	 *
	 * @return {number} the index of the character where the strings diverge
	 */
	function firstDifferenceIndex(string1, string2) {
	  var minLen = Math.min(string1.length, string2.length);
	  for (var i = 0; i < minLen; i++) {
	    if (string1.charAt(i) !== string2.charAt(i)) {
	      return i;
	    }
	  }
	  return string1.length === string2.length ? -1 : minLen;
	}
	
	/**
	 * @param {DOMElement|DOMDocument} container DOM element that may contain
	 * a React component
	 * @return {?*} DOM element that may have the reactRoot ID, or null.
	 */
	function getReactRootElementInContainer(container) {
	  if (!container) {
	    return null;
	  }
	
	  if (container.nodeType === DOC_NODE_TYPE) {
	    return container.documentElement;
	  } else {
	    return container.firstChild;
	  }
	}
	
	function internalGetID(node) {
	  // If node is something like a window, document, or text node, none of
	  // which support attributes or a .getAttribute method, gracefully return
	  // the empty string, as if the attribute were missing.
	  return node.getAttribute && node.getAttribute(ATTR_NAME) || '';
	}
	
	/**
	 * Mounts this component and inserts it into the DOM.
	 *
	 * @param {ReactComponent} componentInstance The instance to mount.
	 * @param {DOMElement} container DOM element to mount into.
	 * @param {ReactReconcileTransaction} transaction
	 * @param {boolean} shouldReuseMarkup If true, do not insert markup
	 */
	function mountComponentIntoNode(wrapperInstance, container, transaction, shouldReuseMarkup, context) {
	  var markerName;
	  if (ReactFeatureFlags.logTopLevelRenders) {
	    var wrappedElement = wrapperInstance._currentElement.props.child;
	    var type = wrappedElement.type;
	    markerName = 'React mount: ' + (typeof type === 'string' ? type : type.displayName || type.name);
	    console.time(markerName);
	  }
	
	  var markup = ReactReconciler.mountComponent(wrapperInstance, transaction, null, ReactDOMContainerInfo(wrapperInstance, container), context, 0 /* parentDebugID */
	  );
	
	  if (markerName) {
	    console.timeEnd(markerName);
	  }
	
	  wrapperInstance._renderedComponent._topLevelWrapper = wrapperInstance;
	  ReactMount._mountImageIntoNode(markup, container, wrapperInstance, shouldReuseMarkup, transaction);
	}
	
	/**
	 * Batched mount.
	 *
	 * @param {ReactComponent} componentInstance The instance to mount.
	 * @param {DOMElement} container DOM element to mount into.
	 * @param {boolean} shouldReuseMarkup If true, do not insert markup
	 */
	function batchedMountComponentIntoNode(componentInstance, container, shouldReuseMarkup, context) {
	  var transaction = ReactUpdates.ReactReconcileTransaction.getPooled(
	  /* useCreateElement */
	  !shouldReuseMarkup && ReactDOMFeatureFlags.useCreateElement);
	  transaction.perform(mountComponentIntoNode, null, componentInstance, container, transaction, shouldReuseMarkup, context);
	  ReactUpdates.ReactReconcileTransaction.release(transaction);
	}
	
	/**
	 * Unmounts a component and removes it from the DOM.
	 *
	 * @param {ReactComponent} instance React component instance.
	 * @param {DOMElement} container DOM element to unmount from.
	 * @final
	 * @internal
	 * @see {ReactMount.unmountComponentAtNode}
	 */
	function unmountComponentFromNode(instance, container, safely) {
	  if (process.env.NODE_ENV !== 'production') {
	    ReactInstrumentation.debugTool.onBeginFlush();
	  }
	  ReactReconciler.unmountComponent(instance, safely);
	  if (process.env.NODE_ENV !== 'production') {
	    ReactInstrumentation.debugTool.onEndFlush();
	  }
	
	  if (container.nodeType === DOC_NODE_TYPE) {
	    container = container.documentElement;
	  }
	
	  // http://jsperf.com/emptying-a-node
	  while (container.lastChild) {
	    container.removeChild(container.lastChild);
	  }
	}
	
	/**
	 * True if the supplied DOM node has a direct React-rendered child that is
	 * not a React root element. Useful for warning in `render`,
	 * `unmountComponentAtNode`, etc.
	 *
	 * @param {?DOMElement} node The candidate DOM node.
	 * @return {boolean} True if the DOM element contains a direct child that was
	 * rendered by React but is not a root element.
	 * @internal
	 */
	function hasNonRootReactChild(container) {
	  var rootEl = getReactRootElementInContainer(container);
	  if (rootEl) {
	    var inst = ReactDOMComponentTree.getInstanceFromNode(rootEl);
	    return !!(inst && inst._hostParent);
	  }
	}
	
	/**
	 * True if the supplied DOM node is a React DOM element and
	 * it has been rendered by another copy of React.
	 *
	 * @param {?DOMElement} node The candidate DOM node.
	 * @return {boolean} True if the DOM has been rendered by another copy of React
	 * @internal
	 */
	function nodeIsRenderedByOtherInstance(container) {
	  var rootEl = getReactRootElementInContainer(container);
	  return !!(rootEl && isReactNode(rootEl) && !ReactDOMComponentTree.getInstanceFromNode(rootEl));
	}
	
	/**
	 * True if the supplied DOM node is a valid node element.
	 *
	 * @param {?DOMElement} node The candidate DOM node.
	 * @return {boolean} True if the DOM is a valid DOM node.
	 * @internal
	 */
	function isValidContainer(node) {
	  return !!(node && (node.nodeType === ELEMENT_NODE_TYPE || node.nodeType === DOC_NODE_TYPE || node.nodeType === DOCUMENT_FRAGMENT_NODE_TYPE));
	}
	
	/**
	 * True if the supplied DOM node is a valid React node element.
	 *
	 * @param {?DOMElement} node The candidate DOM node.
	 * @return {boolean} True if the DOM is a valid React DOM node.
	 * @internal
	 */
	function isReactNode(node) {
	  return isValidContainer(node) && (node.hasAttribute(ROOT_ATTR_NAME) || node.hasAttribute(ATTR_NAME));
	}
	
	function getHostRootInstanceInContainer(container) {
	  var rootEl = getReactRootElementInContainer(container);
	  var prevHostInstance = rootEl && ReactDOMComponentTree.getInstanceFromNode(rootEl);
	  return prevHostInstance && !prevHostInstance._hostParent ? prevHostInstance : null;
	}
	
	function getTopLevelWrapperInContainer(container) {
	  var root = getHostRootInstanceInContainer(container);
	  return root ? root._hostContainerInfo._topLevelWrapper : null;
	}
	
	/**
	 * Temporary (?) hack so that we can store all top-level pending updates on
	 * composites instead of having to worry about different types of components
	 * here.
	 */
	var topLevelRootCounter = 1;
	var TopLevelWrapper = function TopLevelWrapper() {
	  this.rootID = topLevelRootCounter++;
	};
	TopLevelWrapper.prototype.isReactComponent = {};
	if (process.env.NODE_ENV !== 'production') {
	  TopLevelWrapper.displayName = 'TopLevelWrapper';
	}
	TopLevelWrapper.prototype.render = function () {
	  return this.props.child;
	};
	TopLevelWrapper.isReactTopLevelWrapper = true;
	
	/**
	 * Mounting is the process of initializing a React component by creating its
	 * representative DOM elements and inserting them into a supplied `container`.
	 * Any prior content inside `container` is destroyed in the process.
	 *
	 *   ReactMount.render(
	 *     component,
	 *     document.getElementById('container')
	 *   );
	 *
	 *   <div id="container">                   <-- Supplied `container`.
	 *     <div data-reactid=".3">              <-- Rendered reactRoot of React
	 *       // ...                                 component.
	 *     </div>
	 *   </div>
	 *
	 * Inside of `container`, the first element rendered is the "reactRoot".
	 */
	var ReactMount = {
	
	  TopLevelWrapper: TopLevelWrapper,
	
	  /**
	   * Used by devtools. The keys are not important.
	   */
	  _instancesByReactRootID: instancesByReactRootID,
	
	  /**
	   * This is a hook provided to support rendering React components while
	   * ensuring that the apparent scroll position of its `container` does not
	   * change.
	   *
	   * @param {DOMElement} container The `container` being rendered into.
	   * @param {function} renderCallback This must be called once to do the render.
	   */
	  scrollMonitor: function scrollMonitor(container, renderCallback) {
	    renderCallback();
	  },
	
	  /**
	   * Take a component that's already mounted into the DOM and replace its props
	   * @param {ReactComponent} prevComponent component instance already in the DOM
	   * @param {ReactElement} nextElement component instance to render
	   * @param {DOMElement} container container to render into
	   * @param {?function} callback function triggered on completion
	   */
	  _updateRootComponent: function _updateRootComponent(prevComponent, nextElement, nextContext, container, callback) {
	    ReactMount.scrollMonitor(container, function () {
	      ReactUpdateQueue.enqueueElementInternal(prevComponent, nextElement, nextContext);
	      if (callback) {
	        ReactUpdateQueue.enqueueCallbackInternal(prevComponent, callback);
	      }
	    });
	
	    return prevComponent;
	  },
	
	  /**
	   * Render a new component into the DOM. Hooked by hooks!
	   *
	   * @param {ReactElement} nextElement element to render
	   * @param {DOMElement} container container to render into
	   * @param {boolean} shouldReuseMarkup if we should skip the markup insertion
	   * @return {ReactComponent} nextComponent
	   */
	  _renderNewRootComponent: function _renderNewRootComponent(nextElement, container, shouldReuseMarkup, context) {
	    // Various parts of our code (such as ReactCompositeComponent's
	    // _renderValidatedComponent) assume that calls to render aren't nested;
	    // verify that that's the case.
	    process.env.NODE_ENV !== 'production' ? warning(ReactCurrentOwner.current == null, '_renderNewRootComponent(): Render methods should be a pure function ' + 'of props and state; triggering nested component updates from ' + 'render is not allowed. If necessary, trigger nested updates in ' + 'componentDidUpdate. Check the render method of %s.', ReactCurrentOwner.current && ReactCurrentOwner.current.getName() || 'ReactCompositeComponent') : void 0;
	
	    !isValidContainer(container) ? process.env.NODE_ENV !== 'production' ? invariant(false, '_registerComponent(...): Target container is not a DOM element.') : _prodInvariant('37') : void 0;
	
	    ReactBrowserEventEmitter.ensureScrollValueMonitoring();
	    var componentInstance = instantiateReactComponent(nextElement, false);
	
	    // The initial render is synchronous but any updates that happen during
	    // rendering, in componentWillMount or componentDidMount, will be batched
	    // according to the current batching strategy.
	
	    ReactUpdates.batchedUpdates(batchedMountComponentIntoNode, componentInstance, container, shouldReuseMarkup, context);
	
	    var wrapperID = componentInstance._instance.rootID;
	    instancesByReactRootID[wrapperID] = componentInstance;
	
	    return componentInstance;
	  },
	
	  /**
	   * Renders a React component into the DOM in the supplied `container`.
	   *
	   * If the React component was previously rendered into `container`, this will
	   * perform an update on it and only mutate the DOM as necessary to reflect the
	   * latest React component.
	   *
	   * @param {ReactComponent} parentComponent The conceptual parent of this render tree.
	   * @param {ReactElement} nextElement Component element to render.
	   * @param {DOMElement} container DOM element to render into.
	   * @param {?function} callback function triggered on completion
	   * @return {ReactComponent} Component instance rendered in `container`.
	   */
	  renderSubtreeIntoContainer: function renderSubtreeIntoContainer(parentComponent, nextElement, container, callback) {
	    !(parentComponent != null && ReactInstanceMap.has(parentComponent)) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'parentComponent must be a valid React Component') : _prodInvariant('38') : void 0;
	    return ReactMount._renderSubtreeIntoContainer(parentComponent, nextElement, container, callback);
	  },
	
	  _renderSubtreeIntoContainer: function _renderSubtreeIntoContainer(parentComponent, nextElement, container, callback) {
	    ReactUpdateQueue.validateCallback(callback, 'ReactDOM.render');
	    !React.isValidElement(nextElement) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactDOM.render(): Invalid component element.%s', typeof nextElement === 'string' ? ' Instead of passing a string like \'div\', pass ' + 'React.createElement(\'div\') or <div />.' : typeof nextElement === 'function' ? ' Instead of passing a class like Foo, pass ' + 'React.createElement(Foo) or <Foo />.' :
	    // Check if it quacks like an element
	    nextElement != null && nextElement.props !== undefined ? ' This may be caused by unintentionally loading two independent ' + 'copies of React.' : '') : _prodInvariant('39', typeof nextElement === 'string' ? ' Instead of passing a string like \'div\', pass ' + 'React.createElement(\'div\') or <div />.' : typeof nextElement === 'function' ? ' Instead of passing a class like Foo, pass ' + 'React.createElement(Foo) or <Foo />.' : nextElement != null && nextElement.props !== undefined ? ' This may be caused by unintentionally loading two independent ' + 'copies of React.' : '') : void 0;
	
	    process.env.NODE_ENV !== 'production' ? warning(!container || !container.tagName || container.tagName.toUpperCase() !== 'BODY', 'render(): Rendering components directly into document.body is ' + 'discouraged, since its children are often manipulated by third-party ' + 'scripts and browser extensions. This may lead to subtle ' + 'reconciliation issues. Try rendering into a container element created ' + 'for your app.') : void 0;
	
	    var nextWrappedElement = React.createElement(TopLevelWrapper, { child: nextElement });
	
	    var nextContext;
	    if (parentComponent) {
	      var parentInst = ReactInstanceMap.get(parentComponent);
	      nextContext = parentInst._processChildContext(parentInst._context);
	    } else {
	      nextContext = emptyObject;
	    }
	
	    var prevComponent = getTopLevelWrapperInContainer(container);
	
	    if (prevComponent) {
	      var prevWrappedElement = prevComponent._currentElement;
	      var prevElement = prevWrappedElement.props.child;
	      if (shouldUpdateReactComponent(prevElement, nextElement)) {
	        var publicInst = prevComponent._renderedComponent.getPublicInstance();
	        var updatedCallback = callback && function () {
	          callback.call(publicInst);
	        };
	        ReactMount._updateRootComponent(prevComponent, nextWrappedElement, nextContext, container, updatedCallback);
	        return publicInst;
	      } else {
	        ReactMount.unmountComponentAtNode(container);
	      }
	    }
	
	    var reactRootElement = getReactRootElementInContainer(container);
	    var containerHasReactMarkup = reactRootElement && !!internalGetID(reactRootElement);
	    var containerHasNonRootReactChild = hasNonRootReactChild(container);
	
	    if (process.env.NODE_ENV !== 'production') {
	      process.env.NODE_ENV !== 'production' ? warning(!containerHasNonRootReactChild, 'render(...): Replacing React-rendered children with a new root ' + 'component. If you intended to update the children of this node, ' + 'you should instead have the existing children update their state ' + 'and render the new components instead of calling ReactDOM.render.') : void 0;
	
	      if (!containerHasReactMarkup || reactRootElement.nextSibling) {
	        var rootElementSibling = reactRootElement;
	        while (rootElementSibling) {
	          if (internalGetID(rootElementSibling)) {
	            process.env.NODE_ENV !== 'production' ? warning(false, 'render(): Target node has markup rendered by React, but there ' + 'are unrelated nodes as well. This is most commonly caused by ' + 'white-space inserted around server-rendered markup.') : void 0;
	            break;
	          }
	          rootElementSibling = rootElementSibling.nextSibling;
	        }
	      }
	    }
	
	    var shouldReuseMarkup = containerHasReactMarkup && !prevComponent && !containerHasNonRootReactChild;
	    var component = ReactMount._renderNewRootComponent(nextWrappedElement, container, shouldReuseMarkup, nextContext)._renderedComponent.getPublicInstance();
	    if (callback) {
	      callback.call(component);
	    }
	    return component;
	  },
	
	  /**
	   * Renders a React component into the DOM in the supplied `container`.
	   * See https://facebook.github.io/react/docs/top-level-api.html#reactdom.render
	   *
	   * If the React component was previously rendered into `container`, this will
	   * perform an update on it and only mutate the DOM as necessary to reflect the
	   * latest React component.
	   *
	   * @param {ReactElement} nextElement Component element to render.
	   * @param {DOMElement} container DOM element to render into.
	   * @param {?function} callback function triggered on completion
	   * @return {ReactComponent} Component instance rendered in `container`.
	   */
	  render: function render(nextElement, container, callback) {
	    return ReactMount._renderSubtreeIntoContainer(null, nextElement, container, callback);
	  },
	
	  /**
	   * Unmounts and destroys the React component rendered in the `container`.
	   * See https://facebook.github.io/react/docs/top-level-api.html#reactdom.unmountcomponentatnode
	   *
	   * @param {DOMElement} container DOM element containing a React component.
	   * @return {boolean} True if a component was found in and unmounted from
	   *                   `container`
	   */
	  unmountComponentAtNode: function unmountComponentAtNode(container) {
	    // Various parts of our code (such as ReactCompositeComponent's
	    // _renderValidatedComponent) assume that calls to render aren't nested;
	    // verify that that's the case. (Strictly speaking, unmounting won't cause a
	    // render but we still don't expect to be in a render call here.)
	    process.env.NODE_ENV !== 'production' ? warning(ReactCurrentOwner.current == null, 'unmountComponentAtNode(): Render methods should be a pure function ' + 'of props and state; triggering nested component updates from render ' + 'is not allowed. If necessary, trigger nested updates in ' + 'componentDidUpdate. Check the render method of %s.', ReactCurrentOwner.current && ReactCurrentOwner.current.getName() || 'ReactCompositeComponent') : void 0;
	
	    !isValidContainer(container) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'unmountComponentAtNode(...): Target container is not a DOM element.') : _prodInvariant('40') : void 0;
	
	    if (process.env.NODE_ENV !== 'production') {
	      process.env.NODE_ENV !== 'production' ? warning(!nodeIsRenderedByOtherInstance(container), 'unmountComponentAtNode(): The node you\'re attempting to unmount ' + 'was rendered by another copy of React.') : void 0;
	    }
	
	    var prevComponent = getTopLevelWrapperInContainer(container);
	    if (!prevComponent) {
	      // Check if the node being unmounted was rendered by React, but isn't a
	      // root node.
	      var containerHasNonRootReactChild = hasNonRootReactChild(container);
	
	      // Check if the container itself is a React root node.
	      var isContainerReactRoot = container.nodeType === 1 && container.hasAttribute(ROOT_ATTR_NAME);
	
	      if (process.env.NODE_ENV !== 'production') {
	        process.env.NODE_ENV !== 'production' ? warning(!containerHasNonRootReactChild, 'unmountComponentAtNode(): The node you\'re attempting to unmount ' + 'was rendered by React and is not a top-level container. %s', isContainerReactRoot ? 'You may have accidentally passed in a React root node instead ' + 'of its container.' : 'Instead, have the parent component update its state and ' + 'rerender in order to remove this component.') : void 0;
	      }
	
	      return false;
	    }
	    delete instancesByReactRootID[prevComponent._instance.rootID];
	    ReactUpdates.batchedUpdates(unmountComponentFromNode, prevComponent, container, false);
	    return true;
	  },
	
	  _mountImageIntoNode: function _mountImageIntoNode(markup, container, instance, shouldReuseMarkup, transaction) {
	    !isValidContainer(container) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'mountComponentIntoNode(...): Target container is not valid.') : _prodInvariant('41') : void 0;
	
	    if (shouldReuseMarkup) {
	      var rootElement = getReactRootElementInContainer(container);
	      if (ReactMarkupChecksum.canReuseMarkup(markup, rootElement)) {
	        ReactDOMComponentTree.precacheNode(instance, rootElement);
	        return;
	      } else {
	        var checksum = rootElement.getAttribute(ReactMarkupChecksum.CHECKSUM_ATTR_NAME);
	        rootElement.removeAttribute(ReactMarkupChecksum.CHECKSUM_ATTR_NAME);
	
	        var rootMarkup = rootElement.outerHTML;
	        rootElement.setAttribute(ReactMarkupChecksum.CHECKSUM_ATTR_NAME, checksum);
	
	        var normalizedMarkup = markup;
	        if (process.env.NODE_ENV !== 'production') {
	          // because rootMarkup is retrieved from the DOM, various normalizations
	          // will have occurred which will not be present in `markup`. Here,
	          // insert markup into a <div> or <iframe> depending on the container
	          // type to perform the same normalizations before comparing.
	          var normalizer;
	          if (container.nodeType === ELEMENT_NODE_TYPE) {
	            normalizer = document.createElement('div');
	            normalizer.innerHTML = markup;
	            normalizedMarkup = normalizer.innerHTML;
	          } else {
	            normalizer = document.createElement('iframe');
	            document.body.appendChild(normalizer);
	            normalizer.contentDocument.write(markup);
	            normalizedMarkup = normalizer.contentDocument.documentElement.outerHTML;
	            document.body.removeChild(normalizer);
	          }
	        }
	
	        var diffIndex = firstDifferenceIndex(normalizedMarkup, rootMarkup);
	        var difference = ' (client) ' + normalizedMarkup.substring(diffIndex - 20, diffIndex + 20) + '\n (server) ' + rootMarkup.substring(diffIndex - 20, diffIndex + 20);
	
	        !(container.nodeType !== DOC_NODE_TYPE) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'You\'re trying to render a component to the document using server rendering but the checksum was invalid. This usually means you rendered a different component type or props on the client from the one on the server, or your render() methods are impure. React cannot handle this case due to cross-browser quirks by rendering at the document root. You should look for environment dependent code in your components and ensure the props are the same client and server side:\n%s', difference) : _prodInvariant('42', difference) : void 0;
	
	        if (process.env.NODE_ENV !== 'production') {
	          process.env.NODE_ENV !== 'production' ? warning(false, 'React attempted to reuse markup in a container but the ' + 'checksum was invalid. This generally means that you are ' + 'using server rendering and the markup generated on the ' + 'server was not what the client was expecting. React injected ' + 'new markup to compensate which works but you have lost many ' + 'of the benefits of server rendering. Instead, figure out ' + 'why the markup being generated is different on the client ' + 'or server:\n%s', difference) : void 0;
	        }
	      }
	    }
	
	    !(container.nodeType !== DOC_NODE_TYPE) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'You\'re trying to render a component to the document but you didn\'t use server rendering. We can\'t do this without using server rendering due to cross-browser quirks. See ReactDOMServer.renderToString() for server rendering.') : _prodInvariant('43') : void 0;
	
	    if (transaction.useCreateElement) {
	      while (container.lastChild) {
	        container.removeChild(container.lastChild);
	      }
	      DOMLazyTree.insertTreeBefore(container, markup, null);
	    } else {
	      setInnerHTML(container, markup);
	      ReactDOMComponentTree.precacheNode(instance, container.firstChild);
	    }
	
	    if (process.env.NODE_ENV !== 'production') {
	      var hostNode = ReactDOMComponentTree.getInstanceFromNode(container.firstChild);
	      if (hostNode._debugID !== 0) {
	        ReactInstrumentation.debugTool.onHostOperation({
	          instanceID: hostNode._debugID,
	          type: 'mount',
	          payload: markup.toString()
	        });
	      }
	    }
	  }
	};
	
	module.exports = ReactMount;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ }),
/* 171 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var validateDOMNesting = __webpack_require__(140);
	
	var DOC_NODE_TYPE = 9;
	
	function ReactDOMContainerInfo(topLevelWrapper, node) {
	  var info = {
	    _topLevelWrapper: topLevelWrapper,
	    _idCounter: 1,
	    _ownerDocument: node ? node.nodeType === DOC_NODE_TYPE ? node : node.ownerDocument : null,
	    _node: node,
	    _tag: node ? node.nodeName.toLowerCase() : null,
	    _namespaceURI: node ? node.namespaceURI : null
	  };
	  if (process.env.NODE_ENV !== 'production') {
	    info._ancestorInfo = node ? validateDOMNesting.updatedAncestorInfo(null, info._tag, null) : null;
	  }
	  return info;
	}
	
	module.exports = ReactDOMContainerInfo;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ }),
/* 172 */
/***/ (function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var ReactDOMFeatureFlags = {
	  useCreateElement: true,
	  useFiber: false
	};
	
	module.exports = ReactDOMFeatureFlags;

/***/ }),
/* 173 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var adler32 = __webpack_require__(174);
	
	var TAG_END = /\/?>/;
	var COMMENT_START = /^<\!\-\-/;
	
	var ReactMarkupChecksum = {
	  CHECKSUM_ATTR_NAME: 'data-react-checksum',
	
	  /**
	   * @param {string} markup Markup string
	   * @return {string} Markup string with checksum attribute attached
	   */
	  addChecksumToMarkup: function addChecksumToMarkup(markup) {
	    var checksum = adler32(markup);
	
	    // Add checksum (handle both parent tags, comments and self-closing tags)
	    if (COMMENT_START.test(markup)) {
	      return markup;
	    } else {
	      return markup.replace(TAG_END, ' ' + ReactMarkupChecksum.CHECKSUM_ATTR_NAME + '="' + checksum + '"$&');
	    }
	  },
	
	  /**
	   * @param {string} markup to use
	   * @param {DOMElement} element root React element
	   * @returns {boolean} whether or not the markup is the same
	   */
	  canReuseMarkup: function canReuseMarkup(markup, element) {
	    var existingChecksum = element.getAttribute(ReactMarkupChecksum.CHECKSUM_ATTR_NAME);
	    existingChecksum = existingChecksum && parseInt(existingChecksum, 10);
	    var markupChecksum = adler32(markup);
	    return markupChecksum === existingChecksum;
	  }
	};
	
	module.exports = ReactMarkupChecksum;

/***/ }),
/* 174 */
/***/ (function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */
	
	'use strict';
	
	var MOD = 65521;
	
	// adler32 is not cryptographically strong, and is only used to sanity check that
	// markup generated on the server matches the markup generated on the client.
	// This implementation (a modified version of the SheetJS version) has been optimized
	// for our use case, at the expense of conforming to the adler32 specification
	// for non-ascii inputs.
	function adler32(data) {
	  var a = 1;
	  var b = 0;
	  var i = 0;
	  var l = data.length;
	  var m = l & ~0x3;
	  while (i < m) {
	    var n = Math.min(i + 4096, m);
	    for (; i < n; i += 4) {
	      b += (a += data.charCodeAt(i)) + (a += data.charCodeAt(i + 1)) + (a += data.charCodeAt(i + 2)) + (a += data.charCodeAt(i + 3));
	    }
	    a %= MOD;
	    b %= MOD;
	  }
	  for (; i < l; i++) {
	    b += a += data.charCodeAt(i);
	  }
	  a %= MOD;
	  b %= MOD;
	  return a | b << 16;
	}
	
	module.exports = adler32;

/***/ }),
/* 175 */
/***/ (function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	module.exports = '15.5.4';

/***/ }),
/* 176 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var _prodInvariant = __webpack_require__(39);
	
	var ReactCurrentOwner = __webpack_require__(10);
	var ReactDOMComponentTree = __webpack_require__(38);
	var ReactInstanceMap = __webpack_require__(120);
	
	var getHostComponentFromComposite = __webpack_require__(177);
	var invariant = __webpack_require__(8);
	var warning = __webpack_require__(11);
	
	/**
	 * Returns the DOM node rendered by this element.
	 *
	 * See https://facebook.github.io/react/docs/top-level-api.html#reactdom.finddomnode
	 *
	 * @param {ReactComponent|DOMElement} componentOrElement
	 * @return {?DOMElement} The root node of this element.
	 */
	function findDOMNode(componentOrElement) {
	  if (process.env.NODE_ENV !== 'production') {
	    var owner = ReactCurrentOwner.current;
	    if (owner !== null) {
	      process.env.NODE_ENV !== 'production' ? warning(owner._warnedAboutRefsInRender, '%s is accessing findDOMNode inside its render(). ' + 'render() should be a pure function of props and state. It should ' + 'never access something that requires stale data from the previous ' + 'render, such as refs. Move this logic to componentDidMount and ' + 'componentDidUpdate instead.', owner.getName() || 'A component') : void 0;
	      owner._warnedAboutRefsInRender = true;
	    }
	  }
	  if (componentOrElement == null) {
	    return null;
	  }
	  if (componentOrElement.nodeType === 1) {
	    return componentOrElement;
	  }
	
	  var inst = ReactInstanceMap.get(componentOrElement);
	  if (inst) {
	    inst = getHostComponentFromComposite(inst);
	    return inst ? ReactDOMComponentTree.getNodeFromInstance(inst) : null;
	  }
	
	  if (typeof componentOrElement.render === 'function') {
	     true ? process.env.NODE_ENV !== 'production' ? invariant(false, 'findDOMNode was called on an unmounted component.') : _prodInvariant('44') : void 0;
	  } else {
	     true ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Element appears to be neither ReactComponent nor DOMNode (keys: %s)', Object.keys(componentOrElement)) : _prodInvariant('45', Object.keys(componentOrElement)) : void 0;
	  }
	}
	
	module.exports = findDOMNode;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ }),
/* 177 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var ReactNodeTypes = __webpack_require__(124);
	
	function getHostComponentFromComposite(inst) {
	  var type;
	
	  while ((type = inst._renderedNodeType) === ReactNodeTypes.COMPOSITE) {
	    inst = inst._renderedComponent;
	  }
	
	  if (type === ReactNodeTypes.HOST) {
	    return inst._renderedComponent;
	  } else if (type === ReactNodeTypes.EMPTY) {
	    return null;
	  }
	}
	
	module.exports = getHostComponentFromComposite;

/***/ }),
/* 178 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var ReactMount = __webpack_require__(170);
	
	module.exports = ReactMount.renderSubtreeIntoContainer;

/***/ }),
/* 179 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var DOMProperty = __webpack_require__(40);
	var EventPluginRegistry = __webpack_require__(47);
	var ReactComponentTreeHook = __webpack_require__(26);
	
	var warning = __webpack_require__(11);
	
	if (process.env.NODE_ENV !== 'production') {
	  var reactProps = {
	    children: true,
	    dangerouslySetInnerHTML: true,
	    key: true,
	    ref: true,
	
	    autoFocus: true,
	    defaultValue: true,
	    valueLink: true,
	    defaultChecked: true,
	    checkedLink: true,
	    innerHTML: true,
	    suppressContentEditableWarning: true,
	    onFocusIn: true,
	    onFocusOut: true
	  };
	  var warnedProperties = {};
	
	  var validateProperty = function validateProperty(tagName, name, debugID) {
	    if (DOMProperty.properties.hasOwnProperty(name) || DOMProperty.isCustomAttribute(name)) {
	      return true;
	    }
	    if (reactProps.hasOwnProperty(name) && reactProps[name] || warnedProperties.hasOwnProperty(name) && warnedProperties[name]) {
	      return true;
	    }
	    if (EventPluginRegistry.registrationNameModules.hasOwnProperty(name)) {
	      return true;
	    }
	    warnedProperties[name] = true;
	    var lowerCasedName = name.toLowerCase();
	
	    // data-* attributes should be lowercase; suggest the lowercase version
	    var standardName = DOMProperty.isCustomAttribute(lowerCasedName) ? lowerCasedName : DOMProperty.getPossibleStandardName.hasOwnProperty(lowerCasedName) ? DOMProperty.getPossibleStandardName[lowerCasedName] : null;
	
	    var registrationName = EventPluginRegistry.possibleRegistrationNames.hasOwnProperty(lowerCasedName) ? EventPluginRegistry.possibleRegistrationNames[lowerCasedName] : null;
	
	    if (standardName != null) {
	      process.env.NODE_ENV !== 'production' ? warning(false, 'Unknown DOM property %s. Did you mean %s?%s', name, standardName, ReactComponentTreeHook.getStackAddendumByID(debugID)) : void 0;
	      return true;
	    } else if (registrationName != null) {
	      process.env.NODE_ENV !== 'production' ? warning(false, 'Unknown event handler property %s. Did you mean `%s`?%s', name, registrationName, ReactComponentTreeHook.getStackAddendumByID(debugID)) : void 0;
	      return true;
	    } else {
	      // We were unable to guess which prop the user intended.
	      // It is likely that the user was just blindly spreading/forwarding props
	      // Components should be careful to only render valid props/attributes.
	      // Warning will be invoked in warnUnknownProperties to allow grouping.
	      return false;
	    }
	  };
	}
	
	var warnUnknownProperties = function warnUnknownProperties(debugID, element) {
	  var unknownProps = [];
	  for (var key in element.props) {
	    var isValid = validateProperty(element.type, key, debugID);
	    if (!isValid) {
	      unknownProps.push(key);
	    }
	  }
	
	  var unknownPropString = unknownProps.map(function (prop) {
	    return '`' + prop + '`';
	  }).join(', ');
	
	  if (unknownProps.length === 1) {
	    process.env.NODE_ENV !== 'production' ? warning(false, 'Unknown prop %s on <%s> tag. Remove this prop from the element. ' + 'For details, see https://fb.me/react-unknown-prop%s', unknownPropString, element.type, ReactComponentTreeHook.getStackAddendumByID(debugID)) : void 0;
	  } else if (unknownProps.length > 1) {
	    process.env.NODE_ENV !== 'production' ? warning(false, 'Unknown props %s on <%s> tag. Remove these props from the element. ' + 'For details, see https://fb.me/react-unknown-prop%s', unknownPropString, element.type, ReactComponentTreeHook.getStackAddendumByID(debugID)) : void 0;
	  }
	};
	
	function handleElement(debugID, element) {
	  if (element == null || typeof element.type !== 'string') {
	    return;
	  }
	  if (element.type.indexOf('-') >= 0 || element.props.is) {
	    return;
	  }
	  warnUnknownProperties(debugID, element);
	}
	
	var ReactDOMUnknownPropertyHook = {
	  onBeforeMountComponent: function onBeforeMountComponent(debugID, element) {
	    handleElement(debugID, element);
	  },
	  onBeforeUpdateComponent: function onBeforeUpdateComponent(debugID, element) {
	    handleElement(debugID, element);
	  }
	};
	
	module.exports = ReactDOMUnknownPropertyHook;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ }),
/* 180 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var ReactComponentTreeHook = __webpack_require__(26);
	
	var warning = __webpack_require__(11);
	
	var didWarnValueNull = false;
	
	function handleElement(debugID, element) {
	  if (element == null) {
	    return;
	  }
	  if (element.type !== 'input' && element.type !== 'textarea' && element.type !== 'select') {
	    return;
	  }
	  if (element.props != null && element.props.value === null && !didWarnValueNull) {
	    process.env.NODE_ENV !== 'production' ? warning(false, '`value` prop on `%s` should not be null. ' + 'Consider using the empty string to clear the component or `undefined` ' + 'for uncontrolled components.%s', element.type, ReactComponentTreeHook.getStackAddendumByID(debugID)) : void 0;
	
	    didWarnValueNull = true;
	  }
	}
	
	var ReactDOMNullInputValuePropHook = {
	  onBeforeMountComponent: function onBeforeMountComponent(debugID, element) {
	    handleElement(debugID, element);
	  },
	  onBeforeUpdateComponent: function onBeforeUpdateComponent(debugID, element) {
	    handleElement(debugID, element);
	  }
	};
	
	module.exports = ReactDOMNullInputValuePropHook;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ }),
/* 181 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var DOMProperty = __webpack_require__(40);
	var ReactComponentTreeHook = __webpack_require__(26);
	
	var warning = __webpack_require__(11);
	
	var warnedProperties = {};
	var rARIA = new RegExp('^(aria)-[' + DOMProperty.ATTRIBUTE_NAME_CHAR + ']*$');
	
	function validateProperty(tagName, name, debugID) {
	  if (warnedProperties.hasOwnProperty(name) && warnedProperties[name]) {
	    return true;
	  }
	
	  if (rARIA.test(name)) {
	    var lowerCasedName = name.toLowerCase();
	    var standardName = DOMProperty.getPossibleStandardName.hasOwnProperty(lowerCasedName) ? DOMProperty.getPossibleStandardName[lowerCasedName] : null;
	
	    // If this is an aria-* attribute, but is not listed in the known DOM
	    // DOM properties, then it is an invalid aria-* attribute.
	    if (standardName == null) {
	      warnedProperties[name] = true;
	      return false;
	    }
	    // aria-* attributes should be lowercase; suggest the lowercase version.
	    if (name !== standardName) {
	      process.env.NODE_ENV !== 'production' ? warning(false, 'Unknown ARIA attribute %s. Did you mean %s?%s', name, standardName, ReactComponentTreeHook.getStackAddendumByID(debugID)) : void 0;
	      warnedProperties[name] = true;
	      return true;
	    }
	  }
	
	  return true;
	}
	
	function warnInvalidARIAProps(debugID, element) {
	  var invalidProps = [];
	
	  for (var key in element.props) {
	    var isValid = validateProperty(element.type, key, debugID);
	    if (!isValid) {
	      invalidProps.push(key);
	    }
	  }
	
	  var unknownPropString = invalidProps.map(function (prop) {
	    return '`' + prop + '`';
	  }).join(', ');
	
	  if (invalidProps.length === 1) {
	    process.env.NODE_ENV !== 'production' ? warning(false, 'Invalid aria prop %s on <%s> tag. ' + 'For details, see https://fb.me/invalid-aria-prop%s', unknownPropString, element.type, ReactComponentTreeHook.getStackAddendumByID(debugID)) : void 0;
	  } else if (invalidProps.length > 1) {
	    process.env.NODE_ENV !== 'production' ? warning(false, 'Invalid aria props %s on <%s> tag. ' + 'For details, see https://fb.me/invalid-aria-prop%s', unknownPropString, element.type, ReactComponentTreeHook.getStackAddendumByID(debugID)) : void 0;
	  }
	}
	
	function handleElement(debugID, element) {
	  if (element == null || typeof element.type !== 'string') {
	    return;
	  }
	  if (element.type.indexOf('-') >= 0 || element.props.is) {
	    return;
	  }
	
	  warnInvalidARIAProps(debugID, element);
	}
	
	var ReactDOMInvalidARIAHook = {
	  onBeforeMountComponent: function onBeforeMountComponent(debugID, element) {
	    if (process.env.NODE_ENV !== 'production') {
	      handleElement(debugID, element);
	    }
	  },
	  onBeforeUpdateComponent: function onBeforeUpdateComponent(debugID, element) {
	    if (process.env.NODE_ENV !== 'production') {
	      handleElement(debugID, element);
	    }
	  }
	};
	
	module.exports = ReactDOMInvalidARIAHook;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ }),
/* 182 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	exports.__esModule = true;
	exports.connect = exports.Provider = undefined;
	
	var _Provider = __webpack_require__(183);
	
	var _Provider2 = _interopRequireDefault(_Provider);
	
	var _connect = __webpack_require__(188);
	
	var _connect2 = _interopRequireDefault(_connect);
	
	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { "default": obj };
	}
	
	exports.Provider = _Provider2["default"];
	exports.connect = _connect2["default"];

/***/ }),
/* 183 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
	
	exports.__esModule = true;
	exports["default"] = undefined;
	
	var _react = __webpack_require__(1);
	
	var _propTypes = __webpack_require__(184);
	
	var _propTypes2 = _interopRequireDefault(_propTypes);
	
	var _storeShape = __webpack_require__(186);
	
	var _storeShape2 = _interopRequireDefault(_storeShape);
	
	var _warning = __webpack_require__(187);
	
	var _warning2 = _interopRequireDefault(_warning);
	
	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { "default": obj };
	}
	
	function _classCallCheck(instance, Constructor) {
	  if (!(instance instanceof Constructor)) {
	    throw new TypeError("Cannot call a class as a function");
	  }
	}
	
	function _possibleConstructorReturn(self, call) {
	  if (!self) {
	    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
	  }return call && ((typeof call === 'undefined' ? 'undefined' : _typeof(call)) === "object" || typeof call === "function") ? call : self;
	}
	
	function _inherits(subClass, superClass) {
	  if (typeof superClass !== "function" && superClass !== null) {
	    throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === 'undefined' ? 'undefined' : _typeof(superClass)));
	  }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
	}
	
	var didWarnAboutReceivingStore = false;
	function warnAboutReceivingStore() {
	  if (didWarnAboutReceivingStore) {
	    return;
	  }
	  didWarnAboutReceivingStore = true;
	
	  (0, _warning2["default"])('<Provider> does not support changing `store` on the fly. ' + 'It is most likely that you see this error because you updated to ' + 'Redux 2.x and React Redux 2.x which no longer hot reload reducers ' + 'automatically. See https://github.com/reactjs/react-redux/releases/' + 'tag/v2.0.0 for the migration instructions.');
	}
	
	var Provider = function (_Component) {
	  _inherits(Provider, _Component);
	
	  Provider.prototype.getChildContext = function getChildContext() {
	    return { store: this.store };
	  };
	
	  function Provider(props, context) {
	    _classCallCheck(this, Provider);
	
	    var _this = _possibleConstructorReturn(this, _Component.call(this, props, context));
	
	    _this.store = props.store;
	    return _this;
	  }
	
	  Provider.prototype.render = function render() {
	    return _react.Children.only(this.props.children);
	  };
	
	  return Provider;
	}(_react.Component);
	
	exports["default"] = Provider;
	
	if (process.env.NODE_ENV !== 'production') {
	  Provider.prototype.componentWillReceiveProps = function (nextProps) {
	    var store = this.store;
	    var nextStore = nextProps.store;
	
	    if (store !== nextStore) {
	      warnAboutReceivingStore();
	    }
	  };
	}
	
	Provider.propTypes = {
	  store: _storeShape2["default"].isRequired,
	  children: _propTypes2["default"].element.isRequired
	};
	Provider.childContextTypes = {
	  store: _storeShape2["default"].isRequired
	};
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ }),
/* 184 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
	
	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 */
	
	if (process.env.NODE_ENV !== 'production') {
	  var REACT_ELEMENT_TYPE = typeof Symbol === 'function' && Symbol.for && Symbol.for('react.element') || 0xeac7;
	
	  var isValidElement = function isValidElement(object) {
	    return (typeof object === 'undefined' ? 'undefined' : _typeof(object)) === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
	  };
	
	  // By explicitly using `prop-types` you are opting into new development behavior.
	  // http://fb.me/prop-types-in-prod
	  var throwOnDirectAccess = true;
	  module.exports = __webpack_require__(31)(isValidElement, throwOnDirectAccess);
	} else {
	  // By explicitly using `prop-types` you are opting into new production behavior.
	  // http://fb.me/prop-types-in-prod
	  module.exports = __webpack_require__(185)();
	}
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ }),
/* 185 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 */
	
	'use strict';
	
	var emptyFunction = __webpack_require__(12);
	var invariant = __webpack_require__(8);
	var ReactPropTypesSecret = __webpack_require__(32);
	
	module.exports = function () {
	  function shim(props, propName, componentName, location, propFullName, secret) {
	    if (secret === ReactPropTypesSecret) {
	      // It is still safe when called from React.
	      return;
	    }
	    invariant(false, 'Calling PropTypes validators directly is not supported by the `prop-types` package. ' + 'Use PropTypes.checkPropTypes() to call them. ' + 'Read more at http://fb.me/use-check-prop-types');
	  };
	  shim.isRequired = shim;
	  function getShim() {
	    return shim;
	  };
	  // Important!
	  // Keep this list in sync with production version in `./factoryWithTypeCheckers.js`.
	  var ReactPropTypes = {
	    array: shim,
	    bool: shim,
	    func: shim,
	    number: shim,
	    object: shim,
	    string: shim,
	    symbol: shim,
	
	    any: shim,
	    arrayOf: getShim,
	    element: shim,
	    instanceOf: getShim,
	    node: shim,
	    objectOf: getShim,
	    oneOf: getShim,
	    oneOfType: getShim,
	    shape: getShim
	  };
	
	  ReactPropTypes.checkPropTypes = emptyFunction;
	  ReactPropTypes.PropTypes = ReactPropTypes;
	
	  return ReactPropTypes;
	};

/***/ }),
/* 186 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	exports.__esModule = true;
	
	var _propTypes = __webpack_require__(184);
	
	var _propTypes2 = _interopRequireDefault(_propTypes);
	
	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { "default": obj };
	}
	
	exports["default"] = _propTypes2["default"].shape({
	  subscribe: _propTypes2["default"].func.isRequired,
	  dispatch: _propTypes2["default"].func.isRequired,
	  getState: _propTypes2["default"].func.isRequired
	});

/***/ }),
/* 187 */
/***/ (function(module, exports) {

	'use strict';
	
	exports.__esModule = true;
	exports["default"] = warning;
	/**
	 * Prints a warning in the console if it exists.
	 *
	 * @param {String} message The warning message.
	 * @returns {void}
	 */
	function warning(message) {
	  /* eslint-disable no-console */
	  if (typeof console !== 'undefined' && typeof console.error === 'function') {
	    console.error(message);
	  }
	  /* eslint-enable no-console */
	  try {
	    // This error was thrown as a convenience so that if you enable
	    // "break on all exceptions" in your console,
	    // it would pause the execution at this line.
	    throw new Error(message);
	    /* eslint-disable no-empty */
	  } catch (e) {}
	  /* eslint-enable no-empty */
	}

/***/ }),
/* 188 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
	
	exports.__esModule = true;
	
	var _extends = Object.assign || function (target) {
	  for (var i = 1; i < arguments.length; i++) {
	    var source = arguments[i];for (var key in source) {
	      if (Object.prototype.hasOwnProperty.call(source, key)) {
	        target[key] = source[key];
	      }
	    }
	  }return target;
	};
	
	exports["default"] = connect;
	
	var _react = __webpack_require__(1);
	
	var _storeShape = __webpack_require__(186);
	
	var _storeShape2 = _interopRequireDefault(_storeShape);
	
	var _shallowEqual = __webpack_require__(189);
	
	var _shallowEqual2 = _interopRequireDefault(_shallowEqual);
	
	var _wrapActionCreators = __webpack_require__(190);
	
	var _wrapActionCreators2 = _interopRequireDefault(_wrapActionCreators);
	
	var _warning = __webpack_require__(187);
	
	var _warning2 = _interopRequireDefault(_warning);
	
	var _isPlainObject = __webpack_require__(193);
	
	var _isPlainObject2 = _interopRequireDefault(_isPlainObject);
	
	var _hoistNonReactStatics = __webpack_require__(212);
	
	var _hoistNonReactStatics2 = _interopRequireDefault(_hoistNonReactStatics);
	
	var _invariant = __webpack_require__(213);
	
	var _invariant2 = _interopRequireDefault(_invariant);
	
	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { "default": obj };
	}
	
	function _classCallCheck(instance, Constructor) {
	  if (!(instance instanceof Constructor)) {
	    throw new TypeError("Cannot call a class as a function");
	  }
	}
	
	function _possibleConstructorReturn(self, call) {
	  if (!self) {
	    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
	  }return call && ((typeof call === 'undefined' ? 'undefined' : _typeof(call)) === "object" || typeof call === "function") ? call : self;
	}
	
	function _inherits(subClass, superClass) {
	  if (typeof superClass !== "function" && superClass !== null) {
	    throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === 'undefined' ? 'undefined' : _typeof(superClass)));
	  }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
	}
	
	var defaultMapStateToProps = function defaultMapStateToProps(state) {
	  return {};
	}; // eslint-disable-line no-unused-vars
	var defaultMapDispatchToProps = function defaultMapDispatchToProps(dispatch) {
	  return { dispatch: dispatch };
	};
	var defaultMergeProps = function defaultMergeProps(stateProps, dispatchProps, parentProps) {
	  return _extends({}, parentProps, stateProps, dispatchProps);
	};
	
	function getDisplayName(WrappedComponent) {
	  return WrappedComponent.displayName || WrappedComponent.name || 'Component';
	}
	
	var errorObject = { value: null };
	function tryCatch(fn, ctx) {
	  try {
	    return fn.apply(ctx);
	  } catch (e) {
	    errorObject.value = e;
	    return errorObject;
	  }
	}
	
	// Helps track hot reloading.
	var nextVersion = 0;
	
	function connect(mapStateToProps, mapDispatchToProps, mergeProps) {
	  var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
	
	  var shouldSubscribe = Boolean(mapStateToProps);
	  var mapState = mapStateToProps || defaultMapStateToProps;
	
	  var mapDispatch = void 0;
	  if (typeof mapDispatchToProps === 'function') {
	    mapDispatch = mapDispatchToProps;
	  } else if (!mapDispatchToProps) {
	    mapDispatch = defaultMapDispatchToProps;
	  } else {
	    mapDispatch = (0, _wrapActionCreators2["default"])(mapDispatchToProps);
	  }
	
	  var finalMergeProps = mergeProps || defaultMergeProps;
	  var _options$pure = options.pure,
	      pure = _options$pure === undefined ? true : _options$pure,
	      _options$withRef = options.withRef,
	      withRef = _options$withRef === undefined ? false : _options$withRef;
	
	  var checkMergedEquals = pure && finalMergeProps !== defaultMergeProps;
	
	  // Helps track hot reloading.
	  var version = nextVersion++;
	
	  return function wrapWithConnect(WrappedComponent) {
	    var connectDisplayName = 'Connect(' + getDisplayName(WrappedComponent) + ')';
	
	    function checkStateShape(props, methodName) {
	      if (!(0, _isPlainObject2["default"])(props)) {
	        (0, _warning2["default"])(methodName + '() in ' + connectDisplayName + ' must return a plain object. ' + ('Instead received ' + props + '.'));
	      }
	    }
	
	    function computeMergedProps(stateProps, dispatchProps, parentProps) {
	      var mergedProps = finalMergeProps(stateProps, dispatchProps, parentProps);
	      if (process.env.NODE_ENV !== 'production') {
	        checkStateShape(mergedProps, 'mergeProps');
	      }
	      return mergedProps;
	    }
	
	    var Connect = function (_Component) {
	      _inherits(Connect, _Component);
	
	      Connect.prototype.shouldComponentUpdate = function shouldComponentUpdate() {
	        return !pure || this.haveOwnPropsChanged || this.hasStoreStateChanged;
	      };
	
	      function Connect(props, context) {
	        _classCallCheck(this, Connect);
	
	        var _this = _possibleConstructorReturn(this, _Component.call(this, props, context));
	
	        _this.version = version;
	        _this.store = props.store || context.store;
	
	        (0, _invariant2["default"])(_this.store, 'Could not find "store" in either the context or ' + ('props of "' + connectDisplayName + '". ') + 'Either wrap the root component in a <Provider>, ' + ('or explicitly pass "store" as a prop to "' + connectDisplayName + '".'));
	
	        var storeState = _this.store.getState();
	        _this.state = { storeState: storeState };
	        _this.clearCache();
	        return _this;
	      }
	
	      Connect.prototype.computeStateProps = function computeStateProps(store, props) {
	        if (!this.finalMapStateToProps) {
	          return this.configureFinalMapState(store, props);
	        }
	
	        var state = store.getState();
	        var stateProps = this.doStatePropsDependOnOwnProps ? this.finalMapStateToProps(state, props) : this.finalMapStateToProps(state);
	
	        if (process.env.NODE_ENV !== 'production') {
	          checkStateShape(stateProps, 'mapStateToProps');
	        }
	        return stateProps;
	      };
	
	      Connect.prototype.configureFinalMapState = function configureFinalMapState(store, props) {
	        var mappedState = mapState(store.getState(), props);
	        var isFactory = typeof mappedState === 'function';
	
	        this.finalMapStateToProps = isFactory ? mappedState : mapState;
	        this.doStatePropsDependOnOwnProps = this.finalMapStateToProps.length !== 1;
	
	        if (isFactory) {
	          return this.computeStateProps(store, props);
	        }
	
	        if (process.env.NODE_ENV !== 'production') {
	          checkStateShape(mappedState, 'mapStateToProps');
	        }
	        return mappedState;
	      };
	
	      Connect.prototype.computeDispatchProps = function computeDispatchProps(store, props) {
	        if (!this.finalMapDispatchToProps) {
	          return this.configureFinalMapDispatch(store, props);
	        }
	
	        var dispatch = store.dispatch;
	
	        var dispatchProps = this.doDispatchPropsDependOnOwnProps ? this.finalMapDispatchToProps(dispatch, props) : this.finalMapDispatchToProps(dispatch);
	
	        if (process.env.NODE_ENV !== 'production') {
	          checkStateShape(dispatchProps, 'mapDispatchToProps');
	        }
	        return dispatchProps;
	      };
	
	      Connect.prototype.configureFinalMapDispatch = function configureFinalMapDispatch(store, props) {
	        var mappedDispatch = mapDispatch(store.dispatch, props);
	        var isFactory = typeof mappedDispatch === 'function';
	
	        this.finalMapDispatchToProps = isFactory ? mappedDispatch : mapDispatch;
	        this.doDispatchPropsDependOnOwnProps = this.finalMapDispatchToProps.length !== 1;
	
	        if (isFactory) {
	          return this.computeDispatchProps(store, props);
	        }
	
	        if (process.env.NODE_ENV !== 'production') {
	          checkStateShape(mappedDispatch, 'mapDispatchToProps');
	        }
	        return mappedDispatch;
	      };
	
	      Connect.prototype.updateStatePropsIfNeeded = function updateStatePropsIfNeeded() {
	        var nextStateProps = this.computeStateProps(this.store, this.props);
	        if (this.stateProps && (0, _shallowEqual2["default"])(nextStateProps, this.stateProps)) {
	          return false;
	        }
	
	        this.stateProps = nextStateProps;
	        return true;
	      };
	
	      Connect.prototype.updateDispatchPropsIfNeeded = function updateDispatchPropsIfNeeded() {
	        var nextDispatchProps = this.computeDispatchProps(this.store, this.props);
	        if (this.dispatchProps && (0, _shallowEqual2["default"])(nextDispatchProps, this.dispatchProps)) {
	          return false;
	        }
	
	        this.dispatchProps = nextDispatchProps;
	        return true;
	      };
	
	      Connect.prototype.updateMergedPropsIfNeeded = function updateMergedPropsIfNeeded() {
	        var nextMergedProps = computeMergedProps(this.stateProps, this.dispatchProps, this.props);
	        if (this.mergedProps && checkMergedEquals && (0, _shallowEqual2["default"])(nextMergedProps, this.mergedProps)) {
	          return false;
	        }
	
	        this.mergedProps = nextMergedProps;
	        return true;
	      };
	
	      Connect.prototype.isSubscribed = function isSubscribed() {
	        return typeof this.unsubscribe === 'function';
	      };
	
	      Connect.prototype.trySubscribe = function trySubscribe() {
	        if (shouldSubscribe && !this.unsubscribe) {
	          this.unsubscribe = this.store.subscribe(this.handleChange.bind(this));
	          this.handleChange();
	        }
	      };
	
	      Connect.prototype.tryUnsubscribe = function tryUnsubscribe() {
	        if (this.unsubscribe) {
	          this.unsubscribe();
	          this.unsubscribe = null;
	        }
	      };
	
	      Connect.prototype.componentDidMount = function componentDidMount() {
	        this.trySubscribe();
	      };
	
	      Connect.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
	        if (!pure || !(0, _shallowEqual2["default"])(nextProps, this.props)) {
	          this.haveOwnPropsChanged = true;
	        }
	      };
	
	      Connect.prototype.componentWillUnmount = function componentWillUnmount() {
	        this.tryUnsubscribe();
	        this.clearCache();
	      };
	
	      Connect.prototype.clearCache = function clearCache() {
	        this.dispatchProps = null;
	        this.stateProps = null;
	        this.mergedProps = null;
	        this.haveOwnPropsChanged = true;
	        this.hasStoreStateChanged = true;
	        this.haveStatePropsBeenPrecalculated = false;
	        this.statePropsPrecalculationError = null;
	        this.renderedElement = null;
	        this.finalMapDispatchToProps = null;
	        this.finalMapStateToProps = null;
	      };
	
	      Connect.prototype.handleChange = function handleChange() {
	        if (!this.unsubscribe) {
	          return;
	        }
	
	        var storeState = this.store.getState();
	        var prevStoreState = this.state.storeState;
	        if (pure && prevStoreState === storeState) {
	          return;
	        }
	
	        if (pure && !this.doStatePropsDependOnOwnProps) {
	          var haveStatePropsChanged = tryCatch(this.updateStatePropsIfNeeded, this);
	          if (!haveStatePropsChanged) {
	            return;
	          }
	          if (haveStatePropsChanged === errorObject) {
	            this.statePropsPrecalculationError = errorObject.value;
	          }
	          this.haveStatePropsBeenPrecalculated = true;
	        }
	
	        this.hasStoreStateChanged = true;
	        this.setState({ storeState: storeState });
	      };
	
	      Connect.prototype.getWrappedInstance = function getWrappedInstance() {
	        (0, _invariant2["default"])(withRef, 'To access the wrapped instance, you need to specify ' + '{ withRef: true } as the fourth argument of the connect() call.');
	
	        return this.refs.wrappedInstance;
	      };
	
	      Connect.prototype.render = function render() {
	        var haveOwnPropsChanged = this.haveOwnPropsChanged,
	            hasStoreStateChanged = this.hasStoreStateChanged,
	            haveStatePropsBeenPrecalculated = this.haveStatePropsBeenPrecalculated,
	            statePropsPrecalculationError = this.statePropsPrecalculationError,
	            renderedElement = this.renderedElement;
	
	        this.haveOwnPropsChanged = false;
	        this.hasStoreStateChanged = false;
	        this.haveStatePropsBeenPrecalculated = false;
	        this.statePropsPrecalculationError = null;
	
	        if (statePropsPrecalculationError) {
	          throw statePropsPrecalculationError;
	        }
	
	        var shouldUpdateStateProps = true;
	        var shouldUpdateDispatchProps = true;
	        if (pure && renderedElement) {
	          shouldUpdateStateProps = hasStoreStateChanged || haveOwnPropsChanged && this.doStatePropsDependOnOwnProps;
	          shouldUpdateDispatchProps = haveOwnPropsChanged && this.doDispatchPropsDependOnOwnProps;
	        }
	
	        var haveStatePropsChanged = false;
	        var haveDispatchPropsChanged = false;
	        if (haveStatePropsBeenPrecalculated) {
	          haveStatePropsChanged = true;
	        } else if (shouldUpdateStateProps) {
	          haveStatePropsChanged = this.updateStatePropsIfNeeded();
	        }
	        if (shouldUpdateDispatchProps) {
	          haveDispatchPropsChanged = this.updateDispatchPropsIfNeeded();
	        }
	
	        var haveMergedPropsChanged = true;
	        if (haveStatePropsChanged || haveDispatchPropsChanged || haveOwnPropsChanged) {
	          haveMergedPropsChanged = this.updateMergedPropsIfNeeded();
	        } else {
	          haveMergedPropsChanged = false;
	        }
	
	        if (!haveMergedPropsChanged && renderedElement) {
	          return renderedElement;
	        }
	
	        if (withRef) {
	          this.renderedElement = (0, _react.createElement)(WrappedComponent, _extends({}, this.mergedProps, {
	            ref: 'wrappedInstance'
	          }));
	        } else {
	          this.renderedElement = (0, _react.createElement)(WrappedComponent, this.mergedProps);
	        }
	
	        return this.renderedElement;
	      };
	
	      return Connect;
	    }(_react.Component);
	
	    Connect.displayName = connectDisplayName;
	    Connect.WrappedComponent = WrappedComponent;
	    Connect.contextTypes = {
	      store: _storeShape2["default"]
	    };
	    Connect.propTypes = {
	      store: _storeShape2["default"]
	    };
	
	    if (process.env.NODE_ENV !== 'production') {
	      Connect.prototype.componentWillUpdate = function componentWillUpdate() {
	        if (this.version === version) {
	          return;
	        }
	
	        // We are hot reloading!
	        this.version = version;
	        this.trySubscribe();
	        this.clearCache();
	      };
	    }
	
	    return (0, _hoistNonReactStatics2["default"])(Connect, WrappedComponent);
	  };
	}
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ }),
/* 189 */
/***/ (function(module, exports) {

	"use strict";
	
	exports.__esModule = true;
	exports["default"] = shallowEqual;
	function shallowEqual(objA, objB) {
	  if (objA === objB) {
	    return true;
	  }
	
	  var keysA = Object.keys(objA);
	  var keysB = Object.keys(objB);
	
	  if (keysA.length !== keysB.length) {
	    return false;
	  }
	
	  // Test for A's keys different from B.
	  var hasOwn = Object.prototype.hasOwnProperty;
	  for (var i = 0; i < keysA.length; i++) {
	    if (!hasOwn.call(objB, keysA[i]) || objA[keysA[i]] !== objB[keysA[i]]) {
	      return false;
	    }
	  }
	
	  return true;
	}

/***/ }),
/* 190 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	exports.__esModule = true;
	exports["default"] = wrapActionCreators;
	
	var _redux = __webpack_require__(191);
	
	function wrapActionCreators(actionCreators) {
	  return function (dispatch) {
	    return (0, _redux.bindActionCreators)(actionCreators, dispatch);
	  };
	}

/***/ }),
/* 191 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';
	
	exports.__esModule = true;
	exports.compose = exports.applyMiddleware = exports.bindActionCreators = exports.combineReducers = exports.createStore = undefined;
	
	var _createStore = __webpack_require__(192);
	
	var _createStore2 = _interopRequireDefault(_createStore);
	
	var _combineReducers = __webpack_require__(207);
	
	var _combineReducers2 = _interopRequireDefault(_combineReducers);
	
	var _bindActionCreators = __webpack_require__(209);
	
	var _bindActionCreators2 = _interopRequireDefault(_bindActionCreators);
	
	var _applyMiddleware = __webpack_require__(210);
	
	var _applyMiddleware2 = _interopRequireDefault(_applyMiddleware);
	
	var _compose = __webpack_require__(211);
	
	var _compose2 = _interopRequireDefault(_compose);
	
	var _warning = __webpack_require__(208);
	
	var _warning2 = _interopRequireDefault(_warning);
	
	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { 'default': obj };
	}
	
	/*
	* This is a dummy function to check if the function name has been altered by minification.
	* If the function has been minified and NODE_ENV !== 'production', warn the user.
	*/
	function isCrushed() {}
	
	if (process.env.NODE_ENV !== 'production' && typeof isCrushed.name === 'string' && isCrushed.name !== 'isCrushed') {
	  (0, _warning2['default'])('You are currently using minified code outside of NODE_ENV === \'production\'. ' + 'This means that you are running a slower development build of Redux. ' + 'You can use loose-envify (https://github.com/zertosh/loose-envify) for browserify ' + 'or DefinePlugin for webpack (http://stackoverflow.com/questions/30030031) ' + 'to ensure you have the correct code for your production build.');
	}
	
	exports.createStore = _createStore2['default'];
	exports.combineReducers = _combineReducers2['default'];
	exports.bindActionCreators = _bindActionCreators2['default'];
	exports.applyMiddleware = _applyMiddleware2['default'];
	exports.compose = _compose2['default'];
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ }),
/* 192 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
	
	exports.__esModule = true;
	exports.ActionTypes = undefined;
	exports['default'] = createStore;
	
	var _isPlainObject = __webpack_require__(193);
	
	var _isPlainObject2 = _interopRequireDefault(_isPlainObject);
	
	var _symbolObservable = __webpack_require__(203);
	
	var _symbolObservable2 = _interopRequireDefault(_symbolObservable);
	
	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { 'default': obj };
	}
	
	/**
	 * These are private action types reserved by Redux.
	 * For any unknown actions, you must return the current state.
	 * If the current state is undefined, you must return the initial state.
	 * Do not reference these action types directly in your code.
	 */
	var ActionTypes = exports.ActionTypes = {
	  INIT: '@@redux/INIT'
	};
	
	/**
	 * Creates a Redux store that holds the state tree.
	 * The only way to change the data in the store is to call `dispatch()` on it.
	 *
	 * There should only be a single store in your app. To specify how different
	 * parts of the state tree respond to actions, you may combine several reducers
	 * into a single reducer function by using `combineReducers`.
	 *
	 * @param {Function} reducer A function that returns the next state tree, given
	 * the current state tree and the action to handle.
	 *
	 * @param {any} [preloadedState] The initial state. You may optionally specify it
	 * to hydrate the state from the server in universal apps, or to restore a
	 * previously serialized user session.
	 * If you use `combineReducers` to produce the root reducer function, this must be
	 * an object with the same shape as `combineReducers` keys.
	 *
	 * @param {Function} enhancer The store enhancer. You may optionally specify it
	 * to enhance the store with third-party capabilities such as middleware,
	 * time travel, persistence, etc. The only store enhancer that ships with Redux
	 * is `applyMiddleware()`.
	 *
	 * @returns {Store} A Redux store that lets you read the state, dispatch actions
	 * and subscribe to changes.
	 */
	function createStore(reducer, preloadedState, enhancer) {
	  var _ref2;
	
	  if (typeof preloadedState === 'function' && typeof enhancer === 'undefined') {
	    enhancer = preloadedState;
	    preloadedState = undefined;
	  }
	
	  if (typeof enhancer !== 'undefined') {
	    if (typeof enhancer !== 'function') {
	      throw new Error('Expected the enhancer to be a function.');
	    }
	
	    return enhancer(createStore)(reducer, preloadedState);
	  }
	
	  if (typeof reducer !== 'function') {
	    throw new Error('Expected the reducer to be a function.');
	  }
	
	  var currentReducer = reducer;
	  var currentState = preloadedState;
	  var currentListeners = [];
	  var nextListeners = currentListeners;
	  var isDispatching = false;
	
	  function ensureCanMutateNextListeners() {
	    if (nextListeners === currentListeners) {
	      nextListeners = currentListeners.slice();
	    }
	  }
	
	  /**
	   * Reads the state tree managed by the store.
	   *
	   * @returns {any} The current state tree of your application.
	   */
	  function getState() {
	    return currentState;
	  }
	
	  /**
	   * Adds a change listener. It will be called any time an action is dispatched,
	   * and some part of the state tree may potentially have changed. You may then
	   * call `getState()` to read the current state tree inside the callback.
	   *
	   * You may call `dispatch()` from a change listener, with the following
	   * caveats:
	   *
	   * 1. The subscriptions are snapshotted just before every `dispatch()` call.
	   * If you subscribe or unsubscribe while the listeners are being invoked, this
	   * will not have any effect on the `dispatch()` that is currently in progress.
	   * However, the next `dispatch()` call, whether nested or not, will use a more
	   * recent snapshot of the subscription list.
	   *
	   * 2. The listener should not expect to see all state changes, as the state
	   * might have been updated multiple times during a nested `dispatch()` before
	   * the listener is called. It is, however, guaranteed that all subscribers
	   * registered before the `dispatch()` started will be called with the latest
	   * state by the time it exits.
	   *
	   * @param {Function} listener A callback to be invoked on every dispatch.
	   * @returns {Function} A function to remove this change listener.
	   */
	  function subscribe(listener) {
	    if (typeof listener !== 'function') {
	      throw new Error('Expected listener to be a function.');
	    }
	
	    var isSubscribed = true;
	
	    ensureCanMutateNextListeners();
	    nextListeners.push(listener);
	
	    return function unsubscribe() {
	      if (!isSubscribed) {
	        return;
	      }
	
	      isSubscribed = false;
	
	      ensureCanMutateNextListeners();
	      var index = nextListeners.indexOf(listener);
	      nextListeners.splice(index, 1);
	    };
	  }
	
	  /**
	   * Dispatches an action. It is the only way to trigger a state change.
	   *
	   * The `reducer` function, used to create the store, will be called with the
	   * current state tree and the given `action`. Its return value will
	   * be considered the **next** state of the tree, and the change listeners
	   * will be notified.
	   *
	   * The base implementation only supports plain object actions. If you want to
	   * dispatch a Promise, an Observable, a thunk, or something else, you need to
	   * wrap your store creating function into the corresponding middleware. For
	   * example, see the documentation for the `redux-thunk` package. Even the
	   * middleware will eventually dispatch plain object actions using this method.
	   *
	   * @param {Object} action A plain object representing “what changed”. It is
	   * a good idea to keep actions serializable so you can record and replay user
	   * sessions, or use the time travelling `redux-devtools`. An action must have
	   * a `type` property which may not be `undefined`. It is a good idea to use
	   * string constants for action types.
	   *
	   * @returns {Object} For convenience, the same action object you dispatched.
	   *
	   * Note that, if you use a custom middleware, it may wrap `dispatch()` to
	   * return something else (for example, a Promise you can await).
	   */
	  function dispatch(action) {
	    if (!(0, _isPlainObject2['default'])(action)) {
	      throw new Error('Actions must be plain objects. ' + 'Use custom middleware for async actions.');
	    }
	
	    if (typeof action.type === 'undefined') {
	      throw new Error('Actions may not have an undefined "type" property. ' + 'Have you misspelled a constant?');
	    }
	
	    if (isDispatching) {
	      throw new Error('Reducers may not dispatch actions.');
	    }
	
	    try {
	      isDispatching = true;
	      currentState = currentReducer(currentState, action);
	    } finally {
	      isDispatching = false;
	    }
	
	    var listeners = currentListeners = nextListeners;
	    for (var i = 0; i < listeners.length; i++) {
	      listeners[i]();
	    }
	
	    return action;
	  }
	
	  /**
	   * Replaces the reducer currently used by the store to calculate the state.
	   *
	   * You might need this if your app implements code splitting and you want to
	   * load some of the reducers dynamically. You might also need this if you
	   * implement a hot reloading mechanism for Redux.
	   *
	   * @param {Function} nextReducer The reducer for the store to use instead.
	   * @returns {void}
	   */
	  function replaceReducer(nextReducer) {
	    if (typeof nextReducer !== 'function') {
	      throw new Error('Expected the nextReducer to be a function.');
	    }
	
	    currentReducer = nextReducer;
	    dispatch({ type: ActionTypes.INIT });
	  }
	
	  /**
	   * Interoperability point for observable/reactive libraries.
	   * @returns {observable} A minimal observable of state changes.
	   * For more information, see the observable proposal:
	   * https://github.com/zenparsing/es-observable
	   */
	  function observable() {
	    var _ref;
	
	    var outerSubscribe = subscribe;
	    return _ref = {
	      /**
	       * The minimal observable subscription method.
	       * @param {Object} observer Any object that can be used as an observer.
	       * The observer object should have a `next` method.
	       * @returns {subscription} An object with an `unsubscribe` method that can
	       * be used to unsubscribe the observable from the store, and prevent further
	       * emission of values from the observable.
	       */
	      subscribe: function subscribe(observer) {
	        if ((typeof observer === 'undefined' ? 'undefined' : _typeof(observer)) !== 'object') {
	          throw new TypeError('Expected the observer to be an object.');
	        }
	
	        function observeState() {
	          if (observer.next) {
	            observer.next(getState());
	          }
	        }
	
	        observeState();
	        var unsubscribe = outerSubscribe(observeState);
	        return { unsubscribe: unsubscribe };
	      }
	    }, _ref[_symbolObservable2['default']] = function () {
	      return this;
	    }, _ref;
	  }
	
	  // When a store is created, an "INIT" action is dispatched so that every
	  // reducer returns their initial state. This effectively populates
	  // the initial state tree.
	  dispatch({ type: ActionTypes.INIT });
	
	  return _ref2 = {
	    dispatch: dispatch,
	    subscribe: subscribe,
	    getState: getState,
	    replaceReducer: replaceReducer
	  }, _ref2[_symbolObservable2['default']] = observable, _ref2;
	}

/***/ }),
/* 193 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var baseGetTag = __webpack_require__(194),
	    getPrototype = __webpack_require__(200),
	    isObjectLike = __webpack_require__(202);
	
	/** `Object#toString` result references. */
	var objectTag = '[object Object]';
	
	/** Used for built-in method references. */
	var funcProto = Function.prototype,
	    objectProto = Object.prototype;
	
	/** Used to resolve the decompiled source of functions. */
	var funcToString = funcProto.toString;
	
	/** Used to check objects for own properties. */
	var hasOwnProperty = objectProto.hasOwnProperty;
	
	/** Used to infer the `Object` constructor. */
	var objectCtorString = funcToString.call(Object);
	
	/**
	 * Checks if `value` is a plain object, that is, an object created by the
	 * `Object` constructor or one with a `[[Prototype]]` of `null`.
	 *
	 * @static
	 * @memberOf _
	 * @since 0.8.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.
	 * @example
	 *
	 * function Foo() {
	 *   this.a = 1;
	 * }
	 *
	 * _.isPlainObject(new Foo);
	 * // => false
	 *
	 * _.isPlainObject([1, 2, 3]);
	 * // => false
	 *
	 * _.isPlainObject({ 'x': 0, 'y': 0 });
	 * // => true
	 *
	 * _.isPlainObject(Object.create(null));
	 * // => true
	 */
	function isPlainObject(value) {
	  if (!isObjectLike(value) || baseGetTag(value) != objectTag) {
	    return false;
	  }
	  var proto = getPrototype(value);
	  if (proto === null) {
	    return true;
	  }
	  var Ctor = hasOwnProperty.call(proto, 'constructor') && proto.constructor;
	  return typeof Ctor == 'function' && Ctor instanceof Ctor && funcToString.call(Ctor) == objectCtorString;
	}
	
	module.exports = isPlainObject;

/***/ }),
/* 194 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var _Symbol = __webpack_require__(195),
	    getRawTag = __webpack_require__(198),
	    objectToString = __webpack_require__(199);
	
	/** `Object#toString` result references. */
	var nullTag = '[object Null]',
	    undefinedTag = '[object Undefined]';
	
	/** Built-in value references. */
	var symToStringTag = _Symbol ? _Symbol.toStringTag : undefined;
	
	/**
	 * The base implementation of `getTag` without fallbacks for buggy environments.
	 *
	 * @private
	 * @param {*} value The value to query.
	 * @returns {string} Returns the `toStringTag`.
	 */
	function baseGetTag(value) {
	    if (value == null) {
	        return value === undefined ? undefinedTag : nullTag;
	    }
	    return symToStringTag && symToStringTag in Object(value) ? getRawTag(value) : objectToString(value);
	}
	
	module.exports = baseGetTag;

/***/ }),
/* 195 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var root = __webpack_require__(196);
	
	/** Built-in value references. */
	var _Symbol = root.Symbol;
	
	module.exports = _Symbol;

/***/ }),
/* 196 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
	
	var freeGlobal = __webpack_require__(197);
	
	/** Detect free variable `self`. */
	var freeSelf = (typeof self === 'undefined' ? 'undefined' : _typeof(self)) == 'object' && self && self.Object === Object && self;
	
	/** Used as a reference to the global object. */
	var root = freeGlobal || freeSelf || Function('return this')();
	
	module.exports = root;

/***/ }),
/* 197 */
/***/ (function(module, exports) {

	/* WEBPACK VAR INJECTION */(function(global) {'use strict';
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
	
	/** Detect free variable `global` from Node.js. */
	var freeGlobal = (typeof global === 'undefined' ? 'undefined' : _typeof(global)) == 'object' && global && global.Object === Object && global;
	
	module.exports = freeGlobal;
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ }),
/* 198 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var _Symbol = __webpack_require__(195);
	
	/** Used for built-in method references. */
	var objectProto = Object.prototype;
	
	/** Used to check objects for own properties. */
	var hasOwnProperty = objectProto.hasOwnProperty;
	
	/**
	 * Used to resolve the
	 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
	 * of values.
	 */
	var nativeObjectToString = objectProto.toString;
	
	/** Built-in value references. */
	var symToStringTag = _Symbol ? _Symbol.toStringTag : undefined;
	
	/**
	 * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.
	 *
	 * @private
	 * @param {*} value The value to query.
	 * @returns {string} Returns the raw `toStringTag`.
	 */
	function getRawTag(value) {
	  var isOwn = hasOwnProperty.call(value, symToStringTag),
	      tag = value[symToStringTag];
	
	  try {
	    value[symToStringTag] = undefined;
	    var unmasked = true;
	  } catch (e) {}
	
	  var result = nativeObjectToString.call(value);
	  if (unmasked) {
	    if (isOwn) {
	      value[symToStringTag] = tag;
	    } else {
	      delete value[symToStringTag];
	    }
	  }
	  return result;
	}
	
	module.exports = getRawTag;

/***/ }),
/* 199 */
/***/ (function(module, exports) {

	"use strict";
	
	/** Used for built-in method references. */
	var objectProto = Object.prototype;
	
	/**
	 * Used to resolve the
	 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
	 * of values.
	 */
	var nativeObjectToString = objectProto.toString;
	
	/**
	 * Converts `value` to a string using `Object.prototype.toString`.
	 *
	 * @private
	 * @param {*} value The value to convert.
	 * @returns {string} Returns the converted string.
	 */
	function objectToString(value) {
	  return nativeObjectToString.call(value);
	}
	
	module.exports = objectToString;

/***/ }),
/* 200 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var overArg = __webpack_require__(201);
	
	/** Built-in value references. */
	var getPrototype = overArg(Object.getPrototypeOf, Object);
	
	module.exports = getPrototype;

/***/ }),
/* 201 */
/***/ (function(module, exports) {

	"use strict";
	
	/**
	 * Creates a unary function that invokes `func` with its argument transformed.
	 *
	 * @private
	 * @param {Function} func The function to wrap.
	 * @param {Function} transform The argument transform.
	 * @returns {Function} Returns the new function.
	 */
	function overArg(func, transform) {
	  return function (arg) {
	    return func(transform(arg));
	  };
	}
	
	module.exports = overArg;

/***/ }),
/* 202 */
/***/ (function(module, exports) {

	'use strict';
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
	
	/**
	 * Checks if `value` is object-like. A value is object-like if it's not `null`
	 * and has a `typeof` result of "object".
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
	 * @example
	 *
	 * _.isObjectLike({});
	 * // => true
	 *
	 * _.isObjectLike([1, 2, 3]);
	 * // => true
	 *
	 * _.isObjectLike(_.noop);
	 * // => false
	 *
	 * _.isObjectLike(null);
	 * // => false
	 */
	function isObjectLike(value) {
	  return value != null && (typeof value === 'undefined' ? 'undefined' : _typeof(value)) == 'object';
	}
	
	module.exports = isObjectLike;

/***/ }),
/* 203 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports = __webpack_require__(204);

/***/ }),
/* 204 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global, module) {'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _ponyfill = __webpack_require__(206);
	
	var _ponyfill2 = _interopRequireDefault(_ponyfill);
	
	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { 'default': obj };
	}
	
	var root; /* global window */
	
	if (typeof self !== 'undefined') {
	  root = self;
	} else if (typeof window !== 'undefined') {
	  root = window;
	} else if (typeof global !== 'undefined') {
	  root = global;
	} else if (true) {
	  root = module;
	} else {
	  root = Function('return this')();
	}
	
	var result = (0, _ponyfill2['default'])(root);
	exports['default'] = result;
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }()), __webpack_require__(205)(module)))

/***/ }),
/* 205 */
/***/ (function(module, exports) {

	"use strict";
	
	module.exports = function (module) {
		if (!module.webpackPolyfill) {
			module.deprecate = function () {};
			module.paths = [];
			// module.parent = undefined by default
			module.children = [];
			module.webpackPolyfill = 1;
		}
		return module;
	};

/***/ }),
/* 206 */
/***/ (function(module, exports) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
		value: true
	});
	exports['default'] = symbolObservablePonyfill;
	function symbolObservablePonyfill(root) {
		var result;
		var _Symbol = root.Symbol;
	
		if (typeof _Symbol === 'function') {
			if (_Symbol.observable) {
				result = _Symbol.observable;
			} else {
				result = _Symbol('observable');
				_Symbol.observable = result;
			}
		} else {
			result = '@@observable';
		}
	
		return result;
	};

/***/ }),
/* 207 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';
	
	exports.__esModule = true;
	exports['default'] = combineReducers;
	
	var _createStore = __webpack_require__(192);
	
	var _isPlainObject = __webpack_require__(193);
	
	var _isPlainObject2 = _interopRequireDefault(_isPlainObject);
	
	var _warning = __webpack_require__(208);
	
	var _warning2 = _interopRequireDefault(_warning);
	
	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { 'default': obj };
	}
	
	function getUndefinedStateErrorMessage(key, action) {
	  var actionType = action && action.type;
	  var actionName = actionType && '"' + actionType.toString() + '"' || 'an action';
	
	  return 'Given action ' + actionName + ', reducer "' + key + '" returned undefined. ' + 'To ignore an action, you must explicitly return the previous state.';
	}
	
	function getUnexpectedStateShapeWarningMessage(inputState, reducers, action, unexpectedKeyCache) {
	  var reducerKeys = Object.keys(reducers);
	  var argumentName = action && action.type === _createStore.ActionTypes.INIT ? 'preloadedState argument passed to createStore' : 'previous state received by the reducer';
	
	  if (reducerKeys.length === 0) {
	    return 'Store does not have a valid reducer. Make sure the argument passed ' + 'to combineReducers is an object whose values are reducers.';
	  }
	
	  if (!(0, _isPlainObject2['default'])(inputState)) {
	    return 'The ' + argumentName + ' has unexpected type of "' + {}.toString.call(inputState).match(/\s([a-z|A-Z]+)/)[1] + '". Expected argument to be an object with the following ' + ('keys: "' + reducerKeys.join('", "') + '"');
	  }
	
	  var unexpectedKeys = Object.keys(inputState).filter(function (key) {
	    return !reducers.hasOwnProperty(key) && !unexpectedKeyCache[key];
	  });
	
	  unexpectedKeys.forEach(function (key) {
	    unexpectedKeyCache[key] = true;
	  });
	
	  if (unexpectedKeys.length > 0) {
	    return 'Unexpected ' + (unexpectedKeys.length > 1 ? 'keys' : 'key') + ' ' + ('"' + unexpectedKeys.join('", "') + '" found in ' + argumentName + '. ') + 'Expected to find one of the known reducer keys instead: ' + ('"' + reducerKeys.join('", "') + '". Unexpected keys will be ignored.');
	  }
	}
	
	function assertReducerSanity(reducers) {
	  Object.keys(reducers).forEach(function (key) {
	    var reducer = reducers[key];
	    var initialState = reducer(undefined, { type: _createStore.ActionTypes.INIT });
	
	    if (typeof initialState === 'undefined') {
	      throw new Error('Reducer "' + key + '" returned undefined during initialization. ' + 'If the state passed to the reducer is undefined, you must ' + 'explicitly return the initial state. The initial state may ' + 'not be undefined.');
	    }
	
	    var type = '@@redux/PROBE_UNKNOWN_ACTION_' + Math.random().toString(36).substring(7).split('').join('.');
	    if (typeof reducer(undefined, { type: type }) === 'undefined') {
	      throw new Error('Reducer "' + key + '" returned undefined when probed with a random type. ' + ('Don\'t try to handle ' + _createStore.ActionTypes.INIT + ' or other actions in "redux/*" ') + 'namespace. They are considered private. Instead, you must return the ' + 'current state for any unknown actions, unless it is undefined, ' + 'in which case you must return the initial state, regardless of the ' + 'action type. The initial state may not be undefined.');
	    }
	  });
	}
	
	/**
	 * Turns an object whose values are different reducer functions, into a single
	 * reducer function. It will call every child reducer, and gather their results
	 * into a single state object, whose keys correspond to the keys of the passed
	 * reducer functions.
	 *
	 * @param {Object} reducers An object whose values correspond to different
	 * reducer functions that need to be combined into one. One handy way to obtain
	 * it is to use ES6 `import * as reducers` syntax. The reducers may never return
	 * undefined for any action. Instead, they should return their initial state
	 * if the state passed to them was undefined, and the current state for any
	 * unrecognized action.
	 *
	 * @returns {Function} A reducer function that invokes every reducer inside the
	 * passed object, and builds a state object with the same shape.
	 */
	function combineReducers(reducers) {
	  var reducerKeys = Object.keys(reducers);
	  var finalReducers = {};
	  for (var i = 0; i < reducerKeys.length; i++) {
	    var key = reducerKeys[i];
	
	    if (process.env.NODE_ENV !== 'production') {
	      if (typeof reducers[key] === 'undefined') {
	        (0, _warning2['default'])('No reducer provided for key "' + key + '"');
	      }
	    }
	
	    if (typeof reducers[key] === 'function') {
	      finalReducers[key] = reducers[key];
	    }
	  }
	  var finalReducerKeys = Object.keys(finalReducers);
	
	  if (process.env.NODE_ENV !== 'production') {
	    var unexpectedKeyCache = {};
	  }
	
	  var sanityError;
	  try {
	    assertReducerSanity(finalReducers);
	  } catch (e) {
	    sanityError = e;
	  }
	
	  return function combination() {
	    var state = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];
	    var action = arguments[1];
	
	    if (sanityError) {
	      throw sanityError;
	    }
	
	    if (process.env.NODE_ENV !== 'production') {
	      var warningMessage = getUnexpectedStateShapeWarningMessage(state, finalReducers, action, unexpectedKeyCache);
	      if (warningMessage) {
	        (0, _warning2['default'])(warningMessage);
	      }
	    }
	
	    var hasChanged = false;
	    var nextState = {};
	    for (var i = 0; i < finalReducerKeys.length; i++) {
	      var key = finalReducerKeys[i];
	      var reducer = finalReducers[key];
	      var previousStateForKey = state[key];
	      var nextStateForKey = reducer(previousStateForKey, action);
	      if (typeof nextStateForKey === 'undefined') {
	        var errorMessage = getUndefinedStateErrorMessage(key, action);
	        throw new Error(errorMessage);
	      }
	      nextState[key] = nextStateForKey;
	      hasChanged = hasChanged || nextStateForKey !== previousStateForKey;
	    }
	    return hasChanged ? nextState : state;
	  };
	}
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ }),
/* 208 */
/***/ (function(module, exports) {

	'use strict';
	
	exports.__esModule = true;
	exports['default'] = warning;
	/**
	 * Prints a warning in the console if it exists.
	 *
	 * @param {String} message The warning message.
	 * @returns {void}
	 */
	function warning(message) {
	  /* eslint-disable no-console */
	  if (typeof console !== 'undefined' && typeof console.error === 'function') {
	    console.error(message);
	  }
	  /* eslint-enable no-console */
	  try {
	    // This error was thrown as a convenience so that if you enable
	    // "break on all exceptions" in your console,
	    // it would pause the execution at this line.
	    throw new Error(message);
	    /* eslint-disable no-empty */
	  } catch (e) {}
	  /* eslint-enable no-empty */
	}

/***/ }),
/* 209 */
/***/ (function(module, exports) {

	'use strict';
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
	
	exports.__esModule = true;
	exports['default'] = bindActionCreators;
	function bindActionCreator(actionCreator, dispatch) {
	  return function () {
	    return dispatch(actionCreator.apply(undefined, arguments));
	  };
	}
	
	/**
	 * Turns an object whose values are action creators, into an object with the
	 * same keys, but with every function wrapped into a `dispatch` call so they
	 * may be invoked directly. This is just a convenience method, as you can call
	 * `store.dispatch(MyActionCreators.doSomething())` yourself just fine.
	 *
	 * For convenience, you can also pass a single function as the first argument,
	 * and get a function in return.
	 *
	 * @param {Function|Object} actionCreators An object whose values are action
	 * creator functions. One handy way to obtain it is to use ES6 `import * as`
	 * syntax. You may also pass a single function.
	 *
	 * @param {Function} dispatch The `dispatch` function available on your Redux
	 * store.
	 *
	 * @returns {Function|Object} The object mimicking the original object, but with
	 * every action creator wrapped into the `dispatch` call. If you passed a
	 * function as `actionCreators`, the return value will also be a single
	 * function.
	 */
	function bindActionCreators(actionCreators, dispatch) {
	  if (typeof actionCreators === 'function') {
	    return bindActionCreator(actionCreators, dispatch);
	  }
	
	  if ((typeof actionCreators === 'undefined' ? 'undefined' : _typeof(actionCreators)) !== 'object' || actionCreators === null) {
	    throw new Error('bindActionCreators expected an object or a function, instead received ' + (actionCreators === null ? 'null' : typeof actionCreators === 'undefined' ? 'undefined' : _typeof(actionCreators)) + '. ' + 'Did you write "import ActionCreators from" instead of "import * as ActionCreators from"?');
	  }
	
	  var keys = Object.keys(actionCreators);
	  var boundActionCreators = {};
	  for (var i = 0; i < keys.length; i++) {
	    var key = keys[i];
	    var actionCreator = actionCreators[key];
	    if (typeof actionCreator === 'function') {
	      boundActionCreators[key] = bindActionCreator(actionCreator, dispatch);
	    }
	  }
	  return boundActionCreators;
	}

/***/ }),
/* 210 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	exports.__esModule = true;
	
	var _extends = Object.assign || function (target) {
	  for (var i = 1; i < arguments.length; i++) {
	    var source = arguments[i];for (var key in source) {
	      if (Object.prototype.hasOwnProperty.call(source, key)) {
	        target[key] = source[key];
	      }
	    }
	  }return target;
	};
	
	exports['default'] = applyMiddleware;
	
	var _compose = __webpack_require__(211);
	
	var _compose2 = _interopRequireDefault(_compose);
	
	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { 'default': obj };
	}
	
	/**
	 * Creates a store enhancer that applies middleware to the dispatch method
	 * of the Redux store. This is handy for a variety of tasks, such as expressing
	 * asynchronous actions in a concise manner, or logging every action payload.
	 *
	 * See `redux-thunk` package as an example of the Redux middleware.
	 *
	 * Because middleware is potentially asynchronous, this should be the first
	 * store enhancer in the composition chain.
	 *
	 * Note that each middleware will be given the `dispatch` and `getState` functions
	 * as named arguments.
	 *
	 * @param {...Function} middlewares The middleware chain to be applied.
	 * @returns {Function} A store enhancer applying the middleware.
	 */
	function applyMiddleware() {
	  for (var _len = arguments.length, middlewares = Array(_len), _key = 0; _key < _len; _key++) {
	    middlewares[_key] = arguments[_key];
	  }
	
	  return function (createStore) {
	    return function (reducer, preloadedState, enhancer) {
	      var store = createStore(reducer, preloadedState, enhancer);
	      var _dispatch = store.dispatch;
	      var chain = [];
	
	      var middlewareAPI = {
	        getState: store.getState,
	        dispatch: function dispatch(action) {
	          return _dispatch(action);
	        }
	      };
	      chain = middlewares.map(function (middleware) {
	        return middleware(middlewareAPI);
	      });
	      _dispatch = _compose2['default'].apply(undefined, chain)(store.dispatch);
	
	      return _extends({}, store, {
	        dispatch: _dispatch
	      });
	    };
	  };
	}

/***/ }),
/* 211 */
/***/ (function(module, exports) {

	"use strict";
	
	exports.__esModule = true;
	exports["default"] = compose;
	/**
	 * Composes single-argument functions from right to left. The rightmost
	 * function can take multiple arguments as it provides the signature for
	 * the resulting composite function.
	 *
	 * @param {...Function} funcs The functions to compose.
	 * @returns {Function} A function obtained by composing the argument functions
	 * from right to left. For example, compose(f, g, h) is identical to doing
	 * (...args) => f(g(h(...args))).
	 */
	
	function compose() {
	  for (var _len = arguments.length, funcs = Array(_len), _key = 0; _key < _len; _key++) {
	    funcs[_key] = arguments[_key];
	  }
	
	  if (funcs.length === 0) {
	    return function (arg) {
	      return arg;
	    };
	  }
	
	  if (funcs.length === 1) {
	    return funcs[0];
	  }
	
	  var last = funcs[funcs.length - 1];
	  var rest = funcs.slice(0, -1);
	  return function () {
	    return rest.reduceRight(function (composed, f) {
	      return f(composed);
	    }, last.apply(undefined, arguments));
	  };
	}

/***/ }),
/* 212 */
/***/ (function(module, exports) {

	/**
	 * Copyright 2015, Yahoo! Inc.
	 * Copyrights licensed under the New BSD License. See the accompanying LICENSE file for terms.
	 */
	'use strict';
	
	var REACT_STATICS = {
	    childContextTypes: true,
	    contextTypes: true,
	    defaultProps: true,
	    displayName: true,
	    getDefaultProps: true,
	    mixins: true,
	    propTypes: true,
	    type: true
	};
	
	var KNOWN_STATICS = {
	    name: true,
	    length: true,
	    prototype: true,
	    caller: true,
	    arguments: true,
	    arity: true
	};
	
	var isGetOwnPropertySymbolsAvailable = typeof Object.getOwnPropertySymbols === 'function';
	
	module.exports = function hoistNonReactStatics(targetComponent, sourceComponent, customStatics) {
	    if (typeof sourceComponent !== 'string') {
	        // don't hoist over string (html) components
	        var keys = Object.getOwnPropertyNames(sourceComponent);
	
	        /* istanbul ignore else */
	        if (isGetOwnPropertySymbolsAvailable) {
	            keys = keys.concat(Object.getOwnPropertySymbols(sourceComponent));
	        }
	
	        for (var i = 0; i < keys.length; ++i) {
	            if (!REACT_STATICS[keys[i]] && !KNOWN_STATICS[keys[i]] && (!customStatics || !customStatics[keys[i]])) {
	                try {
	                    targetComponent[keys[i]] = sourceComponent[keys[i]];
	                } catch (error) {}
	            }
	        }
	    }
	
	    return targetComponent;
	};

/***/ }),
/* 213 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 */
	
	'use strict';
	
	/**
	 * Use invariant() to assert state which your program assumes to be true.
	 *
	 * Provide sprintf-style format (only %s is supported) and arguments
	 * to provide information about what broke and what you were
	 * expecting.
	 *
	 * The invariant message will be stripped in production, but the invariant
	 * will remain to ensure logic does not differ in production.
	 */
	
	var invariant = function invariant(condition, format, a, b, c, d, e, f) {
	  if (process.env.NODE_ENV !== 'production') {
	    if (format === undefined) {
	      throw new Error('invariant requires an error message argument');
	    }
	  }
	
	  if (!condition) {
	    var error;
	    if (format === undefined) {
	      error = new Error('Minified exception occurred; use the non-minified dev environment ' + 'for the full error message and additional helpful warnings.');
	    } else {
	      var args = [a, b, c, d, e, f];
	      var argIndex = 0;
	      error = new Error(format.replace(/%s/g, function () {
	        return args[argIndex++];
	      }));
	      error.name = 'Invariant Violation';
	    }
	
	    error.framesToPop = 1; // we don't care about invariant's own frame
	    throw error;
	  }
	};
	
	module.exports = invariant;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ }),
/* 214 */
/***/ (function(module, exports) {

	'use strict';
	
	exports.__esModule = true;
	function createThunkMiddleware(extraArgument) {
	  return function (_ref) {
	    var dispatch = _ref.dispatch,
	        getState = _ref.getState;
	    return function (next) {
	      return function (action) {
	        if (typeof action === 'function') {
	          return action(dispatch, getState, extraArgument);
	        }
	
	        return next(action);
	      };
	    };
	  };
	}
	
	var thunk = createThunkMiddleware();
	thunk.withExtraArgument = createThunkMiddleware;
	
	exports['default'] = thunk;

/***/ }),
/* 215 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _redux = __webpack_require__(191);
	
	var _user = __webpack_require__(216);
	
	var _user2 = _interopRequireDefault(_user);
	
	var _contracts = __webpack_require__(217);
	
	var _contracts2 = _interopRequireDefault(_contracts);
	
	var _contract = __webpack_require__(218);
	
	var _contract2 = _interopRequireDefault(_contract);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	exports.default = (0, _redux.combineReducers)({
	  user: _user2.default,
	  contracts: _contracts2.default,
	  contract: _contract2.default
	});

/***/ }),
/* 216 */
/***/ (function(module, exports) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	var user = function user() {
	  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
	  var action = arguments[1];
	
	  switch (action.type) {
	    case 'LOGGED_IN_USER':
	      return action.loggedInUserDetails;
	
	    default:
	      return state;
	  }
	};
	
	exports.default = user;

/***/ }),
/* 217 */
/***/ (function(module, exports) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	var contracts = function contracts() {
	  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
	  var action = arguments[1];
	
	  switch (action.type) {
	    case 'GET_USER_CONTRACTS':
	      return action.contractDetails;
	
	    default:
	      return state;
	  }
	};
	
	exports.default = contracts;

/***/ }),
/* 218 */
/***/ (function(module, exports) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	var contract = function contract() {
	  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
	  var action = arguments[1];
	
	  switch (action.type) {
	    case 'GET_SINGLE_CONTRACT':
	      var newState = [{
	        singleContractDetails: action.singleContractDetails
	      }];
	      return newState;
	
	    default:
	      return state;
	  }
	};
	
	exports.default = contract;

/***/ }),
/* 219 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _react = __webpack_require__(1);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _reactRouterDom = __webpack_require__(220);
	
	var _NavBar = __webpack_require__(256);
	
	var _NavBar2 = _interopRequireDefault(_NavBar);
	
	var _ContractList = __webpack_require__(257);
	
	var _ContractList2 = _interopRequireDefault(_ContractList);
	
	var _Login = __webpack_require__(654);
	
	var _Login2 = _interopRequireDefault(_Login);
	
	var _UserProfile = __webpack_require__(655);
	
	var _UserProfile2 = _interopRequireDefault(_UserProfile);
	
	var _Contract = __webpack_require__(656);
	
	var _Contract2 = _interopRequireDefault(_Contract);
	
	var _WriteContract = __webpack_require__(657);
	
	var _WriteContract2 = _interopRequireDefault(_WriteContract);
	
	var _UserRegistration = __webpack_require__(789);
	
	var _UserRegistration2 = _interopRequireDefault(_UserRegistration);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function App(props) {
	  return _react2.default.createElement(
	    'div',
	    { className: 'app-container' },
	    _react2.default.createElement(_NavBar2.default, null),
	    _react2.default.createElement(
	      _reactRouterDom.HashRouter,
	      null,
	      _react2.default.createElement(
	        'div',
	        null,
	        _react2.default.createElement(_reactRouterDom.Route, { exact: true, path: '/', component: _Login2.default }),
	        _react2.default.createElement(_reactRouterDom.Route, { path: '/myContracts', component: _ContractList2.default }),
	        _react2.default.createElement(_reactRouterDom.Route, { path: '/contracttosign', component: _Contract2.default }),
	        _react2.default.createElement(_reactRouterDom.Route, { path: '/userprofile', component: _UserProfile2.default }),
	        _react2.default.createElement(_reactRouterDom.Route, { path: '/newContract', component: _WriteContract2.default }),
	        _react2.default.createElement(_reactRouterDom.Route, { path: '/userRegistration', component: _UserRegistration2.default })
	      )
	    )
	  );
	}
	
	exports.default = App;

/***/ }),
/* 220 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	exports.__esModule = true;
	exports.withRouter = exports.matchPath = exports.Switch = exports.StaticRouter = exports.Router = exports.Route = exports.Redirect = exports.Prompt = exports.NavLink = exports.MemoryRouter = exports.Link = exports.HashRouter = exports.BrowserRouter = undefined;
	
	var _BrowserRouter2 = __webpack_require__(221);
	
	var _BrowserRouter3 = _interopRequireDefault(_BrowserRouter2);
	
	var _HashRouter2 = __webpack_require__(243);
	
	var _HashRouter3 = _interopRequireDefault(_HashRouter2);
	
	var _Link2 = __webpack_require__(245);
	
	var _Link3 = _interopRequireDefault(_Link2);
	
	var _MemoryRouter2 = __webpack_require__(246);
	
	var _MemoryRouter3 = _interopRequireDefault(_MemoryRouter2);
	
	var _NavLink2 = __webpack_require__(247);
	
	var _NavLink3 = _interopRequireDefault(_NavLink2);
	
	var _Prompt2 = __webpack_require__(248);
	
	var _Prompt3 = _interopRequireDefault(_Prompt2);
	
	var _Redirect2 = __webpack_require__(249);
	
	var _Redirect3 = _interopRequireDefault(_Redirect2);
	
	var _Route2 = __webpack_require__(250);
	
	var _Route3 = _interopRequireDefault(_Route2);
	
	var _Router2 = __webpack_require__(251);
	
	var _Router3 = _interopRequireDefault(_Router2);
	
	var _StaticRouter2 = __webpack_require__(252);
	
	var _StaticRouter3 = _interopRequireDefault(_StaticRouter2);
	
	var _Switch2 = __webpack_require__(253);
	
	var _Switch3 = _interopRequireDefault(_Switch2);
	
	var _matchPath2 = __webpack_require__(254);
	
	var _matchPath3 = _interopRequireDefault(_matchPath2);
	
	var _withRouter2 = __webpack_require__(255);
	
	var _withRouter3 = _interopRequireDefault(_withRouter2);
	
	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { default: obj };
	}
	
	exports.BrowserRouter = _BrowserRouter3.default;
	exports.HashRouter = _HashRouter3.default;
	exports.Link = _Link3.default;
	exports.MemoryRouter = _MemoryRouter3.default;
	exports.NavLink = _NavLink3.default;
	exports.Prompt = _Prompt3.default;
	exports.Redirect = _Redirect3.default;
	exports.Route = _Route3.default;
	exports.Router = _Router3.default;
	exports.StaticRouter = _StaticRouter3.default;
	exports.Switch = _Switch3.default;
	exports.matchPath = _matchPath3.default;
	exports.withRouter = _withRouter3.default;

/***/ }),
/* 221 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
	
	exports.__esModule = true;
	
	var _react = __webpack_require__(1);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _propTypes = __webpack_require__(184);
	
	var _propTypes2 = _interopRequireDefault(_propTypes);
	
	var _createBrowserHistory = __webpack_require__(222);
	
	var _createBrowserHistory2 = _interopRequireDefault(_createBrowserHistory);
	
	var _reactRouter = __webpack_require__(230);
	
	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { default: obj };
	}
	
	function _classCallCheck(instance, Constructor) {
	  if (!(instance instanceof Constructor)) {
	    throw new TypeError("Cannot call a class as a function");
	  }
	}
	
	function _possibleConstructorReturn(self, call) {
	  if (!self) {
	    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
	  }return call && ((typeof call === 'undefined' ? 'undefined' : _typeof(call)) === "object" || typeof call === "function") ? call : self;
	}
	
	function _inherits(subClass, superClass) {
	  if (typeof superClass !== "function" && superClass !== null) {
	    throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === 'undefined' ? 'undefined' : _typeof(superClass)));
	  }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
	}
	
	/**
	 * The public API for a <Router> that uses HTML5 history.
	 */
	var BrowserRouter = function (_React$Component) {
	  _inherits(BrowserRouter, _React$Component);
	
	  function BrowserRouter() {
	    var _temp, _this, _ret;
	
	    _classCallCheck(this, BrowserRouter);
	
	    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }
	
	    return _ret = (_temp = (_this = _possibleConstructorReturn(this, _React$Component.call.apply(_React$Component, [this].concat(args))), _this), _this.history = (0, _createBrowserHistory2.default)(_this.props), _temp), _possibleConstructorReturn(_this, _ret);
	  }
	
	  BrowserRouter.prototype.render = function render() {
	    return _react2.default.createElement(_reactRouter.Router, { history: this.history, children: this.props.children });
	  };
	
	  return BrowserRouter;
	}(_react2.default.Component);
	
	BrowserRouter.propTypes = {
	  basename: _propTypes2.default.string,
	  forceRefresh: _propTypes2.default.bool,
	  getUserConfirmation: _propTypes2.default.func,
	  keyLength: _propTypes2.default.number,
	  children: _propTypes2.default.node
	};
	exports.default = BrowserRouter;

/***/ }),
/* 222 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var _typeof2 = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
	
	exports.__esModule = true;
	
	var _typeof = typeof Symbol === "function" && _typeof2(Symbol.iterator) === "symbol" ? function (obj) {
	  return typeof obj === "undefined" ? "undefined" : _typeof2(obj);
	} : function (obj) {
	  return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj === "undefined" ? "undefined" : _typeof2(obj);
	};
	
	var _extends = Object.assign || function (target) {
	  for (var i = 1; i < arguments.length; i++) {
	    var source = arguments[i];for (var key in source) {
	      if (Object.prototype.hasOwnProperty.call(source, key)) {
	        target[key] = source[key];
	      }
	    }
	  }return target;
	};
	
	var _warning = __webpack_require__(223);
	
	var _warning2 = _interopRequireDefault(_warning);
	
	var _invariant = __webpack_require__(213);
	
	var _invariant2 = _interopRequireDefault(_invariant);
	
	var _LocationUtils = __webpack_require__(224);
	
	var _PathUtils = __webpack_require__(227);
	
	var _createTransitionManager = __webpack_require__(228);
	
	var _createTransitionManager2 = _interopRequireDefault(_createTransitionManager);
	
	var _DOMUtils = __webpack_require__(229);
	
	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { default: obj };
	}
	
	var PopStateEvent = 'popstate';
	var HashChangeEvent = 'hashchange';
	
	var getHistoryState = function getHistoryState() {
	  try {
	    return window.history.state || {};
	  } catch (e) {
	    // IE 11 sometimes throws when accessing window.history.state
	    // See https://github.com/ReactTraining/history/pull/289
	    return {};
	  }
	};
	
	/**
	 * Creates a history object that uses the HTML5 history API including
	 * pushState, replaceState, and the popstate event.
	 */
	var createBrowserHistory = function createBrowserHistory() {
	  var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	
	  (0, _invariant2.default)(_DOMUtils.canUseDOM, 'Browser history needs a DOM');
	
	  var globalHistory = window.history;
	  var canUseHistory = (0, _DOMUtils.supportsHistory)();
	  var needsHashChangeListener = !(0, _DOMUtils.supportsPopStateOnHashChange)();
	
	  var _props$forceRefresh = props.forceRefresh,
	      forceRefresh = _props$forceRefresh === undefined ? false : _props$forceRefresh,
	      _props$getUserConfirm = props.getUserConfirmation,
	      getUserConfirmation = _props$getUserConfirm === undefined ? _DOMUtils.getConfirmation : _props$getUserConfirm,
	      _props$keyLength = props.keyLength,
	      keyLength = _props$keyLength === undefined ? 6 : _props$keyLength;
	
	  var basename = props.basename ? (0, _PathUtils.stripTrailingSlash)((0, _PathUtils.addLeadingSlash)(props.basename)) : '';
	
	  var getDOMLocation = function getDOMLocation(historyState) {
	    var _ref = historyState || {},
	        key = _ref.key,
	        state = _ref.state;
	
	    var _window$location = window.location,
	        pathname = _window$location.pathname,
	        search = _window$location.search,
	        hash = _window$location.hash;
	
	    var path = pathname + search + hash;
	
	    if (basename) path = (0, _PathUtils.stripPrefix)(path, basename);
	
	    return _extends({}, (0, _PathUtils.parsePath)(path), {
	      state: state,
	      key: key
	    });
	  };
	
	  var createKey = function createKey() {
	    return Math.random().toString(36).substr(2, keyLength);
	  };
	
	  var transitionManager = (0, _createTransitionManager2.default)();
	
	  var setState = function setState(nextState) {
	    _extends(history, nextState);
	
	    history.length = globalHistory.length;
	
	    transitionManager.notifyListeners(history.location, history.action);
	  };
	
	  var handlePopState = function handlePopState(event) {
	    // Ignore extraneous popstate events in WebKit.
	    if ((0, _DOMUtils.isExtraneousPopstateEvent)(event)) return;
	
	    handlePop(getDOMLocation(event.state));
	  };
	
	  var handleHashChange = function handleHashChange() {
	    handlePop(getDOMLocation(getHistoryState()));
	  };
	
	  var forceNextPop = false;
	
	  var handlePop = function handlePop(location) {
	    if (forceNextPop) {
	      forceNextPop = false;
	      setState();
	    } else {
	      var action = 'POP';
	
	      transitionManager.confirmTransitionTo(location, action, getUserConfirmation, function (ok) {
	        if (ok) {
	          setState({ action: action, location: location });
	        } else {
	          revertPop(location);
	        }
	      });
	    }
	  };
	
	  var revertPop = function revertPop(fromLocation) {
	    var toLocation = history.location;
	
	    // TODO: We could probably make this more reliable by
	    // keeping a list of keys we've seen in sessionStorage.
	    // Instead, we just default to 0 for keys we don't know.
	
	    var toIndex = allKeys.indexOf(toLocation.key);
	
	    if (toIndex === -1) toIndex = 0;
	
	    var fromIndex = allKeys.indexOf(fromLocation.key);
	
	    if (fromIndex === -1) fromIndex = 0;
	
	    var delta = toIndex - fromIndex;
	
	    if (delta) {
	      forceNextPop = true;
	      go(delta);
	    }
	  };
	
	  var initialLocation = getDOMLocation(getHistoryState());
	  var allKeys = [initialLocation.key];
	
	  // Public interface
	
	  var createHref = function createHref(location) {
	    return basename + (0, _PathUtils.createPath)(location);
	  };
	
	  var push = function push(path, state) {
	    (0, _warning2.default)(!((typeof path === 'undefined' ? 'undefined' : _typeof(path)) === 'object' && path.state !== undefined && state !== undefined), 'You should avoid providing a 2nd state argument to push when the 1st ' + 'argument is a location-like object that already has state; it is ignored');
	
	    var action = 'PUSH';
	    var location = (0, _LocationUtils.createLocation)(path, state, createKey(), history.location);
	
	    transitionManager.confirmTransitionTo(location, action, getUserConfirmation, function (ok) {
	      if (!ok) return;
	
	      var href = createHref(location);
	      var key = location.key,
	          state = location.state;
	
	      if (canUseHistory) {
	        globalHistory.pushState({ key: key, state: state }, null, href);
	
	        if (forceRefresh) {
	          window.location.href = href;
	        } else {
	          var prevIndex = allKeys.indexOf(history.location.key);
	          var nextKeys = allKeys.slice(0, prevIndex === -1 ? 0 : prevIndex + 1);
	
	          nextKeys.push(location.key);
	          allKeys = nextKeys;
	
	          setState({ action: action, location: location });
	        }
	      } else {
	        (0, _warning2.default)(state === undefined, 'Browser history cannot push state in browsers that do not support HTML5 history');
	
	        window.location.href = href;
	      }
	    });
	  };
	
	  var replace = function replace(path, state) {
	    (0, _warning2.default)(!((typeof path === 'undefined' ? 'undefined' : _typeof(path)) === 'object' && path.state !== undefined && state !== undefined), 'You should avoid providing a 2nd state argument to replace when the 1st ' + 'argument is a location-like object that already has state; it is ignored');
	
	    var action = 'REPLACE';
	    var location = (0, _LocationUtils.createLocation)(path, state, createKey(), history.location);
	
	    transitionManager.confirmTransitionTo(location, action, getUserConfirmation, function (ok) {
	      if (!ok) return;
	
	      var href = createHref(location);
	      var key = location.key,
	          state = location.state;
	
	      if (canUseHistory) {
	        globalHistory.replaceState({ key: key, state: state }, null, href);
	
	        if (forceRefresh) {
	          window.location.replace(href);
	        } else {
	          var prevIndex = allKeys.indexOf(history.location.key);
	
	          if (prevIndex !== -1) allKeys[prevIndex] = location.key;
	
	          setState({ action: action, location: location });
	        }
	      } else {
	        (0, _warning2.default)(state === undefined, 'Browser history cannot replace state in browsers that do not support HTML5 history');
	
	        window.location.replace(href);
	      }
	    });
	  };
	
	  var go = function go(n) {
	    globalHistory.go(n);
	  };
	
	  var goBack = function goBack() {
	    return go(-1);
	  };
	
	  var goForward = function goForward() {
	    return go(1);
	  };
	
	  var listenerCount = 0;
	
	  var checkDOMListeners = function checkDOMListeners(delta) {
	    listenerCount += delta;
	
	    if (listenerCount === 1) {
	      (0, _DOMUtils.addEventListener)(window, PopStateEvent, handlePopState);
	
	      if (needsHashChangeListener) (0, _DOMUtils.addEventListener)(window, HashChangeEvent, handleHashChange);
	    } else if (listenerCount === 0) {
	      (0, _DOMUtils.removeEventListener)(window, PopStateEvent, handlePopState);
	
	      if (needsHashChangeListener) (0, _DOMUtils.removeEventListener)(window, HashChangeEvent, handleHashChange);
	    }
	  };
	
	  var isBlocked = false;
	
	  var block = function block() {
	    var prompt = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
	
	    var unblock = transitionManager.setPrompt(prompt);
	
	    if (!isBlocked) {
	      checkDOMListeners(1);
	      isBlocked = true;
	    }
	
	    return function () {
	      if (isBlocked) {
	        isBlocked = false;
	        checkDOMListeners(-1);
	      }
	
	      return unblock();
	    };
	  };
	
	  var listen = function listen(listener) {
	    var unlisten = transitionManager.appendListener(listener);
	    checkDOMListeners(1);
	
	    return function () {
	      checkDOMListeners(-1);
	      unlisten();
	    };
	  };
	
	  var history = {
	    length: globalHistory.length,
	    action: 'POP',
	    location: initialLocation,
	    createHref: createHref,
	    push: push,
	    replace: replace,
	    go: go,
	    goBack: goBack,
	    goForward: goForward,
	    block: block,
	    listen: listen
	  };
	
	  return history;
	};
	
	exports.default = createBrowserHistory;

/***/ }),
/* 223 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 */
	
	'use strict';
	
	/**
	 * Similar to invariant but only logs a warning if the condition is not met.
	 * This can be used to log issues in development environments in critical
	 * paths. Removing the logging code for production environments will keep the
	 * same logic and follow the same code paths.
	 */
	
	var warning = function warning() {};
	
	if (process.env.NODE_ENV !== 'production') {
	  warning = function warning(condition, format, args) {
	    var len = arguments.length;
	    args = new Array(len > 2 ? len - 2 : 0);
	    for (var key = 2; key < len; key++) {
	      args[key - 2] = arguments[key];
	    }
	    if (format === undefined) {
	      throw new Error('`warning(condition, format, ...args)` requires a warning ' + 'message argument');
	    }
	
	    if (format.length < 10 || /^[s\W]*$/.test(format)) {
	      throw new Error('The warning format should be able to uniquely identify this ' + 'warning. Please, use a more descriptive format than: ' + format);
	    }
	
	    if (!condition) {
	      var argIndex = 0;
	      var message = 'Warning: ' + format.replace(/%s/g, function () {
	        return args[argIndex++];
	      });
	      if (typeof console !== 'undefined') {
	        console.error(message);
	      }
	      try {
	        // This error was thrown as a convenience so that you can use this stack
	        // to find the callsite that caused this warning to fire.
	        throw new Error(message);
	      } catch (x) {}
	    }
	  };
	}
	
	module.exports = warning;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ }),
/* 224 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	exports.__esModule = true;
	exports.locationsAreEqual = exports.createLocation = undefined;
	
	var _extends = Object.assign || function (target) {
	  for (var i = 1; i < arguments.length; i++) {
	    var source = arguments[i];for (var key in source) {
	      if (Object.prototype.hasOwnProperty.call(source, key)) {
	        target[key] = source[key];
	      }
	    }
	  }return target;
	};
	
	var _resolvePathname = __webpack_require__(225);
	
	var _resolvePathname2 = _interopRequireDefault(_resolvePathname);
	
	var _valueEqual = __webpack_require__(226);
	
	var _valueEqual2 = _interopRequireDefault(_valueEqual);
	
	var _PathUtils = __webpack_require__(227);
	
	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { default: obj };
	}
	
	var createLocation = exports.createLocation = function createLocation(path, state, key, currentLocation) {
	  var location = void 0;
	  if (typeof path === 'string') {
	    // Two-arg form: push(path, state)
	    location = (0, _PathUtils.parsePath)(path);
	    location.state = state;
	  } else {
	    // One-arg form: push(location)
	    location = _extends({}, path);
	
	    if (location.pathname === undefined) location.pathname = '';
	
	    if (location.search) {
	      if (location.search.charAt(0) !== '?') location.search = '?' + location.search;
	    } else {
	      location.search = '';
	    }
	
	    if (location.hash) {
	      if (location.hash.charAt(0) !== '#') location.hash = '#' + location.hash;
	    } else {
	      location.hash = '';
	    }
	
	    if (state !== undefined && location.state === undefined) location.state = state;
	  }
	
	  location.key = key;
	
	  if (currentLocation) {
	    // Resolve incomplete/relative pathname relative to current location.
	    if (!location.pathname) {
	      location.pathname = currentLocation.pathname;
	    } else if (location.pathname.charAt(0) !== '/') {
	      location.pathname = (0, _resolvePathname2.default)(location.pathname, currentLocation.pathname);
	    }
	  }
	
	  return location;
	};
	
	var locationsAreEqual = exports.locationsAreEqual = function locationsAreEqual(a, b) {
	  return a.pathname === b.pathname && a.search === b.search && a.hash === b.hash && a.key === b.key && (0, _valueEqual2.default)(a.state, b.state);
	};

/***/ }),
/* 225 */
/***/ (function(module, exports) {

	'use strict';
	
	var isAbsolute = function isAbsolute(pathname) {
	  return pathname.charAt(0) === '/';
	};
	
	// About 1.5x faster than the two-arg version of Array#splice()
	var spliceOne = function spliceOne(list, index) {
	  for (var i = index, k = i + 1, n = list.length; k < n; i += 1, k += 1) {
	    list[i] = list[k];
	  }list.pop();
	};
	
	// This implementation is based heavily on node's url.parse
	var resolvePathname = function resolvePathname(to) {
	  var from = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';
	
	  var toParts = to && to.split('/') || [];
	  var fromParts = from && from.split('/') || [];
	
	  var isToAbs = to && isAbsolute(to);
	  var isFromAbs = from && isAbsolute(from);
	  var mustEndAbs = isToAbs || isFromAbs;
	
	  if (to && isAbsolute(to)) {
	    // to is absolute
	    fromParts = toParts;
	  } else if (toParts.length) {
	    // to is relative, drop the filename
	    fromParts.pop();
	    fromParts = fromParts.concat(toParts);
	  }
	
	  if (!fromParts.length) return '/';
	
	  var hasTrailingSlash = void 0;
	  if (fromParts.length) {
	    var last = fromParts[fromParts.length - 1];
	    hasTrailingSlash = last === '.' || last === '..' || last === '';
	  } else {
	    hasTrailingSlash = false;
	  }
	
	  var up = 0;
	  for (var i = fromParts.length; i >= 0; i--) {
	    var part = fromParts[i];
	
	    if (part === '.') {
	      spliceOne(fromParts, i);
	    } else if (part === '..') {
	      spliceOne(fromParts, i);
	      up++;
	    } else if (up) {
	      spliceOne(fromParts, i);
	      up--;
	    }
	  }
	
	  if (!mustEndAbs) for (; up--; up) {
	    fromParts.unshift('..');
	  }if (mustEndAbs && fromParts[0] !== '' && (!fromParts[0] || !isAbsolute(fromParts[0]))) fromParts.unshift('');
	
	  var result = fromParts.join('/');
	
	  if (hasTrailingSlash && result.substr(-1) !== '/') result += '/';
	
	  return result;
	};
	
	module.exports = resolvePathname;

/***/ }),
/* 226 */
/***/ (function(module, exports) {

	'use strict';
	
	var _typeof2 = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
	
	exports.__esModule = true;
	
	var _typeof = typeof Symbol === "function" && _typeof2(Symbol.iterator) === "symbol" ? function (obj) {
	  return typeof obj === "undefined" ? "undefined" : _typeof2(obj);
	} : function (obj) {
	  return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj === "undefined" ? "undefined" : _typeof2(obj);
	};
	
	var valueEqual = function valueEqual(a, b) {
	  if (a === b) return true;
	
	  if (a == null || b == null) return false;
	
	  if (Array.isArray(a)) return Array.isArray(b) && a.length === b.length && a.every(function (item, index) {
	    return valueEqual(item, b[index]);
	  });
	
	  var aType = typeof a === 'undefined' ? 'undefined' : _typeof(a);
	  var bType = typeof b === 'undefined' ? 'undefined' : _typeof(b);
	
	  if (aType !== bType) return false;
	
	  if (aType === 'object') {
	    var aValue = a.valueOf();
	    var bValue = b.valueOf();
	
	    if (aValue !== a || bValue !== b) return valueEqual(aValue, bValue);
	
	    var aKeys = Object.keys(a);
	    var bKeys = Object.keys(b);
	
	    if (aKeys.length !== bKeys.length) return false;
	
	    return aKeys.every(function (key) {
	      return valueEqual(a[key], b[key]);
	    });
	  }
	
	  return false;
	};
	
	exports.default = valueEqual;

/***/ }),
/* 227 */
/***/ (function(module, exports) {

	'use strict';
	
	exports.__esModule = true;
	var addLeadingSlash = exports.addLeadingSlash = function addLeadingSlash(path) {
	  return path.charAt(0) === '/' ? path : '/' + path;
	};
	
	var stripLeadingSlash = exports.stripLeadingSlash = function stripLeadingSlash(path) {
	  return path.charAt(0) === '/' ? path.substr(1) : path;
	};
	
	var stripPrefix = exports.stripPrefix = function stripPrefix(path, prefix) {
	  return path.indexOf(prefix) === 0 ? path.substr(prefix.length) : path;
	};
	
	var stripTrailingSlash = exports.stripTrailingSlash = function stripTrailingSlash(path) {
	  return path.charAt(path.length - 1) === '/' ? path.slice(0, -1) : path;
	};
	
	var parsePath = exports.parsePath = function parsePath(path) {
	  var pathname = path || '/';
	  var search = '';
	  var hash = '';
	
	  var hashIndex = pathname.indexOf('#');
	  if (hashIndex !== -1) {
	    hash = pathname.substr(hashIndex);
	    pathname = pathname.substr(0, hashIndex);
	  }
	
	  var searchIndex = pathname.indexOf('?');
	  if (searchIndex !== -1) {
	    search = pathname.substr(searchIndex);
	    pathname = pathname.substr(0, searchIndex);
	  }
	
	  pathname = decodeURI(pathname);
	
	  return {
	    pathname: pathname,
	    search: search === '?' ? '' : search,
	    hash: hash === '#' ? '' : hash
	  };
	};
	
	var createPath = exports.createPath = function createPath(location) {
	  var pathname = location.pathname,
	      search = location.search,
	      hash = location.hash;
	
	  var path = encodeURI(pathname || '/');
	
	  if (search && search !== '?') path += search.charAt(0) === '?' ? search : '?' + search;
	
	  if (hash && hash !== '#') path += hash.charAt(0) === '#' ? hash : '#' + hash;
	
	  return path;
	};

/***/ }),
/* 228 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	exports.__esModule = true;
	
	var _warning = __webpack_require__(223);
	
	var _warning2 = _interopRequireDefault(_warning);
	
	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { default: obj };
	}
	
	var createTransitionManager = function createTransitionManager() {
	  var prompt = null;
	
	  var setPrompt = function setPrompt(nextPrompt) {
	    (0, _warning2.default)(prompt == null, 'A history supports only one prompt at a time');
	
	    prompt = nextPrompt;
	
	    return function () {
	      if (prompt === nextPrompt) prompt = null;
	    };
	  };
	
	  var confirmTransitionTo = function confirmTransitionTo(location, action, getUserConfirmation, callback) {
	    // TODO: If another transition starts while we're still confirming
	    // the previous one, we may end up in a weird state. Figure out the
	    // best way to handle this.
	    if (prompt != null) {
	      var result = typeof prompt === 'function' ? prompt(location, action) : prompt;
	
	      if (typeof result === 'string') {
	        if (typeof getUserConfirmation === 'function') {
	          getUserConfirmation(result, callback);
	        } else {
	          (0, _warning2.default)(false, 'A history needs a getUserConfirmation function in order to use a prompt message');
	
	          callback(true);
	        }
	      } else {
	        // Return false from a transition hook to cancel the transition.
	        callback(result !== false);
	      }
	    } else {
	      callback(true);
	    }
	  };
	
	  var listeners = [];
	
	  var appendListener = function appendListener(fn) {
	    var isActive = true;
	
	    var listener = function listener() {
	      if (isActive) fn.apply(undefined, arguments);
	    };
	
	    listeners.push(listener);
	
	    return function () {
	      isActive = false;
	      listeners = listeners.filter(function (item) {
	        return item !== listener;
	      });
	    };
	  };
	
	  var notifyListeners = function notifyListeners() {
	    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }
	
	    listeners.forEach(function (listener) {
	      return listener.apply(undefined, args);
	    });
	  };
	
	  return {
	    setPrompt: setPrompt,
	    confirmTransitionTo: confirmTransitionTo,
	    appendListener: appendListener,
	    notifyListeners: notifyListeners
	  };
	};
	
	exports.default = createTransitionManager;

/***/ }),
/* 229 */
/***/ (function(module, exports) {

	'use strict';
	
	exports.__esModule = true;
	var canUseDOM = exports.canUseDOM = !!(typeof window !== 'undefined' && window.document && window.document.createElement);
	
	var addEventListener = exports.addEventListener = function addEventListener(node, event, listener) {
	  return node.addEventListener ? node.addEventListener(event, listener, false) : node.attachEvent('on' + event, listener);
	};
	
	var removeEventListener = exports.removeEventListener = function removeEventListener(node, event, listener) {
	  return node.removeEventListener ? node.removeEventListener(event, listener, false) : node.detachEvent('on' + event, listener);
	};
	
	var getConfirmation = exports.getConfirmation = function getConfirmation(message, callback) {
	  return callback(window.confirm(message));
	}; // eslint-disable-line no-alert
	
	/**
	 * Returns true if the HTML5 history API is supported. Taken from Modernizr.
	 *
	 * https://github.com/Modernizr/Modernizr/blob/master/LICENSE
	 * https://github.com/Modernizr/Modernizr/blob/master/feature-detects/history.js
	 * changed to avoid false negatives for Windows Phones: https://github.com/reactjs/react-router/issues/586
	 */
	var supportsHistory = exports.supportsHistory = function supportsHistory() {
	  var ua = window.navigator.userAgent;
	
	  if ((ua.indexOf('Android 2.') !== -1 || ua.indexOf('Android 4.0') !== -1) && ua.indexOf('Mobile Safari') !== -1 && ua.indexOf('Chrome') === -1 && ua.indexOf('Windows Phone') === -1) return false;
	
	  return window.history && 'pushState' in window.history;
	};
	
	/**
	 * Returns true if browser fires popstate on hash change.
	 * IE10 and IE11 do not.
	 */
	var supportsPopStateOnHashChange = exports.supportsPopStateOnHashChange = function supportsPopStateOnHashChange() {
	  return window.navigator.userAgent.indexOf('Trident') === -1;
	};
	
	/**
	 * Returns false if using go(n) with hash history causes a full page reload.
	 */
	var supportsGoWithoutReloadUsingHash = exports.supportsGoWithoutReloadUsingHash = function supportsGoWithoutReloadUsingHash() {
	  return window.navigator.userAgent.indexOf('Firefox') === -1;
	};
	
	/**
	 * Returns true if a given popstate event is an extraneous WebKit event.
	 * Accounts for the fact that Chrome on iOS fires real popstate events
	 * containing undefined state when pressing the back button.
	 */
	var isExtraneousPopstateEvent = exports.isExtraneousPopstateEvent = function isExtraneousPopstateEvent(event) {
	  return event.state === undefined && navigator.userAgent.indexOf('CriOS') === -1;
	};

/***/ }),
/* 230 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	exports.__esModule = true;
	exports.withRouter = exports.matchPath = exports.Switch = exports.StaticRouter = exports.Router = exports.Route = exports.Redirect = exports.Prompt = exports.MemoryRouter = undefined;
	
	var _MemoryRouter2 = __webpack_require__(231);
	
	var _MemoryRouter3 = _interopRequireDefault(_MemoryRouter2);
	
	var _Prompt2 = __webpack_require__(234);
	
	var _Prompt3 = _interopRequireDefault(_Prompt2);
	
	var _Redirect2 = __webpack_require__(235);
	
	var _Redirect3 = _interopRequireDefault(_Redirect2);
	
	var _Route2 = __webpack_require__(236);
	
	var _Route3 = _interopRequireDefault(_Route2);
	
	var _Router2 = __webpack_require__(233);
	
	var _Router3 = _interopRequireDefault(_Router2);
	
	var _StaticRouter2 = __webpack_require__(240);
	
	var _StaticRouter3 = _interopRequireDefault(_StaticRouter2);
	
	var _Switch2 = __webpack_require__(241);
	
	var _Switch3 = _interopRequireDefault(_Switch2);
	
	var _matchPath2 = __webpack_require__(237);
	
	var _matchPath3 = _interopRequireDefault(_matchPath2);
	
	var _withRouter2 = __webpack_require__(242);
	
	var _withRouter3 = _interopRequireDefault(_withRouter2);
	
	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { default: obj };
	}
	
	exports.MemoryRouter = _MemoryRouter3.default;
	exports.Prompt = _Prompt3.default;
	exports.Redirect = _Redirect3.default;
	exports.Route = _Route3.default;
	exports.Router = _Router3.default;
	exports.StaticRouter = _StaticRouter3.default;
	exports.Switch = _Switch3.default;
	exports.matchPath = _matchPath3.default;
	exports.withRouter = _withRouter3.default;

/***/ }),
/* 231 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
	
	exports.__esModule = true;
	
	var _react = __webpack_require__(1);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _propTypes = __webpack_require__(184);
	
	var _propTypes2 = _interopRequireDefault(_propTypes);
	
	var _createMemoryHistory = __webpack_require__(232);
	
	var _createMemoryHistory2 = _interopRequireDefault(_createMemoryHistory);
	
	var _Router = __webpack_require__(233);
	
	var _Router2 = _interopRequireDefault(_Router);
	
	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { default: obj };
	}
	
	function _classCallCheck(instance, Constructor) {
	  if (!(instance instanceof Constructor)) {
	    throw new TypeError("Cannot call a class as a function");
	  }
	}
	
	function _possibleConstructorReturn(self, call) {
	  if (!self) {
	    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
	  }return call && ((typeof call === 'undefined' ? 'undefined' : _typeof(call)) === "object" || typeof call === "function") ? call : self;
	}
	
	function _inherits(subClass, superClass) {
	  if (typeof superClass !== "function" && superClass !== null) {
	    throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === 'undefined' ? 'undefined' : _typeof(superClass)));
	  }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
	}
	
	/**
	 * The public API for a <Router> that stores location in memory.
	 */
	var MemoryRouter = function (_React$Component) {
	  _inherits(MemoryRouter, _React$Component);
	
	  function MemoryRouter() {
	    var _temp, _this, _ret;
	
	    _classCallCheck(this, MemoryRouter);
	
	    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }
	
	    return _ret = (_temp = (_this = _possibleConstructorReturn(this, _React$Component.call.apply(_React$Component, [this].concat(args))), _this), _this.history = (0, _createMemoryHistory2.default)(_this.props), _temp), _possibleConstructorReturn(_this, _ret);
	  }
	
	  MemoryRouter.prototype.render = function render() {
	    return _react2.default.createElement(_Router2.default, { history: this.history, children: this.props.children });
	  };
	
	  return MemoryRouter;
	}(_react2.default.Component);
	
	MemoryRouter.propTypes = {
	  initialEntries: _propTypes2.default.array,
	  initialIndex: _propTypes2.default.number,
	  getUserConfirmation: _propTypes2.default.func,
	  keyLength: _propTypes2.default.number,
	  children: _propTypes2.default.node
	};
	exports.default = MemoryRouter;

/***/ }),
/* 232 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var _typeof2 = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
	
	exports.__esModule = true;
	
	var _typeof = typeof Symbol === "function" && _typeof2(Symbol.iterator) === "symbol" ? function (obj) {
	  return typeof obj === "undefined" ? "undefined" : _typeof2(obj);
	} : function (obj) {
	  return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj === "undefined" ? "undefined" : _typeof2(obj);
	};
	
	var _extends = Object.assign || function (target) {
	  for (var i = 1; i < arguments.length; i++) {
	    var source = arguments[i];for (var key in source) {
	      if (Object.prototype.hasOwnProperty.call(source, key)) {
	        target[key] = source[key];
	      }
	    }
	  }return target;
	};
	
	var _warning = __webpack_require__(223);
	
	var _warning2 = _interopRequireDefault(_warning);
	
	var _PathUtils = __webpack_require__(227);
	
	var _LocationUtils = __webpack_require__(224);
	
	var _createTransitionManager = __webpack_require__(228);
	
	var _createTransitionManager2 = _interopRequireDefault(_createTransitionManager);
	
	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { default: obj };
	}
	
	var clamp = function clamp(n, lowerBound, upperBound) {
	  return Math.min(Math.max(n, lowerBound), upperBound);
	};
	
	/**
	 * Creates a history object that stores locations in memory.
	 */
	var createMemoryHistory = function createMemoryHistory() {
	  var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	  var getUserConfirmation = props.getUserConfirmation,
	      _props$initialEntries = props.initialEntries,
	      initialEntries = _props$initialEntries === undefined ? ['/'] : _props$initialEntries,
	      _props$initialIndex = props.initialIndex,
	      initialIndex = _props$initialIndex === undefined ? 0 : _props$initialIndex,
	      _props$keyLength = props.keyLength,
	      keyLength = _props$keyLength === undefined ? 6 : _props$keyLength;
	
	  var transitionManager = (0, _createTransitionManager2.default)();
	
	  var setState = function setState(nextState) {
	    _extends(history, nextState);
	
	    history.length = history.entries.length;
	
	    transitionManager.notifyListeners(history.location, history.action);
	  };
	
	  var createKey = function createKey() {
	    return Math.random().toString(36).substr(2, keyLength);
	  };
	
	  var index = clamp(initialIndex, 0, initialEntries.length - 1);
	  var entries = initialEntries.map(function (entry) {
	    return typeof entry === 'string' ? (0, _LocationUtils.createLocation)(entry, undefined, createKey()) : (0, _LocationUtils.createLocation)(entry, undefined, entry.key || createKey());
	  });
	
	  // Public interface
	
	  var createHref = _PathUtils.createPath;
	
	  var push = function push(path, state) {
	    (0, _warning2.default)(!((typeof path === 'undefined' ? 'undefined' : _typeof(path)) === 'object' && path.state !== undefined && state !== undefined), 'You should avoid providing a 2nd state argument to push when the 1st ' + 'argument is a location-like object that already has state; it is ignored');
	
	    var action = 'PUSH';
	    var location = (0, _LocationUtils.createLocation)(path, state, createKey(), history.location);
	
	    transitionManager.confirmTransitionTo(location, action, getUserConfirmation, function (ok) {
	      if (!ok) return;
	
	      var prevIndex = history.index;
	      var nextIndex = prevIndex + 1;
	
	      var nextEntries = history.entries.slice(0);
	      if (nextEntries.length > nextIndex) {
	        nextEntries.splice(nextIndex, nextEntries.length - nextIndex, location);
	      } else {
	        nextEntries.push(location);
	      }
	
	      setState({
	        action: action,
	        location: location,
	        index: nextIndex,
	        entries: nextEntries
	      });
	    });
	  };
	
	  var replace = function replace(path, state) {
	    (0, _warning2.default)(!((typeof path === 'undefined' ? 'undefined' : _typeof(path)) === 'object' && path.state !== undefined && state !== undefined), 'You should avoid providing a 2nd state argument to replace when the 1st ' + 'argument is a location-like object that already has state; it is ignored');
	
	    var action = 'REPLACE';
	    var location = (0, _LocationUtils.createLocation)(path, state, createKey(), history.location);
	
	    transitionManager.confirmTransitionTo(location, action, getUserConfirmation, function (ok) {
	      if (!ok) return;
	
	      history.entries[history.index] = location;
	
	      setState({ action: action, location: location });
	    });
	  };
	
	  var go = function go(n) {
	    var nextIndex = clamp(history.index + n, 0, history.entries.length - 1);
	
	    var action = 'POP';
	    var location = history.entries[nextIndex];
	
	    transitionManager.confirmTransitionTo(location, action, getUserConfirmation, function (ok) {
	      if (ok) {
	        setState({
	          action: action,
	          location: location,
	          index: nextIndex
	        });
	      } else {
	        // Mimic the behavior of DOM histories by
	        // causing a render after a cancelled POP.
	        setState();
	      }
	    });
	  };
	
	  var goBack = function goBack() {
	    return go(-1);
	  };
	
	  var goForward = function goForward() {
	    return go(1);
	  };
	
	  var canGo = function canGo(n) {
	    var nextIndex = history.index + n;
	    return nextIndex >= 0 && nextIndex < history.entries.length;
	  };
	
	  var block = function block() {
	    var prompt = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
	    return transitionManager.setPrompt(prompt);
	  };
	
	  var listen = function listen(listener) {
	    return transitionManager.appendListener(listener);
	  };
	
	  var history = {
	    length: entries.length,
	    action: 'POP',
	    location: entries[index],
	    index: index,
	    entries: entries,
	    createHref: createHref,
	    push: push,
	    replace: replace,
	    go: go,
	    goBack: goBack,
	    goForward: goForward,
	    canGo: canGo,
	    block: block,
	    listen: listen
	  };
	
	  return history;
	};
	
	exports.default = createMemoryHistory;

/***/ }),
/* 233 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
	
	exports.__esModule = true;
	
	var _extends = Object.assign || function (target) {
	  for (var i = 1; i < arguments.length; i++) {
	    var source = arguments[i];for (var key in source) {
	      if (Object.prototype.hasOwnProperty.call(source, key)) {
	        target[key] = source[key];
	      }
	    }
	  }return target;
	};
	
	var _warning = __webpack_require__(223);
	
	var _warning2 = _interopRequireDefault(_warning);
	
	var _invariant = __webpack_require__(213);
	
	var _invariant2 = _interopRequireDefault(_invariant);
	
	var _react = __webpack_require__(1);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _propTypes = __webpack_require__(184);
	
	var _propTypes2 = _interopRequireDefault(_propTypes);
	
	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { default: obj };
	}
	
	function _classCallCheck(instance, Constructor) {
	  if (!(instance instanceof Constructor)) {
	    throw new TypeError("Cannot call a class as a function");
	  }
	}
	
	function _possibleConstructorReturn(self, call) {
	  if (!self) {
	    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
	  }return call && ((typeof call === 'undefined' ? 'undefined' : _typeof(call)) === "object" || typeof call === "function") ? call : self;
	}
	
	function _inherits(subClass, superClass) {
	  if (typeof superClass !== "function" && superClass !== null) {
	    throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === 'undefined' ? 'undefined' : _typeof(superClass)));
	  }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
	}
	
	/**
	 * The public API for putting history on context.
	 */
	var Router = function (_React$Component) {
	  _inherits(Router, _React$Component);
	
	  function Router() {
	    var _temp, _this, _ret;
	
	    _classCallCheck(this, Router);
	
	    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }
	
	    return _ret = (_temp = (_this = _possibleConstructorReturn(this, _React$Component.call.apply(_React$Component, [this].concat(args))), _this), _this.state = {
	      match: _this.computeMatch(_this.props.history.location.pathname)
	    }, _temp), _possibleConstructorReturn(_this, _ret);
	  }
	
	  Router.prototype.getChildContext = function getChildContext() {
	    return {
	      router: _extends({}, this.context.router, {
	        history: this.props.history,
	        route: {
	          location: this.props.history.location,
	          match: this.state.match
	        }
	      })
	    };
	  };
	
	  Router.prototype.computeMatch = function computeMatch(pathname) {
	    return {
	      path: '/',
	      url: '/',
	      params: {},
	      isExact: pathname === '/'
	    };
	  };
	
	  Router.prototype.componentWillMount = function componentWillMount() {
	    var _this2 = this;
	
	    var _props = this.props,
	        children = _props.children,
	        history = _props.history;
	
	    (0, _invariant2.default)(children == null || _react2.default.Children.count(children) === 1, 'A <Router> may have only one child element');
	
	    // Do this here so we can setState when a <Redirect> changes the
	    // location in componentWillMount. This happens e.g. when doing
	    // server rendering using a <StaticRouter>.
	    this.unlisten = history.listen(function () {
	      _this2.setState({
	        match: _this2.computeMatch(history.location.pathname)
	      });
	    });
	  };
	
	  Router.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
	    (0, _warning2.default)(this.props.history === nextProps.history, 'You cannot change <Router history>');
	  };
	
	  Router.prototype.componentWillUnmount = function componentWillUnmount() {
	    this.unlisten();
	  };
	
	  Router.prototype.render = function render() {
	    var children = this.props.children;
	
	    return children ? _react2.default.Children.only(children) : null;
	  };
	
	  return Router;
	}(_react2.default.Component);
	
	Router.propTypes = {
	  history: _propTypes2.default.object.isRequired,
	  children: _propTypes2.default.node
	};
	Router.contextTypes = {
	  router: _propTypes2.default.object
	};
	Router.childContextTypes = {
	  router: _propTypes2.default.object.isRequired
	};
	exports.default = Router;

/***/ }),
/* 234 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
	
	exports.__esModule = true;
	
	var _react = __webpack_require__(1);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _propTypes = __webpack_require__(184);
	
	var _propTypes2 = _interopRequireDefault(_propTypes);
	
	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { default: obj };
	}
	
	function _classCallCheck(instance, Constructor) {
	  if (!(instance instanceof Constructor)) {
	    throw new TypeError("Cannot call a class as a function");
	  }
	}
	
	function _possibleConstructorReturn(self, call) {
	  if (!self) {
	    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
	  }return call && ((typeof call === 'undefined' ? 'undefined' : _typeof(call)) === "object" || typeof call === "function") ? call : self;
	}
	
	function _inherits(subClass, superClass) {
	  if (typeof superClass !== "function" && superClass !== null) {
	    throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === 'undefined' ? 'undefined' : _typeof(superClass)));
	  }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
	}
	
	/**
	 * The public API for prompting the user before navigating away
	 * from a screen with a component.
	 */
	var Prompt = function (_React$Component) {
	  _inherits(Prompt, _React$Component);
	
	  function Prompt() {
	    _classCallCheck(this, Prompt);
	
	    return _possibleConstructorReturn(this, _React$Component.apply(this, arguments));
	  }
	
	  Prompt.prototype.enable = function enable(message) {
	    if (this.unblock) this.unblock();
	
	    this.unblock = this.context.router.history.block(message);
	  };
	
	  Prompt.prototype.disable = function disable() {
	    if (this.unblock) {
	      this.unblock();
	      this.unblock = null;
	    }
	  };
	
	  Prompt.prototype.componentWillMount = function componentWillMount() {
	    if (this.props.when) this.enable(this.props.message);
	  };
	
	  Prompt.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
	    if (nextProps.when) {
	      if (!this.props.when || this.props.message !== nextProps.message) this.enable(nextProps.message);
	    } else {
	      this.disable();
	    }
	  };
	
	  Prompt.prototype.componentWillUnmount = function componentWillUnmount() {
	    this.disable();
	  };
	
	  Prompt.prototype.render = function render() {
	    return null;
	  };
	
	  return Prompt;
	}(_react2.default.Component);
	
	Prompt.propTypes = {
	  when: _propTypes2.default.bool,
	  message: _propTypes2.default.oneOfType([_propTypes2.default.func, _propTypes2.default.string]).isRequired
	};
	Prompt.defaultProps = {
	  when: true
	};
	Prompt.contextTypes = {
	  router: _propTypes2.default.shape({
	    history: _propTypes2.default.shape({
	      block: _propTypes2.default.func.isRequired
	    }).isRequired
	  }).isRequired
	};
	exports.default = Prompt;

/***/ }),
/* 235 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
	
	exports.__esModule = true;
	
	var _react = __webpack_require__(1);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _propTypes = __webpack_require__(184);
	
	var _propTypes2 = _interopRequireDefault(_propTypes);
	
	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { default: obj };
	}
	
	function _classCallCheck(instance, Constructor) {
	  if (!(instance instanceof Constructor)) {
	    throw new TypeError("Cannot call a class as a function");
	  }
	}
	
	function _possibleConstructorReturn(self, call) {
	  if (!self) {
	    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
	  }return call && ((typeof call === 'undefined' ? 'undefined' : _typeof(call)) === "object" || typeof call === "function") ? call : self;
	}
	
	function _inherits(subClass, superClass) {
	  if (typeof superClass !== "function" && superClass !== null) {
	    throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === 'undefined' ? 'undefined' : _typeof(superClass)));
	  }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
	}
	
	/**
	 * The public API for updating the location programatically
	 * with a component.
	 */
	var Redirect = function (_React$Component) {
	  _inherits(Redirect, _React$Component);
	
	  function Redirect() {
	    _classCallCheck(this, Redirect);
	
	    return _possibleConstructorReturn(this, _React$Component.apply(this, arguments));
	  }
	
	  Redirect.prototype.isStatic = function isStatic() {
	    return this.context.router && this.context.router.staticContext;
	  };
	
	  Redirect.prototype.componentWillMount = function componentWillMount() {
	    if (this.isStatic()) this.perform();
	  };
	
	  Redirect.prototype.componentDidMount = function componentDidMount() {
	    if (!this.isStatic()) this.perform();
	  };
	
	  Redirect.prototype.perform = function perform() {
	    var history = this.context.router.history;
	    var _props = this.props,
	        push = _props.push,
	        to = _props.to;
	
	    if (push) {
	      history.push(to);
	    } else {
	      history.replace(to);
	    }
	  };
	
	  Redirect.prototype.render = function render() {
	    return null;
	  };
	
	  return Redirect;
	}(_react2.default.Component);
	
	Redirect.propTypes = {
	  push: _propTypes2.default.bool,
	  from: _propTypes2.default.string,
	  to: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.object])
	};
	Redirect.defaultProps = {
	  push: false
	};
	Redirect.contextTypes = {
	  router: _propTypes2.default.shape({
	    history: _propTypes2.default.shape({
	      push: _propTypes2.default.func.isRequired,
	      replace: _propTypes2.default.func.isRequired
	    }).isRequired,
	    staticContext: _propTypes2.default.object
	  }).isRequired
	};
	exports.default = Redirect;

/***/ }),
/* 236 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
	
	exports.__esModule = true;
	
	var _extends = Object.assign || function (target) {
	  for (var i = 1; i < arguments.length; i++) {
	    var source = arguments[i];for (var key in source) {
	      if (Object.prototype.hasOwnProperty.call(source, key)) {
	        target[key] = source[key];
	      }
	    }
	  }return target;
	};
	
	var _warning = __webpack_require__(223);
	
	var _warning2 = _interopRequireDefault(_warning);
	
	var _react = __webpack_require__(1);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _propTypes = __webpack_require__(184);
	
	var _propTypes2 = _interopRequireDefault(_propTypes);
	
	var _matchPath = __webpack_require__(237);
	
	var _matchPath2 = _interopRequireDefault(_matchPath);
	
	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { default: obj };
	}
	
	function _classCallCheck(instance, Constructor) {
	  if (!(instance instanceof Constructor)) {
	    throw new TypeError("Cannot call a class as a function");
	  }
	}
	
	function _possibleConstructorReturn(self, call) {
	  if (!self) {
	    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
	  }return call && ((typeof call === 'undefined' ? 'undefined' : _typeof(call)) === "object" || typeof call === "function") ? call : self;
	}
	
	function _inherits(subClass, superClass) {
	  if (typeof superClass !== "function" && superClass !== null) {
	    throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === 'undefined' ? 'undefined' : _typeof(superClass)));
	  }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
	}
	
	/**
	 * The public API for matching a single path and rendering.
	 */
	var Route = function (_React$Component) {
	  _inherits(Route, _React$Component);
	
	  function Route() {
	    var _temp, _this, _ret;
	
	    _classCallCheck(this, Route);
	
	    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }
	
	    return _ret = (_temp = (_this = _possibleConstructorReturn(this, _React$Component.call.apply(_React$Component, [this].concat(args))), _this), _this.state = {
	      match: _this.computeMatch(_this.props, _this.context.router)
	    }, _temp), _possibleConstructorReturn(_this, _ret);
	  }
	
	  Route.prototype.getChildContext = function getChildContext() {
	    return {
	      router: _extends({}, this.context.router, {
	        route: {
	          location: this.props.location || this.context.router.route.location,
	          match: this.state.match
	        }
	      })
	    };
	  };
	
	  Route.prototype.computeMatch = function computeMatch(_ref, _ref2) {
	    var computedMatch = _ref.computedMatch,
	        location = _ref.location,
	        path = _ref.path,
	        strict = _ref.strict,
	        exact = _ref.exact;
	    var route = _ref2.route;
	
	    if (computedMatch) return computedMatch; // <Switch> already computed the match for us
	
	    var pathname = (location || route.location).pathname;
	
	    return path ? (0, _matchPath2.default)(pathname, { path: path, strict: strict, exact: exact }) : route.match;
	  };
	
	  Route.prototype.componentWillMount = function componentWillMount() {
	    var _props = this.props,
	        component = _props.component,
	        render = _props.render,
	        children = _props.children;
	
	    (0, _warning2.default)(!(component && render), 'You should not use <Route component> and <Route render> in the same route; <Route render> will be ignored');
	
	    (0, _warning2.default)(!(component && children), 'You should not use <Route component> and <Route children> in the same route; <Route children> will be ignored');
	
	    (0, _warning2.default)(!(render && children), 'You should not use <Route render> and <Route children> in the same route; <Route children> will be ignored');
	  };
	
	  Route.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps, nextContext) {
	    (0, _warning2.default)(!(nextProps.location && !this.props.location), '<Route> elements should not change from uncontrolled to controlled (or vice versa). You initially used no "location" prop and then provided one on a subsequent render.');
	
	    (0, _warning2.default)(!(!nextProps.location && this.props.location), '<Route> elements should not change from controlled to uncontrolled (or vice versa). You provided a "location" prop initially but omitted it on a subsequent render.');
	
	    this.setState({
	      match: this.computeMatch(nextProps, nextContext.router)
	    });
	  };
	
	  Route.prototype.render = function render() {
	    var match = this.state.match;
	    var _props2 = this.props,
	        children = _props2.children,
	        component = _props2.component,
	        render = _props2.render;
	    var _context$router = this.context.router,
	        history = _context$router.history,
	        route = _context$router.route,
	        staticContext = _context$router.staticContext;
	
	    var location = this.props.location || route.location;
	    var props = { match: match, location: location, history: history, staticContext: staticContext };
	
	    return component ? // component prop gets first priority, only called if there's a match
	    match ? _react2.default.createElement(component, props) : null : render ? // render prop is next, only called if there's a match
	    match ? render(props) : null : children ? // children come last, always called
	    typeof children === 'function' ? children(props) : !Array.isArray(children) || children.length ? // Preact defaults to empty children array
	    _react2.default.Children.only(children) : null : null;
	  };
	
	  return Route;
	}(_react2.default.Component);
	
	Route.propTypes = {
	  computedMatch: _propTypes2.default.object, // private, from <Switch>
	  path: _propTypes2.default.string,
	  exact: _propTypes2.default.bool,
	  strict: _propTypes2.default.bool,
	  component: _propTypes2.default.func,
	  render: _propTypes2.default.func,
	  children: _propTypes2.default.oneOfType([_propTypes2.default.func, _propTypes2.default.node]),
	  location: _propTypes2.default.object
	};
	Route.contextTypes = {
	  router: _propTypes2.default.shape({
	    history: _propTypes2.default.object.isRequired,
	    route: _propTypes2.default.object.isRequired,
	    staticContext: _propTypes2.default.object
	  })
	};
	Route.childContextTypes = {
	  router: _propTypes2.default.object.isRequired
	};
	exports.default = Route;

/***/ }),
/* 237 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	exports.__esModule = true;
	
	var _pathToRegexp = __webpack_require__(238);
	
	var _pathToRegexp2 = _interopRequireDefault(_pathToRegexp);
	
	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { default: obj };
	}
	
	var patternCache = {};
	var cacheLimit = 10000;
	var cacheCount = 0;
	
	var compilePath = function compilePath(pattern, options) {
	  var cacheKey = '' + options.end + options.strict;
	  var cache = patternCache[cacheKey] || (patternCache[cacheKey] = {});
	
	  if (cache[pattern]) return cache[pattern];
	
	  var keys = [];
	  var re = (0, _pathToRegexp2.default)(pattern, keys, options);
	  var compiledPattern = { re: re, keys: keys };
	
	  if (cacheCount < cacheLimit) {
	    cache[pattern] = compiledPattern;
	    cacheCount++;
	  }
	
	  return compiledPattern;
	};
	
	/**
	 * Public API for matching a URL pathname to a path pattern.
	 */
	var matchPath = function matchPath(pathname) {
	  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
	
	  if (typeof options === 'string') options = { path: options };
	
	  var _options = options,
	      _options$path = _options.path,
	      path = _options$path === undefined ? '/' : _options$path,
	      _options$exact = _options.exact,
	      exact = _options$exact === undefined ? false : _options$exact,
	      _options$strict = _options.strict,
	      strict = _options$strict === undefined ? false : _options$strict;
	
	  var _compilePath = compilePath(path, { end: exact, strict: strict }),
	      re = _compilePath.re,
	      keys = _compilePath.keys;
	
	  var match = re.exec(pathname);
	
	  if (!match) return null;
	
	  var url = match[0],
	      values = match.slice(1);
	
	  var isExact = pathname === url;
	
	  if (exact && !isExact) return null;
	
	  return {
	    path: path, // the path pattern used to match
	    url: path === '/' && url === '' ? '/' : url, // the matched portion of the URL
	    isExact: isExact, // whether or not we matched exactly
	    params: keys.reduce(function (memo, key, index) {
	      memo[key.name] = values[index];
	      return memo;
	    }, {})
	  };
	};
	
	exports.default = matchPath;

/***/ }),
/* 238 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
	
	var isarray = __webpack_require__(239);
	
	/**
	 * Expose `pathToRegexp`.
	 */
	module.exports = pathToRegexp;
	module.exports.parse = parse;
	module.exports.compile = compile;
	module.exports.tokensToFunction = tokensToFunction;
	module.exports.tokensToRegExp = tokensToRegExp;
	
	/**
	 * The main path matching regexp utility.
	 *
	 * @type {RegExp}
	 */
	var PATH_REGEXP = new RegExp([
	// Match escaped characters that would otherwise appear in future matches.
	// This allows the user to escape special characters that won't transform.
	'(\\\\.)',
	// Match Express-style parameters and un-named parameters with a prefix
	// and optional suffixes. Matches appear as:
	//
	// "/:test(\\d+)?" => ["/", "test", "\d+", undefined, "?", undefined]
	// "/route(\\d+)"  => [undefined, undefined, undefined, "\d+", undefined, undefined]
	// "/*"            => ["/", undefined, undefined, undefined, undefined, "*"]
	'([\\/.])?(?:(?:\\:(\\w+)(?:\\(((?:\\\\.|[^\\\\()])+)\\))?|\\(((?:\\\\.|[^\\\\()])+)\\))([+*?])?|(\\*))'].join('|'), 'g');
	
	/**
	 * Parse a string for the raw tokens.
	 *
	 * @param  {string}  str
	 * @param  {Object=} options
	 * @return {!Array}
	 */
	function parse(str, options) {
	  var tokens = [];
	  var key = 0;
	  var index = 0;
	  var path = '';
	  var defaultDelimiter = options && options.delimiter || '/';
	  var res;
	
	  while ((res = PATH_REGEXP.exec(str)) != null) {
	    var m = res[0];
	    var escaped = res[1];
	    var offset = res.index;
	    path += str.slice(index, offset);
	    index = offset + m.length;
	
	    // Ignore already escaped sequences.
	    if (escaped) {
	      path += escaped[1];
	      continue;
	    }
	
	    var next = str[index];
	    var prefix = res[2];
	    var name = res[3];
	    var capture = res[4];
	    var group = res[5];
	    var modifier = res[6];
	    var asterisk = res[7];
	
	    // Push the current path onto the tokens.
	    if (path) {
	      tokens.push(path);
	      path = '';
	    }
	
	    var partial = prefix != null && next != null && next !== prefix;
	    var repeat = modifier === '+' || modifier === '*';
	    var optional = modifier === '?' || modifier === '*';
	    var delimiter = res[2] || defaultDelimiter;
	    var pattern = capture || group;
	
	    tokens.push({
	      name: name || key++,
	      prefix: prefix || '',
	      delimiter: delimiter,
	      optional: optional,
	      repeat: repeat,
	      partial: partial,
	      asterisk: !!asterisk,
	      pattern: pattern ? escapeGroup(pattern) : asterisk ? '.*' : '[^' + escapeString(delimiter) + ']+?'
	    });
	  }
	
	  // Match any characters still remaining.
	  if (index < str.length) {
	    path += str.substr(index);
	  }
	
	  // If the path exists, push it onto the end.
	  if (path) {
	    tokens.push(path);
	  }
	
	  return tokens;
	}
	
	/**
	 * Compile a string to a template function for the path.
	 *
	 * @param  {string}             str
	 * @param  {Object=}            options
	 * @return {!function(Object=, Object=)}
	 */
	function compile(str, options) {
	  return tokensToFunction(parse(str, options));
	}
	
	/**
	 * Prettier encoding of URI path segments.
	 *
	 * @param  {string}
	 * @return {string}
	 */
	function encodeURIComponentPretty(str) {
	  return encodeURI(str).replace(/[\/?#]/g, function (c) {
	    return '%' + c.charCodeAt(0).toString(16).toUpperCase();
	  });
	}
	
	/**
	 * Encode the asterisk parameter. Similar to `pretty`, but allows slashes.
	 *
	 * @param  {string}
	 * @return {string}
	 */
	function encodeAsterisk(str) {
	  return encodeURI(str).replace(/[?#]/g, function (c) {
	    return '%' + c.charCodeAt(0).toString(16).toUpperCase();
	  });
	}
	
	/**
	 * Expose a method for transforming tokens into the path function.
	 */
	function tokensToFunction(tokens) {
	  // Compile all the tokens into regexps.
	  var matches = new Array(tokens.length);
	
	  // Compile all the patterns before compilation.
	  for (var i = 0; i < tokens.length; i++) {
	    if (_typeof(tokens[i]) === 'object') {
	      matches[i] = new RegExp('^(?:' + tokens[i].pattern + ')$');
	    }
	  }
	
	  return function (obj, opts) {
	    var path = '';
	    var data = obj || {};
	    var options = opts || {};
	    var encode = options.pretty ? encodeURIComponentPretty : encodeURIComponent;
	
	    for (var i = 0; i < tokens.length; i++) {
	      var token = tokens[i];
	
	      if (typeof token === 'string') {
	        path += token;
	
	        continue;
	      }
	
	      var value = data[token.name];
	      var segment;
	
	      if (value == null) {
	        if (token.optional) {
	          // Prepend partial segment prefixes.
	          if (token.partial) {
	            path += token.prefix;
	          }
	
	          continue;
	        } else {
	          throw new TypeError('Expected "' + token.name + '" to be defined');
	        }
	      }
	
	      if (isarray(value)) {
	        if (!token.repeat) {
	          throw new TypeError('Expected "' + token.name + '" to not repeat, but received `' + JSON.stringify(value) + '`');
	        }
	
	        if (value.length === 0) {
	          if (token.optional) {
	            continue;
	          } else {
	            throw new TypeError('Expected "' + token.name + '" to not be empty');
	          }
	        }
	
	        for (var j = 0; j < value.length; j++) {
	          segment = encode(value[j]);
	
	          if (!matches[i].test(segment)) {
	            throw new TypeError('Expected all "' + token.name + '" to match "' + token.pattern + '", but received `' + JSON.stringify(segment) + '`');
	          }
	
	          path += (j === 0 ? token.prefix : token.delimiter) + segment;
	        }
	
	        continue;
	      }
	
	      segment = token.asterisk ? encodeAsterisk(value) : encode(value);
	
	      if (!matches[i].test(segment)) {
	        throw new TypeError('Expected "' + token.name + '" to match "' + token.pattern + '", but received "' + segment + '"');
	      }
	
	      path += token.prefix + segment;
	    }
	
	    return path;
	  };
	}
	
	/**
	 * Escape a regular expression string.
	 *
	 * @param  {string} str
	 * @return {string}
	 */
	function escapeString(str) {
	  return str.replace(/([.+*?=^!:${}()[\]|\/\\])/g, '\\$1');
	}
	
	/**
	 * Escape the capturing group by escaping special characters and meaning.
	 *
	 * @param  {string} group
	 * @return {string}
	 */
	function escapeGroup(group) {
	  return group.replace(/([=!:$\/()])/g, '\\$1');
	}
	
	/**
	 * Attach the keys as a property of the regexp.
	 *
	 * @param  {!RegExp} re
	 * @param  {Array}   keys
	 * @return {!RegExp}
	 */
	function attachKeys(re, keys) {
	  re.keys = keys;
	  return re;
	}
	
	/**
	 * Get the flags for a regexp from the options.
	 *
	 * @param  {Object} options
	 * @return {string}
	 */
	function flags(options) {
	  return options.sensitive ? '' : 'i';
	}
	
	/**
	 * Pull out keys from a regexp.
	 *
	 * @param  {!RegExp} path
	 * @param  {!Array}  keys
	 * @return {!RegExp}
	 */
	function regexpToRegexp(path, keys) {
	  // Use a negative lookahead to match only capturing groups.
	  var groups = path.source.match(/\((?!\?)/g);
	
	  if (groups) {
	    for (var i = 0; i < groups.length; i++) {
	      keys.push({
	        name: i,
	        prefix: null,
	        delimiter: null,
	        optional: false,
	        repeat: false,
	        partial: false,
	        asterisk: false,
	        pattern: null
	      });
	    }
	  }
	
	  return attachKeys(path, keys);
	}
	
	/**
	 * Transform an array into a regexp.
	 *
	 * @param  {!Array}  path
	 * @param  {Array}   keys
	 * @param  {!Object} options
	 * @return {!RegExp}
	 */
	function arrayToRegexp(path, keys, options) {
	  var parts = [];
	
	  for (var i = 0; i < path.length; i++) {
	    parts.push(pathToRegexp(path[i], keys, options).source);
	  }
	
	  var regexp = new RegExp('(?:' + parts.join('|') + ')', flags(options));
	
	  return attachKeys(regexp, keys);
	}
	
	/**
	 * Create a path regexp from string input.
	 *
	 * @param  {string}  path
	 * @param  {!Array}  keys
	 * @param  {!Object} options
	 * @return {!RegExp}
	 */
	function stringToRegexp(path, keys, options) {
	  return tokensToRegExp(parse(path, options), keys, options);
	}
	
	/**
	 * Expose a function for taking tokens and returning a RegExp.
	 *
	 * @param  {!Array}          tokens
	 * @param  {(Array|Object)=} keys
	 * @param  {Object=}         options
	 * @return {!RegExp}
	 */
	function tokensToRegExp(tokens, keys, options) {
	  if (!isarray(keys)) {
	    options = /** @type {!Object} */keys || options;
	    keys = [];
	  }
	
	  options = options || {};
	
	  var strict = options.strict;
	  var end = options.end !== false;
	  var route = '';
	
	  // Iterate over the tokens and create our regexp string.
	  for (var i = 0; i < tokens.length; i++) {
	    var token = tokens[i];
	
	    if (typeof token === 'string') {
	      route += escapeString(token);
	    } else {
	      var prefix = escapeString(token.prefix);
	      var capture = '(?:' + token.pattern + ')';
	
	      keys.push(token);
	
	      if (token.repeat) {
	        capture += '(?:' + prefix + capture + ')*';
	      }
	
	      if (token.optional) {
	        if (!token.partial) {
	          capture = '(?:' + prefix + '(' + capture + '))?';
	        } else {
	          capture = prefix + '(' + capture + ')?';
	        }
	      } else {
	        capture = prefix + '(' + capture + ')';
	      }
	
	      route += capture;
	    }
	  }
	
	  var delimiter = escapeString(options.delimiter || '/');
	  var endsWithDelimiter = route.slice(-delimiter.length) === delimiter;
	
	  // In non-strict mode we allow a slash at the end of match. If the path to
	  // match already ends with a slash, we remove it for consistency. The slash
	  // is valid at the end of a path match, not in the middle. This is important
	  // in non-ending mode, where "/test/" shouldn't match "/test//route".
	  if (!strict) {
	    route = (endsWithDelimiter ? route.slice(0, -delimiter.length) : route) + '(?:' + delimiter + '(?=$))?';
	  }
	
	  if (end) {
	    route += '$';
	  } else {
	    // In non-ending mode, we need the capturing groups to match as much as
	    // possible by using a positive lookahead to the end or next path segment.
	    route += strict && endsWithDelimiter ? '' : '(?=' + delimiter + '|$)';
	  }
	
	  return attachKeys(new RegExp('^' + route, flags(options)), keys);
	}
	
	/**
	 * Normalize the given path string, returning a regular expression.
	 *
	 * An empty array can be passed in for the keys, which will hold the
	 * placeholder key descriptions. For example, using `/user/:id`, `keys` will
	 * contain `[{ name: 'id', delimiter: '/', optional: false, repeat: false }]`.
	 *
	 * @param  {(string|RegExp|Array)} path
	 * @param  {(Array|Object)=}       keys
	 * @param  {Object=}               options
	 * @return {!RegExp}
	 */
	function pathToRegexp(path, keys, options) {
	  if (!isarray(keys)) {
	    options = /** @type {!Object} */keys || options;
	    keys = [];
	  }
	
	  options = options || {};
	
	  if (path instanceof RegExp) {
	    return regexpToRegexp(path, /** @type {!Array} */keys);
	  }
	
	  if (isarray(path)) {
	    return arrayToRegexp( /** @type {!Array} */path, /** @type {!Array} */keys, options);
	  }
	
	  return stringToRegexp( /** @type {string} */path, /** @type {!Array} */keys, options);
	}

/***/ }),
/* 239 */
/***/ (function(module, exports) {

	'use strict';
	
	module.exports = Array.isArray || function (arr) {
	  return Object.prototype.toString.call(arr) == '[object Array]';
	};

/***/ }),
/* 240 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
	
	exports.__esModule = true;
	
	var _extends = Object.assign || function (target) {
	  for (var i = 1; i < arguments.length; i++) {
	    var source = arguments[i];for (var key in source) {
	      if (Object.prototype.hasOwnProperty.call(source, key)) {
	        target[key] = source[key];
	      }
	    }
	  }return target;
	};
	
	var _invariant = __webpack_require__(213);
	
	var _invariant2 = _interopRequireDefault(_invariant);
	
	var _react = __webpack_require__(1);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _propTypes = __webpack_require__(184);
	
	var _propTypes2 = _interopRequireDefault(_propTypes);
	
	var _PathUtils = __webpack_require__(227);
	
	var _Router = __webpack_require__(233);
	
	var _Router2 = _interopRequireDefault(_Router);
	
	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { default: obj };
	}
	
	function _objectWithoutProperties(obj, keys) {
	  var target = {};for (var i in obj) {
	    if (keys.indexOf(i) >= 0) continue;if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;target[i] = obj[i];
	  }return target;
	}
	
	function _classCallCheck(instance, Constructor) {
	  if (!(instance instanceof Constructor)) {
	    throw new TypeError("Cannot call a class as a function");
	  }
	}
	
	function _possibleConstructorReturn(self, call) {
	  if (!self) {
	    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
	  }return call && ((typeof call === 'undefined' ? 'undefined' : _typeof(call)) === "object" || typeof call === "function") ? call : self;
	}
	
	function _inherits(subClass, superClass) {
	  if (typeof superClass !== "function" && superClass !== null) {
	    throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === 'undefined' ? 'undefined' : _typeof(superClass)));
	  }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
	}
	
	var normalizeLocation = function normalizeLocation(object) {
	  var _object$pathname = object.pathname,
	      pathname = _object$pathname === undefined ? '/' : _object$pathname,
	      _object$search = object.search,
	      search = _object$search === undefined ? '' : _object$search,
	      _object$hash = object.hash,
	      hash = _object$hash === undefined ? '' : _object$hash;
	
	  return {
	    pathname: pathname,
	    search: search === '?' ? '' : search,
	    hash: hash === '#' ? '' : hash
	  };
	};
	
	var addBasename = function addBasename(basename, location) {
	  if (!basename) return location;
	
	  return _extends({}, location, {
	    pathname: (0, _PathUtils.addLeadingSlash)(basename) + location.pathname
	  });
	};
	
	var stripBasename = function stripBasename(basename, location) {
	  if (!basename) return location;
	
	  var base = (0, _PathUtils.addLeadingSlash)(basename);
	
	  if (location.pathname.indexOf(base) !== 0) return location;
	
	  return _extends({}, location, {
	    pathname: location.pathname.substr(base.length)
	  });
	};
	
	var createLocation = function createLocation(location) {
	  return typeof location === 'string' ? (0, _PathUtils.parsePath)(location) : normalizeLocation(location);
	};
	
	var createURL = function createURL(location) {
	  return typeof location === 'string' ? location : (0, _PathUtils.createPath)(location);
	};
	
	var staticHandler = function staticHandler(methodName) {
	  return function () {
	    (0, _invariant2.default)(false, 'You cannot %s with <StaticRouter>', methodName);
	  };
	};
	
	var noop = function noop() {};
	
	/**
	 * The public top-level API for a "static" <Router>, so-called because it
	 * can't actually change the current location. Instead, it just records
	 * location changes in a context object. Useful mainly in testing and
	 * server-rendering scenarios.
	 */
	
	var StaticRouter = function (_React$Component) {
	  _inherits(StaticRouter, _React$Component);
	
	  function StaticRouter() {
	    var _temp, _this, _ret;
	
	    _classCallCheck(this, StaticRouter);
	
	    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }
	
	    return _ret = (_temp = (_this = _possibleConstructorReturn(this, _React$Component.call.apply(_React$Component, [this].concat(args))), _this), _this.createHref = function (path) {
	      return (0, _PathUtils.addLeadingSlash)(_this.props.basename + createURL(path));
	    }, _this.handlePush = function (location) {
	      var _this$props = _this.props,
	          basename = _this$props.basename,
	          context = _this$props.context;
	
	      context.action = 'PUSH';
	      context.location = addBasename(basename, createLocation(location));
	      context.url = createURL(context.location);
	    }, _this.handleReplace = function (location) {
	      var _this$props2 = _this.props,
	          basename = _this$props2.basename,
	          context = _this$props2.context;
	
	      context.action = 'REPLACE';
	      context.location = addBasename(basename, createLocation(location));
	      context.url = createURL(context.location);
	    }, _this.handleListen = function () {
	      return noop;
	    }, _this.handleBlock = function () {
	      return noop;
	    }, _temp), _possibleConstructorReturn(_this, _ret);
	  }
	
	  StaticRouter.prototype.getChildContext = function getChildContext() {
	    return {
	      router: {
	        staticContext: this.props.context
	      }
	    };
	  };
	
	  StaticRouter.prototype.render = function render() {
	    var _props = this.props,
	        basename = _props.basename,
	        context = _props.context,
	        location = _props.location,
	        props = _objectWithoutProperties(_props, ['basename', 'context', 'location']);
	
	    var history = {
	      createHref: this.createHref,
	      action: 'POP',
	      location: stripBasename(basename, createLocation(location)),
	      push: this.handlePush,
	      replace: this.handleReplace,
	      go: staticHandler('go'),
	      goBack: staticHandler('goBack'),
	      goForward: staticHandler('goForward'),
	      listen: this.handleListen,
	      block: this.handleBlock
	    };
	
	    return _react2.default.createElement(_Router2.default, _extends({}, props, { history: history }));
	  };
	
	  return StaticRouter;
	}(_react2.default.Component);
	
	StaticRouter.propTypes = {
	  basename: _propTypes2.default.string,
	  context: _propTypes2.default.object.isRequired,
	  location: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.object])
	};
	StaticRouter.defaultProps = {
	  basename: '',
	  location: '/'
	};
	StaticRouter.childContextTypes = {
	  router: _propTypes2.default.object.isRequired
	};
	exports.default = StaticRouter;

/***/ }),
/* 241 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
	
	exports.__esModule = true;
	
	var _react = __webpack_require__(1);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _propTypes = __webpack_require__(184);
	
	var _propTypes2 = _interopRequireDefault(_propTypes);
	
	var _warning = __webpack_require__(223);
	
	var _warning2 = _interopRequireDefault(_warning);
	
	var _matchPath = __webpack_require__(237);
	
	var _matchPath2 = _interopRequireDefault(_matchPath);
	
	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { default: obj };
	}
	
	function _classCallCheck(instance, Constructor) {
	  if (!(instance instanceof Constructor)) {
	    throw new TypeError("Cannot call a class as a function");
	  }
	}
	
	function _possibleConstructorReturn(self, call) {
	  if (!self) {
	    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
	  }return call && ((typeof call === 'undefined' ? 'undefined' : _typeof(call)) === "object" || typeof call === "function") ? call : self;
	}
	
	function _inherits(subClass, superClass) {
	  if (typeof superClass !== "function" && superClass !== null) {
	    throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === 'undefined' ? 'undefined' : _typeof(superClass)));
	  }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
	}
	
	/**
	 * The public API for rendering the first <Route> that matches.
	 */
	var Switch = function (_React$Component) {
	  _inherits(Switch, _React$Component);
	
	  function Switch() {
	    _classCallCheck(this, Switch);
	
	    return _possibleConstructorReturn(this, _React$Component.apply(this, arguments));
	  }
	
	  Switch.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
	    (0, _warning2.default)(!(nextProps.location && !this.props.location), '<Switch> elements should not change from uncontrolled to controlled (or vice versa). You initially used no "location" prop and then provided one on a subsequent render.');
	
	    (0, _warning2.default)(!(!nextProps.location && this.props.location), '<Switch> elements should not change from controlled to uncontrolled (or vice versa). You provided a "location" prop initially but omitted it on a subsequent render.');
	  };
	
	  Switch.prototype.render = function render() {
	    var route = this.context.router.route;
	    var children = this.props.children;
	
	    var location = this.props.location || route.location;
	
	    var match = void 0,
	        child = void 0;
	    _react2.default.Children.forEach(children, function (element) {
	      if (!_react2.default.isValidElement(element)) return;
	
	      var _element$props = element.props,
	          pathProp = _element$props.path,
	          exact = _element$props.exact,
	          strict = _element$props.strict,
	          from = _element$props.from;
	
	      var path = pathProp || from;
	
	      if (match == null) {
	        child = element;
	        match = path ? (0, _matchPath2.default)(location.pathname, { path: path, exact: exact, strict: strict }) : route.match;
	      }
	    });
	
	    return match ? _react2.default.cloneElement(child, { location: location, computedMatch: match }) : null;
	  };
	
	  return Switch;
	}(_react2.default.Component);
	
	Switch.contextTypes = {
	  router: _propTypes2.default.shape({
	    route: _propTypes2.default.object.isRequired
	  }).isRequired
	};
	Switch.propTypes = {
	  children: _propTypes2.default.node,
	  location: _propTypes2.default.object
	};
	exports.default = Switch;

/***/ }),
/* 242 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	exports.__esModule = true;
	
	var _extends = Object.assign || function (target) {
	  for (var i = 1; i < arguments.length; i++) {
	    var source = arguments[i];for (var key in source) {
	      if (Object.prototype.hasOwnProperty.call(source, key)) {
	        target[key] = source[key];
	      }
	    }
	  }return target;
	};
	
	var _react = __webpack_require__(1);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _propTypes = __webpack_require__(184);
	
	var _propTypes2 = _interopRequireDefault(_propTypes);
	
	var _hoistNonReactStatics = __webpack_require__(212);
	
	var _hoistNonReactStatics2 = _interopRequireDefault(_hoistNonReactStatics);
	
	var _Route = __webpack_require__(236);
	
	var _Route2 = _interopRequireDefault(_Route);
	
	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { default: obj };
	}
	
	function _objectWithoutProperties(obj, keys) {
	  var target = {};for (var i in obj) {
	    if (keys.indexOf(i) >= 0) continue;if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;target[i] = obj[i];
	  }return target;
	}
	
	/**
	 * A public higher-order component to access the imperative API
	 */
	var withRouter = function withRouter(Component) {
	  var C = function C(props) {
	    var wrappedComponentRef = props.wrappedComponentRef,
	        remainingProps = _objectWithoutProperties(props, ['wrappedComponentRef']);
	
	    return _react2.default.createElement(_Route2.default, { render: function render(routeComponentProps) {
	        return _react2.default.createElement(Component, _extends({}, remainingProps, routeComponentProps, { ref: wrappedComponentRef }));
	      } });
	  };
	
	  C.displayName = 'withRouter(' + (Component.displayName || Component.name) + ')';
	  C.WrappedComponent = Component;
	  C.propTypes = {
	    wrappedComponentRef: _propTypes2.default.func
	  };
	
	  return (0, _hoistNonReactStatics2.default)(C, Component);
	};
	
	exports.default = withRouter;

/***/ }),
/* 243 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
	
	exports.__esModule = true;
	
	var _react = __webpack_require__(1);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _propTypes = __webpack_require__(184);
	
	var _propTypes2 = _interopRequireDefault(_propTypes);
	
	var _createHashHistory = __webpack_require__(244);
	
	var _createHashHistory2 = _interopRequireDefault(_createHashHistory);
	
	var _reactRouter = __webpack_require__(230);
	
	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { default: obj };
	}
	
	function _classCallCheck(instance, Constructor) {
	  if (!(instance instanceof Constructor)) {
	    throw new TypeError("Cannot call a class as a function");
	  }
	}
	
	function _possibleConstructorReturn(self, call) {
	  if (!self) {
	    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
	  }return call && ((typeof call === 'undefined' ? 'undefined' : _typeof(call)) === "object" || typeof call === "function") ? call : self;
	}
	
	function _inherits(subClass, superClass) {
	  if (typeof superClass !== "function" && superClass !== null) {
	    throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === 'undefined' ? 'undefined' : _typeof(superClass)));
	  }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
	}
	
	/**
	 * The public API for a <Router> that uses window.location.hash.
	 */
	var HashRouter = function (_React$Component) {
	  _inherits(HashRouter, _React$Component);
	
	  function HashRouter() {
	    var _temp, _this, _ret;
	
	    _classCallCheck(this, HashRouter);
	
	    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }
	
	    return _ret = (_temp = (_this = _possibleConstructorReturn(this, _React$Component.call.apply(_React$Component, [this].concat(args))), _this), _this.history = (0, _createHashHistory2.default)(_this.props), _temp), _possibleConstructorReturn(_this, _ret);
	  }
	
	  HashRouter.prototype.render = function render() {
	    return _react2.default.createElement(_reactRouter.Router, { history: this.history, children: this.props.children });
	  };
	
	  return HashRouter;
	}(_react2.default.Component);
	
	HashRouter.propTypes = {
	  basename: _propTypes2.default.string,
	  getUserConfirmation: _propTypes2.default.func,
	  hashType: _propTypes2.default.oneOf(['hashbang', 'noslash', 'slash']),
	  children: _propTypes2.default.node
	};
	exports.default = HashRouter;

/***/ }),
/* 244 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	exports.__esModule = true;
	
	var _extends = Object.assign || function (target) {
	  for (var i = 1; i < arguments.length; i++) {
	    var source = arguments[i];for (var key in source) {
	      if (Object.prototype.hasOwnProperty.call(source, key)) {
	        target[key] = source[key];
	      }
	    }
	  }return target;
	};
	
	var _warning = __webpack_require__(223);
	
	var _warning2 = _interopRequireDefault(_warning);
	
	var _invariant = __webpack_require__(213);
	
	var _invariant2 = _interopRequireDefault(_invariant);
	
	var _LocationUtils = __webpack_require__(224);
	
	var _PathUtils = __webpack_require__(227);
	
	var _createTransitionManager = __webpack_require__(228);
	
	var _createTransitionManager2 = _interopRequireDefault(_createTransitionManager);
	
	var _DOMUtils = __webpack_require__(229);
	
	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { default: obj };
	}
	
	var HashChangeEvent = 'hashchange';
	
	var HashPathCoders = {
	  hashbang: {
	    encodePath: function encodePath(path) {
	      return path.charAt(0) === '!' ? path : '!/' + (0, _PathUtils.stripLeadingSlash)(path);
	    },
	    decodePath: function decodePath(path) {
	      return path.charAt(0) === '!' ? path.substr(1) : path;
	    }
	  },
	  noslash: {
	    encodePath: _PathUtils.stripLeadingSlash,
	    decodePath: _PathUtils.addLeadingSlash
	  },
	  slash: {
	    encodePath: _PathUtils.addLeadingSlash,
	    decodePath: _PathUtils.addLeadingSlash
	  }
	};
	
	var getHashPath = function getHashPath() {
	  // We can't use window.location.hash here because it's not
	  // consistent across browsers - Firefox will pre-decode it!
	  var href = window.location.href;
	  var hashIndex = href.indexOf('#');
	  return hashIndex === -1 ? '' : href.substring(hashIndex + 1);
	};
	
	var pushHashPath = function pushHashPath(path) {
	  return window.location.hash = path;
	};
	
	var replaceHashPath = function replaceHashPath(path) {
	  var hashIndex = window.location.href.indexOf('#');
	
	  window.location.replace(window.location.href.slice(0, hashIndex >= 0 ? hashIndex : 0) + '#' + path);
	};
	
	var createHashHistory = function createHashHistory() {
	  var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	
	  (0, _invariant2.default)(_DOMUtils.canUseDOM, 'Hash history needs a DOM');
	
	  var globalHistory = window.history;
	  var canGoWithoutReload = (0, _DOMUtils.supportsGoWithoutReloadUsingHash)();
	
	  var _props$getUserConfirm = props.getUserConfirmation,
	      getUserConfirmation = _props$getUserConfirm === undefined ? _DOMUtils.getConfirmation : _props$getUserConfirm,
	      _props$hashType = props.hashType,
	      hashType = _props$hashType === undefined ? 'slash' : _props$hashType;
	
	  var basename = props.basename ? (0, _PathUtils.stripTrailingSlash)((0, _PathUtils.addLeadingSlash)(props.basename)) : '';
	
	  var _HashPathCoders$hashT = HashPathCoders[hashType],
	      encodePath = _HashPathCoders$hashT.encodePath,
	      decodePath = _HashPathCoders$hashT.decodePath;
	
	  var getDOMLocation = function getDOMLocation() {
	    var path = decodePath(getHashPath());
	
	    if (basename) path = (0, _PathUtils.stripPrefix)(path, basename);
	
	    return (0, _PathUtils.parsePath)(path);
	  };
	
	  var transitionManager = (0, _createTransitionManager2.default)();
	
	  var setState = function setState(nextState) {
	    _extends(history, nextState);
	
	    history.length = globalHistory.length;
	
	    transitionManager.notifyListeners(history.location, history.action);
	  };
	
	  var forceNextPop = false;
	  var ignorePath = null;
	
	  var handleHashChange = function handleHashChange() {
	    var path = getHashPath();
	    var encodedPath = encodePath(path);
	
	    if (path !== encodedPath) {
	      // Ensure we always have a properly-encoded hash.
	      replaceHashPath(encodedPath);
	    } else {
	      var location = getDOMLocation();
	      var prevLocation = history.location;
	
	      if (!forceNextPop && (0, _LocationUtils.locationsAreEqual)(prevLocation, location)) return; // A hashchange doesn't always == location change.
	
	      if (ignorePath === (0, _PathUtils.createPath)(location)) return; // Ignore this change; we already setState in push/replace.
	
	      ignorePath = null;
	
	      handlePop(location);
	    }
	  };
	
	  var handlePop = function handlePop(location) {
	    if (forceNextPop) {
	      forceNextPop = false;
	      setState();
	    } else {
	      var action = 'POP';
	
	      transitionManager.confirmTransitionTo(location, action, getUserConfirmation, function (ok) {
	        if (ok) {
	          setState({ action: action, location: location });
	        } else {
	          revertPop(location);
	        }
	      });
	    }
	  };
	
	  var revertPop = function revertPop(fromLocation) {
	    var toLocation = history.location;
	
	    // TODO: We could probably make this more reliable by
	    // keeping a list of paths we've seen in sessionStorage.
	    // Instead, we just default to 0 for paths we don't know.
	
	    var toIndex = allPaths.lastIndexOf((0, _PathUtils.createPath)(toLocation));
	
	    if (toIndex === -1) toIndex = 0;
	
	    var fromIndex = allPaths.lastIndexOf((0, _PathUtils.createPath)(fromLocation));
	
	    if (fromIndex === -1) fromIndex = 0;
	
	    var delta = toIndex - fromIndex;
	
	    if (delta) {
	      forceNextPop = true;
	      go(delta);
	    }
	  };
	
	  // Ensure the hash is encoded properly before doing anything else.
	  var path = getHashPath();
	  var encodedPath = encodePath(path);
	
	  if (path !== encodedPath) replaceHashPath(encodedPath);
	
	  var initialLocation = getDOMLocation();
	  var allPaths = [(0, _PathUtils.createPath)(initialLocation)];
	
	  // Public interface
	
	  var createHref = function createHref(location) {
	    return '#' + encodePath(basename + (0, _PathUtils.createPath)(location));
	  };
	
	  var push = function push(path, state) {
	    (0, _warning2.default)(state === undefined, 'Hash history cannot push state; it is ignored');
	
	    var action = 'PUSH';
	    var location = (0, _LocationUtils.createLocation)(path, undefined, undefined, history.location);
	
	    transitionManager.confirmTransitionTo(location, action, getUserConfirmation, function (ok) {
	      if (!ok) return;
	
	      var path = (0, _PathUtils.createPath)(location);
	      var encodedPath = encodePath(basename + path);
	      var hashChanged = getHashPath() !== encodedPath;
	
	      if (hashChanged) {
	        // We cannot tell if a hashchange was caused by a PUSH, so we'd
	        // rather setState here and ignore the hashchange. The caveat here
	        // is that other hash histories in the page will consider it a POP.
	        ignorePath = path;
	        pushHashPath(encodedPath);
	
	        var prevIndex = allPaths.lastIndexOf((0, _PathUtils.createPath)(history.location));
	        var nextPaths = allPaths.slice(0, prevIndex === -1 ? 0 : prevIndex + 1);
	
	        nextPaths.push(path);
	        allPaths = nextPaths;
	
	        setState({ action: action, location: location });
	      } else {
	        (0, _warning2.default)(false, 'Hash history cannot PUSH the same path; a new entry will not be added to the history stack');
	
	        setState();
	      }
	    });
	  };
	
	  var replace = function replace(path, state) {
	    (0, _warning2.default)(state === undefined, 'Hash history cannot replace state; it is ignored');
	
	    var action = 'REPLACE';
	    var location = (0, _LocationUtils.createLocation)(path, undefined, undefined, history.location);
	
	    transitionManager.confirmTransitionTo(location, action, getUserConfirmation, function (ok) {
	      if (!ok) return;
	
	      var path = (0, _PathUtils.createPath)(location);
	      var encodedPath = encodePath(basename + path);
	      var hashChanged = getHashPath() !== encodedPath;
	
	      if (hashChanged) {
	        // We cannot tell if a hashchange was caused by a REPLACE, so we'd
	        // rather setState here and ignore the hashchange. The caveat here
	        // is that other hash histories in the page will consider it a POP.
	        ignorePath = path;
	        replaceHashPath(encodedPath);
	      }
	
	      var prevIndex = allPaths.indexOf((0, _PathUtils.createPath)(history.location));
	
	      if (prevIndex !== -1) allPaths[prevIndex] = path;
	
	      setState({ action: action, location: location });
	    });
	  };
	
	  var go = function go(n) {
	    (0, _warning2.default)(canGoWithoutReload, 'Hash history go(n) causes a full page reload in this browser');
	
	    globalHistory.go(n);
	  };
	
	  var goBack = function goBack() {
	    return go(-1);
	  };
	
	  var goForward = function goForward() {
	    return go(1);
	  };
	
	  var listenerCount = 0;
	
	  var checkDOMListeners = function checkDOMListeners(delta) {
	    listenerCount += delta;
	
	    if (listenerCount === 1) {
	      (0, _DOMUtils.addEventListener)(window, HashChangeEvent, handleHashChange);
	    } else if (listenerCount === 0) {
	      (0, _DOMUtils.removeEventListener)(window, HashChangeEvent, handleHashChange);
	    }
	  };
	
	  var isBlocked = false;
	
	  var block = function block() {
	    var prompt = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
	
	    var unblock = transitionManager.setPrompt(prompt);
	
	    if (!isBlocked) {
	      checkDOMListeners(1);
	      isBlocked = true;
	    }
	
	    return function () {
	      if (isBlocked) {
	        isBlocked = false;
	        checkDOMListeners(-1);
	      }
	
	      return unblock();
	    };
	  };
	
	  var listen = function listen(listener) {
	    var unlisten = transitionManager.appendListener(listener);
	    checkDOMListeners(1);
	
	    return function () {
	      checkDOMListeners(-1);
	      unlisten();
	    };
	  };
	
	  var history = {
	    length: globalHistory.length,
	    action: 'POP',
	    location: initialLocation,
	    createHref: createHref,
	    push: push,
	    replace: replace,
	    go: go,
	    goBack: goBack,
	    goForward: goForward,
	    block: block,
	    listen: listen
	  };
	
	  return history;
	};
	
	exports.default = createHashHistory;

/***/ }),
/* 245 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
	
	exports.__esModule = true;
	
	var _extends = Object.assign || function (target) {
	  for (var i = 1; i < arguments.length; i++) {
	    var source = arguments[i];for (var key in source) {
	      if (Object.prototype.hasOwnProperty.call(source, key)) {
	        target[key] = source[key];
	      }
	    }
	  }return target;
	};
	
	var _react = __webpack_require__(1);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _propTypes = __webpack_require__(184);
	
	var _propTypes2 = _interopRequireDefault(_propTypes);
	
	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { default: obj };
	}
	
	function _objectWithoutProperties(obj, keys) {
	  var target = {};for (var i in obj) {
	    if (keys.indexOf(i) >= 0) continue;if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;target[i] = obj[i];
	  }return target;
	}
	
	function _classCallCheck(instance, Constructor) {
	  if (!(instance instanceof Constructor)) {
	    throw new TypeError("Cannot call a class as a function");
	  }
	}
	
	function _possibleConstructorReturn(self, call) {
	  if (!self) {
	    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
	  }return call && ((typeof call === 'undefined' ? 'undefined' : _typeof(call)) === "object" || typeof call === "function") ? call : self;
	}
	
	function _inherits(subClass, superClass) {
	  if (typeof superClass !== "function" && superClass !== null) {
	    throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === 'undefined' ? 'undefined' : _typeof(superClass)));
	  }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
	}
	
	var isModifiedEvent = function isModifiedEvent(event) {
	  return !!(event.metaKey || event.altKey || event.ctrlKey || event.shiftKey);
	};
	
	/**
	 * The public API for rendering a history-aware <a>.
	 */
	
	var Link = function (_React$Component) {
	  _inherits(Link, _React$Component);
	
	  function Link() {
	    var _temp, _this, _ret;
	
	    _classCallCheck(this, Link);
	
	    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }
	
	    return _ret = (_temp = (_this = _possibleConstructorReturn(this, _React$Component.call.apply(_React$Component, [this].concat(args))), _this), _this.handleClick = function (event) {
	      if (_this.props.onClick) _this.props.onClick(event);
	
	      if (!event.defaultPrevented && // onClick prevented default
	      event.button === 0 && // ignore right clicks
	      !_this.props.target && // let browser handle "target=_blank" etc.
	      !isModifiedEvent(event) // ignore clicks with modifier keys
	      ) {
	          event.preventDefault();
	
	          var history = _this.context.router.history;
	          var _this$props = _this.props,
	              replace = _this$props.replace,
	              to = _this$props.to;
	
	          if (replace) {
	            history.replace(to);
	          } else {
	            history.push(to);
	          }
	        }
	    }, _temp), _possibleConstructorReturn(_this, _ret);
	  }
	
	  Link.prototype.render = function render() {
	    var _props = this.props,
	        replace = _props.replace,
	        to = _props.to,
	        props = _objectWithoutProperties(_props, ['replace', 'to']); // eslint-disable-line no-unused-vars
	
	    var href = this.context.router.history.createHref(typeof to === 'string' ? { pathname: to } : to);
	
	    return _react2.default.createElement('a', _extends({}, props, { onClick: this.handleClick, href: href }));
	  };
	
	  return Link;
	}(_react2.default.Component);
	
	Link.propTypes = {
	  onClick: _propTypes2.default.func,
	  target: _propTypes2.default.string,
	  replace: _propTypes2.default.bool,
	  to: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.object]).isRequired
	};
	Link.defaultProps = {
	  replace: false
	};
	Link.contextTypes = {
	  router: _propTypes2.default.shape({
	    history: _propTypes2.default.shape({
	      push: _propTypes2.default.func.isRequired,
	      replace: _propTypes2.default.func.isRequired,
	      createHref: _propTypes2.default.func.isRequired
	    }).isRequired
	  }).isRequired
	};
	exports.default = Link;

/***/ }),
/* 246 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	exports.__esModule = true;
	
	var _reactRouter = __webpack_require__(230);
	
	Object.defineProperty(exports, 'default', {
	  enumerable: true,
	  get: function get() {
	    return _reactRouter.MemoryRouter;
	  }
	});

/***/ }),
/* 247 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var _typeof2 = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
	
	exports.__esModule = true;
	
	var _extends = Object.assign || function (target) {
	  for (var i = 1; i < arguments.length; i++) {
	    var source = arguments[i];for (var key in source) {
	      if (Object.prototype.hasOwnProperty.call(source, key)) {
	        target[key] = source[key];
	      }
	    }
	  }return target;
	};
	
	var _typeof = typeof Symbol === "function" && _typeof2(Symbol.iterator) === "symbol" ? function (obj) {
	  return typeof obj === "undefined" ? "undefined" : _typeof2(obj);
	} : function (obj) {
	  return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj === "undefined" ? "undefined" : _typeof2(obj);
	};
	
	var _react = __webpack_require__(1);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _propTypes = __webpack_require__(184);
	
	var _propTypes2 = _interopRequireDefault(_propTypes);
	
	var _reactRouter = __webpack_require__(230);
	
	var _Link = __webpack_require__(245);
	
	var _Link2 = _interopRequireDefault(_Link);
	
	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { default: obj };
	}
	
	function _objectWithoutProperties(obj, keys) {
	  var target = {};for (var i in obj) {
	    if (keys.indexOf(i) >= 0) continue;if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;target[i] = obj[i];
	  }return target;
	}
	
	/**
	 * A <Link> wrapper that knows if it's "active" or not.
	 */
	var NavLink = function NavLink(_ref) {
	  var to = _ref.to,
	      exact = _ref.exact,
	      strict = _ref.strict,
	      location = _ref.location,
	      activeClassName = _ref.activeClassName,
	      className = _ref.className,
	      activeStyle = _ref.activeStyle,
	      style = _ref.style,
	      getIsActive = _ref.isActive,
	      rest = _objectWithoutProperties(_ref, ['to', 'exact', 'strict', 'location', 'activeClassName', 'className', 'activeStyle', 'style', 'isActive']);
	
	  return _react2.default.createElement(_reactRouter.Route, {
	    path: (typeof to === 'undefined' ? 'undefined' : _typeof(to)) === 'object' ? to.pathname : to,
	    exact: exact,
	    strict: strict,
	    location: location,
	    children: function children(_ref2) {
	      var location = _ref2.location,
	          match = _ref2.match;
	
	      var isActive = !!(getIsActive ? getIsActive(match, location) : match);
	
	      return _react2.default.createElement(_Link2.default, _extends({
	        to: to,
	        className: isActive ? [activeClassName, className].filter(function (i) {
	          return i;
	        }).join(' ') : className,
	        style: isActive ? _extends({}, style, activeStyle) : style
	      }, rest));
	    }
	  });
	};
	
	NavLink.propTypes = {
	  to: _Link2.default.propTypes.to,
	  exact: _propTypes2.default.bool,
	  strict: _propTypes2.default.bool,
	  location: _propTypes2.default.object,
	  activeClassName: _propTypes2.default.string,
	  className: _propTypes2.default.string,
	  activeStyle: _propTypes2.default.object,
	  style: _propTypes2.default.object,
	  isActive: _propTypes2.default.func
	};
	
	NavLink.defaultProps = {
	  activeClassName: 'active'
	};
	
	exports.default = NavLink;

/***/ }),
/* 248 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	exports.__esModule = true;
	
	var _reactRouter = __webpack_require__(230);
	
	Object.defineProperty(exports, 'default', {
	  enumerable: true,
	  get: function get() {
	    return _reactRouter.Prompt;
	  }
	});

/***/ }),
/* 249 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	exports.__esModule = true;
	
	var _reactRouter = __webpack_require__(230);
	
	Object.defineProperty(exports, 'default', {
	  enumerable: true,
	  get: function get() {
	    return _reactRouter.Redirect;
	  }
	});

/***/ }),
/* 250 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	exports.__esModule = true;
	
	var _reactRouter = __webpack_require__(230);
	
	Object.defineProperty(exports, 'default', {
	  enumerable: true,
	  get: function get() {
	    return _reactRouter.Route;
	  }
	});

/***/ }),
/* 251 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	exports.__esModule = true;
	
	var _reactRouter = __webpack_require__(230);
	
	Object.defineProperty(exports, 'default', {
	  enumerable: true,
	  get: function get() {
	    return _reactRouter.Router;
	  }
	});

/***/ }),
/* 252 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	exports.__esModule = true;
	
	var _reactRouter = __webpack_require__(230);
	
	Object.defineProperty(exports, 'default', {
	  enumerable: true,
	  get: function get() {
	    return _reactRouter.StaticRouter;
	  }
	});

/***/ }),
/* 253 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	exports.__esModule = true;
	
	var _reactRouter = __webpack_require__(230);
	
	Object.defineProperty(exports, 'default', {
	  enumerable: true,
	  get: function get() {
	    return _reactRouter.Switch;
	  }
	});

/***/ }),
/* 254 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	exports.__esModule = true;
	
	var _reactRouter = __webpack_require__(230);
	
	Object.defineProperty(exports, 'default', {
	  enumerable: true,
	  get: function get() {
	    return _reactRouter.matchPath;
	  }
	});

/***/ }),
/* 255 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	exports.__esModule = true;
	
	var _reactRouter = __webpack_require__(230);
	
	Object.defineProperty(exports, 'default', {
	  enumerable: true,
	  get: function get() {
	    return _reactRouter.withRouter;
	  }
	});

/***/ }),
/* 256 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _react = __webpack_require__(1);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _propTypes = __webpack_require__(184);
	
	var _propTypes2 = _interopRequireDefault(_propTypes);
	
	var _reactRouterDom = __webpack_require__(220);
	
	var _reactRedux = __webpack_require__(182);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	var NavBar = function (_React$Component) {
	  _inherits(NavBar, _React$Component);
	
	  function NavBar(props) {
	    _classCallCheck(this, NavBar);
	
	    return _possibleConstructorReturn(this, (NavBar.__proto__ || Object.getPrototypeOf(NavBar)).call(this, props));
	  }
	
	  _createClass(NavBar, [{
	    key: 'render',
	    value: function render() {
	      return _react2.default.createElement(
	        'div',
	        null,
	        _react2.default.createElement(
	          'div',
	          { className: 'navBar' },
	          _react2.default.createElement(
	            _reactRouterDom.HashRouter,
	            null,
	            _react2.default.createElement(
	              'ul',
	              { className: 'nav-ul' },
	              _react2.default.createElement(
	                'li',
	                { className: 'nav-left-button' },
	                _react2.default.createElement(
	                  _reactRouterDom.Link,
	                  { to: '/myContracts' },
	                  'My Contracts'
	                )
	              ),
	              _react2.default.createElement(
	                'li',
	                { className: 'nav-left-button' },
	                _react2.default.createElement(
	                  _reactRouterDom.Link,
	                  { to: '/newContract' },
	                  'Create A Contract'
	                )
	              ),
	              _react2.default.createElement(
	                'li',
	                { className: 'nav-left-button' },
	                _react2.default.createElement(
	                  _reactRouterDom.Link,
	                  { to: '/userprofile' },
	                  'Profile'
	                )
	              ),
	              this.props.user == null ? _react2.default.createElement(
	                'li',
	                { className: 'nav-login' },
	                _react2.default.createElement(
	                  _reactRouterDom.Link,
	                  { to: '/' },
	                  'Login'
	                )
	              ) : _react2.default.createElement(
	                'li',
	                { className: 'welcome-img' },
	                _react2.default.createElement('img', { className: 'nav-profile-img', src: this.props.user.user_image_url })
	              )
	            )
	          )
	        ),
	        _react2.default.createElement(
	          'div',
	          { className: 'dropdown' },
	          _react2.default.createElement(
	            'div',
	            { className: 'dropbtn' },
	            _react2.default.createElement('i', { className: 'fa fa-bars fa-2x', 'aria-hidden': 'true' })
	          ),
	          _react2.default.createElement(
	            'div',
	            { className: 'dropdown-content' },
	            _react2.default.createElement(
	              _reactRouterDom.HashRouter,
	              null,
	              _react2.default.createElement(
	                'div',
	                { className: 'dropdown-content' },
	                _react2.default.createElement(
	                  _reactRouterDom.Link,
	                  { to: '/myContracts' },
	                  'My Contracts'
	                ),
	                _react2.default.createElement(
	                  _reactRouterDom.Link,
	                  { to: '/newContract' },
	                  'Create a Contract'
	                ),
	                _react2.default.createElement(
	                  _reactRouterDom.Link,
	                  { to: '/userprofile' },
	                  'Profile'
	                ),
	                this.props.user == null ? _react2.default.createElement(
	                  _reactRouterDom.Link,
	                  { to: '/' },
	                  'Login'
	                ) : _react2.default.createElement('p', null)
	              )
	            )
	          )
	        )
	      );
	    }
	  }]);
	
	  return NavBar;
	}(_react2.default.Component);
	
	NavBar.propTypes = {
	  user: _propTypes2.default.object
	};
	
	function mapStateToProps(state) {
	  return {
	    user: state.user
	  };
	}
	
	exports.default = (0, _reactRedux.connect)(mapStateToProps)(NavBar);

/***/ }),
/* 257 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _react = __webpack_require__(1);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _propTypes = __webpack_require__(184);
	
	var _propTypes2 = _interopRequireDefault(_propTypes);
	
	var _reactRedux = __webpack_require__(182);
	
	var _ContractCard = __webpack_require__(258);
	
	var _ContractCard2 = _interopRequireDefault(_ContractCard);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	var ContractList = function (_React$Component) {
	  _inherits(ContractList, _React$Component);
	
	  function ContractList(props) {
	    _classCallCheck(this, ContractList);
	
	    return _possibleConstructorReturn(this, (ContractList.__proto__ || Object.getPrototypeOf(ContractList)).call(this, props));
	  }
	
	  _createClass(ContractList, [{
	    key: 'render',
	    value: function render() {
	      return _react2.default.createElement(
	        'div',
	        { className: 'contractList' },
	        _react2.default.createElement(
	          'div',
	          null,
	          _react2.default.createElement(
	            'h1',
	            { className: 'contractList-title' },
	            'Unsigned Contracts:'
	          ),
	          this.props.contracts.map(function (contract) {
	            if (contract.signature_url == '' || contract.signature_url == null) {
	              return _react2.default.createElement(_ContractCard2.default, { key: contract.id, contract: contract });
	            }
	          })
	        ),
	        _react2.default.createElement(
	          'div',
	          null,
	          _react2.default.createElement(
	            'h1',
	            { className: 'contractList-title' },
	            'Signed Contracts:'
	          ),
	          this.props.contracts.map(function (contract) {
	            if (contract.signature_url != '' && contract.signature_url != null) {
	              return _react2.default.createElement(_ContractCard2.default, { key: contract.id, contract: contract });
	            }
	          })
	        )
	      );
	    }
	  }]);
	
	  return ContractList;
	}(_react2.default.Component);
	
	ContractList.propTypes = {
	  contracts: _propTypes2.default.array
	};
	
	function mapStateToProps(state) {
	  return {
	    contracts: state.contracts
	  };
	}
	
	exports.default = (0, _reactRedux.connect)(mapStateToProps)(ContractList);

/***/ }),
/* 258 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _react = __webpack_require__(1);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _reactRouterDom = __webpack_require__(220);
	
	var _reactRedux = __webpack_require__(182);
	
	var _index = __webpack_require__(259);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	var Parser = __webpack_require__(646);
	
	var ContractCard = function (_React$Component) {
	  _inherits(ContractCard, _React$Component);
	
	  function ContractCard() {
	    _classCallCheck(this, ContractCard);
	
	    return _possibleConstructorReturn(this, (ContractCard.__proto__ || Object.getPrototypeOf(ContractCard)).apply(this, arguments));
	  }
	
	  _createClass(ContractCard, [{
	    key: 'render',
	    value: function render() {
	      var _this2 = this;
	
	      var _props$contract = this.props.contract,
	          contract_header = _props$contract.contract_header,
	          contract_desc = _props$contract.contract_desc;
	
	      return _react2.default.createElement(
	        'div',
	        { className: 'contractCard', onClick: function onClick(e) {
	            return _this2.props.dispatch((0, _index.getContract)(_this2.props.contract));
	          } },
	        _react2.default.createElement(
	          _reactRouterDom.HashRouter,
	          null,
	          _react2.default.createElement(
	            _reactRouterDom.Link,
	            { to: '/contracttosign' },
	            _react2.default.createElement(
	              'div',
	              null,
	              _react2.default.createElement(
	                'h1',
	                null,
	                contract_header
	              ),
	              Parser(contract_desc)
	            )
	          )
	        )
	      );
	    }
	  }]);
	
	  return ContractCard;
	}(_react2.default.Component);
	
	function mapStateToProps(state) {
	  return {
	    dispatch: state.dispatch
	  };
	}
	
	exports.default = (0, _reactRedux.connect)(mapStateToProps)(ContractCard);

/***/ }),
/* 259 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	var request = __webpack_require__(260);
	var bcrypt = __webpack_require__(268);
	
	var getUserDetails = exports.getUserDetails = function getUserDetails(loggedInUserDetails) {
	  return {
	    type: 'LOGGED_IN_USER',
	    loggedInUserDetails: loggedInUserDetails
	  };
	};
	
	var loggedInUser = exports.loggedInUser = function loggedInUser(user, dispatch) {
	  request.get('/user/profile/' + user.email).end(function (err, res) {
	    var userInfo = res.body;
	
	    if (err) {
	      console.error('loggedInUser ' + err.message);
	      return;
	    }
	    dispatch(getUserDetails(userInfo));
	    getUserContracts(userInfo.id, dispatch);
	  });
	};
	
	var getContract = exports.getContract = function getContract(singleContractDetails) {
	  return {
	    type: 'GET_SINGLE_CONTRACT',
	    singleContractDetails: singleContractDetails
	  };
	};
	
	var getContracts = exports.getContracts = function getContracts(contractDetails) {
	  return {
	    type: 'GET_USER_CONTRACTS',
	    contractDetails: contractDetails
	  };
	};
	
	var getUserContracts = exports.getUserContracts = function getUserContracts(userId, dispatch) {
	  request.get('/user/contracts/' + userId).end(function (err, res) {
	    var userInfo = JSON.parse(res.text);
	    if (err) {
	      console.error('getUserContracts ' + err.message);
	      return;
	    }
	    dispatch(getContracts(userInfo));
	  });
	};
	
	var updateContract = exports.updateContract = function updateContract(contractData) {
	  return {
	    type: 'UPDATE_USER_CONTRACTS',
	    contractData: contractData
	  };
	};
	
	var updateUserContract = exports.updateUserContract = function updateUserContract(callback, id, contractData, dispatch) {
	  request.put('/user/contracts/' + id).set('Content-Type', 'application/json').send(contractData).end(function (err, res) {
	    if (err) {
	      console.error('updateUserContract ' + err.message);
	      return;
	    }
	    getUserContracts(contractData.id, dispatch);
	  });
	};
	
	var writeNewContract = exports.writeNewContract = function writeNewContract(contractData, dispatch, id, callback) {
	  request.post('/user/contracts/new/' + id).send(contractData).end(function (err, res) {
	    if (err) {
	      callback(err);
	    } else {
	      callback(null, "Status: 200");
	    }
	    getUserContracts(contractData.id, dispatch);
	  });
	};
	
	var addNewUser = exports.addNewUser = function addNewUser(userRegistrationForm, callback) {
	  request.post('/register/newUser').send(userRegistrationForm).end(function (err, res) {
	    if (err) {
	      callback(err);
	    } else {
	      callback(null, "Status: 200");
	    }
	  });
	};

/***/ }),
/* 260 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
	
	/**
	 * Root reference for iframes.
	 */
	
	var root;
	if (typeof window !== 'undefined') {
	  // Browser window
	  root = window;
	} else if (typeof self !== 'undefined') {
	  // Web Worker
	  root = self;
	} else {
	  // Other environments
	  console.warn("Using browser-only version of superagent in non-browser environment");
	  root = undefined;
	}
	
	var Emitter = __webpack_require__(261);
	var RequestBase = __webpack_require__(262);
	var isObject = __webpack_require__(263);
	var isFunction = __webpack_require__(264);
	var ResponseBase = __webpack_require__(265);
	var shouldRetry = __webpack_require__(267);
	
	/**
	 * Noop.
	 */
	
	function noop() {};
	
	/**
	 * Expose `request`.
	 */
	
	var request = exports = module.exports = function (method, url) {
	  // callback
	  if ('function' == typeof url) {
	    return new exports.Request('GET', method).end(url);
	  }
	
	  // url first
	  if (1 == arguments.length) {
	    return new exports.Request('GET', method);
	  }
	
	  return new exports.Request(method, url);
	};
	
	exports.Request = Request;
	
	/**
	 * Determine XHR.
	 */
	
	request.getXHR = function () {
	  if (root.XMLHttpRequest && (!root.location || 'file:' != root.location.protocol || !root.ActiveXObject)) {
	    return new XMLHttpRequest();
	  } else {
	    try {
	      return new ActiveXObject('Microsoft.XMLHTTP');
	    } catch (e) {}
	    try {
	      return new ActiveXObject('Msxml2.XMLHTTP.6.0');
	    } catch (e) {}
	    try {
	      return new ActiveXObject('Msxml2.XMLHTTP.3.0');
	    } catch (e) {}
	    try {
	      return new ActiveXObject('Msxml2.XMLHTTP');
	    } catch (e) {}
	  }
	  throw Error("Browser-only verison of superagent could not find XHR");
	};
	
	/**
	 * Removes leading and trailing whitespace, added to support IE.
	 *
	 * @param {String} s
	 * @return {String}
	 * @api private
	 */
	
	var trim = ''.trim ? function (s) {
	  return s.trim();
	} : function (s) {
	  return s.replace(/(^\s*|\s*$)/g, '');
	};
	
	/**
	 * Serialize the given `obj`.
	 *
	 * @param {Object} obj
	 * @return {String}
	 * @api private
	 */
	
	function serialize(obj) {
	  if (!isObject(obj)) return obj;
	  var pairs = [];
	  for (var key in obj) {
	    pushEncodedKeyValuePair(pairs, key, obj[key]);
	  }
	  return pairs.join('&');
	}
	
	/**
	 * Helps 'serialize' with serializing arrays.
	 * Mutates the pairs array.
	 *
	 * @param {Array} pairs
	 * @param {String} key
	 * @param {Mixed} val
	 */
	
	function pushEncodedKeyValuePair(pairs, key, val) {
	  if (val != null) {
	    if (Array.isArray(val)) {
	      val.forEach(function (v) {
	        pushEncodedKeyValuePair(pairs, key, v);
	      });
	    } else if (isObject(val)) {
	      for (var subkey in val) {
	        pushEncodedKeyValuePair(pairs, key + '[' + subkey + ']', val[subkey]);
	      }
	    } else {
	      pairs.push(encodeURIComponent(key) + '=' + encodeURIComponent(val));
	    }
	  } else if (val === null) {
	    pairs.push(encodeURIComponent(key));
	  }
	}
	
	/**
	 * Expose serialization method.
	 */
	
	request.serializeObject = serialize;
	
	/**
	 * Parse the given x-www-form-urlencoded `str`.
	 *
	 * @param {String} str
	 * @return {Object}
	 * @api private
	 */
	
	function parseString(str) {
	  var obj = {};
	  var pairs = str.split('&');
	  var pair;
	  var pos;
	
	  for (var i = 0, len = pairs.length; i < len; ++i) {
	    pair = pairs[i];
	    pos = pair.indexOf('=');
	    if (pos == -1) {
	      obj[decodeURIComponent(pair)] = '';
	    } else {
	      obj[decodeURIComponent(pair.slice(0, pos))] = decodeURIComponent(pair.slice(pos + 1));
	    }
	  }
	
	  return obj;
	}
	
	/**
	 * Expose parser.
	 */
	
	request.parseString = parseString;
	
	/**
	 * Default MIME type map.
	 *
	 *     superagent.types.xml = 'application/xml';
	 *
	 */
	
	request.types = {
	  html: 'text/html',
	  json: 'application/json',
	  xml: 'application/xml',
	  urlencoded: 'application/x-www-form-urlencoded',
	  'form': 'application/x-www-form-urlencoded',
	  'form-data': 'application/x-www-form-urlencoded'
	};
	
	/**
	 * Default serialization map.
	 *
	 *     superagent.serialize['application/xml'] = function(obj){
	 *       return 'generated xml here';
	 *     };
	 *
	 */
	
	request.serialize = {
	  'application/x-www-form-urlencoded': serialize,
	  'application/json': JSON.stringify
	};
	
	/**
	 * Default parsers.
	 *
	 *     superagent.parse['application/xml'] = function(str){
	 *       return { object parsed from str };
	 *     };
	 *
	 */
	
	request.parse = {
	  'application/x-www-form-urlencoded': parseString,
	  'application/json': JSON.parse
	};
	
	/**
	 * Parse the given header `str` into
	 * an object containing the mapped fields.
	 *
	 * @param {String} str
	 * @return {Object}
	 * @api private
	 */
	
	function parseHeader(str) {
	  var lines = str.split(/\r?\n/);
	  var fields = {};
	  var index;
	  var line;
	  var field;
	  var val;
	
	  lines.pop(); // trailing CRLF
	
	  for (var i = 0, len = lines.length; i < len; ++i) {
	    line = lines[i];
	    index = line.indexOf(':');
	    field = line.slice(0, index).toLowerCase();
	    val = trim(line.slice(index + 1));
	    fields[field] = val;
	  }
	
	  return fields;
	}
	
	/**
	 * Check if `mime` is json or has +json structured syntax suffix.
	 *
	 * @param {String} mime
	 * @return {Boolean}
	 * @api private
	 */
	
	function isJSON(mime) {
	  return (/[\/+]json\b/.test(mime)
	  );
	}
	
	/**
	 * Initialize a new `Response` with the given `xhr`.
	 *
	 *  - set flags (.ok, .error, etc)
	 *  - parse header
	 *
	 * Examples:
	 *
	 *  Aliasing `superagent` as `request` is nice:
	 *
	 *      request = superagent;
	 *
	 *  We can use the promise-like API, or pass callbacks:
	 *
	 *      request.get('/').end(function(res){});
	 *      request.get('/', function(res){});
	 *
	 *  Sending data can be chained:
	 *
	 *      request
	 *        .post('/user')
	 *        .send({ name: 'tj' })
	 *        .end(function(res){});
	 *
	 *  Or passed to `.send()`:
	 *
	 *      request
	 *        .post('/user')
	 *        .send({ name: 'tj' }, function(res){});
	 *
	 *  Or passed to `.post()`:
	 *
	 *      request
	 *        .post('/user', { name: 'tj' })
	 *        .end(function(res){});
	 *
	 * Or further reduced to a single call for simple cases:
	 *
	 *      request
	 *        .post('/user', { name: 'tj' }, function(res){});
	 *
	 * @param {XMLHTTPRequest} xhr
	 * @param {Object} options
	 * @api private
	 */
	
	function Response(req) {
	  this.req = req;
	  this.xhr = this.req.xhr;
	  // responseText is accessible only if responseType is '' or 'text' and on older browsers
	  this.text = this.req.method != 'HEAD' && (this.xhr.responseType === '' || this.xhr.responseType === 'text') || typeof this.xhr.responseType === 'undefined' ? this.xhr.responseText : null;
	  this.statusText = this.req.xhr.statusText;
	  var status = this.xhr.status;
	  // handle IE9 bug: http://stackoverflow.com/questions/10046972/msie-returns-status-code-of-1223-for-ajax-request
	  if (status === 1223) {
	    status = 204;
	  }
	  this._setStatusProperties(status);
	  this.header = this.headers = parseHeader(this.xhr.getAllResponseHeaders());
	  // getAllResponseHeaders sometimes falsely returns "" for CORS requests, but
	  // getResponseHeader still works. so we get content-type even if getting
	  // other headers fails.
	  this.header['content-type'] = this.xhr.getResponseHeader('content-type');
	  this._setHeaderProperties(this.header);
	
	  if (null === this.text && req._responseType) {
	    this.body = this.xhr.response;
	  } else {
	    this.body = this.req.method != 'HEAD' ? this._parseBody(this.text ? this.text : this.xhr.response) : null;
	  }
	}
	
	ResponseBase(Response.prototype);
	
	/**
	 * Parse the given body `str`.
	 *
	 * Used for auto-parsing of bodies. Parsers
	 * are defined on the `superagent.parse` object.
	 *
	 * @param {String} str
	 * @return {Mixed}
	 * @api private
	 */
	
	Response.prototype._parseBody = function (str) {
	  var parse = request.parse[this.type];
	  if (this.req._parser) {
	    return this.req._parser(this, str);
	  }
	  if (!parse && isJSON(this.type)) {
	    parse = request.parse['application/json'];
	  }
	  return parse && str && (str.length || str instanceof Object) ? parse(str) : null;
	};
	
	/**
	 * Return an `Error` representative of this response.
	 *
	 * @return {Error}
	 * @api public
	 */
	
	Response.prototype.toError = function () {
	  var req = this.req;
	  var method = req.method;
	  var url = req.url;
	
	  var msg = 'cannot ' + method + ' ' + url + ' (' + this.status + ')';
	  var err = new Error(msg);
	  err.status = this.status;
	  err.method = method;
	  err.url = url;
	
	  return err;
	};
	
	/**
	 * Expose `Response`.
	 */
	
	request.Response = Response;
	
	/**
	 * Initialize a new `Request` with the given `method` and `url`.
	 *
	 * @param {String} method
	 * @param {String} url
	 * @api public
	 */
	
	function Request(method, url) {
	  var self = this;
	  this._query = this._query || [];
	  this.method = method;
	  this.url = url;
	  this.header = {}; // preserves header name case
	  this._header = {}; // coerces header names to lowercase
	  this.on('end', function () {
	    var err = null;
	    var res = null;
	
	    try {
	      res = new Response(self);
	    } catch (e) {
	      err = new Error('Parser is unable to parse the response');
	      err.parse = true;
	      err.original = e;
	      // issue #675: return the raw response if the response parsing fails
	      if (self.xhr) {
	        // ie9 doesn't have 'response' property
	        err.rawResponse = typeof self.xhr.responseType == 'undefined' ? self.xhr.responseText : self.xhr.response;
	        // issue #876: return the http status code if the response parsing fails
	        err.status = self.xhr.status ? self.xhr.status : null;
	        err.statusCode = err.status; // backwards-compat only
	      } else {
	        err.rawResponse = null;
	        err.status = null;
	      }
	
	      return self.callback(err);
	    }
	
	    self.emit('response', res);
	
	    var new_err;
	    try {
	      if (!self._isResponseOK(res)) {
	        new_err = new Error(res.statusText || 'Unsuccessful HTTP response');
	        new_err.original = err;
	        new_err.response = res;
	        new_err.status = res.status;
	      }
	    } catch (e) {
	      new_err = e; // #985 touching res may cause INVALID_STATE_ERR on old Android
	    }
	
	    // #1000 don't catch errors from the callback to avoid double calling it
	    if (new_err) {
	      self.callback(new_err, res);
	    } else {
	      self.callback(null, res);
	    }
	  });
	}
	
	/**
	 * Mixin `Emitter` and `RequestBase`.
	 */
	
	Emitter(Request.prototype);
	RequestBase(Request.prototype);
	
	/**
	 * Set Content-Type to `type`, mapping values from `request.types`.
	 *
	 * Examples:
	 *
	 *      superagent.types.xml = 'application/xml';
	 *
	 *      request.post('/')
	 *        .type('xml')
	 *        .send(xmlstring)
	 *        .end(callback);
	 *
	 *      request.post('/')
	 *        .type('application/xml')
	 *        .send(xmlstring)
	 *        .end(callback);
	 *
	 * @param {String} type
	 * @return {Request} for chaining
	 * @api public
	 */
	
	Request.prototype.type = function (type) {
	  this.set('Content-Type', request.types[type] || type);
	  return this;
	};
	
	/**
	 * Set Accept to `type`, mapping values from `request.types`.
	 *
	 * Examples:
	 *
	 *      superagent.types.json = 'application/json';
	 *
	 *      request.get('/agent')
	 *        .accept('json')
	 *        .end(callback);
	 *
	 *      request.get('/agent')
	 *        .accept('application/json')
	 *        .end(callback);
	 *
	 * @param {String} accept
	 * @return {Request} for chaining
	 * @api public
	 */
	
	Request.prototype.accept = function (type) {
	  this.set('Accept', request.types[type] || type);
	  return this;
	};
	
	/**
	 * Set Authorization field value with `user` and `pass`.
	 *
	 * @param {String} user
	 * @param {String} [pass] optional in case of using 'bearer' as type
	 * @param {Object} options with 'type' property 'auto', 'basic' or 'bearer' (default 'basic')
	 * @return {Request} for chaining
	 * @api public
	 */
	
	Request.prototype.auth = function (user, pass, options) {
	  if ((typeof pass === 'undefined' ? 'undefined' : _typeof(pass)) === 'object' && pass !== null) {
	    // pass is optional and can substitute for options
	    options = pass;
	  }
	  if (!options) {
	    options = {
	      type: 'function' === typeof btoa ? 'basic' : 'auto'
	    };
	  }
	
	  switch (options.type) {
	    case 'basic':
	      this.set('Authorization', 'Basic ' + btoa(user + ':' + pass));
	      break;
	
	    case 'auto':
	      this.username = user;
	      this.password = pass;
	      break;
	
	    case 'bearer':
	      // usage would be .auth(accessToken, { type: 'bearer' })
	      this.set('Authorization', 'Bearer ' + user);
	      break;
	  }
	  return this;
	};
	
	/**
	 * Add query-string `val`.
	 *
	 * Examples:
	 *
	 *   request.get('/shoes')
	 *     .query('size=10')
	 *     .query({ color: 'blue' })
	 *
	 * @param {Object|String} val
	 * @return {Request} for chaining
	 * @api public
	 */
	
	Request.prototype.query = function (val) {
	  if ('string' != typeof val) val = serialize(val);
	  if (val) this._query.push(val);
	  return this;
	};
	
	/**
	 * Queue the given `file` as an attachment to the specified `field`,
	 * with optional `options` (or filename).
	 *
	 * ``` js
	 * request.post('/upload')
	 *   .attach('content', new Blob(['<a id="a"><b id="b">hey!</b></a>'], { type: "text/html"}))
	 *   .end(callback);
	 * ```
	 *
	 * @param {String} field
	 * @param {Blob|File} file
	 * @param {String|Object} options
	 * @return {Request} for chaining
	 * @api public
	 */
	
	Request.prototype.attach = function (field, file, options) {
	  if (file) {
	    if (this._data) {
	      throw Error("superagent can't mix .send() and .attach()");
	    }
	
	    this._getFormData().append(field, file, options || file.name);
	  }
	  return this;
	};
	
	Request.prototype._getFormData = function () {
	  if (!this._formData) {
	    this._formData = new root.FormData();
	  }
	  return this._formData;
	};
	
	/**
	 * Invoke the callback with `err` and `res`
	 * and handle arity check.
	 *
	 * @param {Error} err
	 * @param {Response} res
	 * @api private
	 */
	
	Request.prototype.callback = function (err, res) {
	  // console.log(this._retries, this._maxRetries)
	  if (this._maxRetries && this._retries++ < this._maxRetries && shouldRetry(err, res)) {
	    return this._retry();
	  }
	
	  var fn = this._callback;
	  this.clearTimeout();
	
	  if (err) {
	    if (this._maxRetries) err.retries = this._retries - 1;
	    this.emit('error', err);
	  }
	
	  fn(err, res);
	};
	
	/**
	 * Invoke callback with x-domain error.
	 *
	 * @api private
	 */
	
	Request.prototype.crossDomainError = function () {
	  var err = new Error('Request has been terminated\nPossible causes: the network is offline, Origin is not allowed by Access-Control-Allow-Origin, the page is being unloaded, etc.');
	  err.crossDomain = true;
	
	  err.status = this.status;
	  err.method = this.method;
	  err.url = this.url;
	
	  this.callback(err);
	};
	
	// This only warns, because the request is still likely to work
	Request.prototype.buffer = Request.prototype.ca = Request.prototype.agent = function () {
	  console.warn("This is not supported in browser version of superagent");
	  return this;
	};
	
	// This throws, because it can't send/receive data as expected
	Request.prototype.pipe = Request.prototype.write = function () {
	  throw Error("Streaming is not supported in browser version of superagent");
	};
	
	/**
	 * Compose querystring to append to req.url
	 *
	 * @api private
	 */
	
	Request.prototype._appendQueryString = function () {
	  var query = this._query.join('&');
	  if (query) {
	    this.url += (this.url.indexOf('?') >= 0 ? '&' : '?') + query;
	  }
	
	  if (this._sort) {
	    var index = this.url.indexOf('?');
	    if (index >= 0) {
	      var queryArr = this.url.substring(index + 1).split('&');
	      if (isFunction(this._sort)) {
	        queryArr.sort(this._sort);
	      } else {
	        queryArr.sort();
	      }
	      this.url = this.url.substring(0, index) + '?' + queryArr.join('&');
	    }
	  }
	};
	
	/**
	 * Check if `obj` is a host object,
	 * we don't want to serialize these :)
	 *
	 * @param {Object} obj
	 * @return {Boolean}
	 * @api private
	 */
	Request.prototype._isHost = function _isHost(obj) {
	  // Native objects stringify to [object File], [object Blob], [object FormData], etc.
	  return obj && 'object' === (typeof obj === 'undefined' ? 'undefined' : _typeof(obj)) && !Array.isArray(obj) && Object.prototype.toString.call(obj) !== '[object Object]';
	};
	
	/**
	 * Initiate request, invoking callback `fn(res)`
	 * with an instanceof `Response`.
	 *
	 * @param {Function} fn
	 * @return {Request} for chaining
	 * @api public
	 */
	
	Request.prototype.end = function (fn) {
	  if (this._endCalled) {
	    console.warn("Warning: .end() was called twice. This is not supported in superagent");
	  }
	  this._endCalled = true;
	
	  // store callback
	  this._callback = fn || noop;
	
	  // querystring
	  this._appendQueryString();
	
	  return this._end();
	};
	
	Request.prototype._end = function () {
	  var self = this;
	  var xhr = this.xhr = request.getXHR();
	  var data = this._formData || this._data;
	
	  this._setTimeouts();
	
	  // state change
	  xhr.onreadystatechange = function () {
	    var readyState = xhr.readyState;
	    if (readyState >= 2 && self._responseTimeoutTimer) {
	      clearTimeout(self._responseTimeoutTimer);
	    }
	    if (4 != readyState) {
	      return;
	    }
	
	    // In IE9, reads to any property (e.g. status) off of an aborted XHR will
	    // result in the error "Could not complete the operation due to error c00c023f"
	    var status;
	    try {
	      status = xhr.status;
	    } catch (e) {
	      status = 0;
	    }
	
	    if (!status) {
	      if (self.timedout || self._aborted) return;
	      return self.crossDomainError();
	    }
	    self.emit('end');
	  };
	
	  // progress
	  var handleProgress = function handleProgress(direction, e) {
	    if (e.total > 0) {
	      e.percent = e.loaded / e.total * 100;
	    }
	    e.direction = direction;
	    self.emit('progress', e);
	  };
	  if (this.hasListeners('progress')) {
	    try {
	      xhr.onprogress = handleProgress.bind(null, 'download');
	      if (xhr.upload) {
	        xhr.upload.onprogress = handleProgress.bind(null, 'upload');
	      }
	    } catch (e) {
	      // Accessing xhr.upload fails in IE from a web worker, so just pretend it doesn't exist.
	      // Reported here:
	      // https://connect.microsoft.com/IE/feedback/details/837245/xmlhttprequest-upload-throws-invalid-argument-when-used-from-web-worker-context
	    }
	  }
	
	  // initiate request
	  try {
	    if (this.username && this.password) {
	      xhr.open(this.method, this.url, true, this.username, this.password);
	    } else {
	      xhr.open(this.method, this.url, true);
	    }
	  } catch (err) {
	    // see #1149
	    return this.callback(err);
	  }
	
	  // CORS
	  if (this._withCredentials) xhr.withCredentials = true;
	
	  // body
	  if (!this._formData && 'GET' != this.method && 'HEAD' != this.method && 'string' != typeof data && !this._isHost(data)) {
	    // serialize stuff
	    var contentType = this._header['content-type'];
	    var serialize = this._serializer || request.serialize[contentType ? contentType.split(';')[0] : ''];
	    if (!serialize && isJSON(contentType)) {
	      serialize = request.serialize['application/json'];
	    }
	    if (serialize) data = serialize(data);
	  }
	
	  // set header fields
	  for (var field in this.header) {
	    if (null == this.header[field]) continue;
	
	    if (this.header.hasOwnProperty(field)) xhr.setRequestHeader(field, this.header[field]);
	  }
	
	  if (this._responseType) {
	    xhr.responseType = this._responseType;
	  }
	
	  // send stuff
	  this.emit('request', this);
	
	  // IE11 xhr.send(undefined) sends 'undefined' string as POST payload (instead of nothing)
	  // We need null here if data is undefined
	  xhr.send(typeof data !== 'undefined' ? data : null);
	  return this;
	};
	
	/**
	 * GET `url` with optional callback `fn(res)`.
	 *
	 * @param {String} url
	 * @param {Mixed|Function} [data] or fn
	 * @param {Function} [fn]
	 * @return {Request}
	 * @api public
	 */
	
	request.get = function (url, data, fn) {
	  var req = request('GET', url);
	  if ('function' == typeof data) fn = data, data = null;
	  if (data) req.query(data);
	  if (fn) req.end(fn);
	  return req;
	};
	
	/**
	 * HEAD `url` with optional callback `fn(res)`.
	 *
	 * @param {String} url
	 * @param {Mixed|Function} [data] or fn
	 * @param {Function} [fn]
	 * @return {Request}
	 * @api public
	 */
	
	request.head = function (url, data, fn) {
	  var req = request('HEAD', url);
	  if ('function' == typeof data) fn = data, data = null;
	  if (data) req.send(data);
	  if (fn) req.end(fn);
	  return req;
	};
	
	/**
	 * OPTIONS query to `url` with optional callback `fn(res)`.
	 *
	 * @param {String} url
	 * @param {Mixed|Function} [data] or fn
	 * @param {Function} [fn]
	 * @return {Request}
	 * @api public
	 */
	
	request.options = function (url, data, fn) {
	  var req = request('OPTIONS', url);
	  if ('function' == typeof data) fn = data, data = null;
	  if (data) req.send(data);
	  if (fn) req.end(fn);
	  return req;
	};
	
	/**
	 * DELETE `url` with optional `data` and callback `fn(res)`.
	 *
	 * @param {String} url
	 * @param {Mixed} [data]
	 * @param {Function} [fn]
	 * @return {Request}
	 * @api public
	 */
	
	function del(url, data, fn) {
	  var req = request('DELETE', url);
	  if ('function' == typeof data) fn = data, data = null;
	  if (data) req.send(data);
	  if (fn) req.end(fn);
	  return req;
	};
	
	request['del'] = del;
	request['delete'] = del;
	
	/**
	 * PATCH `url` with optional `data` and callback `fn(res)`.
	 *
	 * @param {String} url
	 * @param {Mixed} [data]
	 * @param {Function} [fn]
	 * @return {Request}
	 * @api public
	 */
	
	request.patch = function (url, data, fn) {
	  var req = request('PATCH', url);
	  if ('function' == typeof data) fn = data, data = null;
	  if (data) req.send(data);
	  if (fn) req.end(fn);
	  return req;
	};
	
	/**
	 * POST `url` with optional `data` and callback `fn(res)`.
	 *
	 * @param {String} url
	 * @param {Mixed} [data]
	 * @param {Function} [fn]
	 * @return {Request}
	 * @api public
	 */
	
	request.post = function (url, data, fn) {
	  var req = request('POST', url);
	  if ('function' == typeof data) fn = data, data = null;
	  if (data) req.send(data);
	  if (fn) req.end(fn);
	  return req;
	};
	
	/**
	 * PUT `url` with optional `data` and callback `fn(res)`.
	 *
	 * @param {String} url
	 * @param {Mixed|Function} [data] or fn
	 * @param {Function} [fn]
	 * @return {Request}
	 * @api public
	 */
	
	request.put = function (url, data, fn) {
	  var req = request('PUT', url);
	  if ('function' == typeof data) fn = data, data = null;
	  if (data) req.send(data);
	  if (fn) req.end(fn);
	  return req;
	};

/***/ }),
/* 261 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	/**
	 * Expose `Emitter`.
	 */
	
	if (true) {
	  module.exports = Emitter;
	}
	
	/**
	 * Initialize a new `Emitter`.
	 *
	 * @api public
	 */
	
	function Emitter(obj) {
	  if (obj) return mixin(obj);
	};
	
	/**
	 * Mixin the emitter properties.
	 *
	 * @param {Object} obj
	 * @return {Object}
	 * @api private
	 */
	
	function mixin(obj) {
	  for (var key in Emitter.prototype) {
	    obj[key] = Emitter.prototype[key];
	  }
	  return obj;
	}
	
	/**
	 * Listen on the given `event` with `fn`.
	 *
	 * @param {String} event
	 * @param {Function} fn
	 * @return {Emitter}
	 * @api public
	 */
	
	Emitter.prototype.on = Emitter.prototype.addEventListener = function (event, fn) {
	  this._callbacks = this._callbacks || {};
	  (this._callbacks['$' + event] = this._callbacks['$' + event] || []).push(fn);
	  return this;
	};
	
	/**
	 * Adds an `event` listener that will be invoked a single
	 * time then automatically removed.
	 *
	 * @param {String} event
	 * @param {Function} fn
	 * @return {Emitter}
	 * @api public
	 */
	
	Emitter.prototype.once = function (event, fn) {
	  function on() {
	    this.off(event, on);
	    fn.apply(this, arguments);
	  }
	
	  on.fn = fn;
	  this.on(event, on);
	  return this;
	};
	
	/**
	 * Remove the given callback for `event` or all
	 * registered callbacks.
	 *
	 * @param {String} event
	 * @param {Function} fn
	 * @return {Emitter}
	 * @api public
	 */
	
	Emitter.prototype.off = Emitter.prototype.removeListener = Emitter.prototype.removeAllListeners = Emitter.prototype.removeEventListener = function (event, fn) {
	  this._callbacks = this._callbacks || {};
	
	  // all
	  if (0 == arguments.length) {
	    this._callbacks = {};
	    return this;
	  }
	
	  // specific event
	  var callbacks = this._callbacks['$' + event];
	  if (!callbacks) return this;
	
	  // remove all handlers
	  if (1 == arguments.length) {
	    delete this._callbacks['$' + event];
	    return this;
	  }
	
	  // remove specific handler
	  var cb;
	  for (var i = 0; i < callbacks.length; i++) {
	    cb = callbacks[i];
	    if (cb === fn || cb.fn === fn) {
	      callbacks.splice(i, 1);
	      break;
	    }
	  }
	  return this;
	};
	
	/**
	 * Emit `event` with the given args.
	 *
	 * @param {String} event
	 * @param {Mixed} ...
	 * @return {Emitter}
	 */
	
	Emitter.prototype.emit = function (event) {
	  this._callbacks = this._callbacks || {};
	  var args = [].slice.call(arguments, 1),
	      callbacks = this._callbacks['$' + event];
	
	  if (callbacks) {
	    callbacks = callbacks.slice(0);
	    for (var i = 0, len = callbacks.length; i < len; ++i) {
	      callbacks[i].apply(this, args);
	    }
	  }
	
	  return this;
	};
	
	/**
	 * Return array of callbacks for `event`.
	 *
	 * @param {String} event
	 * @return {Array}
	 * @api public
	 */
	
	Emitter.prototype.listeners = function (event) {
	  this._callbacks = this._callbacks || {};
	  return this._callbacks['$' + event] || [];
	};
	
	/**
	 * Check if this emitter has `event` handlers.
	 *
	 * @param {String} event
	 * @return {Boolean}
	 * @api public
	 */
	
	Emitter.prototype.hasListeners = function (event) {
	  return !!this.listeners(event).length;
	};

/***/ }),
/* 262 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
	
	/**
	 * Module of mixed-in functions shared between node and client code
	 */
	var isObject = __webpack_require__(263);
	
	/**
	 * Expose `RequestBase`.
	 */
	
	module.exports = RequestBase;
	
	/**
	 * Initialize a new `RequestBase`.
	 *
	 * @api public
	 */
	
	function RequestBase(obj) {
	  if (obj) return mixin(obj);
	}
	
	/**
	 * Mixin the prototype properties.
	 *
	 * @param {Object} obj
	 * @return {Object}
	 * @api private
	 */
	
	function mixin(obj) {
	  for (var key in RequestBase.prototype) {
	    obj[key] = RequestBase.prototype[key];
	  }
	  return obj;
	}
	
	/**
	 * Clear previous timeout.
	 *
	 * @return {Request} for chaining
	 * @api public
	 */
	
	RequestBase.prototype.clearTimeout = function _clearTimeout() {
	  clearTimeout(this._timer);
	  clearTimeout(this._responseTimeoutTimer);
	  delete this._timer;
	  delete this._responseTimeoutTimer;
	  return this;
	};
	
	/**
	 * Override default response body parser
	 *
	 * This function will be called to convert incoming data into request.body
	 *
	 * @param {Function}
	 * @api public
	 */
	
	RequestBase.prototype.parse = function parse(fn) {
	  this._parser = fn;
	  return this;
	};
	
	/**
	 * Set format of binary response body.
	 * In browser valid formats are 'blob' and 'arraybuffer',
	 * which return Blob and ArrayBuffer, respectively.
	 *
	 * In Node all values result in Buffer.
	 *
	 * Examples:
	 *
	 *      req.get('/')
	 *        .responseType('blob')
	 *        .end(callback);
	 *
	 * @param {String} val
	 * @return {Request} for chaining
	 * @api public
	 */
	
	RequestBase.prototype.responseType = function (val) {
	  this._responseType = val;
	  return this;
	};
	
	/**
	 * Override default request body serializer
	 *
	 * This function will be called to convert data set via .send or .attach into payload to send
	 *
	 * @param {Function}
	 * @api public
	 */
	
	RequestBase.prototype.serialize = function serialize(fn) {
	  this._serializer = fn;
	  return this;
	};
	
	/**
	 * Set timeouts.
	 *
	 * - response timeout is time between sending request and receiving the first byte of the response. Includes DNS and connection time.
	 * - deadline is the time from start of the request to receiving response body in full. If the deadline is too short large files may not load at all on slow connections.
	 *
	 * Value of 0 or false means no timeout.
	 *
	 * @param {Number|Object} ms or {response, read, deadline}
	 * @return {Request} for chaining
	 * @api public
	 */
	
	RequestBase.prototype.timeout = function timeout(options) {
	  if (!options || 'object' !== (typeof options === 'undefined' ? 'undefined' : _typeof(options))) {
	    this._timeout = options;
	    this._responseTimeout = 0;
	    return this;
	  }
	
	  for (var option in options) {
	    switch (option) {
	      case 'deadline':
	        this._timeout = options.deadline;
	        break;
	      case 'response':
	        this._responseTimeout = options.response;
	        break;
	      default:
	        console.warn("Unknown timeout option", option);
	    }
	  }
	  return this;
	};
	
	/**
	 * Set number of retry attempts on error.
	 *
	 * Failed requests will be retried 'count' times if timeout or err.code >= 500.
	 *
	 * @param {Number} count
	 * @return {Request} for chaining
	 * @api public
	 */
	
	RequestBase.prototype.retry = function retry(count) {
	  // Default to 1 if no count passed or true
	  if (arguments.length === 0 || count === true) count = 1;
	  if (count <= 0) count = 0;
	  this._maxRetries = count;
	  this._retries = 0;
	  return this;
	};
	
	/**
	 * Retry request
	 *
	 * @return {Request} for chaining
	 * @api private
	 */
	
	RequestBase.prototype._retry = function () {
	  this.clearTimeout();
	
	  // node
	  if (this.req) {
	    this.req = null;
	    this.req = this.request();
	  }
	
	  this._aborted = false;
	  this.timedout = false;
	
	  return this._end();
	};
	
	/**
	 * Promise support
	 *
	 * @param {Function} resolve
	 * @param {Function} [reject]
	 * @return {Request}
	 */
	
	RequestBase.prototype.then = function then(resolve, reject) {
	  if (!this._fullfilledPromise) {
	    var self = this;
	    if (this._endCalled) {
	      console.warn("Warning: superagent request was sent twice, because both .end() and .then() were called. Never call .end() if you use promises");
	    }
	    this._fullfilledPromise = new Promise(function (innerResolve, innerReject) {
	      self.end(function (err, res) {
	        if (err) innerReject(err);else innerResolve(res);
	      });
	    });
	  }
	  return this._fullfilledPromise.then(resolve, reject);
	};
	
	RequestBase.prototype.catch = function (cb) {
	  return this.then(undefined, cb);
	};
	
	/**
	 * Allow for extension
	 */
	
	RequestBase.prototype.use = function use(fn) {
	  fn(this);
	  return this;
	};
	
	RequestBase.prototype.ok = function (cb) {
	  if ('function' !== typeof cb) throw Error("Callback required");
	  this._okCallback = cb;
	  return this;
	};
	
	RequestBase.prototype._isResponseOK = function (res) {
	  if (!res) {
	    return false;
	  }
	
	  if (this._okCallback) {
	    return this._okCallback(res);
	  }
	
	  return res.status >= 200 && res.status < 300;
	};
	
	/**
	 * Get request header `field`.
	 * Case-insensitive.
	 *
	 * @param {String} field
	 * @return {String}
	 * @api public
	 */
	
	RequestBase.prototype.get = function (field) {
	  return this._header[field.toLowerCase()];
	};
	
	/**
	 * Get case-insensitive header `field` value.
	 * This is a deprecated internal API. Use `.get(field)` instead.
	 *
	 * (getHeader is no longer used internally by the superagent code base)
	 *
	 * @param {String} field
	 * @return {String}
	 * @api private
	 * @deprecated
	 */
	
	RequestBase.prototype.getHeader = RequestBase.prototype.get;
	
	/**
	 * Set header `field` to `val`, or multiple fields with one object.
	 * Case-insensitive.
	 *
	 * Examples:
	 *
	 *      req.get('/')
	 *        .set('Accept', 'application/json')
	 *        .set('X-API-Key', 'foobar')
	 *        .end(callback);
	 *
	 *      req.get('/')
	 *        .set({ Accept: 'application/json', 'X-API-Key': 'foobar' })
	 *        .end(callback);
	 *
	 * @param {String|Object} field
	 * @param {String} val
	 * @return {Request} for chaining
	 * @api public
	 */
	
	RequestBase.prototype.set = function (field, val) {
	  if (isObject(field)) {
	    for (var key in field) {
	      this.set(key, field[key]);
	    }
	    return this;
	  }
	  this._header[field.toLowerCase()] = val;
	  this.header[field] = val;
	  return this;
	};
	
	/**
	 * Remove header `field`.
	 * Case-insensitive.
	 *
	 * Example:
	 *
	 *      req.get('/')
	 *        .unset('User-Agent')
	 *        .end(callback);
	 *
	 * @param {String} field
	 */
	RequestBase.prototype.unset = function (field) {
	  delete this._header[field.toLowerCase()];
	  delete this.header[field];
	  return this;
	};
	
	/**
	 * Write the field `name` and `val`, or multiple fields with one object
	 * for "multipart/form-data" request bodies.
	 *
	 * ``` js
	 * request.post('/upload')
	 *   .field('foo', 'bar')
	 *   .end(callback);
	 *
	 * request.post('/upload')
	 *   .field({ foo: 'bar', baz: 'qux' })
	 *   .end(callback);
	 * ```
	 *
	 * @param {String|Object} name
	 * @param {String|Blob|File|Buffer|fs.ReadStream} val
	 * @return {Request} for chaining
	 * @api public
	 */
	RequestBase.prototype.field = function (name, val) {
	
	  // name should be either a string or an object.
	  if (null === name || undefined === name) {
	    throw new Error('.field(name, val) name can not be empty');
	  }
	
	  if (this._data) {
	    console.error(".field() can't be used if .send() is used. Please use only .send() or only .field() & .attach()");
	  }
	
	  if (isObject(name)) {
	    for (var key in name) {
	      this.field(key, name[key]);
	    }
	    return this;
	  }
	
	  if (Array.isArray(val)) {
	    for (var i in val) {
	      this.field(name, val[i]);
	    }
	    return this;
	  }
	
	  // val should be defined now
	  if (null === val || undefined === val) {
	    throw new Error('.field(name, val) val can not be empty');
	  }
	  if ('boolean' === typeof val) {
	    val = '' + val;
	  }
	  this._getFormData().append(name, val);
	  return this;
	};
	
	/**
	 * Abort the request, and clear potential timeout.
	 *
	 * @return {Request}
	 * @api public
	 */
	RequestBase.prototype.abort = function () {
	  if (this._aborted) {
	    return this;
	  }
	  this._aborted = true;
	  this.xhr && this.xhr.abort(); // browser
	  this.req && this.req.abort(); // node
	  this.clearTimeout();
	  this.emit('abort');
	  return this;
	};
	
	/**
	 * Enable transmission of cookies with x-domain requests.
	 *
	 * Note that for this to work the origin must not be
	 * using "Access-Control-Allow-Origin" with a wildcard,
	 * and also must set "Access-Control-Allow-Credentials"
	 * to "true".
	 *
	 * @api public
	 */
	
	RequestBase.prototype.withCredentials = function (on) {
	  // This is browser-only functionality. Node side is no-op.
	  if (on == undefined) on = true;
	  this._withCredentials = on;
	  return this;
	};
	
	/**
	 * Set the max redirects to `n`. Does noting in browser XHR implementation.
	 *
	 * @param {Number} n
	 * @return {Request} for chaining
	 * @api public
	 */
	
	RequestBase.prototype.redirects = function (n) {
	  this._maxRedirects = n;
	  return this;
	};
	
	/**
	 * Convert to a plain javascript object (not JSON string) of scalar properties.
	 * Note as this method is designed to return a useful non-this value,
	 * it cannot be chained.
	 *
	 * @return {Object} describing method, url, and data of this request
	 * @api public
	 */
	
	RequestBase.prototype.toJSON = function () {
	  return {
	    method: this.method,
	    url: this.url,
	    data: this._data,
	    headers: this._header
	  };
	};
	
	/**
	 * Send `data` as the request body, defaulting the `.type()` to "json" when
	 * an object is given.
	 *
	 * Examples:
	 *
	 *       // manual json
	 *       request.post('/user')
	 *         .type('json')
	 *         .send('{"name":"tj"}')
	 *         .end(callback)
	 *
	 *       // auto json
	 *       request.post('/user')
	 *         .send({ name: 'tj' })
	 *         .end(callback)
	 *
	 *       // manual x-www-form-urlencoded
	 *       request.post('/user')
	 *         .type('form')
	 *         .send('name=tj')
	 *         .end(callback)
	 *
	 *       // auto x-www-form-urlencoded
	 *       request.post('/user')
	 *         .type('form')
	 *         .send({ name: 'tj' })
	 *         .end(callback)
	 *
	 *       // defaults to x-www-form-urlencoded
	 *      request.post('/user')
	 *        .send('name=tobi')
	 *        .send('species=ferret')
	 *        .end(callback)
	 *
	 * @param {String|Object} data
	 * @return {Request} for chaining
	 * @api public
	 */
	
	RequestBase.prototype.send = function (data) {
	  var isObj = isObject(data);
	  var type = this._header['content-type'];
	
	  if (this._formData) {
	    console.error(".send() can't be used if .attach() or .field() is used. Please use only .send() or only .field() & .attach()");
	  }
	
	  if (isObj && !this._data) {
	    if (Array.isArray(data)) {
	      this._data = [];
	    } else if (!this._isHost(data)) {
	      this._data = {};
	    }
	  } else if (data && this._data && this._isHost(this._data)) {
	    throw Error("Can't merge these send calls");
	  }
	
	  // merge
	  if (isObj && isObject(this._data)) {
	    for (var key in data) {
	      this._data[key] = data[key];
	    }
	  } else if ('string' == typeof data) {
	    // default to x-www-form-urlencoded
	    if (!type) this.type('form');
	    type = this._header['content-type'];
	    if ('application/x-www-form-urlencoded' == type) {
	      this._data = this._data ? this._data + '&' + data : data;
	    } else {
	      this._data = (this._data || '') + data;
	    }
	  } else {
	    this._data = data;
	  }
	
	  if (!isObj || this._isHost(data)) {
	    return this;
	  }
	
	  // default to json
	  if (!type) this.type('json');
	  return this;
	};
	
	/**
	 * Sort `querystring` by the sort function
	 *
	 *
	 * Examples:
	 *
	 *       // default order
	 *       request.get('/user')
	 *         .query('name=Nick')
	 *         .query('search=Manny')
	 *         .sortQuery()
	 *         .end(callback)
	 *
	 *       // customized sort function
	 *       request.get('/user')
	 *         .query('name=Nick')
	 *         .query('search=Manny')
	 *         .sortQuery(function(a, b){
	 *           return a.length - b.length;
	 *         })
	 *         .end(callback)
	 *
	 *
	 * @param {Function} sort
	 * @return {Request} for chaining
	 * @api public
	 */
	
	RequestBase.prototype.sortQuery = function (sort) {
	  // _sort default to true but otherwise can be a function or boolean
	  this._sort = typeof sort === 'undefined' ? true : sort;
	  return this;
	};
	
	/**
	 * Invoke callback with timeout error.
	 *
	 * @api private
	 */
	
	RequestBase.prototype._timeoutError = function (reason, timeout, errno) {
	  if (this._aborted) {
	    return;
	  }
	  var err = new Error(reason + timeout + 'ms exceeded');
	  err.timeout = timeout;
	  err.code = 'ECONNABORTED';
	  err.errno = errno;
	  this.timedout = true;
	  this.abort();
	  this.callback(err);
	};
	
	RequestBase.prototype._setTimeouts = function () {
	  var self = this;
	
	  // deadline
	  if (this._timeout && !this._timer) {
	    this._timer = setTimeout(function () {
	      self._timeoutError('Timeout of ', self._timeout, 'ETIME');
	    }, this._timeout);
	  }
	  // response timeout
	  if (this._responseTimeout && !this._responseTimeoutTimer) {
	    this._responseTimeoutTimer = setTimeout(function () {
	      self._timeoutError('Response timeout of ', self._responseTimeout, 'ETIMEDOUT');
	    }, this._responseTimeout);
	  }
	};

/***/ }),
/* 263 */
/***/ (function(module, exports) {

	'use strict';
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
	
	/**
	 * Check if `obj` is an object.
	 *
	 * @param {Object} obj
	 * @return {Boolean}
	 * @api private
	 */
	
	function isObject(obj) {
	  return null !== obj && 'object' === (typeof obj === 'undefined' ? 'undefined' : _typeof(obj));
	}
	
	module.exports = isObject;

/***/ }),
/* 264 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	/**
	 * Check if `fn` is a function.
	 *
	 * @param {Function} fn
	 * @return {Boolean}
	 * @api private
	 */
	var isObject = __webpack_require__(263);
	
	function isFunction(fn) {
	  var tag = isObject(fn) ? Object.prototype.toString.call(fn) : '';
	  return tag === '[object Function]';
	}
	
	module.exports = isFunction;

/***/ }),
/* 265 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	/**
	 * Module dependencies.
	 */
	
	var utils = __webpack_require__(266);
	
	/**
	 * Expose `ResponseBase`.
	 */
	
	module.exports = ResponseBase;
	
	/**
	 * Initialize a new `ResponseBase`.
	 *
	 * @api public
	 */
	
	function ResponseBase(obj) {
	  if (obj) return mixin(obj);
	}
	
	/**
	 * Mixin the prototype properties.
	 *
	 * @param {Object} obj
	 * @return {Object}
	 * @api private
	 */
	
	function mixin(obj) {
	  for (var key in ResponseBase.prototype) {
	    obj[key] = ResponseBase.prototype[key];
	  }
	  return obj;
	}
	
	/**
	 * Get case-insensitive `field` value.
	 *
	 * @param {String} field
	 * @return {String}
	 * @api public
	 */
	
	ResponseBase.prototype.get = function (field) {
	  return this.header[field.toLowerCase()];
	};
	
	/**
	 * Set header related properties:
	 *
	 *   - `.type` the content type without params
	 *
	 * A response of "Content-Type: text/plain; charset=utf-8"
	 * will provide you with a `.type` of "text/plain".
	 *
	 * @param {Object} header
	 * @api private
	 */
	
	ResponseBase.prototype._setHeaderProperties = function (header) {
	  // TODO: moar!
	  // TODO: make this a util
	
	  // content-type
	  var ct = header['content-type'] || '';
	  this.type = utils.type(ct);
	
	  // params
	  var params = utils.params(ct);
	  for (var key in params) {
	    this[key] = params[key];
	  }this.links = {};
	
	  // links
	  try {
	    if (header.link) {
	      this.links = utils.parseLinks(header.link);
	    }
	  } catch (err) {
	    // ignore
	  }
	};
	
	/**
	 * Set flags such as `.ok` based on `status`.
	 *
	 * For example a 2xx response will give you a `.ok` of __true__
	 * whereas 5xx will be __false__ and `.error` will be __true__. The
	 * `.clientError` and `.serverError` are also available to be more
	 * specific, and `.statusType` is the class of error ranging from 1..5
	 * sometimes useful for mapping respond colors etc.
	 *
	 * "sugar" properties are also defined for common cases. Currently providing:
	 *
	 *   - .noContent
	 *   - .badRequest
	 *   - .unauthorized
	 *   - .notAcceptable
	 *   - .notFound
	 *
	 * @param {Number} status
	 * @api private
	 */
	
	ResponseBase.prototype._setStatusProperties = function (status) {
	  var type = status / 100 | 0;
	
	  // status / class
	  this.status = this.statusCode = status;
	  this.statusType = type;
	
	  // basics
	  this.info = 1 == type;
	  this.ok = 2 == type;
	  this.redirect = 3 == type;
	  this.clientError = 4 == type;
	  this.serverError = 5 == type;
	  this.error = 4 == type || 5 == type ? this.toError() : false;
	
	  // sugar
	  this.accepted = 202 == status;
	  this.noContent = 204 == status;
	  this.badRequest = 400 == status;
	  this.unauthorized = 401 == status;
	  this.notAcceptable = 406 == status;
	  this.forbidden = 403 == status;
	  this.notFound = 404 == status;
	};

/***/ }),
/* 266 */
/***/ (function(module, exports) {

	'use strict';
	
	/**
	 * Return the mime type for the given `str`.
	 *
	 * @param {String} str
	 * @return {String}
	 * @api private
	 */
	
	exports.type = function (str) {
	  return str.split(/ *; */).shift();
	};
	
	/**
	 * Return header field parameters.
	 *
	 * @param {String} str
	 * @return {Object}
	 * @api private
	 */
	
	exports.params = function (str) {
	  return str.split(/ *; */).reduce(function (obj, str) {
	    var parts = str.split(/ *= */);
	    var key = parts.shift();
	    var val = parts.shift();
	
	    if (key && val) obj[key] = val;
	    return obj;
	  }, {});
	};
	
	/**
	 * Parse Link header fields.
	 *
	 * @param {String} str
	 * @return {Object}
	 * @api private
	 */
	
	exports.parseLinks = function (str) {
	  return str.split(/ *, */).reduce(function (obj, str) {
	    var parts = str.split(/ *; */);
	    var url = parts[0].slice(1, -1);
	    var rel = parts[1].split(/ *= */)[1].slice(1, -1);
	    obj[rel] = url;
	    return obj;
	  }, {});
	};
	
	/**
	 * Strip content related fields from `header`.
	 *
	 * @param {Object} header
	 * @return {Object} header
	 * @api private
	 */
	
	exports.cleanHeader = function (header, shouldStripCookie) {
	  delete header['content-type'];
	  delete header['content-length'];
	  delete header['transfer-encoding'];
	  delete header['host'];
	  if (shouldStripCookie) {
	    delete header['cookie'];
	  }
	  return header;
	};

/***/ }),
/* 267 */
/***/ (function(module, exports) {

	'use strict';
	
	var ERROR_CODES = ['ECONNRESET', 'ETIMEDOUT', 'EADDRINFO', 'ESOCKETTIMEDOUT'];
	
	/**
	 * Determine if a request should be retried.
	 * (Borrowed from segmentio/superagent-retry)
	 *
	 * @param {Error} err
	 * @param {Response} [res]
	 * @returns {Boolean}
	 */
	module.exports = function shouldRetry(err, res) {
	  if (err && err.code && ~ERROR_CODES.indexOf(err.code)) return true;
	  if (res && res.status && res.status >= 500) return true;
	  // Superagent timeout
	  if (err && 'timeout' in err && err.code == 'ECONNABORTED') return true;
	  if (err && 'crossDomain' in err) return true;
	  return false;
	};

/***/ }),
/* 268 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(__dirname, process) {'use strict';
	
	var binary = __webpack_require__(269);
	var path = __webpack_require__(270);
	var binding_path = binary.find(path.resolve(path.join(__dirname, './package.json')));
	var bindings = __webpack_require__(624)(binding_path);
	
	var crypto = __webpack_require__(392);
	
	var promises = __webpack_require__(635);
	
	/// generate a salt (sync)
	/// @param {Number} [rounds] number of rounds (default 10)
	/// @return {String} salt
	module.exports.genSaltSync = function genSaltSync(rounds) {
	    // default 10 rounds
	    if (!rounds) {
	        rounds = 10;
	    } else if (typeof rounds !== 'number') {
	        throw new Error('rounds must be a number');
	    }
	
	    return bindings.gen_salt_sync(rounds, crypto.randomBytes(16));
	};
	
	/// generate a salt
	/// @param {Number} [rounds] number of rounds (default 10)
	/// @param {Function} cb callback(err, salt)
	module.exports.genSalt = function genSalt(rounds, ignore, cb) {
	    // if callback is first argument, then use defaults for others
	    if (typeof arguments[0] === 'function') {
	        // have to set callback first otherwise arguments are overriden
	        cb = arguments[0];
	        rounds = 10;
	        // callback is second argument
	    } else if (typeof arguments[1] === 'function') {
	        // have to set callback first otherwise arguments are overriden
	        cb = arguments[1];
	    }
	
	    if (!cb) {
	        return promises.promise(genSalt, this, [rounds, ignore]);
	    }
	
	    // default 10 rounds
	    if (!rounds) {
	        rounds = 10;
	    } else if (typeof rounds !== 'number') {
	        // callback error asynchronously
	        return process.nextTick(function () {
	            cb(new Error('rounds must be a number'));
	        });
	    }
	
	    crypto.randomBytes(16, function (error, randomBytes) {
	        if (error) {
	            cb(error);
	            return;
	        }
	
	        bindings.gen_salt(rounds, randomBytes, cb);
	    });
	};
	
	/// hash data using a salt
	/// @param {String} data the data to encrypt
	/// @param {String} salt the salt to use when hashing
	/// @return {String} hash
	module.exports.hashSync = function hashSync(data, salt) {
	    if (data == null || salt == null) {
	        throw new Error('data and salt arguments required');
	    }
	
	    if (typeof data !== 'string' || typeof salt !== 'string' && typeof salt !== 'number') {
	        throw new Error('data must be a string and salt must either be a salt string or a number of rounds');
	    }
	
	    if (typeof salt === 'number') {
	        salt = module.exports.genSaltSync(salt);
	    }
	
	    return bindings.encrypt_sync(data, salt);
	};
	
	/// hash data using a salt
	/// @param {String} data the data to encrypt
	/// @param {String} salt the salt to use when hashing
	/// @param {Function} cb callback(err, hash)
	module.exports.hash = function hash(data, salt, cb) {
	    if (typeof data === 'function') {
	        return process.nextTick(function () {
	            data(new Error('data must be a string and salt must either be a salt string or a number of rounds'));
	        });
	    }
	
	    if (typeof salt === 'function') {
	        return process.nextTick(function () {
	            salt(new Error('data must be a string and salt must either be a salt string or a number of rounds'));
	        });
	    }
	
	    // cb exists but is not a function
	    // return a rejecting promise
	    if (cb && typeof cb !== 'function') {
	        return promises.reject(new Error('cb must be a function or null to return a Promise'));
	    }
	
	    if (!cb) {
	        return promises.promise(hash, this, [data, salt]);
	    }
	
	    if (data == null || salt == null) {
	        return process.nextTick(function () {
	            cb(new Error('data and salt arguments required'));
	        });
	    }
	
	    if (typeof data !== 'string' || typeof salt !== 'string' && typeof salt !== 'number') {
	        return process.nextTick(function () {
	            cb(new Error('data must be a string and salt must either be a salt string or a number of rounds'));
	        });
	    }
	
	    if (typeof salt === 'number') {
	        return module.exports.genSalt(salt, function (err, salt) {
	            return bindings.encrypt(data, salt, cb);
	        });
	    }
	
	    return bindings.encrypt(data, salt, cb);
	};
	
	/// compare raw data to hash
	/// @param {String} data the data to hash and compare
	/// @param {String} hash expected hash
	/// @return {bool} true if hashed data matches hash
	module.exports.compareSync = function compareSync(data, hash) {
	    if (data == null || hash == null) {
	        throw new Error('data and hash arguments required');
	    }
	
	    if (typeof data !== 'string' || typeof hash !== 'string') {
	        throw new Error('data and hash must be strings');
	    }
	
	    return bindings.compare_sync(data, hash);
	};
	
	/// compare raw data to hash
	/// @param {String} data the data to hash and compare
	/// @param {String} hash expected hash
	/// @param {Function} cb callback(err, matched) - matched is true if hashed data matches hash
	module.exports.compare = function compare(data, hash, cb) {
	    if (typeof data === 'function') {
	        return process.nextTick(function () {
	            data(new Error('data and hash arguments required'));
	        });
	    }
	
	    if (typeof hash === 'function') {
	        return process.nextTick(function () {
	            hash(new Error('data and hash arguments required'));
	        });
	    }
	
	    // cb exists but is not a function
	    // return a rejecting promise
	    if (cb && typeof cb !== 'function') {
	        return promises.reject(new Error('cb must be a function or null to return a Promise'));
	    }
	
	    if (!cb) {
	        return promises.promise(compare, this, [data, hash]);
	    }
	
	    if (data == null || hash == null) {
	        return process.nextTick(function () {
	            cb(new Error('data and hash arguments required'));
	        });
	    }
	
	    if (typeof data !== 'string' || typeof hash !== 'string') {
	        return process.nextTick(function () {
	            cb(new Error('data and hash must be strings'));
	        });
	    }
	
	    return bindings.compare(data, hash, cb);
	};
	
	/// @param {String} hash extract rounds from this hash
	/// @return {Number} the number of rounds used to encrypt a given hash
	module.exports.getRounds = function getRounds(hash) {
	    if (hash == null) {
	        throw new Error('hash argument required');
	    }
	
	    if (typeof hash !== 'string') {
	        throw new Error('hash must be a string');
	    }
	
	    return bindings.get_rounds(hash);
	};
	/* WEBPACK VAR INJECTION */}.call(exports, "/", __webpack_require__(3)))

/***/ }),
/* 269 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process, __dirname) {"use strict";
	
	/**
	 * Module exports.
	 */
	
	module.exports = exports;
	
	/**
	 * Module dependencies.
	 */
	
	var path = __webpack_require__(270);
	var nopt = __webpack_require__(274);
	var log = __webpack_require__(310);
	log.disableProgress();
	
	var EE = __webpack_require__(283).EventEmitter;
	var inherits = __webpack_require__(271).inherits;
	var commands = ['clean', 'install', 'reinstall', 'build', 'rebuild', 'package', 'testpackage', 'publish', 'unpublish', 'info', 'testbinary', 'reveal', 'configure'];
	var aliases = {};
	
	// differentiate node-pre-gyp's logs from npm's
	log.heading = 'node-pre-gyp';
	
	exports.find = __webpack_require__(347).find;
	
	function Run() {
	  var self = this;
	
	  this.commands = {};
	
	  commands.forEach(function (command) {
	    self.commands[command] = function (argv, callback) {
	      log.verbose('command', command, argv);
	      return __webpack_require__(591)("./" + command)(self, argv, callback);
	    };
	  });
	}
	inherits(Run, EE);
	exports.Run = Run;
	var proto = Run.prototype;
	
	/**
	 * Export the contents of the package.json.
	 */
	
	proto.package = __webpack_require__(!(function webpackMissingModule() { var e = new Error("Cannot find module \"../package\""); e.code = 'MODULE_NOT_FOUND'; throw e; }()));
	
	/**
	 * nopt configuration definitions
	 */
	
	proto.configDefs = {
	  help: Boolean, // everywhere
	  arch: String, // 'configure'
	  debug: Boolean, // 'build'
	  directory: String, // bin
	  proxy: String, // 'install'
	  loglevel: String };
	
	/**
	 * nopt shorthands
	 */
	
	proto.shorthands = {
	  release: '--no-debug',
	  C: '--directory',
	  debug: '--debug',
	  j: '--jobs',
	  silent: '--loglevel=silent',
	  silly: '--loglevel=silly',
	  verbose: '--loglevel=verbose'
	};
	
	/**
	 * expose the command aliases for the bin file to use.
	 */
	
	proto.aliases = aliases;
	
	/**
	 * Parses the given argv array and sets the 'opts',
	 * 'argv' and 'command' properties.
	 */
	
	proto.parseArgv = function parseOpts(argv) {
	  this.opts = nopt(this.configDefs, this.shorthands, argv);
	  this.argv = this.opts.argv.remain.slice();
	  var commands = this.todo = [];
	
	  // create a copy of the argv array with aliases mapped
	  argv = this.argv.map(function (arg) {
	    // is this an alias?
	    if (arg in this.aliases) {
	      arg = this.aliases[arg];
	    }
	    return arg;
	  }, this);
	
	  // process the mapped args into "command" objects ("name" and "args" props)
	  argv.slice().forEach(function (arg) {
	    if (arg in this.commands) {
	      var args = argv.splice(0, argv.indexOf(arg));
	      argv.shift();
	      if (commands.length > 0) {
	        commands[commands.length - 1].args = args;
	      }
	      commands.push({ name: arg, args: [] });
	    }
	  }, this);
	  if (commands.length > 0) {
	    commands[commands.length - 1].args = argv.splice(0);
	  }
	
	  // support for inheriting config env variables from npm
	  var npm_config_prefix = 'npm_config_';
	  Object.keys(process.env).forEach(function (name) {
	    if (name.indexOf(npm_config_prefix) !== 0) return;
	    var val = process.env[name];
	    if (name === npm_config_prefix + 'loglevel') {
	      log.level = val;
	    } else {
	      // add the user-defined options to the config
	      name = name.substring(npm_config_prefix.length);
	      // avoid npm argv clobber already present args
	      // which avoids problem of 'npm test' calling
	      // script that runs unique npm install commands
	      if (name === 'argv') {
	        if (this.opts.argv && this.opts.argv.remain && this.opts.argv.remain.length) {
	          // do nothing
	        } else {
	          this.opts[name] = val;
	        }
	      } else {
	        this.opts[name] = val;
	      }
	    }
	  }, this);
	
	  if (this.opts.loglevel) {
	    log.level = this.opts.loglevel;
	  }
	  log.resume();
	};
	
	/**
	 * Returns the usage instructions for node-pre-gyp.
	 */
	
	proto.usage = function usage() {
	  var str = ['', '  Usage: node-pre-gyp <command> [options]', '', '  where <command> is one of:', commands.map(function (c) {
	    return '    - ' + c + ' - ' + __webpack_require__(591)("./" + c).usage;
	  }).join('\n'), '', 'node-pre-gyp@' + this.version + '  ' + path.resolve(__dirname, '..'), 'node@' + process.versions.node].join('\n');
	  return str;
	};
	
	/**
	 * Version number getter.
	 */
	
	Object.defineProperty(proto, 'version', {
	  get: function get() {
	    return this.package.version;
	  },
	  enumerable: true
	});
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3), "/"))

/***/ }),
/* 270 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.
	
	'use strict';
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
	
	var isWindows = process.platform === 'win32';
	var util = __webpack_require__(271);
	
	// resolves . and .. elements in a path array with directory names there
	// must be no slashes or device names (c:\) in the array
	// (so also no leading and trailing slashes - it does not distinguish
	// relative and absolute paths)
	function normalizeArray(parts, allowAboveRoot) {
	  var res = [];
	  for (var i = 0; i < parts.length; i++) {
	    var p = parts[i];
	
	    // ignore empty parts
	    if (!p || p === '.') continue;
	
	    if (p === '..') {
	      if (res.length && res[res.length - 1] !== '..') {
	        res.pop();
	      } else if (allowAboveRoot) {
	        res.push('..');
	      }
	    } else {
	      res.push(p);
	    }
	  }
	
	  return res;
	}
	
	// returns an array with empty elements removed from either end of the input
	// array or the original array if no elements need to be removed
	function trimArray(arr) {
	  var lastIndex = arr.length - 1;
	  var start = 0;
	  for (; start <= lastIndex; start++) {
	    if (arr[start]) break;
	  }
	
	  var end = lastIndex;
	  for (; end >= 0; end--) {
	    if (arr[end]) break;
	  }
	
	  if (start === 0 && end === lastIndex) return arr;
	  if (start > end) return [];
	  return arr.slice(start, end + 1);
	}
	
	// Regex to split a windows path into three parts: [*, device, slash,
	// tail] windows-only
	var splitDeviceRe = /^([a-zA-Z]:|[\\\/]{2}[^\\\/]+[\\\/]+[^\\\/]+)?([\\\/])?([\s\S]*?)$/;
	
	// Regex to split the tail part of the above into [*, dir, basename, ext]
	var splitTailRe = /^([\s\S]*?)((?:\.{1,2}|[^\\\/]+?|)(\.[^.\/\\]*|))(?:[\\\/]*)$/;
	
	var win32 = {};
	
	// Function to split a filename into [root, dir, basename, ext]
	function win32SplitPath(filename) {
	  // Separate device+slash from tail
	  var result = splitDeviceRe.exec(filename),
	      device = (result[1] || '') + (result[2] || ''),
	      tail = result[3] || '';
	  // Split the tail into dir, basename and extension
	  var result2 = splitTailRe.exec(tail),
	      dir = result2[1],
	      basename = result2[2],
	      ext = result2[3];
	  return [device, dir, basename, ext];
	}
	
	function win32StatPath(path) {
	  var result = splitDeviceRe.exec(path),
	      device = result[1] || '',
	      isUnc = !!device && device[1] !== ':';
	  return {
	    device: device,
	    isUnc: isUnc,
	    isAbsolute: isUnc || !!result[2], // UNC paths are always absolute
	    tail: result[3]
	  };
	}
	
	function normalizeUNCRoot(device) {
	  return '\\\\' + device.replace(/^[\\\/]+/, '').replace(/[\\\/]+/g, '\\');
	}
	
	// path.resolve([from ...], to)
	win32.resolve = function () {
	  var resolvedDevice = '',
	      resolvedTail = '',
	      resolvedAbsolute = false;
	
	  for (var i = arguments.length - 1; i >= -1; i--) {
	    var path;
	    if (i >= 0) {
	      path = arguments[i];
	    } else if (!resolvedDevice) {
	      path = process.cwd();
	    } else {
	      // Windows has the concept of drive-specific current working
	      // directories. If we've resolved a drive letter but not yet an
	      // absolute path, get cwd for that drive. We're sure the device is not
	      // an unc path at this points, because unc paths are always absolute.
	      path = process.env['=' + resolvedDevice];
	      // Verify that a drive-local cwd was found and that it actually points
	      // to our drive. If not, default to the drive's root.
	      if (!path || path.substr(0, 3).toLowerCase() !== resolvedDevice.toLowerCase() + '\\') {
	        path = resolvedDevice + '\\';
	      }
	    }
	
	    // Skip empty and invalid entries
	    if (!util.isString(path)) {
	      throw new TypeError('Arguments to path.resolve must be strings');
	    } else if (!path) {
	      continue;
	    }
	
	    var result = win32StatPath(path),
	        device = result.device,
	        isUnc = result.isUnc,
	        isAbsolute = result.isAbsolute,
	        tail = result.tail;
	
	    if (device && resolvedDevice && device.toLowerCase() !== resolvedDevice.toLowerCase()) {
	      // This path points to another device so it is not applicable
	      continue;
	    }
	
	    if (!resolvedDevice) {
	      resolvedDevice = device;
	    }
	    if (!resolvedAbsolute) {
	      resolvedTail = tail + '\\' + resolvedTail;
	      resolvedAbsolute = isAbsolute;
	    }
	
	    if (resolvedDevice && resolvedAbsolute) {
	      break;
	    }
	  }
	
	  // Convert slashes to backslashes when `resolvedDevice` points to an UNC
	  // root. Also squash multiple slashes into a single one where appropriate.
	  if (isUnc) {
	    resolvedDevice = normalizeUNCRoot(resolvedDevice);
	  }
	
	  // At this point the path should be resolved to a full absolute path,
	  // but handle relative paths to be safe (might happen when process.cwd()
	  // fails)
	
	  // Normalize the tail path
	  resolvedTail = normalizeArray(resolvedTail.split(/[\\\/]+/), !resolvedAbsolute).join('\\');
	
	  return resolvedDevice + (resolvedAbsolute ? '\\' : '') + resolvedTail || '.';
	};
	
	win32.normalize = function (path) {
	  var result = win32StatPath(path),
	      device = result.device,
	      isUnc = result.isUnc,
	      isAbsolute = result.isAbsolute,
	      tail = result.tail,
	      trailingSlash = /[\\\/]$/.test(tail);
	
	  // Normalize the tail path
	  tail = normalizeArray(tail.split(/[\\\/]+/), !isAbsolute).join('\\');
	
	  if (!tail && !isAbsolute) {
	    tail = '.';
	  }
	  if (tail && trailingSlash) {
	    tail += '\\';
	  }
	
	  // Convert slashes to backslashes when `device` points to an UNC root.
	  // Also squash multiple slashes into a single one where appropriate.
	  if (isUnc) {
	    device = normalizeUNCRoot(device);
	  }
	
	  return device + (isAbsolute ? '\\' : '') + tail;
	};
	
	win32.isAbsolute = function (path) {
	  return win32StatPath(path).isAbsolute;
	};
	
	win32.join = function () {
	  var paths = [];
	  for (var i = 0; i < arguments.length; i++) {
	    var arg = arguments[i];
	    if (!util.isString(arg)) {
	      throw new TypeError('Arguments to path.join must be strings');
	    }
	    if (arg) {
	      paths.push(arg);
	    }
	  }
	
	  var joined = paths.join('\\');
	
	  // Make sure that the joined path doesn't start with two slashes, because
	  // normalize() will mistake it for an UNC path then.
	  //
	  // This step is skipped when it is very clear that the user actually
	  // intended to point at an UNC path. This is assumed when the first
	  // non-empty string arguments starts with exactly two slashes followed by
	  // at least one more non-slash character.
	  //
	  // Note that for normalize() to treat a path as an UNC path it needs to
	  // have at least 2 components, so we don't filter for that here.
	  // This means that the user can use join to construct UNC paths from
	  // a server name and a share name; for example:
	  //   path.join('//server', 'share') -> '\\\\server\\share\')
	  if (!/^[\\\/]{2}[^\\\/]/.test(paths[0])) {
	    joined = joined.replace(/^[\\\/]{2,}/, '\\');
	  }
	
	  return win32.normalize(joined);
	};
	
	// path.relative(from, to)
	// it will solve the relative path from 'from' to 'to', for instance:
	// from = 'C:\\orandea\\test\\aaa'
	// to = 'C:\\orandea\\impl\\bbb'
	// The output of the function should be: '..\\..\\impl\\bbb'
	win32.relative = function (from, to) {
	  from = win32.resolve(from);
	  to = win32.resolve(to);
	
	  // windows is not case sensitive
	  var lowerFrom = from.toLowerCase();
	  var lowerTo = to.toLowerCase();
	
	  var toParts = trimArray(to.split('\\'));
	
	  var lowerFromParts = trimArray(lowerFrom.split('\\'));
	  var lowerToParts = trimArray(lowerTo.split('\\'));
	
	  var length = Math.min(lowerFromParts.length, lowerToParts.length);
	  var samePartsLength = length;
	  for (var i = 0; i < length; i++) {
	    if (lowerFromParts[i] !== lowerToParts[i]) {
	      samePartsLength = i;
	      break;
	    }
	  }
	
	  if (samePartsLength == 0) {
	    return to;
	  }
	
	  var outputParts = [];
	  for (var i = samePartsLength; i < lowerFromParts.length; i++) {
	    outputParts.push('..');
	  }
	
	  outputParts = outputParts.concat(toParts.slice(samePartsLength));
	
	  return outputParts.join('\\');
	};
	
	win32._makeLong = function (path) {
	  // Note: this will *probably* throw somewhere.
	  if (!util.isString(path)) return path;
	
	  if (!path) {
	    return '';
	  }
	
	  var resolvedPath = win32.resolve(path);
	
	  if (/^[a-zA-Z]\:\\/.test(resolvedPath)) {
	    // path is local filesystem path, which needs to be converted
	    // to long UNC path.
	    return '\\\\?\\' + resolvedPath;
	  } else if (/^\\\\[^?.]/.test(resolvedPath)) {
	    // path is network UNC path, which needs to be converted
	    // to long UNC path.
	    return '\\\\?\\UNC\\' + resolvedPath.substring(2);
	  }
	
	  return path;
	};
	
	win32.dirname = function (path) {
	  var result = win32SplitPath(path),
	      root = result[0],
	      dir = result[1];
	
	  if (!root && !dir) {
	    // No dirname whatsoever
	    return '.';
	  }
	
	  if (dir) {
	    // It has a dirname, strip trailing slash
	    dir = dir.substr(0, dir.length - 1);
	  }
	
	  return root + dir;
	};
	
	win32.basename = function (path, ext) {
	  var f = win32SplitPath(path)[2];
	  // TODO: make this comparison case-insensitive on windows?
	  if (ext && f.substr(-1 * ext.length) === ext) {
	    f = f.substr(0, f.length - ext.length);
	  }
	  return f;
	};
	
	win32.extname = function (path) {
	  return win32SplitPath(path)[3];
	};
	
	win32.format = function (pathObject) {
	  if (!util.isObject(pathObject)) {
	    throw new TypeError("Parameter 'pathObject' must be an object, not " + (typeof pathObject === 'undefined' ? 'undefined' : _typeof(pathObject)));
	  }
	
	  var root = pathObject.root || '';
	
	  if (!util.isString(root)) {
	    throw new TypeError("'pathObject.root' must be a string or undefined, not " + _typeof(pathObject.root));
	  }
	
	  var dir = pathObject.dir;
	  var base = pathObject.base || '';
	  if (!dir) {
	    return base;
	  }
	  if (dir[dir.length - 1] === win32.sep) {
	    return dir + base;
	  }
	  return dir + win32.sep + base;
	};
	
	win32.parse = function (pathString) {
	  if (!util.isString(pathString)) {
	    throw new TypeError("Parameter 'pathString' must be a string, not " + (typeof pathString === 'undefined' ? 'undefined' : _typeof(pathString)));
	  }
	  var allParts = win32SplitPath(pathString);
	  if (!allParts || allParts.length !== 4) {
	    throw new TypeError("Invalid path '" + pathString + "'");
	  }
	  return {
	    root: allParts[0],
	    dir: allParts[0] + allParts[1].slice(0, -1),
	    base: allParts[2],
	    ext: allParts[3],
	    name: allParts[2].slice(0, allParts[2].length - allParts[3].length)
	  };
	};
	
	win32.sep = '\\';
	win32.delimiter = ';';
	
	// Split a filename into [root, dir, basename, ext], unix version
	// 'root' is just a slash, or nothing.
	var splitPathRe = /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
	var posix = {};
	
	function posixSplitPath(filename) {
	  return splitPathRe.exec(filename).slice(1);
	}
	
	// path.resolve([from ...], to)
	// posix version
	posix.resolve = function () {
	  var resolvedPath = '',
	      resolvedAbsolute = false;
	
	  for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
	    var path = i >= 0 ? arguments[i] : process.cwd();
	
	    // Skip empty and invalid entries
	    if (!util.isString(path)) {
	      throw new TypeError('Arguments to path.resolve must be strings');
	    } else if (!path) {
	      continue;
	    }
	
	    resolvedPath = path + '/' + resolvedPath;
	    resolvedAbsolute = path[0] === '/';
	  }
	
	  // At this point the path should be resolved to a full absolute path, but
	  // handle relative paths to be safe (might happen when process.cwd() fails)
	
	  // Normalize the path
	  resolvedPath = normalizeArray(resolvedPath.split('/'), !resolvedAbsolute).join('/');
	
	  return (resolvedAbsolute ? '/' : '') + resolvedPath || '.';
	};
	
	// path.normalize(path)
	// posix version
	posix.normalize = function (path) {
	  var isAbsolute = posix.isAbsolute(path),
	      trailingSlash = path && path[path.length - 1] === '/';
	
	  // Normalize the path
	  path = normalizeArray(path.split('/'), !isAbsolute).join('/');
	
	  if (!path && !isAbsolute) {
	    path = '.';
	  }
	  if (path && trailingSlash) {
	    path += '/';
	  }
	
	  return (isAbsolute ? '/' : '') + path;
	};
	
	// posix version
	posix.isAbsolute = function (path) {
	  return path.charAt(0) === '/';
	};
	
	// posix version
	posix.join = function () {
	  var path = '';
	  for (var i = 0; i < arguments.length; i++) {
	    var segment = arguments[i];
	    if (!util.isString(segment)) {
	      throw new TypeError('Arguments to path.join must be strings');
	    }
	    if (segment) {
	      if (!path) {
	        path += segment;
	      } else {
	        path += '/' + segment;
	      }
	    }
	  }
	  return posix.normalize(path);
	};
	
	// path.relative(from, to)
	// posix version
	posix.relative = function (from, to) {
	  from = posix.resolve(from).substr(1);
	  to = posix.resolve(to).substr(1);
	
	  var fromParts = trimArray(from.split('/'));
	  var toParts = trimArray(to.split('/'));
	
	  var length = Math.min(fromParts.length, toParts.length);
	  var samePartsLength = length;
	  for (var i = 0; i < length; i++) {
	    if (fromParts[i] !== toParts[i]) {
	      samePartsLength = i;
	      break;
	    }
	  }
	
	  var outputParts = [];
	  for (var i = samePartsLength; i < fromParts.length; i++) {
	    outputParts.push('..');
	  }
	
	  outputParts = outputParts.concat(toParts.slice(samePartsLength));
	
	  return outputParts.join('/');
	};
	
	posix._makeLong = function (path) {
	  return path;
	};
	
	posix.dirname = function (path) {
	  var result = posixSplitPath(path),
	      root = result[0],
	      dir = result[1];
	
	  if (!root && !dir) {
	    // No dirname whatsoever
	    return '.';
	  }
	
	  if (dir) {
	    // It has a dirname, strip trailing slash
	    dir = dir.substr(0, dir.length - 1);
	  }
	
	  return root + dir;
	};
	
	posix.basename = function (path, ext) {
	  var f = posixSplitPath(path)[2];
	  // TODO: make this comparison case-insensitive on windows?
	  if (ext && f.substr(-1 * ext.length) === ext) {
	    f = f.substr(0, f.length - ext.length);
	  }
	  return f;
	};
	
	posix.extname = function (path) {
	  return posixSplitPath(path)[3];
	};
	
	posix.format = function (pathObject) {
	  if (!util.isObject(pathObject)) {
	    throw new TypeError("Parameter 'pathObject' must be an object, not " + (typeof pathObject === 'undefined' ? 'undefined' : _typeof(pathObject)));
	  }
	
	  var root = pathObject.root || '';
	
	  if (!util.isString(root)) {
	    throw new TypeError("'pathObject.root' must be a string or undefined, not " + _typeof(pathObject.root));
	  }
	
	  var dir = pathObject.dir ? pathObject.dir + posix.sep : '';
	  var base = pathObject.base || '';
	  return dir + base;
	};
	
	posix.parse = function (pathString) {
	  if (!util.isString(pathString)) {
	    throw new TypeError("Parameter 'pathString' must be a string, not " + (typeof pathString === 'undefined' ? 'undefined' : _typeof(pathString)));
	  }
	  var allParts = posixSplitPath(pathString);
	  if (!allParts || allParts.length !== 4) {
	    throw new TypeError("Invalid path '" + pathString + "'");
	  }
	  allParts[1] = allParts[1] || '';
	  allParts[2] = allParts[2] || '';
	  allParts[3] = allParts[3] || '';
	
	  return {
	    root: allParts[0],
	    dir: allParts[0] + allParts[1].slice(0, -1),
	    base: allParts[2],
	    ext: allParts[3],
	    name: allParts[2].slice(0, allParts[2].length - allParts[3].length)
	  };
	};
	
	posix.sep = '/';
	posix.delimiter = ':';
	
	if (isWindows) module.exports = win32;else /* posix */
	  module.exports = posix;
	
	module.exports.posix = posix;
	module.exports.win32 = win32;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ }),
/* 271 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global, process) {'use strict';
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
	
	// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.
	
	var formatRegExp = /%[sdj%]/g;
	exports.format = function (f) {
	  if (!isString(f)) {
	    var objects = [];
	    for (var i = 0; i < arguments.length; i++) {
	      objects.push(inspect(arguments[i]));
	    }
	    return objects.join(' ');
	  }
	
	  var i = 1;
	  var args = arguments;
	  var len = args.length;
	  var str = String(f).replace(formatRegExp, function (x) {
	    if (x === '%%') return '%';
	    if (i >= len) return x;
	    switch (x) {
	      case '%s':
	        return String(args[i++]);
	      case '%d':
	        return Number(args[i++]);
	      case '%j':
	        try {
	          return JSON.stringify(args[i++]);
	        } catch (_) {
	          return '[Circular]';
	        }
	      default:
	        return x;
	    }
	  });
	  for (var x = args[i]; i < len; x = args[++i]) {
	    if (isNull(x) || !isObject(x)) {
	      str += ' ' + x;
	    } else {
	      str += ' ' + inspect(x);
	    }
	  }
	  return str;
	};
	
	// Mark that a method should not be used.
	// Returns a modified function which warns once by default.
	// If --no-deprecation is set, then it is a no-op.
	exports.deprecate = function (fn, msg) {
	  // Allow for deprecating things in the process of starting up.
	  if (isUndefined(global.process)) {
	    return function () {
	      return exports.deprecate(fn, msg).apply(this, arguments);
	    };
	  }
	
	  if (process.noDeprecation === true) {
	    return fn;
	  }
	
	  var warned = false;
	  function deprecated() {
	    if (!warned) {
	      if (process.throwDeprecation) {
	        throw new Error(msg);
	      } else if (process.traceDeprecation) {
	        console.trace(msg);
	      } else {
	        console.error(msg);
	      }
	      warned = true;
	    }
	    return fn.apply(this, arguments);
	  }
	
	  return deprecated;
	};
	
	var debugs = {};
	var debugEnviron;
	exports.debuglog = function (set) {
	  if (isUndefined(debugEnviron)) debugEnviron = process.env.NODE_DEBUG || '';
	  set = set.toUpperCase();
	  if (!debugs[set]) {
	    if (new RegExp('\\b' + set + '\\b', 'i').test(debugEnviron)) {
	      var pid = process.pid;
	      debugs[set] = function () {
	        var msg = exports.format.apply(exports, arguments);
	        console.error('%s %d: %s', set, pid, msg);
	      };
	    } else {
	      debugs[set] = function () {};
	    }
	  }
	  return debugs[set];
	};
	
	/**
	 * Echos the value of a value. Trys to print the value out
	 * in the best way possible given the different types.
	 *
	 * @param {Object} obj The object to print out.
	 * @param {Object} opts Optional options object that alters the output.
	 */
	/* legacy: obj, showHidden, depth, colors*/
	function inspect(obj, opts) {
	  // default options
	  var ctx = {
	    seen: [],
	    stylize: stylizeNoColor
	  };
	  // legacy...
	  if (arguments.length >= 3) ctx.depth = arguments[2];
	  if (arguments.length >= 4) ctx.colors = arguments[3];
	  if (isBoolean(opts)) {
	    // legacy...
	    ctx.showHidden = opts;
	  } else if (opts) {
	    // got an "options" object
	    exports._extend(ctx, opts);
	  }
	  // set default options
	  if (isUndefined(ctx.showHidden)) ctx.showHidden = false;
	  if (isUndefined(ctx.depth)) ctx.depth = 2;
	  if (isUndefined(ctx.colors)) ctx.colors = false;
	  if (isUndefined(ctx.customInspect)) ctx.customInspect = true;
	  if (ctx.colors) ctx.stylize = stylizeWithColor;
	  return formatValue(ctx, obj, ctx.depth);
	}
	exports.inspect = inspect;
	
	// http://en.wikipedia.org/wiki/ANSI_escape_code#graphics
	inspect.colors = {
	  'bold': [1, 22],
	  'italic': [3, 23],
	  'underline': [4, 24],
	  'inverse': [7, 27],
	  'white': [37, 39],
	  'grey': [90, 39],
	  'black': [30, 39],
	  'blue': [34, 39],
	  'cyan': [36, 39],
	  'green': [32, 39],
	  'magenta': [35, 39],
	  'red': [31, 39],
	  'yellow': [33, 39]
	};
	
	// Don't use 'blue' not visible on cmd.exe
	inspect.styles = {
	  'special': 'cyan',
	  'number': 'yellow',
	  'boolean': 'yellow',
	  'undefined': 'grey',
	  'null': 'bold',
	  'string': 'green',
	  'date': 'magenta',
	  // "name": intentionally not styling
	  'regexp': 'red'
	};
	
	function stylizeWithColor(str, styleType) {
	  var style = inspect.styles[styleType];
	
	  if (style) {
	    return '\x1B[' + inspect.colors[style][0] + 'm' + str + '\x1B[' + inspect.colors[style][1] + 'm';
	  } else {
	    return str;
	  }
	}
	
	function stylizeNoColor(str, styleType) {
	  return str;
	}
	
	function arrayToHash(array) {
	  var hash = {};
	
	  array.forEach(function (val, idx) {
	    hash[val] = true;
	  });
	
	  return hash;
	}
	
	function formatValue(ctx, value, recurseTimes) {
	  // Provide a hook for user-specified inspect functions.
	  // Check that value is an object with an inspect function on it
	  if (ctx.customInspect && value && isFunction(value.inspect) &&
	  // Filter out the util module, it's inspect function is special
	  value.inspect !== exports.inspect &&
	  // Also filter out any prototype objects using the circular check.
	  !(value.constructor && value.constructor.prototype === value)) {
	    var ret = value.inspect(recurseTimes, ctx);
	    if (!isString(ret)) {
	      ret = formatValue(ctx, ret, recurseTimes);
	    }
	    return ret;
	  }
	
	  // Primitive types cannot have properties
	  var primitive = formatPrimitive(ctx, value);
	  if (primitive) {
	    return primitive;
	  }
	
	  // Look up the keys of the object.
	  var keys = Object.keys(value);
	  var visibleKeys = arrayToHash(keys);
	
	  if (ctx.showHidden) {
	    keys = Object.getOwnPropertyNames(value);
	  }
	
	  // IE doesn't make error fields non-enumerable
	  // http://msdn.microsoft.com/en-us/library/ie/dww52sbt(v=vs.94).aspx
	  if (isError(value) && (keys.indexOf('message') >= 0 || keys.indexOf('description') >= 0)) {
	    return formatError(value);
	  }
	
	  // Some type of object without properties can be shortcutted.
	  if (keys.length === 0) {
	    if (isFunction(value)) {
	      var name = value.name ? ': ' + value.name : '';
	      return ctx.stylize('[Function' + name + ']', 'special');
	    }
	    if (isRegExp(value)) {
	      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
	    }
	    if (isDate(value)) {
	      return ctx.stylize(Date.prototype.toString.call(value), 'date');
	    }
	    if (isError(value)) {
	      return formatError(value);
	    }
	  }
	
	  var base = '',
	      array = false,
	      braces = ['{', '}'];
	
	  // Make Array say that they are Array
	  if (isArray(value)) {
	    array = true;
	    braces = ['[', ']'];
	  }
	
	  // Make functions say that they are functions
	  if (isFunction(value)) {
	    var n = value.name ? ': ' + value.name : '';
	    base = ' [Function' + n + ']';
	  }
	
	  // Make RegExps say that they are RegExps
	  if (isRegExp(value)) {
	    base = ' ' + RegExp.prototype.toString.call(value);
	  }
	
	  // Make dates with properties first say the date
	  if (isDate(value)) {
	    base = ' ' + Date.prototype.toUTCString.call(value);
	  }
	
	  // Make error with message first say the error
	  if (isError(value)) {
	    base = ' ' + formatError(value);
	  }
	
	  if (keys.length === 0 && (!array || value.length == 0)) {
	    return braces[0] + base + braces[1];
	  }
	
	  if (recurseTimes < 0) {
	    if (isRegExp(value)) {
	      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
	    } else {
	      return ctx.stylize('[Object]', 'special');
	    }
	  }
	
	  ctx.seen.push(value);
	
	  var output;
	  if (array) {
	    output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);
	  } else {
	    output = keys.map(function (key) {
	      return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);
	    });
	  }
	
	  ctx.seen.pop();
	
	  return reduceToSingleString(output, base, braces);
	}
	
	function formatPrimitive(ctx, value) {
	  if (isUndefined(value)) return ctx.stylize('undefined', 'undefined');
	  if (isString(value)) {
	    var simple = '\'' + JSON.stringify(value).replace(/^"|"$/g, '').replace(/'/g, "\\'").replace(/\\"/g, '"') + '\'';
	    return ctx.stylize(simple, 'string');
	  }
	  if (isNumber(value)) return ctx.stylize('' + value, 'number');
	  if (isBoolean(value)) return ctx.stylize('' + value, 'boolean');
	  // For some reason typeof null is "object", so special case here.
	  if (isNull(value)) return ctx.stylize('null', 'null');
	}
	
	function formatError(value) {
	  return '[' + Error.prototype.toString.call(value) + ']';
	}
	
	function formatArray(ctx, value, recurseTimes, visibleKeys, keys) {
	  var output = [];
	  for (var i = 0, l = value.length; i < l; ++i) {
	    if (hasOwnProperty(value, String(i))) {
	      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys, String(i), true));
	    } else {
	      output.push('');
	    }
	  }
	  keys.forEach(function (key) {
	    if (!key.match(/^\d+$/)) {
	      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys, key, true));
	    }
	  });
	  return output;
	}
	
	function formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {
	  var name, str, desc;
	  desc = Object.getOwnPropertyDescriptor(value, key) || { value: value[key] };
	  if (desc.get) {
	    if (desc.set) {
	      str = ctx.stylize('[Getter/Setter]', 'special');
	    } else {
	      str = ctx.stylize('[Getter]', 'special');
	    }
	  } else {
	    if (desc.set) {
	      str = ctx.stylize('[Setter]', 'special');
	    }
	  }
	  if (!hasOwnProperty(visibleKeys, key)) {
	    name = '[' + key + ']';
	  }
	  if (!str) {
	    if (ctx.seen.indexOf(desc.value) < 0) {
	      if (isNull(recurseTimes)) {
	        str = formatValue(ctx, desc.value, null);
	      } else {
	        str = formatValue(ctx, desc.value, recurseTimes - 1);
	      }
	      if (str.indexOf('\n') > -1) {
	        if (array) {
	          str = str.split('\n').map(function (line) {
	            return '  ' + line;
	          }).join('\n').substr(2);
	        } else {
	          str = '\n' + str.split('\n').map(function (line) {
	            return '   ' + line;
	          }).join('\n');
	        }
	      }
	    } else {
	      str = ctx.stylize('[Circular]', 'special');
	    }
	  }
	  if (isUndefined(name)) {
	    if (array && key.match(/^\d+$/)) {
	      return str;
	    }
	    name = JSON.stringify('' + key);
	    if (name.match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)) {
	      name = name.substr(1, name.length - 2);
	      name = ctx.stylize(name, 'name');
	    } else {
	      name = name.replace(/'/g, "\\'").replace(/\\"/g, '"').replace(/(^"|"$)/g, "'");
	      name = ctx.stylize(name, 'string');
	    }
	  }
	
	  return name + ': ' + str;
	}
	
	function reduceToSingleString(output, base, braces) {
	  var numLinesEst = 0;
	  var length = output.reduce(function (prev, cur) {
	    numLinesEst++;
	    if (cur.indexOf('\n') >= 0) numLinesEst++;
	    return prev + cur.replace(/\u001b\[\d\d?m/g, '').length + 1;
	  }, 0);
	
	  if (length > 60) {
	    return braces[0] + (base === '' ? '' : base + '\n ') + ' ' + output.join(',\n  ') + ' ' + braces[1];
	  }
	
	  return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];
	}
	
	// NOTE: These type checking functions intentionally don't use `instanceof`
	// because it is fragile and can be easily faked with `Object.create()`.
	function isArray(ar) {
	  return Array.isArray(ar);
	}
	exports.isArray = isArray;
	
	function isBoolean(arg) {
	  return typeof arg === 'boolean';
	}
	exports.isBoolean = isBoolean;
	
	function isNull(arg) {
	  return arg === null;
	}
	exports.isNull = isNull;
	
	function isNullOrUndefined(arg) {
	  return arg == null;
	}
	exports.isNullOrUndefined = isNullOrUndefined;
	
	function isNumber(arg) {
	  return typeof arg === 'number';
	}
	exports.isNumber = isNumber;
	
	function isString(arg) {
	  return typeof arg === 'string';
	}
	exports.isString = isString;
	
	function isSymbol(arg) {
	  return (typeof arg === 'undefined' ? 'undefined' : _typeof(arg)) === 'symbol';
	}
	exports.isSymbol = isSymbol;
	
	function isUndefined(arg) {
	  return arg === void 0;
	}
	exports.isUndefined = isUndefined;
	
	function isRegExp(re) {
	  return isObject(re) && objectToString(re) === '[object RegExp]';
	}
	exports.isRegExp = isRegExp;
	
	function isObject(arg) {
	  return (typeof arg === 'undefined' ? 'undefined' : _typeof(arg)) === 'object' && arg !== null;
	}
	exports.isObject = isObject;
	
	function isDate(d) {
	  return isObject(d) && objectToString(d) === '[object Date]';
	}
	exports.isDate = isDate;
	
	function isError(e) {
	  return isObject(e) && (objectToString(e) === '[object Error]' || e instanceof Error);
	}
	exports.isError = isError;
	
	function isFunction(arg) {
	  return typeof arg === 'function';
	}
	exports.isFunction = isFunction;
	
	function isPrimitive(arg) {
	  return arg === null || typeof arg === 'boolean' || typeof arg === 'number' || typeof arg === 'string' || (typeof arg === 'undefined' ? 'undefined' : _typeof(arg)) === 'symbol' || // ES6 symbol
	  typeof arg === 'undefined';
	}
	exports.isPrimitive = isPrimitive;
	
	exports.isBuffer = __webpack_require__(272);
	
	function objectToString(o) {
	  return Object.prototype.toString.call(o);
	}
	
	function pad(n) {
	  return n < 10 ? '0' + n.toString(10) : n.toString(10);
	}
	
	var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
	
	// 26 Feb 16:19:34
	function timestamp() {
	  var d = new Date();
	  var time = [pad(d.getHours()), pad(d.getMinutes()), pad(d.getSeconds())].join(':');
	  return [d.getDate(), months[d.getMonth()], time].join(' ');
	}
	
	// log is just a thin wrapper to console.log that prepends a timestamp
	exports.log = function () {
	  console.log('%s - %s', timestamp(), exports.format.apply(exports, arguments));
	};
	
	/**
	 * Inherit the prototype methods from one constructor into another.
	 *
	 * The Function.prototype.inherits from lang.js rewritten as a standalone
	 * function (not on Function.prototype). NOTE: If this file is to be loaded
	 * during bootstrapping this function needs to be rewritten using some native
	 * functions as prototype setup using normal JavaScript does not work as
	 * expected during bootstrapping (see mirror.js in r114903).
	 *
	 * @param {function} ctor Constructor function which needs to inherit the
	 *     prototype.
	 * @param {function} superCtor Constructor function to inherit prototype from.
	 */
	exports.inherits = __webpack_require__(273);
	
	exports._extend = function (origin, add) {
	  // Don't do anything if add isn't an object
	  if (!add || !isObject(add)) return origin;
	
	  var keys = Object.keys(add);
	  var i = keys.length;
	  while (i--) {
	    origin[keys[i]] = add[keys[i]];
	  }
	  return origin;
	};
	
	function hasOwnProperty(obj, prop) {
	  return Object.prototype.hasOwnProperty.call(obj, prop);
	}
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }()), __webpack_require__(3)))

/***/ }),
/* 272 */
/***/ (function(module, exports) {

	'use strict';
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
	
	module.exports = function isBuffer(arg) {
	  return arg && (typeof arg === 'undefined' ? 'undefined' : _typeof(arg)) === 'object' && typeof arg.copy === 'function' && typeof arg.fill === 'function' && typeof arg.readUInt8 === 'function';
	};

/***/ }),
/* 273 */
/***/ (function(module, exports) {

	'use strict';
	
	if (typeof Object.create === 'function') {
	  // implementation from standard node.js 'util' module
	  module.exports = function inherits(ctor, superCtor) {
	    ctor.super_ = superCtor;
	    ctor.prototype = Object.create(superCtor.prototype, {
	      constructor: {
	        value: ctor,
	        enumerable: false,
	        writable: true,
	        configurable: true
	      }
	    });
	  };
	} else {
	  // old school shim for old browsers
	  module.exports = function inherits(ctor, superCtor) {
	    ctor.super_ = superCtor;
	    var TempCtor = function TempCtor() {};
	    TempCtor.prototype = superCtor.prototype;
	    ctor.prototype = new TempCtor();
	    ctor.prototype.constructor = ctor;
	  };
	}

/***/ }),
/* 274 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {"use strict";
	
	// info about each config option.
	
	var debug = process.env.DEBUG_NOPT || process.env.NOPT_DEBUG ? function () {
	  console.error.apply(console, arguments);
	} : function () {};
	
	var url = __webpack_require__(275),
	    path = __webpack_require__(270),
	    Stream = __webpack_require__(282).Stream,
	    abbrev = __webpack_require__(309);
	
	module.exports = exports = nopt;
	exports.clean = clean;
	
	exports.typeDefs = { String: { type: String, validate: validateString },
	  Boolean: { type: Boolean, validate: validateBoolean },
	  url: { type: url, validate: validateUrl },
	  Number: { type: Number, validate: validateNumber },
	  path: { type: path, validate: validatePath },
	  Stream: { type: Stream, validate: validateStream },
	  Date: { type: Date, validate: validateDate }
	};
	
	function nopt(types, shorthands, args, slice) {
	  args = args || process.argv;
	  types = types || {};
	  shorthands = shorthands || {};
	  if (typeof slice !== "number") slice = 2;
	
	  debug(types, shorthands, args, slice);
	
	  args = args.slice(slice);
	  var data = {},
	      key,
	      remain = [],
	      cooked = args,
	      original = args.slice(0);
	
	  parse(args, data, remain, types, shorthands);
	  // now data is full
	  clean(data, types, exports.typeDefs);
	  data.argv = { remain: remain, cooked: cooked, original: original };
	  Object.defineProperty(data.argv, 'toString', { value: function value() {
	      return this.original.map(JSON.stringify).join(" ");
	    }, enumerable: false });
	  return data;
	}
	
	function clean(data, types, typeDefs) {
	  typeDefs = typeDefs || exports.typeDefs;
	  var remove = {},
	      typeDefault = [false, true, null, String, Array];
	
	  Object.keys(data).forEach(function (k) {
	    if (k === "argv") return;
	    var val = data[k],
	        isArray = Array.isArray(val),
	        type = types[k];
	    if (!isArray) val = [val];
	    if (!type) type = typeDefault;
	    if (type === Array) type = typeDefault.concat(Array);
	    if (!Array.isArray(type)) type = [type];
	
	    debug("val=%j", val);
	    debug("types=", type);
	    val = val.map(function (val) {
	      // if it's an unknown value, then parse false/true/null/numbers/dates
	      if (typeof val === "string") {
	        debug("string %j", val);
	        val = val.trim();
	        if (val === "null" && ~type.indexOf(null) || val === "true" && (~type.indexOf(true) || ~type.indexOf(Boolean)) || val === "false" && (~type.indexOf(false) || ~type.indexOf(Boolean))) {
	          val = JSON.parse(val);
	          debug("jsonable %j", val);
	        } else if (~type.indexOf(Number) && !isNaN(val)) {
	          debug("convert to number", val);
	          val = +val;
	        } else if (~type.indexOf(Date) && !isNaN(Date.parse(val))) {
	          debug("convert to date", val);
	          val = new Date(val);
	        }
	      }
	
	      if (!types.hasOwnProperty(k)) {
	        return val;
	      }
	
	      // allow `--no-blah` to set 'blah' to null if null is allowed
	      if (val === false && ~type.indexOf(null) && !(~type.indexOf(false) || ~type.indexOf(Boolean))) {
	        val = null;
	      }
	
	      var d = {};
	      d[k] = val;
	      debug("prevalidated val", d, val, types[k]);
	      if (!validate(d, k, val, types[k], typeDefs)) {
	        if (exports.invalidHandler) {
	          exports.invalidHandler(k, val, types[k], data);
	        } else if (exports.invalidHandler !== false) {
	          debug("invalid: " + k + "=" + val, types[k]);
	        }
	        return remove;
	      }
	      debug("validated val", d, val, types[k]);
	      return d[k];
	    }).filter(function (val) {
	      return val !== remove;
	    });
	
	    if (!val.length) delete data[k];else if (isArray) {
	      debug(isArray, data[k], val);
	      data[k] = val;
	    } else data[k] = val[0];
	
	    debug("k=%s val=%j", k, val, data[k]);
	  });
	}
	
	function validateString(data, k, val) {
	  data[k] = String(val);
	}
	
	function validatePath(data, k, val) {
	  if (val === true) return false;
	  if (val === null) return true;
	
	  val = String(val);
	  var homePattern = process.platform === 'win32' ? /^~(\/|\\)/ : /^~\//;
	  if (val.match(homePattern) && process.env.HOME) {
	    val = path.resolve(process.env.HOME, val.substr(2));
	  }
	  data[k] = path.resolve(String(val));
	  return true;
	}
	
	function validateNumber(data, k, val) {
	  debug("validate Number %j %j %j", k, val, isNaN(val));
	  if (isNaN(val)) return false;
	  data[k] = +val;
	}
	
	function validateDate(data, k, val) {
	  debug("validate Date %j %j %j", k, val, Date.parse(val));
	  var s = Date.parse(val);
	  if (isNaN(s)) return false;
	  data[k] = new Date(val);
	}
	
	function validateBoolean(data, k, val) {
	  if (val instanceof Boolean) val = val.valueOf();else if (typeof val === "string") {
	    if (!isNaN(val)) val = !!+val;else if (val === "null" || val === "false") val = false;else val = true;
	  } else val = !!val;
	  data[k] = val;
	}
	
	function validateUrl(data, k, val) {
	  val = url.parse(String(val));
	  if (!val.host) return false;
	  data[k] = val.href;
	}
	
	function validateStream(data, k, val) {
	  if (!(val instanceof Stream)) return false;
	  data[k] = val;
	}
	
	function validate(data, k, val, type, typeDefs) {
	  // arrays are lists of types.
	  if (Array.isArray(type)) {
	    for (var i = 0, l = type.length; i < l; i++) {
	      if (type[i] === Array) continue;
	      if (validate(data, k, val, type[i], typeDefs)) return true;
	    }
	    delete data[k];
	    return false;
	  }
	
	  // an array of anything?
	  if (type === Array) return true;
	
	  // NaN is poisonous.  Means that something is not allowed.
	  if (type !== type) {
	    debug("Poison NaN", k, val, type);
	    delete data[k];
	    return false;
	  }
	
	  // explicit list of values
	  if (val === type) {
	    debug("Explicitly allowed %j", val);
	    // if (isArray) (data[k] = data[k] || []).push(val)
	    // else data[k] = val
	    data[k] = val;
	    return true;
	  }
	
	  // now go through the list of typeDefs, validate against each one.
	  var ok = false,
	      types = Object.keys(typeDefs);
	  for (var i = 0, l = types.length; i < l; i++) {
	    debug("test type %j %j %j", k, val, types[i]);
	    var t = typeDefs[types[i]];
	    if (t && (type && type.name && t.type && t.type.name ? type.name === t.type.name : type === t.type)) {
	      var d = {};
	      ok = false !== t.validate(d, k, val);
	      val = d[k];
	      if (ok) {
	        // if (isArray) (data[k] = data[k] || []).push(val)
	        // else data[k] = val
	        data[k] = val;
	        break;
	      }
	    }
	  }
	  debug("OK? %j (%j %j %j)", ok, k, val, types[i]);
	
	  if (!ok) delete data[k];
	  return ok;
	}
	
	function parse(args, data, remain, types, shorthands) {
	  debug("parse", args, data, remain);
	
	  var key = null,
	      abbrevs = abbrev(Object.keys(types)),
	      shortAbbr = abbrev(Object.keys(shorthands));
	
	  for (var i = 0; i < args.length; i++) {
	    var arg = args[i];
	    debug("arg", arg);
	
	    if (arg.match(/^-{2,}$/)) {
	      // done with keys.
	      // the rest are args.
	      remain.push.apply(remain, args.slice(i + 1));
	      args[i] = "--";
	      break;
	    }
	    var hadEq = false;
	    if (arg.charAt(0) === "-" && arg.length > 1) {
	      if (arg.indexOf("=") !== -1) {
	        hadEq = true;
	        var v = arg.split("=");
	        arg = v.shift();
	        v = v.join("=");
	        args.splice.apply(args, [i, 1].concat([arg, v]));
	      }
	
	      // see if it's a shorthand
	      // if so, splice and back up to re-parse it.
	      var shRes = resolveShort(arg, shorthands, shortAbbr, abbrevs);
	      debug("arg=%j shRes=%j", arg, shRes);
	      if (shRes) {
	        debug(arg, shRes);
	        args.splice.apply(args, [i, 1].concat(shRes));
	        if (arg !== shRes[0]) {
	          i--;
	          continue;
	        }
	      }
	      arg = arg.replace(/^-+/, "");
	      var no = null;
	      while (arg.toLowerCase().indexOf("no-") === 0) {
	        no = !no;
	        arg = arg.substr(3);
	      }
	
	      if (abbrevs[arg]) arg = abbrevs[arg];
	
	      var isArray = types[arg] === Array || Array.isArray(types[arg]) && types[arg].indexOf(Array) !== -1;
	
	      // allow unknown things to be arrays if specified multiple times.
	      if (!types.hasOwnProperty(arg) && data.hasOwnProperty(arg)) {
	        if (!Array.isArray(data[arg])) data[arg] = [data[arg]];
	        isArray = true;
	      }
	
	      var val,
	          la = args[i + 1];
	
	      var isBool = typeof no === 'boolean' || types[arg] === Boolean || Array.isArray(types[arg]) && types[arg].indexOf(Boolean) !== -1 || typeof types[arg] === 'undefined' && !hadEq || la === "false" && (types[arg] === null || Array.isArray(types[arg]) && ~types[arg].indexOf(null));
	
	      if (isBool) {
	        // just set and move along
	        val = !no;
	        // however, also support --bool true or --bool false
	        if (la === "true" || la === "false") {
	          val = JSON.parse(la);
	          la = null;
	          if (no) val = !val;
	          i++;
	        }
	
	        // also support "foo":[Boolean, "bar"] and "--foo bar"
	        if (Array.isArray(types[arg]) && la) {
	          if (~types[arg].indexOf(la)) {
	            // an explicit type
	            val = la;
	            i++;
	          } else if (la === "null" && ~types[arg].indexOf(null)) {
	            // null allowed
	            val = null;
	            i++;
	          } else if (!la.match(/^-{2,}[^-]/) && !isNaN(la) && ~types[arg].indexOf(Number)) {
	            // number
	            val = +la;
	            i++;
	          } else if (!la.match(/^-[^-]/) && ~types[arg].indexOf(String)) {
	            // string
	            val = la;
	            i++;
	          }
	        }
	
	        if (isArray) (data[arg] = data[arg] || []).push(val);else data[arg] = val;
	
	        continue;
	      }
	
	      if (types[arg] === String && la === undefined) la = "";
	
	      if (la && la.match(/^-{2,}$/)) {
	        la = undefined;
	        i--;
	      }
	
	      val = la === undefined ? true : la;
	      if (isArray) (data[arg] = data[arg] || []).push(val);else data[arg] = val;
	
	      i++;
	      continue;
	    }
	    remain.push(arg);
	  }
	}
	
	function resolveShort(arg, shorthands, shortAbbr, abbrevs) {
	  // handle single-char shorthands glommed together, like
	  // npm ls -glp, but only if there is one dash, and only if
	  // all of the chars are single-char shorthands, and it's
	  // not a match to some other abbrev.
	  arg = arg.replace(/^-+/, '');
	
	  // if it's an exact known option, then don't go any further
	  if (abbrevs[arg] === arg) return null;
	
	  // if it's an exact known shortopt, same deal
	  if (shorthands[arg]) {
	    // make it an array, if it's a list of words
	    if (shorthands[arg] && !Array.isArray(shorthands[arg])) shorthands[arg] = shorthands[arg].split(/\s+/);
	
	    return shorthands[arg];
	  }
	
	  // first check to see if this arg is a set of single-char shorthands
	  var singles = shorthands.___singles;
	  if (!singles) {
	    singles = Object.keys(shorthands).filter(function (s) {
	      return s.length === 1;
	    }).reduce(function (l, r) {
	      l[r] = true;
	      return l;
	    }, {});
	    shorthands.___singles = singles;
	    debug('shorthand singles', singles);
	  }
	
	  var chrs = arg.split("").filter(function (c) {
	    return singles[c];
	  });
	
	  if (chrs.join("") === arg) return chrs.map(function (c) {
	    return shorthands[c];
	  }).reduce(function (l, r) {
	    return l.concat(r);
	  }, []);
	
	  // if it's an arg abbrev, and not a literal shorthand, then prefer the arg
	  if (abbrevs[arg] && !shorthands[arg]) return null;
	
	  // if it's an abbr for a shorthand, then use that
	  if (shortAbbr[arg]) arg = shortAbbr[arg];
	
	  // make it an array, if it's a list of words
	  if (shorthands[arg] && !Array.isArray(shorthands[arg])) shorthands[arg] = shorthands[arg].split(/\s+/);
	
	  return shorthands[arg];
	}
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ }),
/* 275 */
/***/ (function(module, exports, __webpack_require__) {

	// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.
	
	'use strict';
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
	
	var punycode = __webpack_require__(276);
	var util = __webpack_require__(278);
	
	exports.parse = urlParse;
	exports.resolve = urlResolve;
	exports.resolveObject = urlResolveObject;
	exports.format = urlFormat;
	
	exports.Url = Url;
	
	function Url() {
	  this.protocol = null;
	  this.slashes = null;
	  this.auth = null;
	  this.host = null;
	  this.port = null;
	  this.hostname = null;
	  this.hash = null;
	  this.search = null;
	  this.query = null;
	  this.pathname = null;
	  this.path = null;
	  this.href = null;
	}
	
	// Reference: RFC 3986, RFC 1808, RFC 2396
	
	// define these here so at least they only have to be
	// compiled once on the first module load.
	var protocolPattern = /^([a-z0-9.+-]+:)/i,
	    portPattern = /:[0-9]*$/,
	
	
	// Special case for a simple path URL
	simplePathPattern = /^(\/\/?(?!\/)[^\?\s]*)(\?[^\s]*)?$/,
	
	
	// RFC 2396: characters reserved for delimiting URLs.
	// We actually just auto-escape these.
	delims = ['<', '>', '"', '`', ' ', '\r', '\n', '\t'],
	
	
	// RFC 2396: characters not allowed for various reasons.
	unwise = ['{', '}', '|', '\\', '^', '`'].concat(delims),
	
	
	// Allowed by RFCs, but cause of XSS attacks.  Always escape these.
	autoEscape = ['\''].concat(unwise),
	
	// Characters that are never ever allowed in a hostname.
	// Note that any invalid chars are also handled, but these
	// are the ones that are *expected* to be seen, so we fast-path
	// them.
	nonHostChars = ['%', '/', '?', ';', '#'].concat(autoEscape),
	    hostEndingChars = ['/', '?', '#'],
	    hostnameMaxLen = 255,
	    hostnamePartPattern = /^[+a-z0-9A-Z_-]{0,63}$/,
	    hostnamePartStart = /^([+a-z0-9A-Z_-]{0,63})(.*)$/,
	
	// protocols that can allow "unsafe" and "unwise" chars.
	unsafeProtocol = {
	  'javascript': true,
	  'javascript:': true
	},
	
	// protocols that never have a hostname.
	hostlessProtocol = {
	  'javascript': true,
	  'javascript:': true
	},
	
	// protocols that always contain a // bit.
	slashedProtocol = {
	  'http': true,
	  'https': true,
	  'ftp': true,
	  'gopher': true,
	  'file': true,
	  'http:': true,
	  'https:': true,
	  'ftp:': true,
	  'gopher:': true,
	  'file:': true
	},
	    querystring = __webpack_require__(279);
	
	function urlParse(url, parseQueryString, slashesDenoteHost) {
	  if (url && util.isObject(url) && url instanceof Url) return url;
	
	  var u = new Url();
	  u.parse(url, parseQueryString, slashesDenoteHost);
	  return u;
	}
	
	Url.prototype.parse = function (url, parseQueryString, slashesDenoteHost) {
	  if (!util.isString(url)) {
	    throw new TypeError("Parameter 'url' must be a string, not " + (typeof url === 'undefined' ? 'undefined' : _typeof(url)));
	  }
	
	  // Copy chrome, IE, opera backslash-handling behavior.
	  // Back slashes before the query string get converted to forward slashes
	  // See: https://code.google.com/p/chromium/issues/detail?id=25916
	  var queryIndex = url.indexOf('?'),
	      splitter = queryIndex !== -1 && queryIndex < url.indexOf('#') ? '?' : '#',
	      uSplit = url.split(splitter),
	      slashRegex = /\\/g;
	  uSplit[0] = uSplit[0].replace(slashRegex, '/');
	  url = uSplit.join(splitter);
	
	  var rest = url;
	
	  // trim before proceeding.
	  // This is to support parse stuff like "  http://foo.com  \n"
	  rest = rest.trim();
	
	  if (!slashesDenoteHost && url.split('#').length === 1) {
	    // Try fast path regexp
	    var simplePath = simplePathPattern.exec(rest);
	    if (simplePath) {
	      this.path = rest;
	      this.href = rest;
	      this.pathname = simplePath[1];
	      if (simplePath[2]) {
	        this.search = simplePath[2];
	        if (parseQueryString) {
	          this.query = querystring.parse(this.search.substr(1));
	        } else {
	          this.query = this.search.substr(1);
	        }
	      } else if (parseQueryString) {
	        this.search = '';
	        this.query = {};
	      }
	      return this;
	    }
	  }
	
	  var proto = protocolPattern.exec(rest);
	  if (proto) {
	    proto = proto[0];
	    var lowerProto = proto.toLowerCase();
	    this.protocol = lowerProto;
	    rest = rest.substr(proto.length);
	  }
	
	  // figure out if it's got a host
	  // user@server is *always* interpreted as a hostname, and url
	  // resolution will treat //foo/bar as host=foo,path=bar because that's
	  // how the browser resolves relative URLs.
	  if (slashesDenoteHost || proto || rest.match(/^\/\/[^@\/]+@[^@\/]+/)) {
	    var slashes = rest.substr(0, 2) === '//';
	    if (slashes && !(proto && hostlessProtocol[proto])) {
	      rest = rest.substr(2);
	      this.slashes = true;
	    }
	  }
	
	  if (!hostlessProtocol[proto] && (slashes || proto && !slashedProtocol[proto])) {
	
	    // there's a hostname.
	    // the first instance of /, ?, ;, or # ends the host.
	    //
	    // If there is an @ in the hostname, then non-host chars *are* allowed
	    // to the left of the last @ sign, unless some host-ending character
	    // comes *before* the @-sign.
	    // URLs are obnoxious.
	    //
	    // ex:
	    // http://a@b@c/ => user:a@b host:c
	    // http://a@b?@c => user:a host:c path:/?@c
	
	    // v0.12 TODO(isaacs): This is not quite how Chrome does things.
	    // Review our test case against browsers more comprehensively.
	
	    // find the first instance of any hostEndingChars
	    var hostEnd = -1;
	    for (var i = 0; i < hostEndingChars.length; i++) {
	      var hec = rest.indexOf(hostEndingChars[i]);
	      if (hec !== -1 && (hostEnd === -1 || hec < hostEnd)) hostEnd = hec;
	    }
	
	    // at this point, either we have an explicit point where the
	    // auth portion cannot go past, or the last @ char is the decider.
	    var auth, atSign;
	    if (hostEnd === -1) {
	      // atSign can be anywhere.
	      atSign = rest.lastIndexOf('@');
	    } else {
	      // atSign must be in auth portion.
	      // http://a@b/c@d => host:b auth:a path:/c@d
	      atSign = rest.lastIndexOf('@', hostEnd);
	    }
	
	    // Now we have a portion which is definitely the auth.
	    // Pull that off.
	    if (atSign !== -1) {
	      auth = rest.slice(0, atSign);
	      rest = rest.slice(atSign + 1);
	      this.auth = decodeURIComponent(auth);
	    }
	
	    // the host is the remaining to the left of the first non-host char
	    hostEnd = -1;
	    for (var i = 0; i < nonHostChars.length; i++) {
	      var hec = rest.indexOf(nonHostChars[i]);
	      if (hec !== -1 && (hostEnd === -1 || hec < hostEnd)) hostEnd = hec;
	    }
	    // if we still have not hit it, then the entire thing is a host.
	    if (hostEnd === -1) hostEnd = rest.length;
	
	    this.host = rest.slice(0, hostEnd);
	    rest = rest.slice(hostEnd);
	
	    // pull out port.
	    this.parseHost();
	
	    // we've indicated that there is a hostname,
	    // so even if it's empty, it has to be present.
	    this.hostname = this.hostname || '';
	
	    // if hostname begins with [ and ends with ]
	    // assume that it's an IPv6 address.
	    var ipv6Hostname = this.hostname[0] === '[' && this.hostname[this.hostname.length - 1] === ']';
	
	    // validate a little.
	    if (!ipv6Hostname) {
	      var hostparts = this.hostname.split(/\./);
	      for (var i = 0, l = hostparts.length; i < l; i++) {
	        var part = hostparts[i];
	        if (!part) continue;
	        if (!part.match(hostnamePartPattern)) {
	          var newpart = '';
	          for (var j = 0, k = part.length; j < k; j++) {
	            if (part.charCodeAt(j) > 127) {
	              // we replace non-ASCII char with a temporary placeholder
	              // we need this to make sure size of hostname is not
	              // broken by replacing non-ASCII by nothing
	              newpart += 'x';
	            } else {
	              newpart += part[j];
	            }
	          }
	          // we test again with ASCII char only
	          if (!newpart.match(hostnamePartPattern)) {
	            var validParts = hostparts.slice(0, i);
	            var notHost = hostparts.slice(i + 1);
	            var bit = part.match(hostnamePartStart);
	            if (bit) {
	              validParts.push(bit[1]);
	              notHost.unshift(bit[2]);
	            }
	            if (notHost.length) {
	              rest = '/' + notHost.join('.') + rest;
	            }
	            this.hostname = validParts.join('.');
	            break;
	          }
	        }
	      }
	    }
	
	    if (this.hostname.length > hostnameMaxLen) {
	      this.hostname = '';
	    } else {
	      // hostnames are always lower case.
	      this.hostname = this.hostname.toLowerCase();
	    }
	
	    if (!ipv6Hostname) {
	      // IDNA Support: Returns a punycoded representation of "domain".
	      // It only converts parts of the domain name that
	      // have non-ASCII characters, i.e. it doesn't matter if
	      // you call it with a domain that already is ASCII-only.
	      this.hostname = punycode.toASCII(this.hostname);
	    }
	
	    var p = this.port ? ':' + this.port : '';
	    var h = this.hostname || '';
	    this.host = h + p;
	    this.href += this.host;
	
	    // strip [ and ] from the hostname
	    // the host field still retains them, though
	    if (ipv6Hostname) {
	      this.hostname = this.hostname.substr(1, this.hostname.length - 2);
	      if (rest[0] !== '/') {
	        rest = '/' + rest;
	      }
	    }
	  }
	
	  // now rest is set to the post-host stuff.
	  // chop off any delim chars.
	  if (!unsafeProtocol[lowerProto]) {
	
	    // First, make 100% sure that any "autoEscape" chars get
	    // escaped, even if encodeURIComponent doesn't think they
	    // need to be.
	    for (var i = 0, l = autoEscape.length; i < l; i++) {
	      var ae = autoEscape[i];
	      if (rest.indexOf(ae) === -1) continue;
	      var esc = encodeURIComponent(ae);
	      if (esc === ae) {
	        esc = escape(ae);
	      }
	      rest = rest.split(ae).join(esc);
	    }
	  }
	
	  // chop off from the tail first.
	  var hash = rest.indexOf('#');
	  if (hash !== -1) {
	    // got a fragment string.
	    this.hash = rest.substr(hash);
	    rest = rest.slice(0, hash);
	  }
	  var qm = rest.indexOf('?');
	  if (qm !== -1) {
	    this.search = rest.substr(qm);
	    this.query = rest.substr(qm + 1);
	    if (parseQueryString) {
	      this.query = querystring.parse(this.query);
	    }
	    rest = rest.slice(0, qm);
	  } else if (parseQueryString) {
	    // no query string, but parseQueryString still requested
	    this.search = '';
	    this.query = {};
	  }
	  if (rest) this.pathname = rest;
	  if (slashedProtocol[lowerProto] && this.hostname && !this.pathname) {
	    this.pathname = '/';
	  }
	
	  //to support http.request
	  if (this.pathname || this.search) {
	    var p = this.pathname || '';
	    var s = this.search || '';
	    this.path = p + s;
	  }
	
	  // finally, reconstruct the href based on what has been validated.
	  this.href = this.format();
	  return this;
	};
	
	// format a parsed object into a url string
	function urlFormat(obj) {
	  // ensure it's an object, and not a string url.
	  // If it's an obj, this is a no-op.
	  // this way, you can call url_format() on strings
	  // to clean up potentially wonky urls.
	  if (util.isString(obj)) obj = urlParse(obj);
	  if (!(obj instanceof Url)) return Url.prototype.format.call(obj);
	  return obj.format();
	}
	
	Url.prototype.format = function () {
	  var auth = this.auth || '';
	  if (auth) {
	    auth = encodeURIComponent(auth);
	    auth = auth.replace(/%3A/i, ':');
	    auth += '@';
	  }
	
	  var protocol = this.protocol || '',
	      pathname = this.pathname || '',
	      hash = this.hash || '',
	      host = false,
	      query = '';
	
	  if (this.host) {
	    host = auth + this.host;
	  } else if (this.hostname) {
	    host = auth + (this.hostname.indexOf(':') === -1 ? this.hostname : '[' + this.hostname + ']');
	    if (this.port) {
	      host += ':' + this.port;
	    }
	  }
	
	  if (this.query && util.isObject(this.query) && Object.keys(this.query).length) {
	    query = querystring.stringify(this.query);
	  }
	
	  var search = this.search || query && '?' + query || '';
	
	  if (protocol && protocol.substr(-1) !== ':') protocol += ':';
	
	  // only the slashedProtocols get the //.  Not mailto:, xmpp:, etc.
	  // unless they had them to begin with.
	  if (this.slashes || (!protocol || slashedProtocol[protocol]) && host !== false) {
	    host = '//' + (host || '');
	    if (pathname && pathname.charAt(0) !== '/') pathname = '/' + pathname;
	  } else if (!host) {
	    host = '';
	  }
	
	  if (hash && hash.charAt(0) !== '#') hash = '#' + hash;
	  if (search && search.charAt(0) !== '?') search = '?' + search;
	
	  pathname = pathname.replace(/[?#]/g, function (match) {
	    return encodeURIComponent(match);
	  });
	  search = search.replace('#', '%23');
	
	  return protocol + host + pathname + search + hash;
	};
	
	function urlResolve(source, relative) {
	  return urlParse(source, false, true).resolve(relative);
	}
	
	Url.prototype.resolve = function (relative) {
	  return this.resolveObject(urlParse(relative, false, true)).format();
	};
	
	function urlResolveObject(source, relative) {
	  if (!source) return relative;
	  return urlParse(source, false, true).resolveObject(relative);
	}
	
	Url.prototype.resolveObject = function (relative) {
	  if (util.isString(relative)) {
	    var rel = new Url();
	    rel.parse(relative, false, true);
	    relative = rel;
	  }
	
	  var result = new Url();
	  var tkeys = Object.keys(this);
	  for (var tk = 0; tk < tkeys.length; tk++) {
	    var tkey = tkeys[tk];
	    result[tkey] = this[tkey];
	  }
	
	  // hash is always overridden, no matter what.
	  // even href="" will remove it.
	  result.hash = relative.hash;
	
	  // if the relative url is empty, then there's nothing left to do here.
	  if (relative.href === '') {
	    result.href = result.format();
	    return result;
	  }
	
	  // hrefs like //foo/bar always cut to the protocol.
	  if (relative.slashes && !relative.protocol) {
	    // take everything except the protocol from relative
	    var rkeys = Object.keys(relative);
	    for (var rk = 0; rk < rkeys.length; rk++) {
	      var rkey = rkeys[rk];
	      if (rkey !== 'protocol') result[rkey] = relative[rkey];
	    }
	
	    //urlParse appends trailing / to urls like http://www.example.com
	    if (slashedProtocol[result.protocol] && result.hostname && !result.pathname) {
	      result.path = result.pathname = '/';
	    }
	
	    result.href = result.format();
	    return result;
	  }
	
	  if (relative.protocol && relative.protocol !== result.protocol) {
	    // if it's a known url protocol, then changing
	    // the protocol does weird things
	    // first, if it's not file:, then we MUST have a host,
	    // and if there was a path
	    // to begin with, then we MUST have a path.
	    // if it is file:, then the host is dropped,
	    // because that's known to be hostless.
	    // anything else is assumed to be absolute.
	    if (!slashedProtocol[relative.protocol]) {
	      var keys = Object.keys(relative);
	      for (var v = 0; v < keys.length; v++) {
	        var k = keys[v];
	        result[k] = relative[k];
	      }
	      result.href = result.format();
	      return result;
	    }
	
	    result.protocol = relative.protocol;
	    if (!relative.host && !hostlessProtocol[relative.protocol]) {
	      var relPath = (relative.pathname || '').split('/');
	      while (relPath.length && !(relative.host = relPath.shift())) {}
	      if (!relative.host) relative.host = '';
	      if (!relative.hostname) relative.hostname = '';
	      if (relPath[0] !== '') relPath.unshift('');
	      if (relPath.length < 2) relPath.unshift('');
	      result.pathname = relPath.join('/');
	    } else {
	      result.pathname = relative.pathname;
	    }
	    result.search = relative.search;
	    result.query = relative.query;
	    result.host = relative.host || '';
	    result.auth = relative.auth;
	    result.hostname = relative.hostname || relative.host;
	    result.port = relative.port;
	    // to support http.request
	    if (result.pathname || result.search) {
	      var p = result.pathname || '';
	      var s = result.search || '';
	      result.path = p + s;
	    }
	    result.slashes = result.slashes || relative.slashes;
	    result.href = result.format();
	    return result;
	  }
	
	  var isSourceAbs = result.pathname && result.pathname.charAt(0) === '/',
	      isRelAbs = relative.host || relative.pathname && relative.pathname.charAt(0) === '/',
	      mustEndAbs = isRelAbs || isSourceAbs || result.host && relative.pathname,
	      removeAllDots = mustEndAbs,
	      srcPath = result.pathname && result.pathname.split('/') || [],
	      relPath = relative.pathname && relative.pathname.split('/') || [],
	      psychotic = result.protocol && !slashedProtocol[result.protocol];
	
	  // if the url is a non-slashed url, then relative
	  // links like ../.. should be able
	  // to crawl up to the hostname, as well.  This is strange.
	  // result.protocol has already been set by now.
	  // Later on, put the first path part into the host field.
	  if (psychotic) {
	    result.hostname = '';
	    result.port = null;
	    if (result.host) {
	      if (srcPath[0] === '') srcPath[0] = result.host;else srcPath.unshift(result.host);
	    }
	    result.host = '';
	    if (relative.protocol) {
	      relative.hostname = null;
	      relative.port = null;
	      if (relative.host) {
	        if (relPath[0] === '') relPath[0] = relative.host;else relPath.unshift(relative.host);
	      }
	      relative.host = null;
	    }
	    mustEndAbs = mustEndAbs && (relPath[0] === '' || srcPath[0] === '');
	  }
	
	  if (isRelAbs) {
	    // it's absolute.
	    result.host = relative.host || relative.host === '' ? relative.host : result.host;
	    result.hostname = relative.hostname || relative.hostname === '' ? relative.hostname : result.hostname;
	    result.search = relative.search;
	    result.query = relative.query;
	    srcPath = relPath;
	    // fall through to the dot-handling below.
	  } else if (relPath.length) {
	    // it's relative
	    // throw away the existing file, and take the new path instead.
	    if (!srcPath) srcPath = [];
	    srcPath.pop();
	    srcPath = srcPath.concat(relPath);
	    result.search = relative.search;
	    result.query = relative.query;
	  } else if (!util.isNullOrUndefined(relative.search)) {
	    // just pull out the search.
	    // like href='?foo'.
	    // Put this after the other two cases because it simplifies the booleans
	    if (psychotic) {
	      result.hostname = result.host = srcPath.shift();
	      //occationaly the auth can get stuck only in host
	      //this especially happens in cases like
	      //url.resolveObject('mailto:local1@domain1', 'local2@domain2')
	      var authInHost = result.host && result.host.indexOf('@') > 0 ? result.host.split('@') : false;
	      if (authInHost) {
	        result.auth = authInHost.shift();
	        result.host = result.hostname = authInHost.shift();
	      }
	    }
	    result.search = relative.search;
	    result.query = relative.query;
	    //to support http.request
	    if (!util.isNull(result.pathname) || !util.isNull(result.search)) {
	      result.path = (result.pathname ? result.pathname : '') + (result.search ? result.search : '');
	    }
	    result.href = result.format();
	    return result;
	  }
	
	  if (!srcPath.length) {
	    // no path at all.  easy.
	    // we've already handled the other stuff above.
	    result.pathname = null;
	    //to support http.request
	    if (result.search) {
	      result.path = '/' + result.search;
	    } else {
	      result.path = null;
	    }
	    result.href = result.format();
	    return result;
	  }
	
	  // if a url ENDs in . or .., then it must get a trailing slash.
	  // however, if it ends in anything else non-slashy,
	  // then it must NOT get a trailing slash.
	  var last = srcPath.slice(-1)[0];
	  var hasTrailingSlash = (result.host || relative.host || srcPath.length > 1) && (last === '.' || last === '..') || last === '';
	
	  // strip single dots, resolve double dots to parent dir
	  // if the path tries to go above the root, `up` ends up > 0
	  var up = 0;
	  for (var i = srcPath.length; i >= 0; i--) {
	    last = srcPath[i];
	    if (last === '.') {
	      srcPath.splice(i, 1);
	    } else if (last === '..') {
	      srcPath.splice(i, 1);
	      up++;
	    } else if (up) {
	      srcPath.splice(i, 1);
	      up--;
	    }
	  }
	
	  // if the path is allowed to go above the root, restore leading ..s
	  if (!mustEndAbs && !removeAllDots) {
	    for (; up--; up) {
	      srcPath.unshift('..');
	    }
	  }
	
	  if (mustEndAbs && srcPath[0] !== '' && (!srcPath[0] || srcPath[0].charAt(0) !== '/')) {
	    srcPath.unshift('');
	  }
	
	  if (hasTrailingSlash && srcPath.join('/').substr(-1) !== '/') {
	    srcPath.push('');
	  }
	
	  var isAbsolute = srcPath[0] === '' || srcPath[0] && srcPath[0].charAt(0) === '/';
	
	  // put the host back
	  if (psychotic) {
	    result.hostname = result.host = isAbsolute ? '' : srcPath.length ? srcPath.shift() : '';
	    //occationaly the auth can get stuck only in host
	    //this especially happens in cases like
	    //url.resolveObject('mailto:local1@domain1', 'local2@domain2')
	    var authInHost = result.host && result.host.indexOf('@') > 0 ? result.host.split('@') : false;
	    if (authInHost) {
	      result.auth = authInHost.shift();
	      result.host = result.hostname = authInHost.shift();
	    }
	  }
	
	  mustEndAbs = mustEndAbs || result.host && srcPath.length;
	
	  if (mustEndAbs && !isAbsolute) {
	    srcPath.unshift('');
	  }
	
	  if (!srcPath.length) {
	    result.pathname = null;
	    result.path = null;
	  } else {
	    result.pathname = srcPath.join('/');
	  }
	
	  //to support request.http
	  if (!util.isNull(result.pathname) || !util.isNull(result.search)) {
	    result.path = (result.pathname ? result.pathname : '') + (result.search ? result.search : '');
	  }
	  result.auth = relative.auth || result.auth;
	  result.slashes = result.slashes || relative.slashes;
	  result.href = result.format();
	  return result;
	};
	
	Url.prototype.parseHost = function () {
	  var host = this.host;
	  var port = portPattern.exec(host);
	  if (port) {
	    port = port[0];
	    if (port !== ':') {
	      this.port = port.substr(1);
	    }
	    host = host.substr(0, host.length - port.length);
	  }
	  if (host) this.hostname = host;
	};

/***/ }),
/* 276 */
/***/ (function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/* WEBPACK VAR INJECTION */(function(module, global) {'use strict';
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
	
	/*! https://mths.be/punycode v1.3.2 by @mathias */
	;(function (root) {
	
		/** Detect free variables */
		var freeExports = ( false ? 'undefined' : _typeof(exports)) == 'object' && exports && !exports.nodeType && exports;
		var freeModule = ( false ? 'undefined' : _typeof(module)) == 'object' && module && !module.nodeType && module;
		var freeGlobal = (typeof global === 'undefined' ? 'undefined' : _typeof(global)) == 'object' && global;
		if (freeGlobal.global === freeGlobal || freeGlobal.window === freeGlobal || freeGlobal.self === freeGlobal) {
			root = freeGlobal;
		}
	
		/**
	  * The `punycode` object.
	  * @name punycode
	  * @type Object
	  */
		var punycode,
	
	
		/** Highest positive signed 32-bit float value */
		maxInt = 2147483647,
		    // aka. 0x7FFFFFFF or 2^31-1
	
		/** Bootstring parameters */
		base = 36,
		    tMin = 1,
		    tMax = 26,
		    skew = 38,
		    damp = 700,
		    initialBias = 72,
		    initialN = 128,
		    // 0x80
		delimiter = '-',
		    // '\x2D'
	
		/** Regular expressions */
		regexPunycode = /^xn--/,
		    regexNonASCII = /[^\x20-\x7E]/,
		    // unprintable ASCII chars + non-ASCII chars
		regexSeparators = /[\x2E\u3002\uFF0E\uFF61]/g,
		    // RFC 3490 separators
	
		/** Error messages */
		errors = {
			'overflow': 'Overflow: input needs wider integers to process',
			'not-basic': 'Illegal input >= 0x80 (not a basic code point)',
			'invalid-input': 'Invalid input'
		},
	
	
		/** Convenience shortcuts */
		baseMinusTMin = base - tMin,
		    floor = Math.floor,
		    stringFromCharCode = String.fromCharCode,
	
	
		/** Temporary variable */
		key;
	
		/*--------------------------------------------------------------------------*/
	
		/**
	  * A generic error utility function.
	  * @private
	  * @param {String} type The error type.
	  * @returns {Error} Throws a `RangeError` with the applicable error message.
	  */
		function error(type) {
			throw RangeError(errors[type]);
		}
	
		/**
	  * A generic `Array#map` utility function.
	  * @private
	  * @param {Array} array The array to iterate over.
	  * @param {Function} callback The function that gets called for every array
	  * item.
	  * @returns {Array} A new array of values returned by the callback function.
	  */
		function map(array, fn) {
			var length = array.length;
			var result = [];
			while (length--) {
				result[length] = fn(array[length]);
			}
			return result;
		}
	
		/**
	  * A simple `Array#map`-like wrapper to work with domain name strings or email
	  * addresses.
	  * @private
	  * @param {String} domain The domain name or email address.
	  * @param {Function} callback The function that gets called for every
	  * character.
	  * @returns {Array} A new string of characters returned by the callback
	  * function.
	  */
		function mapDomain(string, fn) {
			var parts = string.split('@');
			var result = '';
			if (parts.length > 1) {
				// In email addresses, only the domain name should be punycoded. Leave
				// the local part (i.e. everything up to `@`) intact.
				result = parts[0] + '@';
				string = parts[1];
			}
			// Avoid `split(regex)` for IE8 compatibility. See #17.
			string = string.replace(regexSeparators, '\x2E');
			var labels = string.split('.');
			var encoded = map(labels, fn).join('.');
			return result + encoded;
		}
	
		/**
	  * Creates an array containing the numeric code points of each Unicode
	  * character in the string. While JavaScript uses UCS-2 internally,
	  * this function will convert a pair of surrogate halves (each of which
	  * UCS-2 exposes as separate characters) into a single code point,
	  * matching UTF-16.
	  * @see `punycode.ucs2.encode`
	  * @see <https://mathiasbynens.be/notes/javascript-encoding>
	  * @memberOf punycode.ucs2
	  * @name decode
	  * @param {String} string The Unicode input string (UCS-2).
	  * @returns {Array} The new array of code points.
	  */
		function ucs2decode(string) {
			var output = [],
			    counter = 0,
			    length = string.length,
			    value,
			    extra;
			while (counter < length) {
				value = string.charCodeAt(counter++);
				if (value >= 0xD800 && value <= 0xDBFF && counter < length) {
					// high surrogate, and there is a next character
					extra = string.charCodeAt(counter++);
					if ((extra & 0xFC00) == 0xDC00) {
						// low surrogate
						output.push(((value & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000);
					} else {
						// unmatched surrogate; only append this code unit, in case the next
						// code unit is the high surrogate of a surrogate pair
						output.push(value);
						counter--;
					}
				} else {
					output.push(value);
				}
			}
			return output;
		}
	
		/**
	  * Creates a string based on an array of numeric code points.
	  * @see `punycode.ucs2.decode`
	  * @memberOf punycode.ucs2
	  * @name encode
	  * @param {Array} codePoints The array of numeric code points.
	  * @returns {String} The new Unicode string (UCS-2).
	  */
		function ucs2encode(array) {
			return map(array, function (value) {
				var output = '';
				if (value > 0xFFFF) {
					value -= 0x10000;
					output += stringFromCharCode(value >>> 10 & 0x3FF | 0xD800);
					value = 0xDC00 | value & 0x3FF;
				}
				output += stringFromCharCode(value);
				return output;
			}).join('');
		}
	
		/**
	  * Converts a basic code point into a digit/integer.
	  * @see `digitToBasic()`
	  * @private
	  * @param {Number} codePoint The basic numeric code point value.
	  * @returns {Number} The numeric value of a basic code point (for use in
	  * representing integers) in the range `0` to `base - 1`, or `base` if
	  * the code point does not represent a value.
	  */
		function basicToDigit(codePoint) {
			if (codePoint - 48 < 10) {
				return codePoint - 22;
			}
			if (codePoint - 65 < 26) {
				return codePoint - 65;
			}
			if (codePoint - 97 < 26) {
				return codePoint - 97;
			}
			return base;
		}
	
		/**
	  * Converts a digit/integer into a basic code point.
	  * @see `basicToDigit()`
	  * @private
	  * @param {Number} digit The numeric value of a basic code point.
	  * @returns {Number} The basic code point whose value (when used for
	  * representing integers) is `digit`, which needs to be in the range
	  * `0` to `base - 1`. If `flag` is non-zero, the uppercase form is
	  * used; else, the lowercase form is used. The behavior is undefined
	  * if `flag` is non-zero and `digit` has no uppercase form.
	  */
		function digitToBasic(digit, flag) {
			//  0..25 map to ASCII a..z or A..Z
			// 26..35 map to ASCII 0..9
			return digit + 22 + 75 * (digit < 26) - ((flag != 0) << 5);
		}
	
		/**
	  * Bias adaptation function as per section 3.4 of RFC 3492.
	  * http://tools.ietf.org/html/rfc3492#section-3.4
	  * @private
	  */
		function adapt(delta, numPoints, firstTime) {
			var k = 0;
			delta = firstTime ? floor(delta / damp) : delta >> 1;
			delta += floor(delta / numPoints);
			for (; /* no initialization */delta > baseMinusTMin * tMax >> 1; k += base) {
				delta = floor(delta / baseMinusTMin);
			}
			return floor(k + (baseMinusTMin + 1) * delta / (delta + skew));
		}
	
		/**
	  * Converts a Punycode string of ASCII-only symbols to a string of Unicode
	  * symbols.
	  * @memberOf punycode
	  * @param {String} input The Punycode string of ASCII-only symbols.
	  * @returns {String} The resulting string of Unicode symbols.
	  */
		function decode(input) {
			// Don't use UCS-2
			var output = [],
			    inputLength = input.length,
			    out,
			    i = 0,
			    n = initialN,
			    bias = initialBias,
			    basic,
			    j,
			    index,
			    oldi,
			    w,
			    k,
			    digit,
			    t,
	
			/** Cached calculation results */
			baseMinusT;
	
			// Handle the basic code points: let `basic` be the number of input code
			// points before the last delimiter, or `0` if there is none, then copy
			// the first basic code points to the output.
	
			basic = input.lastIndexOf(delimiter);
			if (basic < 0) {
				basic = 0;
			}
	
			for (j = 0; j < basic; ++j) {
				// if it's not a basic code point
				if (input.charCodeAt(j) >= 0x80) {
					error('not-basic');
				}
				output.push(input.charCodeAt(j));
			}
	
			// Main decoding loop: start just after the last delimiter if any basic code
			// points were copied; start at the beginning otherwise.
	
			for (index = basic > 0 ? basic + 1 : 0; index < inputLength;) /* no final expression */{
	
				// `index` is the index of the next character to be consumed.
				// Decode a generalized variable-length integer into `delta`,
				// which gets added to `i`. The overflow checking is easier
				// if we increase `i` as we go, then subtract off its starting
				// value at the end to obtain `delta`.
				for (oldi = i, w = 1, k = base;; /* no condition */k += base) {
	
					if (index >= inputLength) {
						error('invalid-input');
					}
	
					digit = basicToDigit(input.charCodeAt(index++));
	
					if (digit >= base || digit > floor((maxInt - i) / w)) {
						error('overflow');
					}
	
					i += digit * w;
					t = k <= bias ? tMin : k >= bias + tMax ? tMax : k - bias;
	
					if (digit < t) {
						break;
					}
	
					baseMinusT = base - t;
					if (w > floor(maxInt / baseMinusT)) {
						error('overflow');
					}
	
					w *= baseMinusT;
				}
	
				out = output.length + 1;
				bias = adapt(i - oldi, out, oldi == 0);
	
				// `i` was supposed to wrap around from `out` to `0`,
				// incrementing `n` each time, so we'll fix that now:
				if (floor(i / out) > maxInt - n) {
					error('overflow');
				}
	
				n += floor(i / out);
				i %= out;
	
				// Insert `n` at position `i` of the output
				output.splice(i++, 0, n);
			}
	
			return ucs2encode(output);
		}
	
		/**
	  * Converts a string of Unicode symbols (e.g. a domain name label) to a
	  * Punycode string of ASCII-only symbols.
	  * @memberOf punycode
	  * @param {String} input The string of Unicode symbols.
	  * @returns {String} The resulting Punycode string of ASCII-only symbols.
	  */
		function encode(input) {
			var n,
			    delta,
			    handledCPCount,
			    basicLength,
			    bias,
			    j,
			    m,
			    q,
			    k,
			    t,
			    currentValue,
			    output = [],
	
			/** `inputLength` will hold the number of code points in `input`. */
			inputLength,
	
			/** Cached calculation results */
			handledCPCountPlusOne,
			    baseMinusT,
			    qMinusT;
	
			// Convert the input in UCS-2 to Unicode
			input = ucs2decode(input);
	
			// Cache the length
			inputLength = input.length;
	
			// Initialize the state
			n = initialN;
			delta = 0;
			bias = initialBias;
	
			// Handle the basic code points
			for (j = 0; j < inputLength; ++j) {
				currentValue = input[j];
				if (currentValue < 0x80) {
					output.push(stringFromCharCode(currentValue));
				}
			}
	
			handledCPCount = basicLength = output.length;
	
			// `handledCPCount` is the number of code points that have been handled;
			// `basicLength` is the number of basic code points.
	
			// Finish the basic string - if it is not empty - with a delimiter
			if (basicLength) {
				output.push(delimiter);
			}
	
			// Main encoding loop:
			while (handledCPCount < inputLength) {
	
				// All non-basic code points < n have been handled already. Find the next
				// larger one:
				for (m = maxInt, j = 0; j < inputLength; ++j) {
					currentValue = input[j];
					if (currentValue >= n && currentValue < m) {
						m = currentValue;
					}
				}
	
				// Increase `delta` enough to advance the decoder's <n,i> state to <m,0>,
				// but guard against overflow
				handledCPCountPlusOne = handledCPCount + 1;
				if (m - n > floor((maxInt - delta) / handledCPCountPlusOne)) {
					error('overflow');
				}
	
				delta += (m - n) * handledCPCountPlusOne;
				n = m;
	
				for (j = 0; j < inputLength; ++j) {
					currentValue = input[j];
	
					if (currentValue < n && ++delta > maxInt) {
						error('overflow');
					}
	
					if (currentValue == n) {
						// Represent delta as a generalized variable-length integer
						for (q = delta, k = base;; /* no condition */k += base) {
							t = k <= bias ? tMin : k >= bias + tMax ? tMax : k - bias;
							if (q < t) {
								break;
							}
							qMinusT = q - t;
							baseMinusT = base - t;
							output.push(stringFromCharCode(digitToBasic(t + qMinusT % baseMinusT, 0)));
							q = floor(qMinusT / baseMinusT);
						}
	
						output.push(stringFromCharCode(digitToBasic(q, 0)));
						bias = adapt(delta, handledCPCountPlusOne, handledCPCount == basicLength);
						delta = 0;
						++handledCPCount;
					}
				}
	
				++delta;
				++n;
			}
			return output.join('');
		}
	
		/**
	  * Converts a Punycode string representing a domain name or an email address
	  * to Unicode. Only the Punycoded parts of the input will be converted, i.e.
	  * it doesn't matter if you call it on a string that has already been
	  * converted to Unicode.
	  * @memberOf punycode
	  * @param {String} input The Punycoded domain name or email address to
	  * convert to Unicode.
	  * @returns {String} The Unicode representation of the given Punycode
	  * string.
	  */
		function toUnicode(input) {
			return mapDomain(input, function (string) {
				return regexPunycode.test(string) ? decode(string.slice(4).toLowerCase()) : string;
			});
		}
	
		/**
	  * Converts a Unicode string representing a domain name or an email address to
	  * Punycode. Only the non-ASCII parts of the domain name will be converted,
	  * i.e. it doesn't matter if you call it with a domain that's already in
	  * ASCII.
	  * @memberOf punycode
	  * @param {String} input The domain name or email address to convert, as a
	  * Unicode string.
	  * @returns {String} The Punycode representation of the given domain name or
	  * email address.
	  */
		function toASCII(input) {
			return mapDomain(input, function (string) {
				return regexNonASCII.test(string) ? 'xn--' + encode(string) : string;
			});
		}
	
		/*--------------------------------------------------------------------------*/
	
		/** Define the public API */
		punycode = {
			/**
	   * A string representing the current Punycode.js version number.
	   * @memberOf punycode
	   * @type String
	   */
			'version': '1.3.2',
			/**
	   * An object of methods to convert from JavaScript's internal character
	   * representation (UCS-2) to Unicode code points, and back.
	   * @see <https://mathiasbynens.be/notes/javascript-encoding>
	   * @memberOf punycode
	   * @type Object
	   */
			'ucs2': {
				'decode': ucs2decode,
				'encode': ucs2encode
			},
			'decode': decode,
			'encode': encode,
			'toASCII': toASCII,
			'toUnicode': toUnicode
		};
	
		/** Expose `punycode` */
		// Some AMD build optimizers, like r.js, check for specific condition patterns
		// like the following:
		if ("function" == 'function' && _typeof(__webpack_require__(277)) == 'object' && __webpack_require__(277)) {
			!(__WEBPACK_AMD_DEFINE_RESULT__ = function () {
				return punycode;
			}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
		} else if (freeExports && freeModule) {
			if (module.exports == freeExports) {
				// in Node.js or RingoJS v0.8.0+
				freeModule.exports = punycode;
			} else {
				// in Narwhal or RingoJS v0.7.0-
				for (key in punycode) {
					punycode.hasOwnProperty(key) && (freeExports[key] = punycode[key]);
				}
			}
		} else {
			// in Rhino or a web browser
			root.punycode = punycode;
		}
	})(undefined);
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(205)(module), (function() { return this; }())))

/***/ }),
/* 277 */
/***/ (function(module, exports) {

	/* WEBPACK VAR INJECTION */(function(__webpack_amd_options__) {module.exports = __webpack_amd_options__;
	
	/* WEBPACK VAR INJECTION */}.call(exports, {}))

/***/ }),
/* 278 */
/***/ (function(module, exports) {

	'use strict';
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
	
	module.exports = {
	  isString: function isString(arg) {
	    return typeof arg === 'string';
	  },
	  isObject: function isObject(arg) {
	    return (typeof arg === 'undefined' ? 'undefined' : _typeof(arg)) === 'object' && arg !== null;
	  },
	  isNull: function isNull(arg) {
	    return arg === null;
	  },
	  isNullOrUndefined: function isNullOrUndefined(arg) {
	    return arg == null;
	  }
	};

/***/ }),
/* 279 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	exports.decode = exports.parse = __webpack_require__(280);
	exports.encode = exports.stringify = __webpack_require__(281);

/***/ }),
/* 280 */
/***/ (function(module, exports) {

	// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.
	
	'use strict';
	
	// If obj.hasOwnProperty has been overridden, then calling
	// obj.hasOwnProperty(prop) will break.
	// See: https://github.com/joyent/node/issues/1707
	
	function hasOwnProperty(obj, prop) {
	  return Object.prototype.hasOwnProperty.call(obj, prop);
	}
	
	module.exports = function (qs, sep, eq, options) {
	  sep = sep || '&';
	  eq = eq || '=';
	  var obj = {};
	
	  if (typeof qs !== 'string' || qs.length === 0) {
	    return obj;
	  }
	
	  var regexp = /\+/g;
	  qs = qs.split(sep);
	
	  var maxKeys = 1000;
	  if (options && typeof options.maxKeys === 'number') {
	    maxKeys = options.maxKeys;
	  }
	
	  var len = qs.length;
	  // maxKeys <= 0 means that we should not limit keys count
	  if (maxKeys > 0 && len > maxKeys) {
	    len = maxKeys;
	  }
	
	  for (var i = 0; i < len; ++i) {
	    var x = qs[i].replace(regexp, '%20'),
	        idx = x.indexOf(eq),
	        kstr,
	        vstr,
	        k,
	        v;
	
	    if (idx >= 0) {
	      kstr = x.substr(0, idx);
	      vstr = x.substr(idx + 1);
	    } else {
	      kstr = x;
	      vstr = '';
	    }
	
	    k = decodeURIComponent(kstr);
	    v = decodeURIComponent(vstr);
	
	    if (!hasOwnProperty(obj, k)) {
	      obj[k] = v;
	    } else if (Array.isArray(obj[k])) {
	      obj[k].push(v);
	    } else {
	      obj[k] = [obj[k], v];
	    }
	  }
	
	  return obj;
	};

/***/ }),
/* 281 */
/***/ (function(module, exports) {

	// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.
	
	'use strict';
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
	
	var stringifyPrimitive = function stringifyPrimitive(v) {
	  switch (typeof v === 'undefined' ? 'undefined' : _typeof(v)) {
	    case 'string':
	      return v;
	
	    case 'boolean':
	      return v ? 'true' : 'false';
	
	    case 'number':
	      return isFinite(v) ? v : '';
	
	    default:
	      return '';
	  }
	};
	
	module.exports = function (obj, sep, eq, name) {
	  sep = sep || '&';
	  eq = eq || '=';
	  if (obj === null) {
	    obj = undefined;
	  }
	
	  if ((typeof obj === 'undefined' ? 'undefined' : _typeof(obj)) === 'object') {
	    return Object.keys(obj).map(function (k) {
	      var ks = encodeURIComponent(stringifyPrimitive(k)) + eq;
	      if (Array.isArray(obj[k])) {
	        return obj[k].map(function (v) {
	          return ks + encodeURIComponent(stringifyPrimitive(v));
	        }).join(sep);
	      } else {
	        return ks + encodeURIComponent(stringifyPrimitive(obj[k]));
	      }
	    }).join(sep);
	  }
	
	  if (!name) return '';
	  return encodeURIComponent(stringifyPrimitive(name)) + eq + encodeURIComponent(stringifyPrimitive(obj));
	};

/***/ }),
/* 282 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.
	
	module.exports = Stream;
	
	var EE = __webpack_require__(283).EventEmitter;
	var inherits = __webpack_require__(284);
	
	inherits(Stream, EE);
	Stream.Readable = __webpack_require__(285);
	Stream.Writable = __webpack_require__(305);
	Stream.Duplex = __webpack_require__(306);
	Stream.Transform = __webpack_require__(307);
	Stream.PassThrough = __webpack_require__(308);
	
	// Backwards-compat with node 0.4.x
	Stream.Stream = Stream;
	
	// old-style streams.  Note that the pipe method (the only relevant
	// part of this class) is overridden in the Readable class.
	
	function Stream() {
	  EE.call(this);
	}
	
	Stream.prototype.pipe = function (dest, options) {
	  var source = this;
	
	  function ondata(chunk) {
	    if (dest.writable) {
	      if (false === dest.write(chunk) && source.pause) {
	        source.pause();
	      }
	    }
	  }
	
	  source.on('data', ondata);
	
	  function ondrain() {
	    if (source.readable && source.resume) {
	      source.resume();
	    }
	  }
	
	  dest.on('drain', ondrain);
	
	  // If the 'end' option is not supplied, dest.end() will be called when
	  // source gets the 'end' or 'close' events.  Only dest.end() once.
	  if (!dest._isStdio && (!options || options.end !== false)) {
	    source.on('end', onend);
	    source.on('close', onclose);
	  }
	
	  var didOnEnd = false;
	  function onend() {
	    if (didOnEnd) return;
	    didOnEnd = true;
	
	    dest.end();
	  }
	
	  function onclose() {
	    if (didOnEnd) return;
	    didOnEnd = true;
	
	    if (typeof dest.destroy === 'function') dest.destroy();
	  }
	
	  // don't leave dangling pipes when there are errors.
	  function onerror(er) {
	    cleanup();
	    if (EE.listenerCount(this, 'error') === 0) {
	      throw er; // Unhandled stream error in pipe.
	    }
	  }
	
	  source.on('error', onerror);
	  dest.on('error', onerror);
	
	  // remove all the event listeners that were added.
	  function cleanup() {
	    source.removeListener('data', ondata);
	    dest.removeListener('drain', ondrain);
	
	    source.removeListener('end', onend);
	    source.removeListener('close', onclose);
	
	    source.removeListener('error', onerror);
	    dest.removeListener('error', onerror);
	
	    source.removeListener('end', cleanup);
	    source.removeListener('close', cleanup);
	
	    dest.removeListener('close', cleanup);
	  }
	
	  source.on('end', cleanup);
	  source.on('close', cleanup);
	
	  dest.on('close', cleanup);
	
	  dest.emit('pipe', source);
	
	  // Allow for unix-like usage: A.pipe(B).pipe(C)
	  return dest;
	};

/***/ }),
/* 283 */
/***/ (function(module, exports) {

	'use strict';
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
	
	// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.
	
	function EventEmitter() {
	  this._events = this._events || {};
	  this._maxListeners = this._maxListeners || undefined;
	}
	module.exports = EventEmitter;
	
	// Backwards-compat with node 0.10.x
	EventEmitter.EventEmitter = EventEmitter;
	
	EventEmitter.prototype._events = undefined;
	EventEmitter.prototype._maxListeners = undefined;
	
	// By default EventEmitters will print a warning if more than 10 listeners are
	// added to it. This is a useful default which helps finding memory leaks.
	EventEmitter.defaultMaxListeners = 10;
	
	// Obviously not all Emitters should be limited to 10. This function allows
	// that to be increased. Set to zero for unlimited.
	EventEmitter.prototype.setMaxListeners = function (n) {
	  if (!isNumber(n) || n < 0 || isNaN(n)) throw TypeError('n must be a positive number');
	  this._maxListeners = n;
	  return this;
	};
	
	EventEmitter.prototype.emit = function (type) {
	  var er, handler, len, args, i, listeners;
	
	  if (!this._events) this._events = {};
	
	  // If there is no 'error' event listener then throw.
	  if (type === 'error') {
	    if (!this._events.error || isObject(this._events.error) && !this._events.error.length) {
	      er = arguments[1];
	      if (er instanceof Error) {
	        throw er; // Unhandled 'error' event
	      } else {
	        // At least give some kind of context to the user
	        var err = new Error('Uncaught, unspecified "error" event. (' + er + ')');
	        err.context = er;
	        throw err;
	      }
	    }
	  }
	
	  handler = this._events[type];
	
	  if (isUndefined(handler)) return false;
	
	  if (isFunction(handler)) {
	    switch (arguments.length) {
	      // fast cases
	      case 1:
	        handler.call(this);
	        break;
	      case 2:
	        handler.call(this, arguments[1]);
	        break;
	      case 3:
	        handler.call(this, arguments[1], arguments[2]);
	        break;
	      // slower
	      default:
	        args = Array.prototype.slice.call(arguments, 1);
	        handler.apply(this, args);
	    }
	  } else if (isObject(handler)) {
	    args = Array.prototype.slice.call(arguments, 1);
	    listeners = handler.slice();
	    len = listeners.length;
	    for (i = 0; i < len; i++) {
	      listeners[i].apply(this, args);
	    }
	  }
	
	  return true;
	};
	
	EventEmitter.prototype.addListener = function (type, listener) {
	  var m;
	
	  if (!isFunction(listener)) throw TypeError('listener must be a function');
	
	  if (!this._events) this._events = {};
	
	  // To avoid recursion in the case that type === "newListener"! Before
	  // adding it to the listeners, first emit "newListener".
	  if (this._events.newListener) this.emit('newListener', type, isFunction(listener.listener) ? listener.listener : listener);
	
	  if (!this._events[type])
	    // Optimize the case of one listener. Don't need the extra array object.
	    this._events[type] = listener;else if (isObject(this._events[type]))
	    // If we've already got an array, just append.
	    this._events[type].push(listener);else
	    // Adding the second element, need to change to array.
	    this._events[type] = [this._events[type], listener];
	
	  // Check for listener leak
	  if (isObject(this._events[type]) && !this._events[type].warned) {
	    if (!isUndefined(this._maxListeners)) {
	      m = this._maxListeners;
	    } else {
	      m = EventEmitter.defaultMaxListeners;
	    }
	
	    if (m && m > 0 && this._events[type].length > m) {
	      this._events[type].warned = true;
	      console.error('(node) warning: possible EventEmitter memory ' + 'leak detected. %d listeners added. ' + 'Use emitter.setMaxListeners() to increase limit.', this._events[type].length);
	      if (typeof console.trace === 'function') {
	        // not supported in IE 10
	        console.trace();
	      }
	    }
	  }
	
	  return this;
	};
	
	EventEmitter.prototype.on = EventEmitter.prototype.addListener;
	
	EventEmitter.prototype.once = function (type, listener) {
	  if (!isFunction(listener)) throw TypeError('listener must be a function');
	
	  var fired = false;
	
	  function g() {
	    this.removeListener(type, g);
	
	    if (!fired) {
	      fired = true;
	      listener.apply(this, arguments);
	    }
	  }
	
	  g.listener = listener;
	  this.on(type, g);
	
	  return this;
	};
	
	// emits a 'removeListener' event iff the listener was removed
	EventEmitter.prototype.removeListener = function (type, listener) {
	  var list, position, length, i;
	
	  if (!isFunction(listener)) throw TypeError('listener must be a function');
	
	  if (!this._events || !this._events[type]) return this;
	
	  list = this._events[type];
	  length = list.length;
	  position = -1;
	
	  if (list === listener || isFunction(list.listener) && list.listener === listener) {
	    delete this._events[type];
	    if (this._events.removeListener) this.emit('removeListener', type, listener);
	  } else if (isObject(list)) {
	    for (i = length; i-- > 0;) {
	      if (list[i] === listener || list[i].listener && list[i].listener === listener) {
	        position = i;
	        break;
	      }
	    }
	
	    if (position < 0) return this;
	
	    if (list.length === 1) {
	      list.length = 0;
	      delete this._events[type];
	    } else {
	      list.splice(position, 1);
	    }
	
	    if (this._events.removeListener) this.emit('removeListener', type, listener);
	  }
	
	  return this;
	};
	
	EventEmitter.prototype.removeAllListeners = function (type) {
	  var key, listeners;
	
	  if (!this._events) return this;
	
	  // not listening for removeListener, no need to emit
	  if (!this._events.removeListener) {
	    if (arguments.length === 0) this._events = {};else if (this._events[type]) delete this._events[type];
	    return this;
	  }
	
	  // emit removeListener for all listeners on all events
	  if (arguments.length === 0) {
	    for (key in this._events) {
	      if (key === 'removeListener') continue;
	      this.removeAllListeners(key);
	    }
	    this.removeAllListeners('removeListener');
	    this._events = {};
	    return this;
	  }
	
	  listeners = this._events[type];
	
	  if (isFunction(listeners)) {
	    this.removeListener(type, listeners);
	  } else if (listeners) {
	    // LIFO order
	    while (listeners.length) {
	      this.removeListener(type, listeners[listeners.length - 1]);
	    }
	  }
	  delete this._events[type];
	
	  return this;
	};
	
	EventEmitter.prototype.listeners = function (type) {
	  var ret;
	  if (!this._events || !this._events[type]) ret = [];else if (isFunction(this._events[type])) ret = [this._events[type]];else ret = this._events[type].slice();
	  return ret;
	};
	
	EventEmitter.prototype.listenerCount = function (type) {
	  if (this._events) {
	    var evlistener = this._events[type];
	
	    if (isFunction(evlistener)) return 1;else if (evlistener) return evlistener.length;
	  }
	  return 0;
	};
	
	EventEmitter.listenerCount = function (emitter, type) {
	  return emitter.listenerCount(type);
	};
	
	function isFunction(arg) {
	  return typeof arg === 'function';
	}
	
	function isNumber(arg) {
	  return typeof arg === 'number';
	}
	
	function isObject(arg) {
	  return (typeof arg === 'undefined' ? 'undefined' : _typeof(arg)) === 'object' && arg !== null;
	}
	
	function isUndefined(arg) {
	  return arg === void 0;
	}

/***/ }),
/* 284 */
/***/ (function(module, exports) {

	'use strict';
	
	if (typeof Object.create === 'function') {
	  // implementation from standard node.js 'util' module
	  module.exports = function inherits(ctor, superCtor) {
	    ctor.super_ = superCtor;
	    ctor.prototype = Object.create(superCtor.prototype, {
	      constructor: {
	        value: ctor,
	        enumerable: false,
	        writable: true,
	        configurable: true
	      }
	    });
	  };
	} else {
	  // old school shim for old browsers
	  module.exports = function inherits(ctor, superCtor) {
	    ctor.super_ = superCtor;
	    var TempCtor = function TempCtor() {};
	    TempCtor.prototype = superCtor.prototype;
	    ctor.prototype = new TempCtor();
	    ctor.prototype.constructor = ctor;
	  };
	}

/***/ }),
/* 285 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	exports = module.exports = __webpack_require__(286);
	exports.Stream = exports;
	exports.Readable = exports;
	exports.Writable = __webpack_require__(298);
	exports.Duplex = __webpack_require__(297);
	exports.Transform = __webpack_require__(303);
	exports.PassThrough = __webpack_require__(304);

/***/ }),
/* 286 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';
	
	module.exports = Readable;
	
	/*<replacement>*/
	var processNextTick = __webpack_require__(287);
	/*</replacement>*/
	
	/*<replacement>*/
	var isArray = __webpack_require__(288);
	/*</replacement>*/
	
	/*<replacement>*/
	var Duplex;
	/*</replacement>*/
	
	Readable.ReadableState = ReadableState;
	
	/*<replacement>*/
	var EE = __webpack_require__(283).EventEmitter;
	
	var EElistenerCount = function EElistenerCount(emitter, type) {
	  return emitter.listeners(type).length;
	};
	/*</replacement>*/
	
	/*<replacement>*/
	var Stream = __webpack_require__(289);
	/*</replacement>*/
	
	var Buffer = __webpack_require__(290).Buffer;
	/*<replacement>*/
	var bufferShim = __webpack_require__(293);
	/*</replacement>*/
	
	/*<replacement>*/
	var util = __webpack_require__(294);
	util.inherits = __webpack_require__(284);
	/*</replacement>*/
	
	/*<replacement>*/
	var debugUtil = __webpack_require__(295);
	var debug = void 0;
	if (debugUtil && debugUtil.debuglog) {
	  debug = debugUtil.debuglog('stream');
	} else {
	  debug = function debug() {};
	}
	/*</replacement>*/
	
	var BufferList = __webpack_require__(296);
	var StringDecoder;
	
	util.inherits(Readable, Stream);
	
	var kProxyEvents = ['error', 'close', 'destroy', 'pause', 'resume'];
	
	function prependListener(emitter, event, fn) {
	  // Sadly this is not cacheable as some libraries bundle their own
	  // event emitter implementation with them.
	  if (typeof emitter.prependListener === 'function') {
	    return emitter.prependListener(event, fn);
	  } else {
	    // This is a hack to make sure that our error handler is attached before any
	    // userland ones.  NEVER DO THIS. This is here only because this code needs
	    // to continue to work with older versions of Node.js that do not include
	    // the prependListener() method. The goal is to eventually remove this hack.
	    if (!emitter._events || !emitter._events[event]) emitter.on(event, fn);else if (isArray(emitter._events[event])) emitter._events[event].unshift(fn);else emitter._events[event] = [fn, emitter._events[event]];
	  }
	}
	
	function ReadableState(options, stream) {
	  Duplex = Duplex || __webpack_require__(297);
	
	  options = options || {};
	
	  // object stream flag. Used to make read(n) ignore n and to
	  // make all the buffer merging and length checks go away
	  this.objectMode = !!options.objectMode;
	
	  if (stream instanceof Duplex) this.objectMode = this.objectMode || !!options.readableObjectMode;
	
	  // the point at which it stops calling _read() to fill the buffer
	  // Note: 0 is a valid value, means "don't call _read preemptively ever"
	  var hwm = options.highWaterMark;
	  var defaultHwm = this.objectMode ? 16 : 16 * 1024;
	  this.highWaterMark = hwm || hwm === 0 ? hwm : defaultHwm;
	
	  // cast to ints.
	  this.highWaterMark = ~~this.highWaterMark;
	
	  // A linked list is used to store data chunks instead of an array because the
	  // linked list can remove elements from the beginning faster than
	  // array.shift()
	  this.buffer = new BufferList();
	  this.length = 0;
	  this.pipes = null;
	  this.pipesCount = 0;
	  this.flowing = null;
	  this.ended = false;
	  this.endEmitted = false;
	  this.reading = false;
	
	  // a flag to be able to tell if the onwrite cb is called immediately,
	  // or on a later tick.  We set this to true at first, because any
	  // actions that shouldn't happen until "later" should generally also
	  // not happen before the first write call.
	  this.sync = true;
	
	  // whenever we return null, then we set a flag to say
	  // that we're awaiting a 'readable' event emission.
	  this.needReadable = false;
	  this.emittedReadable = false;
	  this.readableListening = false;
	  this.resumeScheduled = false;
	
	  // Crypto is kind of old and crusty.  Historically, its default string
	  // encoding is 'binary' so we have to make this configurable.
	  // Everything else in the universe uses 'utf8', though.
	  this.defaultEncoding = options.defaultEncoding || 'utf8';
	
	  // when piping, we only care about 'readable' events that happen
	  // after read()ing all the bytes and not getting any pushback.
	  this.ranOut = false;
	
	  // the number of writers that are awaiting a drain event in .pipe()s
	  this.awaitDrain = 0;
	
	  // if true, a maybeReadMore has been scheduled
	  this.readingMore = false;
	
	  this.decoder = null;
	  this.encoding = null;
	  if (options.encoding) {
	    if (!StringDecoder) StringDecoder = __webpack_require__(302).StringDecoder;
	    this.decoder = new StringDecoder(options.encoding);
	    this.encoding = options.encoding;
	  }
	}
	
	function Readable(options) {
	  Duplex = Duplex || __webpack_require__(297);
	
	  if (!(this instanceof Readable)) return new Readable(options);
	
	  this._readableState = new ReadableState(options, this);
	
	  // legacy
	  this.readable = true;
	
	  if (options && typeof options.read === 'function') this._read = options.read;
	
	  Stream.call(this);
	}
	
	// Manually shove something into the read() buffer.
	// This returns true if the highWaterMark has not been hit yet,
	// similar to how Writable.write() returns true if you should
	// write() some more.
	Readable.prototype.push = function (chunk, encoding) {
	  var state = this._readableState;
	
	  if (!state.objectMode && typeof chunk === 'string') {
	    encoding = encoding || state.defaultEncoding;
	    if (encoding !== state.encoding) {
	      chunk = bufferShim.from(chunk, encoding);
	      encoding = '';
	    }
	  }
	
	  return readableAddChunk(this, state, chunk, encoding, false);
	};
	
	// Unshift should *always* be something directly out of read()
	Readable.prototype.unshift = function (chunk) {
	  var state = this._readableState;
	  return readableAddChunk(this, state, chunk, '', true);
	};
	
	Readable.prototype.isPaused = function () {
	  return this._readableState.flowing === false;
	};
	
	function readableAddChunk(stream, state, chunk, encoding, addToFront) {
	  var er = chunkInvalid(state, chunk);
	  if (er) {
	    stream.emit('error', er);
	  } else if (chunk === null) {
	    state.reading = false;
	    onEofChunk(stream, state);
	  } else if (state.objectMode || chunk && chunk.length > 0) {
	    if (state.ended && !addToFront) {
	      var e = new Error('stream.push() after EOF');
	      stream.emit('error', e);
	    } else if (state.endEmitted && addToFront) {
	      var _e = new Error('stream.unshift() after end event');
	      stream.emit('error', _e);
	    } else {
	      var skipAdd;
	      if (state.decoder && !addToFront && !encoding) {
	        chunk = state.decoder.write(chunk);
	        skipAdd = !state.objectMode && chunk.length === 0;
	      }
	
	      if (!addToFront) state.reading = false;
	
	      // Don't add to the buffer if we've decoded to an empty string chunk and
	      // we're not in object mode
	      if (!skipAdd) {
	        // if we want the data now, just emit it.
	        if (state.flowing && state.length === 0 && !state.sync) {
	          stream.emit('data', chunk);
	          stream.read(0);
	        } else {
	          // update the buffer info.
	          state.length += state.objectMode ? 1 : chunk.length;
	          if (addToFront) state.buffer.unshift(chunk);else state.buffer.push(chunk);
	
	          if (state.needReadable) emitReadable(stream);
	        }
	      }
	
	      maybeReadMore(stream, state);
	    }
	  } else if (!addToFront) {
	    state.reading = false;
	  }
	
	  return needMoreData(state);
	}
	
	// if it's past the high water mark, we can push in some more.
	// Also, if we have no data yet, we can stand some
	// more bytes.  This is to work around cases where hwm=0,
	// such as the repl.  Also, if the push() triggered a
	// readable event, and the user called read(largeNumber) such that
	// needReadable was set, then we ought to push more, so that another
	// 'readable' event will be triggered.
	function needMoreData(state) {
	  return !state.ended && (state.needReadable || state.length < state.highWaterMark || state.length === 0);
	}
	
	// backwards compatibility.
	Readable.prototype.setEncoding = function (enc) {
	  if (!StringDecoder) StringDecoder = __webpack_require__(302).StringDecoder;
	  this._readableState.decoder = new StringDecoder(enc);
	  this._readableState.encoding = enc;
	  return this;
	};
	
	// Don't raise the hwm > 8MB
	var MAX_HWM = 0x800000;
	function computeNewHighWaterMark(n) {
	  if (n >= MAX_HWM) {
	    n = MAX_HWM;
	  } else {
	    // Get the next highest power of 2 to prevent increasing hwm excessively in
	    // tiny amounts
	    n--;
	    n |= n >>> 1;
	    n |= n >>> 2;
	    n |= n >>> 4;
	    n |= n >>> 8;
	    n |= n >>> 16;
	    n++;
	  }
	  return n;
	}
	
	// This function is designed to be inlinable, so please take care when making
	// changes to the function body.
	function howMuchToRead(n, state) {
	  if (n <= 0 || state.length === 0 && state.ended) return 0;
	  if (state.objectMode) return 1;
	  if (n !== n) {
	    // Only flow one buffer at a time
	    if (state.flowing && state.length) return state.buffer.head.data.length;else return state.length;
	  }
	  // If we're asking for more than the current hwm, then raise the hwm.
	  if (n > state.highWaterMark) state.highWaterMark = computeNewHighWaterMark(n);
	  if (n <= state.length) return n;
	  // Don't have enough
	  if (!state.ended) {
	    state.needReadable = true;
	    return 0;
	  }
	  return state.length;
	}
	
	// you can override either this method, or the async _read(n) below.
	Readable.prototype.read = function (n) {
	  debug('read', n);
	  n = parseInt(n, 10);
	  var state = this._readableState;
	  var nOrig = n;
	
	  if (n !== 0) state.emittedReadable = false;
	
	  // if we're doing read(0) to trigger a readable event, but we
	  // already have a bunch of data in the buffer, then just trigger
	  // the 'readable' event and move on.
	  if (n === 0 && state.needReadable && (state.length >= state.highWaterMark || state.ended)) {
	    debug('read: emitReadable', state.length, state.ended);
	    if (state.length === 0 && state.ended) endReadable(this);else emitReadable(this);
	    return null;
	  }
	
	  n = howMuchToRead(n, state);
	
	  // if we've ended, and we're now clear, then finish it up.
	  if (n === 0 && state.ended) {
	    if (state.length === 0) endReadable(this);
	    return null;
	  }
	
	  // All the actual chunk generation logic needs to be
	  // *below* the call to _read.  The reason is that in certain
	  // synthetic stream cases, such as passthrough streams, _read
	  // may be a completely synchronous operation which may change
	  // the state of the read buffer, providing enough data when
	  // before there was *not* enough.
	  //
	  // So, the steps are:
	  // 1. Figure out what the state of things will be after we do
	  // a read from the buffer.
	  //
	  // 2. If that resulting state will trigger a _read, then call _read.
	  // Note that this may be asynchronous, or synchronous.  Yes, it is
	  // deeply ugly to write APIs this way, but that still doesn't mean
	  // that the Readable class should behave improperly, as streams are
	  // designed to be sync/async agnostic.
	  // Take note if the _read call is sync or async (ie, if the read call
	  // has returned yet), so that we know whether or not it's safe to emit
	  // 'readable' etc.
	  //
	  // 3. Actually pull the requested chunks out of the buffer and return.
	
	  // if we need a readable event, then we need to do some reading.
	  var doRead = state.needReadable;
	  debug('need readable', doRead);
	
	  // if we currently have less than the highWaterMark, then also read some
	  if (state.length === 0 || state.length - n < state.highWaterMark) {
	    doRead = true;
	    debug('length less than watermark', doRead);
	  }
	
	  // however, if we've ended, then there's no point, and if we're already
	  // reading, then it's unnecessary.
	  if (state.ended || state.reading) {
	    doRead = false;
	    debug('reading or ended', doRead);
	  } else if (doRead) {
	    debug('do read');
	    state.reading = true;
	    state.sync = true;
	    // if the length is currently zero, then we *need* a readable event.
	    if (state.length === 0) state.needReadable = true;
	    // call internal read method
	    this._read(state.highWaterMark);
	    state.sync = false;
	    // If _read pushed data synchronously, then `reading` will be false,
	    // and we need to re-evaluate how much data we can return to the user.
	    if (!state.reading) n = howMuchToRead(nOrig, state);
	  }
	
	  var ret;
	  if (n > 0) ret = fromList(n, state);else ret = null;
	
	  if (ret === null) {
	    state.needReadable = true;
	    n = 0;
	  } else {
	    state.length -= n;
	  }
	
	  if (state.length === 0) {
	    // If we have nothing in the buffer, then we want to know
	    // as soon as we *do* get something into the buffer.
	    if (!state.ended) state.needReadable = true;
	
	    // If we tried to read() past the EOF, then emit end on the next tick.
	    if (nOrig !== n && state.ended) endReadable(this);
	  }
	
	  if (ret !== null) this.emit('data', ret);
	
	  return ret;
	};
	
	function chunkInvalid(state, chunk) {
	  var er = null;
	  if (!Buffer.isBuffer(chunk) && typeof chunk !== 'string' && chunk !== null && chunk !== undefined && !state.objectMode) {
	    er = new TypeError('Invalid non-string/buffer chunk');
	  }
	  return er;
	}
	
	function onEofChunk(stream, state) {
	  if (state.ended) return;
	  if (state.decoder) {
	    var chunk = state.decoder.end();
	    if (chunk && chunk.length) {
	      state.buffer.push(chunk);
	      state.length += state.objectMode ? 1 : chunk.length;
	    }
	  }
	  state.ended = true;
	
	  // emit 'readable' now to make sure it gets picked up.
	  emitReadable(stream);
	}
	
	// Don't emit readable right away in sync mode, because this can trigger
	// another read() call => stack overflow.  This way, it might trigger
	// a nextTick recursion warning, but that's not so bad.
	function emitReadable(stream) {
	  var state = stream._readableState;
	  state.needReadable = false;
	  if (!state.emittedReadable) {
	    debug('emitReadable', state.flowing);
	    state.emittedReadable = true;
	    if (state.sync) processNextTick(emitReadable_, stream);else emitReadable_(stream);
	  }
	}
	
	function emitReadable_(stream) {
	  debug('emit readable');
	  stream.emit('readable');
	  flow(stream);
	}
	
	// at this point, the user has presumably seen the 'readable' event,
	// and called read() to consume some data.  that may have triggered
	// in turn another _read(n) call, in which case reading = true if
	// it's in progress.
	// However, if we're not ended, or reading, and the length < hwm,
	// then go ahead and try to read some more preemptively.
	function maybeReadMore(stream, state) {
	  if (!state.readingMore) {
	    state.readingMore = true;
	    processNextTick(maybeReadMore_, stream, state);
	  }
	}
	
	function maybeReadMore_(stream, state) {
	  var len = state.length;
	  while (!state.reading && !state.flowing && !state.ended && state.length < state.highWaterMark) {
	    debug('maybeReadMore read 0');
	    stream.read(0);
	    if (len === state.length)
	      // didn't get any data, stop spinning.
	      break;else len = state.length;
	  }
	  state.readingMore = false;
	}
	
	// abstract method.  to be overridden in specific implementation classes.
	// call cb(er, data) where data is <= n in length.
	// for virtual (non-string, non-buffer) streams, "length" is somewhat
	// arbitrary, and perhaps not very meaningful.
	Readable.prototype._read = function (n) {
	  this.emit('error', new Error('_read() is not implemented'));
	};
	
	Readable.prototype.pipe = function (dest, pipeOpts) {
	  var src = this;
	  var state = this._readableState;
	
	  switch (state.pipesCount) {
	    case 0:
	      state.pipes = dest;
	      break;
	    case 1:
	      state.pipes = [state.pipes, dest];
	      break;
	    default:
	      state.pipes.push(dest);
	      break;
	  }
	  state.pipesCount += 1;
	  debug('pipe count=%d opts=%j', state.pipesCount, pipeOpts);
	
	  var doEnd = (!pipeOpts || pipeOpts.end !== false) && dest !== process.stdout && dest !== process.stderr;
	
	  var endFn = doEnd ? onend : cleanup;
	  if (state.endEmitted) processNextTick(endFn);else src.once('end', endFn);
	
	  dest.on('unpipe', onunpipe);
	  function onunpipe(readable) {
	    debug('onunpipe');
	    if (readable === src) {
	      cleanup();
	    }
	  }
	
	  function onend() {
	    debug('onend');
	    dest.end();
	  }
	
	  // when the dest drains, it reduces the awaitDrain counter
	  // on the source.  This would be more elegant with a .once()
	  // handler in flow(), but adding and removing repeatedly is
	  // too slow.
	  var ondrain = pipeOnDrain(src);
	  dest.on('drain', ondrain);
	
	  var cleanedUp = false;
	  function cleanup() {
	    debug('cleanup');
	    // cleanup event handlers once the pipe is broken
	    dest.removeListener('close', onclose);
	    dest.removeListener('finish', onfinish);
	    dest.removeListener('drain', ondrain);
	    dest.removeListener('error', onerror);
	    dest.removeListener('unpipe', onunpipe);
	    src.removeListener('end', onend);
	    src.removeListener('end', cleanup);
	    src.removeListener('data', ondata);
	
	    cleanedUp = true;
	
	    // if the reader is waiting for a drain event from this
	    // specific writer, then it would cause it to never start
	    // flowing again.
	    // So, if this is awaiting a drain, then we just call it now.
	    // If we don't know, then assume that we are waiting for one.
	    if (state.awaitDrain && (!dest._writableState || dest._writableState.needDrain)) ondrain();
	  }
	
	  // If the user pushes more data while we're writing to dest then we'll end up
	  // in ondata again. However, we only want to increase awaitDrain once because
	  // dest will only emit one 'drain' event for the multiple writes.
	  // => Introduce a guard on increasing awaitDrain.
	  var increasedAwaitDrain = false;
	  src.on('data', ondata);
	  function ondata(chunk) {
	    debug('ondata');
	    increasedAwaitDrain = false;
	    var ret = dest.write(chunk);
	    if (false === ret && !increasedAwaitDrain) {
	      // If the user unpiped during `dest.write()`, it is possible
	      // to get stuck in a permanently paused state if that write
	      // also returned false.
	      // => Check whether `dest` is still a piping destination.
	      if ((state.pipesCount === 1 && state.pipes === dest || state.pipesCount > 1 && indexOf(state.pipes, dest) !== -1) && !cleanedUp) {
	        debug('false write response, pause', src._readableState.awaitDrain);
	        src._readableState.awaitDrain++;
	        increasedAwaitDrain = true;
	      }
	      src.pause();
	    }
	  }
	
	  // if the dest has an error, then stop piping into it.
	  // however, don't suppress the throwing behavior for this.
	  function onerror(er) {
	    debug('onerror', er);
	    unpipe();
	    dest.removeListener('error', onerror);
	    if (EElistenerCount(dest, 'error') === 0) dest.emit('error', er);
	  }
	
	  // Make sure our error handler is attached before userland ones.
	  prependListener(dest, 'error', onerror);
	
	  // Both close and finish should trigger unpipe, but only once.
	  function onclose() {
	    dest.removeListener('finish', onfinish);
	    unpipe();
	  }
	  dest.once('close', onclose);
	  function onfinish() {
	    debug('onfinish');
	    dest.removeListener('close', onclose);
	    unpipe();
	  }
	  dest.once('finish', onfinish);
	
	  function unpipe() {
	    debug('unpipe');
	    src.unpipe(dest);
	  }
	
	  // tell the dest that it's being piped to
	  dest.emit('pipe', src);
	
	  // start the flow if it hasn't been started already.
	  if (!state.flowing) {
	    debug('pipe resume');
	    src.resume();
	  }
	
	  return dest;
	};
	
	function pipeOnDrain(src) {
	  return function () {
	    var state = src._readableState;
	    debug('pipeOnDrain', state.awaitDrain);
	    if (state.awaitDrain) state.awaitDrain--;
	    if (state.awaitDrain === 0 && EElistenerCount(src, 'data')) {
	      state.flowing = true;
	      flow(src);
	    }
	  };
	}
	
	Readable.prototype.unpipe = function (dest) {
	  var state = this._readableState;
	
	  // if we're not piping anywhere, then do nothing.
	  if (state.pipesCount === 0) return this;
	
	  // just one destination.  most common case.
	  if (state.pipesCount === 1) {
	    // passed in one, but it's not the right one.
	    if (dest && dest !== state.pipes) return this;
	
	    if (!dest) dest = state.pipes;
	
	    // got a match.
	    state.pipes = null;
	    state.pipesCount = 0;
	    state.flowing = false;
	    if (dest) dest.emit('unpipe', this);
	    return this;
	  }
	
	  // slow case. multiple pipe destinations.
	
	  if (!dest) {
	    // remove all.
	    var dests = state.pipes;
	    var len = state.pipesCount;
	    state.pipes = null;
	    state.pipesCount = 0;
	    state.flowing = false;
	
	    for (var i = 0; i < len; i++) {
	      dests[i].emit('unpipe', this);
	    }return this;
	  }
	
	  // try to find the right one.
	  var index = indexOf(state.pipes, dest);
	  if (index === -1) return this;
	
	  state.pipes.splice(index, 1);
	  state.pipesCount -= 1;
	  if (state.pipesCount === 1) state.pipes = state.pipes[0];
	
	  dest.emit('unpipe', this);
	
	  return this;
	};
	
	// set up data events if they are asked for
	// Ensure readable listeners eventually get something
	Readable.prototype.on = function (ev, fn) {
	  var res = Stream.prototype.on.call(this, ev, fn);
	
	  if (ev === 'data') {
	    // Start flowing on next tick if stream isn't explicitly paused
	    if (this._readableState.flowing !== false) this.resume();
	  } else if (ev === 'readable') {
	    var state = this._readableState;
	    if (!state.endEmitted && !state.readableListening) {
	      state.readableListening = state.needReadable = true;
	      state.emittedReadable = false;
	      if (!state.reading) {
	        processNextTick(nReadingNextTick, this);
	      } else if (state.length) {
	        emitReadable(this, state);
	      }
	    }
	  }
	
	  return res;
	};
	Readable.prototype.addListener = Readable.prototype.on;
	
	function nReadingNextTick(self) {
	  debug('readable nexttick read 0');
	  self.read(0);
	}
	
	// pause() and resume() are remnants of the legacy readable stream API
	// If the user uses them, then switch into old mode.
	Readable.prototype.resume = function () {
	  var state = this._readableState;
	  if (!state.flowing) {
	    debug('resume');
	    state.flowing = true;
	    resume(this, state);
	  }
	  return this;
	};
	
	function resume(stream, state) {
	  if (!state.resumeScheduled) {
	    state.resumeScheduled = true;
	    processNextTick(resume_, stream, state);
	  }
	}
	
	function resume_(stream, state) {
	  if (!state.reading) {
	    debug('resume read 0');
	    stream.read(0);
	  }
	
	  state.resumeScheduled = false;
	  state.awaitDrain = 0;
	  stream.emit('resume');
	  flow(stream);
	  if (state.flowing && !state.reading) stream.read(0);
	}
	
	Readable.prototype.pause = function () {
	  debug('call pause flowing=%j', this._readableState.flowing);
	  if (false !== this._readableState.flowing) {
	    debug('pause');
	    this._readableState.flowing = false;
	    this.emit('pause');
	  }
	  return this;
	};
	
	function flow(stream) {
	  var state = stream._readableState;
	  debug('flow', state.flowing);
	  while (state.flowing && stream.read() !== null) {}
	}
	
	// wrap an old-style stream as the async data source.
	// This is *not* part of the readable stream interface.
	// It is an ugly unfortunate mess of history.
	Readable.prototype.wrap = function (stream) {
	  var state = this._readableState;
	  var paused = false;
	
	  var self = this;
	  stream.on('end', function () {
	    debug('wrapped end');
	    if (state.decoder && !state.ended) {
	      var chunk = state.decoder.end();
	      if (chunk && chunk.length) self.push(chunk);
	    }
	
	    self.push(null);
	  });
	
	  stream.on('data', function (chunk) {
	    debug('wrapped data');
	    if (state.decoder) chunk = state.decoder.write(chunk);
	
	    // don't skip over falsy values in objectMode
	    if (state.objectMode && (chunk === null || chunk === undefined)) return;else if (!state.objectMode && (!chunk || !chunk.length)) return;
	
	    var ret = self.push(chunk);
	    if (!ret) {
	      paused = true;
	      stream.pause();
	    }
	  });
	
	  // proxy all the other methods.
	  // important when wrapping filters and duplexes.
	  for (var i in stream) {
	    if (this[i] === undefined && typeof stream[i] === 'function') {
	      this[i] = function (method) {
	        return function () {
	          return stream[method].apply(stream, arguments);
	        };
	      }(i);
	    }
	  }
	
	  // proxy certain important events.
	  for (var n = 0; n < kProxyEvents.length; n++) {
	    stream.on(kProxyEvents[n], self.emit.bind(self, kProxyEvents[n]));
	  }
	
	  // when we try to consume some more bytes, simply unpause the
	  // underlying stream.
	  self._read = function (n) {
	    debug('wrapped _read', n);
	    if (paused) {
	      paused = false;
	      stream.resume();
	    }
	  };
	
	  return self;
	};
	
	// exposed for testing purposes only.
	Readable._fromList = fromList;
	
	// Pluck off n bytes from an array of buffers.
	// Length is the combined lengths of all the buffers in the list.
	// This function is designed to be inlinable, so please take care when making
	// changes to the function body.
	function fromList(n, state) {
	  // nothing buffered
	  if (state.length === 0) return null;
	
	  var ret;
	  if (state.objectMode) ret = state.buffer.shift();else if (!n || n >= state.length) {
	    // read it all, truncate the list
	    if (state.decoder) ret = state.buffer.join('');else if (state.buffer.length === 1) ret = state.buffer.head.data;else ret = state.buffer.concat(state.length);
	    state.buffer.clear();
	  } else {
	    // read part of list
	    ret = fromListPartial(n, state.buffer, state.decoder);
	  }
	
	  return ret;
	}
	
	// Extracts only enough buffered data to satisfy the amount requested.
	// This function is designed to be inlinable, so please take care when making
	// changes to the function body.
	function fromListPartial(n, list, hasStrings) {
	  var ret;
	  if (n < list.head.data.length) {
	    // slice is the same for buffers and strings
	    ret = list.head.data.slice(0, n);
	    list.head.data = list.head.data.slice(n);
	  } else if (n === list.head.data.length) {
	    // first chunk is a perfect match
	    ret = list.shift();
	  } else {
	    // result spans more than one buffer
	    ret = hasStrings ? copyFromBufferString(n, list) : copyFromBuffer(n, list);
	  }
	  return ret;
	}
	
	// Copies a specified amount of characters from the list of buffered data
	// chunks.
	// This function is designed to be inlinable, so please take care when making
	// changes to the function body.
	function copyFromBufferString(n, list) {
	  var p = list.head;
	  var c = 1;
	  var ret = p.data;
	  n -= ret.length;
	  while (p = p.next) {
	    var str = p.data;
	    var nb = n > str.length ? str.length : n;
	    if (nb === str.length) ret += str;else ret += str.slice(0, n);
	    n -= nb;
	    if (n === 0) {
	      if (nb === str.length) {
	        ++c;
	        if (p.next) list.head = p.next;else list.head = list.tail = null;
	      } else {
	        list.head = p;
	        p.data = str.slice(nb);
	      }
	      break;
	    }
	    ++c;
	  }
	  list.length -= c;
	  return ret;
	}
	
	// Copies a specified amount of bytes from the list of buffered data chunks.
	// This function is designed to be inlinable, so please take care when making
	// changes to the function body.
	function copyFromBuffer(n, list) {
	  var ret = bufferShim.allocUnsafe(n);
	  var p = list.head;
	  var c = 1;
	  p.data.copy(ret);
	  n -= p.data.length;
	  while (p = p.next) {
	    var buf = p.data;
	    var nb = n > buf.length ? buf.length : n;
	    buf.copy(ret, ret.length - n, 0, nb);
	    n -= nb;
	    if (n === 0) {
	      if (nb === buf.length) {
	        ++c;
	        if (p.next) list.head = p.next;else list.head = list.tail = null;
	      } else {
	        list.head = p;
	        p.data = buf.slice(nb);
	      }
	      break;
	    }
	    ++c;
	  }
	  list.length -= c;
	  return ret;
	}
	
	function endReadable(stream) {
	  var state = stream._readableState;
	
	  // If we get here before consuming all the bytes, then that is a
	  // bug in node.  Should never happen.
	  if (state.length > 0) throw new Error('"endReadable()" called on non-empty stream');
	
	  if (!state.endEmitted) {
	    state.ended = true;
	    processNextTick(endReadableNT, state, stream);
	  }
	}
	
	function endReadableNT(state, stream) {
	  // Check that we didn't get one last unshift.
	  if (!state.endEmitted && state.length === 0) {
	    state.endEmitted = true;
	    stream.readable = false;
	    stream.emit('end');
	  }
	}
	
	function forEach(xs, f) {
	  for (var i = 0, l = xs.length; i < l; i++) {
	    f(xs[i], i);
	  }
	}
	
	function indexOf(xs, x) {
	  for (var i = 0, l = xs.length; i < l; i++) {
	    if (xs[i] === x) return i;
	  }
	  return -1;
	}
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ }),
/* 287 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';
	
	if (!process.version || process.version.indexOf('v0.') === 0 || process.version.indexOf('v1.') === 0 && process.version.indexOf('v1.8.') !== 0) {
	  module.exports = nextTick;
	} else {
	  module.exports = process.nextTick;
	}
	
	function nextTick(fn, arg1, arg2, arg3) {
	  if (typeof fn !== 'function') {
	    throw new TypeError('"callback" argument must be a function');
	  }
	  var len = arguments.length;
	  var args, i;
	  switch (len) {
	    case 0:
	    case 1:
	      return process.nextTick(fn);
	    case 2:
	      return process.nextTick(function afterTickOne() {
	        fn.call(null, arg1);
	      });
	    case 3:
	      return process.nextTick(function afterTickTwo() {
	        fn.call(null, arg1, arg2);
	      });
	    case 4:
	      return process.nextTick(function afterTickThree() {
	        fn.call(null, arg1, arg2, arg3);
	      });
	    default:
	      args = new Array(len - 1);
	      i = 0;
	      while (i < args.length) {
	        args[i++] = arguments[i];
	      }
	      return process.nextTick(function afterTick() {
	        fn.apply(null, args);
	      });
	  }
	}
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ }),
/* 288 */
/***/ (function(module, exports) {

	'use strict';
	
	var toString = {}.toString;
	
	module.exports = Array.isArray || function (arr) {
	  return toString.call(arr) == '[object Array]';
	};

/***/ }),
/* 289 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports = __webpack_require__(283).EventEmitter;

/***/ }),
/* 290 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global) {/*!
	 * The buffer module from node.js, for the browser.
	 *
	 * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
	 * @license  MIT
	 */
	/* eslint-disable no-proto */
	
	'use strict';
	
	var base64 = __webpack_require__(291);
	var ieee754 = __webpack_require__(292);
	var isArray = __webpack_require__(288);
	
	exports.Buffer = Buffer;
	exports.SlowBuffer = SlowBuffer;
	exports.INSPECT_MAX_BYTES = 50;
	
	/**
	 * If `Buffer.TYPED_ARRAY_SUPPORT`:
	 *   === true    Use Uint8Array implementation (fastest)
	 *   === false   Use Object implementation (most compatible, even IE6)
	 *
	 * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
	 * Opera 11.6+, iOS 4.2+.
	 *
	 * Due to various browser bugs, sometimes the Object implementation will be used even
	 * when the browser supports typed arrays.
	 *
	 * Note:
	 *
	 *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,
	 *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.
	 *
	 *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.
	 *
	 *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of
	 *     incorrect length in some situations.
	
	 * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they
	 * get the Object implementation, which is slower but behaves correctly.
	 */
	Buffer.TYPED_ARRAY_SUPPORT = global.TYPED_ARRAY_SUPPORT !== undefined ? global.TYPED_ARRAY_SUPPORT : typedArraySupport();
	
	/*
	 * Export kMaxLength after typed array support is determined.
	 */
	exports.kMaxLength = kMaxLength();
	
	function typedArraySupport() {
	  try {
	    var arr = new Uint8Array(1);
	    arr.__proto__ = { __proto__: Uint8Array.prototype, foo: function foo() {
	        return 42;
	      } };
	    return arr.foo() === 42 && // typed array instances can be augmented
	    typeof arr.subarray === 'function' && // chrome 9-10 lack `subarray`
	    arr.subarray(1, 1).byteLength === 0; // ie10 has broken `subarray`
	  } catch (e) {
	    return false;
	  }
	}
	
	function kMaxLength() {
	  return Buffer.TYPED_ARRAY_SUPPORT ? 0x7fffffff : 0x3fffffff;
	}
	
	function createBuffer(that, length) {
	  if (kMaxLength() < length) {
	    throw new RangeError('Invalid typed array length');
	  }
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    // Return an augmented `Uint8Array` instance, for best performance
	    that = new Uint8Array(length);
	    that.__proto__ = Buffer.prototype;
	  } else {
	    // Fallback: Return an object instance of the Buffer class
	    if (that === null) {
	      that = new Buffer(length);
	    }
	    that.length = length;
	  }
	
	  return that;
	}
	
	/**
	 * The Buffer constructor returns instances of `Uint8Array` that have their
	 * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
	 * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
	 * and the `Uint8Array` methods. Square bracket notation works as expected -- it
	 * returns a single octet.
	 *
	 * The `Uint8Array` prototype remains unmodified.
	 */
	
	function Buffer(arg, encodingOrOffset, length) {
	  if (!Buffer.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer)) {
	    return new Buffer(arg, encodingOrOffset, length);
	  }
	
	  // Common case.
	  if (typeof arg === 'number') {
	    if (typeof encodingOrOffset === 'string') {
	      throw new Error('If encoding is specified then the first argument must be a string');
	    }
	    return allocUnsafe(this, arg);
	  }
	  return from(this, arg, encodingOrOffset, length);
	}
	
	Buffer.poolSize = 8192; // not used by this implementation
	
	// TODO: Legacy, not needed anymore. Remove in next major version.
	Buffer._augment = function (arr) {
	  arr.__proto__ = Buffer.prototype;
	  return arr;
	};
	
	function from(that, value, encodingOrOffset, length) {
	  if (typeof value === 'number') {
	    throw new TypeError('"value" argument must not be a number');
	  }
	
	  if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {
	    return fromArrayBuffer(that, value, encodingOrOffset, length);
	  }
	
	  if (typeof value === 'string') {
	    return fromString(that, value, encodingOrOffset);
	  }
	
	  return fromObject(that, value);
	}
	
	/**
	 * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
	 * if value is a number.
	 * Buffer.from(str[, encoding])
	 * Buffer.from(array)
	 * Buffer.from(buffer)
	 * Buffer.from(arrayBuffer[, byteOffset[, length]])
	 **/
	Buffer.from = function (value, encodingOrOffset, length) {
	  return from(null, value, encodingOrOffset, length);
	};
	
	if (Buffer.TYPED_ARRAY_SUPPORT) {
	  Buffer.prototype.__proto__ = Uint8Array.prototype;
	  Buffer.__proto__ = Uint8Array;
	  if (typeof Symbol !== 'undefined' && Symbol.species && Buffer[Symbol.species] === Buffer) {
	    // Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97
	    Object.defineProperty(Buffer, Symbol.species, {
	      value: null,
	      configurable: true
	    });
	  }
	}
	
	function assertSize(size) {
	  if (typeof size !== 'number') {
	    throw new TypeError('"size" argument must be a number');
	  } else if (size < 0) {
	    throw new RangeError('"size" argument must not be negative');
	  }
	}
	
	function alloc(that, size, fill, encoding) {
	  assertSize(size);
	  if (size <= 0) {
	    return createBuffer(that, size);
	  }
	  if (fill !== undefined) {
	    // Only pay attention to encoding if it's a string. This
	    // prevents accidentally sending in a number that would
	    // be interpretted as a start offset.
	    return typeof encoding === 'string' ? createBuffer(that, size).fill(fill, encoding) : createBuffer(that, size).fill(fill);
	  }
	  return createBuffer(that, size);
	}
	
	/**
	 * Creates a new filled Buffer instance.
	 * alloc(size[, fill[, encoding]])
	 **/
	Buffer.alloc = function (size, fill, encoding) {
	  return alloc(null, size, fill, encoding);
	};
	
	function allocUnsafe(that, size) {
	  assertSize(size);
	  that = createBuffer(that, size < 0 ? 0 : checked(size) | 0);
	  if (!Buffer.TYPED_ARRAY_SUPPORT) {
	    for (var i = 0; i < size; ++i) {
	      that[i] = 0;
	    }
	  }
	  return that;
	}
	
	/**
	 * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
	 * */
	Buffer.allocUnsafe = function (size) {
	  return allocUnsafe(null, size);
	};
	/**
	 * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
	 */
	Buffer.allocUnsafeSlow = function (size) {
	  return allocUnsafe(null, size);
	};
	
	function fromString(that, string, encoding) {
	  if (typeof encoding !== 'string' || encoding === '') {
	    encoding = 'utf8';
	  }
	
	  if (!Buffer.isEncoding(encoding)) {
	    throw new TypeError('"encoding" must be a valid string encoding');
	  }
	
	  var length = byteLength(string, encoding) | 0;
	  that = createBuffer(that, length);
	
	  var actual = that.write(string, encoding);
	
	  if (actual !== length) {
	    // Writing a hex string, for example, that contains invalid characters will
	    // cause everything after the first invalid character to be ignored. (e.g.
	    // 'abxxcd' will be treated as 'ab')
	    that = that.slice(0, actual);
	  }
	
	  return that;
	}
	
	function fromArrayLike(that, array) {
	  var length = array.length < 0 ? 0 : checked(array.length) | 0;
	  that = createBuffer(that, length);
	  for (var i = 0; i < length; i += 1) {
	    that[i] = array[i] & 255;
	  }
	  return that;
	}
	
	function fromArrayBuffer(that, array, byteOffset, length) {
	  array.byteLength; // this throws if `array` is not a valid ArrayBuffer
	
	  if (byteOffset < 0 || array.byteLength < byteOffset) {
	    throw new RangeError('\'offset\' is out of bounds');
	  }
	
	  if (array.byteLength < byteOffset + (length || 0)) {
	    throw new RangeError('\'length\' is out of bounds');
	  }
	
	  if (byteOffset === undefined && length === undefined) {
	    array = new Uint8Array(array);
	  } else if (length === undefined) {
	    array = new Uint8Array(array, byteOffset);
	  } else {
	    array = new Uint8Array(array, byteOffset, length);
	  }
	
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    // Return an augmented `Uint8Array` instance, for best performance
	    that = array;
	    that.__proto__ = Buffer.prototype;
	  } else {
	    // Fallback: Return an object instance of the Buffer class
	    that = fromArrayLike(that, array);
	  }
	  return that;
	}
	
	function fromObject(that, obj) {
	  if (Buffer.isBuffer(obj)) {
	    var len = checked(obj.length) | 0;
	    that = createBuffer(that, len);
	
	    if (that.length === 0) {
	      return that;
	    }
	
	    obj.copy(that, 0, 0, len);
	    return that;
	  }
	
	  if (obj) {
	    if (typeof ArrayBuffer !== 'undefined' && obj.buffer instanceof ArrayBuffer || 'length' in obj) {
	      if (typeof obj.length !== 'number' || isnan(obj.length)) {
	        return createBuffer(that, 0);
	      }
	      return fromArrayLike(that, obj);
	    }
	
	    if (obj.type === 'Buffer' && isArray(obj.data)) {
	      return fromArrayLike(that, obj.data);
	    }
	  }
	
	  throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.');
	}
	
	function checked(length) {
	  // Note: cannot use `length < kMaxLength()` here because that fails when
	  // length is NaN (which is otherwise coerced to zero.)
	  if (length >= kMaxLength()) {
	    throw new RangeError('Attempt to allocate Buffer larger than maximum ' + 'size: 0x' + kMaxLength().toString(16) + ' bytes');
	  }
	  return length | 0;
	}
	
	function SlowBuffer(length) {
	  if (+length != length) {
	    // eslint-disable-line eqeqeq
	    length = 0;
	  }
	  return Buffer.alloc(+length);
	}
	
	Buffer.isBuffer = function isBuffer(b) {
	  return !!(b != null && b._isBuffer);
	};
	
	Buffer.compare = function compare(a, b) {
	  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {
	    throw new TypeError('Arguments must be Buffers');
	  }
	
	  if (a === b) return 0;
	
	  var x = a.length;
	  var y = b.length;
	
	  for (var i = 0, len = Math.min(x, y); i < len; ++i) {
	    if (a[i] !== b[i]) {
	      x = a[i];
	      y = b[i];
	      break;
	    }
	  }
	
	  if (x < y) return -1;
	  if (y < x) return 1;
	  return 0;
	};
	
	Buffer.isEncoding = function isEncoding(encoding) {
	  switch (String(encoding).toLowerCase()) {
	    case 'hex':
	    case 'utf8':
	    case 'utf-8':
	    case 'ascii':
	    case 'latin1':
	    case 'binary':
	    case 'base64':
	    case 'ucs2':
	    case 'ucs-2':
	    case 'utf16le':
	    case 'utf-16le':
	      return true;
	    default:
	      return false;
	  }
	};
	
	Buffer.concat = function concat(list, length) {
	  if (!isArray(list)) {
	    throw new TypeError('"list" argument must be an Array of Buffers');
	  }
	
	  if (list.length === 0) {
	    return Buffer.alloc(0);
	  }
	
	  var i;
	  if (length === undefined) {
	    length = 0;
	    for (i = 0; i < list.length; ++i) {
	      length += list[i].length;
	    }
	  }
	
	  var buffer = Buffer.allocUnsafe(length);
	  var pos = 0;
	  for (i = 0; i < list.length; ++i) {
	    var buf = list[i];
	    if (!Buffer.isBuffer(buf)) {
	      throw new TypeError('"list" argument must be an Array of Buffers');
	    }
	    buf.copy(buffer, pos);
	    pos += buf.length;
	  }
	  return buffer;
	};
	
	function byteLength(string, encoding) {
	  if (Buffer.isBuffer(string)) {
	    return string.length;
	  }
	  if (typeof ArrayBuffer !== 'undefined' && typeof ArrayBuffer.isView === 'function' && (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)) {
	    return string.byteLength;
	  }
	  if (typeof string !== 'string') {
	    string = '' + string;
	  }
	
	  var len = string.length;
	  if (len === 0) return 0;
	
	  // Use a for loop to avoid recursion
	  var loweredCase = false;
	  for (;;) {
	    switch (encoding) {
	      case 'ascii':
	      case 'latin1':
	      case 'binary':
	        return len;
	      case 'utf8':
	      case 'utf-8':
	      case undefined:
	        return utf8ToBytes(string).length;
	      case 'ucs2':
	      case 'ucs-2':
	      case 'utf16le':
	      case 'utf-16le':
	        return len * 2;
	      case 'hex':
	        return len >>> 1;
	      case 'base64':
	        return base64ToBytes(string).length;
	      default:
	        if (loweredCase) return utf8ToBytes(string).length; // assume utf8
	        encoding = ('' + encoding).toLowerCase();
	        loweredCase = true;
	    }
	  }
	}
	Buffer.byteLength = byteLength;
	
	function slowToString(encoding, start, end) {
	  var loweredCase = false;
	
	  // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
	  // property of a typed array.
	
	  // This behaves neither like String nor Uint8Array in that we set start/end
	  // to their upper/lower bounds if the value passed is out of range.
	  // undefined is handled specially as per ECMA-262 6th Edition,
	  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.
	  if (start === undefined || start < 0) {
	    start = 0;
	  }
	  // Return early if start > this.length. Done here to prevent potential uint32
	  // coercion fail below.
	  if (start > this.length) {
	    return '';
	  }
	
	  if (end === undefined || end > this.length) {
	    end = this.length;
	  }
	
	  if (end <= 0) {
	    return '';
	  }
	
	  // Force coersion to uint32. This will also coerce falsey/NaN values to 0.
	  end >>>= 0;
	  start >>>= 0;
	
	  if (end <= start) {
	    return '';
	  }
	
	  if (!encoding) encoding = 'utf8';
	
	  while (true) {
	    switch (encoding) {
	      case 'hex':
	        return hexSlice(this, start, end);
	
	      case 'utf8':
	      case 'utf-8':
	        return utf8Slice(this, start, end);
	
	      case 'ascii':
	        return asciiSlice(this, start, end);
	
	      case 'latin1':
	      case 'binary':
	        return latin1Slice(this, start, end);
	
	      case 'base64':
	        return base64Slice(this, start, end);
	
	      case 'ucs2':
	      case 'ucs-2':
	      case 'utf16le':
	      case 'utf-16le':
	        return utf16leSlice(this, start, end);
	
	      default:
	        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding);
	        encoding = (encoding + '').toLowerCase();
	        loweredCase = true;
	    }
	  }
	}
	
	// The property is used by `Buffer.isBuffer` and `is-buffer` (in Safari 5-7) to detect
	// Buffer instances.
	Buffer.prototype._isBuffer = true;
	
	function swap(b, n, m) {
	  var i = b[n];
	  b[n] = b[m];
	  b[m] = i;
	}
	
	Buffer.prototype.swap16 = function swap16() {
	  var len = this.length;
	  if (len % 2 !== 0) {
	    throw new RangeError('Buffer size must be a multiple of 16-bits');
	  }
	  for (var i = 0; i < len; i += 2) {
	    swap(this, i, i + 1);
	  }
	  return this;
	};
	
	Buffer.prototype.swap32 = function swap32() {
	  var len = this.length;
	  if (len % 4 !== 0) {
	    throw new RangeError('Buffer size must be a multiple of 32-bits');
	  }
	  for (var i = 0; i < len; i += 4) {
	    swap(this, i, i + 3);
	    swap(this, i + 1, i + 2);
	  }
	  return this;
	};
	
	Buffer.prototype.swap64 = function swap64() {
	  var len = this.length;
	  if (len % 8 !== 0) {
	    throw new RangeError('Buffer size must be a multiple of 64-bits');
	  }
	  for (var i = 0; i < len; i += 8) {
	    swap(this, i, i + 7);
	    swap(this, i + 1, i + 6);
	    swap(this, i + 2, i + 5);
	    swap(this, i + 3, i + 4);
	  }
	  return this;
	};
	
	Buffer.prototype.toString = function toString() {
	  var length = this.length | 0;
	  if (length === 0) return '';
	  if (arguments.length === 0) return utf8Slice(this, 0, length);
	  return slowToString.apply(this, arguments);
	};
	
	Buffer.prototype.equals = function equals(b) {
	  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer');
	  if (this === b) return true;
	  return Buffer.compare(this, b) === 0;
	};
	
	Buffer.prototype.inspect = function inspect() {
	  var str = '';
	  var max = exports.INSPECT_MAX_BYTES;
	  if (this.length > 0) {
	    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ');
	    if (this.length > max) str += ' ... ';
	  }
	  return '<Buffer ' + str + '>';
	};
	
	Buffer.prototype.compare = function compare(target, start, end, thisStart, thisEnd) {
	  if (!Buffer.isBuffer(target)) {
	    throw new TypeError('Argument must be a Buffer');
	  }
	
	  if (start === undefined) {
	    start = 0;
	  }
	  if (end === undefined) {
	    end = target ? target.length : 0;
	  }
	  if (thisStart === undefined) {
	    thisStart = 0;
	  }
	  if (thisEnd === undefined) {
	    thisEnd = this.length;
	  }
	
	  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
	    throw new RangeError('out of range index');
	  }
	
	  if (thisStart >= thisEnd && start >= end) {
	    return 0;
	  }
	  if (thisStart >= thisEnd) {
	    return -1;
	  }
	  if (start >= end) {
	    return 1;
	  }
	
	  start >>>= 0;
	  end >>>= 0;
	  thisStart >>>= 0;
	  thisEnd >>>= 0;
	
	  if (this === target) return 0;
	
	  var x = thisEnd - thisStart;
	  var y = end - start;
	  var len = Math.min(x, y);
	
	  var thisCopy = this.slice(thisStart, thisEnd);
	  var targetCopy = target.slice(start, end);
	
	  for (var i = 0; i < len; ++i) {
	    if (thisCopy[i] !== targetCopy[i]) {
	      x = thisCopy[i];
	      y = targetCopy[i];
	      break;
	    }
	  }
	
	  if (x < y) return -1;
	  if (y < x) return 1;
	  return 0;
	};
	
	// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
	// OR the last index of `val` in `buffer` at offset <= `byteOffset`.
	//
	// Arguments:
	// - buffer - a Buffer to search
	// - val - a string, Buffer, or number
	// - byteOffset - an index into `buffer`; will be clamped to an int32
	// - encoding - an optional encoding, relevant is val is a string
	// - dir - true for indexOf, false for lastIndexOf
	function bidirectionalIndexOf(buffer, val, byteOffset, encoding, dir) {
	  // Empty buffer means no match
	  if (buffer.length === 0) return -1;
	
	  // Normalize byteOffset
	  if (typeof byteOffset === 'string') {
	    encoding = byteOffset;
	    byteOffset = 0;
	  } else if (byteOffset > 0x7fffffff) {
	    byteOffset = 0x7fffffff;
	  } else if (byteOffset < -0x80000000) {
	    byteOffset = -0x80000000;
	  }
	  byteOffset = +byteOffset; // Coerce to Number.
	  if (isNaN(byteOffset)) {
	    // byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
	    byteOffset = dir ? 0 : buffer.length - 1;
	  }
	
	  // Normalize byteOffset: negative offsets start from the end of the buffer
	  if (byteOffset < 0) byteOffset = buffer.length + byteOffset;
	  if (byteOffset >= buffer.length) {
	    if (dir) return -1;else byteOffset = buffer.length - 1;
	  } else if (byteOffset < 0) {
	    if (dir) byteOffset = 0;else return -1;
	  }
	
	  // Normalize val
	  if (typeof val === 'string') {
	    val = Buffer.from(val, encoding);
	  }
	
	  // Finally, search either indexOf (if dir is true) or lastIndexOf
	  if (Buffer.isBuffer(val)) {
	    // Special case: looking for empty string/buffer always fails
	    if (val.length === 0) {
	      return -1;
	    }
	    return arrayIndexOf(buffer, val, byteOffset, encoding, dir);
	  } else if (typeof val === 'number') {
	    val = val & 0xFF; // Search for a byte value [0-255]
	    if (Buffer.TYPED_ARRAY_SUPPORT && typeof Uint8Array.prototype.indexOf === 'function') {
	      if (dir) {
	        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset);
	      } else {
	        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset);
	      }
	    }
	    return arrayIndexOf(buffer, [val], byteOffset, encoding, dir);
	  }
	
	  throw new TypeError('val must be string, number or Buffer');
	}
	
	function arrayIndexOf(arr, val, byteOffset, encoding, dir) {
	  var indexSize = 1;
	  var arrLength = arr.length;
	  var valLength = val.length;
	
	  if (encoding !== undefined) {
	    encoding = String(encoding).toLowerCase();
	    if (encoding === 'ucs2' || encoding === 'ucs-2' || encoding === 'utf16le' || encoding === 'utf-16le') {
	      if (arr.length < 2 || val.length < 2) {
	        return -1;
	      }
	      indexSize = 2;
	      arrLength /= 2;
	      valLength /= 2;
	      byteOffset /= 2;
	    }
	  }
	
	  function read(buf, i) {
	    if (indexSize === 1) {
	      return buf[i];
	    } else {
	      return buf.readUInt16BE(i * indexSize);
	    }
	  }
	
	  var i;
	  if (dir) {
	    var foundIndex = -1;
	    for (i = byteOffset; i < arrLength; i++) {
	      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
	        if (foundIndex === -1) foundIndex = i;
	        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize;
	      } else {
	        if (foundIndex !== -1) i -= i - foundIndex;
	        foundIndex = -1;
	      }
	    }
	  } else {
	    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength;
	    for (i = byteOffset; i >= 0; i--) {
	      var found = true;
	      for (var j = 0; j < valLength; j++) {
	        if (read(arr, i + j) !== read(val, j)) {
	          found = false;
	          break;
	        }
	      }
	      if (found) return i;
	    }
	  }
	
	  return -1;
	}
	
	Buffer.prototype.includes = function includes(val, byteOffset, encoding) {
	  return this.indexOf(val, byteOffset, encoding) !== -1;
	};
	
	Buffer.prototype.indexOf = function indexOf(val, byteOffset, encoding) {
	  return bidirectionalIndexOf(this, val, byteOffset, encoding, true);
	};
	
	Buffer.prototype.lastIndexOf = function lastIndexOf(val, byteOffset, encoding) {
	  return bidirectionalIndexOf(this, val, byteOffset, encoding, false);
	};
	
	function hexWrite(buf, string, offset, length) {
	  offset = Number(offset) || 0;
	  var remaining = buf.length - offset;
	  if (!length) {
	    length = remaining;
	  } else {
	    length = Number(length);
	    if (length > remaining) {
	      length = remaining;
	    }
	  }
	
	  // must be an even number of digits
	  var strLen = string.length;
	  if (strLen % 2 !== 0) throw new TypeError('Invalid hex string');
	
	  if (length > strLen / 2) {
	    length = strLen / 2;
	  }
	  for (var i = 0; i < length; ++i) {
	    var parsed = parseInt(string.substr(i * 2, 2), 16);
	    if (isNaN(parsed)) return i;
	    buf[offset + i] = parsed;
	  }
	  return i;
	}
	
	function utf8Write(buf, string, offset, length) {
	  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length);
	}
	
	function asciiWrite(buf, string, offset, length) {
	  return blitBuffer(asciiToBytes(string), buf, offset, length);
	}
	
	function latin1Write(buf, string, offset, length) {
	  return asciiWrite(buf, string, offset, length);
	}
	
	function base64Write(buf, string, offset, length) {
	  return blitBuffer(base64ToBytes(string), buf, offset, length);
	}
	
	function ucs2Write(buf, string, offset, length) {
	  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length);
	}
	
	Buffer.prototype.write = function write(string, offset, length, encoding) {
	  // Buffer#write(string)
	  if (offset === undefined) {
	    encoding = 'utf8';
	    length = this.length;
	    offset = 0;
	    // Buffer#write(string, encoding)
	  } else if (length === undefined && typeof offset === 'string') {
	    encoding = offset;
	    length = this.length;
	    offset = 0;
	    // Buffer#write(string, offset[, length][, encoding])
	  } else if (isFinite(offset)) {
	    offset = offset | 0;
	    if (isFinite(length)) {
	      length = length | 0;
	      if (encoding === undefined) encoding = 'utf8';
	    } else {
	      encoding = length;
	      length = undefined;
	    }
	    // legacy write(string, encoding, offset, length) - remove in v0.13
	  } else {
	    throw new Error('Buffer.write(string, encoding, offset[, length]) is no longer supported');
	  }
	
	  var remaining = this.length - offset;
	  if (length === undefined || length > remaining) length = remaining;
	
	  if (string.length > 0 && (length < 0 || offset < 0) || offset > this.length) {
	    throw new RangeError('Attempt to write outside buffer bounds');
	  }
	
	  if (!encoding) encoding = 'utf8';
	
	  var loweredCase = false;
	  for (;;) {
	    switch (encoding) {
	      case 'hex':
	        return hexWrite(this, string, offset, length);
	
	      case 'utf8':
	      case 'utf-8':
	        return utf8Write(this, string, offset, length);
	
	      case 'ascii':
	        return asciiWrite(this, string, offset, length);
	
	      case 'latin1':
	      case 'binary':
	        return latin1Write(this, string, offset, length);
	
	      case 'base64':
	        // Warning: maxLength not taken into account in base64Write
	        return base64Write(this, string, offset, length);
	
	      case 'ucs2':
	      case 'ucs-2':
	      case 'utf16le':
	      case 'utf-16le':
	        return ucs2Write(this, string, offset, length);
	
	      default:
	        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding);
	        encoding = ('' + encoding).toLowerCase();
	        loweredCase = true;
	    }
	  }
	};
	
	Buffer.prototype.toJSON = function toJSON() {
	  return {
	    type: 'Buffer',
	    data: Array.prototype.slice.call(this._arr || this, 0)
	  };
	};
	
	function base64Slice(buf, start, end) {
	  if (start === 0 && end === buf.length) {
	    return base64.fromByteArray(buf);
	  } else {
	    return base64.fromByteArray(buf.slice(start, end));
	  }
	}
	
	function utf8Slice(buf, start, end) {
	  end = Math.min(buf.length, end);
	  var res = [];
	
	  var i = start;
	  while (i < end) {
	    var firstByte = buf[i];
	    var codePoint = null;
	    var bytesPerSequence = firstByte > 0xEF ? 4 : firstByte > 0xDF ? 3 : firstByte > 0xBF ? 2 : 1;
	
	    if (i + bytesPerSequence <= end) {
	      var secondByte, thirdByte, fourthByte, tempCodePoint;
	
	      switch (bytesPerSequence) {
	        case 1:
	          if (firstByte < 0x80) {
	            codePoint = firstByte;
	          }
	          break;
	        case 2:
	          secondByte = buf[i + 1];
	          if ((secondByte & 0xC0) === 0x80) {
	            tempCodePoint = (firstByte & 0x1F) << 0x6 | secondByte & 0x3F;
	            if (tempCodePoint > 0x7F) {
	              codePoint = tempCodePoint;
	            }
	          }
	          break;
	        case 3:
	          secondByte = buf[i + 1];
	          thirdByte = buf[i + 2];
	          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
	            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | thirdByte & 0x3F;
	            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {
	              codePoint = tempCodePoint;
	            }
	          }
	          break;
	        case 4:
	          secondByte = buf[i + 1];
	          thirdByte = buf[i + 2];
	          fourthByte = buf[i + 3];
	          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
	            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | fourthByte & 0x3F;
	            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {
	              codePoint = tempCodePoint;
	            }
	          }
	      }
	    }
	
	    if (codePoint === null) {
	      // we did not generate a valid codePoint so insert a
	      // replacement char (U+FFFD) and advance only 1 byte
	      codePoint = 0xFFFD;
	      bytesPerSequence = 1;
	    } else if (codePoint > 0xFFFF) {
	      // encode to utf16 (surrogate pair dance)
	      codePoint -= 0x10000;
	      res.push(codePoint >>> 10 & 0x3FF | 0xD800);
	      codePoint = 0xDC00 | codePoint & 0x3FF;
	    }
	
	    res.push(codePoint);
	    i += bytesPerSequence;
	  }
	
	  return decodeCodePointsArray(res);
	}
	
	// Based on http://stackoverflow.com/a/22747272/680742, the browser with
	// the lowest limit is Chrome, with 0x10000 args.
	// We go 1 magnitude less, for safety
	var MAX_ARGUMENTS_LENGTH = 0x1000;
	
	function decodeCodePointsArray(codePoints) {
	  var len = codePoints.length;
	  if (len <= MAX_ARGUMENTS_LENGTH) {
	    return String.fromCharCode.apply(String, codePoints); // avoid extra slice()
	  }
	
	  // Decode in chunks to avoid "call stack size exceeded".
	  var res = '';
	  var i = 0;
	  while (i < len) {
	    res += String.fromCharCode.apply(String, codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH));
	  }
	  return res;
	}
	
	function asciiSlice(buf, start, end) {
	  var ret = '';
	  end = Math.min(buf.length, end);
	
	  for (var i = start; i < end; ++i) {
	    ret += String.fromCharCode(buf[i] & 0x7F);
	  }
	  return ret;
	}
	
	function latin1Slice(buf, start, end) {
	  var ret = '';
	  end = Math.min(buf.length, end);
	
	  for (var i = start; i < end; ++i) {
	    ret += String.fromCharCode(buf[i]);
	  }
	  return ret;
	}
	
	function hexSlice(buf, start, end) {
	  var len = buf.length;
	
	  if (!start || start < 0) start = 0;
	  if (!end || end < 0 || end > len) end = len;
	
	  var out = '';
	  for (var i = start; i < end; ++i) {
	    out += toHex(buf[i]);
	  }
	  return out;
	}
	
	function utf16leSlice(buf, start, end) {
	  var bytes = buf.slice(start, end);
	  var res = '';
	  for (var i = 0; i < bytes.length; i += 2) {
	    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256);
	  }
	  return res;
	}
	
	Buffer.prototype.slice = function slice(start, end) {
	  var len = this.length;
	  start = ~~start;
	  end = end === undefined ? len : ~~end;
	
	  if (start < 0) {
	    start += len;
	    if (start < 0) start = 0;
	  } else if (start > len) {
	    start = len;
	  }
	
	  if (end < 0) {
	    end += len;
	    if (end < 0) end = 0;
	  } else if (end > len) {
	    end = len;
	  }
	
	  if (end < start) end = start;
	
	  var newBuf;
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    newBuf = this.subarray(start, end);
	    newBuf.__proto__ = Buffer.prototype;
	  } else {
	    var sliceLen = end - start;
	    newBuf = new Buffer(sliceLen, undefined);
	    for (var i = 0; i < sliceLen; ++i) {
	      newBuf[i] = this[i + start];
	    }
	  }
	
	  return newBuf;
	};
	
	/*
	 * Need to make sure that buffer isn't trying to write out of bounds.
	 */
	function checkOffset(offset, ext, length) {
	  if (offset % 1 !== 0 || offset < 0) throw new RangeError('offset is not uint');
	  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length');
	}
	
	Buffer.prototype.readUIntLE = function readUIntLE(offset, byteLength, noAssert) {
	  offset = offset | 0;
	  byteLength = byteLength | 0;
	  if (!noAssert) checkOffset(offset, byteLength, this.length);
	
	  var val = this[offset];
	  var mul = 1;
	  var i = 0;
	  while (++i < byteLength && (mul *= 0x100)) {
	    val += this[offset + i] * mul;
	  }
	
	  return val;
	};
	
	Buffer.prototype.readUIntBE = function readUIntBE(offset, byteLength, noAssert) {
	  offset = offset | 0;
	  byteLength = byteLength | 0;
	  if (!noAssert) {
	    checkOffset(offset, byteLength, this.length);
	  }
	
	  var val = this[offset + --byteLength];
	  var mul = 1;
	  while (byteLength > 0 && (mul *= 0x100)) {
	    val += this[offset + --byteLength] * mul;
	  }
	
	  return val;
	};
	
	Buffer.prototype.readUInt8 = function readUInt8(offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 1, this.length);
	  return this[offset];
	};
	
	Buffer.prototype.readUInt16LE = function readUInt16LE(offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 2, this.length);
	  return this[offset] | this[offset + 1] << 8;
	};
	
	Buffer.prototype.readUInt16BE = function readUInt16BE(offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 2, this.length);
	  return this[offset] << 8 | this[offset + 1];
	};
	
	Buffer.prototype.readUInt32LE = function readUInt32LE(offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 4, this.length);
	
	  return (this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16) + this[offset + 3] * 0x1000000;
	};
	
	Buffer.prototype.readUInt32BE = function readUInt32BE(offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 4, this.length);
	
	  return this[offset] * 0x1000000 + (this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3]);
	};
	
	Buffer.prototype.readIntLE = function readIntLE(offset, byteLength, noAssert) {
	  offset = offset | 0;
	  byteLength = byteLength | 0;
	  if (!noAssert) checkOffset(offset, byteLength, this.length);
	
	  var val = this[offset];
	  var mul = 1;
	  var i = 0;
	  while (++i < byteLength && (mul *= 0x100)) {
	    val += this[offset + i] * mul;
	  }
	  mul *= 0x80;
	
	  if (val >= mul) val -= Math.pow(2, 8 * byteLength);
	
	  return val;
	};
	
	Buffer.prototype.readIntBE = function readIntBE(offset, byteLength, noAssert) {
	  offset = offset | 0;
	  byteLength = byteLength | 0;
	  if (!noAssert) checkOffset(offset, byteLength, this.length);
	
	  var i = byteLength;
	  var mul = 1;
	  var val = this[offset + --i];
	  while (i > 0 && (mul *= 0x100)) {
	    val += this[offset + --i] * mul;
	  }
	  mul *= 0x80;
	
	  if (val >= mul) val -= Math.pow(2, 8 * byteLength);
	
	  return val;
	};
	
	Buffer.prototype.readInt8 = function readInt8(offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 1, this.length);
	  if (!(this[offset] & 0x80)) return this[offset];
	  return (0xff - this[offset] + 1) * -1;
	};
	
	Buffer.prototype.readInt16LE = function readInt16LE(offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 2, this.length);
	  var val = this[offset] | this[offset + 1] << 8;
	  return val & 0x8000 ? val | 0xFFFF0000 : val;
	};
	
	Buffer.prototype.readInt16BE = function readInt16BE(offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 2, this.length);
	  var val = this[offset + 1] | this[offset] << 8;
	  return val & 0x8000 ? val | 0xFFFF0000 : val;
	};
	
	Buffer.prototype.readInt32LE = function readInt32LE(offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 4, this.length);
	
	  return this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16 | this[offset + 3] << 24;
	};
	
	Buffer.prototype.readInt32BE = function readInt32BE(offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 4, this.length);
	
	  return this[offset] << 24 | this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3];
	};
	
	Buffer.prototype.readFloatLE = function readFloatLE(offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 4, this.length);
	  return ieee754.read(this, offset, true, 23, 4);
	};
	
	Buffer.prototype.readFloatBE = function readFloatBE(offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 4, this.length);
	  return ieee754.read(this, offset, false, 23, 4);
	};
	
	Buffer.prototype.readDoubleLE = function readDoubleLE(offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 8, this.length);
	  return ieee754.read(this, offset, true, 52, 8);
	};
	
	Buffer.prototype.readDoubleBE = function readDoubleBE(offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 8, this.length);
	  return ieee754.read(this, offset, false, 52, 8);
	};
	
	function checkInt(buf, value, offset, ext, max, min) {
	  if (!Buffer.isBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance');
	  if (value > max || value < min) throw new RangeError('"value" argument is out of bounds');
	  if (offset + ext > buf.length) throw new RangeError('Index out of range');
	}
	
	Buffer.prototype.writeUIntLE = function writeUIntLE(value, offset, byteLength, noAssert) {
	  value = +value;
	  offset = offset | 0;
	  byteLength = byteLength | 0;
	  if (!noAssert) {
	    var maxBytes = Math.pow(2, 8 * byteLength) - 1;
	    checkInt(this, value, offset, byteLength, maxBytes, 0);
	  }
	
	  var mul = 1;
	  var i = 0;
	  this[offset] = value & 0xFF;
	  while (++i < byteLength && (mul *= 0x100)) {
	    this[offset + i] = value / mul & 0xFF;
	  }
	
	  return offset + byteLength;
	};
	
	Buffer.prototype.writeUIntBE = function writeUIntBE(value, offset, byteLength, noAssert) {
	  value = +value;
	  offset = offset | 0;
	  byteLength = byteLength | 0;
	  if (!noAssert) {
	    var maxBytes = Math.pow(2, 8 * byteLength) - 1;
	    checkInt(this, value, offset, byteLength, maxBytes, 0);
	  }
	
	  var i = byteLength - 1;
	  var mul = 1;
	  this[offset + i] = value & 0xFF;
	  while (--i >= 0 && (mul *= 0x100)) {
	    this[offset + i] = value / mul & 0xFF;
	  }
	
	  return offset + byteLength;
	};
	
	Buffer.prototype.writeUInt8 = function writeUInt8(value, offset, noAssert) {
	  value = +value;
	  offset = offset | 0;
	  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0);
	  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value);
	  this[offset] = value & 0xff;
	  return offset + 1;
	};
	
	function objectWriteUInt16(buf, value, offset, littleEndian) {
	  if (value < 0) value = 0xffff + value + 1;
	  for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; ++i) {
	    buf[offset + i] = (value & 0xff << 8 * (littleEndian ? i : 1 - i)) >>> (littleEndian ? i : 1 - i) * 8;
	  }
	}
	
	Buffer.prototype.writeUInt16LE = function writeUInt16LE(value, offset, noAssert) {
	  value = +value;
	  offset = offset | 0;
	  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0);
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = value & 0xff;
	    this[offset + 1] = value >>> 8;
	  } else {
	    objectWriteUInt16(this, value, offset, true);
	  }
	  return offset + 2;
	};
	
	Buffer.prototype.writeUInt16BE = function writeUInt16BE(value, offset, noAssert) {
	  value = +value;
	  offset = offset | 0;
	  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0);
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = value >>> 8;
	    this[offset + 1] = value & 0xff;
	  } else {
	    objectWriteUInt16(this, value, offset, false);
	  }
	  return offset + 2;
	};
	
	function objectWriteUInt32(buf, value, offset, littleEndian) {
	  if (value < 0) value = 0xffffffff + value + 1;
	  for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; ++i) {
	    buf[offset + i] = value >>> (littleEndian ? i : 3 - i) * 8 & 0xff;
	  }
	}
	
	Buffer.prototype.writeUInt32LE = function writeUInt32LE(value, offset, noAssert) {
	  value = +value;
	  offset = offset | 0;
	  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0);
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset + 3] = value >>> 24;
	    this[offset + 2] = value >>> 16;
	    this[offset + 1] = value >>> 8;
	    this[offset] = value & 0xff;
	  } else {
	    objectWriteUInt32(this, value, offset, true);
	  }
	  return offset + 4;
	};
	
	Buffer.prototype.writeUInt32BE = function writeUInt32BE(value, offset, noAssert) {
	  value = +value;
	  offset = offset | 0;
	  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0);
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = value >>> 24;
	    this[offset + 1] = value >>> 16;
	    this[offset + 2] = value >>> 8;
	    this[offset + 3] = value & 0xff;
	  } else {
	    objectWriteUInt32(this, value, offset, false);
	  }
	  return offset + 4;
	};
	
	Buffer.prototype.writeIntLE = function writeIntLE(value, offset, byteLength, noAssert) {
	  value = +value;
	  offset = offset | 0;
	  if (!noAssert) {
	    var limit = Math.pow(2, 8 * byteLength - 1);
	
	    checkInt(this, value, offset, byteLength, limit - 1, -limit);
	  }
	
	  var i = 0;
	  var mul = 1;
	  var sub = 0;
	  this[offset] = value & 0xFF;
	  while (++i < byteLength && (mul *= 0x100)) {
	    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
	      sub = 1;
	    }
	    this[offset + i] = (value / mul >> 0) - sub & 0xFF;
	  }
	
	  return offset + byteLength;
	};
	
	Buffer.prototype.writeIntBE = function writeIntBE(value, offset, byteLength, noAssert) {
	  value = +value;
	  offset = offset | 0;
	  if (!noAssert) {
	    var limit = Math.pow(2, 8 * byteLength - 1);
	
	    checkInt(this, value, offset, byteLength, limit - 1, -limit);
	  }
	
	  var i = byteLength - 1;
	  var mul = 1;
	  var sub = 0;
	  this[offset + i] = value & 0xFF;
	  while (--i >= 0 && (mul *= 0x100)) {
	    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
	      sub = 1;
	    }
	    this[offset + i] = (value / mul >> 0) - sub & 0xFF;
	  }
	
	  return offset + byteLength;
	};
	
	Buffer.prototype.writeInt8 = function writeInt8(value, offset, noAssert) {
	  value = +value;
	  offset = offset | 0;
	  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80);
	  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value);
	  if (value < 0) value = 0xff + value + 1;
	  this[offset] = value & 0xff;
	  return offset + 1;
	};
	
	Buffer.prototype.writeInt16LE = function writeInt16LE(value, offset, noAssert) {
	  value = +value;
	  offset = offset | 0;
	  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000);
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = value & 0xff;
	    this[offset + 1] = value >>> 8;
	  } else {
	    objectWriteUInt16(this, value, offset, true);
	  }
	  return offset + 2;
	};
	
	Buffer.prototype.writeInt16BE = function writeInt16BE(value, offset, noAssert) {
	  value = +value;
	  offset = offset | 0;
	  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000);
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = value >>> 8;
	    this[offset + 1] = value & 0xff;
	  } else {
	    objectWriteUInt16(this, value, offset, false);
	  }
	  return offset + 2;
	};
	
	Buffer.prototype.writeInt32LE = function writeInt32LE(value, offset, noAssert) {
	  value = +value;
	  offset = offset | 0;
	  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000);
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = value & 0xff;
	    this[offset + 1] = value >>> 8;
	    this[offset + 2] = value >>> 16;
	    this[offset + 3] = value >>> 24;
	  } else {
	    objectWriteUInt32(this, value, offset, true);
	  }
	  return offset + 4;
	};
	
	Buffer.prototype.writeInt32BE = function writeInt32BE(value, offset, noAssert) {
	  value = +value;
	  offset = offset | 0;
	  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000);
	  if (value < 0) value = 0xffffffff + value + 1;
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = value >>> 24;
	    this[offset + 1] = value >>> 16;
	    this[offset + 2] = value >>> 8;
	    this[offset + 3] = value & 0xff;
	  } else {
	    objectWriteUInt32(this, value, offset, false);
	  }
	  return offset + 4;
	};
	
	function checkIEEE754(buf, value, offset, ext, max, min) {
	  if (offset + ext > buf.length) throw new RangeError('Index out of range');
	  if (offset < 0) throw new RangeError('Index out of range');
	}
	
	function writeFloat(buf, value, offset, littleEndian, noAssert) {
	  if (!noAssert) {
	    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38);
	  }
	  ieee754.write(buf, value, offset, littleEndian, 23, 4);
	  return offset + 4;
	}
	
	Buffer.prototype.writeFloatLE = function writeFloatLE(value, offset, noAssert) {
	  return writeFloat(this, value, offset, true, noAssert);
	};
	
	Buffer.prototype.writeFloatBE = function writeFloatBE(value, offset, noAssert) {
	  return writeFloat(this, value, offset, false, noAssert);
	};
	
	function writeDouble(buf, value, offset, littleEndian, noAssert) {
	  if (!noAssert) {
	    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308);
	  }
	  ieee754.write(buf, value, offset, littleEndian, 52, 8);
	  return offset + 8;
	}
	
	Buffer.prototype.writeDoubleLE = function writeDoubleLE(value, offset, noAssert) {
	  return writeDouble(this, value, offset, true, noAssert);
	};
	
	Buffer.prototype.writeDoubleBE = function writeDoubleBE(value, offset, noAssert) {
	  return writeDouble(this, value, offset, false, noAssert);
	};
	
	// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
	Buffer.prototype.copy = function copy(target, targetStart, start, end) {
	  if (!start) start = 0;
	  if (!end && end !== 0) end = this.length;
	  if (targetStart >= target.length) targetStart = target.length;
	  if (!targetStart) targetStart = 0;
	  if (end > 0 && end < start) end = start;
	
	  // Copy 0 bytes; we're done
	  if (end === start) return 0;
	  if (target.length === 0 || this.length === 0) return 0;
	
	  // Fatal error conditions
	  if (targetStart < 0) {
	    throw new RangeError('targetStart out of bounds');
	  }
	  if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds');
	  if (end < 0) throw new RangeError('sourceEnd out of bounds');
	
	  // Are we oob?
	  if (end > this.length) end = this.length;
	  if (target.length - targetStart < end - start) {
	    end = target.length - targetStart + start;
	  }
	
	  var len = end - start;
	  var i;
	
	  if (this === target && start < targetStart && targetStart < end) {
	    // descending copy from end
	    for (i = len - 1; i >= 0; --i) {
	      target[i + targetStart] = this[i + start];
	    }
	  } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {
	    // ascending copy from start
	    for (i = 0; i < len; ++i) {
	      target[i + targetStart] = this[i + start];
	    }
	  } else {
	    Uint8Array.prototype.set.call(target, this.subarray(start, start + len), targetStart);
	  }
	
	  return len;
	};
	
	// Usage:
	//    buffer.fill(number[, offset[, end]])
	//    buffer.fill(buffer[, offset[, end]])
	//    buffer.fill(string[, offset[, end]][, encoding])
	Buffer.prototype.fill = function fill(val, start, end, encoding) {
	  // Handle string cases:
	  if (typeof val === 'string') {
	    if (typeof start === 'string') {
	      encoding = start;
	      start = 0;
	      end = this.length;
	    } else if (typeof end === 'string') {
	      encoding = end;
	      end = this.length;
	    }
	    if (val.length === 1) {
	      var code = val.charCodeAt(0);
	      if (code < 256) {
	        val = code;
	      }
	    }
	    if (encoding !== undefined && typeof encoding !== 'string') {
	      throw new TypeError('encoding must be a string');
	    }
	    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {
	      throw new TypeError('Unknown encoding: ' + encoding);
	    }
	  } else if (typeof val === 'number') {
	    val = val & 255;
	  }
	
	  // Invalid ranges are not set to a default, so can range check early.
	  if (start < 0 || this.length < start || this.length < end) {
	    throw new RangeError('Out of range index');
	  }
	
	  if (end <= start) {
	    return this;
	  }
	
	  start = start >>> 0;
	  end = end === undefined ? this.length : end >>> 0;
	
	  if (!val) val = 0;
	
	  var i;
	  if (typeof val === 'number') {
	    for (i = start; i < end; ++i) {
	      this[i] = val;
	    }
	  } else {
	    var bytes = Buffer.isBuffer(val) ? val : utf8ToBytes(new Buffer(val, encoding).toString());
	    var len = bytes.length;
	    for (i = 0; i < end - start; ++i) {
	      this[i + start] = bytes[i % len];
	    }
	  }
	
	  return this;
	};
	
	// HELPER FUNCTIONS
	// ================
	
	var INVALID_BASE64_RE = /[^+\/0-9A-Za-z-_]/g;
	
	function base64clean(str) {
	  // Node strips out invalid characters like \n and \t from the string, base64-js does not
	  str = stringtrim(str).replace(INVALID_BASE64_RE, '');
	  // Node converts strings with length < 2 to ''
	  if (str.length < 2) return '';
	  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
	  while (str.length % 4 !== 0) {
	    str = str + '=';
	  }
	  return str;
	}
	
	function stringtrim(str) {
	  if (str.trim) return str.trim();
	  return str.replace(/^\s+|\s+$/g, '');
	}
	
	function toHex(n) {
	  if (n < 16) return '0' + n.toString(16);
	  return n.toString(16);
	}
	
	function utf8ToBytes(string, units) {
	  units = units || Infinity;
	  var codePoint;
	  var length = string.length;
	  var leadSurrogate = null;
	  var bytes = [];
	
	  for (var i = 0; i < length; ++i) {
	    codePoint = string.charCodeAt(i);
	
	    // is surrogate component
	    if (codePoint > 0xD7FF && codePoint < 0xE000) {
	      // last char was a lead
	      if (!leadSurrogate) {
	        // no lead yet
	        if (codePoint > 0xDBFF) {
	          // unexpected trail
	          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
	          continue;
	        } else if (i + 1 === length) {
	          // unpaired lead
	          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
	          continue;
	        }
	
	        // valid lead
	        leadSurrogate = codePoint;
	
	        continue;
	      }
	
	      // 2 leads in a row
	      if (codePoint < 0xDC00) {
	        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
	        leadSurrogate = codePoint;
	        continue;
	      }
	
	      // valid surrogate pair
	      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000;
	    } else if (leadSurrogate) {
	      // valid bmp char, but last char was a lead
	      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
	    }
	
	    leadSurrogate = null;
	
	    // encode utf8
	    if (codePoint < 0x80) {
	      if ((units -= 1) < 0) break;
	      bytes.push(codePoint);
	    } else if (codePoint < 0x800) {
	      if ((units -= 2) < 0) break;
	      bytes.push(codePoint >> 0x6 | 0xC0, codePoint & 0x3F | 0x80);
	    } else if (codePoint < 0x10000) {
	      if ((units -= 3) < 0) break;
	      bytes.push(codePoint >> 0xC | 0xE0, codePoint >> 0x6 & 0x3F | 0x80, codePoint & 0x3F | 0x80);
	    } else if (codePoint < 0x110000) {
	      if ((units -= 4) < 0) break;
	      bytes.push(codePoint >> 0x12 | 0xF0, codePoint >> 0xC & 0x3F | 0x80, codePoint >> 0x6 & 0x3F | 0x80, codePoint & 0x3F | 0x80);
	    } else {
	      throw new Error('Invalid code point');
	    }
	  }
	
	  return bytes;
	}
	
	function asciiToBytes(str) {
	  var byteArray = [];
	  for (var i = 0; i < str.length; ++i) {
	    // Node's code seems to be doing this and not & 0x7F..
	    byteArray.push(str.charCodeAt(i) & 0xFF);
	  }
	  return byteArray;
	}
	
	function utf16leToBytes(str, units) {
	  var c, hi, lo;
	  var byteArray = [];
	  for (var i = 0; i < str.length; ++i) {
	    if ((units -= 2) < 0) break;
	
	    c = str.charCodeAt(i);
	    hi = c >> 8;
	    lo = c % 256;
	    byteArray.push(lo);
	    byteArray.push(hi);
	  }
	
	  return byteArray;
	}
	
	function base64ToBytes(str) {
	  return base64.toByteArray(base64clean(str));
	}
	
	function blitBuffer(src, dst, offset, length) {
	  for (var i = 0; i < length; ++i) {
	    if (i + offset >= dst.length || i >= src.length) break;
	    dst[i + offset] = src[i];
	  }
	  return i;
	}
	
	function isnan(val) {
	  return val !== val; // eslint-disable-line no-self-compare
	}
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ }),
/* 291 */
/***/ (function(module, exports) {

	'use strict';
	
	exports.byteLength = byteLength;
	exports.toByteArray = toByteArray;
	exports.fromByteArray = fromByteArray;
	
	var lookup = [];
	var revLookup = [];
	var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array;
	
	var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
	for (var i = 0, len = code.length; i < len; ++i) {
	  lookup[i] = code[i];
	  revLookup[code.charCodeAt(i)] = i;
	}
	
	revLookup['-'.charCodeAt(0)] = 62;
	revLookup['_'.charCodeAt(0)] = 63;
	
	function placeHoldersCount(b64) {
	  var len = b64.length;
	  if (len % 4 > 0) {
	    throw new Error('Invalid string. Length must be a multiple of 4');
	  }
	
	  // the number of equal signs (place holders)
	  // if there are two placeholders, than the two characters before it
	  // represent one byte
	  // if there is only one, then the three characters before it represent 2 bytes
	  // this is just a cheap hack to not do indexOf twice
	  return b64[len - 2] === '=' ? 2 : b64[len - 1] === '=' ? 1 : 0;
	}
	
	function byteLength(b64) {
	  // base64 is 4/3 + up to two characters of the original data
	  return b64.length * 3 / 4 - placeHoldersCount(b64);
	}
	
	function toByteArray(b64) {
	  var i, j, l, tmp, placeHolders, arr;
	  var len = b64.length;
	  placeHolders = placeHoldersCount(b64);
	
	  arr = new Arr(len * 3 / 4 - placeHolders);
	
	  // if there are placeholders, only get up to the last complete 4 chars
	  l = placeHolders > 0 ? len - 4 : len;
	
	  var L = 0;
	
	  for (i = 0, j = 0; i < l; i += 4, j += 3) {
	    tmp = revLookup[b64.charCodeAt(i)] << 18 | revLookup[b64.charCodeAt(i + 1)] << 12 | revLookup[b64.charCodeAt(i + 2)] << 6 | revLookup[b64.charCodeAt(i + 3)];
	    arr[L++] = tmp >> 16 & 0xFF;
	    arr[L++] = tmp >> 8 & 0xFF;
	    arr[L++] = tmp & 0xFF;
	  }
	
	  if (placeHolders === 2) {
	    tmp = revLookup[b64.charCodeAt(i)] << 2 | revLookup[b64.charCodeAt(i + 1)] >> 4;
	    arr[L++] = tmp & 0xFF;
	  } else if (placeHolders === 1) {
	    tmp = revLookup[b64.charCodeAt(i)] << 10 | revLookup[b64.charCodeAt(i + 1)] << 4 | revLookup[b64.charCodeAt(i + 2)] >> 2;
	    arr[L++] = tmp >> 8 & 0xFF;
	    arr[L++] = tmp & 0xFF;
	  }
	
	  return arr;
	}
	
	function tripletToBase64(num) {
	  return lookup[num >> 18 & 0x3F] + lookup[num >> 12 & 0x3F] + lookup[num >> 6 & 0x3F] + lookup[num & 0x3F];
	}
	
	function encodeChunk(uint8, start, end) {
	  var tmp;
	  var output = [];
	  for (var i = start; i < end; i += 3) {
	    tmp = (uint8[i] << 16) + (uint8[i + 1] << 8) + uint8[i + 2];
	    output.push(tripletToBase64(tmp));
	  }
	  return output.join('');
	}
	
	function fromByteArray(uint8) {
	  var tmp;
	  var len = uint8.length;
	  var extraBytes = len % 3; // if we have 1 byte left, pad 2 bytes
	  var output = '';
	  var parts = [];
	  var maxChunkLength = 16383; // must be multiple of 3
	
	  // go through the array every three bytes, we'll deal with trailing stuff later
	  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {
	    parts.push(encodeChunk(uint8, i, i + maxChunkLength > len2 ? len2 : i + maxChunkLength));
	  }
	
	  // pad the end with zeros, but make sure to not forget the extra bytes
	  if (extraBytes === 1) {
	    tmp = uint8[len - 1];
	    output += lookup[tmp >> 2];
	    output += lookup[tmp << 4 & 0x3F];
	    output += '==';
	  } else if (extraBytes === 2) {
	    tmp = (uint8[len - 2] << 8) + uint8[len - 1];
	    output += lookup[tmp >> 10];
	    output += lookup[tmp >> 4 & 0x3F];
	    output += lookup[tmp << 2 & 0x3F];
	    output += '=';
	  }
	
	  parts.push(output);
	
	  return parts.join('');
	}

/***/ }),
/* 292 */
/***/ (function(module, exports) {

	"use strict";
	
	exports.read = function (buffer, offset, isLE, mLen, nBytes) {
	  var e, m;
	  var eLen = nBytes * 8 - mLen - 1;
	  var eMax = (1 << eLen) - 1;
	  var eBias = eMax >> 1;
	  var nBits = -7;
	  var i = isLE ? nBytes - 1 : 0;
	  var d = isLE ? -1 : 1;
	  var s = buffer[offset + i];
	
	  i += d;
	
	  e = s & (1 << -nBits) - 1;
	  s >>= -nBits;
	  nBits += eLen;
	  for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8) {}
	
	  m = e & (1 << -nBits) - 1;
	  e >>= -nBits;
	  nBits += mLen;
	  for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8) {}
	
	  if (e === 0) {
	    e = 1 - eBias;
	  } else if (e === eMax) {
	    return m ? NaN : (s ? -1 : 1) * Infinity;
	  } else {
	    m = m + Math.pow(2, mLen);
	    e = e - eBias;
	  }
	  return (s ? -1 : 1) * m * Math.pow(2, e - mLen);
	};
	
	exports.write = function (buffer, value, offset, isLE, mLen, nBytes) {
	  var e, m, c;
	  var eLen = nBytes * 8 - mLen - 1;
	  var eMax = (1 << eLen) - 1;
	  var eBias = eMax >> 1;
	  var rt = mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0;
	  var i = isLE ? 0 : nBytes - 1;
	  var d = isLE ? 1 : -1;
	  var s = value < 0 || value === 0 && 1 / value < 0 ? 1 : 0;
	
	  value = Math.abs(value);
	
	  if (isNaN(value) || value === Infinity) {
	    m = isNaN(value) ? 1 : 0;
	    e = eMax;
	  } else {
	    e = Math.floor(Math.log(value) / Math.LN2);
	    if (value * (c = Math.pow(2, -e)) < 1) {
	      e--;
	      c *= 2;
	    }
	    if (e + eBias >= 1) {
	      value += rt / c;
	    } else {
	      value += rt * Math.pow(2, 1 - eBias);
	    }
	    if (value * c >= 2) {
	      e++;
	      c /= 2;
	    }
	
	    if (e + eBias >= eMax) {
	      m = 0;
	      e = eMax;
	    } else if (e + eBias >= 1) {
	      m = (value * c - 1) * Math.pow(2, mLen);
	      e = e + eBias;
	    } else {
	      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen);
	      e = 0;
	    }
	  }
	
	  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}
	
	  e = e << mLen | m;
	  eLen += mLen;
	  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}
	
	  buffer[offset + i - d] |= s * 128;
	};

/***/ }),
/* 293 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global) {'use strict';
	
	var buffer = __webpack_require__(290);
	var Buffer = buffer.Buffer;
	var SlowBuffer = buffer.SlowBuffer;
	var MAX_LEN = buffer.kMaxLength || 2147483647;
	exports.alloc = function alloc(size, fill, encoding) {
	  if (typeof Buffer.alloc === 'function') {
	    return Buffer.alloc(size, fill, encoding);
	  }
	  if (typeof encoding === 'number') {
	    throw new TypeError('encoding must not be number');
	  }
	  if (typeof size !== 'number') {
	    throw new TypeError('size must be a number');
	  }
	  if (size > MAX_LEN) {
	    throw new RangeError('size is too large');
	  }
	  var enc = encoding;
	  var _fill = fill;
	  if (_fill === undefined) {
	    enc = undefined;
	    _fill = 0;
	  }
	  var buf = new Buffer(size);
	  if (typeof _fill === 'string') {
	    var fillBuf = new Buffer(_fill, enc);
	    var flen = fillBuf.length;
	    var i = -1;
	    while (++i < size) {
	      buf[i] = fillBuf[i % flen];
	    }
	  } else {
	    buf.fill(_fill);
	  }
	  return buf;
	};
	exports.allocUnsafe = function allocUnsafe(size) {
	  if (typeof Buffer.allocUnsafe === 'function') {
	    return Buffer.allocUnsafe(size);
	  }
	  if (typeof size !== 'number') {
	    throw new TypeError('size must be a number');
	  }
	  if (size > MAX_LEN) {
	    throw new RangeError('size is too large');
	  }
	  return new Buffer(size);
	};
	exports.from = function from(value, encodingOrOffset, length) {
	  if (typeof Buffer.from === 'function' && (!global.Uint8Array || Uint8Array.from !== Buffer.from)) {
	    return Buffer.from(value, encodingOrOffset, length);
	  }
	  if (typeof value === 'number') {
	    throw new TypeError('"value" argument must not be a number');
	  }
	  if (typeof value === 'string') {
	    return new Buffer(value, encodingOrOffset);
	  }
	  if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {
	    var offset = encodingOrOffset;
	    if (arguments.length === 1) {
	      return new Buffer(value);
	    }
	    if (typeof offset === 'undefined') {
	      offset = 0;
	    }
	    var len = length;
	    if (typeof len === 'undefined') {
	      len = value.byteLength - offset;
	    }
	    if (offset >= value.byteLength) {
	      throw new RangeError('\'offset\' is out of bounds');
	    }
	    if (len > value.byteLength - offset) {
	      throw new RangeError('\'length\' is out of bounds');
	    }
	    return new Buffer(value.slice(offset, offset + len));
	  }
	  if (Buffer.isBuffer(value)) {
	    var out = new Buffer(value.length);
	    value.copy(out, 0, 0, value.length);
	    return out;
	  }
	  if (value) {
	    if (Array.isArray(value) || typeof ArrayBuffer !== 'undefined' && value.buffer instanceof ArrayBuffer || 'length' in value) {
	      return new Buffer(value);
	    }
	    if (value.type === 'Buffer' && Array.isArray(value.data)) {
	      return new Buffer(value.data);
	    }
	  }
	
	  throw new TypeError('First argument must be a string, Buffer, ' + 'ArrayBuffer, Array, or array-like object.');
	};
	exports.allocUnsafeSlow = function allocUnsafeSlow(size) {
	  if (typeof Buffer.allocUnsafeSlow === 'function') {
	    return Buffer.allocUnsafeSlow(size);
	  }
	  if (typeof size !== 'number') {
	    throw new TypeError('size must be a number');
	  }
	  if (size >= MAX_LEN) {
	    throw new RangeError('size is too large');
	  }
	  return new SlowBuffer(size);
	};
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ }),
/* 294 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {'use strict';
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
	
	// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.
	
	// NOTE: These type checking functions intentionally don't use `instanceof`
	// because it is fragile and can be easily faked with `Object.create()`.
	
	function isArray(arg) {
	  if (Array.isArray) {
	    return Array.isArray(arg);
	  }
	  return objectToString(arg) === '[object Array]';
	}
	exports.isArray = isArray;
	
	function isBoolean(arg) {
	  return typeof arg === 'boolean';
	}
	exports.isBoolean = isBoolean;
	
	function isNull(arg) {
	  return arg === null;
	}
	exports.isNull = isNull;
	
	function isNullOrUndefined(arg) {
	  return arg == null;
	}
	exports.isNullOrUndefined = isNullOrUndefined;
	
	function isNumber(arg) {
	  return typeof arg === 'number';
	}
	exports.isNumber = isNumber;
	
	function isString(arg) {
	  return typeof arg === 'string';
	}
	exports.isString = isString;
	
	function isSymbol(arg) {
	  return (typeof arg === 'undefined' ? 'undefined' : _typeof(arg)) === 'symbol';
	}
	exports.isSymbol = isSymbol;
	
	function isUndefined(arg) {
	  return arg === void 0;
	}
	exports.isUndefined = isUndefined;
	
	function isRegExp(re) {
	  return objectToString(re) === '[object RegExp]';
	}
	exports.isRegExp = isRegExp;
	
	function isObject(arg) {
	  return (typeof arg === 'undefined' ? 'undefined' : _typeof(arg)) === 'object' && arg !== null;
	}
	exports.isObject = isObject;
	
	function isDate(d) {
	  return objectToString(d) === '[object Date]';
	}
	exports.isDate = isDate;
	
	function isError(e) {
	  return objectToString(e) === '[object Error]' || e instanceof Error;
	}
	exports.isError = isError;
	
	function isFunction(arg) {
	  return typeof arg === 'function';
	}
	exports.isFunction = isFunction;
	
	function isPrimitive(arg) {
	  return arg === null || typeof arg === 'boolean' || typeof arg === 'number' || typeof arg === 'string' || (typeof arg === 'undefined' ? 'undefined' : _typeof(arg)) === 'symbol' || // ES6 symbol
	  typeof arg === 'undefined';
	}
	exports.isPrimitive = isPrimitive;
	
	exports.isBuffer = Buffer.isBuffer;
	
	function objectToString(o) {
	  return Object.prototype.toString.call(o);
	}
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(290).Buffer))

/***/ }),
/* 295 */
/***/ (function(module, exports) {

	/* (ignored) */

/***/ }),
/* 296 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var Buffer = __webpack_require__(290).Buffer;
	/*<replacement>*/
	var bufferShim = __webpack_require__(293);
	/*</replacement>*/
	
	module.exports = BufferList;
	
	function BufferList() {
	  this.head = null;
	  this.tail = null;
	  this.length = 0;
	}
	
	BufferList.prototype.push = function (v) {
	  var entry = { data: v, next: null };
	  if (this.length > 0) this.tail.next = entry;else this.head = entry;
	  this.tail = entry;
	  ++this.length;
	};
	
	BufferList.prototype.unshift = function (v) {
	  var entry = { data: v, next: this.head };
	  if (this.length === 0) this.tail = entry;
	  this.head = entry;
	  ++this.length;
	};
	
	BufferList.prototype.shift = function () {
	  if (this.length === 0) return;
	  var ret = this.head.data;
	  if (this.length === 1) this.head = this.tail = null;else this.head = this.head.next;
	  --this.length;
	  return ret;
	};
	
	BufferList.prototype.clear = function () {
	  this.head = this.tail = null;
	  this.length = 0;
	};
	
	BufferList.prototype.join = function (s) {
	  if (this.length === 0) return '';
	  var p = this.head;
	  var ret = '' + p.data;
	  while (p = p.next) {
	    ret += s + p.data;
	  }return ret;
	};
	
	BufferList.prototype.concat = function (n) {
	  if (this.length === 0) return bufferShim.alloc(0);
	  if (this.length === 1) return this.head.data;
	  var ret = bufferShim.allocUnsafe(n >>> 0);
	  var p = this.head;
	  var i = 0;
	  while (p) {
	    p.data.copy(ret, i);
	    i += p.data.length;
	    p = p.next;
	  }
	  return ret;
	};

/***/ }),
/* 297 */
/***/ (function(module, exports, __webpack_require__) {

	// a duplex stream is just a stream that is both readable and writable.
	// Since JS doesn't have multiple prototypal inheritance, this class
	// prototypally inherits from Readable, and then parasitically from
	// Writable.
	
	'use strict';
	
	/*<replacement>*/
	
	var objectKeys = Object.keys || function (obj) {
	  var keys = [];
	  for (var key in obj) {
	    keys.push(key);
	  }return keys;
	};
	/*</replacement>*/
	
	module.exports = Duplex;
	
	/*<replacement>*/
	var processNextTick = __webpack_require__(287);
	/*</replacement>*/
	
	/*<replacement>*/
	var util = __webpack_require__(294);
	util.inherits = __webpack_require__(284);
	/*</replacement>*/
	
	var Readable = __webpack_require__(286);
	var Writable = __webpack_require__(298);
	
	util.inherits(Duplex, Readable);
	
	var keys = objectKeys(Writable.prototype);
	for (var v = 0; v < keys.length; v++) {
	  var method = keys[v];
	  if (!Duplex.prototype[method]) Duplex.prototype[method] = Writable.prototype[method];
	}
	
	function Duplex(options) {
	  if (!(this instanceof Duplex)) return new Duplex(options);
	
	  Readable.call(this, options);
	  Writable.call(this, options);
	
	  if (options && options.readable === false) this.readable = false;
	
	  if (options && options.writable === false) this.writable = false;
	
	  this.allowHalfOpen = true;
	  if (options && options.allowHalfOpen === false) this.allowHalfOpen = false;
	
	  this.once('end', onend);
	}
	
	// the no-half-open enforcer
	function onend() {
	  // if we allow half-open state, or if the writable side ended,
	  // then we're ok.
	  if (this.allowHalfOpen || this._writableState.ended) return;
	
	  // no more data can be written.
	  // But allow more writes to happen in this tick.
	  processNextTick(onEndNT, this);
	}
	
	function onEndNT(self) {
	  self.end();
	}
	
	function forEach(xs, f) {
	  for (var i = 0, l = xs.length; i < l; i++) {
	    f(xs[i], i);
	  }
	}

/***/ }),
/* 298 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process, setImmediate) {// A bit simpler than readable streams.
	// Implement an async ._write(chunk, encoding, cb), and it'll handle all
	// the drain event emission and buffering.
	
	'use strict';
	
	module.exports = Writable;
	
	/*<replacement>*/
	var processNextTick = __webpack_require__(287);
	/*</replacement>*/
	
	/*<replacement>*/
	var asyncWrite = !process.browser && ['v0.10', 'v0.9.'].indexOf(process.version.slice(0, 5)) > -1 ? setImmediate : processNextTick;
	/*</replacement>*/
	
	/*<replacement>*/
	var Duplex;
	/*</replacement>*/
	
	Writable.WritableState = WritableState;
	
	/*<replacement>*/
	var util = __webpack_require__(294);
	util.inherits = __webpack_require__(284);
	/*</replacement>*/
	
	/*<replacement>*/
	var internalUtil = {
	  deprecate: __webpack_require__(301)
	};
	/*</replacement>*/
	
	/*<replacement>*/
	var Stream = __webpack_require__(289);
	/*</replacement>*/
	
	var Buffer = __webpack_require__(290).Buffer;
	/*<replacement>*/
	var bufferShim = __webpack_require__(293);
	/*</replacement>*/
	
	util.inherits(Writable, Stream);
	
	function nop() {}
	
	function WriteReq(chunk, encoding, cb) {
	  this.chunk = chunk;
	  this.encoding = encoding;
	  this.callback = cb;
	  this.next = null;
	}
	
	function WritableState(options, stream) {
	  Duplex = Duplex || __webpack_require__(297);
	
	  options = options || {};
	
	  // object stream flag to indicate whether or not this stream
	  // contains buffers or objects.
	  this.objectMode = !!options.objectMode;
	
	  if (stream instanceof Duplex) this.objectMode = this.objectMode || !!options.writableObjectMode;
	
	  // the point at which write() starts returning false
	  // Note: 0 is a valid value, means that we always return false if
	  // the entire buffer is not flushed immediately on write()
	  var hwm = options.highWaterMark;
	  var defaultHwm = this.objectMode ? 16 : 16 * 1024;
	  this.highWaterMark = hwm || hwm === 0 ? hwm : defaultHwm;
	
	  // cast to ints.
	  this.highWaterMark = ~~this.highWaterMark;
	
	  // drain event flag.
	  this.needDrain = false;
	  // at the start of calling end()
	  this.ending = false;
	  // when end() has been called, and returned
	  this.ended = false;
	  // when 'finish' is emitted
	  this.finished = false;
	
	  // should we decode strings into buffers before passing to _write?
	  // this is here so that some node-core streams can optimize string
	  // handling at a lower level.
	  var noDecode = options.decodeStrings === false;
	  this.decodeStrings = !noDecode;
	
	  // Crypto is kind of old and crusty.  Historically, its default string
	  // encoding is 'binary' so we have to make this configurable.
	  // Everything else in the universe uses 'utf8', though.
	  this.defaultEncoding = options.defaultEncoding || 'utf8';
	
	  // not an actual buffer we keep track of, but a measurement
	  // of how much we're waiting to get pushed to some underlying
	  // socket or file.
	  this.length = 0;
	
	  // a flag to see when we're in the middle of a write.
	  this.writing = false;
	
	  // when true all writes will be buffered until .uncork() call
	  this.corked = 0;
	
	  // a flag to be able to tell if the onwrite cb is called immediately,
	  // or on a later tick.  We set this to true at first, because any
	  // actions that shouldn't happen until "later" should generally also
	  // not happen before the first write call.
	  this.sync = true;
	
	  // a flag to know if we're processing previously buffered items, which
	  // may call the _write() callback in the same tick, so that we don't
	  // end up in an overlapped onwrite situation.
	  this.bufferProcessing = false;
	
	  // the callback that's passed to _write(chunk,cb)
	  this.onwrite = function (er) {
	    onwrite(stream, er);
	  };
	
	  // the callback that the user supplies to write(chunk,encoding,cb)
	  this.writecb = null;
	
	  // the amount that is being written when _write is called.
	  this.writelen = 0;
	
	  this.bufferedRequest = null;
	  this.lastBufferedRequest = null;
	
	  // number of pending user-supplied write callbacks
	  // this must be 0 before 'finish' can be emitted
	  this.pendingcb = 0;
	
	  // emit prefinish if the only thing we're waiting for is _write cbs
	  // This is relevant for synchronous Transform streams
	  this.prefinished = false;
	
	  // True if the error was already emitted and should not be thrown again
	  this.errorEmitted = false;
	
	  // count buffered requests
	  this.bufferedRequestCount = 0;
	
	  // allocate the first CorkedRequest, there is always
	  // one allocated and free to use, and we maintain at most two
	  this.corkedRequestsFree = new CorkedRequest(this);
	}
	
	WritableState.prototype.getBuffer = function getBuffer() {
	  var current = this.bufferedRequest;
	  var out = [];
	  while (current) {
	    out.push(current);
	    current = current.next;
	  }
	  return out;
	};
	
	(function () {
	  try {
	    Object.defineProperty(WritableState.prototype, 'buffer', {
	      get: internalUtil.deprecate(function () {
	        return this.getBuffer();
	      }, '_writableState.buffer is deprecated. Use _writableState.getBuffer ' + 'instead.')
	    });
	  } catch (_) {}
	})();
	
	// Test _writableState for inheritance to account for Duplex streams,
	// whose prototype chain only points to Readable.
	var realHasInstance;
	if (typeof Symbol === 'function' && Symbol.hasInstance && typeof Function.prototype[Symbol.hasInstance] === 'function') {
	  realHasInstance = Function.prototype[Symbol.hasInstance];
	  Object.defineProperty(Writable, Symbol.hasInstance, {
	    value: function value(object) {
	      if (realHasInstance.call(this, object)) return true;
	
	      return object && object._writableState instanceof WritableState;
	    }
	  });
	} else {
	  realHasInstance = function realHasInstance(object) {
	    return object instanceof this;
	  };
	}
	
	function Writable(options) {
	  Duplex = Duplex || __webpack_require__(297);
	
	  // Writable ctor is applied to Duplexes, too.
	  // `realHasInstance` is necessary because using plain `instanceof`
	  // would return false, as no `_writableState` property is attached.
	
	  // Trying to use the custom `instanceof` for Writable here will also break the
	  // Node.js LazyTransform implementation, which has a non-trivial getter for
	  // `_writableState` that would lead to infinite recursion.
	  if (!realHasInstance.call(Writable, this) && !(this instanceof Duplex)) {
	    return new Writable(options);
	  }
	
	  this._writableState = new WritableState(options, this);
	
	  // legacy.
	  this.writable = true;
	
	  if (options) {
	    if (typeof options.write === 'function') this._write = options.write;
	
	    if (typeof options.writev === 'function') this._writev = options.writev;
	  }
	
	  Stream.call(this);
	}
	
	// Otherwise people can pipe Writable streams, which is just wrong.
	Writable.prototype.pipe = function () {
	  this.emit('error', new Error('Cannot pipe, not readable'));
	};
	
	function writeAfterEnd(stream, cb) {
	  var er = new Error('write after end');
	  // TODO: defer error events consistently everywhere, not just the cb
	  stream.emit('error', er);
	  processNextTick(cb, er);
	}
	
	// Checks that a user-supplied chunk is valid, especially for the particular
	// mode the stream is in. Currently this means that `null` is never accepted
	// and undefined/non-string values are only allowed in object mode.
	function validChunk(stream, state, chunk, cb) {
	  var valid = true;
	  var er = false;
	
	  if (chunk === null) {
	    er = new TypeError('May not write null values to stream');
	  } else if (typeof chunk !== 'string' && chunk !== undefined && !state.objectMode) {
	    er = new TypeError('Invalid non-string/buffer chunk');
	  }
	  if (er) {
	    stream.emit('error', er);
	    processNextTick(cb, er);
	    valid = false;
	  }
	  return valid;
	}
	
	Writable.prototype.write = function (chunk, encoding, cb) {
	  var state = this._writableState;
	  var ret = false;
	  var isBuf = Buffer.isBuffer(chunk);
	
	  if (typeof encoding === 'function') {
	    cb = encoding;
	    encoding = null;
	  }
	
	  if (isBuf) encoding = 'buffer';else if (!encoding) encoding = state.defaultEncoding;
	
	  if (typeof cb !== 'function') cb = nop;
	
	  if (state.ended) writeAfterEnd(this, cb);else if (isBuf || validChunk(this, state, chunk, cb)) {
	    state.pendingcb++;
	    ret = writeOrBuffer(this, state, isBuf, chunk, encoding, cb);
	  }
	
	  return ret;
	};
	
	Writable.prototype.cork = function () {
	  var state = this._writableState;
	
	  state.corked++;
	};
	
	Writable.prototype.uncork = function () {
	  var state = this._writableState;
	
	  if (state.corked) {
	    state.corked--;
	
	    if (!state.writing && !state.corked && !state.finished && !state.bufferProcessing && state.bufferedRequest) clearBuffer(this, state);
	  }
	};
	
	Writable.prototype.setDefaultEncoding = function setDefaultEncoding(encoding) {
	  // node::ParseEncoding() requires lower case.
	  if (typeof encoding === 'string') encoding = encoding.toLowerCase();
	  if (!(['hex', 'utf8', 'utf-8', 'ascii', 'binary', 'base64', 'ucs2', 'ucs-2', 'utf16le', 'utf-16le', 'raw'].indexOf((encoding + '').toLowerCase()) > -1)) throw new TypeError('Unknown encoding: ' + encoding);
	  this._writableState.defaultEncoding = encoding;
	  return this;
	};
	
	function decodeChunk(state, chunk, encoding) {
	  if (!state.objectMode && state.decodeStrings !== false && typeof chunk === 'string') {
	    chunk = bufferShim.from(chunk, encoding);
	  }
	  return chunk;
	}
	
	// if we're already writing something, then just put this
	// in the queue, and wait our turn.  Otherwise, call _write
	// If we return false, then we need a drain event, so set that flag.
	function writeOrBuffer(stream, state, isBuf, chunk, encoding, cb) {
	  if (!isBuf) {
	    chunk = decodeChunk(state, chunk, encoding);
	    if (Buffer.isBuffer(chunk)) encoding = 'buffer';
	  }
	  var len = state.objectMode ? 1 : chunk.length;
	
	  state.length += len;
	
	  var ret = state.length < state.highWaterMark;
	  // we must ensure that previous needDrain will not be reset to false.
	  if (!ret) state.needDrain = true;
	
	  if (state.writing || state.corked) {
	    var last = state.lastBufferedRequest;
	    state.lastBufferedRequest = new WriteReq(chunk, encoding, cb);
	    if (last) {
	      last.next = state.lastBufferedRequest;
	    } else {
	      state.bufferedRequest = state.lastBufferedRequest;
	    }
	    state.bufferedRequestCount += 1;
	  } else {
	    doWrite(stream, state, false, len, chunk, encoding, cb);
	  }
	
	  return ret;
	}
	
	function doWrite(stream, state, writev, len, chunk, encoding, cb) {
	  state.writelen = len;
	  state.writecb = cb;
	  state.writing = true;
	  state.sync = true;
	  if (writev) stream._writev(chunk, state.onwrite);else stream._write(chunk, encoding, state.onwrite);
	  state.sync = false;
	}
	
	function onwriteError(stream, state, sync, er, cb) {
	  --state.pendingcb;
	  if (sync) processNextTick(cb, er);else cb(er);
	
	  stream._writableState.errorEmitted = true;
	  stream.emit('error', er);
	}
	
	function onwriteStateUpdate(state) {
	  state.writing = false;
	  state.writecb = null;
	  state.length -= state.writelen;
	  state.writelen = 0;
	}
	
	function onwrite(stream, er) {
	  var state = stream._writableState;
	  var sync = state.sync;
	  var cb = state.writecb;
	
	  onwriteStateUpdate(state);
	
	  if (er) onwriteError(stream, state, sync, er, cb);else {
	    // Check if we're actually ready to finish, but don't emit yet
	    var finished = needFinish(state);
	
	    if (!finished && !state.corked && !state.bufferProcessing && state.bufferedRequest) {
	      clearBuffer(stream, state);
	    }
	
	    if (sync) {
	      /*<replacement>*/
	      asyncWrite(afterWrite, stream, state, finished, cb);
	      /*</replacement>*/
	    } else {
	      afterWrite(stream, state, finished, cb);
	    }
	  }
	}
	
	function afterWrite(stream, state, finished, cb) {
	  if (!finished) onwriteDrain(stream, state);
	  state.pendingcb--;
	  cb();
	  finishMaybe(stream, state);
	}
	
	// Must force callback to be called on nextTick, so that we don't
	// emit 'drain' before the write() consumer gets the 'false' return
	// value, and has a chance to attach a 'drain' listener.
	function onwriteDrain(stream, state) {
	  if (state.length === 0 && state.needDrain) {
	    state.needDrain = false;
	    stream.emit('drain');
	  }
	}
	
	// if there's something in the buffer waiting, then process it
	function clearBuffer(stream, state) {
	  state.bufferProcessing = true;
	  var entry = state.bufferedRequest;
	
	  if (stream._writev && entry && entry.next) {
	    // Fast case, write everything using _writev()
	    var l = state.bufferedRequestCount;
	    var buffer = new Array(l);
	    var holder = state.corkedRequestsFree;
	    holder.entry = entry;
	
	    var count = 0;
	    while (entry) {
	      buffer[count] = entry;
	      entry = entry.next;
	      count += 1;
	    }
	
	    doWrite(stream, state, true, state.length, buffer, '', holder.finish);
	
	    // doWrite is almost always async, defer these to save a bit of time
	    // as the hot path ends with doWrite
	    state.pendingcb++;
	    state.lastBufferedRequest = null;
	    if (holder.next) {
	      state.corkedRequestsFree = holder.next;
	      holder.next = null;
	    } else {
	      state.corkedRequestsFree = new CorkedRequest(state);
	    }
	  } else {
	    // Slow case, write chunks one-by-one
	    while (entry) {
	      var chunk = entry.chunk;
	      var encoding = entry.encoding;
	      var cb = entry.callback;
	      var len = state.objectMode ? 1 : chunk.length;
	
	      doWrite(stream, state, false, len, chunk, encoding, cb);
	      entry = entry.next;
	      // if we didn't call the onwrite immediately, then
	      // it means that we need to wait until it does.
	      // also, that means that the chunk and cb are currently
	      // being processed, so move the buffer counter past them.
	      if (state.writing) {
	        break;
	      }
	    }
	
	    if (entry === null) state.lastBufferedRequest = null;
	  }
	
	  state.bufferedRequestCount = 0;
	  state.bufferedRequest = entry;
	  state.bufferProcessing = false;
	}
	
	Writable.prototype._write = function (chunk, encoding, cb) {
	  cb(new Error('_write() is not implemented'));
	};
	
	Writable.prototype._writev = null;
	
	Writable.prototype.end = function (chunk, encoding, cb) {
	  var state = this._writableState;
	
	  if (typeof chunk === 'function') {
	    cb = chunk;
	    chunk = null;
	    encoding = null;
	  } else if (typeof encoding === 'function') {
	    cb = encoding;
	    encoding = null;
	  }
	
	  if (chunk !== null && chunk !== undefined) this.write(chunk, encoding);
	
	  // .end() fully uncorks
	  if (state.corked) {
	    state.corked = 1;
	    this.uncork();
	  }
	
	  // ignore unnecessary end() calls.
	  if (!state.ending && !state.finished) endWritable(this, state, cb);
	};
	
	function needFinish(state) {
	  return state.ending && state.length === 0 && state.bufferedRequest === null && !state.finished && !state.writing;
	}
	
	function prefinish(stream, state) {
	  if (!state.prefinished) {
	    state.prefinished = true;
	    stream.emit('prefinish');
	  }
	}
	
	function finishMaybe(stream, state) {
	  var need = needFinish(state);
	  if (need) {
	    if (state.pendingcb === 0) {
	      prefinish(stream, state);
	      state.finished = true;
	      stream.emit('finish');
	    } else {
	      prefinish(stream, state);
	    }
	  }
	  return need;
	}
	
	function endWritable(stream, state, cb) {
	  state.ending = true;
	  finishMaybe(stream, state);
	  if (cb) {
	    if (state.finished) processNextTick(cb);else stream.once('finish', cb);
	  }
	  state.ended = true;
	  stream.writable = false;
	}
	
	// It seems a linked list but it is not
	// there will be only 2 of these for each stream
	function CorkedRequest(state) {
	  var _this = this;
	
	  this.next = null;
	  this.entry = null;
	  this.finish = function (err) {
	    var entry = _this.entry;
	    _this.entry = null;
	    while (entry) {
	      var cb = entry.callback;
	      state.pendingcb--;
	      cb(err);
	      entry = entry.next;
	    }
	    if (state.corkedRequestsFree) {
	      state.corkedRequestsFree.next = _this;
	    } else {
	      state.corkedRequestsFree = _this;
	    }
	  };
	}
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3), __webpack_require__(299).setImmediate))

/***/ }),
/* 299 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	
	var apply = Function.prototype.apply;
	
	// DOM APIs, for completeness
	
	exports.setTimeout = function () {
	  return new Timeout(apply.call(setTimeout, window, arguments), clearTimeout);
	};
	exports.setInterval = function () {
	  return new Timeout(apply.call(setInterval, window, arguments), clearInterval);
	};
	exports.clearTimeout = exports.clearInterval = function (timeout) {
	  if (timeout) {
	    timeout.close();
	  }
	};
	
	function Timeout(id, clearFn) {
	  this._id = id;
	  this._clearFn = clearFn;
	}
	Timeout.prototype.unref = Timeout.prototype.ref = function () {};
	Timeout.prototype.close = function () {
	  this._clearFn.call(window, this._id);
	};
	
	// Does not start the time, just sets up the members needed.
	exports.enroll = function (item, msecs) {
	  clearTimeout(item._idleTimeoutId);
	  item._idleTimeout = msecs;
	};
	
	exports.unenroll = function (item) {
	  clearTimeout(item._idleTimeoutId);
	  item._idleTimeout = -1;
	};
	
	exports._unrefActive = exports.active = function (item) {
	  clearTimeout(item._idleTimeoutId);
	
	  var msecs = item._idleTimeout;
	  if (msecs >= 0) {
	    item._idleTimeoutId = setTimeout(function onTimeout() {
	      if (item._onTimeout) item._onTimeout();
	    }, msecs);
	  }
	};
	
	// setimmediate attaches itself to the global object
	__webpack_require__(300);
	exports.setImmediate = setImmediate;
	exports.clearImmediate = clearImmediate;

/***/ }),
/* 300 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global, process) {"use strict";
	
	(function (global, undefined) {
	    "use strict";
	
	    if (global.setImmediate) {
	        return;
	    }
	
	    var nextHandle = 1; // Spec says greater than zero
	    var tasksByHandle = {};
	    var currentlyRunningATask = false;
	    var doc = global.document;
	    var registerImmediate;
	
	    function setImmediate(callback) {
	        // Callback can either be a function or a string
	        if (typeof callback !== "function") {
	            callback = new Function("" + callback);
	        }
	        // Copy function arguments
	        var args = new Array(arguments.length - 1);
	        for (var i = 0; i < args.length; i++) {
	            args[i] = arguments[i + 1];
	        }
	        // Store and register the task
	        var task = { callback: callback, args: args };
	        tasksByHandle[nextHandle] = task;
	        registerImmediate(nextHandle);
	        return nextHandle++;
	    }
	
	    function clearImmediate(handle) {
	        delete tasksByHandle[handle];
	    }
	
	    function run(task) {
	        var callback = task.callback;
	        var args = task.args;
	        switch (args.length) {
	            case 0:
	                callback();
	                break;
	            case 1:
	                callback(args[0]);
	                break;
	            case 2:
	                callback(args[0], args[1]);
	                break;
	            case 3:
	                callback(args[0], args[1], args[2]);
	                break;
	            default:
	                callback.apply(undefined, args);
	                break;
	        }
	    }
	
	    function runIfPresent(handle) {
	        // From the spec: "Wait until any invocations of this algorithm started before this one have completed."
	        // So if we're currently running a task, we'll need to delay this invocation.
	        if (currentlyRunningATask) {
	            // Delay by doing a setTimeout. setImmediate was tried instead, but in Firefox 7 it generated a
	            // "too much recursion" error.
	            setTimeout(runIfPresent, 0, handle);
	        } else {
	            var task = tasksByHandle[handle];
	            if (task) {
	                currentlyRunningATask = true;
	                try {
	                    run(task);
	                } finally {
	                    clearImmediate(handle);
	                    currentlyRunningATask = false;
	                }
	            }
	        }
	    }
	
	    function installNextTickImplementation() {
	        registerImmediate = function registerImmediate(handle) {
	            process.nextTick(function () {
	                runIfPresent(handle);
	            });
	        };
	    }
	
	    function canUsePostMessage() {
	        // The test against `importScripts` prevents this implementation from being installed inside a web worker,
	        // where `global.postMessage` means something completely different and can't be used for this purpose.
	        if (global.postMessage && !global.importScripts) {
	            var postMessageIsAsynchronous = true;
	            var oldOnMessage = global.onmessage;
	            global.onmessage = function () {
	                postMessageIsAsynchronous = false;
	            };
	            global.postMessage("", "*");
	            global.onmessage = oldOnMessage;
	            return postMessageIsAsynchronous;
	        }
	    }
	
	    function installPostMessageImplementation() {
	        // Installs an event handler on `global` for the `message` event: see
	        // * https://developer.mozilla.org/en/DOM/window.postMessage
	        // * http://www.whatwg.org/specs/web-apps/current-work/multipage/comms.html#crossDocumentMessages
	
	        var messagePrefix = "setImmediate$" + Math.random() + "$";
	        var onGlobalMessage = function onGlobalMessage(event) {
	            if (event.source === global && typeof event.data === "string" && event.data.indexOf(messagePrefix) === 0) {
	                runIfPresent(+event.data.slice(messagePrefix.length));
	            }
	        };
	
	        if (global.addEventListener) {
	            global.addEventListener("message", onGlobalMessage, false);
	        } else {
	            global.attachEvent("onmessage", onGlobalMessage);
	        }
	
	        registerImmediate = function registerImmediate(handle) {
	            global.postMessage(messagePrefix + handle, "*");
	        };
	    }
	
	    function installMessageChannelImplementation() {
	        var channel = new MessageChannel();
	        channel.port1.onmessage = function (event) {
	            var handle = event.data;
	            runIfPresent(handle);
	        };
	
	        registerImmediate = function registerImmediate(handle) {
	            channel.port2.postMessage(handle);
	        };
	    }
	
	    function installReadyStateChangeImplementation() {
	        var html = doc.documentElement;
	        registerImmediate = function registerImmediate(handle) {
	            // Create a <script> element; its readystatechange event will be fired asynchronously once it is inserted
	            // into the document. Do so, thus queuing up the task. Remember to clean up once it's been called.
	            var script = doc.createElement("script");
	            script.onreadystatechange = function () {
	                runIfPresent(handle);
	                script.onreadystatechange = null;
	                html.removeChild(script);
	                script = null;
	            };
	            html.appendChild(script);
	        };
	    }
	
	    function installSetTimeoutImplementation() {
	        registerImmediate = function registerImmediate(handle) {
	            setTimeout(runIfPresent, 0, handle);
	        };
	    }
	
	    // If supported, we should attach to the prototype of global, since that is where setTimeout et al. live.
	    var attachTo = Object.getPrototypeOf && Object.getPrototypeOf(global);
	    attachTo = attachTo && attachTo.setTimeout ? attachTo : global;
	
	    // Don't get fooled by e.g. browserify environments.
	    if ({}.toString.call(global.process) === "[object process]") {
	        // For Node.js before 0.9
	        installNextTickImplementation();
	    } else if (canUsePostMessage()) {
	        // For non-IE10 modern browsers
	        installPostMessageImplementation();
	    } else if (global.MessageChannel) {
	        // For web workers, where supported
	        installMessageChannelImplementation();
	    } else if (doc && "onreadystatechange" in doc.createElement("script")) {
	        // For IE 6–8
	        installReadyStateChangeImplementation();
	    } else {
	        // For older browsers
	        installSetTimeoutImplementation();
	    }
	
	    attachTo.setImmediate = setImmediate;
	    attachTo.clearImmediate = clearImmediate;
	})(typeof self === "undefined" ? typeof global === "undefined" ? undefined : global : self);
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }()), __webpack_require__(3)))

/***/ }),
/* 301 */
/***/ (function(module, exports) {

	/* WEBPACK VAR INJECTION */(function(global) {'use strict';
	
	/**
	 * Module exports.
	 */
	
	module.exports = deprecate;
	
	/**
	 * Mark that a method should not be used.
	 * Returns a modified function which warns once by default.
	 *
	 * If `localStorage.noDeprecation = true` is set, then it is a no-op.
	 *
	 * If `localStorage.throwDeprecation = true` is set, then deprecated functions
	 * will throw an Error when invoked.
	 *
	 * If `localStorage.traceDeprecation = true` is set, then deprecated functions
	 * will invoke `console.trace()` instead of `console.error()`.
	 *
	 * @param {Function} fn - the function to deprecate
	 * @param {String} msg - the string to print to the console when `fn` is invoked
	 * @returns {Function} a new "deprecated" version of `fn`
	 * @api public
	 */
	
	function deprecate(fn, msg) {
	  if (config('noDeprecation')) {
	    return fn;
	  }
	
	  var warned = false;
	  function deprecated() {
	    if (!warned) {
	      if (config('throwDeprecation')) {
	        throw new Error(msg);
	      } else if (config('traceDeprecation')) {
	        console.trace(msg);
	      } else {
	        console.warn(msg);
	      }
	      warned = true;
	    }
	    return fn.apply(this, arguments);
	  }
	
	  return deprecated;
	}
	
	/**
	 * Checks `localStorage` for boolean values for the given `name`.
	 *
	 * @param {String} name
	 * @returns {Boolean}
	 * @api private
	 */
	
	function config(name) {
	  // accessing global.localStorage can trigger a DOMException in sandboxed iframes
	  try {
	    if (!global.localStorage) return false;
	  } catch (_) {
	    return false;
	  }
	  var val = global.localStorage[name];
	  if (null == val) return false;
	  return String(val).toLowerCase() === 'true';
	}
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ }),
/* 302 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var Buffer = __webpack_require__(290).Buffer;
	var bufferShim = __webpack_require__(293);
	
	var isEncoding = Buffer.isEncoding || function (encoding) {
	  encoding = '' + encoding;
	  switch (encoding && encoding.toLowerCase()) {
	    case 'hex':case 'utf8':case 'utf-8':case 'ascii':case 'binary':case 'base64':case 'ucs2':case 'ucs-2':case 'utf16le':case 'utf-16le':case 'raw':
	      return true;
	    default:
	      return false;
	  }
	};
	
	function _normalizeEncoding(enc) {
	  if (!enc) return 'utf8';
	  var retried;
	  while (true) {
	    switch (enc) {
	      case 'utf8':
	      case 'utf-8':
	        return 'utf8';
	      case 'ucs2':
	      case 'ucs-2':
	      case 'utf16le':
	      case 'utf-16le':
	        return 'utf16le';
	      case 'latin1':
	      case 'binary':
	        return 'latin1';
	      case 'base64':
	      case 'ascii':
	      case 'hex':
	        return enc;
	      default:
	        if (retried) return; // undefined
	        enc = ('' + enc).toLowerCase();
	        retried = true;
	    }
	  }
	};
	
	// Do not cache `Buffer.isEncoding` when checking encoding names as some
	// modules monkey-patch it to support additional encodings
	function normalizeEncoding(enc) {
	  var nenc = _normalizeEncoding(enc);
	  if (typeof nenc !== 'string' && (Buffer.isEncoding === isEncoding || !isEncoding(enc))) throw new Error('Unknown encoding: ' + enc);
	  return nenc || enc;
	}
	
	// StringDecoder provides an interface for efficiently splitting a series of
	// buffers into a series of JS strings without breaking apart multi-byte
	// characters.
	exports.StringDecoder = StringDecoder;
	function StringDecoder(encoding) {
	  this.encoding = normalizeEncoding(encoding);
	  var nb;
	  switch (this.encoding) {
	    case 'utf16le':
	      this.text = utf16Text;
	      this.end = utf16End;
	      nb = 4;
	      break;
	    case 'utf8':
	      this.fillLast = utf8FillLast;
	      nb = 4;
	      break;
	    case 'base64':
	      this.text = base64Text;
	      this.end = base64End;
	      nb = 3;
	      break;
	    default:
	      this.write = simpleWrite;
	      this.end = simpleEnd;
	      return;
	  }
	  this.lastNeed = 0;
	  this.lastTotal = 0;
	  this.lastChar = bufferShim.allocUnsafe(nb);
	}
	
	StringDecoder.prototype.write = function (buf) {
	  if (buf.length === 0) return '';
	  var r;
	  var i;
	  if (this.lastNeed) {
	    r = this.fillLast(buf);
	    if (r === undefined) return '';
	    i = this.lastNeed;
	    this.lastNeed = 0;
	  } else {
	    i = 0;
	  }
	  if (i < buf.length) return r ? r + this.text(buf, i) : this.text(buf, i);
	  return r || '';
	};
	
	StringDecoder.prototype.end = utf8End;
	
	// Returns only complete characters in a Buffer
	StringDecoder.prototype.text = utf8Text;
	
	// Attempts to complete a partial non-UTF-8 character using bytes from a Buffer
	StringDecoder.prototype.fillLast = function (buf) {
	  if (this.lastNeed <= buf.length) {
	    buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, this.lastNeed);
	    return this.lastChar.toString(this.encoding, 0, this.lastTotal);
	  }
	  buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, buf.length);
	  this.lastNeed -= buf.length;
	};
	
	// Checks the type of a UTF-8 byte, whether it's ASCII, a leading byte, or a
	// continuation byte.
	function utf8CheckByte(byte) {
	  if (byte <= 0x7F) return 0;else if (byte >> 5 === 0x06) return 2;else if (byte >> 4 === 0x0E) return 3;else if (byte >> 3 === 0x1E) return 4;
	  return -1;
	}
	
	// Checks at most 3 bytes at the end of a Buffer in order to detect an
	// incomplete multi-byte UTF-8 character. The total number of bytes (2, 3, or 4)
	// needed to complete the UTF-8 character (if applicable) are returned.
	function utf8CheckIncomplete(self, buf, i) {
	  var j = buf.length - 1;
	  if (j < i) return 0;
	  var nb = utf8CheckByte(buf[j]);
	  if (nb >= 0) {
	    if (nb > 0) self.lastNeed = nb - 1;
	    return nb;
	  }
	  if (--j < i) return 0;
	  nb = utf8CheckByte(buf[j]);
	  if (nb >= 0) {
	    if (nb > 0) self.lastNeed = nb - 2;
	    return nb;
	  }
	  if (--j < i) return 0;
	  nb = utf8CheckByte(buf[j]);
	  if (nb >= 0) {
	    if (nb > 0) {
	      if (nb === 2) nb = 0;else self.lastNeed = nb - 3;
	    }
	    return nb;
	  }
	  return 0;
	}
	
	// Validates as many continuation bytes for a multi-byte UTF-8 character as
	// needed or are available. If we see a non-continuation byte where we expect
	// one, we "replace" the validated continuation bytes we've seen so far with
	// UTF-8 replacement characters ('\ufffd'), to match v8's UTF-8 decoding
	// behavior. The continuation byte check is included three times in the case
	// where all of the continuation bytes for a character exist in the same buffer.
	// It is also done this way as a slight performance increase instead of using a
	// loop.
	function utf8CheckExtraBytes(self, buf, p) {
	  if ((buf[0] & 0xC0) !== 0x80) {
	    self.lastNeed = 0;
	    return '\uFFFD'.repeat(p);
	  }
	  if (self.lastNeed > 1 && buf.length > 1) {
	    if ((buf[1] & 0xC0) !== 0x80) {
	      self.lastNeed = 1;
	      return '\uFFFD'.repeat(p + 1);
	    }
	    if (self.lastNeed > 2 && buf.length > 2) {
	      if ((buf[2] & 0xC0) !== 0x80) {
	        self.lastNeed = 2;
	        return '\uFFFD'.repeat(p + 2);
	      }
	    }
	  }
	}
	
	// Attempts to complete a multi-byte UTF-8 character using bytes from a Buffer.
	function utf8FillLast(buf) {
	  var p = this.lastTotal - this.lastNeed;
	  var r = utf8CheckExtraBytes(this, buf, p);
	  if (r !== undefined) return r;
	  if (this.lastNeed <= buf.length) {
	    buf.copy(this.lastChar, p, 0, this.lastNeed);
	    return this.lastChar.toString(this.encoding, 0, this.lastTotal);
	  }
	  buf.copy(this.lastChar, p, 0, buf.length);
	  this.lastNeed -= buf.length;
	}
	
	// Returns all complete UTF-8 characters in a Buffer. If the Buffer ended on a
	// partial character, the character's bytes are buffered until the required
	// number of bytes are available.
	function utf8Text(buf, i) {
	  var total = utf8CheckIncomplete(this, buf, i);
	  if (!this.lastNeed) return buf.toString('utf8', i);
	  this.lastTotal = total;
	  var end = buf.length - (total - this.lastNeed);
	  buf.copy(this.lastChar, 0, end);
	  return buf.toString('utf8', i, end);
	}
	
	// For UTF-8, a replacement character for each buffered byte of a (partial)
	// character needs to be added to the output.
	function utf8End(buf) {
	  var r = buf && buf.length ? this.write(buf) : '';
	  if (this.lastNeed) return r + '\uFFFD'.repeat(this.lastTotal - this.lastNeed);
	  return r;
	}
	
	// UTF-16LE typically needs two bytes per character, but even if we have an even
	// number of bytes available, we need to check if we end on a leading/high
	// surrogate. In that case, we need to wait for the next two bytes in order to
	// decode the last character properly.
	function utf16Text(buf, i) {
	  if ((buf.length - i) % 2 === 0) {
	    var r = buf.toString('utf16le', i);
	    if (r) {
	      var c = r.charCodeAt(r.length - 1);
	      if (c >= 0xD800 && c <= 0xDBFF) {
	        this.lastNeed = 2;
	        this.lastTotal = 4;
	        this.lastChar[0] = buf[buf.length - 2];
	        this.lastChar[1] = buf[buf.length - 1];
	        return r.slice(0, -1);
	      }
	    }
	    return r;
	  }
	  this.lastNeed = 1;
	  this.lastTotal = 2;
	  this.lastChar[0] = buf[buf.length - 1];
	  return buf.toString('utf16le', i, buf.length - 1);
	}
	
	// For UTF-16LE we do not explicitly append special replacement characters if we
	// end on a partial character, we simply let v8 handle that.
	function utf16End(buf) {
	  var r = buf && buf.length ? this.write(buf) : '';
	  if (this.lastNeed) {
	    var end = this.lastTotal - this.lastNeed;
	    return r + this.lastChar.toString('utf16le', 0, end);
	  }
	  return r;
	}
	
	function base64Text(buf, i) {
	  var n = (buf.length - i) % 3;
	  if (n === 0) return buf.toString('base64', i);
	  this.lastNeed = 3 - n;
	  this.lastTotal = 3;
	  if (n === 1) {
	    this.lastChar[0] = buf[buf.length - 1];
	  } else {
	    this.lastChar[0] = buf[buf.length - 2];
	    this.lastChar[1] = buf[buf.length - 1];
	  }
	  return buf.toString('base64', i, buf.length - n);
	}
	
	function base64End(buf) {
	  var r = buf && buf.length ? this.write(buf) : '';
	  if (this.lastNeed) return r + this.lastChar.toString('base64', 0, 3 - this.lastNeed);
	  return r;
	}
	
	// Pass bytes on through for single-byte encodings (e.g. ascii, latin1, hex)
	function simpleWrite(buf) {
	  return buf.toString(this.encoding);
	}
	
	function simpleEnd(buf) {
	  return buf && buf.length ? this.write(buf) : '';
	}

/***/ }),
/* 303 */
/***/ (function(module, exports, __webpack_require__) {

	// a transform stream is a readable/writable stream where you do
	// something with the data.  Sometimes it's called a "filter",
	// but that's not a great name for it, since that implies a thing where
	// some bits pass through, and others are simply ignored.  (That would
	// be a valid example of a transform, of course.)
	//
	// While the output is causally related to the input, it's not a
	// necessarily symmetric or synchronous transformation.  For example,
	// a zlib stream might take multiple plain-text writes(), and then
	// emit a single compressed chunk some time in the future.
	//
	// Here's how this works:
	//
	// The Transform stream has all the aspects of the readable and writable
	// stream classes.  When you write(chunk), that calls _write(chunk,cb)
	// internally, and returns false if there's a lot of pending writes
	// buffered up.  When you call read(), that calls _read(n) until
	// there's enough pending readable data buffered up.
	//
	// In a transform stream, the written data is placed in a buffer.  When
	// _read(n) is called, it transforms the queued up data, calling the
	// buffered _write cb's as it consumes chunks.  If consuming a single
	// written chunk would result in multiple output chunks, then the first
	// outputted bit calls the readcb, and subsequent chunks just go into
	// the read buffer, and will cause it to emit 'readable' if necessary.
	//
	// This way, back-pressure is actually determined by the reading side,
	// since _read has to be called to start processing a new chunk.  However,
	// a pathological inflate type of transform can cause excessive buffering
	// here.  For example, imagine a stream where every byte of input is
	// interpreted as an integer from 0-255, and then results in that many
	// bytes of output.  Writing the 4 bytes {ff,ff,ff,ff} would result in
	// 1kb of data being output.  In this case, you could write a very small
	// amount of input, and end up with a very large amount of output.  In
	// such a pathological inflating mechanism, there'd be no way to tell
	// the system to stop doing the transform.  A single 4MB write could
	// cause the system to run out of memory.
	//
	// However, even in such a pathological case, only a single written chunk
	// would be consumed, and then the rest would wait (un-transformed) until
	// the results of the previous transformed chunk were consumed.
	
	'use strict';
	
	module.exports = Transform;
	
	var Duplex = __webpack_require__(297);
	
	/*<replacement>*/
	var util = __webpack_require__(294);
	util.inherits = __webpack_require__(284);
	/*</replacement>*/
	
	util.inherits(Transform, Duplex);
	
	function TransformState(stream) {
	  this.afterTransform = function (er, data) {
	    return afterTransform(stream, er, data);
	  };
	
	  this.needTransform = false;
	  this.transforming = false;
	  this.writecb = null;
	  this.writechunk = null;
	  this.writeencoding = null;
	}
	
	function afterTransform(stream, er, data) {
	  var ts = stream._transformState;
	  ts.transforming = false;
	
	  var cb = ts.writecb;
	
	  if (!cb) return stream.emit('error', new Error('no writecb in Transform class'));
	
	  ts.writechunk = null;
	  ts.writecb = null;
	
	  if (data !== null && data !== undefined) stream.push(data);
	
	  cb(er);
	
	  var rs = stream._readableState;
	  rs.reading = false;
	  if (rs.needReadable || rs.length < rs.highWaterMark) {
	    stream._read(rs.highWaterMark);
	  }
	}
	
	function Transform(options) {
	  if (!(this instanceof Transform)) return new Transform(options);
	
	  Duplex.call(this, options);
	
	  this._transformState = new TransformState(this);
	
	  var stream = this;
	
	  // start out asking for a readable event once data is transformed.
	  this._readableState.needReadable = true;
	
	  // we have implemented the _read method, and done the other things
	  // that Readable wants before the first _read call, so unset the
	  // sync guard flag.
	  this._readableState.sync = false;
	
	  if (options) {
	    if (typeof options.transform === 'function') this._transform = options.transform;
	
	    if (typeof options.flush === 'function') this._flush = options.flush;
	  }
	
	  // When the writable side finishes, then flush out anything remaining.
	  this.once('prefinish', function () {
	    if (typeof this._flush === 'function') this._flush(function (er, data) {
	      done(stream, er, data);
	    });else done(stream);
	  });
	}
	
	Transform.prototype.push = function (chunk, encoding) {
	  this._transformState.needTransform = false;
	  return Duplex.prototype.push.call(this, chunk, encoding);
	};
	
	// This is the part where you do stuff!
	// override this function in implementation classes.
	// 'chunk' is an input chunk.
	//
	// Call `push(newChunk)` to pass along transformed output
	// to the readable side.  You may call 'push' zero or more times.
	//
	// Call `cb(err)` when you are done with this chunk.  If you pass
	// an error, then that'll put the hurt on the whole operation.  If you
	// never call cb(), then you'll never get another chunk.
	Transform.prototype._transform = function (chunk, encoding, cb) {
	  throw new Error('_transform() is not implemented');
	};
	
	Transform.prototype._write = function (chunk, encoding, cb) {
	  var ts = this._transformState;
	  ts.writecb = cb;
	  ts.writechunk = chunk;
	  ts.writeencoding = encoding;
	  if (!ts.transforming) {
	    var rs = this._readableState;
	    if (ts.needTransform || rs.needReadable || rs.length < rs.highWaterMark) this._read(rs.highWaterMark);
	  }
	};
	
	// Doesn't matter what the args are here.
	// _transform does all the work.
	// That we got here means that the readable side wants more data.
	Transform.prototype._read = function (n) {
	  var ts = this._transformState;
	
	  if (ts.writechunk !== null && ts.writecb && !ts.transforming) {
	    ts.transforming = true;
	    this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);
	  } else {
	    // mark that we need a transform, so that any data that comes in
	    // will get processed, now that we've asked for it.
	    ts.needTransform = true;
	  }
	};
	
	function done(stream, er, data) {
	  if (er) return stream.emit('error', er);
	
	  if (data !== null && data !== undefined) stream.push(data);
	
	  // if there's nothing in the write buffer, then that means
	  // that nothing more will ever be provided
	  var ws = stream._writableState;
	  var ts = stream._transformState;
	
	  if (ws.length) throw new Error('Calling transform done when ws.length != 0');
	
	  if (ts.transforming) throw new Error('Calling transform done when still transforming');
	
	  return stream.push(null);
	}

/***/ }),
/* 304 */
/***/ (function(module, exports, __webpack_require__) {

	// a passthrough stream.
	// basically just the most minimal sort of Transform stream.
	// Every written chunk gets output as-is.
	
	'use strict';
	
	module.exports = PassThrough;
	
	var Transform = __webpack_require__(303);
	
	/*<replacement>*/
	var util = __webpack_require__(294);
	util.inherits = __webpack_require__(284);
	/*</replacement>*/
	
	util.inherits(PassThrough, Transform);
	
	function PassThrough(options) {
	  if (!(this instanceof PassThrough)) return new PassThrough(options);
	
	  Transform.call(this, options);
	}
	
	PassThrough.prototype._transform = function (chunk, encoding, cb) {
	  cb(null, chunk);
	};

/***/ }),
/* 305 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports = __webpack_require__(298);

/***/ }),
/* 306 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports = __webpack_require__(297);

/***/ }),
/* 307 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports = __webpack_require__(285).Transform;

/***/ }),
/* 308 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports = __webpack_require__(285).PassThrough;

/***/ }),
/* 309 */
/***/ (function(module, exports) {

	'use strict';
	
	module.exports = exports = abbrev.abbrev = abbrev;
	
	abbrev.monkeyPatch = monkeyPatch;
	
	function monkeyPatch() {
	  Object.defineProperty(Array.prototype, 'abbrev', {
	    value: function value() {
	      return abbrev(this);
	    },
	    enumerable: false, configurable: true, writable: true
	  });
	
	  Object.defineProperty(Object.prototype, 'abbrev', {
	    value: function value() {
	      return abbrev(Object.keys(this));
	    },
	    enumerable: false, configurable: true, writable: true
	  });
	}
	
	function abbrev(list) {
	  if (arguments.length !== 1 || !Array.isArray(list)) {
	    list = Array.prototype.slice.call(arguments, 0);
	  }
	  for (var i = 0, l = list.length, args = []; i < l; i++) {
	    args[i] = typeof list[i] === "string" ? list[i] : String(list[i]);
	  }
	
	  // sort them lexicographically, so that they're next to their nearest kin
	  args = args.sort(lexSort);
	
	  // walk through each, seeing how much it has in common with the next and previous
	  var abbrevs = {},
	      prev = "";
	  for (var i = 0, l = args.length; i < l; i++) {
	    var current = args[i],
	        next = args[i + 1] || "",
	        nextMatches = true,
	        prevMatches = true;
	    if (current === next) continue;
	    for (var j = 0, cl = current.length; j < cl; j++) {
	      var curChar = current.charAt(j);
	      nextMatches = nextMatches && curChar === next.charAt(j);
	      prevMatches = prevMatches && curChar === prev.charAt(j);
	      if (!nextMatches && !prevMatches) {
	        j++;
	        break;
	      }
	    }
	    prev = current;
	    if (j === cl) {
	      abbrevs[current] = current;
	      continue;
	    }
	    for (var a = current.substr(0, j); j <= cl; j++) {
	      abbrevs[a] = current;
	      a += current.charAt(j);
	    }
	  }
	  return abbrevs;
	}
	
	function lexSort(a, b) {
	  return a === b ? 0 : a > b ? 1 : -1;
	}

/***/ }),
/* 310 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
	
	var Progress = __webpack_require__(311);
	var Gauge = __webpack_require__(317);
	var EE = __webpack_require__(283).EventEmitter;
	var log = exports = module.exports = new EE();
	var util = __webpack_require__(271);
	
	var setBlocking = __webpack_require__(346);
	var consoleControl = __webpack_require__(319);
	
	setBlocking(true);
	var stream = process.stderr;
	Object.defineProperty(log, 'stream', {
	  set: function set(newStream) {
	    stream = newStream;
	    if (this.gauge) this.gauge.setWriteTo(stream, stream);
	  },
	  get: function get() {
	    return stream;
	  }
	});
	
	// by default, decide based on tty-ness.
	var colorEnabled;
	log.useColor = function () {
	  return colorEnabled != null ? colorEnabled : stream.isTTY;
	};
	
	log.enableColor = function () {
	  colorEnabled = true;
	  this.gauge.setTheme({ hasColor: colorEnabled, hasUnicode: unicodeEnabled });
	};
	log.disableColor = function () {
	  colorEnabled = false;
	  this.gauge.setTheme({ hasColor: colorEnabled, hasUnicode: unicodeEnabled });
	};
	
	// default level
	log.level = 'info';
	
	log.gauge = new Gauge(stream, {
	  enabled: false, // no progress bars unless asked
	  theme: { hasColor: log.useColor() },
	  template: [{ type: 'progressbar', length: 20 }, { type: 'activityIndicator', kerning: 1, length: 1 }, { type: 'section', default: '' }, ':', { type: 'logline', kerning: 1, default: '' }]
	});
	
	log.tracker = new Progress.TrackerGroup();
	
	// we track this separately as we may need to temporarily disable the
	// display of the status bar for our own loggy purposes.
	log.progressEnabled = log.gauge.isEnabled();
	
	var unicodeEnabled;
	
	log.enableUnicode = function () {
	  unicodeEnabled = true;
	  this.gauge.setTheme({ hasColor: this.useColor(), hasUnicode: unicodeEnabled });
	};
	
	log.disableUnicode = function () {
	  unicodeEnabled = false;
	  this.gauge.setTheme({ hasColor: this.useColor(), hasUnicode: unicodeEnabled });
	};
	
	log.setGaugeThemeset = function (themes) {
	  this.gauge.setThemeset(themes);
	};
	
	log.setGaugeTemplate = function (template) {
	  this.gauge.setTemplate(template);
	};
	
	log.enableProgress = function () {
	  if (this.progressEnabled) return;
	  this.progressEnabled = true;
	  this.tracker.on('change', this.showProgress);
	  if (this._pause) return;
	  this.gauge.enable();
	};
	
	log.disableProgress = function () {
	  if (!this.progressEnabled) return;
	  this.progressEnabled = false;
	  this.tracker.removeListener('change', this.showProgress);
	  this.gauge.disable();
	};
	
	var trackerConstructors = ['newGroup', 'newItem', 'newStream'];
	
	var mixinLog = function mixinLog(tracker) {
	  // mixin the public methods from log into the tracker
	  // (except: conflicts and one's we handle specially)
	  Object.keys(log).forEach(function (P) {
	    if (P[0] === '_') return;
	    if (trackerConstructors.filter(function (C) {
	      return C === P;
	    }).length) return;
	    if (tracker[P]) return;
	    if (typeof log[P] !== 'function') return;
	    var func = log[P];
	    tracker[P] = function () {
	      return func.apply(log, arguments);
	    };
	  });
	  // if the new tracker is a group, make sure any subtrackers get
	  // mixed in too
	  if (tracker instanceof Progress.TrackerGroup) {
	    trackerConstructors.forEach(function (C) {
	      var func = tracker[C];
	      tracker[C] = function () {
	        return mixinLog(func.apply(tracker, arguments));
	      };
	    });
	  }
	  return tracker;
	};
	
	// Add tracker constructors to the top level log object
	trackerConstructors.forEach(function (C) {
	  log[C] = function () {
	    return mixinLog(this.tracker[C].apply(this.tracker, arguments));
	  };
	});
	
	log.clearProgress = function (cb) {
	  if (!this.progressEnabled) return cb && process.nextTick(cb);
	  this.gauge.hide(cb);
	};
	
	log.showProgress = function (name, completed) {
	  if (!this.progressEnabled) return;
	  var values = {};
	  if (name) values.section = name;
	  var last = log.record[log.record.length - 1];
	  if (last) {
	    values.subsection = last.prefix;
	    var disp = log.disp[last.level] || last.level;
	    var logline = this._format(disp, log.style[last.level]);
	    if (last.prefix) logline += ' ' + this._format(last.prefix, this.prefixStyle);
	    logline += ' ' + last.message.split(/\r?\n/)[0];
	    values.logline = logline;
	  }
	  values.completed = completed || this.tracker.completed();
	  this.gauge.show(values);
	}.bind(log); // bind for use in tracker's on-change listener
	
	// temporarily stop emitting, but don't drop
	log.pause = function () {
	  this._paused = true;
	  if (this.progressEnabled) this.gauge.disable();
	};
	
	log.resume = function () {
	  if (!this._paused) return;
	  this._paused = false;
	
	  var b = this._buffer;
	  this._buffer = [];
	  b.forEach(function (m) {
	    this.emitLog(m);
	  }, this);
	  if (this.progressEnabled) this.gauge.enable();
	};
	
	log._buffer = [];
	
	var id = 0;
	log.record = [];
	log.maxRecordSize = 10000;
	log.log = function (lvl, prefix, message) {
	  var l = this.levels[lvl];
	  if (l === undefined) {
	    return this.emit('error', new Error(util.format('Undefined log level: %j', lvl)));
	  }
	
	  var a = new Array(arguments.length - 2);
	  var stack = null;
	  for (var i = 2; i < arguments.length; i++) {
	    var arg = a[i - 2] = arguments[i];
	
	    // resolve stack traces to a plain string.
	    if ((typeof arg === 'undefined' ? 'undefined' : _typeof(arg)) === 'object' && arg && arg instanceof Error && arg.stack) {
	
	      Object.defineProperty(arg, 'stack', {
	        value: stack = arg.stack + '',
	        enumerable: true,
	        writable: true
	      });
	    }
	  }
	  if (stack) a.unshift(stack + '\n');
	  message = util.format.apply(util, a);
	
	  var m = { id: id++,
	    level: lvl,
	    prefix: String(prefix || ''),
	    message: message,
	    messageRaw: a };
	
	  this.emit('log', m);
	  this.emit('log.' + lvl, m);
	  if (m.prefix) this.emit(m.prefix, m);
	
	  this.record.push(m);
	  var mrs = this.maxRecordSize;
	  var n = this.record.length - mrs;
	  if (n > mrs / 10) {
	    var newSize = Math.floor(mrs * 0.9);
	    this.record = this.record.slice(-1 * newSize);
	  }
	
	  this.emitLog(m);
	}.bind(log);
	
	log.emitLog = function (m) {
	  if (this._paused) {
	    this._buffer.push(m);
	    return;
	  }
	  if (this.progressEnabled) this.gauge.pulse(m.prefix);
	  var l = this.levels[m.level];
	  if (l === undefined) return;
	  if (l < this.levels[this.level]) return;
	  if (l > 0 && !isFinite(l)) return;
	
	  // If 'disp' is null or undefined, use the lvl as a default
	  // Allows: '', 0 as valid disp
	  var disp = log.disp[m.level] != null ? log.disp[m.level] : m.level;
	  this.clearProgress();
	  m.message.split(/\r?\n/).forEach(function (line) {
	    if (this.heading) {
	      this.write(this.heading, this.headingStyle);
	      this.write(' ');
	    }
	    this.write(disp, log.style[m.level]);
	    var p = m.prefix || '';
	    if (p) this.write(' ');
	    this.write(p, this.prefixStyle);
	    this.write(' ' + line + '\n');
	  }, this);
	  this.showProgress();
	};
	
	log._format = function (msg, style) {
	  if (!stream) return;
	
	  var output = '';
	  if (this.useColor()) {
	    style = style || {};
	    var settings = [];
	    if (style.fg) settings.push(style.fg);
	    if (style.bg) settings.push('bg' + style.bg[0].toUpperCase() + style.bg.slice(1));
	    if (style.bold) settings.push('bold');
	    if (style.underline) settings.push('underline');
	    if (style.inverse) settings.push('inverse');
	    if (settings.length) output += consoleControl.color(settings);
	    if (style.beep) output += consoleControl.beep();
	  }
	  output += msg;
	  if (this.useColor()) {
	    output += consoleControl.color('reset');
	  }
	  return output;
	};
	
	log.write = function (msg, style) {
	  if (!stream) return;
	
	  stream.write(this._format(msg, style));
	};
	
	log.addLevel = function (lvl, n, style, disp) {
	  // If 'disp' is null or undefined, use the lvl as a default
	  if (disp == null) disp = lvl;
	  this.levels[lvl] = n;
	  this.style[lvl] = style;
	  if (!this[lvl]) {
	    this[lvl] = function () {
	      var a = new Array(arguments.length + 1);
	      a[0] = lvl;
	      for (var i = 0; i < arguments.length; i++) {
	        a[i + 1] = arguments[i];
	      }
	      return this.log.apply(this, a);
	    }.bind(this);
	  }
	  this.disp[lvl] = disp;
	};
	
	log.prefixStyle = { fg: 'magenta' };
	log.headingStyle = { fg: 'white', bg: 'black' };
	
	log.style = {};
	log.levels = {};
	log.disp = {};
	log.addLevel('silly', -Infinity, { inverse: true }, 'sill');
	log.addLevel('verbose', 1000, { fg: 'blue', bg: 'black' }, 'verb');
	log.addLevel('info', 2000, { fg: 'green' });
	log.addLevel('timing', 2500, { fg: 'green', bg: 'black' });
	log.addLevel('http', 3000, { fg: 'green', bg: 'black' });
	log.addLevel('notice', 3500, { fg: 'blue', bg: 'black' });
	log.addLevel('warn', 4000, { fg: 'black', bg: 'yellow' }, 'WARN');
	log.addLevel('error', 5000, { fg: 'red', bg: 'black' }, 'ERR!');
	log.addLevel('silent', Infinity);
	
	// allow 'error' prefix
	log.on('error', function () {});
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ }),
/* 311 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	exports.TrackerGroup = __webpack_require__(312);
	exports.Tracker = __webpack_require__(314);
	exports.TrackerStream = __webpack_require__(315);

/***/ }),
/* 312 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var util = __webpack_require__(271);
	var TrackerBase = __webpack_require__(313);
	var Tracker = __webpack_require__(314);
	var TrackerStream = __webpack_require__(315);
	
	var TrackerGroup = module.exports = function (name) {
	  TrackerBase.call(this, name);
	  this.parentGroup = null;
	  this.trackers = [];
	  this.completion = {};
	  this.weight = {};
	  this.totalWeight = 0;
	  this.finished = false;
	  this.bubbleChange = bubbleChange(this);
	};
	util.inherits(TrackerGroup, TrackerBase);
	
	function bubbleChange(trackerGroup) {
	  return function (name, completed, tracker) {
	    trackerGroup.completion[tracker.id] = completed;
	    if (trackerGroup.finished) return;
	    trackerGroup.emit('change', name || trackerGroup.name, trackerGroup.completed(), trackerGroup);
	  };
	}
	
	TrackerGroup.prototype.nameInTree = function () {
	  var names = [];
	  var from = this;
	  while (from) {
	    names.unshift(from.name);
	    from = from.parentGroup;
	  }
	  return names.join('/');
	};
	
	TrackerGroup.prototype.addUnit = function (unit, weight) {
	  if (unit.addUnit) {
	    var toTest = this;
	    while (toTest) {
	      if (unit === toTest) {
	        throw new Error('Attempted to add tracker group ' + unit.name + ' to tree that already includes it ' + this.nameInTree(this));
	      }
	      toTest = toTest.parentGroup;
	    }
	    unit.parentGroup = this;
	  }
	  this.weight[unit.id] = weight || 1;
	  this.totalWeight += this.weight[unit.id];
	  this.trackers.push(unit);
	  this.completion[unit.id] = unit.completed();
	  unit.on('change', this.bubbleChange);
	  if (!this.finished) this.emit('change', unit.name, this.completion[unit.id], unit);
	  return unit;
	};
	
	TrackerGroup.prototype.completed = function () {
	  if (this.trackers.length === 0) return 0;
	  var valPerWeight = 1 / this.totalWeight;
	  var completed = 0;
	  for (var ii = 0; ii < this.trackers.length; ii++) {
	    var trackerId = this.trackers[ii].id;
	    completed += valPerWeight * this.weight[trackerId] * this.completion[trackerId];
	  }
	  return completed;
	};
	
	TrackerGroup.prototype.newGroup = function (name, weight) {
	  return this.addUnit(new TrackerGroup(name), weight);
	};
	
	TrackerGroup.prototype.newItem = function (name, todo, weight) {
	  return this.addUnit(new Tracker(name, todo), weight);
	};
	
	TrackerGroup.prototype.newStream = function (name, todo, weight) {
	  return this.addUnit(new TrackerStream(name, todo), weight);
	};
	
	TrackerGroup.prototype.finish = function () {
	  this.finished = true;
	  if (!this.trackers.length) this.addUnit(new Tracker(), 1, true);
	  for (var ii = 0; ii < this.trackers.length; ii++) {
	    var tracker = this.trackers[ii];
	    tracker.finish();
	    tracker.removeListener('change', this.bubbleChange);
	  }
	  this.emit('change', this.name, 1, this);
	};
	
	var buffer = '                                  ';
	TrackerGroup.prototype.debug = function (depth) {
	  depth = depth || 0;
	  var indent = depth ? buffer.substr(0, depth) : '';
	  var output = indent + (this.name || 'top') + ': ' + this.completed() + '\n';
	  this.trackers.forEach(function (tracker) {
	    if (tracker instanceof TrackerGroup) {
	      output += tracker.debug(depth + 1);
	    } else {
	      output += indent + ' ' + tracker.name + ': ' + tracker.completed() + '\n';
	    }
	  });
	  return output;
	};

/***/ }),
/* 313 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var EventEmitter = __webpack_require__(283).EventEmitter;
	var util = __webpack_require__(271);
	
	var trackerId = 0;
	var TrackerBase = module.exports = function (name) {
	  EventEmitter.call(this);
	  this.id = ++trackerId;
	  this.name = name;
	};
	util.inherits(TrackerBase, EventEmitter);

/***/ }),
/* 314 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var util = __webpack_require__(271);
	var TrackerBase = __webpack_require__(313);
	
	var Tracker = module.exports = function (name, todo) {
	  TrackerBase.call(this, name);
	  this.workDone = 0;
	  this.workTodo = todo || 0;
	};
	util.inherits(Tracker, TrackerBase);
	
	Tracker.prototype.completed = function () {
	  return this.workTodo === 0 ? 0 : this.workDone / this.workTodo;
	};
	
	Tracker.prototype.addWork = function (work) {
	  this.workTodo += work;
	  this.emit('change', this.name, this.completed(), this);
	};
	
	Tracker.prototype.completeWork = function (work) {
	  this.workDone += work;
	  if (this.workDone > this.workTodo) this.workDone = this.workTodo;
	  this.emit('change', this.name, this.completed(), this);
	};
	
	Tracker.prototype.finish = function () {
	  this.workTodo = this.workDone = 1;
	  this.emit('change', this.name, 1, this);
	};

/***/ }),
/* 315 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var util = __webpack_require__(271);
	var stream = __webpack_require__(285);
	var delegate = __webpack_require__(316);
	var Tracker = __webpack_require__(314);
	
	var TrackerStream = module.exports = function (name, size, options) {
	  stream.Transform.call(this, options);
	  this.tracker = new Tracker(name, size);
	  this.name = name;
	  this.id = this.tracker.id;
	  this.tracker.on('change', delegateChange(this));
	};
	util.inherits(TrackerStream, stream.Transform);
	
	function delegateChange(trackerStream) {
	  return function (name, completion, tracker) {
	    trackerStream.emit('change', name, completion, trackerStream);
	  };
	}
	
	TrackerStream.prototype._transform = function (data, encoding, cb) {
	  this.tracker.completeWork(data.length ? data.length : 1);
	  this.push(data);
	  cb();
	};
	
	TrackerStream.prototype._flush = function (cb) {
	  this.tracker.finish();
	  cb();
	};
	
	delegate(TrackerStream.prototype, 'tracker').method('completed').method('addWork');

/***/ }),
/* 316 */
/***/ (function(module, exports) {

	'use strict';
	
	/**
	 * Expose `Delegator`.
	 */
	
	module.exports = Delegator;
	
	/**
	 * Initialize a delegator.
	 *
	 * @param {Object} proto
	 * @param {String} target
	 * @api public
	 */
	
	function Delegator(proto, target) {
	  if (!(this instanceof Delegator)) return new Delegator(proto, target);
	  this.proto = proto;
	  this.target = target;
	  this.methods = [];
	  this.getters = [];
	  this.setters = [];
	  this.fluents = [];
	}
	
	/**
	 * Delegate method `name`.
	 *
	 * @param {String} name
	 * @return {Delegator} self
	 * @api public
	 */
	
	Delegator.prototype.method = function (name) {
	  var proto = this.proto;
	  var target = this.target;
	  this.methods.push(name);
	
	  proto[name] = function () {
	    return this[target][name].apply(this[target], arguments);
	  };
	
	  return this;
	};
	
	/**
	 * Delegator accessor `name`.
	 *
	 * @param {String} name
	 * @return {Delegator} self
	 * @api public
	 */
	
	Delegator.prototype.access = function (name) {
	  return this.getter(name).setter(name);
	};
	
	/**
	 * Delegator getter `name`.
	 *
	 * @param {String} name
	 * @return {Delegator} self
	 * @api public
	 */
	
	Delegator.prototype.getter = function (name) {
	  var proto = this.proto;
	  var target = this.target;
	  this.getters.push(name);
	
	  proto.__defineGetter__(name, function () {
	    return this[target][name];
	  });
	
	  return this;
	};
	
	/**
	 * Delegator setter `name`.
	 *
	 * @param {String} name
	 * @return {Delegator} self
	 * @api public
	 */
	
	Delegator.prototype.setter = function (name) {
	  var proto = this.proto;
	  var target = this.target;
	  this.setters.push(name);
	
	  proto.__defineSetter__(name, function (val) {
	    return this[target][name] = val;
	  });
	
	  return this;
	};
	
	/**
	 * Delegator fluent accessor
	 *
	 * @param {String} name
	 * @return {Delegator} self
	 * @api public
	 */
	
	Delegator.prototype.fluent = function (name) {
	  var proto = this.proto;
	  var target = this.target;
	  this.fluents.push(name);
	
	  proto[name] = function (val) {
	    if ('undefined' != typeof val) {
	      this[target][name] = val;
	      return this;
	    } else {
	      return this[target][name];
	    }
	  };
	
	  return this;
	};

/***/ }),
/* 317 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
	
	var Plumbing = __webpack_require__(318);
	var hasUnicode = __webpack_require__(332);
	var hasColor = __webpack_require__(334);
	var onExit = __webpack_require__(335);
	var defaultThemes = __webpack_require__(338);
	var setInterval = __webpack_require__(343);
	var process = __webpack_require__(344);
	var setImmediate = __webpack_require__(345);
	
	module.exports = Gauge;
	
	function callWith(obj, method) {
	  return function () {
	    return method.call(obj);
	  };
	}
	
	function Gauge(arg1, arg2) {
	  var options, writeTo;
	  if (arg1 && arg1.write) {
	    writeTo = arg1;
	    options = arg2 || {};
	  } else if (arg2 && arg2.write) {
	    writeTo = arg2;
	    options = arg1 || {};
	  } else {
	    writeTo = process.stderr;
	    options = arg1 || arg2 || {};
	  }
	
	  this._status = {
	    spun: 0,
	    section: '',
	    subsection: ''
	  };
	  this._paused = false; // are we paused for back pressure?
	  this._disabled = true; // are all progress bar updates disabled?
	  this._showing = false; // do we WANT the progress bar on screen
	  this._onScreen = false; // IS the progress bar on screen
	  this._needsRedraw = false; // should we print something at next tick?
	  this._hideCursor = options.hideCursor == null ? true : options.hideCursor;
	  this._fixedFramerate = options.fixedFramerate == null ? !/^v0\.8\./.test(process.version) : options.fixedFramerate;
	  this._lastUpdateAt = null;
	  this._updateInterval = options.updateInterval == null ? 50 : options.updateInterval;
	
	  this._themes = options.themes || defaultThemes;
	  this._theme = options.theme;
	  var theme = this._computeTheme(options.theme);
	  var template = options.template || [{ type: 'progressbar', length: 20 }, { type: 'activityIndicator', kerning: 1, length: 1 }, { type: 'section', kerning: 1, default: '' }, { type: 'subsection', kerning: 1, default: '' }];
	  this.setWriteTo(writeTo, options.tty);
	  var PlumbingClass = options.Plumbing || Plumbing;
	  this._gauge = new PlumbingClass(theme, template, this.getWidth());
	
	  this._$$doRedraw = callWith(this, this._doRedraw);
	  this._$$handleSizeChange = callWith(this, this._handleSizeChange);
	
	  this._cleanupOnExit = options.cleanupOnExit == null || options.cleanupOnExit;
	  this._removeOnExit = null;
	
	  if (options.enabled || options.enabled == null && this._tty && this._tty.isTTY) {
	    this.enable();
	  } else {
	    this.disable();
	  }
	}
	Gauge.prototype = {};
	
	Gauge.prototype.isEnabled = function () {
	  return !this._disabled;
	};
	
	Gauge.prototype.setTemplate = function (template) {
	  this._gauge.setTemplate(template);
	  if (this._showing) this._requestRedraw();
	};
	
	Gauge.prototype._computeTheme = function (theme) {
	  if (!theme) theme = {};
	  if (typeof theme === 'string') {
	    theme = this._themes.getTheme(theme);
	  } else if (theme && (Object.keys(theme).length === 0 || theme.hasUnicode != null || theme.hasColor != null)) {
	    var useUnicode = theme.hasUnicode == null ? hasUnicode() : theme.hasUnicode;
	    var useColor = theme.hasColor == null ? hasColor : theme.hasColor;
	    theme = this._themes.getDefault({ hasUnicode: useUnicode, hasColor: useColor, platform: theme.platform });
	  }
	  return theme;
	};
	
	Gauge.prototype.setThemeset = function (themes) {
	  this._themes = themes;
	  this.setTheme(this._theme);
	};
	
	Gauge.prototype.setTheme = function (theme) {
	  this._gauge.setTheme(this._computeTheme(theme));
	  if (this._showing) this._requestRedraw();
	  this._theme = theme;
	};
	
	Gauge.prototype._requestRedraw = function () {
	  this._needsRedraw = true;
	  if (!this._fixedFramerate) this._doRedraw();
	};
	
	Gauge.prototype.getWidth = function () {
	  return (this._tty && this._tty.columns || 80) - 1;
	};
	
	Gauge.prototype.setWriteTo = function (writeTo, tty) {
	  var enabled = !this._disabled;
	  if (enabled) this.disable();
	  this._writeTo = writeTo;
	  this._tty = tty || writeTo === process.stderr && process.stdout.isTTY && process.stdout || writeTo.isTTY && writeTo || this._tty;
	  if (this._gauge) this._gauge.setWidth(this.getWidth());
	  if (enabled) this.enable();
	};
	
	Gauge.prototype.enable = function () {
	  if (!this._disabled) return;
	  this._disabled = false;
	  if (this._tty) this._enableEvents();
	  if (this._showing) this.show();
	};
	
	Gauge.prototype.disable = function () {
	  if (this._disabled) return;
	  if (this._showing) {
	    this._lastUpdateAt = null;
	    this._showing = false;
	    this._doRedraw();
	    this._showing = true;
	  }
	  this._disabled = true;
	  if (this._tty) this._disableEvents();
	};
	
	Gauge.prototype._enableEvents = function () {
	  if (this._cleanupOnExit) {
	    this._removeOnExit = onExit(callWith(this, this.disable));
	  }
	  this._tty.on('resize', this._$$handleSizeChange);
	  if (this._fixedFramerate) {
	    this.redrawTracker = setInterval(this._$$doRedraw, this._updateInterval);
	    if (this.redrawTracker.unref) this.redrawTracker.unref();
	  }
	};
	
	Gauge.prototype._disableEvents = function () {
	  this._tty.removeListener('resize', this._$$handleSizeChange);
	  if (this._fixedFramerate) clearInterval(this.redrawTracker);
	  if (this._removeOnExit) this._removeOnExit();
	};
	
	Gauge.prototype.hide = function (cb) {
	  if (this._disabled) return cb && process.nextTick(cb);
	  if (!this._showing) return cb && process.nextTick(cb);
	  this._showing = false;
	  this._doRedraw();
	  cb && setImmediate(cb);
	};
	
	Gauge.prototype.show = function (section, completed) {
	  this._showing = true;
	  if (typeof section === 'string') {
	    this._status.section = section;
	  } else if ((typeof section === 'undefined' ? 'undefined' : _typeof(section)) === 'object') {
	    var sectionKeys = Object.keys(section);
	    for (var ii = 0; ii < sectionKeys.length; ++ii) {
	      var key = sectionKeys[ii];
	      this._status[key] = section[key];
	    }
	  }
	  if (completed != null) this._status.completed = completed;
	  if (this._disabled) return;
	  this._requestRedraw();
	};
	
	Gauge.prototype.pulse = function (subsection) {
	  this._status.subsection = subsection || '';
	  this._status.spun++;
	  if (this._disabled) return;
	  if (!this._showing) return;
	  this._requestRedraw();
	};
	
	Gauge.prototype._handleSizeChange = function () {
	  this._gauge.setWidth(this._tty.columns - 1);
	  this._requestRedraw();
	};
	
	Gauge.prototype._doRedraw = function () {
	  if (this._disabled || this._paused) return;
	  if (!this._fixedFramerate) {
	    var now = Date.now();
	    if (this._lastUpdateAt && now - this._lastUpdateAt < this._updateInterval) return;
	    this._lastUpdateAt = now;
	  }
	  if (!this._showing && this._onScreen) {
	    this._onScreen = false;
	    var result = this._gauge.hide();
	    if (this._hideCursor) {
	      result += this._gauge.showCursor();
	    }
	    return this._writeTo.write(result);
	  }
	  if (!this._showing && !this._onScreen) return;
	  if (this._showing && !this._onScreen) {
	    this._onScreen = true;
	    this._needsRedraw = true;
	    if (this._hideCursor) {
	      this._writeTo.write(this._gauge.hideCursor());
	    }
	  }
	  if (!this._needsRedraw) return;
	  if (!this._writeTo.write(this._gauge.show(this._status))) {
	    this._paused = true;
	    this._writeTo.on('drain', callWith(this, function () {
	      this._paused = false;
	      this._doRedraw();
	    }));
	  }
	};

/***/ }),
/* 318 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var consoleControl = __webpack_require__(319);
	var renderTemplate = __webpack_require__(320);
	var validate = __webpack_require__(328);
	
	var Plumbing = module.exports = function (theme, template, width) {
	  if (!width) width = 80;
	  validate('OAN', [theme, template, width]);
	  this.showing = false;
	  this.theme = theme;
	  this.width = width;
	  this.template = template;
	};
	Plumbing.prototype = {};
	
	Plumbing.prototype.setTheme = function (theme) {
	  validate('O', [theme]);
	  this.theme = theme;
	};
	
	Plumbing.prototype.setTemplate = function (template) {
	  validate('A', [template]);
	  this.template = template;
	};
	
	Plumbing.prototype.setWidth = function (width) {
	  validate('N', [width]);
	  this.width = width;
	};
	
	Plumbing.prototype.hide = function () {
	  return consoleControl.gotoSOL() + consoleControl.eraseLine();
	};
	
	Plumbing.prototype.hideCursor = consoleControl.hideCursor;
	
	Plumbing.prototype.showCursor = consoleControl.showCursor;
	
	Plumbing.prototype.show = function (status) {
	  var values = Object.create(this.theme);
	  for (var key in status) {
	    values[key] = status[key];
	  }
	
	  return renderTemplate(this.width, this.template, values).trim() + consoleControl.color('reset') + consoleControl.eraseLine() + consoleControl.gotoSOL();
	};

/***/ }),
/* 319 */
/***/ (function(module, exports) {

	'use strict';
	
	// These tables borrowed from `ansi`
	
	var prefix = '\x1b[';
	
	exports.up = function up(num) {
	  return prefix + (num || '') + 'A';
	};
	
	exports.down = function down(num) {
	  return prefix + (num || '') + 'B';
	};
	
	exports.forward = function forward(num) {
	  return prefix + (num || '') + 'C';
	};
	
	exports.back = function back(num) {
	  return prefix + (num || '') + 'D';
	};
	
	exports.nextLine = function nextLine(num) {
	  return prefix + (num || '') + 'E';
	};
	
	exports.previousLine = function previousLine(num) {
	  return prefix + (num || '') + 'F';
	};
	
	exports.horizontalAbsolute = function horizontalAbsolute(num) {
	  if (num == null) throw new Error('horizontalAboslute requires a column to position to');
	  return prefix + num + 'G';
	};
	
	exports.eraseData = function eraseData() {
	  return prefix + 'J';
	};
	
	exports.eraseLine = function eraseLine() {
	  return prefix + 'K';
	};
	
	exports.goto = function (x, y) {
	  return prefix + y + ';' + x + 'H';
	};
	
	exports.gotoSOL = function () {
	  return '\r';
	};
	
	exports.beep = function () {
	  return '\x07';
	};
	
	exports.hideCursor = function hideCursor() {
	  return prefix + '?25l';
	};
	
	exports.showCursor = function showCursor() {
	  return prefix + '?25h';
	};
	
	var colors = {
	  reset: 0,
	  // styles
	  bold: 1,
	  italic: 3,
	  underline: 4,
	  inverse: 7,
	  // resets
	  stopBold: 22,
	  stopItalic: 23,
	  stopUnderline: 24,
	  stopInverse: 27,
	  // colors
	  white: 37,
	  black: 30,
	  blue: 34,
	  cyan: 36,
	  green: 32,
	  magenta: 35,
	  red: 31,
	  yellow: 33,
	  bgWhite: 47,
	  bgBlack: 40,
	  bgBlue: 44,
	  bgCyan: 46,
	  bgGreen: 42,
	  bgMagenta: 45,
	  bgRed: 41,
	  bgYellow: 43,
	
	  grey: 90,
	  brightBlack: 90,
	  brightRed: 91,
	  brightGreen: 92,
	  brightYellow: 93,
	  brightBlue: 94,
	  brightMagenta: 95,
	  brightCyan: 96,
	  brightWhite: 97,
	
	  bgGrey: 100,
	  bgBrightBlack: 100,
	  bgBrightRed: 101,
	  bgBrightGreen: 102,
	  bgBrightYellow: 103,
	  bgBrightBlue: 104,
	  bgBrightMagenta: 105,
	  bgBrightCyan: 106,
	  bgBrightWhite: 107
	};
	
	exports.color = function color(colorWith) {
	  if (arguments.length !== 1 || !Array.isArray(colorWith)) {
	    colorWith = Array.prototype.slice.call(arguments);
	  }
	  return prefix + colorWith.map(colorNameToCode).join(';') + 'm';
	};
	
	function colorNameToCode(color) {
	  if (colors[color] != null) return colors[color];
	  throw new Error('Unknown color or style name: ' + color);
	}

/***/ }),
/* 320 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var align = __webpack_require__(321);
	var validate = __webpack_require__(328);
	var objectAssign = __webpack_require__(4);
	var wideTruncate = __webpack_require__(329);
	var error = __webpack_require__(330);
	var TemplateItem = __webpack_require__(331);
	
	function renderValueWithValues(values) {
	  return function (item) {
	    return renderValue(item, values);
	  };
	}
	
	var renderTemplate = module.exports = function (width, template, values) {
	  var items = prepareItems(width, template, values);
	  var rendered = items.map(renderValueWithValues(values)).join('');
	  return align.left(wideTruncate(rendered, width), width);
	};
	
	function preType(item) {
	  var cappedTypeName = item.type[0].toUpperCase() + item.type.slice(1);
	  return 'pre' + cappedTypeName;
	}
	
	function postType(item) {
	  var cappedTypeName = item.type[0].toUpperCase() + item.type.slice(1);
	  return 'post' + cappedTypeName;
	}
	
	function hasPreOrPost(item, values) {
	  if (!item.type) return;
	  return values[preType(item)] || values[postType(item)];
	}
	
	function generatePreAndPost(baseItem, parentValues) {
	  var item = objectAssign({}, baseItem);
	  var values = Object.create(parentValues);
	  var template = [];
	  var pre = preType(item);
	  var post = postType(item);
	  if (values[pre]) {
	    template.push({ value: values[pre] });
	    values[pre] = null;
	  }
	  item.minLength = null;
	  item.length = null;
	  item.maxLength = null;
	  template.push(item);
	  values[item.type] = values[item.type];
	  if (values[post]) {
	    template.push({ value: values[post] });
	    values[post] = null;
	  }
	  return function ($1, $2, length) {
	    return renderTemplate(length, template, values);
	  };
	}
	
	function prepareItems(width, template, values) {
	  function cloneAndObjectify(item, index, arr) {
	    var cloned = new TemplateItem(item, width);
	    var type = cloned.type;
	    if (cloned.value == null) {
	      if (!(type in values)) {
	        if (cloned.default == null) {
	          throw new error.MissingTemplateValue(cloned, values);
	        } else {
	          cloned.value = cloned.default;
	        }
	      } else {
	        cloned.value = values[type];
	      }
	    }
	    if (cloned.value == null || cloned.value === '') return null;
	    cloned.index = index;
	    cloned.first = index === 0;
	    cloned.last = index === arr.length - 1;
	    if (hasPreOrPost(cloned, values)) cloned.value = generatePreAndPost(cloned, values);
	    return cloned;
	  }
	
	  var output = template.map(cloneAndObjectify).filter(function (item) {
	    return item != null;
	  });
	
	  var outputLength = 0;
	  var remainingSpace = width;
	  var variableCount = output.length;
	
	  function consumeSpace(length) {
	    if (length > remainingSpace) length = remainingSpace;
	    outputLength += length;
	    remainingSpace -= length;
	  }
	
	  function finishSizing(item, length) {
	    if (item.finished) throw new error.Internal('Tried to finish template item that was already finished');
	    if (length === Infinity) throw new error.Internal('Length of template item cannot be infinity');
	    if (length != null) item.length = length;
	    item.minLength = null;
	    item.maxLength = null;
	    --variableCount;
	    item.finished = true;
	    if (item.length == null) item.length = item.getBaseLength();
	    if (item.length == null) throw new error.Internal('Finished template items must have a length');
	    consumeSpace(item.getLength());
	  }
	
	  output.forEach(function (item) {
	    if (!item.kerning) return;
	    var prevPadRight = item.first ? 0 : output[item.index - 1].padRight;
	    if (!item.first && prevPadRight < item.kerning) item.padLeft = item.kerning - prevPadRight;
	    if (!item.last) item.padRight = item.kerning;
	  });
	
	  // Finish any that have a fixed (literal or intuited) length
	  output.forEach(function (item) {
	    if (item.getBaseLength() == null) return;
	    finishSizing(item);
	  });
	
	  var resized = 0;
	  var resizing;
	  var hunkSize;
	  do {
	    resizing = false;
	    hunkSize = Math.round(remainingSpace / variableCount);
	    output.forEach(function (item) {
	      if (item.finished) return;
	      if (!item.maxLength) return;
	      if (item.getMaxLength() < hunkSize) {
	        finishSizing(item, item.maxLength);
	        resizing = true;
	      }
	    });
	  } while (resizing && resized++ < output.length);
	  if (resizing) throw new error.Internal('Resize loop iterated too many times while determining maxLength');
	
	  resized = 0;
	  do {
	    resizing = false;
	    hunkSize = Math.round(remainingSpace / variableCount);
	    output.forEach(function (item) {
	      if (item.finished) return;
	      if (!item.minLength) return;
	      if (item.getMinLength() >= hunkSize) {
	        finishSizing(item, item.minLength);
	        resizing = true;
	      }
	    });
	  } while (resizing && resized++ < output.length);
	  if (resizing) throw new error.Internal('Resize loop iterated too many times while determining minLength');
	
	  hunkSize = Math.round(remainingSpace / variableCount);
	  output.forEach(function (item) {
	    if (item.finished) return;
	    finishSizing(item, hunkSize);
	  });
	
	  return output;
	}
	
	function renderFunction(item, values, length) {
	  validate('OON', arguments);
	  if (item.type) {
	    return item.value(values, values[item.type + 'Theme'] || {}, length);
	  } else {
	    return item.value(values, {}, length);
	  }
	}
	
	function renderValue(item, values) {
	  var length = item.getBaseLength();
	  var value = typeof item.value === 'function' ? renderFunction(item, values, length) : item.value;
	  if (value == null || value === '') return '';
	  var alignWith = align[item.align] || align.left;
	  var leftPadding = item.padLeft ? align.left('', item.padLeft) : '';
	  var rightPadding = item.padRight ? align.right('', item.padRight) : '';
	  var truncated = wideTruncate(String(value), length);
	  var aligned = alignWith(truncated, length);
	  return leftPadding + aligned + rightPadding;
	}

/***/ }),
/* 321 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var stringWidth = __webpack_require__(322);
	
	exports.center = alignCenter;
	exports.left = alignLeft;
	exports.right = alignRight;
	
	// lodash's way of generating pad characters.
	
	function createPadding(width) {
	  var result = '';
	  var string = ' ';
	  var n = width;
	  do {
	    if (n % 2) {
	      result += string;
	    }
	    n = Math.floor(n / 2);
	    string += string;
	  } while (n);
	
	  return result;
	}
	
	function alignLeft(str, width) {
	  var trimmed = str.trimRight();
	  if (trimmed.length === 0 && str.length >= width) return str;
	  var padding = '';
	  var strWidth = stringWidth(trimmed);
	
	  if (strWidth < width) {
	    padding = createPadding(width - strWidth);
	  }
	
	  return trimmed + padding;
	}
	
	function alignRight(str, width) {
	  var trimmed = str.trimLeft();
	  if (trimmed.length === 0 && str.length >= width) return str;
	  var padding = '';
	  var strWidth = stringWidth(trimmed);
	
	  if (strWidth < width) {
	    padding = createPadding(width - strWidth);
	  }
	
	  return padding + trimmed;
	}
	
	function alignCenter(str, width) {
	  var trimmed = str.trim();
	  if (trimmed.length === 0 && str.length >= width) return str;
	  var padLeft = '';
	  var padRight = '';
	  var strWidth = stringWidth(trimmed);
	
	  if (strWidth < width) {
	    var padLeftBy = parseInt((width - strWidth) / 2, 10);
	    padLeft = createPadding(padLeftBy);
	    padRight = createPadding(width - (strWidth + padLeftBy));
	  }
	
	  return padLeft + trimmed + padRight;
	}

/***/ }),
/* 322 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var stripAnsi = __webpack_require__(323);
	var codePointAt = __webpack_require__(325);
	var isFullwidthCodePoint = __webpack_require__(326);
	
	// https://github.com/nodejs/io.js/blob/cff7300a578be1b10001f2d967aaedc88aee6402/lib/readline.js#L1345
	module.exports = function (str) {
		if (typeof str !== 'string' || str.length === 0) {
			return 0;
		}
	
		var width = 0;
	
		str = stripAnsi(str);
	
		for (var i = 0; i < str.length; i++) {
			var code = codePointAt(str, i);
	
			// ignore control characters
			if (code <= 0x1f || code >= 0x7f && code <= 0x9f) {
				continue;
			}
	
			// surrogates
			if (code >= 0x10000) {
				i++;
			}
	
			if (isFullwidthCodePoint(code)) {
				width += 2;
			} else {
				width++;
			}
		}
	
		return width;
	};

/***/ }),
/* 323 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var ansiRegex = __webpack_require__(324)();
	
	module.exports = function (str) {
		return typeof str === 'string' ? str.replace(ansiRegex, '') : str;
	};

/***/ }),
/* 324 */
/***/ (function(module, exports) {

	'use strict';
	
	module.exports = function () {
		return (/[\u001b\u009b][[()#;?]*(?:[0-9]{1,4}(?:;[0-9]{0,4})*)?[0-9A-PRZcf-nqry=><]/g
		);
	};

/***/ }),
/* 325 */
/***/ (function(module, exports) {

	/* eslint-disable babel/new-cap, xo/throw-new-error */
	'use strict';
	
	module.exports = function (str, pos) {
		if (str === null || str === undefined) {
			throw TypeError();
		}
	
		str = String(str);
	
		var size = str.length;
		var i = pos ? Number(pos) : 0;
	
		if (Number.isNaN(i)) {
			i = 0;
		}
	
		if (i < 0 || i >= size) {
			return undefined;
		}
	
		var first = str.charCodeAt(i);
	
		if (first >= 0xD800 && first <= 0xDBFF && size > i + 1) {
			var second = str.charCodeAt(i + 1);
	
			if (second >= 0xDC00 && second <= 0xDFFF) {
				return (first - 0xD800) * 0x400 + second - 0xDC00 + 0x10000;
			}
		}
	
		return first;
	};

/***/ }),
/* 326 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var numberIsNan = __webpack_require__(327);
	
	module.exports = function (x) {
		if (numberIsNan(x)) {
			return false;
		}
	
		// https://github.com/nodejs/io.js/blob/cff7300a578be1b10001f2d967aaedc88aee6402/lib/readline.js#L1369
	
		// code points are derived from:
		// http://www.unix.org/Public/UNIDATA/EastAsianWidth.txt
		if (x >= 0x1100 && (x <= 0x115f || // Hangul Jamo
		0x2329 === x || // LEFT-POINTING ANGLE BRACKET
		0x232a === x || // RIGHT-POINTING ANGLE BRACKET
		// CJK Radicals Supplement .. Enclosed CJK Letters and Months
		0x2e80 <= x && x <= 0x3247 && x !== 0x303f ||
		// Enclosed CJK Letters and Months .. CJK Unified Ideographs Extension A
		0x3250 <= x && x <= 0x4dbf ||
		// CJK Unified Ideographs .. Yi Radicals
		0x4e00 <= x && x <= 0xa4c6 ||
		// Hangul Jamo Extended-A
		0xa960 <= x && x <= 0xa97c ||
		// Hangul Syllables
		0xac00 <= x && x <= 0xd7a3 ||
		// CJK Compatibility Ideographs
		0xf900 <= x && x <= 0xfaff ||
		// Vertical Forms
		0xfe10 <= x && x <= 0xfe19 ||
		// CJK Compatibility Forms .. Small Form Variants
		0xfe30 <= x && x <= 0xfe6b ||
		// Halfwidth and Fullwidth Forms
		0xff01 <= x && x <= 0xff60 || 0xffe0 <= x && x <= 0xffe6 ||
		// Kana Supplement
		0x1b000 <= x && x <= 0x1b001 ||
		// Enclosed Ideographic Supplement
		0x1f200 <= x && x <= 0x1f251 ||
		// CJK Unified Ideographs Extension B .. Tertiary Ideographic Plane
		0x20000 <= x && x <= 0x3fffd)) {
			return true;
		}
	
		return false;
	};

/***/ }),
/* 327 */
/***/ (function(module, exports) {

	'use strict';
	
	module.exports = Number.isNaN || function (x) {
		return x !== x;
	};

/***/ }),
/* 328 */
/***/ (function(module, exports) {

	'use strict';
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
	
	function isArguments(thingy) {
	  return thingy != null && (typeof thingy === 'undefined' ? 'undefined' : _typeof(thingy)) === 'object' && thingy.hasOwnProperty('callee');
	}
	
	var types = {
	  '*': { label: 'any', check: function check() {
	      return true;
	    } },
	  A: { label: 'array', check: function check(thingy) {
	      return Array.isArray(thingy) || isArguments(thingy);
	    } },
	  S: { label: 'string', check: function check(thingy) {
	      return typeof thingy === 'string';
	    } },
	  N: { label: 'number', check: function check(thingy) {
	      return typeof thingy === 'number';
	    } },
	  F: { label: 'function', check: function check(thingy) {
	      return typeof thingy === 'function';
	    } },
	  O: { label: 'object', check: function check(thingy) {
	      return (typeof thingy === 'undefined' ? 'undefined' : _typeof(thingy)) === 'object' && thingy != null && !types.A.check(thingy) && !types.E.check(thingy);
	    } },
	  B: { label: 'boolean', check: function check(thingy) {
	      return typeof thingy === 'boolean';
	    } },
	  E: { label: 'error', check: function check(thingy) {
	      return thingy instanceof Error;
	    } },
	  Z: { label: 'null', check: function check(thingy) {
	      return thingy == null;
	    } }
	};
	
	function addSchema(schema, arity) {
	  var group = arity[schema.length] = arity[schema.length] || [];
	  if (group.indexOf(schema) === -1) group.push(schema);
	}
	
	var validate = module.exports = function (rawSchemas, args) {
	  if (arguments.length !== 2) throw wrongNumberOfArgs(['SA'], arguments.length);
	  if (!rawSchemas) throw missingRequiredArg(0, 'rawSchemas');
	  if (!args) throw missingRequiredArg(1, 'args');
	  if (!types.S.check(rawSchemas)) throw invalidType(0, ['string'], rawSchemas);
	  if (!types.A.check(args)) throw invalidType(1, ['array'], args);
	  var schemas = rawSchemas.split('|');
	  var arity = {};
	
	  schemas.forEach(function (schema) {
	    for (var ii = 0; ii < schema.length; ++ii) {
	      var type = schema[ii];
	      if (!types[type]) throw unknownType(ii, type);
	    }
	    if (/E.*E/.test(schema)) throw moreThanOneError(schema);
	    addSchema(schema, arity);
	    if (/E/.test(schema)) {
	      addSchema(schema.replace(/E.*$/, 'E'), arity);
	      addSchema(schema.replace(/E/, 'Z'), arity);
	      if (schema.length === 1) addSchema('', arity);
	    }
	  });
	  var matching = arity[args.length];
	  if (!matching) {
	    throw wrongNumberOfArgs(Object.keys(arity), args.length);
	  }
	  for (var ii = 0; ii < args.length; ++ii) {
	    var newMatching = matching.filter(function (schema) {
	      var type = schema[ii];
	      var typeCheck = types[type].check;
	      return typeCheck(args[ii]);
	    });
	    if (!newMatching.length) {
	      var labels = matching.map(function (schema) {
	        return types[schema[ii]].label;
	      }).filter(function (schema) {
	        return schema != null;
	      });
	      throw invalidType(ii, labels, args[ii]);
	    }
	    matching = newMatching;
	  }
	};
	
	function missingRequiredArg(num) {
	  return newException('EMISSINGARG', 'Missing required argument #' + (num + 1));
	}
	
	function unknownType(num, type) {
	  return newException('EUNKNOWNTYPE', 'Unknown type ' + type + ' in argument #' + (num + 1));
	}
	
	function invalidType(num, expectedTypes, value) {
	  var valueType;
	  Object.keys(types).forEach(function (typeCode) {
	    if (types[typeCode].check(value)) valueType = types[typeCode].label;
	  });
	  return newException('EINVALIDTYPE', 'Argument #' + (num + 1) + ': Expected ' + englishList(expectedTypes) + ' but got ' + valueType);
	}
	
	function englishList(list) {
	  return list.join(', ').replace(/, ([^,]+)$/, ' or $1');
	}
	
	function wrongNumberOfArgs(expected, got) {
	  var english = englishList(expected);
	  var args = expected.every(function (ex) {
	    return ex.length === 1;
	  }) ? 'argument' : 'arguments';
	  return newException('EWRONGARGCOUNT', 'Expected ' + english + ' ' + args + ' but got ' + got);
	}
	
	function moreThanOneError(schema) {
	  return newException('ETOOMANYERRORTYPES', 'Only one error type per argument signature is allowed, more than one found in "' + schema + '"');
	}
	
	function newException(code, msg) {
	  var e = new Error(msg);
	  e.code = code;
	  Error.captureStackTrace(e, validate);
	  return e;
	}

/***/ }),
/* 329 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var stringWidth = __webpack_require__(322);
	var stripAnsi = __webpack_require__(323);
	
	module.exports = wideTruncate;
	
	function wideTruncate(str, target) {
	  if (stringWidth(str) === 0) return str;
	  if (target <= 0) return '';
	  if (stringWidth(str) <= target) return str;
	
	  // We compute the number of bytes of ansi sequences here and add
	  // that to our initial truncation to ensure that we don't slice one
	  // that we want to keep in half.
	  var noAnsi = stripAnsi(str);
	  var ansiSize = str.length + noAnsi.length;
	  var truncated = str.slice(0, target + ansiSize);
	
	  // we have to shrink the result to account for our ansi sequence buffer
	  // (if an ansi sequence was truncated) and double width characters.
	  while (stringWidth(truncated) > target) {
	    truncated = truncated.slice(0, -1);
	  }
	  return truncated;
	}

/***/ }),
/* 330 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var util = __webpack_require__(271);
	
	var User = exports.User = function User(msg) {
	  var err = new Error(msg);
	  Error.captureStackTrace(err, User);
	  err.code = 'EGAUGE';
	  return err;
	};
	
	exports.MissingTemplateValue = function MissingTemplateValue(item, values) {
	  var err = new User(util.format('Missing template value "%s"', item.type));
	  Error.captureStackTrace(err, MissingTemplateValue);
	  err.template = item;
	  err.values = values;
	  return err;
	};
	
	exports.Internal = function Internal(msg) {
	  var err = new Error(msg);
	  Error.captureStackTrace(err, Internal);
	  err.code = 'EGAUGEINTERNAL';
	  return err;
	};

/***/ }),
/* 331 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var stringWidth = __webpack_require__(322);
	
	module.exports = TemplateItem;
	
	function isPercent(num) {
	  if (typeof num !== 'string') return false;
	  return num.slice(-1) === '%';
	}
	
	function percent(num) {
	  return Number(num.slice(0, -1)) / 100;
	}
	
	function TemplateItem(values, outputLength) {
	  this.overallOutputLength = outputLength;
	  this.finished = false;
	  this.type = null;
	  this.value = null;
	  this.length = null;
	  this.maxLength = null;
	  this.minLength = null;
	  this.kerning = null;
	  this.align = 'left';
	  this.padLeft = 0;
	  this.padRight = 0;
	  this.index = null;
	  this.first = null;
	  this.last = null;
	  if (typeof values === 'string') {
	    this.value = values;
	  } else {
	    for (var prop in values) {
	      this[prop] = values[prop];
	    }
	  }
	  // Realize percents
	  if (isPercent(this.length)) {
	    this.length = Math.round(this.overallOutputLength * percent(this.length));
	  }
	  if (isPercent(this.minLength)) {
	    this.minLength = Math.round(this.overallOutputLength * percent(this.minLength));
	  }
	  if (isPercent(this.maxLength)) {
	    this.maxLength = Math.round(this.overallOutputLength * percent(this.maxLength));
	  }
	  return this;
	}
	
	TemplateItem.prototype = {};
	
	TemplateItem.prototype.getBaseLength = function () {
	  var length = this.length;
	  if (length == null && typeof this.value === 'string' && this.maxLength == null && this.minLength == null) {
	    length = stringWidth(this.value);
	  }
	  return length;
	};
	
	TemplateItem.prototype.getLength = function () {
	  var length = this.getBaseLength();
	  if (length == null) return null;
	  return length + this.padLeft + this.padRight;
	};
	
	TemplateItem.prototype.getMaxLength = function () {
	  if (this.maxLength == null) return null;
	  return this.maxLength + this.padLeft + this.padRight;
	};
	
	TemplateItem.prototype.getMinLength = function () {
	  if (this.minLength == null) return null;
	  return this.minLength + this.padLeft + this.padRight;
	};

/***/ }),
/* 332 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {"use strict";
	
	var os = __webpack_require__(333);
	
	var hasUnicode = module.exports = function () {
	  // Recent Win32 platforms (>XP) CAN support unicode in the console but
	  // don't have to, and in non-english locales often use traditional local
	  // code pages. There's no way, short of windows system calls or execing
	  // the chcp command line program to figure this out. As such, we default
	  // this to false and encourage your users to override it via config if
	  // appropriate.
	  if (os.type() == "Windows_NT") {
	    return false;
	  }
	
	  var isUTF8 = /UTF-?8$/i;
	  var ctype = process.env.LC_ALL || process.env.LC_CTYPE || process.env.LANG;
	  return isUTF8.test(ctype);
	};
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ }),
/* 333 */
/***/ (function(module, exports) {

	'use strict';
	
	exports.endianness = function () {
	    return 'LE';
	};
	
	exports.hostname = function () {
	    if (typeof location !== 'undefined') {
	        return location.hostname;
	    } else return '';
	};
	
	exports.loadavg = function () {
	    return [];
	};
	
	exports.uptime = function () {
	    return 0;
	};
	
	exports.freemem = function () {
	    return Number.MAX_VALUE;
	};
	
	exports.totalmem = function () {
	    return Number.MAX_VALUE;
	};
	
	exports.cpus = function () {
	    return [];
	};
	
	exports.type = function () {
	    return 'Browser';
	};
	
	exports.release = function () {
	    if (typeof navigator !== 'undefined') {
	        return navigator.appVersion;
	    }
	    return '';
	};
	
	exports.networkInterfaces = exports.getNetworkInterfaces = function () {
	    return {};
	};
	
	exports.arch = function () {
	    return 'javascript';
	};
	
	exports.platform = function () {
	    return 'browser';
	};
	
	exports.tmpdir = exports.tmpDir = function () {
	    return '/tmp';
	};
	
	exports.EOL = '\n';

/***/ }),
/* 334 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';
	
	module.exports = isWin32() || isColorTerm();
	
	function isWin32() {
	  return process.platform === 'win32';
	}
	
	function isColorTerm() {
	  var termHasColor = /^screen|^xterm|^vt100|color|ansi|cygwin|linux/i;
	  return !!process.env.COLORTERM || termHasColor.test(process.env.TERM);
	}
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ }),
/* 335 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
	
	// Note: since nyc uses this module to output coverage, any lines
	// that are in the direct sync flow of nyc's outputCoverage are
	// ignored, since we can never get coverage for them.
	var assert = __webpack_require__(336);
	var signals = __webpack_require__(337);
	
	var EE = __webpack_require__(283);
	/* istanbul ignore if */
	if (typeof EE !== 'function') {
	  EE = EE.EventEmitter;
	}
	
	var emitter;
	if (process.__signal_exit_emitter__) {
	  emitter = process.__signal_exit_emitter__;
	} else {
	  emitter = process.__signal_exit_emitter__ = new EE();
	  emitter.count = 0;
	  emitter.emitted = {};
	}
	
	// Because this emitter is a global, we have to check to see if a
	// previous version of this library failed to enable infinite listeners.
	// I know what you're about to say.  But literally everything about
	// signal-exit is a compromise with evil.  Get used to it.
	if (!emitter.infinite) {
	  emitter.setMaxListeners(Infinity);
	  emitter.infinite = true;
	}
	
	module.exports = function (cb, opts) {
	  assert.equal(typeof cb === 'undefined' ? 'undefined' : _typeof(cb), 'function', 'a callback must be provided for exit handler');
	
	  if (loaded === false) {
	    load();
	  }
	
	  var ev = 'exit';
	  if (opts && opts.alwaysLast) {
	    ev = 'afterexit';
	  }
	
	  var remove = function remove() {
	    emitter.removeListener(ev, cb);
	    if (emitter.listeners('exit').length === 0 && emitter.listeners('afterexit').length === 0) {
	      unload();
	    }
	  };
	  emitter.on(ev, cb);
	
	  return remove;
	};
	
	module.exports.unload = unload;
	function unload() {
	  if (!loaded) {
	    return;
	  }
	  loaded = false;
	
	  signals.forEach(function (sig) {
	    try {
	      process.removeListener(sig, sigListeners[sig]);
	    } catch (er) {}
	  });
	  process.emit = originalProcessEmit;
	  process.reallyExit = originalProcessReallyExit;
	  emitter.count -= 1;
	}
	
	function emit(event, code, signal) {
	  if (emitter.emitted[event]) {
	    return;
	  }
	  emitter.emitted[event] = true;
	  emitter.emit(event, code, signal);
	}
	
	// { <signal>: <listener fn>, ... }
	var sigListeners = {};
	signals.forEach(function (sig) {
	  sigListeners[sig] = function listener() {
	    // If there are no other listeners, an exit is coming!
	    // Simplest way: remove us and then re-send the signal.
	    // We know that this will kill the process, so we can
	    // safely emit now.
	    var listeners = process.listeners(sig);
	    if (listeners.length === emitter.count) {
	      unload();
	      emit('exit', null, sig);
	      /* istanbul ignore next */
	      emit('afterexit', null, sig);
	      /* istanbul ignore next */
	      process.kill(process.pid, sig);
	    }
	  };
	});
	
	module.exports.signals = function () {
	  return signals;
	};
	
	module.exports.load = load;
	
	var loaded = false;
	
	function load() {
	  if (loaded) {
	    return;
	  }
	  loaded = true;
	
	  // This is the number of onSignalExit's that are in play.
	  // It's important so that we can count the correct number of
	  // listeners on signals, and don't wait for the other one to
	  // handle it instead of us.
	  emitter.count += 1;
	
	  signals = signals.filter(function (sig) {
	    try {
	      process.on(sig, sigListeners[sig]);
	      return true;
	    } catch (er) {
	      return false;
	    }
	  });
	
	  process.emit = processEmit;
	  process.reallyExit = processReallyExit;
	}
	
	var originalProcessReallyExit = process.reallyExit;
	function processReallyExit(code) {
	  process.exitCode = code || 0;
	  emit('exit', process.exitCode, null);
	  /* istanbul ignore next */
	  emit('afterexit', process.exitCode, null);
	  /* istanbul ignore next */
	  originalProcessReallyExit.call(process, process.exitCode);
	}
	
	var originalProcessEmit = process.emit;
	function processEmit(ev, arg) {
	  if (ev === 'exit') {
	    if (arg !== undefined) {
	      process.exitCode = arg;
	    }
	    var ret = originalProcessEmit.apply(this, arguments);
	    emit('exit', process.exitCode, null);
	    /* istanbul ignore next */
	    emit('afterexit', process.exitCode, null);
	    return ret;
	  } else {
	    return originalProcessEmit.apply(this, arguments);
	  }
	}
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ }),
/* 336 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global) {'use strict';
	
	// compare and isBuffer taken from https://github.com/feross/buffer/blob/680e9e5e488f22aac27599a57dc844a6315928dd/index.js
	// original notice:
	
	/*!
	 * The buffer module from node.js, for the browser.
	 *
	 * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
	 * @license  MIT
	 */
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
	
	function compare(a, b) {
	  if (a === b) {
	    return 0;
	  }
	
	  var x = a.length;
	  var y = b.length;
	
	  for (var i = 0, len = Math.min(x, y); i < len; ++i) {
	    if (a[i] !== b[i]) {
	      x = a[i];
	      y = b[i];
	      break;
	    }
	  }
	
	  if (x < y) {
	    return -1;
	  }
	  if (y < x) {
	    return 1;
	  }
	  return 0;
	}
	function isBuffer(b) {
	  if (global.Buffer && typeof global.Buffer.isBuffer === 'function') {
	    return global.Buffer.isBuffer(b);
	  }
	  return !!(b != null && b._isBuffer);
	}
	
	// based on node assert, original notice:
	
	// http://wiki.commonjs.org/wiki/Unit_Testing/1.0
	//
	// THIS IS NOT TESTED NOR LIKELY TO WORK OUTSIDE V8!
	//
	// Originally from narwhal.js (http://narwhaljs.org)
	// Copyright (c) 2009 Thomas Robinson <280north.com>
	//
	// Permission is hereby granted, free of charge, to any person obtaining a copy
	// of this software and associated documentation files (the 'Software'), to
	// deal in the Software without restriction, including without limitation the
	// rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
	// sell copies of the Software, and to permit persons to whom the Software is
	// furnished to do so, subject to the following conditions:
	//
	// The above copyright notice and this permission notice shall be included in
	// all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	// AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
	// ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
	// WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
	
	var util = __webpack_require__(271);
	var hasOwn = Object.prototype.hasOwnProperty;
	var pSlice = Array.prototype.slice;
	var functionsHaveNames = function () {
	  return function foo() {}.name === 'foo';
	}();
	function pToString(obj) {
	  return Object.prototype.toString.call(obj);
	}
	function isView(arrbuf) {
	  if (isBuffer(arrbuf)) {
	    return false;
	  }
	  if (typeof global.ArrayBuffer !== 'function') {
	    return false;
	  }
	  if (typeof ArrayBuffer.isView === 'function') {
	    return ArrayBuffer.isView(arrbuf);
	  }
	  if (!arrbuf) {
	    return false;
	  }
	  if (arrbuf instanceof DataView) {
	    return true;
	  }
	  if (arrbuf.buffer && arrbuf.buffer instanceof ArrayBuffer) {
	    return true;
	  }
	  return false;
	}
	// 1. The assert module provides functions that throw
	// AssertionError's when particular conditions are not met. The
	// assert module must conform to the following interface.
	
	var assert = module.exports = ok;
	
	// 2. The AssertionError is defined in assert.
	// new assert.AssertionError({ message: message,
	//                             actual: actual,
	//                             expected: expected })
	
	var regex = /\s*function\s+([^\(\s]*)\s*/;
	// based on https://github.com/ljharb/function.prototype.name/blob/adeeeec8bfcc6068b187d7d9fb3d5bb1d3a30899/implementation.js
	function getName(func) {
	  if (!util.isFunction(func)) {
	    return;
	  }
	  if (functionsHaveNames) {
	    return func.name;
	  }
	  var str = func.toString();
	  var match = str.match(regex);
	  return match && match[1];
	}
	assert.AssertionError = function AssertionError(options) {
	  this.name = 'AssertionError';
	  this.actual = options.actual;
	  this.expected = options.expected;
	  this.operator = options.operator;
	  if (options.message) {
	    this.message = options.message;
	    this.generatedMessage = false;
	  } else {
	    this.message = getMessage(this);
	    this.generatedMessage = true;
	  }
	  var stackStartFunction = options.stackStartFunction || fail;
	  if (Error.captureStackTrace) {
	    Error.captureStackTrace(this, stackStartFunction);
	  } else {
	    // non v8 browsers so we can have a stacktrace
	    var err = new Error();
	    if (err.stack) {
	      var out = err.stack;
	
	      // try to strip useless frames
	      var fn_name = getName(stackStartFunction);
	      var idx = out.indexOf('\n' + fn_name);
	      if (idx >= 0) {
	        // once we have located the function frame
	        // we need to strip out everything before it (and its line)
	        var next_line = out.indexOf('\n', idx + 1);
	        out = out.substring(next_line + 1);
	      }
	
	      this.stack = out;
	    }
	  }
	};
	
	// assert.AssertionError instanceof Error
	util.inherits(assert.AssertionError, Error);
	
	function truncate(s, n) {
	  if (typeof s === 'string') {
	    return s.length < n ? s : s.slice(0, n);
	  } else {
	    return s;
	  }
	}
	function inspect(something) {
	  if (functionsHaveNames || !util.isFunction(something)) {
	    return util.inspect(something);
	  }
	  var rawname = getName(something);
	  var name = rawname ? ': ' + rawname : '';
	  return '[Function' + name + ']';
	}
	function getMessage(self) {
	  return truncate(inspect(self.actual), 128) + ' ' + self.operator + ' ' + truncate(inspect(self.expected), 128);
	}
	
	// At present only the three keys mentioned above are used and
	// understood by the spec. Implementations or sub modules can pass
	// other keys to the AssertionError's constructor - they will be
	// ignored.
	
	// 3. All of the following functions must throw an AssertionError
	// when a corresponding condition is not met, with a message that
	// may be undefined if not provided.  All assertion methods provide
	// both the actual and expected values to the assertion error for
	// display purposes.
	
	function fail(actual, expected, message, operator, stackStartFunction) {
	  throw new assert.AssertionError({
	    message: message,
	    actual: actual,
	    expected: expected,
	    operator: operator,
	    stackStartFunction: stackStartFunction
	  });
	}
	
	// EXTENSION! allows for well behaved errors defined elsewhere.
	assert.fail = fail;
	
	// 4. Pure assertion tests whether a value is truthy, as determined
	// by !!guard.
	// assert.ok(guard, message_opt);
	// This statement is equivalent to assert.equal(true, !!guard,
	// message_opt);. To test strictly for the value true, use
	// assert.strictEqual(true, guard, message_opt);.
	
	function ok(value, message) {
	  if (!value) fail(value, true, message, '==', assert.ok);
	}
	assert.ok = ok;
	
	// 5. The equality assertion tests shallow, coercive equality with
	// ==.
	// assert.equal(actual, expected, message_opt);
	
	assert.equal = function equal(actual, expected, message) {
	  if (actual != expected) fail(actual, expected, message, '==', assert.equal);
	};
	
	// 6. The non-equality assertion tests for whether two objects are not equal
	// with != assert.notEqual(actual, expected, message_opt);
	
	assert.notEqual = function notEqual(actual, expected, message) {
	  if (actual == expected) {
	    fail(actual, expected, message, '!=', assert.notEqual);
	  }
	};
	
	// 7. The equivalence assertion tests a deep equality relation.
	// assert.deepEqual(actual, expected, message_opt);
	
	assert.deepEqual = function deepEqual(actual, expected, message) {
	  if (!_deepEqual(actual, expected, false)) {
	    fail(actual, expected, message, 'deepEqual', assert.deepEqual);
	  }
	};
	
	assert.deepStrictEqual = function deepStrictEqual(actual, expected, message) {
	  if (!_deepEqual(actual, expected, true)) {
	    fail(actual, expected, message, 'deepStrictEqual', assert.deepStrictEqual);
	  }
	};
	
	function _deepEqual(actual, expected, strict, memos) {
	  // 7.1. All identical values are equivalent, as determined by ===.
	  if (actual === expected) {
	    return true;
	  } else if (isBuffer(actual) && isBuffer(expected)) {
	    return compare(actual, expected) === 0;
	
	    // 7.2. If the expected value is a Date object, the actual value is
	    // equivalent if it is also a Date object that refers to the same time.
	  } else if (util.isDate(actual) && util.isDate(expected)) {
	    return actual.getTime() === expected.getTime();
	
	    // 7.3 If the expected value is a RegExp object, the actual value is
	    // equivalent if it is also a RegExp object with the same source and
	    // properties (`global`, `multiline`, `lastIndex`, `ignoreCase`).
	  } else if (util.isRegExp(actual) && util.isRegExp(expected)) {
	    return actual.source === expected.source && actual.global === expected.global && actual.multiline === expected.multiline && actual.lastIndex === expected.lastIndex && actual.ignoreCase === expected.ignoreCase;
	
	    // 7.4. Other pairs that do not both pass typeof value == 'object',
	    // equivalence is determined by ==.
	  } else if ((actual === null || (typeof actual === 'undefined' ? 'undefined' : _typeof(actual)) !== 'object') && (expected === null || (typeof expected === 'undefined' ? 'undefined' : _typeof(expected)) !== 'object')) {
	    return strict ? actual === expected : actual == expected;
	
	    // If both values are instances of typed arrays, wrap their underlying
	    // ArrayBuffers in a Buffer each to increase performance
	    // This optimization requires the arrays to have the same type as checked by
	    // Object.prototype.toString (aka pToString). Never perform binary
	    // comparisons for Float*Arrays, though, since e.g. +0 === -0 but their
	    // bit patterns are not identical.
	  } else if (isView(actual) && isView(expected) && pToString(actual) === pToString(expected) && !(actual instanceof Float32Array || actual instanceof Float64Array)) {
	    return compare(new Uint8Array(actual.buffer), new Uint8Array(expected.buffer)) === 0;
	
	    // 7.5 For all other Object pairs, including Array objects, equivalence is
	    // determined by having the same number of owned properties (as verified
	    // with Object.prototype.hasOwnProperty.call), the same set of keys
	    // (although not necessarily the same order), equivalent values for every
	    // corresponding key, and an identical 'prototype' property. Note: this
	    // accounts for both named and indexed properties on Arrays.
	  } else if (isBuffer(actual) !== isBuffer(expected)) {
	    return false;
	  } else {
	    memos = memos || { actual: [], expected: [] };
	
	    var actualIndex = memos.actual.indexOf(actual);
	    if (actualIndex !== -1) {
	      if (actualIndex === memos.expected.indexOf(expected)) {
	        return true;
	      }
	    }
	
	    memos.actual.push(actual);
	    memos.expected.push(expected);
	
	    return objEquiv(actual, expected, strict, memos);
	  }
	}
	
	function isArguments(object) {
	  return Object.prototype.toString.call(object) == '[object Arguments]';
	}
	
	function objEquiv(a, b, strict, actualVisitedObjects) {
	  if (a === null || a === undefined || b === null || b === undefined) return false;
	  // if one is a primitive, the other must be same
	  if (util.isPrimitive(a) || util.isPrimitive(b)) return a === b;
	  if (strict && Object.getPrototypeOf(a) !== Object.getPrototypeOf(b)) return false;
	  var aIsArgs = isArguments(a);
	  var bIsArgs = isArguments(b);
	  if (aIsArgs && !bIsArgs || !aIsArgs && bIsArgs) return false;
	  if (aIsArgs) {
	    a = pSlice.call(a);
	    b = pSlice.call(b);
	    return _deepEqual(a, b, strict);
	  }
	  var ka = objectKeys(a);
	  var kb = objectKeys(b);
	  var key, i;
	  // having the same number of owned properties (keys incorporates
	  // hasOwnProperty)
	  if (ka.length !== kb.length) return false;
	  //the same set of keys (although not necessarily the same order),
	  ka.sort();
	  kb.sort();
	  //~~~cheap key test
	  for (i = ka.length - 1; i >= 0; i--) {
	    if (ka[i] !== kb[i]) return false;
	  }
	  //equivalent values for every corresponding key, and
	  //~~~possibly expensive deep test
	  for (i = ka.length - 1; i >= 0; i--) {
	    key = ka[i];
	    if (!_deepEqual(a[key], b[key], strict, actualVisitedObjects)) return false;
	  }
	  return true;
	}
	
	// 8. The non-equivalence assertion tests for any deep inequality.
	// assert.notDeepEqual(actual, expected, message_opt);
	
	assert.notDeepEqual = function notDeepEqual(actual, expected, message) {
	  if (_deepEqual(actual, expected, false)) {
	    fail(actual, expected, message, 'notDeepEqual', assert.notDeepEqual);
	  }
	};
	
	assert.notDeepStrictEqual = notDeepStrictEqual;
	function notDeepStrictEqual(actual, expected, message) {
	  if (_deepEqual(actual, expected, true)) {
	    fail(actual, expected, message, 'notDeepStrictEqual', notDeepStrictEqual);
	  }
	}
	
	// 9. The strict equality assertion tests strict equality, as determined by ===.
	// assert.strictEqual(actual, expected, message_opt);
	
	assert.strictEqual = function strictEqual(actual, expected, message) {
	  if (actual !== expected) {
	    fail(actual, expected, message, '===', assert.strictEqual);
	  }
	};
	
	// 10. The strict non-equality assertion tests for strict inequality, as
	// determined by !==.  assert.notStrictEqual(actual, expected, message_opt);
	
	assert.notStrictEqual = function notStrictEqual(actual, expected, message) {
	  if (actual === expected) {
	    fail(actual, expected, message, '!==', assert.notStrictEqual);
	  }
	};
	
	function expectedException(actual, expected) {
	  if (!actual || !expected) {
	    return false;
	  }
	
	  if (Object.prototype.toString.call(expected) == '[object RegExp]') {
	    return expected.test(actual);
	  }
	
	  try {
	    if (actual instanceof expected) {
	      return true;
	    }
	  } catch (e) {
	    // Ignore.  The instanceof check doesn't work for arrow functions.
	  }
	
	  if (Error.isPrototypeOf(expected)) {
	    return false;
	  }
	
	  return expected.call({}, actual) === true;
	}
	
	function _tryBlock(block) {
	  var error;
	  try {
	    block();
	  } catch (e) {
	    error = e;
	  }
	  return error;
	}
	
	function _throws(shouldThrow, block, expected, message) {
	  var actual;
	
	  if (typeof block !== 'function') {
	    throw new TypeError('"block" argument must be a function');
	  }
	
	  if (typeof expected === 'string') {
	    message = expected;
	    expected = null;
	  }
	
	  actual = _tryBlock(block);
	
	  message = (expected && expected.name ? ' (' + expected.name + ').' : '.') + (message ? ' ' + message : '.');
	
	  if (shouldThrow && !actual) {
	    fail(actual, expected, 'Missing expected exception' + message);
	  }
	
	  var userProvidedMessage = typeof message === 'string';
	  var isUnwantedException = !shouldThrow && util.isError(actual);
	  var isUnexpectedException = !shouldThrow && actual && !expected;
	
	  if (isUnwantedException && userProvidedMessage && expectedException(actual, expected) || isUnexpectedException) {
	    fail(actual, expected, 'Got unwanted exception' + message);
	  }
	
	  if (shouldThrow && actual && expected && !expectedException(actual, expected) || !shouldThrow && actual) {
	    throw actual;
	  }
	}
	
	// 11. Expected to throw an error:
	// assert.throws(block, Error_opt, message_opt);
	
	assert.throws = function (block, /*optional*/error, /*optional*/message) {
	  _throws(true, block, error, message);
	};
	
	// EXTENSION! This is annoying to write outside this module.
	assert.doesNotThrow = function (block, /*optional*/error, /*optional*/message) {
	  _throws(false, block, error, message);
	};
	
	assert.ifError = function (err) {
	  if (err) throw err;
	};
	
	var objectKeys = Object.keys || function (obj) {
	  var keys = [];
	  for (var key in obj) {
	    if (hasOwn.call(obj, key)) keys.push(key);
	  }
	  return keys;
	};
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ }),
/* 337 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';
	
	// This is not the set of all possible signals.
	//
	// It IS, however, the set of all signals that trigger
	// an exit on either Linux or BSD systems.  Linux is a
	// superset of the signal names supported on BSD, and
	// the unknown signals just fail to register, so we can
	// catch that easily enough.
	//
	// Don't bother with SIGKILL.  It's uncatchable, which
	// means that we can't fire any callbacks anyway.
	//
	// If a user does happen to register a handler on a non-
	// fatal signal like SIGWINCH or something, and then
	// exit, it'll end up firing `process.emit('exit')`, so
	// the handler will be fired anyway.
	//
	// SIGBUS, SIGFPE, SIGSEGV and SIGILL, when not raised
	// artificially, inherently leave the process in a
	// state from which it is not safe to try and enter JS
	// listeners.
	module.exports = ['SIGABRT', 'SIGALRM', 'SIGHUP', 'SIGINT', 'SIGTERM'];
	
	if (process.platform !== 'win32') {
	  module.exports.push('SIGVTALRM', 'SIGXCPU', 'SIGXFSZ', 'SIGUSR2', 'SIGTRAP', 'SIGSYS', 'SIGQUIT', 'SIGIOT'
	  // should detect profiler and enable/disable accordingly.
	  // see #21
	  // 'SIGPROF'
	  );
	}
	
	if (process.platform === 'linux') {
	  module.exports.push('SIGIO', 'SIGPOLL', 'SIGPWR', 'SIGSTKFLT', 'SIGUNUSED');
	}
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ }),
/* 338 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var consoleControl = __webpack_require__(319);
	var ThemeSet = __webpack_require__(339);
	
	var themes = module.exports = new ThemeSet();
	
	themes.addTheme('ASCII', {
	  preProgressbar: '[',
	  postProgressbar: ']',
	  progressbarTheme: {
	    complete: '#',
	    remaining: '.'
	  },
	  activityIndicatorTheme: '-\\|/',
	  preSubsection: '>'
	});
	
	themes.addTheme('colorASCII', themes.getTheme('ASCII'), {
	  progressbarTheme: {
	    preComplete: consoleControl.color('inverse'),
	    complete: ' ',
	    postComplete: consoleControl.color('stopInverse'),
	    preRemaining: consoleControl.color('brightBlack'),
	    remaining: '.',
	    postRemaining: consoleControl.color('reset')
	  }
	});
	
	themes.addTheme('brailleSpinner', {
	  preProgressbar: '⸨',
	  postProgressbar: '⸩',
	  progressbarTheme: {
	    complete: '░',
	    remaining: '⠂'
	  },
	  activityIndicatorTheme: '⠋⠙⠹⠸⠼⠴⠦⠧⠇⠏',
	  preSubsection: '>'
	});
	
	themes.addTheme('colorBrailleSpinner', themes.getTheme('brailleSpinner'), {
	  progressbarTheme: {
	    preComplete: consoleControl.color('inverse'),
	    complete: ' ',
	    postComplete: consoleControl.color('stopInverse'),
	    preRemaining: consoleControl.color('brightBlack'),
	    remaining: '░',
	    postRemaining: consoleControl.color('reset')
	  }
	});
	
	themes.setDefault({}, 'ASCII');
	themes.setDefault({ hasColor: true }, 'colorASCII');
	themes.setDefault({ platform: 'darwin', hasUnicode: true }, 'brailleSpinner');
	themes.setDefault({ platform: 'darwin', hasUnicode: true, hasColor: true }, 'colorBrailleSpinner');

/***/ }),
/* 339 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';
	
	var objectAssign = __webpack_require__(4);
	
	module.exports = function () {
	  return ThemeSetProto.newThemeSet();
	};
	
	var ThemeSetProto = {};
	
	ThemeSetProto.baseTheme = __webpack_require__(340);
	
	ThemeSetProto.newTheme = function (parent, theme) {
	  if (!theme) {
	    theme = parent;
	    parent = this.baseTheme;
	  }
	  return objectAssign({}, parent, theme);
	};
	
	ThemeSetProto.getThemeNames = function () {
	  return Object.keys(this.themes);
	};
	
	ThemeSetProto.addTheme = function (name, parent, theme) {
	  this.themes[name] = this.newTheme(parent, theme);
	};
	
	ThemeSetProto.addToAllThemes = function (theme) {
	  var themes = this.themes;
	  Object.keys(themes).forEach(function (name) {
	    objectAssign(themes[name], theme);
	  });
	  objectAssign(this.baseTheme, theme);
	};
	
	ThemeSetProto.getTheme = function (name) {
	  if (!this.themes[name]) throw this.newMissingThemeError(name);
	  return this.themes[name];
	};
	
	ThemeSetProto.setDefault = function (opts, name) {
	  if (name == null) {
	    name = opts;
	    opts = {};
	  }
	  var platform = opts.platform == null ? 'fallback' : opts.platform;
	  var hasUnicode = !!opts.hasUnicode;
	  var hasColor = !!opts.hasColor;
	  if (!this.defaults[platform]) this.defaults[platform] = { true: {}, false: {} };
	  this.defaults[platform][hasUnicode][hasColor] = name;
	};
	
	ThemeSetProto.getDefault = function (opts) {
	  if (!opts) opts = {};
	  var platformName = opts.platform || process.platform;
	  var platform = this.defaults[platformName] || this.defaults.fallback;
	  var hasUnicode = !!opts.hasUnicode;
	  var hasColor = !!opts.hasColor;
	  if (!platform) throw this.newMissingDefaultThemeError(platformName, hasUnicode, hasColor);
	  if (!platform[hasUnicode][hasColor]) {
	    if (hasUnicode && hasColor && platform[!hasUnicode][hasColor]) {
	      hasUnicode = false;
	    } else if (hasUnicode && hasColor && platform[hasUnicode][!hasColor]) {
	      hasColor = false;
	    } else if (hasUnicode && hasColor && platform[!hasUnicode][!hasColor]) {
	      hasUnicode = false;
	      hasColor = false;
	    } else if (hasUnicode && !hasColor && platform[!hasUnicode][hasColor]) {
	      hasUnicode = false;
	    } else if (!hasUnicode && hasColor && platform[hasUnicode][!hasColor]) {
	      hasColor = false;
	    } else if (platform === this.defaults.fallback) {
	      throw this.newMissingDefaultThemeError(platformName, hasUnicode, hasColor);
	    }
	  }
	  if (platform[hasUnicode][hasColor]) {
	    return this.getTheme(platform[hasUnicode][hasColor]);
	  } else {
	    return this.getDefault(objectAssign({}, opts, { platform: 'fallback' }));
	  }
	};
	
	ThemeSetProto.newMissingThemeError = function newMissingThemeError(name) {
	  var err = new Error('Could not find a gauge theme named "' + name + '"');
	  Error.captureStackTrace.call(err, newMissingThemeError);
	  err.theme = name;
	  err.code = 'EMISSINGTHEME';
	  return err;
	};
	
	ThemeSetProto.newMissingDefaultThemeError = function newMissingDefaultThemeError(platformName, hasUnicode, hasColor) {
	  var err = new Error('Could not find a gauge theme for your platform/unicode/color use combo:\n' + '    platform = ' + platformName + '\n' + '    hasUnicode = ' + hasUnicode + '\n' + '    hasColor = ' + hasColor);
	  Error.captureStackTrace.call(err, newMissingDefaultThemeError);
	  err.platform = platformName;
	  err.hasUnicode = hasUnicode;
	  err.hasColor = hasColor;
	  err.code = 'EMISSINGTHEME';
	  return err;
	};
	
	ThemeSetProto.newThemeSet = function () {
	  var themeset = function themeset(opts) {
	    return themeset.getDefault(opts);
	  };
	  return objectAssign(themeset, ThemeSetProto, {
	    themes: objectAssign({}, this.themes),
	    baseTheme: objectAssign({}, this.baseTheme),
	    defaults: JSON.parse(JSON.stringify(this.defaults || {}))
	  });
	};
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ }),
/* 340 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var spin = __webpack_require__(341);
	var progressBar = __webpack_require__(342);
	
	module.exports = {
	  activityIndicator: function activityIndicator(values, theme, width) {
	    if (values.spun == null) return;
	    return spin(theme, values.spun);
	  },
	  progressbar: function progressbar(values, theme, width) {
	    if (values.completed == null) return;
	    return progressBar(theme, width, values.completed);
	  }
	};

/***/ }),
/* 341 */
/***/ (function(module, exports) {

	'use strict';
	
	module.exports = function spin(spinstr, spun) {
	  return spinstr[spun % spinstr.length];
	};

/***/ }),
/* 342 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var validate = __webpack_require__(328);
	var renderTemplate = __webpack_require__(320);
	var wideTruncate = __webpack_require__(329);
	var stringWidth = __webpack_require__(322);
	
	module.exports = function (theme, width, completed) {
	  validate('ONN', [theme, width, completed]);
	  if (completed < 0) completed = 0;
	  if (completed > 1) completed = 1;
	  if (width <= 0) return '';
	  var sofar = Math.round(width * completed);
	  var rest = width - sofar;
	  var template = [{ type: 'complete', value: repeat(theme.complete, sofar), length: sofar }, { type: 'remaining', value: repeat(theme.remaining, rest), length: rest }];
	  return renderTemplate(width, template, theme);
	};
	
	// lodash's way of repeating
	function repeat(string, width) {
	  var result = '';
	  var n = width;
	  do {
	    if (n % 2) {
	      result += string;
	    }
	    n = Math.floor(n / 2);
	    /*eslint no-self-assign: 0*/
	    string += string;
	  } while (n && stringWidth(result) < width);
	
	  return wideTruncate(result, width);
	}

/***/ }),
/* 343 */
/***/ (function(module, exports) {

	'use strict';
	// this exists so we can replace it during testing
	
	module.exports = setInterval;

/***/ }),
/* 344 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';
	// this exists so we can replace it during testing
	
	module.exports = process;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ }),
/* 345 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(setImmediate) {'use strict';
	
	var process = __webpack_require__(344);
	try {
	  module.exports = setImmediate;
	} catch (ex) {
	  module.exports = process.nextTick;
	}
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(299).setImmediate))

/***/ }),
/* 346 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';
	
	module.exports = function (blocking) {
	  [process.stdout, process.stderr].forEach(function (stream) {
	    if (stream._handle && stream.isTTY && typeof stream._handle.setBlocking === 'function') {
	      stream._handle.setBlocking(blocking);
	    }
	  });
	};
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ }),
/* 347 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	
	var versioning = __webpack_require__(348);
	var existsSync = __webpack_require__(!(function webpackMissingModule() { var e = new Error("Cannot find module \"fs\""); e.code = 'MODULE_NOT_FOUND'; throw e; }())).existsSync || __webpack_require__(270).existsSync;
	var path = __webpack_require__(270);
	
	module.exports = exports;
	
	exports.usage = 'Finds the require path for the node-pre-gyp installed module';
	
	exports.validate = function (package_json) {
	   versioning.validate_config(package_json);
	};
	
	exports.find = function (package_json_path, opts) {
	   if (!existsSync(package_json_path)) {
	      throw new Error("package.json does not exist at " + package_json_path);
	   }
	   var package_json = __webpack_require__(591)(package_json_path);
	   versioning.validate_config(package_json);
	   opts = opts || {};
	   if (!opts.module_root) opts.module_root = path.dirname(package_json_path);
	   var meta = versioning.evaluate(package_json, opts);
	   return meta.module;
	};

/***/ }),
/* 348 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {"use strict";
	
	module.exports = exports;
	
	var path = __webpack_require__(270);
	var semver = __webpack_require__(349);
	var url = __webpack_require__(275);
	
	var abi_crosswalk;
	
	// This is used for unit testing to provide a fake
	// ABI crosswalk that emulates one that is not updated
	// for the current version
	if (process.env.NODE_PRE_GYP_ABI_CROSSWALK) {
	    abi_crosswalk = __webpack_require__(350)(process.env.NODE_PRE_GYP_ABI_CROSSWALK);
	} else {
	    abi_crosswalk = __webpack_require__(!(function webpackMissingModule() { var e = new Error("Cannot find module \"./abi_crosswalk.json\""); e.code = 'MODULE_NOT_FOUND'; throw e; }()));
	}
	
	function get_electron_abi(runtime, target_version) {
	    if (!runtime) {
	        throw new Error("get_electron_abi requires valid runtime arg");
	    }
	    if (typeof target_version === 'undefined') {
	        // erroneous CLI call
	        throw new Error("Empty target version is not supported if electron is the target.");
	    }
	    // Electron guarantees that patch version update won't break native modules.
	    var sem_ver = semver.parse(target_version);
	    return runtime + '-v' + sem_ver.major + '.' + sem_ver.minor;
	}
	module.exports.get_electron_abi = get_electron_abi;
	
	function get_node_webkit_abi(runtime, target_version) {
	    if (!runtime) {
	        throw new Error("get_node_webkit_abi requires valid runtime arg");
	    }
	    if (typeof target_version === 'undefined') {
	        // erroneous CLI call
	        throw new Error("Empty target version is not supported if node-webkit is the target.");
	    }
	    return runtime + '-v' + target_version;
	}
	module.exports.get_node_webkit_abi = get_node_webkit_abi;
	
	function get_node_abi(runtime, versions) {
	    if (!runtime) {
	        throw new Error("get_node_abi requires valid runtime arg");
	    }
	    if (!versions) {
	        throw new Error("get_node_abi requires valid process.versions object");
	    }
	    var sem_ver = semver.parse(versions.node);
	    if (sem_ver.major === 0 && sem_ver.minor % 2) {
	        // odd series
	        // https://github.com/mapbox/node-pre-gyp/issues/124
	        return runtime + '-v' + versions.node;
	    } else {
	        // process.versions.modules added in >= v0.10.4 and v0.11.7
	        // https://github.com/joyent/node/commit/ccabd4a6fa8a6eb79d29bc3bbe9fe2b6531c2d8e
	        return versions.modules ? runtime + '-v' + +versions.modules : 'v8-' + versions.v8.split('.').slice(0, 2).join('.');
	    }
	}
	module.exports.get_node_abi = get_node_abi;
	
	function get_runtime_abi(runtime, target_version) {
	    if (!runtime) {
	        throw new Error("get_runtime_abi requires valid runtime arg");
	    }
	    if (runtime === 'node-webkit') {
	        return get_node_webkit_abi(runtime, target_version || process.versions['node-webkit']);
	    } else if (runtime === 'electron') {
	        return get_electron_abi(runtime, target_version || process.versions.electron);
	    } else {
	        if (runtime != 'node') {
	            throw new Error("Unknown Runtime: '" + runtime + "'");
	        }
	        if (!target_version) {
	            return get_node_abi(runtime, process.versions);
	        } else {
	            var cross_obj;
	            // abi_crosswalk generated with ./scripts/abi_crosswalk.js
	            if (abi_crosswalk[target_version]) {
	                cross_obj = abi_crosswalk[target_version];
	            } else {
	                var target_parts = target_version.split('.').map(function (i) {
	                    return +i;
	                });
	                if (target_parts.length != 3) {
	                    // parse failed
	                    throw new Error("Unknown target version: " + target_version);
	                }
	                /*
	                    The below code tries to infer the last known ABI compatible version
	                    that we have recorded in the abi_crosswalk.json when an exact match
	                    is not possible. The reasons for this to exist are complicated:
	                        - We support passing --target to be able to allow developers to package binaries for versions of node
	                         that are not the same one as they are running. This might also be used in combination with the
	                         --target_arch or --target_platform flags to also package binaries for alternative platforms
	                       - When --target is passed we can't therefore determine the ABI (process.versions.modules) from the node
	                         version that is running in memory
	                       - So, therefore node-pre-gyp keeps an "ABI crosswalk" (lib/util/abi_crosswalk.json) to be able to look
	                         this info up for all versions
	                       - But we cannot easily predict what the future ABI will be for released versions
	                       - And node-pre-gyp needs to be a `bundledDependency` in apps that depend on it in order to work correctly
	                         by being fully available at install time.
	                       - So, the speed of node releases and the bundled nature of node-pre-gyp mean that a new node-pre-gyp release
	                         need to happen for every node.js/io.js/node-webkit/nw.js/atom-shell/etc release that might come online if
	                         you want the `--target` flag to keep working for the latest version
	                       - Which is impractical ^^
	                       - Hence the below code guesses about future ABI to make the need to update node-pre-gyp less demanding.
	                     In practice then you can have a dependency of your app like `node-sqlite3` that bundles a `node-pre-gyp` that
	                    only knows about node v0.10.33 in the `abi_crosswalk.json` but target node v0.10.34 (which is assumed to be
	                    ABI compatible with v0.10.33).
	                     TODO: use semver module instead of custom version parsing
	                */
	                var major = target_parts[0];
	                var minor = target_parts[1];
	                var patch = target_parts[2];
	                // io.js: yeah if node.js ever releases 1.x this will break
	                // but that is unlikely to happen: https://github.com/iojs/io.js/pull/253#issuecomment-69432616
	                if (major === 1) {
	                    // look for last release that is the same major version
	                    // e.g. we assume io.js 1.x is ABI compatible with >= 1.0.0
	                    while (true) {
	                        if (minor > 0) --minor;
	                        if (patch > 0) --patch;
	                        var new_iojs_target = '' + major + '.' + minor + '.' + patch;
	                        if (abi_crosswalk[new_iojs_target]) {
	                            cross_obj = abi_crosswalk[new_iojs_target];
	                            console.log('Warning: node-pre-gyp could not find exact match for ' + target_version);
	                            console.log('Warning: but node-pre-gyp successfully choose ' + new_iojs_target + ' as ABI compatible target');
	                            break;
	                        }
	                        if (minor === 0 && patch === 0) {
	                            break;
	                        }
	                    }
	                } else if (major === 0) {
	                    // node.js
	                    if (target_parts[1] % 2 === 0) {
	                        // for stable/even node.js series
	                        // look for the last release that is the same minor release
	                        // e.g. we assume node 0.10.x is ABI compatible with >= 0.10.0
	                        while (--patch > 0) {
	                            var new_node_target = '' + major + '.' + minor + '.' + patch;
	                            if (abi_crosswalk[new_node_target]) {
	                                cross_obj = abi_crosswalk[new_node_target];
	                                console.log('Warning: node-pre-gyp could not find exact match for ' + target_version);
	                                console.log('Warning: but node-pre-gyp successfully choose ' + new_node_target + ' as ABI compatible target');
	                                break;
	                            }
	                        }
	                    }
	                }
	            }
	            if (!cross_obj) {
	                throw new Error("Unsupported target version: " + target_version);
	            }
	            // emulate process.versions
	            var versions_obj = {
	                node: target_version,
	                v8: cross_obj.v8 + '.0',
	                // abi_crosswalk uses 1 for node versions lacking process.versions.modules
	                // process.versions.modules added in >= v0.10.4 and v0.11.7
	                modules: cross_obj.node_abi > 1 ? cross_obj.node_abi : undefined
	            };
	            return get_node_abi(runtime, versions_obj);
	        }
	    }
	}
	module.exports.get_runtime_abi = get_runtime_abi;
	
	var required_parameters = ['module_name', 'module_path', 'host'];
	
	function validate_config(package_json) {
	    var msg = package_json.name + ' package.json is not node-pre-gyp ready:\n';
	    var missing = [];
	    if (!package_json.main) {
	        missing.push('main');
	    }
	    if (!package_json.version) {
	        missing.push('version');
	    }
	    if (!package_json.name) {
	        missing.push('name');
	    }
	    if (!package_json.binary) {
	        missing.push('binary');
	    }
	    var o = package_json.binary;
	    required_parameters.forEach(function (p) {
	        if (missing.indexOf('binary') > -1) {
	            missing.pop('binary');
	        }
	        if (!o || o[p] === undefined) {
	            missing.push('binary.' + p);
	        }
	    });
	    if (missing.length >= 1) {
	        throw new Error(msg + "package.json must declare these properties: \n" + missing.join('\n'));
	    }
	    if (o) {
	        // enforce https over http
	        var protocol = url.parse(o.host).protocol;
	        if (protocol === 'http:') {
	            throw new Error("'host' protocol (" + protocol + ") is invalid - only 'https:' is accepted");
	        }
	    }
	}
	
	module.exports.validate_config = validate_config;
	
	function eval_template(template, opts) {
	    Object.keys(opts).forEach(function (key) {
	        var pattern = '{' + key + '}';
	        while (template.indexOf(pattern) > -1) {
	            template = template.replace(pattern, opts[key]);
	        }
	    });
	    return template;
	}
	
	// url.resolve needs single trailing slash
	// to behave correctly, otherwise a double slash
	// may end up in the url which breaks requests
	// and a lacking slash may not lead to proper joining
	function fix_slashes(pathname) {
	    if (pathname.slice(-1) != '/') {
	        return pathname + '/';
	    }
	    return pathname;
	}
	
	// remove double slashes
	// note: path.normalize will not work because
	// it will convert forward to back slashes
	function drop_double_slashes(pathname) {
	    return pathname.replace(/\/\//g, '/');
	}
	
	function get_process_runtime(versions) {
	    var runtime = 'node';
	    if (versions['node-webkit']) {
	        runtime = 'node-webkit';
	    } else if (versions.electron) {
	        runtime = 'electron';
	    }
	    return runtime;
	}
	
	module.exports.get_process_runtime = get_process_runtime;
	
	var default_package_name = '{module_name}-v{version}-{node_abi}-{platform}-{arch}.tar.gz';
	var default_remote_path = '';
	
	module.exports.evaluate = function (package_json, options) {
	    options = options || {};
	    validate_config(package_json);
	    var v = package_json.version;
	    var module_version = semver.parse(v);
	    var runtime = options.runtime || get_process_runtime(process.versions);
	    var opts = {
	        name: package_json.name,
	        configuration: Boolean(options.debug) ? 'Debug' : 'Release',
	        debug: options.debug,
	        module_name: package_json.binary.module_name,
	        version: module_version.version,
	        prerelease: module_version.prerelease.length ? module_version.prerelease.join('.') : '',
	        build: module_version.build.length ? module_version.build.join('.') : '',
	        major: module_version.major,
	        minor: module_version.minor,
	        patch: module_version.patch,
	        runtime: runtime,
	        node_abi: get_runtime_abi(runtime, options.target),
	        target: options.target || '',
	        platform: options.target_platform || process.platform,
	        target_platform: options.target_platform || process.platform,
	        arch: options.target_arch || process.arch,
	        target_arch: options.target_arch || process.arch,
	        module_main: package_json.main,
	        toolset: options.toolset || '' // address https://github.com/mapbox/node-pre-gyp/issues/119
	    };
	    // support host mirror with npm config `--{module_name}_binary_host_mirror`
	    // e.g.: https://github.com/node-inspector/v8-profiler/blob/master/package.json#L25
	    // > npm install v8-profiler --profiler_binary_host_mirror=https://npm.taobao.org/mirrors/node-inspector/
	    var host = process.env['npm_config_' + opts.module_name + '_binary_host_mirror'] || package_json.binary.host;
	    opts.host = fix_slashes(eval_template(host, opts));
	    opts.module_path = eval_template(package_json.binary.module_path, opts);
	    // now we resolve the module_path to ensure it is absolute so that binding.gyp variables work predictably
	    if (options.module_root) {
	        // resolve relative to known module root: works for pre-binding require
	        opts.module_path = path.join(options.module_root, opts.module_path);
	    } else {
	        // resolve relative to current working directory: works for node-pre-gyp commands
	        opts.module_path = path.resolve(opts.module_path);
	    }
	    opts.module = path.join(opts.module_path, opts.module_name + '.node');
	    opts.remote_path = package_json.binary.remote_path ? drop_double_slashes(fix_slashes(eval_template(package_json.binary.remote_path, opts))) : default_remote_path;
	    var package_name = package_json.binary.package_name ? package_json.binary.package_name : default_package_name;
	    opts.package_name = eval_template(package_name, opts);
	    opts.staged_tarball = path.join('build/stage', opts.remote_path, opts.package_name);
	    opts.hosted_path = url.resolve(opts.host, opts.remote_path);
	    opts.hosted_tarball = url.resolve(opts.hosted_path, opts.package_name);
	    return opts;
	};
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ }),
/* 349 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
	
	exports = module.exports = SemVer;
	
	// The debug function is excluded entirely from the minified version.
	/* nomin */var debug;
	/* nomin */if ((typeof process === 'undefined' ? 'undefined' : _typeof(process)) === 'object' &&
	/* nomin */process.env &&
	/* nomin */process.env.NODE_DEBUG &&
	/* nomin *//\bsemver\b/i.test(process.env.NODE_DEBUG))
	  /* nomin */debug = function debug() {
	    /* nomin */var args = Array.prototype.slice.call(arguments, 0);
	    /* nomin */args.unshift('SEMVER');
	    /* nomin */console.log.apply(console, args);
	    /* nomin */
	  };
	  /* nomin */else
	  /* nomin */debug = function debug() {};
	
	// Note: this is the semver.org version of the spec that it implements
	// Not necessarily the package version of this code.
	exports.SEMVER_SPEC_VERSION = '2.0.0';
	
	var MAX_LENGTH = 256;
	var MAX_SAFE_INTEGER = Number.MAX_SAFE_INTEGER || 9007199254740991;
	
	// The actual regexps go on exports.re
	var re = exports.re = [];
	var src = exports.src = [];
	var R = 0;
	
	// The following Regular Expressions can be used for tokenizing,
	// validating, and parsing SemVer version strings.
	
	// ## Numeric Identifier
	// A single `0`, or a non-zero digit followed by zero or more digits.
	
	var NUMERICIDENTIFIER = R++;
	src[NUMERICIDENTIFIER] = '0|[1-9]\\d*';
	var NUMERICIDENTIFIERLOOSE = R++;
	src[NUMERICIDENTIFIERLOOSE] = '[0-9]+';
	
	// ## Non-numeric Identifier
	// Zero or more digits, followed by a letter or hyphen, and then zero or
	// more letters, digits, or hyphens.
	
	var NONNUMERICIDENTIFIER = R++;
	src[NONNUMERICIDENTIFIER] = '\\d*[a-zA-Z-][a-zA-Z0-9-]*';
	
	// ## Main Version
	// Three dot-separated numeric identifiers.
	
	var MAINVERSION = R++;
	src[MAINVERSION] = '(' + src[NUMERICIDENTIFIER] + ')\\.' + '(' + src[NUMERICIDENTIFIER] + ')\\.' + '(' + src[NUMERICIDENTIFIER] + ')';
	
	var MAINVERSIONLOOSE = R++;
	src[MAINVERSIONLOOSE] = '(' + src[NUMERICIDENTIFIERLOOSE] + ')\\.' + '(' + src[NUMERICIDENTIFIERLOOSE] + ')\\.' + '(' + src[NUMERICIDENTIFIERLOOSE] + ')';
	
	// ## Pre-release Version Identifier
	// A numeric identifier, or a non-numeric identifier.
	
	var PRERELEASEIDENTIFIER = R++;
	src[PRERELEASEIDENTIFIER] = '(?:' + src[NUMERICIDENTIFIER] + '|' + src[NONNUMERICIDENTIFIER] + ')';
	
	var PRERELEASEIDENTIFIERLOOSE = R++;
	src[PRERELEASEIDENTIFIERLOOSE] = '(?:' + src[NUMERICIDENTIFIERLOOSE] + '|' + src[NONNUMERICIDENTIFIER] + ')';
	
	// ## Pre-release Version
	// Hyphen, followed by one or more dot-separated pre-release version
	// identifiers.
	
	var PRERELEASE = R++;
	src[PRERELEASE] = '(?:-(' + src[PRERELEASEIDENTIFIER] + '(?:\\.' + src[PRERELEASEIDENTIFIER] + ')*))';
	
	var PRERELEASELOOSE = R++;
	src[PRERELEASELOOSE] = '(?:-?(' + src[PRERELEASEIDENTIFIERLOOSE] + '(?:\\.' + src[PRERELEASEIDENTIFIERLOOSE] + ')*))';
	
	// ## Build Metadata Identifier
	// Any combination of digits, letters, or hyphens.
	
	var BUILDIDENTIFIER = R++;
	src[BUILDIDENTIFIER] = '[0-9A-Za-z-]+';
	
	// ## Build Metadata
	// Plus sign, followed by one or more period-separated build metadata
	// identifiers.
	
	var BUILD = R++;
	src[BUILD] = '(?:\\+(' + src[BUILDIDENTIFIER] + '(?:\\.' + src[BUILDIDENTIFIER] + ')*))';
	
	// ## Full Version String
	// A main version, followed optionally by a pre-release version and
	// build metadata.
	
	// Note that the only major, minor, patch, and pre-release sections of
	// the version string are capturing groups.  The build metadata is not a
	// capturing group, because it should not ever be used in version
	// comparison.
	
	var FULL = R++;
	var FULLPLAIN = 'v?' + src[MAINVERSION] + src[PRERELEASE] + '?' + src[BUILD] + '?';
	
	src[FULL] = '^' + FULLPLAIN + '$';
	
	// like full, but allows v1.2.3 and =1.2.3, which people do sometimes.
	// also, 1.0.0alpha1 (prerelease without the hyphen) which is pretty
	// common in the npm registry.
	var LOOSEPLAIN = '[v=\\s]*' + src[MAINVERSIONLOOSE] + src[PRERELEASELOOSE] + '?' + src[BUILD] + '?';
	
	var LOOSE = R++;
	src[LOOSE] = '^' + LOOSEPLAIN + '$';
	
	var GTLT = R++;
	src[GTLT] = '((?:<|>)?=?)';
	
	// Something like "2.*" or "1.2.x".
	// Note that "x.x" is a valid xRange identifer, meaning "any version"
	// Only the first item is strictly required.
	var XRANGEIDENTIFIERLOOSE = R++;
	src[XRANGEIDENTIFIERLOOSE] = src[NUMERICIDENTIFIERLOOSE] + '|x|X|\\*';
	var XRANGEIDENTIFIER = R++;
	src[XRANGEIDENTIFIER] = src[NUMERICIDENTIFIER] + '|x|X|\\*';
	
	var XRANGEPLAIN = R++;
	src[XRANGEPLAIN] = '[v=\\s]*(' + src[XRANGEIDENTIFIER] + ')' + '(?:\\.(' + src[XRANGEIDENTIFIER] + ')' + '(?:\\.(' + src[XRANGEIDENTIFIER] + ')' + '(?:' + src[PRERELEASE] + ')?' + src[BUILD] + '?' + ')?)?';
	
	var XRANGEPLAINLOOSE = R++;
	src[XRANGEPLAINLOOSE] = '[v=\\s]*(' + src[XRANGEIDENTIFIERLOOSE] + ')' + '(?:\\.(' + src[XRANGEIDENTIFIERLOOSE] + ')' + '(?:\\.(' + src[XRANGEIDENTIFIERLOOSE] + ')' + '(?:' + src[PRERELEASELOOSE] + ')?' + src[BUILD] + '?' + ')?)?';
	
	var XRANGE = R++;
	src[XRANGE] = '^' + src[GTLT] + '\\s*' + src[XRANGEPLAIN] + '$';
	var XRANGELOOSE = R++;
	src[XRANGELOOSE] = '^' + src[GTLT] + '\\s*' + src[XRANGEPLAINLOOSE] + '$';
	
	// Tilde ranges.
	// Meaning is "reasonably at or greater than"
	var LONETILDE = R++;
	src[LONETILDE] = '(?:~>?)';
	
	var TILDETRIM = R++;
	src[TILDETRIM] = '(\\s*)' + src[LONETILDE] + '\\s+';
	re[TILDETRIM] = new RegExp(src[TILDETRIM], 'g');
	var tildeTrimReplace = '$1~';
	
	var TILDE = R++;
	src[TILDE] = '^' + src[LONETILDE] + src[XRANGEPLAIN] + '$';
	var TILDELOOSE = R++;
	src[TILDELOOSE] = '^' + src[LONETILDE] + src[XRANGEPLAINLOOSE] + '$';
	
	// Caret ranges.
	// Meaning is "at least and backwards compatible with"
	var LONECARET = R++;
	src[LONECARET] = '(?:\\^)';
	
	var CARETTRIM = R++;
	src[CARETTRIM] = '(\\s*)' + src[LONECARET] + '\\s+';
	re[CARETTRIM] = new RegExp(src[CARETTRIM], 'g');
	var caretTrimReplace = '$1^';
	
	var CARET = R++;
	src[CARET] = '^' + src[LONECARET] + src[XRANGEPLAIN] + '$';
	var CARETLOOSE = R++;
	src[CARETLOOSE] = '^' + src[LONECARET] + src[XRANGEPLAINLOOSE] + '$';
	
	// A simple gt/lt/eq thing, or just "" to indicate "any version"
	var COMPARATORLOOSE = R++;
	src[COMPARATORLOOSE] = '^' + src[GTLT] + '\\s*(' + LOOSEPLAIN + ')$|^$';
	var COMPARATOR = R++;
	src[COMPARATOR] = '^' + src[GTLT] + '\\s*(' + FULLPLAIN + ')$|^$';
	
	// An expression to strip any whitespace between the gtlt and the thing
	// it modifies, so that `> 1.2.3` ==> `>1.2.3`
	var COMPARATORTRIM = R++;
	src[COMPARATORTRIM] = '(\\s*)' + src[GTLT] + '\\s*(' + LOOSEPLAIN + '|' + src[XRANGEPLAIN] + ')';
	
	// this one has to use the /g flag
	re[COMPARATORTRIM] = new RegExp(src[COMPARATORTRIM], 'g');
	var comparatorTrimReplace = '$1$2$3';
	
	// Something like `1.2.3 - 1.2.4`
	// Note that these all use the loose form, because they'll be
	// checked against either the strict or loose comparator form
	// later.
	var HYPHENRANGE = R++;
	src[HYPHENRANGE] = '^\\s*(' + src[XRANGEPLAIN] + ')' + '\\s+-\\s+' + '(' + src[XRANGEPLAIN] + ')' + '\\s*$';
	
	var HYPHENRANGELOOSE = R++;
	src[HYPHENRANGELOOSE] = '^\\s*(' + src[XRANGEPLAINLOOSE] + ')' + '\\s+-\\s+' + '(' + src[XRANGEPLAINLOOSE] + ')' + '\\s*$';
	
	// Star ranges basically just allow anything at all.
	var STAR = R++;
	src[STAR] = '(<|>)?=?\\s*\\*';
	
	// Compile to actual regexp objects.
	// All are flag-free, unless they were created above with a flag.
	for (var i = 0; i < R; i++) {
	  debug(i, src[i]);
	  if (!re[i]) re[i] = new RegExp(src[i]);
	}
	
	exports.parse = parse;
	function parse(version, loose) {
	  if (version instanceof SemVer) return version;
	
	  if (typeof version !== 'string') return null;
	
	  if (version.length > MAX_LENGTH) return null;
	
	  var r = loose ? re[LOOSE] : re[FULL];
	  if (!r.test(version)) return null;
	
	  try {
	    return new SemVer(version, loose);
	  } catch (er) {
	    return null;
	  }
	}
	
	exports.valid = valid;
	function valid(version, loose) {
	  var v = parse(version, loose);
	  return v ? v.version : null;
	}
	
	exports.clean = clean;
	function clean(version, loose) {
	  var s = parse(version.trim().replace(/^[=v]+/, ''), loose);
	  return s ? s.version : null;
	}
	
	exports.SemVer = SemVer;
	
	function SemVer(version, loose) {
	  if (version instanceof SemVer) {
	    if (version.loose === loose) return version;else version = version.version;
	  } else if (typeof version !== 'string') {
	    throw new TypeError('Invalid Version: ' + version);
	  }
	
	  if (version.length > MAX_LENGTH) throw new TypeError('version is longer than ' + MAX_LENGTH + ' characters');
	
	  if (!(this instanceof SemVer)) return new SemVer(version, loose);
	
	  debug('SemVer', version, loose);
	  this.loose = loose;
	  var m = version.trim().match(loose ? re[LOOSE] : re[FULL]);
	
	  if (!m) throw new TypeError('Invalid Version: ' + version);
	
	  this.raw = version;
	
	  // these are actually numbers
	  this.major = +m[1];
	  this.minor = +m[2];
	  this.patch = +m[3];
	
	  if (this.major > MAX_SAFE_INTEGER || this.major < 0) throw new TypeError('Invalid major version');
	
	  if (this.minor > MAX_SAFE_INTEGER || this.minor < 0) throw new TypeError('Invalid minor version');
	
	  if (this.patch > MAX_SAFE_INTEGER || this.patch < 0) throw new TypeError('Invalid patch version');
	
	  // numberify any prerelease numeric ids
	  if (!m[4]) this.prerelease = [];else this.prerelease = m[4].split('.').map(function (id) {
	    if (/^[0-9]+$/.test(id)) {
	      var num = +id;
	      if (num >= 0 && num < MAX_SAFE_INTEGER) return num;
	    }
	    return id;
	  });
	
	  this.build = m[5] ? m[5].split('.') : [];
	  this.format();
	}
	
	SemVer.prototype.format = function () {
	  this.version = this.major + '.' + this.minor + '.' + this.patch;
	  if (this.prerelease.length) this.version += '-' + this.prerelease.join('.');
	  return this.version;
	};
	
	SemVer.prototype.toString = function () {
	  return this.version;
	};
	
	SemVer.prototype.compare = function (other) {
	  debug('SemVer.compare', this.version, this.loose, other);
	  if (!(other instanceof SemVer)) other = new SemVer(other, this.loose);
	
	  return this.compareMain(other) || this.comparePre(other);
	};
	
	SemVer.prototype.compareMain = function (other) {
	  if (!(other instanceof SemVer)) other = new SemVer(other, this.loose);
	
	  return compareIdentifiers(this.major, other.major) || compareIdentifiers(this.minor, other.minor) || compareIdentifiers(this.patch, other.patch);
	};
	
	SemVer.prototype.comparePre = function (other) {
	  if (!(other instanceof SemVer)) other = new SemVer(other, this.loose);
	
	  // NOT having a prerelease is > having one
	  if (this.prerelease.length && !other.prerelease.length) return -1;else if (!this.prerelease.length && other.prerelease.length) return 1;else if (!this.prerelease.length && !other.prerelease.length) return 0;
	
	  var i = 0;
	  do {
	    var a = this.prerelease[i];
	    var b = other.prerelease[i];
	    debug('prerelease compare', i, a, b);
	    if (a === undefined && b === undefined) return 0;else if (b === undefined) return 1;else if (a === undefined) return -1;else if (a === b) continue;else return compareIdentifiers(a, b);
	  } while (++i);
	};
	
	// preminor will bump the version up to the next minor release, and immediately
	// down to pre-release. premajor and prepatch work the same way.
	SemVer.prototype.inc = function (release, identifier) {
	  switch (release) {
	    case 'premajor':
	      this.prerelease.length = 0;
	      this.patch = 0;
	      this.minor = 0;
	      this.major++;
	      this.inc('pre', identifier);
	      break;
	    case 'preminor':
	      this.prerelease.length = 0;
	      this.patch = 0;
	      this.minor++;
	      this.inc('pre', identifier);
	      break;
	    case 'prepatch':
	      // If this is already a prerelease, it will bump to the next version
	      // drop any prereleases that might already exist, since they are not
	      // relevant at this point.
	      this.prerelease.length = 0;
	      this.inc('patch', identifier);
	      this.inc('pre', identifier);
	      break;
	    // If the input is a non-prerelease version, this acts the same as
	    // prepatch.
	    case 'prerelease':
	      if (this.prerelease.length === 0) this.inc('patch', identifier);
	      this.inc('pre', identifier);
	      break;
	
	    case 'major':
	      // If this is a pre-major version, bump up to the same major version.
	      // Otherwise increment major.
	      // 1.0.0-5 bumps to 1.0.0
	      // 1.1.0 bumps to 2.0.0
	      if (this.minor !== 0 || this.patch !== 0 || this.prerelease.length === 0) this.major++;
	      this.minor = 0;
	      this.patch = 0;
	      this.prerelease = [];
	      break;
	    case 'minor':
	      // If this is a pre-minor version, bump up to the same minor version.
	      // Otherwise increment minor.
	      // 1.2.0-5 bumps to 1.2.0
	      // 1.2.1 bumps to 1.3.0
	      if (this.patch !== 0 || this.prerelease.length === 0) this.minor++;
	      this.patch = 0;
	      this.prerelease = [];
	      break;
	    case 'patch':
	      // If this is not a pre-release version, it will increment the patch.
	      // If it is a pre-release it will bump up to the same patch version.
	      // 1.2.0-5 patches to 1.2.0
	      // 1.2.0 patches to 1.2.1
	      if (this.prerelease.length === 0) this.patch++;
	      this.prerelease = [];
	      break;
	    // This probably shouldn't be used publicly.
	    // 1.0.0 "pre" would become 1.0.0-0 which is the wrong direction.
	    case 'pre':
	      if (this.prerelease.length === 0) this.prerelease = [0];else {
	        var i = this.prerelease.length;
	        while (--i >= 0) {
	          if (typeof this.prerelease[i] === 'number') {
	            this.prerelease[i]++;
	            i = -2;
	          }
	        }
	        if (i === -1) // didn't increment anything
	          this.prerelease.push(0);
	      }
	      if (identifier) {
	        // 1.2.0-beta.1 bumps to 1.2.0-beta.2,
	        // 1.2.0-beta.fooblz or 1.2.0-beta bumps to 1.2.0-beta.0
	        if (this.prerelease[0] === identifier) {
	          if (isNaN(this.prerelease[1])) this.prerelease = [identifier, 0];
	        } else this.prerelease = [identifier, 0];
	      }
	      break;
	
	    default:
	      throw new Error('invalid increment argument: ' + release);
	  }
	  this.format();
	  this.raw = this.version;
	  return this;
	};
	
	exports.inc = inc;
	function inc(version, release, loose, identifier) {
	  if (typeof loose === 'string') {
	    identifier = loose;
	    loose = undefined;
	  }
	
	  try {
	    return new SemVer(version, loose).inc(release, identifier).version;
	  } catch (er) {
	    return null;
	  }
	}
	
	exports.diff = diff;
	function diff(version1, version2) {
	  if (eq(version1, version2)) {
	    return null;
	  } else {
	    var v1 = parse(version1);
	    var v2 = parse(version2);
	    if (v1.prerelease.length || v2.prerelease.length) {
	      for (var key in v1) {
	        if (key === 'major' || key === 'minor' || key === 'patch') {
	          if (v1[key] !== v2[key]) {
	            return 'pre' + key;
	          }
	        }
	      }
	      return 'prerelease';
	    }
	    for (var key in v1) {
	      if (key === 'major' || key === 'minor' || key === 'patch') {
	        if (v1[key] !== v2[key]) {
	          return key;
	        }
	      }
	    }
	  }
	}
	
	exports.compareIdentifiers = compareIdentifiers;
	
	var numeric = /^[0-9]+$/;
	function compareIdentifiers(a, b) {
	  var anum = numeric.test(a);
	  var bnum = numeric.test(b);
	
	  if (anum && bnum) {
	    a = +a;
	    b = +b;
	  }
	
	  return anum && !bnum ? -1 : bnum && !anum ? 1 : a < b ? -1 : a > b ? 1 : 0;
	}
	
	exports.rcompareIdentifiers = rcompareIdentifiers;
	function rcompareIdentifiers(a, b) {
	  return compareIdentifiers(b, a);
	}
	
	exports.major = major;
	function major(a, loose) {
	  return new SemVer(a, loose).major;
	}
	
	exports.minor = minor;
	function minor(a, loose) {
	  return new SemVer(a, loose).minor;
	}
	
	exports.patch = patch;
	function patch(a, loose) {
	  return new SemVer(a, loose).patch;
	}
	
	exports.compare = compare;
	function compare(a, b, loose) {
	  return new SemVer(a, loose).compare(b);
	}
	
	exports.compareLoose = compareLoose;
	function compareLoose(a, b) {
	  return compare(a, b, true);
	}
	
	exports.rcompare = rcompare;
	function rcompare(a, b, loose) {
	  return compare(b, a, loose);
	}
	
	exports.sort = sort;
	function sort(list, loose) {
	  return list.sort(function (a, b) {
	    return exports.compare(a, b, loose);
	  });
	}
	
	exports.rsort = rsort;
	function rsort(list, loose) {
	  return list.sort(function (a, b) {
	    return exports.rcompare(a, b, loose);
	  });
	}
	
	exports.gt = gt;
	function gt(a, b, loose) {
	  return compare(a, b, loose) > 0;
	}
	
	exports.lt = lt;
	function lt(a, b, loose) {
	  return compare(a, b, loose) < 0;
	}
	
	exports.eq = eq;
	function eq(a, b, loose) {
	  return compare(a, b, loose) === 0;
	}
	
	exports.neq = neq;
	function neq(a, b, loose) {
	  return compare(a, b, loose) !== 0;
	}
	
	exports.gte = gte;
	function gte(a, b, loose) {
	  return compare(a, b, loose) >= 0;
	}
	
	exports.lte = lte;
	function lte(a, b, loose) {
	  return compare(a, b, loose) <= 0;
	}
	
	exports.cmp = cmp;
	function cmp(a, op, b, loose) {
	  var ret;
	  switch (op) {
	    case '===':
	      if ((typeof a === 'undefined' ? 'undefined' : _typeof(a)) === 'object') a = a.version;
	      if ((typeof b === 'undefined' ? 'undefined' : _typeof(b)) === 'object') b = b.version;
	      ret = a === b;
	      break;
	    case '!==':
	      if ((typeof a === 'undefined' ? 'undefined' : _typeof(a)) === 'object') a = a.version;
	      if ((typeof b === 'undefined' ? 'undefined' : _typeof(b)) === 'object') b = b.version;
	      ret = a !== b;
	      break;
	    case '':case '=':case '==':
	      ret = eq(a, b, loose);break;
	    case '!=':
	      ret = neq(a, b, loose);break;
	    case '>':
	      ret = gt(a, b, loose);break;
	    case '>=':
	      ret = gte(a, b, loose);break;
	    case '<':
	      ret = lt(a, b, loose);break;
	    case '<=':
	      ret = lte(a, b, loose);break;
	    default:
	      throw new TypeError('Invalid operator: ' + op);
	  }
	  return ret;
	}
	
	exports.Comparator = Comparator;
	function Comparator(comp, loose) {
	  if (comp instanceof Comparator) {
	    if (comp.loose === loose) return comp;else comp = comp.value;
	  }
	
	  if (!(this instanceof Comparator)) return new Comparator(comp, loose);
	
	  debug('comparator', comp, loose);
	  this.loose = loose;
	  this.parse(comp);
	
	  if (this.semver === ANY) this.value = '';else this.value = this.operator + this.semver.version;
	
	  debug('comp', this);
	}
	
	var ANY = {};
	Comparator.prototype.parse = function (comp) {
	  var r = this.loose ? re[COMPARATORLOOSE] : re[COMPARATOR];
	  var m = comp.match(r);
	
	  if (!m) throw new TypeError('Invalid comparator: ' + comp);
	
	  this.operator = m[1];
	  if (this.operator === '=') this.operator = '';
	
	  // if it literally is just '>' or '' then allow anything.
	  if (!m[2]) this.semver = ANY;else this.semver = new SemVer(m[2], this.loose);
	};
	
	Comparator.prototype.toString = function () {
	  return this.value;
	};
	
	Comparator.prototype.test = function (version) {
	  debug('Comparator.test', version, this.loose);
	
	  if (this.semver === ANY) return true;
	
	  if (typeof version === 'string') version = new SemVer(version, this.loose);
	
	  return cmp(version, this.operator, this.semver, this.loose);
	};
	
	exports.Range = Range;
	function Range(range, loose) {
	  if (range instanceof Range && range.loose === loose) return range;
	
	  if (!(this instanceof Range)) return new Range(range, loose);
	
	  this.loose = loose;
	
	  // First, split based on boolean or ||
	  this.raw = range;
	  this.set = range.split(/\s*\|\|\s*/).map(function (range) {
	    return this.parseRange(range.trim());
	  }, this).filter(function (c) {
	    // throw out any that are not relevant for whatever reason
	    return c.length;
	  });
	
	  if (!this.set.length) {
	    throw new TypeError('Invalid SemVer Range: ' + range);
	  }
	
	  this.format();
	}
	
	Range.prototype.format = function () {
	  this.range = this.set.map(function (comps) {
	    return comps.join(' ').trim();
	  }).join('||').trim();
	  return this.range;
	};
	
	Range.prototype.toString = function () {
	  return this.range;
	};
	
	Range.prototype.parseRange = function (range) {
	  var loose = this.loose;
	  range = range.trim();
	  debug('range', range, loose);
	  // `1.2.3 - 1.2.4` => `>=1.2.3 <=1.2.4`
	  var hr = loose ? re[HYPHENRANGELOOSE] : re[HYPHENRANGE];
	  range = range.replace(hr, hyphenReplace);
	  debug('hyphen replace', range);
	  // `> 1.2.3 < 1.2.5` => `>1.2.3 <1.2.5`
	  range = range.replace(re[COMPARATORTRIM], comparatorTrimReplace);
	  debug('comparator trim', range, re[COMPARATORTRIM]);
	
	  // `~ 1.2.3` => `~1.2.3`
	  range = range.replace(re[TILDETRIM], tildeTrimReplace);
	
	  // `^ 1.2.3` => `^1.2.3`
	  range = range.replace(re[CARETTRIM], caretTrimReplace);
	
	  // normalize spaces
	  range = range.split(/\s+/).join(' ');
	
	  // At this point, the range is completely trimmed and
	  // ready to be split into comparators.
	
	  var compRe = loose ? re[COMPARATORLOOSE] : re[COMPARATOR];
	  var set = range.split(' ').map(function (comp) {
	    return parseComparator(comp, loose);
	  }).join(' ').split(/\s+/);
	  if (this.loose) {
	    // in loose mode, throw out any that are not valid comparators
	    set = set.filter(function (comp) {
	      return !!comp.match(compRe);
	    });
	  }
	  set = set.map(function (comp) {
	    return new Comparator(comp, loose);
	  });
	
	  return set;
	};
	
	// Mostly just for testing and legacy API reasons
	exports.toComparators = toComparators;
	function toComparators(range, loose) {
	  return new Range(range, loose).set.map(function (comp) {
	    return comp.map(function (c) {
	      return c.value;
	    }).join(' ').trim().split(' ');
	  });
	}
	
	// comprised of xranges, tildes, stars, and gtlt's at this point.
	// already replaced the hyphen ranges
	// turn into a set of JUST comparators.
	function parseComparator(comp, loose) {
	  debug('comp', comp);
	  comp = replaceCarets(comp, loose);
	  debug('caret', comp);
	  comp = replaceTildes(comp, loose);
	  debug('tildes', comp);
	  comp = replaceXRanges(comp, loose);
	  debug('xrange', comp);
	  comp = replaceStars(comp, loose);
	  debug('stars', comp);
	  return comp;
	}
	
	function isX(id) {
	  return !id || id.toLowerCase() === 'x' || id === '*';
	}
	
	// ~, ~> --> * (any, kinda silly)
	// ~2, ~2.x, ~2.x.x, ~>2, ~>2.x ~>2.x.x --> >=2.0.0 <3.0.0
	// ~2.0, ~2.0.x, ~>2.0, ~>2.0.x --> >=2.0.0 <2.1.0
	// ~1.2, ~1.2.x, ~>1.2, ~>1.2.x --> >=1.2.0 <1.3.0
	// ~1.2.3, ~>1.2.3 --> >=1.2.3 <1.3.0
	// ~1.2.0, ~>1.2.0 --> >=1.2.0 <1.3.0
	function replaceTildes(comp, loose) {
	  return comp.trim().split(/\s+/).map(function (comp) {
	    return replaceTilde(comp, loose);
	  }).join(' ');
	}
	
	function replaceTilde(comp, loose) {
	  var r = loose ? re[TILDELOOSE] : re[TILDE];
	  return comp.replace(r, function (_, M, m, p, pr) {
	    debug('tilde', comp, _, M, m, p, pr);
	    var ret;
	
	    if (isX(M)) ret = '';else if (isX(m)) ret = '>=' + M + '.0.0 <' + (+M + 1) + '.0.0';else if (isX(p))
	      // ~1.2 == >=1.2.0 <1.3.0
	      ret = '>=' + M + '.' + m + '.0 <' + M + '.' + (+m + 1) + '.0';else if (pr) {
	      debug('replaceTilde pr', pr);
	      if (pr.charAt(0) !== '-') pr = '-' + pr;
	      ret = '>=' + M + '.' + m + '.' + p + pr + ' <' + M + '.' + (+m + 1) + '.0';
	    } else
	      // ~1.2.3 == >=1.2.3 <1.3.0
	      ret = '>=' + M + '.' + m + '.' + p + ' <' + M + '.' + (+m + 1) + '.0';
	
	    debug('tilde return', ret);
	    return ret;
	  });
	}
	
	// ^ --> * (any, kinda silly)
	// ^2, ^2.x, ^2.x.x --> >=2.0.0 <3.0.0
	// ^2.0, ^2.0.x --> >=2.0.0 <3.0.0
	// ^1.2, ^1.2.x --> >=1.2.0 <2.0.0
	// ^1.2.3 --> >=1.2.3 <2.0.0
	// ^1.2.0 --> >=1.2.0 <2.0.0
	function replaceCarets(comp, loose) {
	  return comp.trim().split(/\s+/).map(function (comp) {
	    return replaceCaret(comp, loose);
	  }).join(' ');
	}
	
	function replaceCaret(comp, loose) {
	  debug('caret', comp, loose);
	  var r = loose ? re[CARETLOOSE] : re[CARET];
	  return comp.replace(r, function (_, M, m, p, pr) {
	    debug('caret', comp, _, M, m, p, pr);
	    var ret;
	
	    if (isX(M)) ret = '';else if (isX(m)) ret = '>=' + M + '.0.0 <' + (+M + 1) + '.0.0';else if (isX(p)) {
	      if (M === '0') ret = '>=' + M + '.' + m + '.0 <' + M + '.' + (+m + 1) + '.0';else ret = '>=' + M + '.' + m + '.0 <' + (+M + 1) + '.0.0';
	    } else if (pr) {
	      debug('replaceCaret pr', pr);
	      if (pr.charAt(0) !== '-') pr = '-' + pr;
	      if (M === '0') {
	        if (m === '0') ret = '>=' + M + '.' + m + '.' + p + pr + ' <' + M + '.' + m + '.' + (+p + 1);else ret = '>=' + M + '.' + m + '.' + p + pr + ' <' + M + '.' + (+m + 1) + '.0';
	      } else ret = '>=' + M + '.' + m + '.' + p + pr + ' <' + (+M + 1) + '.0.0';
	    } else {
	      debug('no pr');
	      if (M === '0') {
	        if (m === '0') ret = '>=' + M + '.' + m + '.' + p + ' <' + M + '.' + m + '.' + (+p + 1);else ret = '>=' + M + '.' + m + '.' + p + ' <' + M + '.' + (+m + 1) + '.0';
	      } else ret = '>=' + M + '.' + m + '.' + p + ' <' + (+M + 1) + '.0.0';
	    }
	
	    debug('caret return', ret);
	    return ret;
	  });
	}
	
	function replaceXRanges(comp, loose) {
	  debug('replaceXRanges', comp, loose);
	  return comp.split(/\s+/).map(function (comp) {
	    return replaceXRange(comp, loose);
	  }).join(' ');
	}
	
	function replaceXRange(comp, loose) {
	  comp = comp.trim();
	  var r = loose ? re[XRANGELOOSE] : re[XRANGE];
	  return comp.replace(r, function (ret, gtlt, M, m, p, pr) {
	    debug('xRange', comp, ret, gtlt, M, m, p, pr);
	    var xM = isX(M);
	    var xm = xM || isX(m);
	    var xp = xm || isX(p);
	    var anyX = xp;
	
	    if (gtlt === '=' && anyX) gtlt = '';
	
	    if (xM) {
	      if (gtlt === '>' || gtlt === '<') {
	        // nothing is allowed
	        ret = '<0.0.0';
	      } else {
	        // nothing is forbidden
	        ret = '*';
	      }
	    } else if (gtlt && anyX) {
	      // replace X with 0
	      if (xm) m = 0;
	      if (xp) p = 0;
	
	      if (gtlt === '>') {
	        // >1 => >=2.0.0
	        // >1.2 => >=1.3.0
	        // >1.2.3 => >= 1.2.4
	        gtlt = '>=';
	        if (xm) {
	          M = +M + 1;
	          m = 0;
	          p = 0;
	        } else if (xp) {
	          m = +m + 1;
	          p = 0;
	        }
	      } else if (gtlt === '<=') {
	        // <=0.7.x is actually <0.8.0, since any 0.7.x should
	        // pass.  Similarly, <=7.x is actually <8.0.0, etc.
	        gtlt = '<';
	        if (xm) M = +M + 1;else m = +m + 1;
	      }
	
	      ret = gtlt + M + '.' + m + '.' + p;
	    } else if (xm) {
	      ret = '>=' + M + '.0.0 <' + (+M + 1) + '.0.0';
	    } else if (xp) {
	      ret = '>=' + M + '.' + m + '.0 <' + M + '.' + (+m + 1) + '.0';
	    }
	
	    debug('xRange return', ret);
	
	    return ret;
	  });
	}
	
	// Because * is AND-ed with everything else in the comparator,
	// and '' means "any version", just remove the *s entirely.
	function replaceStars(comp, loose) {
	  debug('replaceStars', comp, loose);
	  // Looseness is ignored here.  star is always as loose as it gets!
	  return comp.trim().replace(re[STAR], '');
	}
	
	// This function is passed to string.replace(re[HYPHENRANGE])
	// M, m, patch, prerelease, build
	// 1.2 - 3.4.5 => >=1.2.0 <=3.4.5
	// 1.2.3 - 3.4 => >=1.2.0 <3.5.0 Any 3.4.x will do
	// 1.2 - 3.4 => >=1.2.0 <3.5.0
	function hyphenReplace($0, from, fM, fm, fp, fpr, fb, to, tM, tm, tp, tpr, tb) {
	
	  if (isX(fM)) from = '';else if (isX(fm)) from = '>=' + fM + '.0.0';else if (isX(fp)) from = '>=' + fM + '.' + fm + '.0';else from = '>=' + from;
	
	  if (isX(tM)) to = '';else if (isX(tm)) to = '<' + (+tM + 1) + '.0.0';else if (isX(tp)) to = '<' + tM + '.' + (+tm + 1) + '.0';else if (tpr) to = '<=' + tM + '.' + tm + '.' + tp + '-' + tpr;else to = '<=' + to;
	
	  return (from + ' ' + to).trim();
	}
	
	// if ANY of the sets match ALL of its comparators, then pass
	Range.prototype.test = function (version) {
	  if (!version) return false;
	
	  if (typeof version === 'string') version = new SemVer(version, this.loose);
	
	  for (var i = 0; i < this.set.length; i++) {
	    if (testSet(this.set[i], version)) return true;
	  }
	  return false;
	};
	
	function testSet(set, version) {
	  for (var i = 0; i < set.length; i++) {
	    if (!set[i].test(version)) return false;
	  }
	
	  if (version.prerelease.length) {
	    // Find the set of versions that are allowed to have prereleases
	    // For example, ^1.2.3-pr.1 desugars to >=1.2.3-pr.1 <2.0.0
	    // That should allow `1.2.3-pr.2` to pass.
	    // However, `1.2.4-alpha.notready` should NOT be allowed,
	    // even though it's within the range set by the comparators.
	    for (var i = 0; i < set.length; i++) {
	      debug(set[i].semver);
	      if (set[i].semver === ANY) continue;
	
	      if (set[i].semver.prerelease.length > 0) {
	        var allowed = set[i].semver;
	        if (allowed.major === version.major && allowed.minor === version.minor && allowed.patch === version.patch) return true;
	      }
	    }
	
	    // Version has a -pre, but it's not one of the ones we like.
	    return false;
	  }
	
	  return true;
	}
	
	exports.satisfies = satisfies;
	function satisfies(version, range, loose) {
	  try {
	    range = new Range(range, loose);
	  } catch (er) {
	    return false;
	  }
	  return range.test(version);
	}
	
	exports.maxSatisfying = maxSatisfying;
	function maxSatisfying(versions, range, loose) {
	  return versions.filter(function (version) {
	    return satisfies(version, range, loose);
	  }).sort(function (a, b) {
	    return rcompare(a, b, loose);
	  })[0] || null;
	}
	
	exports.minSatisfying = minSatisfying;
	function minSatisfying(versions, range, loose) {
	  return versions.filter(function (version) {
	    return satisfies(version, range, loose);
	  }).sort(function (a, b) {
	    return compare(a, b, loose);
	  })[0] || null;
	}
	
	exports.validRange = validRange;
	function validRange(range, loose) {
	  try {
	    // Return '*' instead of '' so that truthiness works.
	    // This will throw if it's invalid anyway
	    return new Range(range, loose).range || '*';
	  } catch (er) {
	    return null;
	  }
	}
	
	// Determine if version is less than all the versions possible in the range
	exports.ltr = ltr;
	function ltr(version, range, loose) {
	  return outside(version, range, '<', loose);
	}
	
	// Determine if version is greater than all the versions possible in the range.
	exports.gtr = gtr;
	function gtr(version, range, loose) {
	  return outside(version, range, '>', loose);
	}
	
	exports.outside = outside;
	function outside(version, range, hilo, loose) {
	  version = new SemVer(version, loose);
	  range = new Range(range, loose);
	
	  var gtfn, ltefn, ltfn, comp, ecomp;
	  switch (hilo) {
	    case '>':
	      gtfn = gt;
	      ltefn = lte;
	      ltfn = lt;
	      comp = '>';
	      ecomp = '>=';
	      break;
	    case '<':
	      gtfn = lt;
	      ltefn = gte;
	      ltfn = gt;
	      comp = '<';
	      ecomp = '<=';
	      break;
	    default:
	      throw new TypeError('Must provide a hilo val of "<" or ">"');
	  }
	
	  // If it satisifes the range it is not outside
	  if (satisfies(version, range, loose)) {
	    return false;
	  }
	
	  // From now on, variable terms are as if we're in "gtr" mode.
	  // but note that everything is flipped for the "ltr" function.
	
	  for (var i = 0; i < range.set.length; ++i) {
	    var comparators = range.set[i];
	
	    var high = null;
	    var low = null;
	
	    comparators.forEach(function (comparator) {
	      if (comparator.semver === ANY) {
	        comparator = new Comparator('>=0.0.0');
	      }
	      high = high || comparator;
	      low = low || comparator;
	      if (gtfn(comparator.semver, high.semver, loose)) {
	        high = comparator;
	      } else if (ltfn(comparator.semver, low.semver, loose)) {
	        low = comparator;
	      }
	    });
	
	    // If the edge version comparator has a operator then our version
	    // isn't outside it
	    if (high.operator === comp || high.operator === ecomp) {
	      return false;
	    }
	
	    // If the lowest version comparator has an operator and our version
	    // is less than it then it isn't higher than the range
	    if ((!low.operator || low.operator === comp) && ltefn(version, low.semver)) {
	      return false;
	    } else if (low.operator === ecomp && ltfn(version, low.semver)) {
	      return false;
	    }
	  }
	  return true;
	}
	
	exports.prerelease = prerelease;
	function prerelease(version, loose) {
	  var parsed = parse(version, loose);
	  return parsed && parsed.prerelease.length ? parsed.prerelease : null;
	}
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ }),
/* 350 */
/***/ (function(module, exports, __webpack_require__) {

	var map = {
		"./compile": 352,
		"./compile.js": 352,
		"./handle_gyp_opts": 587,
		"./handle_gyp_opts.js": 587,
		"./s3_setup": 590,
		"./s3_setup.js": 590,
		"./versioning": 348,
		"./versioning.js": 348
	};
	function webpackContext(req) {
		return __webpack_require__(webpackContextResolve(req));
	};
	function webpackContextResolve(req) {
		return map[req] || (function() { throw new Error("Cannot find module '" + req + "'.") }());
	};
	webpackContext.keys = function webpackContextKeys() {
		return Object.keys(map);
	};
	webpackContext.resolve = webpackContextResolve;
	module.exports = webpackContext;
	webpackContext.id = 350;


/***/ }),
/* 351 */,
/* 352 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {"use strict";
	
	module.exports = exports;
	
	var fs = __webpack_require__(!(function webpackMissingModule() { var e = new Error("Cannot find module \"fs\""); e.code = 'MODULE_NOT_FOUND'; throw e; }()));
	var path = __webpack_require__(270);
	var win = process.platform == 'win32';
	var existsSync = fs.existsSync || path.existsSync;
	var cp = __webpack_require__(!(function webpackMissingModule() { var e = new Error("Cannot find module \"child_process\""); e.code = 'MODULE_NOT_FOUND'; throw e; }()));
	
	// try to build up the complete path to node-gyp
	/* priority:
	  - node-gyp on ENV:npm_config_node_gyp (https://github.com/npm/npm/pull/4887)
	  - node-gyp on NODE_PATH
	  - node-gyp inside npm on NODE_PATH (ignore on iojs)
	  - node-gyp inside npm beside node exe
	*/
	function which_node_gyp() {
	    var node_gyp_bin;
	    if (process.env.npm_config_node_gyp) {
	        try {
	            node_gyp_bin = process.env.npm_config_node_gyp;
	            if (existsSync(node_gyp_bin)) {
	                return node_gyp_bin;
	            }
	        } catch (err) {}
	    }
	    try {
	        var node_gyp_main = /*require.resolve*/(353);
	        node_gyp_bin = path.join(path.dirname(path.dirname(node_gyp_main)), 'bin/node-gyp.js');
	        if (existsSync(node_gyp_bin)) {
	            return node_gyp_bin;
	        }
	    } catch (err) {}
	    if (process.execPath.indexOf('iojs') === -1) {
	        try {
	            var npm_main = /*require.resolve*/(!(function webpackMissingModule() { var e = new Error("Cannot find module \"npm\""); e.code = 'MODULE_NOT_FOUND'; throw e; }()));
	            node_gyp_bin = path.join(path.dirname(path.dirname(npm_main)), 'node_modules/node-gyp/bin/node-gyp.js');
	            if (existsSync(node_gyp_bin)) {
	                return node_gyp_bin;
	            }
	        } catch (err) {}
	    }
	    var npm_base = path.join(path.dirname(path.dirname(process.execPath)), 'lib/node_modules/npm/');
	    node_gyp_bin = path.join(npm_base, 'node_modules/node-gyp/bin/node-gyp.js');
	    if (existsSync(node_gyp_bin)) {
	        return node_gyp_bin;
	    }
	}
	
	module.exports.run_gyp = function (args, opts, callback) {
	    var shell_cmd = '';
	    var cmd_args = [];
	    if (opts.runtime && opts.runtime == 'node-webkit') {
	        shell_cmd = 'nw-gyp';
	        if (win) shell_cmd += '.cmd';
	    } else {
	        var node_gyp_path = which_node_gyp();
	        if (node_gyp_path) {
	            shell_cmd = process.execPath;
	            cmd_args.push(node_gyp_path);
	        } else {
	            shell_cmd = 'node-gyp';
	            if (win) shell_cmd += '.cmd';
	        }
	    }
	    var final_args = cmd_args.concat(args);
	    var cmd = cp.spawn(shell_cmd, final_args, { cwd: undefined, env: process.env, stdio: [0, 1, 2] });
	    cmd.on('error', function (err) {
	        if (err) {
	            return callback(new Error("Failed to execute '" + shell_cmd + ' ' + final_args.join(' ') + "' (" + err + ")"));
	        }
	        callback(null, opts);
	    });
	    cmd.on('close', function (code) {
	        if (code && code !== 0) {
	            return callback(new Error("Failed to execute '" + shell_cmd + ' ' + final_args.join(' ') + "' (" + code + ")"));
	        }
	        callback(null, opts);
	    });
	};
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ }),
/* 353 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process, __dirname) {'use strict';
	
	/**
	 * Module exports.
	 */
	
	module.exports = exports = gyp;
	
	/**
	 * Module dependencies.
	 */
	
	var fs = __webpack_require__(354),
	    path = __webpack_require__(270),
	    nopt = __webpack_require__(359),
	    log = __webpack_require__(310),
	    child_process = __webpack_require__(!(function webpackMissingModule() { var e = new Error("Cannot find module \"child_process\""); e.code = 'MODULE_NOT_FOUND'; throw e; }())),
	    EE = __webpack_require__(283).EventEmitter,
	    inherits = __webpack_require__(271).inherits,
	    commands = [
	// Module build commands
	'build', 'clean', 'configure', 'rebuild'
	// Development Header File management commands
	, 'install', 'list', 'remove'],
	    aliases = {
	  'ls': 'list',
	  'rm': 'remove'
	};
	
	// differentiate node-gyp's logs from npm's
	log.heading = 'gyp';
	
	/**
	 * The `gyp` function.
	 */
	
	function gyp() {
	  return new Gyp();
	}
	
	function Gyp() {
	  var self = this;
	
	  this.devDir = '';
	  this.commands = {};
	
	  commands.forEach(function (command) {
	    self.commands[command] = function (argv, callback) {
	      log.verbose('command', command, argv);
	      return __webpack_require__(360)("./" + command)(self, argv, callback);
	    };
	  });
	}
	inherits(Gyp, EE);
	exports.Gyp = Gyp;
	var proto = Gyp.prototype;
	
	/**
	 * Export the contents of the package.json.
	 */
	
	proto.package = __webpack_require__(!(function webpackMissingModule() { var e = new Error("Cannot find module \"../package\""); e.code = 'MODULE_NOT_FOUND'; throw e; }()));
	
	/**
	 * nopt configuration definitions
	 */
	
	proto.configDefs = {
	  help: Boolean // everywhere
	  , arch: String // 'configure'
	  , cafile: String // 'install'
	  , debug: Boolean // 'build'
	  , directory: String // bin
	  , make: String // 'build'
	  , msvs_version: String // 'configure'
	  , ensure: Boolean // 'install'
	  , solution: String // 'build' (windows only)
	  , proxy: String // 'install'
	  , devdir: String // everywhere
	  , nodedir: String // 'configure'
	  , loglevel: String // everywhere
	  , python: String // 'configure'
	  , 'dist-url': String // 'install'
	  , 'tarball': String // 'install'
	  , jobs: String // 'build'
	  , thin: String // 'configure'
	};
	
	/**
	 * nopt shorthands
	 */
	
	proto.shorthands = {
	  release: '--no-debug',
	  C: '--directory',
	  debug: '--debug',
	  j: '--jobs',
	  silly: '--loglevel=silly',
	  verbose: '--loglevel=verbose',
	  silent: '--loglevel=silent'
	};
	
	/**
	 * expose the command aliases for the bin file to use.
	 */
	
	proto.aliases = aliases;
	
	/**
	 * Parses the given argv array and sets the 'opts',
	 * 'argv' and 'command' properties.
	 */
	
	proto.parseArgv = function parseOpts(argv) {
	  this.opts = nopt(this.configDefs, this.shorthands, argv);
	  this.argv = this.opts.argv.remain.slice();
	
	  var commands = this.todo = [];
	
	  // create a copy of the argv array with aliases mapped
	  argv = this.argv.map(function (arg) {
	    // is this an alias?
	    if (arg in this.aliases) {
	      arg = this.aliases[arg];
	    }
	    return arg;
	  }, this);
	
	  // process the mapped args into "command" objects ("name" and "args" props)
	  argv.slice().forEach(function (arg) {
	    if (arg in this.commands) {
	      var args = argv.splice(0, argv.indexOf(arg));
	      argv.shift();
	      if (commands.length > 0) {
	        commands[commands.length - 1].args = args;
	      }
	      commands.push({ name: arg, args: [] });
	    }
	  }, this);
	  if (commands.length > 0) {
	    commands[commands.length - 1].args = argv.splice(0);
	  }
	
	  // support for inheriting config env variables from npm
	  var npm_config_prefix = 'npm_config_';
	  Object.keys(process.env).forEach(function (name) {
	    if (name.indexOf(npm_config_prefix) !== 0) return;
	    var val = process.env[name];
	    if (name === npm_config_prefix + 'loglevel') {
	      log.level = val;
	    } else {
	      // add the user-defined options to the config
	      name = name.substring(npm_config_prefix.length);
	      // gyp@741b7f1 enters an infinite loop when it encounters
	      // zero-length options so ensure those don't get through.
	      if (name) this.opts[name] = val;
	    }
	  }, this);
	
	  if (this.opts.loglevel) {
	    log.level = this.opts.loglevel;
	  }
	  log.resume();
	};
	
	/**
	 * Spawns a child process and emits a 'spawn' event.
	 */
	
	proto.spawn = function spawn(command, args, opts) {
	  if (!opts) opts = {};
	  if (!opts.silent && !opts.stdio) {
	    opts.stdio = [0, 1, 2];
	  }
	  var cp = child_process.spawn(command, args, opts);
	  log.info('spawn', command);
	  log.info('spawn args', args);
	  return cp;
	};
	
	/**
	 * Returns the usage instructions for node-gyp.
	 */
	
	proto.usage = function usage() {
	  var str = ['', '  Usage: node-gyp <command> [options]', '', '  where <command> is one of:', commands.map(function (c) {
	    return '    - ' + c + ' - ' + __webpack_require__(360)("./" + c).usage;
	  }).join('\n'), '', 'node-gyp@' + this.version + '  ' + path.resolve(__dirname, '..'), 'node@' + process.versions.node].join('\n');
	  return str;
	};
	
	/**
	 * Version number getter.
	 */
	
	Object.defineProperty(proto, 'version', {
	  get: function get() {
	    return this.package.version;
	  },
	  enumerable: true
	});
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3), "/"))

/***/ }),
/* 354 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';
	
	var fs = __webpack_require__(!(function webpackMissingModule() { var e = new Error("Cannot find module \"fs\""); e.code = 'MODULE_NOT_FOUND'; throw e; }()));
	var polyfills = __webpack_require__(355);
	var legacy = __webpack_require__(358);
	var queue = [];
	
	var util = __webpack_require__(271);
	
	function noop() {}
	
	var debug = noop;
	if (util.debuglog) debug = util.debuglog('gfs4');else if (/\bgfs4\b/i.test(process.env.NODE_DEBUG || '')) debug = function debug() {
	  var m = util.format.apply(util, arguments);
	  m = 'GFS4: ' + m.split(/\n/).join('\nGFS4: ');
	  console.error(m);
	};
	
	if (/\bgfs4\b/i.test(process.env.NODE_DEBUG || '')) {
	  process.on('exit', function () {
	    debug(queue);
	    __webpack_require__(336).equal(queue.length, 0);
	  });
	}
	
	module.exports = patch(__webpack_require__(356));
	if (process.env.TEST_GRACEFUL_FS_GLOBAL_PATCH) {
	  module.exports = patch(fs);
	}
	
	// Always patch fs.close/closeSync, because we want to
	// retry() whenever a close happens *anywhere* in the program.
	// This is essential when multiple graceful-fs instances are
	// in play at the same time.
	module.exports.close = fs.close = function (fs$close) {
	  return function (fd, cb) {
	    return fs$close.call(fs, fd, function (err) {
	      if (!err) retry();
	
	      if (typeof cb === 'function') cb.apply(this, arguments);
	    });
	  };
	}(fs.close);
	
	module.exports.closeSync = fs.closeSync = function (fs$closeSync) {
	  return function (fd) {
	    // Note that graceful-fs also retries when fs.closeSync() fails.
	    // Looks like a bug to me, although it's probably a harmless one.
	    var rval = fs$closeSync.apply(fs, arguments);
	    retry();
	    return rval;
	  };
	}(fs.closeSync);
	
	function patch(fs) {
	  // Everything that references the open() function needs to be in here
	  polyfills(fs);
	  fs.gracefulify = patch;
	  fs.FileReadStream = ReadStream; // Legacy name.
	  fs.FileWriteStream = WriteStream; // Legacy name.
	  fs.createReadStream = createReadStream;
	  fs.createWriteStream = createWriteStream;
	  var fs$readFile = fs.readFile;
	  fs.readFile = readFile;
	  function readFile(path, options, cb) {
	    if (typeof options === 'function') cb = options, options = null;
	
	    return go$readFile(path, options, cb);
	
	    function go$readFile(path, options, cb) {
	      return fs$readFile(path, options, function (err) {
	        if (err && (err.code === 'EMFILE' || err.code === 'ENFILE')) enqueue([go$readFile, [path, options, cb]]);else {
	          if (typeof cb === 'function') cb.apply(this, arguments);
	          retry();
	        }
	      });
	    }
	  }
	
	  var fs$writeFile = fs.writeFile;
	  fs.writeFile = writeFile;
	  function writeFile(path, data, options, cb) {
	    if (typeof options === 'function') cb = options, options = null;
	
	    return go$writeFile(path, data, options, cb);
	
	    function go$writeFile(path, data, options, cb) {
	      return fs$writeFile(path, data, options, function (err) {
	        if (err && (err.code === 'EMFILE' || err.code === 'ENFILE')) enqueue([go$writeFile, [path, data, options, cb]]);else {
	          if (typeof cb === 'function') cb.apply(this, arguments);
	          retry();
	        }
	      });
	    }
	  }
	
	  var fs$appendFile = fs.appendFile;
	  if (fs$appendFile) fs.appendFile = appendFile;
	  function appendFile(path, data, options, cb) {
	    if (typeof options === 'function') cb = options, options = null;
	
	    return go$appendFile(path, data, options, cb);
	
	    function go$appendFile(path, data, options, cb) {
	      return fs$appendFile(path, data, options, function (err) {
	        if (err && (err.code === 'EMFILE' || err.code === 'ENFILE')) enqueue([go$appendFile, [path, data, options, cb]]);else {
	          if (typeof cb === 'function') cb.apply(this, arguments);
	          retry();
	        }
	      });
	    }
	  }
	
	  var fs$readdir = fs.readdir;
	  fs.readdir = readdir;
	  function readdir(path, options, cb) {
	    var args = [path];
	    if (typeof options !== 'function') {
	      args.push(options);
	    } else {
	      cb = options;
	    }
	    args.push(go$readdir$cb);
	
	    return go$readdir(args);
	
	    function go$readdir$cb(err, files) {
	      if (files && files.sort) files.sort();
	
	      if (err && (err.code === 'EMFILE' || err.code === 'ENFILE')) enqueue([go$readdir, [args]]);else {
	        if (typeof cb === 'function') cb.apply(this, arguments);
	        retry();
	      }
	    }
	  }
	
	  function go$readdir(args) {
	    return fs$readdir.apply(fs, args);
	  }
	
	  if (process.version.substr(0, 4) === 'v0.8') {
	    var legStreams = legacy(fs);
	    ReadStream = legStreams.ReadStream;
	    WriteStream = legStreams.WriteStream;
	  }
	
	  var fs$ReadStream = fs.ReadStream;
	  ReadStream.prototype = Object.create(fs$ReadStream.prototype);
	  ReadStream.prototype.open = ReadStream$open;
	
	  var fs$WriteStream = fs.WriteStream;
	  WriteStream.prototype = Object.create(fs$WriteStream.prototype);
	  WriteStream.prototype.open = WriteStream$open;
	
	  fs.ReadStream = ReadStream;
	  fs.WriteStream = WriteStream;
	
	  function ReadStream(path, options) {
	    if (this instanceof ReadStream) return fs$ReadStream.apply(this, arguments), this;else return ReadStream.apply(Object.create(ReadStream.prototype), arguments);
	  }
	
	  function ReadStream$open() {
	    var that = this;
	    open(that.path, that.flags, that.mode, function (err, fd) {
	      if (err) {
	        if (that.autoClose) that.destroy();
	
	        that.emit('error', err);
	      } else {
	        that.fd = fd;
	        that.emit('open', fd);
	        that.read();
	      }
	    });
	  }
	
	  function WriteStream(path, options) {
	    if (this instanceof WriteStream) return fs$WriteStream.apply(this, arguments), this;else return WriteStream.apply(Object.create(WriteStream.prototype), arguments);
	  }
	
	  function WriteStream$open() {
	    var that = this;
	    open(that.path, that.flags, that.mode, function (err, fd) {
	      if (err) {
	        that.destroy();
	        that.emit('error', err);
	      } else {
	        that.fd = fd;
	        that.emit('open', fd);
	      }
	    });
	  }
	
	  function createReadStream(path, options) {
	    return new ReadStream(path, options);
	  }
	
	  function createWriteStream(path, options) {
	    return new WriteStream(path, options);
	  }
	
	  var fs$open = fs.open;
	  fs.open = open;
	  function open(path, flags, mode, cb) {
	    if (typeof mode === 'function') cb = mode, mode = null;
	
	    return go$open(path, flags, mode, cb);
	
	    function go$open(path, flags, mode, cb) {
	      return fs$open(path, flags, mode, function (err, fd) {
	        if (err && (err.code === 'EMFILE' || err.code === 'ENFILE')) enqueue([go$open, [path, flags, mode, cb]]);else {
	          if (typeof cb === 'function') cb.apply(this, arguments);
	          retry();
	        }
	      });
	    }
	  }
	
	  return fs;
	}
	
	function enqueue(elem) {
	  debug('ENQUEUE', elem[0].name, elem[1]);
	  queue.push(elem);
	}
	
	function retry() {
	  var elem = queue.shift();
	  if (elem) {
	    debug('RETRY', elem[0].name, elem[1]);
	    elem[0].apply(null, elem[1]);
	  }
	}
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ }),
/* 355 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';
	
	var fs = __webpack_require__(356);
	var constants = __webpack_require__(!(function webpackMissingModule() { var e = new Error("Cannot find module \"constants\""); e.code = 'MODULE_NOT_FOUND'; throw e; }()));
	
	var origCwd = process.cwd;
	var cwd = null;
	
	var platform = process.env.GRACEFUL_FS_PLATFORM || process.platform;
	
	process.cwd = function () {
	  if (!cwd) cwd = origCwd.call(process);
	  return cwd;
	};
	try {
	  process.cwd();
	} catch (er) {}
	
	var chdir = process.chdir;
	process.chdir = function (d) {
	  cwd = null;
	  chdir.call(process, d);
	};
	
	module.exports = patch;
	
	function patch(fs) {
	  // (re-)implement some things that are known busted or missing.
	
	  // lchmod, broken prior to 0.6.2
	  // back-port the fix here.
	  if (constants.hasOwnProperty('O_SYMLINK') && process.version.match(/^v0\.6\.[0-2]|^v0\.5\./)) {
	    patchLchmod(fs);
	  }
	
	  // lutimes implementation, or no-op
	  if (!fs.lutimes) {
	    patchLutimes(fs);
	  }
	
	  // https://github.com/isaacs/node-graceful-fs/issues/4
	  // Chown should not fail on einval or eperm if non-root.
	  // It should not fail on enosys ever, as this just indicates
	  // that a fs doesn't support the intended operation.
	
	  fs.chown = chownFix(fs.chown);
	  fs.fchown = chownFix(fs.fchown);
	  fs.lchown = chownFix(fs.lchown);
	
	  fs.chmod = chmodFix(fs.chmod);
	  fs.fchmod = chmodFix(fs.fchmod);
	  fs.lchmod = chmodFix(fs.lchmod);
	
	  fs.chownSync = chownFixSync(fs.chownSync);
	  fs.fchownSync = chownFixSync(fs.fchownSync);
	  fs.lchownSync = chownFixSync(fs.lchownSync);
	
	  fs.chmodSync = chmodFixSync(fs.chmodSync);
	  fs.fchmodSync = chmodFixSync(fs.fchmodSync);
	  fs.lchmodSync = chmodFixSync(fs.lchmodSync);
	
	  fs.stat = statFix(fs.stat);
	  fs.fstat = statFix(fs.fstat);
	  fs.lstat = statFix(fs.lstat);
	
	  fs.statSync = statFixSync(fs.statSync);
	  fs.fstatSync = statFixSync(fs.fstatSync);
	  fs.lstatSync = statFixSync(fs.lstatSync);
	
	  // if lchmod/lchown do not exist, then make them no-ops
	  if (!fs.lchmod) {
	    fs.lchmod = function (path, mode, cb) {
	      if (cb) process.nextTick(cb);
	    };
	    fs.lchmodSync = function () {};
	  }
	  if (!fs.lchown) {
	    fs.lchown = function (path, uid, gid, cb) {
	      if (cb) process.nextTick(cb);
	    };
	    fs.lchownSync = function () {};
	  }
	
	  // on Windows, A/V software can lock the directory, causing this
	  // to fail with an EACCES or EPERM if the directory contains newly
	  // created files.  Try again on failure, for up to 60 seconds.
	
	  // Set the timeout this long because some Windows Anti-Virus, such as Parity
	  // bit9, may lock files for up to a minute, causing npm package install
	  // failures. Also, take care to yield the scheduler. Windows scheduling gives
	  // CPU to a busy looping process, which can cause the program causing the lock
	  // contention to be starved of CPU by node, so the contention doesn't resolve.
	  if (platform === "win32") {
	    fs.rename = function (fs$rename) {
	      return function (from, to, cb) {
	        var start = Date.now();
	        var backoff = 0;
	        fs$rename(from, to, function CB(er) {
	          if (er && (er.code === "EACCES" || er.code === "EPERM") && Date.now() - start < 60000) {
	            setTimeout(function () {
	              fs.stat(to, function (stater, st) {
	                if (stater && stater.code === "ENOENT") fs$rename(from, to, CB);else cb(er);
	              });
	            }, backoff);
	            if (backoff < 100) backoff += 10;
	            return;
	          }
	          if (cb) cb(er);
	        });
	      };
	    }(fs.rename);
	  }
	
	  // if read() returns EAGAIN, then just try it again.
	  fs.read = function (fs$read) {
	    return function (fd, buffer, offset, length, position, callback_) {
	      var _callback;
	      if (callback_ && typeof callback_ === 'function') {
	        var eagCounter = 0;
	        _callback = function callback(er, _, __) {
	          if (er && er.code === 'EAGAIN' && eagCounter < 10) {
	            eagCounter++;
	            return fs$read.call(fs, fd, buffer, offset, length, position, _callback);
	          }
	          callback_.apply(this, arguments);
	        };
	      }
	      return fs$read.call(fs, fd, buffer, offset, length, position, _callback);
	    };
	  }(fs.read);
	
	  fs.readSync = function (fs$readSync) {
	    return function (fd, buffer, offset, length, position) {
	      var eagCounter = 0;
	      while (true) {
	        try {
	          return fs$readSync.call(fs, fd, buffer, offset, length, position);
	        } catch (er) {
	          if (er.code === 'EAGAIN' && eagCounter < 10) {
	            eagCounter++;
	            continue;
	          }
	          throw er;
	        }
	      }
	    };
	  }(fs.readSync);
	}
	
	function patchLchmod(fs) {
	  fs.lchmod = function (path, mode, callback) {
	    fs.open(path, constants.O_WRONLY | constants.O_SYMLINK, mode, function (err, fd) {
	      if (err) {
	        if (callback) callback(err);
	        return;
	      }
	      // prefer to return the chmod error, if one occurs,
	      // but still try to close, and report closing errors if they occur.
	      fs.fchmod(fd, mode, function (err) {
	        fs.close(fd, function (err2) {
	          if (callback) callback(err || err2);
	        });
	      });
	    });
	  };
	
	  fs.lchmodSync = function (path, mode) {
	    var fd = fs.openSync(path, constants.O_WRONLY | constants.O_SYMLINK, mode);
	
	    // prefer to return the chmod error, if one occurs,
	    // but still try to close, and report closing errors if they occur.
	    var threw = true;
	    var ret;
	    try {
	      ret = fs.fchmodSync(fd, mode);
	      threw = false;
	    } finally {
	      if (threw) {
	        try {
	          fs.closeSync(fd);
	        } catch (er) {}
	      } else {
	        fs.closeSync(fd);
	      }
	    }
	    return ret;
	  };
	}
	
	function patchLutimes(fs) {
	  if (constants.hasOwnProperty("O_SYMLINK")) {
	    fs.lutimes = function (path, at, mt, cb) {
	      fs.open(path, constants.O_SYMLINK, function (er, fd) {
	        if (er) {
	          if (cb) cb(er);
	          return;
	        }
	        fs.futimes(fd, at, mt, function (er) {
	          fs.close(fd, function (er2) {
	            if (cb) cb(er || er2);
	          });
	        });
	      });
	    };
	
	    fs.lutimesSync = function (path, at, mt) {
	      var fd = fs.openSync(path, constants.O_SYMLINK);
	      var ret;
	      var threw = true;
	      try {
	        ret = fs.futimesSync(fd, at, mt);
	        threw = false;
	      } finally {
	        if (threw) {
	          try {
	            fs.closeSync(fd);
	          } catch (er) {}
	        } else {
	          fs.closeSync(fd);
	        }
	      }
	      return ret;
	    };
	  } else {
	    fs.lutimes = function (_a, _b, _c, cb) {
	      if (cb) process.nextTick(cb);
	    };
	    fs.lutimesSync = function () {};
	  }
	}
	
	function chmodFix(orig) {
	  if (!orig) return orig;
	  return function (target, mode, cb) {
	    return orig.call(fs, target, mode, function (er) {
	      if (chownErOk(er)) er = null;
	      if (cb) cb.apply(this, arguments);
	    });
	  };
	}
	
	function chmodFixSync(orig) {
	  if (!orig) return orig;
	  return function (target, mode) {
	    try {
	      return orig.call(fs, target, mode);
	    } catch (er) {
	      if (!chownErOk(er)) throw er;
	    }
	  };
	}
	
	function chownFix(orig) {
	  if (!orig) return orig;
	  return function (target, uid, gid, cb) {
	    return orig.call(fs, target, uid, gid, function (er) {
	      if (chownErOk(er)) er = null;
	      if (cb) cb.apply(this, arguments);
	    });
	  };
	}
	
	function chownFixSync(orig) {
	  if (!orig) return orig;
	  return function (target, uid, gid) {
	    try {
	      return orig.call(fs, target, uid, gid);
	    } catch (er) {
	      if (!chownErOk(er)) throw er;
	    }
	  };
	}
	
	function statFix(orig) {
	  if (!orig) return orig;
	  // Older versions of Node erroneously returned signed integers for
	  // uid + gid.
	  return function (target, cb) {
	    return orig.call(fs, target, function (er, stats) {
	      if (!stats) return cb.apply(this, arguments);
	      if (stats.uid < 0) stats.uid += 0x100000000;
	      if (stats.gid < 0) stats.gid += 0x100000000;
	      if (cb) cb.apply(this, arguments);
	    });
	  };
	}
	
	function statFixSync(orig) {
	  if (!orig) return orig;
	  // Older versions of Node erroneously returned signed integers for
	  // uid + gid.
	  return function (target) {
	    var stats = orig.call(fs, target);
	    if (stats.uid < 0) stats.uid += 0x100000000;
	    if (stats.gid < 0) stats.gid += 0x100000000;
	    return stats;
	  };
	}
	
	// ENOSYS means that the fs doesn't support the op. Just ignore
	// that, because it doesn't matter.
	//
	// if there's no getuid, or if getuid() is something other
	// than 0, and the error is EINVAL or EPERM, then just ignore
	// it.
	//
	// This specific case is a silent failure in cp, install, tar,
	// and most other unix tools that manage permissions.
	//
	// When running as root, or if other types of errors are
	// encountered, then it's strict.
	function chownErOk(er) {
	  if (!er) return true;
	
	  if (er.code === "ENOSYS") return true;
	
	  var nonroot = !process.getuid || process.getuid() !== 0;
	  if (nonroot) {
	    if (er.code === "EINVAL" || er.code === "EPERM") return true;
	  }
	
	  return false;
	}
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ }),
/* 356 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
	
	var fs = __webpack_require__(!(function webpackMissingModule() { var e = new Error("Cannot find module \"fs\""); e.code = 'MODULE_NOT_FOUND'; throw e; }()));
	
	module.exports = clone(fs);
	
	function clone(obj) {
	  if (obj === null || (typeof obj === 'undefined' ? 'undefined' : _typeof(obj)) !== 'object') return obj;
	
	  if (obj instanceof Object) var copy = { __proto__: obj.__proto__ };else var copy = Object.create(null);
	
	  Object.getOwnPropertyNames(obj).forEach(function (key) {
	    Object.defineProperty(copy, key, Object.getOwnPropertyDescriptor(obj, key));
	  });
	
	  return copy;
	}

/***/ }),
/* 357 */,
/* 358 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';
	
	var Stream = __webpack_require__(282).Stream;
	
	module.exports = legacy;
	
	function legacy(fs) {
	  return {
	    ReadStream: ReadStream,
	    WriteStream: WriteStream
	  };
	
	  function ReadStream(path, options) {
	    if (!(this instanceof ReadStream)) return new ReadStream(path, options);
	
	    Stream.call(this);
	
	    var self = this;
	
	    this.path = path;
	    this.fd = null;
	    this.readable = true;
	    this.paused = false;
	
	    this.flags = 'r';
	    this.mode = 438; /*=0666*/
	    this.bufferSize = 64 * 1024;
	
	    options = options || {};
	
	    // Mixin options into this
	    var keys = Object.keys(options);
	    for (var index = 0, length = keys.length; index < length; index++) {
	      var key = keys[index];
	      this[key] = options[key];
	    }
	
	    if (this.encoding) this.setEncoding(this.encoding);
	
	    if (this.start !== undefined) {
	      if ('number' !== typeof this.start) {
	        throw TypeError('start must be a Number');
	      }
	      if (this.end === undefined) {
	        this.end = Infinity;
	      } else if ('number' !== typeof this.end) {
	        throw TypeError('end must be a Number');
	      }
	
	      if (this.start > this.end) {
	        throw new Error('start must be <= end');
	      }
	
	      this.pos = this.start;
	    }
	
	    if (this.fd !== null) {
	      process.nextTick(function () {
	        self._read();
	      });
	      return;
	    }
	
	    fs.open(this.path, this.flags, this.mode, function (err, fd) {
	      if (err) {
	        self.emit('error', err);
	        self.readable = false;
	        return;
	      }
	
	      self.fd = fd;
	      self.emit('open', fd);
	      self._read();
	    });
	  }
	
	  function WriteStream(path, options) {
	    if (!(this instanceof WriteStream)) return new WriteStream(path, options);
	
	    Stream.call(this);
	
	    this.path = path;
	    this.fd = null;
	    this.writable = true;
	
	    this.flags = 'w';
	    this.encoding = 'binary';
	    this.mode = 438; /*=0666*/
	    this.bytesWritten = 0;
	
	    options = options || {};
	
	    // Mixin options into this
	    var keys = Object.keys(options);
	    for (var index = 0, length = keys.length; index < length; index++) {
	      var key = keys[index];
	      this[key] = options[key];
	    }
	
	    if (this.start !== undefined) {
	      if ('number' !== typeof this.start) {
	        throw TypeError('start must be a Number');
	      }
	      if (this.start < 0) {
	        throw new Error('start must be >= zero');
	      }
	
	      this.pos = this.start;
	    }
	
	    this.busy = false;
	    this._queue = [];
	
	    if (this.fd === null) {
	      this._open = fs.open;
	      this._queue.push([this._open, this.path, this.flags, this.mode, undefined]);
	      this.flush();
	    }
	  }
	}
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ }),
/* 359 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {"use strict";
	
	// info about each config option.
	
	var debug = process.env.DEBUG_NOPT || process.env.NOPT_DEBUG ? function () {
	  console.error.apply(console, arguments);
	} : function () {};
	
	var url = __webpack_require__(275),
	    path = __webpack_require__(270),
	    Stream = __webpack_require__(282).Stream,
	    abbrev = __webpack_require__(309);
	
	module.exports = exports = nopt;
	exports.clean = clean;
	
	exports.typeDefs = { String: { type: String, validate: validateString },
	  Boolean: { type: Boolean, validate: validateBoolean },
	  url: { type: url, validate: validateUrl },
	  Number: { type: Number, validate: validateNumber },
	  path: { type: path, validate: validatePath },
	  Stream: { type: Stream, validate: validateStream },
	  Date: { type: Date, validate: validateDate }
	};
	
	function nopt(types, shorthands, args, slice) {
	  args = args || process.argv;
	  types = types || {};
	  shorthands = shorthands || {};
	  if (typeof slice !== "number") slice = 2;
	
	  debug(types, shorthands, args, slice);
	
	  args = args.slice(slice);
	  var data = {},
	      key,
	      remain = [],
	      cooked = args,
	      original = args.slice(0);
	
	  parse(args, data, remain, types, shorthands);
	  // now data is full
	  clean(data, types, exports.typeDefs);
	  data.argv = { remain: remain, cooked: cooked, original: original };
	  Object.defineProperty(data.argv, 'toString', { value: function value() {
	      return this.original.map(JSON.stringify).join(" ");
	    }, enumerable: false });
	  return data;
	}
	
	function clean(data, types, typeDefs) {
	  typeDefs = typeDefs || exports.typeDefs;
	  var remove = {},
	      typeDefault = [false, true, null, String, Array];
	
	  Object.keys(data).forEach(function (k) {
	    if (k === "argv") return;
	    var val = data[k],
	        isArray = Array.isArray(val),
	        type = types[k];
	    if (!isArray) val = [val];
	    if (!type) type = typeDefault;
	    if (type === Array) type = typeDefault.concat(Array);
	    if (!Array.isArray(type)) type = [type];
	
	    debug("val=%j", val);
	    debug("types=", type);
	    val = val.map(function (val) {
	      // if it's an unknown value, then parse false/true/null/numbers/dates
	      if (typeof val === "string") {
	        debug("string %j", val);
	        val = val.trim();
	        if (val === "null" && ~type.indexOf(null) || val === "true" && (~type.indexOf(true) || ~type.indexOf(Boolean)) || val === "false" && (~type.indexOf(false) || ~type.indexOf(Boolean))) {
	          val = JSON.parse(val);
	          debug("jsonable %j", val);
	        } else if (~type.indexOf(Number) && !isNaN(val)) {
	          debug("convert to number", val);
	          val = +val;
	        } else if (~type.indexOf(Date) && !isNaN(Date.parse(val))) {
	          debug("convert to date", val);
	          val = new Date(val);
	        }
	      }
	
	      if (!types.hasOwnProperty(k)) {
	        return val;
	      }
	
	      // allow `--no-blah` to set 'blah' to null if null is allowed
	      if (val === false && ~type.indexOf(null) && !(~type.indexOf(false) || ~type.indexOf(Boolean))) {
	        val = null;
	      }
	
	      var d = {};
	      d[k] = val;
	      debug("prevalidated val", d, val, types[k]);
	      if (!validate(d, k, val, types[k], typeDefs)) {
	        if (exports.invalidHandler) {
	          exports.invalidHandler(k, val, types[k], data);
	        } else if (exports.invalidHandler !== false) {
	          debug("invalid: " + k + "=" + val, types[k]);
	        }
	        return remove;
	      }
	      debug("validated val", d, val, types[k]);
	      return d[k];
	    }).filter(function (val) {
	      return val !== remove;
	    });
	
	    if (!val.length) delete data[k];else if (isArray) {
	      debug(isArray, data[k], val);
	      data[k] = val;
	    } else data[k] = val[0];
	
	    debug("k=%s val=%j", k, val, data[k]);
	  });
	}
	
	function validateString(data, k, val) {
	  data[k] = String(val);
	}
	
	function validatePath(data, k, val) {
	  if (val === true) return false;
	  if (val === null) return true;
	
	  val = String(val);
	  var homePattern = process.platform === 'win32' ? /^~(\/|\\)/ : /^~\//;
	  if (val.match(homePattern) && process.env.HOME) {
	    val = path.resolve(process.env.HOME, val.substr(2));
	  }
	  data[k] = path.resolve(String(val));
	  return true;
	}
	
	function validateNumber(data, k, val) {
	  debug("validate Number %j %j %j", k, val, isNaN(val));
	  if (isNaN(val)) return false;
	  data[k] = +val;
	}
	
	function validateDate(data, k, val) {
	  debug("validate Date %j %j %j", k, val, Date.parse(val));
	  var s = Date.parse(val);
	  if (isNaN(s)) return false;
	  data[k] = new Date(val);
	}
	
	function validateBoolean(data, k, val) {
	  if (val instanceof Boolean) val = val.valueOf();else if (typeof val === "string") {
	    if (!isNaN(val)) val = !!+val;else if (val === "null" || val === "false") val = false;else val = true;
	  } else val = !!val;
	  data[k] = val;
	}
	
	function validateUrl(data, k, val) {
	  val = url.parse(String(val));
	  if (!val.host) return false;
	  data[k] = val.href;
	}
	
	function validateStream(data, k, val) {
	  if (!(val instanceof Stream)) return false;
	  data[k] = val;
	}
	
	function validate(data, k, val, type, typeDefs) {
	  // arrays are lists of types.
	  if (Array.isArray(type)) {
	    for (var i = 0, l = type.length; i < l; i++) {
	      if (type[i] === Array) continue;
	      if (validate(data, k, val, type[i], typeDefs)) return true;
	    }
	    delete data[k];
	    return false;
	  }
	
	  // an array of anything?
	  if (type === Array) return true;
	
	  // NaN is poisonous.  Means that something is not allowed.
	  if (type !== type) {
	    debug("Poison NaN", k, val, type);
	    delete data[k];
	    return false;
	  }
	
	  // explicit list of values
	  if (val === type) {
	    debug("Explicitly allowed %j", val);
	    // if (isArray) (data[k] = data[k] || []).push(val)
	    // else data[k] = val
	    data[k] = val;
	    return true;
	  }
	
	  // now go through the list of typeDefs, validate against each one.
	  var ok = false,
	      types = Object.keys(typeDefs);
	  for (var i = 0, l = types.length; i < l; i++) {
	    debug("test type %j %j %j", k, val, types[i]);
	    var t = typeDefs[types[i]];
	    if (t && (type && type.name && t.type && t.type.name ? type.name === t.type.name : type === t.type)) {
	      var d = {};
	      ok = false !== t.validate(d, k, val);
	      val = d[k];
	      if (ok) {
	        // if (isArray) (data[k] = data[k] || []).push(val)
	        // else data[k] = val
	        data[k] = val;
	        break;
	      }
	    }
	  }
	  debug("OK? %j (%j %j %j)", ok, k, val, types[i]);
	
	  if (!ok) delete data[k];
	  return ok;
	}
	
	function parse(args, data, remain, types, shorthands) {
	  debug("parse", args, data, remain);
	
	  var key = null,
	      abbrevs = abbrev(Object.keys(types)),
	      shortAbbr = abbrev(Object.keys(shorthands));
	
	  for (var i = 0; i < args.length; i++) {
	    var arg = args[i];
	    debug("arg", arg);
	
	    if (arg.match(/^-{2,}$/)) {
	      // done with keys.
	      // the rest are args.
	      remain.push.apply(remain, args.slice(i + 1));
	      args[i] = "--";
	      break;
	    }
	    var hadEq = false;
	    if (arg.charAt(0) === "-" && arg.length > 1) {
	      if (arg.indexOf("=") !== -1) {
	        hadEq = true;
	        var v = arg.split("=");
	        arg = v.shift();
	        v = v.join("=");
	        args.splice.apply(args, [i, 1].concat([arg, v]));
	      }
	
	      // see if it's a shorthand
	      // if so, splice and back up to re-parse it.
	      var shRes = resolveShort(arg, shorthands, shortAbbr, abbrevs);
	      debug("arg=%j shRes=%j", arg, shRes);
	      if (shRes) {
	        debug(arg, shRes);
	        args.splice.apply(args, [i, 1].concat(shRes));
	        if (arg !== shRes[0]) {
	          i--;
	          continue;
	        }
	      }
	      arg = arg.replace(/^-+/, "");
	      var no = null;
	      while (arg.toLowerCase().indexOf("no-") === 0) {
	        no = !no;
	        arg = arg.substr(3);
	      }
	
	      if (abbrevs[arg]) arg = abbrevs[arg];
	
	      var isArray = types[arg] === Array || Array.isArray(types[arg]) && types[arg].indexOf(Array) !== -1;
	
	      // allow unknown things to be arrays if specified multiple times.
	      if (!types.hasOwnProperty(arg) && data.hasOwnProperty(arg)) {
	        if (!Array.isArray(data[arg])) data[arg] = [data[arg]];
	        isArray = true;
	      }
	
	      var val,
	          la = args[i + 1];
	
	      var isBool = typeof no === 'boolean' || types[arg] === Boolean || Array.isArray(types[arg]) && types[arg].indexOf(Boolean) !== -1 || typeof types[arg] === 'undefined' && !hadEq || la === "false" && (types[arg] === null || Array.isArray(types[arg]) && ~types[arg].indexOf(null));
	
	      if (isBool) {
	        // just set and move along
	        val = !no;
	        // however, also support --bool true or --bool false
	        if (la === "true" || la === "false") {
	          val = JSON.parse(la);
	          la = null;
	          if (no) val = !val;
	          i++;
	        }
	
	        // also support "foo":[Boolean, "bar"] and "--foo bar"
	        if (Array.isArray(types[arg]) && la) {
	          if (~types[arg].indexOf(la)) {
	            // an explicit type
	            val = la;
	            i++;
	          } else if (la === "null" && ~types[arg].indexOf(null)) {
	            // null allowed
	            val = null;
	            i++;
	          } else if (!la.match(/^-{2,}[^-]/) && !isNaN(la) && ~types[arg].indexOf(Number)) {
	            // number
	            val = +la;
	            i++;
	          } else if (!la.match(/^-[^-]/) && ~types[arg].indexOf(String)) {
	            // string
	            val = la;
	            i++;
	          }
	        }
	
	        if (isArray) (data[arg] = data[arg] || []).push(val);else data[arg] = val;
	
	        continue;
	      }
	
	      if (types[arg] === String && la === undefined) la = "";
	
	      if (la && la.match(/^-{2,}$/)) {
	        la = undefined;
	        i--;
	      }
	
	      val = la === undefined ? true : la;
	      if (isArray) (data[arg] = data[arg] || []).push(val);else data[arg] = val;
	
	      i++;
	      continue;
	    }
	    remain.push(arg);
	  }
	}
	
	function resolveShort(arg, shorthands, shortAbbr, abbrevs) {
	  // handle single-char shorthands glommed together, like
	  // npm ls -glp, but only if there is one dash, and only if
	  // all of the chars are single-char shorthands, and it's
	  // not a match to some other abbrev.
	  arg = arg.replace(/^-+/, '');
	
	  // if it's an exact known option, then don't go any further
	  if (abbrevs[arg] === arg) return null;
	
	  // if it's an exact known shortopt, same deal
	  if (shorthands[arg]) {
	    // make it an array, if it's a list of words
	    if (shorthands[arg] && !Array.isArray(shorthands[arg])) shorthands[arg] = shorthands[arg].split(/\s+/);
	
	    return shorthands[arg];
	  }
	
	  // first check to see if this arg is a set of single-char shorthands
	  var singles = shorthands.___singles;
	  if (!singles) {
	    singles = Object.keys(shorthands).filter(function (s) {
	      return s.length === 1;
	    }).reduce(function (l, r) {
	      l[r] = true;
	      return l;
	    }, {});
	    shorthands.___singles = singles;
	    debug('shorthand singles', singles);
	  }
	
	  var chrs = arg.split("").filter(function (c) {
	    return singles[c];
	  });
	
	  if (chrs.join("") === arg) return chrs.map(function (c) {
	    return shorthands[c];
	  }).reduce(function (l, r) {
	    return l.concat(r);
	  }, []);
	
	  // if it's an arg abbrev, and not a literal shorthand, then prefer the arg
	  if (abbrevs[arg] && !shorthands[arg]) return null;
	
	  // if it's an abbr for a shorthand, then use that
	  if (shortAbbr[arg]) arg = shortAbbr[arg];
	
	  // make it an array, if it's a list of words
	  if (shorthands[arg] && !Array.isArray(shorthands[arg])) shorthands[arg] = shorthands[arg].split(/\s+/);
	
	  return shorthands[arg];
	}
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ }),
/* 360 */
/***/ (function(module, exports, __webpack_require__) {

	var map = {
		"./build": 362,
		"./build.js": 362,
		"./clean": 382,
		"./clean.js": 382,
		"./configure": 383,
		"./configure.js": 383,
		"./find-node-directory": 388,
		"./find-node-directory.js": 388,
		"./find-vs2017": 389,
		"./find-vs2017.js": 389,
		"./install": 390,
		"./install.js": 390,
		"./list": 584,
		"./list.js": 584,
		"./node-gyp": 353,
		"./node-gyp.js": 353,
		"./process-release": 381,
		"./process-release.js": 381,
		"./rebuild": 585,
		"./rebuild.js": 585,
		"./remove": 586,
		"./remove.js": 586
	};
	function webpackContext(req) {
		return __webpack_require__(webpackContextResolve(req));
	};
	function webpackContextResolve(req) {
		return map[req] || (function() { throw new Error("Cannot find module '" + req + "'.") }());
	};
	webpackContext.keys = function webpackContextKeys() {
		return Object.keys(map);
	};
	webpackContext.resolve = webpackContextResolve;
	module.exports = webpackContext;
	webpackContext.id = 360;


/***/ }),
/* 361 */,
/* 362 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';
	
	module.exports = exports = build;
	
	/**
	 * Module dependencies.
	 */
	
	var fs = __webpack_require__(354),
	    rm = __webpack_require__(363),
	    path = __webpack_require__(270),
	    glob = __webpack_require__(364),
	    log = __webpack_require__(310),
	    which = __webpack_require__(377),
	    exec = __webpack_require__(!(function webpackMissingModule() { var e = new Error("Cannot find module \"child_process\""); e.code = 'MODULE_NOT_FOUND'; throw e; }())).exec,
	    processRelease = __webpack_require__(381),
	    win = process.platform === 'win32';
	
	exports.usage = 'Invokes `' + (win ? 'msbuild' : 'make') + '` and builds the module';
	
	function build(gyp, argv, callback) {
	  var platformMake = 'make';
	  if (process.platform === 'aix') {
	    platformMake = 'gmake';
	  } else if (process.platform.indexOf('bsd') !== -1) {
	    platformMake = 'gmake';
	  }
	
	  var release = processRelease(argv, gyp, process.version, process.release),
	      makeCommand = gyp.opts.make || process.env.MAKE || platformMake,
	      command = win ? 'msbuild' : makeCommand,
	      buildDir = path.resolve('build'),
	      configPath = path.resolve(buildDir, 'config.gypi'),
	      jobs = gyp.opts.jobs || process.env.JOBS,
	      buildType,
	      config,
	      arch,
	      nodeDir;
	
	  loadConfigGypi();
	
	  /**
	   * Load the "config.gypi" file that was generated during "configure".
	   */
	
	  function loadConfigGypi() {
	    fs.readFile(configPath, 'utf8', function (err, data) {
	      if (err) {
	        if (err.code == 'ENOENT') {
	          callback(new Error('You must run `node-gyp configure` first!'));
	        } else {
	          callback(err);
	        }
	        return;
	      }
	      config = JSON.parse(data.replace(/\#.+\n/, ''));
	
	      // get the 'arch', 'buildType', and 'nodeDir' vars from the config
	      buildType = config.target_defaults.default_configuration;
	      arch = config.variables.target_arch;
	      nodeDir = config.variables.nodedir;
	
	      if ('debug' in gyp.opts) {
	        buildType = gyp.opts.debug ? 'Debug' : 'Release';
	      }
	      if (!buildType) {
	        buildType = 'Release';
	      }
	
	      log.verbose('build type', buildType);
	      log.verbose('architecture', arch);
	      log.verbose('node dev dir', nodeDir);
	
	      if (win) {
	        findSolutionFile();
	      } else {
	        doWhich();
	      }
	    });
	  }
	
	  /**
	   * On Windows, find the first build/*.sln file.
	   */
	
	  function findSolutionFile() {
	    glob('build/*.sln', function (err, files) {
	      if (err) return callback(err);
	      if (files.length === 0) {
	        return callback(new Error('Could not find *.sln file. Did you run "configure"?'));
	      }
	      guessedSolution = files[0];
	      log.verbose('found first Solution file', guessedSolution);
	      doWhich();
	    });
	  }
	
	  /**
	   * Uses node-which to locate the msbuild / make executable.
	   */
	
	  function doWhich() {
	    // First make sure we have the build command in the PATH
	    which(command, function (err, execPath) {
	      if (err) {
	        if (win && /not found/.test(err.message)) {
	          // On windows and no 'msbuild' found. Let's guess where it is
	          findMsbuild();
	        } else {
	          // Some other error or 'make' not found on Unix, report that to the user
	          callback(err);
	        }
	        return;
	      }
	      log.verbose('`which` succeeded for `' + command + '`', execPath);
	      doBuild();
	    });
	  }
	
	  /**
	   * Search for the location of "msbuild.exe" file on Windows.
	   */
	
	  function findMsbuild() {
	    if (config.variables.msbuild_path) {
	      command = config.variables.msbuild_path;
	      log.verbose('using MSBuild:', command);
	      doBuild();
	      return;
	    }
	
	    log.verbose('could not find "msbuild.exe" in PATH - finding location in registry');
	    var notfoundErr = 'Can\'t find "msbuild.exe". Do you have Microsoft Visual Studio C++ 2008+ installed?';
	    var cmd = 'reg query "HKLM\\Software\\Microsoft\\MSBuild\\ToolsVersions" /s';
	    if (process.arch !== 'ia32') cmd += ' /reg:32';
	    exec(cmd, function (err, stdout, stderr) {
	      if (err) {
	        return callback(new Error(err.message + '\n' + notfoundErr));
	      }
	      var reVers = /ToolsVersions\\([^\\]+)$/i,
	          rePath = /\r\n[ \t]+MSBuildToolsPath[ \t]+REG_SZ[ \t]+([^\r]+)/i,
	          msbuilds = [],
	          r,
	          msbuildPath;
	      stdout.split('\r\n\r\n').forEach(function (l) {
	        if (!l) return;
	        l = l.trim();
	        if (r = reVers.exec(l.substring(0, l.indexOf('\r\n')))) {
	          var ver = parseFloat(r[1], 10);
	          if (ver >= 3.5) {
	            if (r = rePath.exec(l)) {
	              msbuilds.push({
	                version: ver,
	                path: r[1]
	              });
	            }
	          }
	        }
	      });
	      msbuilds.sort(function (x, y) {
	        return x.version < y.version ? -1 : 1;
	      });(function verifyMsbuild() {
	        if (!msbuilds.length) return callback(new Error(notfoundErr));
	        msbuildPath = path.resolve(msbuilds.pop().path, 'msbuild.exe');
	        fs.stat(msbuildPath, function (err, stat) {
	          if (err) {
	            if (err.code == 'ENOENT') {
	              if (msbuilds.length) {
	                return verifyMsbuild();
	              } else {
	                callback(new Error(notfoundErr));
	              }
	            } else {
	              callback(err);
	            }
	            return;
	          }
	          command = msbuildPath;
	          doBuild();
	        });
	      })();
	    });
	  }
	
	  /**
	   * Actually spawn the process and compile the module.
	   */
	
	  function doBuild() {
	
	    // Enable Verbose build
	    var verbose = log.levels[log.level] <= log.levels.verbose;
	    if (!win && verbose) {
	      argv.push('V=1');
	    }
	    if (win && !verbose) {
	      argv.push('/clp:Verbosity=minimal');
	    }
	
	    if (win) {
	      // Turn off the Microsoft logo on Windows
	      argv.push('/nologo');
	    }
	
	    // Specify the build type, Release by default
	    if (win) {
	      var archLower = arch.toLowerCase();
	      var p = archLower === 'x64' ? 'x64' : archLower === 'arm' ? 'ARM' : 'Win32';
	      argv.push('/p:Configuration=' + buildType + ';Platform=' + p);
	      if (jobs) {
	        var j = parseInt(jobs, 10);
	        if (!isNaN(j) && j > 0) {
	          argv.push('/m:' + j);
	        } else if (jobs.toUpperCase() === 'MAX') {
	          argv.push('/m:' + __webpack_require__(333).cpus().length);
	        }
	      }
	    } else {
	      argv.push('BUILDTYPE=' + buildType);
	      // Invoke the Makefile in the 'build' dir.
	      argv.push('-C');
	      argv.push('build');
	      if (jobs) {
	        var j = parseInt(jobs, 10);
	        if (!isNaN(j) && j > 0) {
	          argv.push('--jobs');
	          argv.push(j);
	        } else if (jobs.toUpperCase() === 'MAX') {
	          argv.push('--jobs');
	          argv.push(__webpack_require__(333).cpus().length);
	        }
	      }
	    }
	
	    if (win) {
	      // did the user specify their own .sln file?
	      var hasSln = argv.some(function (arg) {
	        return path.extname(arg) == '.sln';
	      });
	      if (!hasSln) {
	        argv.unshift(gyp.opts.solution || guessedSolution);
	      }
	    }
	
	    var proc = gyp.spawn(command, argv);
	    proc.on('exit', onExit);
	  }
	
	  /**
	   * Invoked after the make/msbuild command exits.
	   */
	
	  function onExit(code, signal) {
	    if (code !== 0) {
	      return callback(new Error('`' + command + '` failed with exit code: ' + code));
	    }
	    if (signal) {
	      return callback(new Error('`' + command + '` got signal: ' + signal));
	    }
	    callback();
	  }
	}
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ }),
/* 363 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {"use strict";
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
	
	module.exports = rimraf;
	rimraf.sync = rimrafSync;
	
	var assert = __webpack_require__(336);
	var path = __webpack_require__(270);
	var fs = __webpack_require__(!(function webpackMissingModule() { var e = new Error("Cannot find module \"fs\""); e.code = 'MODULE_NOT_FOUND'; throw e; }()));
	var glob = __webpack_require__(364);
	
	var defaultGlobOpts = {
	  nosort: true,
	  silent: true
	};
	
	// for EMFILE handling
	var timeout = 0;
	
	var isWindows = process.platform === "win32";
	
	function defaults(options) {
	  var methods = ['unlink', 'chmod', 'stat', 'lstat', 'rmdir', 'readdir'];
	  methods.forEach(function (m) {
	    options[m] = options[m] || fs[m];
	    m = m + 'Sync';
	    options[m] = options[m] || fs[m];
	  });
	
	  options.maxBusyTries = options.maxBusyTries || 3;
	  options.emfileWait = options.emfileWait || 1000;
	  if (options.glob === false) {
	    options.disableGlob = true;
	  }
	  options.disableGlob = options.disableGlob || false;
	  options.glob = options.glob || defaultGlobOpts;
	}
	
	function rimraf(p, options, cb) {
	  if (typeof options === 'function') {
	    cb = options;
	    options = {};
	  }
	
	  assert(p, 'rimraf: missing path');
	  assert.equal(typeof p === "undefined" ? "undefined" : _typeof(p), 'string', 'rimraf: path should be a string');
	  assert.equal(typeof cb === "undefined" ? "undefined" : _typeof(cb), 'function', 'rimraf: callback function required');
	  assert(options, 'rimraf: invalid options argument provided');
	  assert.equal(typeof options === "undefined" ? "undefined" : _typeof(options), 'object', 'rimraf: options should be object');
	
	  defaults(options);
	
	  var busyTries = 0;
	  var errState = null;
	  var n = 0;
	
	  if (options.disableGlob || !glob.hasMagic(p)) return afterGlob(null, [p]);
	
	  options.lstat(p, function (er, stat) {
	    if (!er) return afterGlob(null, [p]);
	
	    glob(p, options.glob, afterGlob);
	  });
	
	  function next(er) {
	    errState = errState || er;
	    if (--n === 0) cb(errState);
	  }
	
	  function afterGlob(er, results) {
	    if (er) return cb(er);
	
	    n = results.length;
	    if (n === 0) return cb();
	
	    results.forEach(function (p) {
	      rimraf_(p, options, function CB(er) {
	        if (er) {
	          if ((er.code === "EBUSY" || er.code === "ENOTEMPTY" || er.code === "EPERM") && busyTries < options.maxBusyTries) {
	            busyTries++;
	            var time = busyTries * 100;
	            // try again, with the same exact callback as this one.
	            return setTimeout(function () {
	              rimraf_(p, options, CB);
	            }, time);
	          }
	
	          // this one won't happen if graceful-fs is used.
	          if (er.code === "EMFILE" && timeout < options.emfileWait) {
	            return setTimeout(function () {
	              rimraf_(p, options, CB);
	            }, timeout++);
	          }
	
	          // already gone
	          if (er.code === "ENOENT") er = null;
	        }
	
	        timeout = 0;
	        next(er);
	      });
	    });
	  }
	}
	
	// Two possible strategies.
	// 1. Assume it's a file.  unlink it, then do the dir stuff on EPERM or EISDIR
	// 2. Assume it's a directory.  readdir, then do the file stuff on ENOTDIR
	//
	// Both result in an extra syscall when you guess wrong.  However, there
	// are likely far more normal files in the world than directories.  This
	// is based on the assumption that a the average number of files per
	// directory is >= 1.
	//
	// If anyone ever complains about this, then I guess the strategy could
	// be made configurable somehow.  But until then, YAGNI.
	function rimraf_(p, options, cb) {
	  assert(p);
	  assert(options);
	  assert(typeof cb === 'function');
	
	  // sunos lets the root user unlink directories, which is... weird.
	  // so we have to lstat here and make sure it's not a dir.
	  options.lstat(p, function (er, st) {
	    if (er && er.code === "ENOENT") return cb(null);
	
	    // Windows can EPERM on stat.  Life is suffering.
	    if (er && er.code === "EPERM" && isWindows) fixWinEPERM(p, options, er, cb);
	
	    if (st && st.isDirectory()) return rmdir(p, options, er, cb);
	
	    options.unlink(p, function (er) {
	      if (er) {
	        if (er.code === "ENOENT") return cb(null);
	        if (er.code === "EPERM") return isWindows ? fixWinEPERM(p, options, er, cb) : rmdir(p, options, er, cb);
	        if (er.code === "EISDIR") return rmdir(p, options, er, cb);
	      }
	      return cb(er);
	    });
	  });
	}
	
	function fixWinEPERM(p, options, er, cb) {
	  assert(p);
	  assert(options);
	  assert(typeof cb === 'function');
	  if (er) assert(er instanceof Error);
	
	  options.chmod(p, 666, function (er2) {
	    if (er2) cb(er2.code === "ENOENT" ? null : er);else options.stat(p, function (er3, stats) {
	      if (er3) cb(er3.code === "ENOENT" ? null : er);else if (stats.isDirectory()) rmdir(p, options, er, cb);else options.unlink(p, cb);
	    });
	  });
	}
	
	function fixWinEPERMSync(p, options, er) {
	  assert(p);
	  assert(options);
	  if (er) assert(er instanceof Error);
	
	  try {
	    options.chmodSync(p, 666);
	  } catch (er2) {
	    if (er2.code === "ENOENT") return;else throw er;
	  }
	
	  try {
	    var stats = options.statSync(p);
	  } catch (er3) {
	    if (er3.code === "ENOENT") return;else throw er;
	  }
	
	  if (stats.isDirectory()) rmdirSync(p, options, er);else options.unlinkSync(p);
	}
	
	function rmdir(p, options, originalEr, cb) {
	  assert(p);
	  assert(options);
	  if (originalEr) assert(originalEr instanceof Error);
	  assert(typeof cb === 'function');
	
	  // try to rmdir first, and only readdir on ENOTEMPTY or EEXIST (SunOS)
	  // if we guessed wrong, and it's not a directory, then
	  // raise the original error.
	  options.rmdir(p, function (er) {
	    if (er && (er.code === "ENOTEMPTY" || er.code === "EEXIST" || er.code === "EPERM")) rmkids(p, options, cb);else if (er && er.code === "ENOTDIR") cb(originalEr);else cb(er);
	  });
	}
	
	function rmkids(p, options, cb) {
	  assert(p);
	  assert(options);
	  assert(typeof cb === 'function');
	
	  options.readdir(p, function (er, files) {
	    if (er) return cb(er);
	    var n = files.length;
	    if (n === 0) return options.rmdir(p, cb);
	    var errState;
	    files.forEach(function (f) {
	      rimraf(path.join(p, f), options, function (er) {
	        if (errState) return;
	        if (er) return cb(errState = er);
	        if (--n === 0) options.rmdir(p, cb);
	      });
	    });
	  });
	}
	
	// this looks simpler, and is strictly *faster*, but will
	// tie up the JavaScript thread and fail on excessively
	// deep directory trees.
	function rimrafSync(p, options) {
	  options = options || {};
	  defaults(options);
	
	  assert(p, 'rimraf: missing path');
	  assert.equal(typeof p === "undefined" ? "undefined" : _typeof(p), 'string', 'rimraf: path should be a string');
	  assert(options, 'rimraf: missing options');
	  assert.equal(typeof options === "undefined" ? "undefined" : _typeof(options), 'object', 'rimraf: options should be object');
	
	  var results;
	
	  if (options.disableGlob || !glob.hasMagic(p)) {
	    results = [p];
	  } else {
	    try {
	      options.lstatSync(p);
	      results = [p];
	    } catch (er) {
	      results = glob.sync(p, options.glob);
	    }
	  }
	
	  if (!results.length) return;
	
	  for (var i = 0; i < results.length; i++) {
	    var p = results[i];
	
	    try {
	      var st = options.lstatSync(p);
	    } catch (er) {
	      if (er.code === "ENOENT") return;
	
	      // Windows can EPERM on stat.  Life is suffering.
	      if (er.code === "EPERM" && isWindows) fixWinEPERMSync(p, options, er);
	    }
	
	    try {
	      // sunos lets the root user unlink directories, which is... weird.
	      if (st && st.isDirectory()) rmdirSync(p, options, null);else options.unlinkSync(p);
	    } catch (er) {
	      if (er.code === "ENOENT") return;
	      if (er.code === "EPERM") return isWindows ? fixWinEPERMSync(p, options, er) : rmdirSync(p, options, er);
	      if (er.code !== "EISDIR") throw er;
	
	      rmdirSync(p, options, er);
	    }
	  }
	}
	
	function rmdirSync(p, options, originalEr) {
	  assert(p);
	  assert(options);
	  if (originalEr) assert(originalEr instanceof Error);
	
	  try {
	    options.rmdirSync(p);
	  } catch (er) {
	    if (er.code === "ENOENT") return;
	    if (er.code === "ENOTDIR") throw originalEr;
	    if (er.code === "ENOTEMPTY" || er.code === "EEXIST" || er.code === "EPERM") rmkidsSync(p, options);
	  }
	}
	
	function rmkidsSync(p, options) {
	  assert(p);
	  assert(options);
	  options.readdirSync(p).forEach(function (f) {
	    rimrafSync(path.join(p, f), options);
	  });
	
	  // We only end up here once we got ENOTEMPTY at least once, and
	  // at this point, we are guaranteed to have removed all the kids.
	  // So, we know that it won't be ENOENT or ENOTDIR or anything else.
	  // try really hard to delete stuff on windows, because it has a
	  // PROFOUNDLY annoying habit of not closing handles promptly when
	  // files are deleted, resulting in spurious ENOTEMPTY errors.
	  var retries = isWindows ? 100 : 1;
	  var i = 0;
	  do {
	    var threw = true;
	    try {
	      var ret = options.rmdirSync(p, options);
	      threw = false;
	      return ret;
	    } finally {
	      if (++i < retries && threw) continue;
	    }
	  } while (true);
	}
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ }),
/* 364 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
	
	// Approach:
	//
	// 1. Get the minimatch set
	// 2. For each pattern in the set, PROCESS(pattern, false)
	// 3. Store matches per-set, then uniq them
	//
	// PROCESS(pattern, inGlobStar)
	// Get the first [n] items from pattern that are all strings
	// Join these together.  This is PREFIX.
	//   If there is no more remaining, then stat(PREFIX) and
	//   add to matches if it succeeds.  END.
	//
	// If inGlobStar and PREFIX is symlink and points to dir
	//   set ENTRIES = []
	// else readdir(PREFIX) as ENTRIES
	//   If fail, END
	//
	// with ENTRIES
	//   If pattern[n] is GLOBSTAR
	//     // handle the case where the globstar match is empty
	//     // by pruning it out, and testing the resulting pattern
	//     PROCESS(pattern[0..n] + pattern[n+1 .. $], false)
	//     // handle other cases.
	//     for ENTRY in ENTRIES (not dotfiles)
	//       // attach globstar + tail onto the entry
	//       // Mark that this entry is a globstar match
	//       PROCESS(pattern[0..n] + ENTRY + pattern[n .. $], true)
	//
	//   else // not globstar
	//     for ENTRY in ENTRIES (not dotfiles, unless pattern[n] is dot)
	//       Test ENTRY against pattern[n]
	//       If fails, continue
	//       If passes, PROCESS(pattern[0..n] + item + pattern[n+1 .. $])
	//
	// Caveat:
	//   Cache all stats and readdirs results to minimize syscall.  Since all
	//   we ever care about is existence and directory-ness, we can just keep
	//   `true` for files, and [children,...] for directories, or `false` for
	//   things that don't exist.
	
	module.exports = glob;
	
	var fs = __webpack_require__(!(function webpackMissingModule() { var e = new Error("Cannot find module \"fs\""); e.code = 'MODULE_NOT_FOUND'; throw e; }()));
	var rp = __webpack_require__(365);
	var minimatch = __webpack_require__(367);
	var Minimatch = minimatch.Minimatch;
	var inherits = __webpack_require__(284);
	var EE = __webpack_require__(283).EventEmitter;
	var path = __webpack_require__(270);
	var assert = __webpack_require__(336);
	var isAbsolute = __webpack_require__(371);
	var globSync = __webpack_require__(372);
	var common = __webpack_require__(373);
	var alphasort = common.alphasort;
	var alphasorti = common.alphasorti;
	var setopts = common.setopts;
	var ownProp = common.ownProp;
	var inflight = __webpack_require__(374);
	var util = __webpack_require__(271);
	var childrenIgnored = common.childrenIgnored;
	var isIgnored = common.isIgnored;
	
	var once = __webpack_require__(376);
	
	function glob(pattern, options, cb) {
	  if (typeof options === 'function') cb = options, options = {};
	  if (!options) options = {};
	
	  if (options.sync) {
	    if (cb) throw new TypeError('callback provided to sync glob');
	    return globSync(pattern, options);
	  }
	
	  return new Glob(pattern, options, cb);
	}
	
	glob.sync = globSync;
	var GlobSync = glob.GlobSync = globSync.GlobSync;
	
	// old api surface
	glob.glob = glob;
	
	function extend(origin, add) {
	  if (add === null || (typeof add === 'undefined' ? 'undefined' : _typeof(add)) !== 'object') {
	    return origin;
	  }
	
	  var keys = Object.keys(add);
	  var i = keys.length;
	  while (i--) {
	    origin[keys[i]] = add[keys[i]];
	  }
	  return origin;
	}
	
	glob.hasMagic = function (pattern, options_) {
	  var options = extend({}, options_);
	  options.noprocess = true;
	
	  var g = new Glob(pattern, options);
	  var set = g.minimatch.set;
	
	  if (!pattern) return false;
	
	  if (set.length > 1) return true;
	
	  for (var j = 0; j < set[0].length; j++) {
	    if (typeof set[0][j] !== 'string') return true;
	  }
	
	  return false;
	};
	
	glob.Glob = Glob;
	inherits(Glob, EE);
	function Glob(pattern, options, cb) {
	  if (typeof options === 'function') {
	    cb = options;
	    options = null;
	  }
	
	  if (options && options.sync) {
	    if (cb) throw new TypeError('callback provided to sync glob');
	    return new GlobSync(pattern, options);
	  }
	
	  if (!(this instanceof Glob)) return new Glob(pattern, options, cb);
	
	  setopts(this, pattern, options);
	  this._didRealPath = false;
	
	  // process each pattern in the minimatch set
	  var n = this.minimatch.set.length;
	
	  // The matches are stored as {<filename>: true,...} so that
	  // duplicates are automagically pruned.
	  // Later, we do an Object.keys() on these.
	  // Keep them as a list so we can fill in when nonull is set.
	  this.matches = new Array(n);
	
	  if (typeof cb === 'function') {
	    cb = once(cb);
	    this.on('error', cb);
	    this.on('end', function (matches) {
	      cb(null, matches);
	    });
	  }
	
	  var self = this;
	  var n = this.minimatch.set.length;
	  this._processing = 0;
	  this.matches = new Array(n);
	
	  this._emitQueue = [];
	  this._processQueue = [];
	  this.paused = false;
	
	  if (this.noprocess) return this;
	
	  if (n === 0) return done();
	
	  var sync = true;
	  for (var i = 0; i < n; i++) {
	    this._process(this.minimatch.set[i], i, false, done);
	  }
	  sync = false;
	
	  function done() {
	    --self._processing;
	    if (self._processing <= 0) {
	      if (sync) {
	        process.nextTick(function () {
	          self._finish();
	        });
	      } else {
	        self._finish();
	      }
	    }
	  }
	}
	
	Glob.prototype._finish = function () {
	  assert(this instanceof Glob);
	  if (this.aborted) return;
	
	  if (this.realpath && !this._didRealpath) return this._realpath();
	
	  common.finish(this);
	  this.emit('end', this.found);
	};
	
	Glob.prototype._realpath = function () {
	  if (this._didRealpath) return;
	
	  this._didRealpath = true;
	
	  var n = this.matches.length;
	  if (n === 0) return this._finish();
	
	  var self = this;
	  for (var i = 0; i < this.matches.length; i++) {
	    this._realpathSet(i, next);
	  }function next() {
	    if (--n === 0) self._finish();
	  }
	};
	
	Glob.prototype._realpathSet = function (index, cb) {
	  var matchset = this.matches[index];
	  if (!matchset) return cb();
	
	  var found = Object.keys(matchset);
	  var self = this;
	  var n = found.length;
	
	  if (n === 0) return cb();
	
	  var set = this.matches[index] = Object.create(null);
	  found.forEach(function (p, i) {
	    // If there's a problem with the stat, then it means that
	    // one or more of the links in the realpath couldn't be
	    // resolved.  just return the abs value in that case.
	    p = self._makeAbs(p);
	    rp.realpath(p, self.realpathCache, function (er, real) {
	      if (!er) set[real] = true;else if (er.syscall === 'stat') set[p] = true;else self.emit('error', er); // srsly wtf right here
	
	      if (--n === 0) {
	        self.matches[index] = set;
	        cb();
	      }
	    });
	  });
	};
	
	Glob.prototype._mark = function (p) {
	  return common.mark(this, p);
	};
	
	Glob.prototype._makeAbs = function (f) {
	  return common.makeAbs(this, f);
	};
	
	Glob.prototype.abort = function () {
	  this.aborted = true;
	  this.emit('abort');
	};
	
	Glob.prototype.pause = function () {
	  if (!this.paused) {
	    this.paused = true;
	    this.emit('pause');
	  }
	};
	
	Glob.prototype.resume = function () {
	  if (this.paused) {
	    this.emit('resume');
	    this.paused = false;
	    if (this._emitQueue.length) {
	      var eq = this._emitQueue.slice(0);
	      this._emitQueue.length = 0;
	      for (var i = 0; i < eq.length; i++) {
	        var e = eq[i];
	        this._emitMatch(e[0], e[1]);
	      }
	    }
	    if (this._processQueue.length) {
	      var pq = this._processQueue.slice(0);
	      this._processQueue.length = 0;
	      for (var i = 0; i < pq.length; i++) {
	        var p = pq[i];
	        this._processing--;
	        this._process(p[0], p[1], p[2], p[3]);
	      }
	    }
	  }
	};
	
	Glob.prototype._process = function (pattern, index, inGlobStar, cb) {
	  assert(this instanceof Glob);
	  assert(typeof cb === 'function');
	
	  if (this.aborted) return;
	
	  this._processing++;
	  if (this.paused) {
	    this._processQueue.push([pattern, index, inGlobStar, cb]);
	    return;
	  }
	
	  //console.error('PROCESS %d', this._processing, pattern)
	
	  // Get the first [n] parts of pattern that are all strings.
	  var n = 0;
	  while (typeof pattern[n] === 'string') {
	    n++;
	  }
	  // now n is the index of the first one that is *not* a string.
	
	  // see if there's anything else
	  var prefix;
	  switch (n) {
	    // if not, then this is rather simple
	    case pattern.length:
	      this._processSimple(pattern.join('/'), index, cb);
	      return;
	
	    case 0:
	      // pattern *starts* with some non-trivial item.
	      // going to readdir(cwd), but not include the prefix in matches.
	      prefix = null;
	      break;
	
	    default:
	      // pattern has some string bits in the front.
	      // whatever it starts with, whether that's 'absolute' like /foo/bar,
	      // or 'relative' like '../baz'
	      prefix = pattern.slice(0, n).join('/');
	      break;
	  }
	
	  var remain = pattern.slice(n);
	
	  // get the list of entries.
	  var read;
	  if (prefix === null) read = '.';else if (isAbsolute(prefix) || isAbsolute(pattern.join('/'))) {
	    if (!prefix || !isAbsolute(prefix)) prefix = '/' + prefix;
	    read = prefix;
	  } else read = prefix;
	
	  var abs = this._makeAbs(read);
	
	  //if ignored, skip _processing
	  if (childrenIgnored(this, read)) return cb();
	
	  var isGlobStar = remain[0] === minimatch.GLOBSTAR;
	  if (isGlobStar) this._processGlobStar(prefix, read, abs, remain, index, inGlobStar, cb);else this._processReaddir(prefix, read, abs, remain, index, inGlobStar, cb);
	};
	
	Glob.prototype._processReaddir = function (prefix, read, abs, remain, index, inGlobStar, cb) {
	  var self = this;
	  this._readdir(abs, inGlobStar, function (er, entries) {
	    return self._processReaddir2(prefix, read, abs, remain, index, inGlobStar, entries, cb);
	  });
	};
	
	Glob.prototype._processReaddir2 = function (prefix, read, abs, remain, index, inGlobStar, entries, cb) {
	
	  // if the abs isn't a dir, then nothing can match!
	  if (!entries) return cb();
	
	  // It will only match dot entries if it starts with a dot, or if
	  // dot is set.  Stuff like @(.foo|.bar) isn't allowed.
	  var pn = remain[0];
	  var negate = !!this.minimatch.negate;
	  var rawGlob = pn._glob;
	  var dotOk = this.dot || rawGlob.charAt(0) === '.';
	
	  var matchedEntries = [];
	  for (var i = 0; i < entries.length; i++) {
	    var e = entries[i];
	    if (e.charAt(0) !== '.' || dotOk) {
	      var m;
	      if (negate && !prefix) {
	        m = !e.match(pn);
	      } else {
	        m = e.match(pn);
	      }
	      if (m) matchedEntries.push(e);
	    }
	  }
	
	  //console.error('prd2', prefix, entries, remain[0]._glob, matchedEntries)
	
	  var len = matchedEntries.length;
	  // If there are no matched entries, then nothing matches.
	  if (len === 0) return cb();
	
	  // if this is the last remaining pattern bit, then no need for
	  // an additional stat *unless* the user has specified mark or
	  // stat explicitly.  We know they exist, since readdir returned
	  // them.
	
	  if (remain.length === 1 && !this.mark && !this.stat) {
	    if (!this.matches[index]) this.matches[index] = Object.create(null);
	
	    for (var i = 0; i < len; i++) {
	      var e = matchedEntries[i];
	      if (prefix) {
	        if (prefix !== '/') e = prefix + '/' + e;else e = prefix + e;
	      }
	
	      if (e.charAt(0) === '/' && !this.nomount) {
	        e = path.join(this.root, e);
	      }
	      this._emitMatch(index, e);
	    }
	    // This was the last one, and no stats were needed
	    return cb();
	  }
	
	  // now test all matched entries as stand-ins for that part
	  // of the pattern.
	  remain.shift();
	  for (var i = 0; i < len; i++) {
	    var e = matchedEntries[i];
	    var newPattern;
	    if (prefix) {
	      if (prefix !== '/') e = prefix + '/' + e;else e = prefix + e;
	    }
	    this._process([e].concat(remain), index, inGlobStar, cb);
	  }
	  cb();
	};
	
	Glob.prototype._emitMatch = function (index, e) {
	  if (this.aborted) return;
	
	  if (isIgnored(this, e)) return;
	
	  if (this.paused) {
	    this._emitQueue.push([index, e]);
	    return;
	  }
	
	  var abs = isAbsolute(e) ? e : this._makeAbs(e);
	
	  if (this.mark) e = this._mark(e);
	
	  if (this.absolute) e = abs;
	
	  if (this.matches[index][e]) return;
	
	  if (this.nodir) {
	    var c = this.cache[abs];
	    if (c === 'DIR' || Array.isArray(c)) return;
	  }
	
	  this.matches[index][e] = true;
	
	  var st = this.statCache[abs];
	  if (st) this.emit('stat', e, st);
	
	  this.emit('match', e);
	};
	
	Glob.prototype._readdirInGlobStar = function (abs, cb) {
	  if (this.aborted) return;
	
	  // follow all symlinked directories forever
	  // just proceed as if this is a non-globstar situation
	  if (this.follow) return this._readdir(abs, false, cb);
	
	  var lstatkey = 'lstat\0' + abs;
	  var self = this;
	  var lstatcb = inflight(lstatkey, lstatcb_);
	
	  if (lstatcb) fs.lstat(abs, lstatcb);
	
	  function lstatcb_(er, lstat) {
	    if (er && er.code === 'ENOENT') return cb();
	
	    var isSym = lstat && lstat.isSymbolicLink();
	    self.symlinks[abs] = isSym;
	
	    // If it's not a symlink or a dir, then it's definitely a regular file.
	    // don't bother doing a readdir in that case.
	    if (!isSym && lstat && !lstat.isDirectory()) {
	      self.cache[abs] = 'FILE';
	      cb();
	    } else self._readdir(abs, false, cb);
	  }
	};
	
	Glob.prototype._readdir = function (abs, inGlobStar, cb) {
	  if (this.aborted) return;
	
	  cb = inflight('readdir\0' + abs + '\0' + inGlobStar, cb);
	  if (!cb) return;
	
	  //console.error('RD %j %j', +inGlobStar, abs)
	  if (inGlobStar && !ownProp(this.symlinks, abs)) return this._readdirInGlobStar(abs, cb);
	
	  if (ownProp(this.cache, abs)) {
	    var c = this.cache[abs];
	    if (!c || c === 'FILE') return cb();
	
	    if (Array.isArray(c)) return cb(null, c);
	  }
	
	  var self = this;
	  fs.readdir(abs, readdirCb(this, abs, cb));
	};
	
	function readdirCb(self, abs, cb) {
	  return function (er, entries) {
	    if (er) self._readdirError(abs, er, cb);else self._readdirEntries(abs, entries, cb);
	  };
	}
	
	Glob.prototype._readdirEntries = function (abs, entries, cb) {
	  if (this.aborted) return;
	
	  // if we haven't asked to stat everything, then just
	  // assume that everything in there exists, so we can avoid
	  // having to stat it a second time.
	  if (!this.mark && !this.stat) {
	    for (var i = 0; i < entries.length; i++) {
	      var e = entries[i];
	      if (abs === '/') e = abs + e;else e = abs + '/' + e;
	      this.cache[e] = true;
	    }
	  }
	
	  this.cache[abs] = entries;
	  return cb(null, entries);
	};
	
	Glob.prototype._readdirError = function (f, er, cb) {
	  if (this.aborted) return;
	
	  // handle errors, and cache the information
	  switch (er.code) {
	    case 'ENOTSUP': // https://github.com/isaacs/node-glob/issues/205
	    case 'ENOTDIR':
	      // totally normal. means it *does* exist.
	      var abs = this._makeAbs(f);
	      this.cache[abs] = 'FILE';
	      if (abs === this.cwdAbs) {
	        var error = new Error(er.code + ' invalid cwd ' + this.cwd);
	        error.path = this.cwd;
	        error.code = er.code;
	        this.emit('error', error);
	        this.abort();
	      }
	      break;
	
	    case 'ENOENT': // not terribly unusual
	    case 'ELOOP':
	    case 'ENAMETOOLONG':
	    case 'UNKNOWN':
	      this.cache[this._makeAbs(f)] = false;
	      break;
	
	    default:
	      // some unusual error.  Treat as failure.
	      this.cache[this._makeAbs(f)] = false;
	      if (this.strict) {
	        this.emit('error', er);
	        // If the error is handled, then we abort
	        // if not, we threw out of here
	        this.abort();
	      }
	      if (!this.silent) console.error('glob error', er);
	      break;
	  }
	
	  return cb();
	};
	
	Glob.prototype._processGlobStar = function (prefix, read, abs, remain, index, inGlobStar, cb) {
	  var self = this;
	  this._readdir(abs, inGlobStar, function (er, entries) {
	    self._processGlobStar2(prefix, read, abs, remain, index, inGlobStar, entries, cb);
	  });
	};
	
	Glob.prototype._processGlobStar2 = function (prefix, read, abs, remain, index, inGlobStar, entries, cb) {
	  //console.error('pgs2', prefix, remain[0], entries)
	
	  // no entries means not a dir, so it can never have matches
	  // foo.txt/** doesn't match foo.txt
	  if (!entries) return cb();
	
	  // test without the globstar, and with every child both below
	  // and replacing the globstar.
	  var remainWithoutGlobStar = remain.slice(1);
	  var gspref = prefix ? [prefix] : [];
	  var noGlobStar = gspref.concat(remainWithoutGlobStar);
	
	  // the noGlobStar pattern exits the inGlobStar state
	  this._process(noGlobStar, index, false, cb);
	
	  var isSym = this.symlinks[abs];
	  var len = entries.length;
	
	  // If it's a symlink, and we're in a globstar, then stop
	  if (isSym && inGlobStar) return cb();
	
	  for (var i = 0; i < len; i++) {
	    var e = entries[i];
	    if (e.charAt(0) === '.' && !this.dot) continue;
	
	    // these two cases enter the inGlobStar state
	    var instead = gspref.concat(entries[i], remainWithoutGlobStar);
	    this._process(instead, index, true, cb);
	
	    var below = gspref.concat(entries[i], remain);
	    this._process(below, index, true, cb);
	  }
	
	  cb();
	};
	
	Glob.prototype._processSimple = function (prefix, index, cb) {
	  // XXX review this.  Shouldn't it be doing the mounting etc
	  // before doing stat?  kinda weird?
	  var self = this;
	  this._stat(prefix, function (er, exists) {
	    self._processSimple2(prefix, index, er, exists, cb);
	  });
	};
	Glob.prototype._processSimple2 = function (prefix, index, er, exists, cb) {
	
	  //console.error('ps2', prefix, exists)
	
	  if (!this.matches[index]) this.matches[index] = Object.create(null);
	
	  // If it doesn't exist, then just mark the lack of results
	  if (!exists) return cb();
	
	  if (prefix && isAbsolute(prefix) && !this.nomount) {
	    var trail = /[\/\\]$/.test(prefix);
	    if (prefix.charAt(0) === '/') {
	      prefix = path.join(this.root, prefix);
	    } else {
	      prefix = path.resolve(this.root, prefix);
	      if (trail) prefix += '/';
	    }
	  }
	
	  if (process.platform === 'win32') prefix = prefix.replace(/\\/g, '/');
	
	  // Mark this as a match
	  this._emitMatch(index, prefix);
	  cb();
	};
	
	// Returns either 'DIR', 'FILE', or false
	Glob.prototype._stat = function (f, cb) {
	  var abs = this._makeAbs(f);
	  var needDir = f.slice(-1) === '/';
	
	  if (f.length > this.maxLength) return cb();
	
	  if (!this.stat && ownProp(this.cache, abs)) {
	    var c = this.cache[abs];
	
	    if (Array.isArray(c)) c = 'DIR';
	
	    // It exists, but maybe not how we need it
	    if (!needDir || c === 'DIR') return cb(null, c);
	
	    if (needDir && c === 'FILE') return cb();
	
	    // otherwise we have to stat, because maybe c=true
	    // if we know it exists, but not what it is.
	  }
	
	  var exists;
	  var stat = this.statCache[abs];
	  if (stat !== undefined) {
	    if (stat === false) return cb(null, stat);else {
	      var type = stat.isDirectory() ? 'DIR' : 'FILE';
	      if (needDir && type === 'FILE') return cb();else return cb(null, type, stat);
	    }
	  }
	
	  var self = this;
	  var statcb = inflight('stat\0' + abs, lstatcb_);
	  if (statcb) fs.lstat(abs, statcb);
	
	  function lstatcb_(er, lstat) {
	    if (lstat && lstat.isSymbolicLink()) {
	      // If it's a symlink, then treat it as the target, unless
	      // the target does not exist, then treat it as a file.
	      return fs.stat(abs, function (er, stat) {
	        if (er) self._stat2(f, abs, null, lstat, cb);else self._stat2(f, abs, er, stat, cb);
	      });
	    } else {
	      self._stat2(f, abs, er, lstat, cb);
	    }
	  }
	};
	
	Glob.prototype._stat2 = function (f, abs, er, stat, cb) {
	  if (er && (er.code === 'ENOENT' || er.code === 'ENOTDIR')) {
	    this.statCache[abs] = false;
	    return cb();
	  }
	
	  var needDir = f.slice(-1) === '/';
	  this.statCache[abs] = stat;
	
	  if (abs.slice(-1) === '/' && stat && !stat.isDirectory()) return cb(null, false, stat);
	
	  var c = true;
	  if (stat) c = stat.isDirectory() ? 'DIR' : 'FILE';
	  this.cache[abs] = this.cache[abs] || c;
	
	  if (needDir && c === 'FILE') return cb();
	
	  return cb(null, c, stat);
	};
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ }),
/* 365 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';
	
	module.exports = realpath;
	realpath.realpath = realpath;
	realpath.sync = realpathSync;
	realpath.realpathSync = realpathSync;
	realpath.monkeypatch = monkeypatch;
	realpath.unmonkeypatch = unmonkeypatch;
	
	var fs = __webpack_require__(!(function webpackMissingModule() { var e = new Error("Cannot find module \"fs\""); e.code = 'MODULE_NOT_FOUND'; throw e; }()));
	var origRealpath = fs.realpath;
	var origRealpathSync = fs.realpathSync;
	
	var version = process.version;
	var ok = /^v[0-5]\./.test(version);
	var old = __webpack_require__(366);
	
	function newError(er) {
	  return er && er.syscall === 'realpath' && (er.code === 'ELOOP' || er.code === 'ENOMEM' || er.code === 'ENAMETOOLONG');
	}
	
	function realpath(p, cache, cb) {
	  if (ok) {
	    return origRealpath(p, cache, cb);
	  }
	
	  if (typeof cache === 'function') {
	    cb = cache;
	    cache = null;
	  }
	  origRealpath(p, cache, function (er, result) {
	    if (newError(er)) {
	      old.realpath(p, cache, cb);
	    } else {
	      cb(er, result);
	    }
	  });
	}
	
	function realpathSync(p, cache) {
	  if (ok) {
	    return origRealpathSync(p, cache);
	  }
	
	  try {
	    return origRealpathSync(p, cache);
	  } catch (er) {
	    if (newError(er)) {
	      return old.realpathSync(p, cache);
	    } else {
	      throw er;
	    }
	  }
	}
	
	function monkeypatch() {
	  fs.realpath = realpath;
	  fs.realpathSync = realpathSync;
	}
	
	function unmonkeypatch() {
	  fs.realpath = origRealpath;
	  fs.realpathSync = origRealpathSync;
	}
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ }),
/* 366 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';
	
	// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.
	
	var pathModule = __webpack_require__(270);
	var isWindows = process.platform === 'win32';
	var fs = __webpack_require__(!(function webpackMissingModule() { var e = new Error("Cannot find module \"fs\""); e.code = 'MODULE_NOT_FOUND'; throw e; }()));
	
	// JavaScript implementation of realpath, ported from node pre-v6
	
	var DEBUG = process.env.NODE_DEBUG && /fs/.test(process.env.NODE_DEBUG);
	
	function rethrow() {
	  // Only enable in debug mode. A backtrace uses ~1000 bytes of heap space and
	  // is fairly slow to generate.
	  var callback;
	  if (DEBUG) {
	    var backtrace = new Error();
	    callback = debugCallback;
	  } else callback = missingCallback;
	
	  return callback;
	
	  function debugCallback(err) {
	    if (err) {
	      backtrace.message = err.message;
	      err = backtrace;
	      missingCallback(err);
	    }
	  }
	
	  function missingCallback(err) {
	    if (err) {
	      if (process.throwDeprecation) throw err; // Forgot a callback but don't know where? Use NODE_DEBUG=fs
	      else if (!process.noDeprecation) {
	          var msg = 'fs: missing callback ' + (err.stack || err.message);
	          if (process.traceDeprecation) console.trace(msg);else console.error(msg);
	        }
	    }
	  }
	}
	
	function maybeCallback(cb) {
	  return typeof cb === 'function' ? cb : rethrow();
	}
	
	var normalize = pathModule.normalize;
	
	// Regexp that finds the next partion of a (partial) path
	// result is [base_with_slash, base], e.g. ['somedir/', 'somedir']
	if (isWindows) {
	  var nextPartRe = /(.*?)(?:[\/\\]+|$)/g;
	} else {
	  var nextPartRe = /(.*?)(?:[\/]+|$)/g;
	}
	
	// Regex to find the device root, including trailing slash. E.g. 'c:\\'.
	if (isWindows) {
	  var splitRootRe = /^(?:[a-zA-Z]:|[\\\/]{2}[^\\\/]+[\\\/][^\\\/]+)?[\\\/]*/;
	} else {
	  var splitRootRe = /^[\/]*/;
	}
	
	exports.realpathSync = function realpathSync(p, cache) {
	  // make p is absolute
	  p = pathModule.resolve(p);
	
	  if (cache && Object.prototype.hasOwnProperty.call(cache, p)) {
	    return cache[p];
	  }
	
	  var original = p,
	      seenLinks = {},
	      knownHard = {};
	
	  // current character position in p
	  var pos;
	  // the partial path so far, including a trailing slash if any
	  var current;
	  // the partial path without a trailing slash (except when pointing at a root)
	  var base;
	  // the partial path scanned in the previous round, with slash
	  var previous;
	
	  start();
	
	  function start() {
	    // Skip over roots
	    var m = splitRootRe.exec(p);
	    pos = m[0].length;
	    current = m[0];
	    base = m[0];
	    previous = '';
	
	    // On windows, check that the root exists. On unix there is no need.
	    if (isWindows && !knownHard[base]) {
	      fs.lstatSync(base);
	      knownHard[base] = true;
	    }
	  }
	
	  // walk down the path, swapping out linked pathparts for their real
	  // values
	  // NB: p.length changes.
	  while (pos < p.length) {
	    // find the next part
	    nextPartRe.lastIndex = pos;
	    var result = nextPartRe.exec(p);
	    previous = current;
	    current += result[0];
	    base = previous + result[1];
	    pos = nextPartRe.lastIndex;
	
	    // continue if not a symlink
	    if (knownHard[base] || cache && cache[base] === base) {
	      continue;
	    }
	
	    var resolvedLink;
	    if (cache && Object.prototype.hasOwnProperty.call(cache, base)) {
	      // some known symbolic link.  no need to stat again.
	      resolvedLink = cache[base];
	    } else {
	      var stat = fs.lstatSync(base);
	      if (!stat.isSymbolicLink()) {
	        knownHard[base] = true;
	        if (cache) cache[base] = base;
	        continue;
	      }
	
	      // read the link if it wasn't read before
	      // dev/ino always return 0 on windows, so skip the check.
	      var linkTarget = null;
	      if (!isWindows) {
	        var id = stat.dev.toString(32) + ':' + stat.ino.toString(32);
	        if (seenLinks.hasOwnProperty(id)) {
	          linkTarget = seenLinks[id];
	        }
	      }
	      if (linkTarget === null) {
	        fs.statSync(base);
	        linkTarget = fs.readlinkSync(base);
	      }
	      resolvedLink = pathModule.resolve(previous, linkTarget);
	      // track this, if given a cache.
	      if (cache) cache[base] = resolvedLink;
	      if (!isWindows) seenLinks[id] = linkTarget;
	    }
	
	    // resolve the link, then start over
	    p = pathModule.resolve(resolvedLink, p.slice(pos));
	    start();
	  }
	
	  if (cache) cache[original] = p;
	
	  return p;
	};
	
	exports.realpath = function realpath(p, cache, cb) {
	  if (typeof cb !== 'function') {
	    cb = maybeCallback(cache);
	    cache = null;
	  }
	
	  // make p is absolute
	  p = pathModule.resolve(p);
	
	  if (cache && Object.prototype.hasOwnProperty.call(cache, p)) {
	    return process.nextTick(cb.bind(null, null, cache[p]));
	  }
	
	  var original = p,
	      seenLinks = {},
	      knownHard = {};
	
	  // current character position in p
	  var pos;
	  // the partial path so far, including a trailing slash if any
	  var current;
	  // the partial path without a trailing slash (except when pointing at a root)
	  var base;
	  // the partial path scanned in the previous round, with slash
	  var previous;
	
	  start();
	
	  function start() {
	    // Skip over roots
	    var m = splitRootRe.exec(p);
	    pos = m[0].length;
	    current = m[0];
	    base = m[0];
	    previous = '';
	
	    // On windows, check that the root exists. On unix there is no need.
	    if (isWindows && !knownHard[base]) {
	      fs.lstat(base, function (err) {
	        if (err) return cb(err);
	        knownHard[base] = true;
	        LOOP();
	      });
	    } else {
	      process.nextTick(LOOP);
	    }
	  }
	
	  // walk down the path, swapping out linked pathparts for their real
	  // values
	  function LOOP() {
	    // stop if scanned past end of path
	    if (pos >= p.length) {
	      if (cache) cache[original] = p;
	      return cb(null, p);
	    }
	
	    // find the next part
	    nextPartRe.lastIndex = pos;
	    var result = nextPartRe.exec(p);
	    previous = current;
	    current += result[0];
	    base = previous + result[1];
	    pos = nextPartRe.lastIndex;
	
	    // continue if not a symlink
	    if (knownHard[base] || cache && cache[base] === base) {
	      return process.nextTick(LOOP);
	    }
	
	    if (cache && Object.prototype.hasOwnProperty.call(cache, base)) {
	      // known symbolic link.  no need to stat again.
	      return gotResolvedLink(cache[base]);
	    }
	
	    return fs.lstat(base, gotStat);
	  }
	
	  function gotStat(err, stat) {
	    if (err) return cb(err);
	
	    // if not a symlink, skip to the next path part
	    if (!stat.isSymbolicLink()) {
	      knownHard[base] = true;
	      if (cache) cache[base] = base;
	      return process.nextTick(LOOP);
	    }
	
	    // stat & read the link if not read before
	    // call gotTarget as soon as the link target is known
	    // dev/ino always return 0 on windows, so skip the check.
	    if (!isWindows) {
	      var id = stat.dev.toString(32) + ':' + stat.ino.toString(32);
	      if (seenLinks.hasOwnProperty(id)) {
	        return gotTarget(null, seenLinks[id], base);
	      }
	    }
	    fs.stat(base, function (err) {
	      if (err) return cb(err);
	
	      fs.readlink(base, function (err, target) {
	        if (!isWindows) seenLinks[id] = target;
	        gotTarget(err, target);
	      });
	    });
	  }
	
	  function gotTarget(err, target, base) {
	    if (err) return cb(err);
	
	    var resolvedLink = pathModule.resolve(previous, target);
	    if (cache) cache[base] = resolvedLink;
	    gotResolvedLink(resolvedLink);
	  }
	
	  function gotResolvedLink(resolvedLink) {
	    // resolve the link, then start over
	    p = pathModule.resolve(resolvedLink, p.slice(pos));
	    start();
	  }
	};
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ }),
/* 367 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports = minimatch;
	minimatch.Minimatch = Minimatch;
	
	var path = { sep: '/' };
	try {
	  path = __webpack_require__(270);
	} catch (er) {}
	
	var GLOBSTAR = minimatch.GLOBSTAR = Minimatch.GLOBSTAR = {};
	var expand = __webpack_require__(368);
	
	var plTypes = {
	  '!': { open: '(?:(?!(?:', close: '))[^/]*?)' },
	  '?': { open: '(?:', close: ')?' },
	  '+': { open: '(?:', close: ')+' },
	  '*': { open: '(?:', close: ')*' },
	  '@': { open: '(?:', close: ')' }
	};
	
	// any single thing other than /
	// don't need to escape / when using new RegExp()
	var qmark = '[^/]';
	
	// * => any number of characters
	var star = qmark + '*?';
	
	// ** when dots are allowed.  Anything goes, except .. and .
	// not (^ or / followed by one or two dots followed by $ or /),
	// followed by anything, any number of times.
	var twoStarDot = '(?:(?!(?:\\\/|^)(?:\\.{1,2})($|\\\/)).)*?';
	
	// not a ^ or / followed by a dot,
	// followed by anything, any number of times.
	var twoStarNoDot = '(?:(?!(?:\\\/|^)\\.).)*?';
	
	// characters that need to be escaped in RegExp.
	var reSpecials = charSet('().*{}+?[]^$\\!');
	
	// "abc" -> { a:true, b:true, c:true }
	function charSet(s) {
	  return s.split('').reduce(function (set, c) {
	    set[c] = true;
	    return set;
	  }, {});
	}
	
	// normalizes slashes.
	var slashSplit = /\/+/;
	
	minimatch.filter = filter;
	function filter(pattern, options) {
	  options = options || {};
	  return function (p, i, list) {
	    return minimatch(p, pattern, options);
	  };
	}
	
	function ext(a, b) {
	  a = a || {};
	  b = b || {};
	  var t = {};
	  Object.keys(b).forEach(function (k) {
	    t[k] = b[k];
	  });
	  Object.keys(a).forEach(function (k) {
	    t[k] = a[k];
	  });
	  return t;
	}
	
	minimatch.defaults = function (def) {
	  if (!def || !Object.keys(def).length) return minimatch;
	
	  var orig = minimatch;
	
	  var m = function minimatch(p, pattern, options) {
	    return orig.minimatch(p, pattern, ext(def, options));
	  };
	
	  m.Minimatch = function Minimatch(pattern, options) {
	    return new orig.Minimatch(pattern, ext(def, options));
	  };
	
	  return m;
	};
	
	Minimatch.defaults = function (def) {
	  if (!def || !Object.keys(def).length) return Minimatch;
	  return minimatch.defaults(def).Minimatch;
	};
	
	function minimatch(p, pattern, options) {
	  if (typeof pattern !== 'string') {
	    throw new TypeError('glob pattern string required');
	  }
	
	  if (!options) options = {};
	
	  // shortcut: comments match nothing.
	  if (!options.nocomment && pattern.charAt(0) === '#') {
	    return false;
	  }
	
	  // "" only matches ""
	  if (pattern.trim() === '') return p === '';
	
	  return new Minimatch(pattern, options).match(p);
	}
	
	function Minimatch(pattern, options) {
	  if (!(this instanceof Minimatch)) {
	    return new Minimatch(pattern, options);
	  }
	
	  if (typeof pattern !== 'string') {
	    throw new TypeError('glob pattern string required');
	  }
	
	  if (!options) options = {};
	  pattern = pattern.trim();
	
	  // windows support: need to use /, not \
	  if (path.sep !== '/') {
	    pattern = pattern.split(path.sep).join('/');
	  }
	
	  this.options = options;
	  this.set = [];
	  this.pattern = pattern;
	  this.regexp = null;
	  this.negate = false;
	  this.comment = false;
	  this.empty = false;
	
	  // make the set of regexps etc.
	  this.make();
	}
	
	Minimatch.prototype.debug = function () {};
	
	Minimatch.prototype.make = make;
	function make() {
	  // don't do it more than once.
	  if (this._made) return;
	
	  var pattern = this.pattern;
	  var options = this.options;
	
	  // empty patterns and comments match nothing.
	  if (!options.nocomment && pattern.charAt(0) === '#') {
	    this.comment = true;
	    return;
	  }
	  if (!pattern) {
	    this.empty = true;
	    return;
	  }
	
	  // step 1: figure out negation, etc.
	  this.parseNegate();
	
	  // step 2: expand braces
	  var set = this.globSet = this.braceExpand();
	
	  if (options.debug) this.debug = console.error;
	
	  this.debug(this.pattern, set);
	
	  // step 3: now we have a set, so turn each one into a series of path-portion
	  // matching patterns.
	  // These will be regexps, except in the case of "**", which is
	  // set to the GLOBSTAR object for globstar behavior,
	  // and will not contain any / characters
	  set = this.globParts = set.map(function (s) {
	    return s.split(slashSplit);
	  });
	
	  this.debug(this.pattern, set);
	
	  // glob --> regexps
	  set = set.map(function (s, si, set) {
	    return s.map(this.parse, this);
	  }, this);
	
	  this.debug(this.pattern, set);
	
	  // filter out everything that didn't compile properly.
	  set = set.filter(function (s) {
	    return s.indexOf(false) === -1;
	  });
	
	  this.debug(this.pattern, set);
	
	  this.set = set;
	}
	
	Minimatch.prototype.parseNegate = parseNegate;
	function parseNegate() {
	  var pattern = this.pattern;
	  var negate = false;
	  var options = this.options;
	  var negateOffset = 0;
	
	  if (options.nonegate) return;
	
	  for (var i = 0, l = pattern.length; i < l && pattern.charAt(i) === '!'; i++) {
	    negate = !negate;
	    negateOffset++;
	  }
	
	  if (negateOffset) this.pattern = pattern.substr(negateOffset);
	  this.negate = negate;
	}
	
	// Brace expansion:
	// a{b,c}d -> abd acd
	// a{b,}c -> abc ac
	// a{0..3}d -> a0d a1d a2d a3d
	// a{b,c{d,e}f}g -> abg acdfg acefg
	// a{b,c}d{e,f}g -> abdeg acdeg abdeg abdfg
	//
	// Invalid sets are not expanded.
	// a{2..}b -> a{2..}b
	// a{b}c -> a{b}c
	minimatch.braceExpand = function (pattern, options) {
	  return braceExpand(pattern, options);
	};
	
	Minimatch.prototype.braceExpand = braceExpand;
	
	function braceExpand(pattern, options) {
	  if (!options) {
	    if (this instanceof Minimatch) {
	      options = this.options;
	    } else {
	      options = {};
	    }
	  }
	
	  pattern = typeof pattern === 'undefined' ? this.pattern : pattern;
	
	  if (typeof pattern === 'undefined') {
	    throw new TypeError('undefined pattern');
	  }
	
	  if (options.nobrace || !pattern.match(/\{.*\}/)) {
	    // shortcut. no need to expand.
	    return [pattern];
	  }
	
	  return expand(pattern);
	}
	
	// parse a component of the expanded set.
	// At this point, no pattern may contain "/" in it
	// so we're going to return a 2d array, where each entry is the full
	// pattern, split on '/', and then turned into a regular expression.
	// A regexp is made at the end which joins each array with an
	// escaped /, and another full one which joins each regexp with |.
	//
	// Following the lead of Bash 4.1, note that "**" only has special meaning
	// when it is the *only* thing in a path portion.  Otherwise, any series
	// of * is equivalent to a single *.  Globstar behavior is enabled by
	// default, and can be disabled by setting options.noglobstar.
	Minimatch.prototype.parse = parse;
	var SUBPARSE = {};
	function parse(pattern, isSub) {
	  if (pattern.length > 1024 * 64) {
	    throw new TypeError('pattern is too long');
	  }
	
	  var options = this.options;
	
	  // shortcuts
	  if (!options.noglobstar && pattern === '**') return GLOBSTAR;
	  if (pattern === '') return '';
	
	  var re = '';
	  var hasMagic = !!options.nocase;
	  var escaping = false;
	  // ? => one single character
	  var patternListStack = [];
	  var negativeLists = [];
	  var stateChar;
	  var inClass = false;
	  var reClassStart = -1;
	  var classStart = -1;
	  // . and .. never match anything that doesn't start with .,
	  // even when options.dot is set.
	  var patternStart = pattern.charAt(0) === '.' ? '' // anything
	  // not (start or / followed by . or .. followed by / or end)
	  : options.dot ? '(?!(?:^|\\\/)\\.{1,2}(?:$|\\\/))' : '(?!\\.)';
	  var self = this;
	
	  function clearStateChar() {
	    if (stateChar) {
	      // we had some state-tracking character
	      // that wasn't consumed by this pass.
	      switch (stateChar) {
	        case '*':
	          re += star;
	          hasMagic = true;
	          break;
	        case '?':
	          re += qmark;
	          hasMagic = true;
	          break;
	        default:
	          re += '\\' + stateChar;
	          break;
	      }
	      self.debug('clearStateChar %j %j', stateChar, re);
	      stateChar = false;
	    }
	  }
	
	  for (var i = 0, len = pattern.length, c; i < len && (c = pattern.charAt(i)); i++) {
	    this.debug('%s\t%s %s %j', pattern, i, re, c);
	
	    // skip over any that are escaped.
	    if (escaping && reSpecials[c]) {
	      re += '\\' + c;
	      escaping = false;
	      continue;
	    }
	
	    switch (c) {
	      case '/':
	        // completely not allowed, even escaped.
	        // Should already be path-split by now.
	        return false;
	
	      case '\\':
	        clearStateChar();
	        escaping = true;
	        continue;
	
	      // the various stateChar values
	      // for the "extglob" stuff.
	      case '?':
	      case '*':
	      case '+':
	      case '@':
	      case '!':
	        this.debug('%s\t%s %s %j <-- stateChar', pattern, i, re, c);
	
	        // all of those are literals inside a class, except that
	        // the glob [!a] means [^a] in regexp
	        if (inClass) {
	          this.debug('  in class');
	          if (c === '!' && i === classStart + 1) c = '^';
	          re += c;
	          continue;
	        }
	
	        // if we already have a stateChar, then it means
	        // that there was something like ** or +? in there.
	        // Handle the stateChar, then proceed with this one.
	        self.debug('call clearStateChar %j', stateChar);
	        clearStateChar();
	        stateChar = c;
	        // if extglob is disabled, then +(asdf|foo) isn't a thing.
	        // just clear the statechar *now*, rather than even diving into
	        // the patternList stuff.
	        if (options.noext) clearStateChar();
	        continue;
	
	      case '(':
	        if (inClass) {
	          re += '(';
	          continue;
	        }
	
	        if (!stateChar) {
	          re += '\\(';
	          continue;
	        }
	
	        patternListStack.push({
	          type: stateChar,
	          start: i - 1,
	          reStart: re.length,
	          open: plTypes[stateChar].open,
	          close: plTypes[stateChar].close
	        });
	        // negation is (?:(?!js)[^/]*)
	        re += stateChar === '!' ? '(?:(?!(?:' : '(?:';
	        this.debug('plType %j %j', stateChar, re);
	        stateChar = false;
	        continue;
	
	      case ')':
	        if (inClass || !patternListStack.length) {
	          re += '\\)';
	          continue;
	        }
	
	        clearStateChar();
	        hasMagic = true;
	        var pl = patternListStack.pop();
	        // negation is (?:(?!js)[^/]*)
	        // The others are (?:<pattern>)<type>
	        re += pl.close;
	        if (pl.type === '!') {
	          negativeLists.push(pl);
	        }
	        pl.reEnd = re.length;
	        continue;
	
	      case '|':
	        if (inClass || !patternListStack.length || escaping) {
	          re += '\\|';
	          escaping = false;
	          continue;
	        }
	
	        clearStateChar();
	        re += '|';
	        continue;
	
	      // these are mostly the same in regexp and glob
	      case '[':
	        // swallow any state-tracking char before the [
	        clearStateChar();
	
	        if (inClass) {
	          re += '\\' + c;
	          continue;
	        }
	
	        inClass = true;
	        classStart = i;
	        reClassStart = re.length;
	        re += c;
	        continue;
	
	      case ']':
	        //  a right bracket shall lose its special
	        //  meaning and represent itself in
	        //  a bracket expression if it occurs
	        //  first in the list.  -- POSIX.2 2.8.3.2
	        if (i === classStart + 1 || !inClass) {
	          re += '\\' + c;
	          escaping = false;
	          continue;
	        }
	
	        // handle the case where we left a class open.
	        // "[z-a]" is valid, equivalent to "\[z-a\]"
	        if (inClass) {
	          // split where the last [ was, make sure we don't have
	          // an invalid re. if so, re-walk the contents of the
	          // would-be class to re-translate any characters that
	          // were passed through as-is
	          // TODO: It would probably be faster to determine this
	          // without a try/catch and a new RegExp, but it's tricky
	          // to do safely.  For now, this is safe and works.
	          var cs = pattern.substring(classStart + 1, i);
	          try {
	            RegExp('[' + cs + ']');
	          } catch (er) {
	            // not a valid class!
	            var sp = this.parse(cs, SUBPARSE);
	            re = re.substr(0, reClassStart) + '\\[' + sp[0] + '\\]';
	            hasMagic = hasMagic || sp[1];
	            inClass = false;
	            continue;
	          }
	        }
	
	        // finish up the class.
	        hasMagic = true;
	        inClass = false;
	        re += c;
	        continue;
	
	      default:
	        // swallow any state char that wasn't consumed
	        clearStateChar();
	
	        if (escaping) {
	          // no need
	          escaping = false;
	        } else if (reSpecials[c] && !(c === '^' && inClass)) {
	          re += '\\';
	        }
	
	        re += c;
	
	    } // switch
	  } // for
	
	  // handle the case where we left a class open.
	  // "[abc" is valid, equivalent to "\[abc"
	  if (inClass) {
	    // split where the last [ was, and escape it
	    // this is a huge pita.  We now have to re-walk
	    // the contents of the would-be class to re-translate
	    // any characters that were passed through as-is
	    cs = pattern.substr(classStart + 1);
	    sp = this.parse(cs, SUBPARSE);
	    re = re.substr(0, reClassStart) + '\\[' + sp[0];
	    hasMagic = hasMagic || sp[1];
	  }
	
	  // handle the case where we had a +( thing at the *end*
	  // of the pattern.
	  // each pattern list stack adds 3 chars, and we need to go through
	  // and escape any | chars that were passed through as-is for the regexp.
	  // Go through and escape them, taking care not to double-escape any
	  // | chars that were already escaped.
	  for (pl = patternListStack.pop(); pl; pl = patternListStack.pop()) {
	    var tail = re.slice(pl.reStart + pl.open.length);
	    this.debug('setting tail', re, pl);
	    // maybe some even number of \, then maybe 1 \, followed by a |
	    tail = tail.replace(/((?:\\{2}){0,64})(\\?)\|/g, function (_, $1, $2) {
	      if (!$2) {
	        // the | isn't already escaped, so escape it.
	        $2 = '\\';
	      }
	
	      // need to escape all those slashes *again*, without escaping the
	      // one that we need for escaping the | character.  As it works out,
	      // escaping an even number of slashes can be done by simply repeating
	      // it exactly after itself.  That's why this trick works.
	      //
	      // I am sorry that you have to see this.
	      return $1 + $1 + $2 + '|';
	    });
	
	    this.debug('tail=%j\n   %s', tail, tail, pl, re);
	    var t = pl.type === '*' ? star : pl.type === '?' ? qmark : '\\' + pl.type;
	
	    hasMagic = true;
	    re = re.slice(0, pl.reStart) + t + '\\(' + tail;
	  }
	
	  // handle trailing things that only matter at the very end.
	  clearStateChar();
	  if (escaping) {
	    // trailing \\
	    re += '\\\\';
	  }
	
	  // only need to apply the nodot start if the re starts with
	  // something that could conceivably capture a dot
	  var addPatternStart = false;
	  switch (re.charAt(0)) {
	    case '.':
	    case '[':
	    case '(':
	      addPatternStart = true;
	  }
	
	  // Hack to work around lack of negative lookbehind in JS
	  // A pattern like: *.!(x).!(y|z) needs to ensure that a name
	  // like 'a.xyz.yz' doesn't match.  So, the first negative
	  // lookahead, has to look ALL the way ahead, to the end of
	  // the pattern.
	  for (var n = negativeLists.length - 1; n > -1; n--) {
	    var nl = negativeLists[n];
	
	    var nlBefore = re.slice(0, nl.reStart);
	    var nlFirst = re.slice(nl.reStart, nl.reEnd - 8);
	    var nlLast = re.slice(nl.reEnd - 8, nl.reEnd);
	    var nlAfter = re.slice(nl.reEnd);
	
	    nlLast += nlAfter;
	
	    // Handle nested stuff like *(*.js|!(*.json)), where open parens
	    // mean that we should *not* include the ) in the bit that is considered
	    // "after" the negated section.
	    var openParensBefore = nlBefore.split('(').length - 1;
	    var cleanAfter = nlAfter;
	    for (i = 0; i < openParensBefore; i++) {
	      cleanAfter = cleanAfter.replace(/\)[+*?]?/, '');
	    }
	    nlAfter = cleanAfter;
	
	    var dollar = '';
	    if (nlAfter === '' && isSub !== SUBPARSE) {
	      dollar = '$';
	    }
	    var newRe = nlBefore + nlFirst + nlAfter + dollar + nlLast;
	    re = newRe;
	  }
	
	  // if the re is not "" at this point, then we need to make sure
	  // it doesn't match against an empty path part.
	  // Otherwise a/* will match a/, which it should not.
	  if (re !== '' && hasMagic) {
	    re = '(?=.)' + re;
	  }
	
	  if (addPatternStart) {
	    re = patternStart + re;
	  }
	
	  // parsing just a piece of a larger pattern.
	  if (isSub === SUBPARSE) {
	    return [re, hasMagic];
	  }
	
	  // skip the regexp for non-magical patterns
	  // unescape anything in it, though, so that it'll be
	  // an exact match against a file etc.
	  if (!hasMagic) {
	    return globUnescape(pattern);
	  }
	
	  var flags = options.nocase ? 'i' : '';
	  try {
	    var regExp = new RegExp('^' + re + '$', flags);
	  } catch (er) {
	    // If it was an invalid regular expression, then it can't match
	    // anything.  This trick looks for a character after the end of
	    // the string, which is of course impossible, except in multi-line
	    // mode, but it's not a /m regex.
	    return new RegExp('$.');
	  }
	
	  regExp._glob = pattern;
	  regExp._src = re;
	
	  return regExp;
	}
	
	minimatch.makeRe = function (pattern, options) {
	  return new Minimatch(pattern, options || {}).makeRe();
	};
	
	Minimatch.prototype.makeRe = makeRe;
	function makeRe() {
	  if (this.regexp || this.regexp === false) return this.regexp;
	
	  // at this point, this.set is a 2d array of partial
	  // pattern strings, or "**".
	  //
	  // It's better to use .match().  This function shouldn't
	  // be used, really, but it's pretty convenient sometimes,
	  // when you just want to work with a regex.
	  var set = this.set;
	
	  if (!set.length) {
	    this.regexp = false;
	    return this.regexp;
	  }
	  var options = this.options;
	
	  var twoStar = options.noglobstar ? star : options.dot ? twoStarDot : twoStarNoDot;
	  var flags = options.nocase ? 'i' : '';
	
	  var re = set.map(function (pattern) {
	    return pattern.map(function (p) {
	      return p === GLOBSTAR ? twoStar : typeof p === 'string' ? regExpEscape(p) : p._src;
	    }).join('\\\/');
	  }).join('|');
	
	  // must match entire pattern
	  // ending in a * or ** will make it less strict.
	  re = '^(?:' + re + ')$';
	
	  // can match anything, as long as it's not this.
	  if (this.negate) re = '^(?!' + re + ').*$';
	
	  try {
	    this.regexp = new RegExp(re, flags);
	  } catch (ex) {
	    this.regexp = false;
	  }
	  return this.regexp;
	}
	
	minimatch.match = function (list, pattern, options) {
	  options = options || {};
	  var mm = new Minimatch(pattern, options);
	  list = list.filter(function (f) {
	    return mm.match(f);
	  });
	  if (mm.options.nonull && !list.length) {
	    list.push(pattern);
	  }
	  return list;
	};
	
	Minimatch.prototype.match = match;
	function match(f, partial) {
	  this.debug('match', f, this.pattern);
	  // short-circuit in the case of busted things.
	  // comments, etc.
	  if (this.comment) return false;
	  if (this.empty) return f === '';
	
	  if (f === '/' && partial) return true;
	
	  var options = this.options;
	
	  // windows: need to use /, not \
	  if (path.sep !== '/') {
	    f = f.split(path.sep).join('/');
	  }
	
	  // treat the test path as a set of pathparts.
	  f = f.split(slashSplit);
	  this.debug(this.pattern, 'split', f);
	
	  // just ONE of the pattern sets in this.set needs to match
	  // in order for it to be valid.  If negating, then just one
	  // match means that we have failed.
	  // Either way, return on the first hit.
	
	  var set = this.set;
	  this.debug(this.pattern, 'set', set);
	
	  // Find the basename of the path by looking for the last non-empty segment
	  var filename;
	  var i;
	  for (i = f.length - 1; i >= 0; i--) {
	    filename = f[i];
	    if (filename) break;
	  }
	
	  for (i = 0; i < set.length; i++) {
	    var pattern = set[i];
	    var file = f;
	    if (options.matchBase && pattern.length === 1) {
	      file = [filename];
	    }
	    var hit = this.matchOne(file, pattern, partial);
	    if (hit) {
	      if (options.flipNegate) return true;
	      return !this.negate;
	    }
	  }
	
	  // didn't get any hits.  this is success if it's a negative
	  // pattern, failure otherwise.
	  if (options.flipNegate) return false;
	  return this.negate;
	}
	
	// set partial to true to test if, for example,
	// "/a/b" matches the start of "/*/b/*/d"
	// Partial means, if you run out of file before you run
	// out of pattern, then that's fine, as long as all
	// the parts match.
	Minimatch.prototype.matchOne = function (file, pattern, partial) {
	  var options = this.options;
	
	  this.debug('matchOne', { 'this': this, file: file, pattern: pattern });
	
	  this.debug('matchOne', file.length, pattern.length);
	
	  for (var fi = 0, pi = 0, fl = file.length, pl = pattern.length; fi < fl && pi < pl; fi++, pi++) {
	    this.debug('matchOne loop');
	    var p = pattern[pi];
	    var f = file[fi];
	
	    this.debug(pattern, p, f);
	
	    // should be impossible.
	    // some invalid regexp stuff in the set.
	    if (p === false) return false;
	
	    if (p === GLOBSTAR) {
	      this.debug('GLOBSTAR', [pattern, p, f]);
	
	      // "**"
	      // a/**/b/**/c would match the following:
	      // a/b/x/y/z/c
	      // a/x/y/z/b/c
	      // a/b/x/b/x/c
	      // a/b/c
	      // To do this, take the rest of the pattern after
	      // the **, and see if it would match the file remainder.
	      // If so, return success.
	      // If not, the ** "swallows" a segment, and try again.
	      // This is recursively awful.
	      //
	      // a/**/b/**/c matching a/b/x/y/z/c
	      // - a matches a
	      // - doublestar
	      //   - matchOne(b/x/y/z/c, b/**/c)
	      //     - b matches b
	      //     - doublestar
	      //       - matchOne(x/y/z/c, c) -> no
	      //       - matchOne(y/z/c, c) -> no
	      //       - matchOne(z/c, c) -> no
	      //       - matchOne(c, c) yes, hit
	      var fr = fi;
	      var pr = pi + 1;
	      if (pr === pl) {
	        this.debug('** at the end');
	        // a ** at the end will just swallow the rest.
	        // We have found a match.
	        // however, it will not swallow /.x, unless
	        // options.dot is set.
	        // . and .. are *never* matched by **, for explosively
	        // exponential reasons.
	        for (; fi < fl; fi++) {
	          if (file[fi] === '.' || file[fi] === '..' || !options.dot && file[fi].charAt(0) === '.') return false;
	        }
	        return true;
	      }
	
	      // ok, let's see if we can swallow whatever we can.
	      while (fr < fl) {
	        var swallowee = file[fr];
	
	        this.debug('\nglobstar while', file, fr, pattern, pr, swallowee);
	
	        // XXX remove this slice.  Just pass the start index.
	        if (this.matchOne(file.slice(fr), pattern.slice(pr), partial)) {
	          this.debug('globstar found match!', fr, fl, swallowee);
	          // found a match.
	          return true;
	        } else {
	          // can't swallow "." or ".." ever.
	          // can only swallow ".foo" when explicitly asked.
	          if (swallowee === '.' || swallowee === '..' || !options.dot && swallowee.charAt(0) === '.') {
	            this.debug('dot detected!', file, fr, pattern, pr);
	            break;
	          }
	
	          // ** swallows a segment, and continue.
	          this.debug('globstar swallow a segment, and continue');
	          fr++;
	        }
	      }
	
	      // no match was found.
	      // However, in partial mode, we can't say this is necessarily over.
	      // If there's more *pattern* left, then
	      if (partial) {
	        // ran out of file
	        this.debug('\n>>> no match, partial?', file, fr, pattern, pr);
	        if (fr === fl) return true;
	      }
	      return false;
	    }
	
	    // something other than **
	    // non-magic patterns just have to match exactly
	    // patterns with magic have been turned into regexps.
	    var hit;
	    if (typeof p === 'string') {
	      if (options.nocase) {
	        hit = f.toLowerCase() === p.toLowerCase();
	      } else {
	        hit = f === p;
	      }
	      this.debug('string match', p, f, hit);
	    } else {
	      hit = f.match(p);
	      this.debug('pattern match', p, f, hit);
	    }
	
	    if (!hit) return false;
	  }
	
	  // Note: ending in / means that we'll get a final ""
	  // at the end of the pattern.  This can only match a
	  // corresponding "" at the end of the file.
	  // If the file ends in /, then it can only match a
	  // a pattern that ends in /, unless the pattern just
	  // doesn't have any more for it. But, a/b/ should *not*
	  // match "a/b/*", even though "" matches against the
	  // [^/]*? pattern, except in partial mode, where it might
	  // simply not be reached yet.
	  // However, a/b/ should still satisfy a/*
	
	  // now either we fell off the end of the pattern, or we're done.
	  if (fi === fl && pi === pl) {
	    // ran out of pattern and filename at the same time.
	    // an exact hit!
	    return true;
	  } else if (fi === fl) {
	    // ran out of file, but still had pattern left.
	    // this is ok if we're doing the match as part of
	    // a glob fs traversal.
	    return partial;
	  } else if (pi === pl) {
	    // ran out of pattern, still have file left.
	    // this is only acceptable if we're on the very last
	    // empty segment of a file with a trailing slash.
	    // a/* should match a/b/
	    var emptyFileEnd = fi === fl - 1 && file[fi] === '';
	    return emptyFileEnd;
	  }
	
	  // should be unreachable.
	  throw new Error('wtf?');
	};
	
	// replace stuff like \* with *
	function globUnescape(s) {
	  return s.replace(/\\(.)/g, '$1');
	}
	
	function regExpEscape(s) {
	  return s.replace(/[-[\]{}()*+?.,\\^$|#\s]/g, '\\$&');
	}

/***/ }),
/* 368 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var concatMap = __webpack_require__(369);
	var balanced = __webpack_require__(370);
	
	module.exports = expandTop;
	
	var escSlash = '\0SLASH' + Math.random() + '\0';
	var escOpen = '\0OPEN' + Math.random() + '\0';
	var escClose = '\0CLOSE' + Math.random() + '\0';
	var escComma = '\0COMMA' + Math.random() + '\0';
	var escPeriod = '\0PERIOD' + Math.random() + '\0';
	
	function numeric(str) {
	  return parseInt(str, 10) == str ? parseInt(str, 10) : str.charCodeAt(0);
	}
	
	function escapeBraces(str) {
	  return str.split('\\\\').join(escSlash).split('\\{').join(escOpen).split('\\}').join(escClose).split('\\,').join(escComma).split('\\.').join(escPeriod);
	}
	
	function unescapeBraces(str) {
	  return str.split(escSlash).join('\\').split(escOpen).join('{').split(escClose).join('}').split(escComma).join(',').split(escPeriod).join('.');
	}
	
	// Basically just str.split(","), but handling cases
	// where we have nested braced sections, which should be
	// treated as individual members, like {a,{b,c},d}
	function parseCommaParts(str) {
	  if (!str) return [''];
	
	  var parts = [];
	  var m = balanced('{', '}', str);
	
	  if (!m) return str.split(',');
	
	  var pre = m.pre;
	  var body = m.body;
	  var post = m.post;
	  var p = pre.split(',');
	
	  p[p.length - 1] += '{' + body + '}';
	  var postParts = parseCommaParts(post);
	  if (post.length) {
	    p[p.length - 1] += postParts.shift();
	    p.push.apply(p, postParts);
	  }
	
	  parts.push.apply(parts, p);
	
	  return parts;
	}
	
	function expandTop(str) {
	  if (!str) return [];
	
	  // I don't know why Bash 4.3 does this, but it does.
	  // Anything starting with {} will have the first two bytes preserved
	  // but *only* at the top level, so {},a}b will not expand to anything,
	  // but a{},b}c will be expanded to [a}c,abc].
	  // One could argue that this is a bug in Bash, but since the goal of
	  // this module is to match Bash's rules, we escape a leading {}
	  if (str.substr(0, 2) === '{}') {
	    str = '\\{\\}' + str.substr(2);
	  }
	
	  return expand(escapeBraces(str), true).map(unescapeBraces);
	}
	
	function identity(e) {
	  return e;
	}
	
	function embrace(str) {
	  return '{' + str + '}';
	}
	function isPadded(el) {
	  return (/^-?0\d/.test(el)
	  );
	}
	
	function lte(i, y) {
	  return i <= y;
	}
	function gte(i, y) {
	  return i >= y;
	}
	
	function expand(str, isTop) {
	  var expansions = [];
	
	  var m = balanced('{', '}', str);
	  if (!m || /\$$/.test(m.pre)) return [str];
	
	  var isNumericSequence = /^-?\d+\.\.-?\d+(?:\.\.-?\d+)?$/.test(m.body);
	  var isAlphaSequence = /^[a-zA-Z]\.\.[a-zA-Z](?:\.\.-?\d+)?$/.test(m.body);
	  var isSequence = isNumericSequence || isAlphaSequence;
	  var isOptions = m.body.indexOf(',') >= 0;
	  if (!isSequence && !isOptions) {
	    // {a},b}
	    if (m.post.match(/,.*\}/)) {
	      str = m.pre + '{' + m.body + escClose + m.post;
	      return expand(str);
	    }
	    return [str];
	  }
	
	  var n;
	  if (isSequence) {
	    n = m.body.split(/\.\./);
	  } else {
	    n = parseCommaParts(m.body);
	    if (n.length === 1) {
	      // x{{a,b}}y ==> x{a}y x{b}y
	      n = expand(n[0], false).map(embrace);
	      if (n.length === 1) {
	        var post = m.post.length ? expand(m.post, false) : [''];
	        return post.map(function (p) {
	          return m.pre + n[0] + p;
	        });
	      }
	    }
	  }
	
	  // at this point, n is the parts, and we know it's not a comma set
	  // with a single entry.
	
	  // no need to expand pre, since it is guaranteed to be free of brace-sets
	  var pre = m.pre;
	  var post = m.post.length ? expand(m.post, false) : [''];
	
	  var N;
	
	  if (isSequence) {
	    var x = numeric(n[0]);
	    var y = numeric(n[1]);
	    var width = Math.max(n[0].length, n[1].length);
	    var incr = n.length == 3 ? Math.abs(numeric(n[2])) : 1;
	    var test = lte;
	    var reverse = y < x;
	    if (reverse) {
	      incr *= -1;
	      test = gte;
	    }
	    var pad = n.some(isPadded);
	
	    N = [];
	
	    for (var i = x; test(i, y); i += incr) {
	      var c;
	      if (isAlphaSequence) {
	        c = String.fromCharCode(i);
	        if (c === '\\') c = '';
	      } else {
	        c = String(i);
	        if (pad) {
	          var need = width - c.length;
	          if (need > 0) {
	            var z = new Array(need + 1).join('0');
	            if (i < 0) c = '-' + z + c.slice(1);else c = z + c;
	          }
	        }
	      }
	      N.push(c);
	    }
	  } else {
	    N = concatMap(n, function (el) {
	      return expand(el, false);
	    });
	  }
	
	  for (var j = 0; j < N.length; j++) {
	    for (var k = 0; k < post.length; k++) {
	      var expansion = pre + N[j] + post[k];
	      if (!isTop || isSequence || expansion) expansions.push(expansion);
	    }
	  }
	
	  return expansions;
	}

/***/ }),
/* 369 */
/***/ (function(module, exports) {

	'use strict';
	
	module.exports = function (xs, fn) {
	    var res = [];
	    for (var i = 0; i < xs.length; i++) {
	        var x = fn(xs[i], i);
	        if (isArray(x)) res.push.apply(res, x);else res.push(x);
	    }
	    return res;
	};
	
	var isArray = Array.isArray || function (xs) {
	    return Object.prototype.toString.call(xs) === '[object Array]';
	};

/***/ }),
/* 370 */
/***/ (function(module, exports) {

	"use strict";
	
	module.exports = balanced;
	function balanced(a, b, str) {
	  if (a instanceof RegExp) a = maybeMatch(a, str);
	  if (b instanceof RegExp) b = maybeMatch(b, str);
	
	  var r = range(a, b, str);
	
	  return r && {
	    start: r[0],
	    end: r[1],
	    pre: str.slice(0, r[0]),
	    body: str.slice(r[0] + a.length, r[1]),
	    post: str.slice(r[1] + b.length)
	  };
	}
	
	function maybeMatch(reg, str) {
	  var m = str.match(reg);
	  return m ? m[0] : null;
	}
	
	balanced.range = range;
	function range(a, b, str) {
	  var begs, beg, left, right, result;
	  var ai = str.indexOf(a);
	  var bi = str.indexOf(b, ai + 1);
	  var i = ai;
	
	  if (ai >= 0 && bi > 0) {
	    begs = [];
	    left = str.length;
	
	    while (i >= 0 && !result) {
	      if (i == ai) {
	        begs.push(i);
	        ai = str.indexOf(a, i + 1);
	      } else if (begs.length == 1) {
	        result = [begs.pop(), bi];
	      } else {
	        beg = begs.pop();
	        if (beg < left) {
	          left = beg;
	          right = bi;
	        }
	
	        bi = str.indexOf(b, i + 1);
	      }
	
	      i = ai < bi && ai >= 0 ? ai : bi;
	    }
	
	    if (begs.length) {
	      result = [left, right];
	    }
	  }
	
	  return result;
	}

/***/ }),
/* 371 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';
	
	function posix(path) {
		return path.charAt(0) === '/';
	}
	
	function win32(path) {
		// https://github.com/nodejs/node/blob/b3fcc245fb25539909ef1d5eaa01dbf92e168633/lib/path.js#L56
		var splitDeviceRe = /^([a-zA-Z]:|[\\\/]{2}[^\\\/]+[\\\/]+[^\\\/]+)?([\\\/])?([\s\S]*?)$/;
		var result = splitDeviceRe.exec(path);
		var device = result[1] || '';
		var isUnc = Boolean(device && device.charAt(1) !== ':');
	
		// UNC paths are always absolute
		return Boolean(result[2] || isUnc);
	}
	
	module.exports = process.platform === 'win32' ? win32 : posix;
	module.exports.posix = posix;
	module.exports.win32 = win32;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ }),
/* 372 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';
	
	module.exports = globSync;
	globSync.GlobSync = GlobSync;
	
	var fs = __webpack_require__(!(function webpackMissingModule() { var e = new Error("Cannot find module \"fs\""); e.code = 'MODULE_NOT_FOUND'; throw e; }()));
	var rp = __webpack_require__(365);
	var minimatch = __webpack_require__(367);
	var Minimatch = minimatch.Minimatch;
	var Glob = __webpack_require__(364).Glob;
	var util = __webpack_require__(271);
	var path = __webpack_require__(270);
	var assert = __webpack_require__(336);
	var isAbsolute = __webpack_require__(371);
	var common = __webpack_require__(373);
	var alphasort = common.alphasort;
	var alphasorti = common.alphasorti;
	var setopts = common.setopts;
	var ownProp = common.ownProp;
	var childrenIgnored = common.childrenIgnored;
	var isIgnored = common.isIgnored;
	
	function globSync(pattern, options) {
	  if (typeof options === 'function' || arguments.length === 3) throw new TypeError('callback provided to sync glob\n' + 'See: https://github.com/isaacs/node-glob/issues/167');
	
	  return new GlobSync(pattern, options).found;
	}
	
	function GlobSync(pattern, options) {
	  if (!pattern) throw new Error('must provide pattern');
	
	  if (typeof options === 'function' || arguments.length === 3) throw new TypeError('callback provided to sync glob\n' + 'See: https://github.com/isaacs/node-glob/issues/167');
	
	  if (!(this instanceof GlobSync)) return new GlobSync(pattern, options);
	
	  setopts(this, pattern, options);
	
	  if (this.noprocess) return this;
	
	  var n = this.minimatch.set.length;
	  this.matches = new Array(n);
	  for (var i = 0; i < n; i++) {
	    this._process(this.minimatch.set[i], i, false);
	  }
	  this._finish();
	}
	
	GlobSync.prototype._finish = function () {
	  assert(this instanceof GlobSync);
	  if (this.realpath) {
	    var self = this;
	    this.matches.forEach(function (matchset, index) {
	      var set = self.matches[index] = Object.create(null);
	      for (var p in matchset) {
	        try {
	          p = self._makeAbs(p);
	          var real = rp.realpathSync(p, self.realpathCache);
	          set[real] = true;
	        } catch (er) {
	          if (er.syscall === 'stat') set[self._makeAbs(p)] = true;else throw er;
	        }
	      }
	    });
	  }
	  common.finish(this);
	};
	
	GlobSync.prototype._process = function (pattern, index, inGlobStar) {
	  assert(this instanceof GlobSync);
	
	  // Get the first [n] parts of pattern that are all strings.
	  var n = 0;
	  while (typeof pattern[n] === 'string') {
	    n++;
	  }
	  // now n is the index of the first one that is *not* a string.
	
	  // See if there's anything else
	  var prefix;
	  switch (n) {
	    // if not, then this is rather simple
	    case pattern.length:
	      this._processSimple(pattern.join('/'), index);
	      return;
	
	    case 0:
	      // pattern *starts* with some non-trivial item.
	      // going to readdir(cwd), but not include the prefix in matches.
	      prefix = null;
	      break;
	
	    default:
	      // pattern has some string bits in the front.
	      // whatever it starts with, whether that's 'absolute' like /foo/bar,
	      // or 'relative' like '../baz'
	      prefix = pattern.slice(0, n).join('/');
	      break;
	  }
	
	  var remain = pattern.slice(n);
	
	  // get the list of entries.
	  var read;
	  if (prefix === null) read = '.';else if (isAbsolute(prefix) || isAbsolute(pattern.join('/'))) {
	    if (!prefix || !isAbsolute(prefix)) prefix = '/' + prefix;
	    read = prefix;
	  } else read = prefix;
	
	  var abs = this._makeAbs(read);
	
	  //if ignored, skip processing
	  if (childrenIgnored(this, read)) return;
	
	  var isGlobStar = remain[0] === minimatch.GLOBSTAR;
	  if (isGlobStar) this._processGlobStar(prefix, read, abs, remain, index, inGlobStar);else this._processReaddir(prefix, read, abs, remain, index, inGlobStar);
	};
	
	GlobSync.prototype._processReaddir = function (prefix, read, abs, remain, index, inGlobStar) {
	  var entries = this._readdir(abs, inGlobStar);
	
	  // if the abs isn't a dir, then nothing can match!
	  if (!entries) return;
	
	  // It will only match dot entries if it starts with a dot, or if
	  // dot is set.  Stuff like @(.foo|.bar) isn't allowed.
	  var pn = remain[0];
	  var negate = !!this.minimatch.negate;
	  var rawGlob = pn._glob;
	  var dotOk = this.dot || rawGlob.charAt(0) === '.';
	
	  var matchedEntries = [];
	  for (var i = 0; i < entries.length; i++) {
	    var e = entries[i];
	    if (e.charAt(0) !== '.' || dotOk) {
	      var m;
	      if (negate && !prefix) {
	        m = !e.match(pn);
	      } else {
	        m = e.match(pn);
	      }
	      if (m) matchedEntries.push(e);
	    }
	  }
	
	  var len = matchedEntries.length;
	  // If there are no matched entries, then nothing matches.
	  if (len === 0) return;
	
	  // if this is the last remaining pattern bit, then no need for
	  // an additional stat *unless* the user has specified mark or
	  // stat explicitly.  We know they exist, since readdir returned
	  // them.
	
	  if (remain.length === 1 && !this.mark && !this.stat) {
	    if (!this.matches[index]) this.matches[index] = Object.create(null);
	
	    for (var i = 0; i < len; i++) {
	      var e = matchedEntries[i];
	      if (prefix) {
	        if (prefix.slice(-1) !== '/') e = prefix + '/' + e;else e = prefix + e;
	      }
	
	      if (e.charAt(0) === '/' && !this.nomount) {
	        e = path.join(this.root, e);
	      }
	      this._emitMatch(index, e);
	    }
	    // This was the last one, and no stats were needed
	    return;
	  }
	
	  // now test all matched entries as stand-ins for that part
	  // of the pattern.
	  remain.shift();
	  for (var i = 0; i < len; i++) {
	    var e = matchedEntries[i];
	    var newPattern;
	    if (prefix) newPattern = [prefix, e];else newPattern = [e];
	    this._process(newPattern.concat(remain), index, inGlobStar);
	  }
	};
	
	GlobSync.prototype._emitMatch = function (index, e) {
	  if (isIgnored(this, e)) return;
	
	  var abs = this._makeAbs(e);
	
	  if (this.mark) e = this._mark(e);
	
	  if (this.absolute) {
	    e = abs;
	  }
	
	  if (this.matches[index][e]) return;
	
	  if (this.nodir) {
	    var c = this.cache[abs];
	    if (c === 'DIR' || Array.isArray(c)) return;
	  }
	
	  this.matches[index][e] = true;
	
	  if (this.stat) this._stat(e);
	};
	
	GlobSync.prototype._readdirInGlobStar = function (abs) {
	  // follow all symlinked directories forever
	  // just proceed as if this is a non-globstar situation
	  if (this.follow) return this._readdir(abs, false);
	
	  var entries;
	  var lstat;
	  var stat;
	  try {
	    lstat = fs.lstatSync(abs);
	  } catch (er) {
	    if (er.code === 'ENOENT') {
	      // lstat failed, doesn't exist
	      return null;
	    }
	  }
	
	  var isSym = lstat && lstat.isSymbolicLink();
	  this.symlinks[abs] = isSym;
	
	  // If it's not a symlink or a dir, then it's definitely a regular file.
	  // don't bother doing a readdir in that case.
	  if (!isSym && lstat && !lstat.isDirectory()) this.cache[abs] = 'FILE';else entries = this._readdir(abs, false);
	
	  return entries;
	};
	
	GlobSync.prototype._readdir = function (abs, inGlobStar) {
	  var entries;
	
	  if (inGlobStar && !ownProp(this.symlinks, abs)) return this._readdirInGlobStar(abs);
	
	  if (ownProp(this.cache, abs)) {
	    var c = this.cache[abs];
	    if (!c || c === 'FILE') return null;
	
	    if (Array.isArray(c)) return c;
	  }
	
	  try {
	    return this._readdirEntries(abs, fs.readdirSync(abs));
	  } catch (er) {
	    this._readdirError(abs, er);
	    return null;
	  }
	};
	
	GlobSync.prototype._readdirEntries = function (abs, entries) {
	  // if we haven't asked to stat everything, then just
	  // assume that everything in there exists, so we can avoid
	  // having to stat it a second time.
	  if (!this.mark && !this.stat) {
	    for (var i = 0; i < entries.length; i++) {
	      var e = entries[i];
	      if (abs === '/') e = abs + e;else e = abs + '/' + e;
	      this.cache[e] = true;
	    }
	  }
	
	  this.cache[abs] = entries;
	
	  // mark and cache dir-ness
	  return entries;
	};
	
	GlobSync.prototype._readdirError = function (f, er) {
	  // handle errors, and cache the information
	  switch (er.code) {
	    case 'ENOTSUP': // https://github.com/isaacs/node-glob/issues/205
	    case 'ENOTDIR':
	      // totally normal. means it *does* exist.
	      var abs = this._makeAbs(f);
	      this.cache[abs] = 'FILE';
	      if (abs === this.cwdAbs) {
	        var error = new Error(er.code + ' invalid cwd ' + this.cwd);
	        error.path = this.cwd;
	        error.code = er.code;
	        throw error;
	      }
	      break;
	
	    case 'ENOENT': // not terribly unusual
	    case 'ELOOP':
	    case 'ENAMETOOLONG':
	    case 'UNKNOWN':
	      this.cache[this._makeAbs(f)] = false;
	      break;
	
	    default:
	      // some unusual error.  Treat as failure.
	      this.cache[this._makeAbs(f)] = false;
	      if (this.strict) throw er;
	      if (!this.silent) console.error('glob error', er);
	      break;
	  }
	};
	
	GlobSync.prototype._processGlobStar = function (prefix, read, abs, remain, index, inGlobStar) {
	
	  var entries = this._readdir(abs, inGlobStar);
	
	  // no entries means not a dir, so it can never have matches
	  // foo.txt/** doesn't match foo.txt
	  if (!entries) return;
	
	  // test without the globstar, and with every child both below
	  // and replacing the globstar.
	  var remainWithoutGlobStar = remain.slice(1);
	  var gspref = prefix ? [prefix] : [];
	  var noGlobStar = gspref.concat(remainWithoutGlobStar);
	
	  // the noGlobStar pattern exits the inGlobStar state
	  this._process(noGlobStar, index, false);
	
	  var len = entries.length;
	  var isSym = this.symlinks[abs];
	
	  // If it's a symlink, and we're in a globstar, then stop
	  if (isSym && inGlobStar) return;
	
	  for (var i = 0; i < len; i++) {
	    var e = entries[i];
	    if (e.charAt(0) === '.' && !this.dot) continue;
	
	    // these two cases enter the inGlobStar state
	    var instead = gspref.concat(entries[i], remainWithoutGlobStar);
	    this._process(instead, index, true);
	
	    var below = gspref.concat(entries[i], remain);
	    this._process(below, index, true);
	  }
	};
	
	GlobSync.prototype._processSimple = function (prefix, index) {
	  // XXX review this.  Shouldn't it be doing the mounting etc
	  // before doing stat?  kinda weird?
	  var exists = this._stat(prefix);
	
	  if (!this.matches[index]) this.matches[index] = Object.create(null);
	
	  // If it doesn't exist, then just mark the lack of results
	  if (!exists) return;
	
	  if (prefix && isAbsolute(prefix) && !this.nomount) {
	    var trail = /[\/\\]$/.test(prefix);
	    if (prefix.charAt(0) === '/') {
	      prefix = path.join(this.root, prefix);
	    } else {
	      prefix = path.resolve(this.root, prefix);
	      if (trail) prefix += '/';
	    }
	  }
	
	  if (process.platform === 'win32') prefix = prefix.replace(/\\/g, '/');
	
	  // Mark this as a match
	  this._emitMatch(index, prefix);
	};
	
	// Returns either 'DIR', 'FILE', or false
	GlobSync.prototype._stat = function (f) {
	  var abs = this._makeAbs(f);
	  var needDir = f.slice(-1) === '/';
	
	  if (f.length > this.maxLength) return false;
	
	  if (!this.stat && ownProp(this.cache, abs)) {
	    var c = this.cache[abs];
	
	    if (Array.isArray(c)) c = 'DIR';
	
	    // It exists, but maybe not how we need it
	    if (!needDir || c === 'DIR') return c;
	
	    if (needDir && c === 'FILE') return false;
	
	    // otherwise we have to stat, because maybe c=true
	    // if we know it exists, but not what it is.
	  }
	
	  var exists;
	  var stat = this.statCache[abs];
	  if (!stat) {
	    var lstat;
	    try {
	      lstat = fs.lstatSync(abs);
	    } catch (er) {
	      if (er && (er.code === 'ENOENT' || er.code === 'ENOTDIR')) {
	        this.statCache[abs] = false;
	        return false;
	      }
	    }
	
	    if (lstat && lstat.isSymbolicLink()) {
	      try {
	        stat = fs.statSync(abs);
	      } catch (er) {
	        stat = lstat;
	      }
	    } else {
	      stat = lstat;
	    }
	  }
	
	  this.statCache[abs] = stat;
	
	  var c = true;
	  if (stat) c = stat.isDirectory() ? 'DIR' : 'FILE';
	
	  this.cache[abs] = this.cache[abs] || c;
	
	  if (needDir && c === 'FILE') return false;
	
	  return c;
	};
	
	GlobSync.prototype._mark = function (p) {
	  return common.mark(this, p);
	};
	
	GlobSync.prototype._makeAbs = function (f) {
	  return common.makeAbs(this, f);
	};
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ }),
/* 373 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {"use strict";
	
	exports.alphasort = alphasort;
	exports.alphasorti = alphasorti;
	exports.setopts = setopts;
	exports.ownProp = ownProp;
	exports.makeAbs = makeAbs;
	exports.finish = finish;
	exports.mark = mark;
	exports.isIgnored = isIgnored;
	exports.childrenIgnored = childrenIgnored;
	
	function ownProp(obj, field) {
	  return Object.prototype.hasOwnProperty.call(obj, field);
	}
	
	var path = __webpack_require__(270);
	var minimatch = __webpack_require__(367);
	var isAbsolute = __webpack_require__(371);
	var Minimatch = minimatch.Minimatch;
	
	function alphasorti(a, b) {
	  return a.toLowerCase().localeCompare(b.toLowerCase());
	}
	
	function alphasort(a, b) {
	  return a.localeCompare(b);
	}
	
	function setupIgnores(self, options) {
	  self.ignore = options.ignore || [];
	
	  if (!Array.isArray(self.ignore)) self.ignore = [self.ignore];
	
	  if (self.ignore.length) {
	    self.ignore = self.ignore.map(ignoreMap);
	  }
	}
	
	// ignore patterns are always in dot:true mode.
	function ignoreMap(pattern) {
	  var gmatcher = null;
	  if (pattern.slice(-3) === '/**') {
	    var gpattern = pattern.replace(/(\/\*\*)+$/, '');
	    gmatcher = new Minimatch(gpattern, { dot: true });
	  }
	
	  return {
	    matcher: new Minimatch(pattern, { dot: true }),
	    gmatcher: gmatcher
	  };
	}
	
	function setopts(self, pattern, options) {
	  if (!options) options = {};
	
	  // base-matching: just use globstar for that.
	  if (options.matchBase && -1 === pattern.indexOf("/")) {
	    if (options.noglobstar) {
	      throw new Error("base matching requires globstar");
	    }
	    pattern = "**/" + pattern;
	  }
	
	  self.silent = !!options.silent;
	  self.pattern = pattern;
	  self.strict = options.strict !== false;
	  self.realpath = !!options.realpath;
	  self.realpathCache = options.realpathCache || Object.create(null);
	  self.follow = !!options.follow;
	  self.dot = !!options.dot;
	  self.mark = !!options.mark;
	  self.nodir = !!options.nodir;
	  if (self.nodir) self.mark = true;
	  self.sync = !!options.sync;
	  self.nounique = !!options.nounique;
	  self.nonull = !!options.nonull;
	  self.nosort = !!options.nosort;
	  self.nocase = !!options.nocase;
	  self.stat = !!options.stat;
	  self.noprocess = !!options.noprocess;
	  self.absolute = !!options.absolute;
	
	  self.maxLength = options.maxLength || Infinity;
	  self.cache = options.cache || Object.create(null);
	  self.statCache = options.statCache || Object.create(null);
	  self.symlinks = options.symlinks || Object.create(null);
	
	  setupIgnores(self, options);
	
	  self.changedCwd = false;
	  var cwd = process.cwd();
	  if (!ownProp(options, "cwd")) self.cwd = cwd;else {
	    self.cwd = path.resolve(options.cwd);
	    self.changedCwd = self.cwd !== cwd;
	  }
	
	  self.root = options.root || path.resolve(self.cwd, "/");
	  self.root = path.resolve(self.root);
	  if (process.platform === "win32") self.root = self.root.replace(/\\/g, "/");
	
	  // TODO: is an absolute `cwd` supposed to be resolved against `root`?
	  // e.g. { cwd: '/test', root: __dirname } === path.join(__dirname, '/test')
	  self.cwdAbs = isAbsolute(self.cwd) ? self.cwd : makeAbs(self, self.cwd);
	  if (process.platform === "win32") self.cwdAbs = self.cwdAbs.replace(/\\/g, "/");
	  self.nomount = !!options.nomount;
	
	  // disable comments and negation in Minimatch.
	  // Note that they are not supported in Glob itself anyway.
	  options.nonegate = true;
	  options.nocomment = true;
	
	  self.minimatch = new Minimatch(pattern, options);
	  self.options = self.minimatch.options;
	}
	
	function finish(self) {
	  var nou = self.nounique;
	  var all = nou ? [] : Object.create(null);
	
	  for (var i = 0, l = self.matches.length; i < l; i++) {
	    var matches = self.matches[i];
	    if (!matches || Object.keys(matches).length === 0) {
	      if (self.nonull) {
	        // do like the shell, and spit out the literal glob
	        var literal = self.minimatch.globSet[i];
	        if (nou) all.push(literal);else all[literal] = true;
	      }
	    } else {
	      // had matches
	      var m = Object.keys(matches);
	      if (nou) all.push.apply(all, m);else m.forEach(function (m) {
	        all[m] = true;
	      });
	    }
	  }
	
	  if (!nou) all = Object.keys(all);
	
	  if (!self.nosort) all = all.sort(self.nocase ? alphasorti : alphasort);
	
	  // at *some* point we statted all of these
	  if (self.mark) {
	    for (var i = 0; i < all.length; i++) {
	      all[i] = self._mark(all[i]);
	    }
	    if (self.nodir) {
	      all = all.filter(function (e) {
	        var notDir = !/\/$/.test(e);
	        var c = self.cache[e] || self.cache[makeAbs(self, e)];
	        if (notDir && c) notDir = c !== 'DIR' && !Array.isArray(c);
	        return notDir;
	      });
	    }
	  }
	
	  if (self.ignore.length) all = all.filter(function (m) {
	    return !isIgnored(self, m);
	  });
	
	  self.found = all;
	}
	
	function mark(self, p) {
	  var abs = makeAbs(self, p);
	  var c = self.cache[abs];
	  var m = p;
	  if (c) {
	    var isDir = c === 'DIR' || Array.isArray(c);
	    var slash = p.slice(-1) === '/';
	
	    if (isDir && !slash) m += '/';else if (!isDir && slash) m = m.slice(0, -1);
	
	    if (m !== p) {
	      var mabs = makeAbs(self, m);
	      self.statCache[mabs] = self.statCache[abs];
	      self.cache[mabs] = self.cache[abs];
	    }
	  }
	
	  return m;
	}
	
	// lotta situps...
	function makeAbs(self, f) {
	  var abs = f;
	  if (f.charAt(0) === '/') {
	    abs = path.join(self.root, f);
	  } else if (isAbsolute(f) || f === '') {
	    abs = f;
	  } else if (self.changedCwd) {
	    abs = path.resolve(self.cwd, f);
	  } else {
	    abs = path.resolve(f);
	  }
	
	  if (process.platform === 'win32') abs = abs.replace(/\\/g, '/');
	
	  return abs;
	}
	
	// Return true, if pattern ends with globstar '**', for the accompanying parent directory.
	// Ex:- If node_modules/** is the pattern, add 'node_modules' to ignore list along with it's contents
	function isIgnored(self, path) {
	  if (!self.ignore.length) return false;
	
	  return self.ignore.some(function (item) {
	    return item.matcher.match(path) || !!(item.gmatcher && item.gmatcher.match(path));
	  });
	}
	
	function childrenIgnored(self, path) {
	  if (!self.ignore.length) return false;
	
	  return self.ignore.some(function (item) {
	    return !!(item.gmatcher && item.gmatcher.match(path));
	  });
	}
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ }),
/* 374 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';
	
	var wrappy = __webpack_require__(375);
	var reqs = Object.create(null);
	var once = __webpack_require__(376);
	
	module.exports = wrappy(inflight);
	
	function inflight(key, cb) {
	  if (reqs[key]) {
	    reqs[key].push(cb);
	    return null;
	  } else {
	    reqs[key] = [cb];
	    return makeres(key);
	  }
	}
	
	function makeres(key) {
	  return once(function RES() {
	    var cbs = reqs[key];
	    var len = cbs.length;
	    var args = slice(arguments);
	
	    // XXX It's somewhat ambiguous whether a new callback added in this
	    // pass should be queued for later execution if something in the
	    // list of callbacks throws, or if it should just be discarded.
	    // However, it's such an edge case that it hardly matters, and either
	    // choice is likely as surprising as the other.
	    // As it happens, we do go ahead and schedule it for later execution.
	    try {
	      for (var i = 0; i < len; i++) {
	        cbs[i].apply(null, args);
	      }
	    } finally {
	      if (cbs.length > len) {
	        // added more in the interim.
	        // de-zalgo, just in case, but don't call again.
	        cbs.splice(0, len);
	        process.nextTick(function () {
	          RES.apply(null, args);
	        });
	      } else {
	        delete reqs[key];
	      }
	    }
	  });
	}
	
	function slice(args) {
	  var length = args.length;
	  var array = [];
	
	  for (var i = 0; i < length; i++) {
	    array[i] = args[i];
	  }return array;
	}
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ }),
/* 375 */
/***/ (function(module, exports) {

	'use strict';
	
	// Returns a wrapper function that returns a wrapped callback
	// The wrapper function should do some stuff, and return a
	// presumably different callback function.
	// This makes sure that own properties are retained, so that
	// decorations and such are not lost along the way.
	module.exports = wrappy;
	function wrappy(fn, cb) {
	  if (fn && cb) return wrappy(fn)(cb);
	
	  if (typeof fn !== 'function') throw new TypeError('need wrapper function');
	
	  Object.keys(fn).forEach(function (k) {
	    wrapper[k] = fn[k];
	  });
	
	  return wrapper;
	
	  function wrapper() {
	    var args = new Array(arguments.length);
	    for (var i = 0; i < args.length; i++) {
	      args[i] = arguments[i];
	    }
	    var ret = fn.apply(this, args);
	    var cb = args[args.length - 1];
	    if (typeof ret === 'function' && ret !== cb) {
	      Object.keys(cb).forEach(function (k) {
	        ret[k] = cb[k];
	      });
	    }
	    return ret;
	  }
	}

/***/ }),
/* 376 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var wrappy = __webpack_require__(375);
	module.exports = wrappy(once);
	
	once.proto = once(function () {
	  Object.defineProperty(Function.prototype, 'once', {
	    value: function value() {
	      return once(this);
	    },
	    configurable: true
	  });
	});
	
	function once(fn) {
	  var f = function f() {
	    if (f.called) return f.value;
	    f.called = true;
	    return f.value = fn.apply(this, arguments);
	  };
	  f.called = false;
	  return f;
	}

/***/ }),
/* 377 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';
	
	module.exports = which;
	which.sync = whichSync;
	
	var isWindows = process.platform === 'win32' || process.env.OSTYPE === 'cygwin' || process.env.OSTYPE === 'msys';
	
	var path = __webpack_require__(270);
	var COLON = isWindows ? ';' : ':';
	var isexe = __webpack_require__(378);
	
	function getNotFoundError(cmd) {
	  var er = new Error('not found: ' + cmd);
	  er.code = 'ENOENT';
	
	  return er;
	}
	
	function getPathInfo(cmd, opt) {
	  var colon = opt.colon || COLON;
	  var pathEnv = opt.path || process.env.PATH || '';
	  var pathExt = [''];
	
	  pathEnv = pathEnv.split(colon);
	
	  var pathExtExe = '';
	  if (isWindows) {
	    pathEnv.unshift(process.cwd());
	    pathExtExe = opt.pathExt || process.env.PATHEXT || '.EXE;.CMD;.BAT;.COM';
	    pathExt = pathExtExe.split(colon);
	
	    // Always test the cmd itself first.  isexe will check to make sure
	    // it's found in the pathExt set.
	    if (cmd.indexOf('.') !== -1 && pathExt[0] !== '') pathExt.unshift('');
	  }
	
	  // If it has a slash, then we don't bother searching the pathenv.
	  // just check the file itself, and that's it.
	  if (cmd.match(/\//) || isWindows && cmd.match(/\\/)) pathEnv = [''];
	
	  return {
	    env: pathEnv,
	    ext: pathExt,
	    extExe: pathExtExe
	  };
	}
	
	function which(cmd, opt, cb) {
	  if (typeof opt === 'function') {
	    cb = opt;
	    opt = {};
	  }
	
	  var info = getPathInfo(cmd, opt);
	  var pathEnv = info.env;
	  var pathExt = info.ext;
	  var pathExtExe = info.extExe;
	  var found = [];(function F(i, l) {
	    if (i === l) {
	      if (opt.all && found.length) return cb(null, found);else return cb(getNotFoundError(cmd));
	    }
	
	    var pathPart = pathEnv[i];
	    if (pathPart.charAt(0) === '"' && pathPart.slice(-1) === '"') pathPart = pathPart.slice(1, -1);
	
	    var p = path.join(pathPart, cmd);
	    if (!pathPart && /^\.[\\\/]/.test(cmd)) {
	      p = cmd.slice(0, 2) + p;
	    }
	    ;(function E(ii, ll) {
	      if (ii === ll) return F(i + 1, l);
	      var ext = pathExt[ii];
	      isexe(p + ext, { pathExt: pathExtExe }, function (er, is) {
	        if (!er && is) {
	          if (opt.all) found.push(p + ext);else return cb(null, p + ext);
	        }
	        return E(ii + 1, ll);
	      });
	    })(0, pathExt.length);
	  })(0, pathEnv.length);
	}
	
	function whichSync(cmd, opt) {
	  opt = opt || {};
	
	  var info = getPathInfo(cmd, opt);
	  var pathEnv = info.env;
	  var pathExt = info.ext;
	  var pathExtExe = info.extExe;
	  var found = [];
	
	  for (var i = 0, l = pathEnv.length; i < l; i++) {
	    var pathPart = pathEnv[i];
	    if (pathPart.charAt(0) === '"' && pathPart.slice(-1) === '"') pathPart = pathPart.slice(1, -1);
	
	    var p = path.join(pathPart, cmd);
	    if (!pathPart && /^\.[\\\/]/.test(cmd)) {
	      p = cmd.slice(0, 2) + p;
	    }
	    for (var j = 0, ll = pathExt.length; j < ll; j++) {
	      var cur = p + pathExt[j];
	      var is;
	      try {
	        is = isexe.sync(cur, { pathExt: pathExtExe });
	        if (is) {
	          if (opt.all) found.push(cur);else return cur;
	        }
	      } catch (ex) {}
	    }
	  }
	
	  if (opt.all && found.length) return found;
	
	  throw getNotFoundError(cmd);
	}
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ }),
/* 378 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process, global) {'use strict';
	
	var fs = __webpack_require__(!(function webpackMissingModule() { var e = new Error("Cannot find module \"fs\""); e.code = 'MODULE_NOT_FOUND'; throw e; }()));
	var core;
	if (process.platform === 'win32' || global.TESTING_WINDOWS) {
	  core = __webpack_require__(379);
	} else {
	  core = __webpack_require__(380);
	}
	
	module.exports = isexe;
	isexe.sync = sync;
	
	function isexe(path, options, cb) {
	  if (typeof options === 'function') {
	    cb = options;
	    options = {};
	  }
	
	  if (!cb) {
	    if (typeof Promise !== 'function') {
	      throw new TypeError('callback not provided');
	    }
	
	    return new Promise(function (resolve, reject) {
	      isexe(path, options || {}, function (er, is) {
	        if (er) {
	          reject(er);
	        } else {
	          resolve(is);
	        }
	      });
	    });
	  }
	
	  core(path, options || {}, function (er, is) {
	    // ignore EACCES because that just means we aren't allowed to run it
	    if (er) {
	      if (er.code === 'EACCES' || options && options.ignoreErrors) {
	        er = null;
	        is = false;
	      }
	    }
	    cb(er, is);
	  });
	}
	
	function sync(path, options) {
	  // my kingdom for a filtered catch
	  try {
	    return core.sync(path, options || {});
	  } catch (er) {
	    if (options && options.ignoreErrors || er.code === 'EACCES') {
	      return false;
	    } else {
	      throw er;
	    }
	  }
	}
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3), (function() { return this; }())))

/***/ }),
/* 379 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';
	
	module.exports = isexe;
	isexe.sync = sync;
	
	var fs = __webpack_require__(!(function webpackMissingModule() { var e = new Error("Cannot find module \"fs\""); e.code = 'MODULE_NOT_FOUND'; throw e; }()));
	
	function checkPathExt(path, options) {
	  var pathext = options.pathExt !== undefined ? options.pathExt : process.env.PATHEXT;
	
	  if (!pathext) {
	    return true;
	  }
	
	  pathext = pathext.split(';');
	  if (pathext.indexOf('') !== -1) {
	    return true;
	  }
	  for (var i = 0; i < pathext.length; i++) {
	    var p = pathext[i].toLowerCase();
	    if (p && path.substr(-p.length).toLowerCase() === p) {
	      return true;
	    }
	  }
	  return false;
	}
	
	function checkStat(stat, path, options) {
	  if (!stat.isSymbolicLink() && !stat.isFile()) {
	    return false;
	  }
	  return checkPathExt(path, options);
	}
	
	function isexe(path, options, cb) {
	  fs.stat(path, function (er, stat) {
	    cb(er, er ? false : checkStat(stat, path, options));
	  });
	}
	
	function sync(path, options) {
	  return checkStat(fs.statSync(path), path, options);
	}
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ }),
/* 380 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';
	
	module.exports = isexe;
	isexe.sync = sync;
	
	var fs = __webpack_require__(!(function webpackMissingModule() { var e = new Error("Cannot find module \"fs\""); e.code = 'MODULE_NOT_FOUND'; throw e; }()));
	
	function isexe(path, options, cb) {
	  fs.stat(path, function (er, stat) {
	    cb(er, er ? false : checkStat(stat, options));
	  });
	}
	
	function sync(path, options) {
	  return checkStat(fs.statSync(path), options);
	}
	
	function checkStat(stat, options) {
	  return stat.isFile() && checkMode(stat, options);
	}
	
	function checkMode(stat, options) {
	  var mod = stat.mode;
	  var uid = stat.uid;
	  var gid = stat.gid;
	
	  var myUid = options.uid !== undefined ? options.uid : process.getuid && process.getuid();
	  var myGid = options.gid !== undefined ? options.gid : process.getgid && process.getgid();
	
	  var u = parseInt('100', 8);
	  var g = parseInt('010', 8);
	  var o = parseInt('001', 8);
	  var ug = u | g;
	
	  var ret = mod & o || mod & g && gid === myGid || mod & u && uid === myUid || mod & ug && myUid === 0;
	
	  return ret;
	}
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ }),
/* 381 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';
	
	var semver = __webpack_require__(349),
	    url = __webpack_require__(275),
	    path = __webpack_require__(270),
	    log = __webpack_require__(310)
	
	// versions where -headers.tar.gz started shipping
	,
	    headersTarballRange = '>= 3.0.0 || ~0.12.10 || ~0.10.42',
	    bitsre = /\/win-(x86|x64)\//,
	    bitsreV3 = /\/win-(x86|ia32|x64)\//; // io.js v3.x.x shipped with "ia32" but should
	// have been "x86"
	
	// Captures all the logic required to determine download URLs, local directory and 
	// file names. Inputs come from command-line switches (--target, --dist-url),
	// `process.version` and `process.release` where it exists.
	function processRelease(argv, gyp, defaultVersion, defaultRelease) {
	  var version = semver.valid(argv[0]) && argv[0] || gyp.opts.target || defaultVersion,
	      versionSemver = semver.parse(version),
	      overrideDistUrl = gyp.opts['dist-url'] || gyp.opts.disturl,
	      isDefaultVersion,
	      isIojs,
	      name,
	      distBaseUrl,
	      baseUrl,
	      libUrl32,
	      libUrl64,
	      tarballUrl,
	      canGetHeaders;
	
	  if (!versionSemver) {
	    // not a valid semver string, nothing we can do
	    return { version: version };
	  }
	  // flatten version into String
	  version = versionSemver.version;
	
	  // defaultVersion should come from process.version so ought to be valid semver
	  isDefaultVersion = version === semver.parse(defaultVersion).version;
	
	  // can't use process.release if we're using --target=x.y.z
	  if (!isDefaultVersion) defaultRelease = null;
	
	  if (defaultRelease) {
	    // v3 onward, has process.release
	    name = defaultRelease.name.replace(/io\.js/, 'iojs'); // remove the '.' for directory naming purposes
	    isIojs = name === 'iojs';
	  } else {
	    // old node or alternative --target=
	    // semver.satisfies() doesn't like prerelease tags so test major directly
	    isIojs = versionSemver.major >= 1 && versionSemver.major < 4;
	    name = isIojs ? 'iojs' : 'node';
	  }
	
	  // check for the nvm.sh standard mirror env variables
	  if (!overrideDistUrl) {
	    if (isIojs) {
	      if (process.env.IOJS_ORG_MIRROR) {
	        overrideDistUrl = process.env.IOJS_ORG_MIRROR;
	      } else if (process.env.NVM_IOJS_ORG_MIRROR) {
	        // remove on next semver-major
	        overrideDistUrl = process.env.NVM_IOJS_ORG_MIRROR;
	        log.warn('download', 'NVM_IOJS_ORG_MIRROR is deprecated and will be removed in node-gyp v4, ' + 'please use IOJS_ORG_MIRROR');
	      }
	    } else {
	      if (process.env.NODEJS_ORG_MIRROR) {
	        overrideDistUrl = process.env.NODEJS_ORG_MIRROR;
	      } else if (process.env.NVM_NODEJS_ORG_MIRROR) {
	        // remove on next semver-major
	        overrideDistUrl = process.env.NVM_NODEJS_ORG_MIRROR;
	        log.warn('download', 'NVM_NODEJS_ORG_MIRROR is deprecated and will be removed in node-gyp v4, ' + 'please use NODEJS_ORG_MIRROR');
	      }
	    }
	  }
	
	  if (overrideDistUrl) log.verbose('download', 'using dist-url', overrideDistUrl);
	
	  if (overrideDistUrl) distBaseUrl = overrideDistUrl.replace(/\/+$/, '');else distBaseUrl = isIojs ? 'https://iojs.org/download/release' : 'https://nodejs.org/dist';
	  distBaseUrl += '/v' + version + '/';
	
	  // new style, based on process.release so we have a lot of the data we need
	  if (defaultRelease && defaultRelease.headersUrl && !overrideDistUrl) {
	    baseUrl = url.resolve(defaultRelease.headersUrl, './');
	    libUrl32 = resolveLibUrl(name, defaultRelease.libUrl || baseUrl || distBaseUrl, 'x86', versionSemver.major);
	    libUrl64 = resolveLibUrl(name, defaultRelease.libUrl || baseUrl || distBaseUrl, 'x64', versionSemver.major);
	
	    return {
	      version: version,
	      semver: versionSemver,
	      name: name,
	      baseUrl: baseUrl,
	      tarballUrl: defaultRelease.headersUrl,
	      shasumsUrl: url.resolve(baseUrl, 'SHASUMS256.txt'),
	      versionDir: (name !== 'node' ? name + '-' : '') + version,
	      libUrl32: libUrl32,
	      libUrl64: libUrl64,
	      libPath32: normalizePath(path.relative(url.parse(baseUrl).path, url.parse(libUrl32).path)),
	      libPath64: normalizePath(path.relative(url.parse(baseUrl).path, url.parse(libUrl64).path))
	    };
	  }
	
	  // older versions without process.release are captured here and we have to make
	  // a lot of assumptions, additionally if you --target=x.y.z then we can't use the
	  // current process.release
	
	  baseUrl = distBaseUrl;
	  libUrl32 = resolveLibUrl(name, baseUrl, 'x86', versionSemver.major);
	  libUrl64 = resolveLibUrl(name, baseUrl, 'x64', versionSemver.major);
	  // making the bold assumption that anything with a version number >3.0.0 will
	  // have a *-headers.tar.gz file in its dist location, even some frankenstein
	  // custom version
	  canGetHeaders = semver.satisfies(versionSemver, headersTarballRange);
	  tarballUrl = url.resolve(baseUrl, name + '-v' + version + (canGetHeaders ? '-headers' : '') + '.tar.gz');
	
	  return {
	    version: version,
	    semver: versionSemver,
	    name: name,
	    baseUrl: baseUrl,
	    tarballUrl: tarballUrl,
	    shasumsUrl: url.resolve(baseUrl, 'SHASUMS256.txt'),
	    versionDir: (name !== 'node' ? name + '-' : '') + version,
	    libUrl32: libUrl32,
	    libUrl64: libUrl64,
	    libPath32: normalizePath(path.relative(url.parse(baseUrl).path, url.parse(libUrl32).path)),
	    libPath64: normalizePath(path.relative(url.parse(baseUrl).path, url.parse(libUrl64).path))
	  };
	}
	
	function normalizePath(p) {
	  return path.normalize(p).replace(/\\/g, '/');
	}
	
	function resolveLibUrl(name, defaultUrl, arch, versionMajor) {
	  var base = url.resolve(defaultUrl, './'),
	      hasLibUrl = bitsre.test(defaultUrl) || versionMajor === 3 && bitsreV3.test(defaultUrl);
	
	  if (!hasLibUrl) {
	    // let's assume it's a baseUrl then
	    if (versionMajor >= 1) return url.resolve(base, 'win-' + arch + '/' + name + '.lib');
	    // prior to io.js@1.0.0 32-bit node.lib lives in /, 64-bit lives in /x64/
	    return url.resolve(base, (arch === 'x64' ? 'x64/' : '') + name + '.lib');
	  }
	
	  // else we have a proper url to a .lib, just make sure it's the right arch
	  return defaultUrl.replace(versionMajor === 3 ? bitsreV3 : bitsre, '/win-' + arch + '/');
	}
	
	module.exports = processRelease;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ }),
/* 382 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports = exports = clean;
	
	exports.usage = 'Removes any generated build files and the "out" dir';
	
	/**
	 * Module dependencies.
	 */
	
	var rm = __webpack_require__(363);
	var log = __webpack_require__(310);
	
	function clean(gyp, argv, callback) {
	
	  // Remove the 'build' dir
	  var buildDir = 'build';
	
	  log.verbose('clean', 'removing "%s" directory', buildDir);
	  rm(buildDir, callback);
	}

/***/ }),
/* 383 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process, __dirname) {'use strict';
	
	module.exports = exports = configure;
	module.exports.test = {
	  PythonFinder: PythonFinder,
	  findAccessibleSync: findAccessibleSync,
	  findPython: findPython
	};
	
	/**
	 * Module dependencies.
	 */
	
	var fs = __webpack_require__(354),
	    path = __webpack_require__(270),
	    log = __webpack_require__(310),
	    osenv = __webpack_require__(384),
	    which = __webpack_require__(377),
	    semver = __webpack_require__(349),
	    mkdirp = __webpack_require__(387),
	    cp = __webpack_require__(!(function webpackMissingModule() { var e = new Error("Cannot find module \"child_process\""); e.code = 'MODULE_NOT_FOUND'; throw e; }())),
	    extend = __webpack_require__(271)._extend,
	    processRelease = __webpack_require__(381),
	    win = process.platform === 'win32',
	    findNodeDirectory = __webpack_require__(388),
	    msgFormat = __webpack_require__(271).format;
	if (win) var findVS2017 = __webpack_require__(389);
	
	exports.usage = 'Generates ' + (win ? 'MSVC project files' : 'a Makefile') + ' for the current module';
	
	function configure(gyp, argv, callback) {
	
	  var python = gyp.opts.python || process.env.PYTHON || 'python2',
	      buildDir = path.resolve('build'),
	      configNames = ['config.gypi', 'common.gypi'],
	      configs = [],
	      nodeDir,
	      release = processRelease(argv, gyp, process.version, process.release);
	
	  findPython(python, function (err, found) {
	    if (err) {
	      callback(err);
	    } else {
	      python = found;
	      getNodeDir();
	    }
	  });
	
	  function getNodeDir() {
	
	    // 'python' should be set by now
	    process.env.PYTHON = python;
	
	    if (gyp.opts.nodedir) {
	      // --nodedir was specified. use that for the dev files
	      nodeDir = gyp.opts.nodedir.replace(/^~/, osenv.home());
	
	      log.verbose('get node dir', 'compiling against specified --nodedir dev files: %s', nodeDir);
	      createBuildDir();
	    } else {
	      // if no --nodedir specified, ensure node dependencies are installed
	      if ('v' + release.version !== process.version) {
	        // if --target was given, then determine a target version to compile for
	        log.verbose('get node dir', 'compiling against --target node version: %s', release.version);
	      } else {
	        // if no --target was specified then use the current host node version
	        log.verbose('get node dir', 'no --target version specified, falling back to host node version: %s', release.version);
	      }
	
	      if (!release.semver) {
	        // could not parse the version string with semver
	        return callback(new Error('Invalid version number: ' + release.version));
	      }
	
	      // ensure that the target node version's dev files are installed
	      gyp.opts.ensure = true;
	      gyp.commands.install([release.version], function (err, version) {
	        if (err) return callback(err);
	        log.verbose('get node dir', 'target node version installed:', release.versionDir);
	        nodeDir = path.resolve(gyp.devDir, release.versionDir);
	        createBuildDir();
	      });
	    }
	  }
	
	  function createBuildDir() {
	    log.verbose('build dir', 'attempting to create "build" dir: %s', buildDir);
	    mkdirp(buildDir, function (err, isNew) {
	      if (err) return callback(err);
	      log.verbose('build dir', '"build" dir needed to be created?', isNew);
	      if (win && (!gyp.opts.msvs_version || gyp.opts.msvs_version === '2017')) {
	        findVS2017(function (err, vsSetup) {
	          if (err) {
	            log.verbose('Not using VS2017:', err.message);
	            createConfigFile();
	          } else {
	            createConfigFile(null, vsSetup);
	          }
	        });
	      } else {
	        createConfigFile();
	      }
	    });
	  }
	
	  function createConfigFile(err, vsSetup) {
	    if (err) return callback(err);
	
	    var configFilename = 'config.gypi';
	    var configPath = path.resolve(buildDir, configFilename);
	
	    log.verbose('build/' + configFilename, 'creating config file');
	
	    var config = process.config || {},
	        defaults = config.target_defaults,
	        variables = config.variables;
	
	    // default "config.variables"
	    if (!variables) variables = config.variables = {};
	
	    // default "config.defaults"
	    if (!defaults) defaults = config.target_defaults = {};
	
	    // don't inherit the "defaults" from node's `process.config` object.
	    // doing so could cause problems in cases where the `node` executable was
	    // compiled on a different machine (with different lib/include paths) than
	    // the machine where the addon is being built to
	    defaults.cflags = [];
	    defaults.defines = [];
	    defaults.include_dirs = [];
	    defaults.libraries = [];
	
	    // set the default_configuration prop
	    if ('debug' in gyp.opts) {
	      defaults.default_configuration = gyp.opts.debug ? 'Debug' : 'Release';
	    }
	    if (!defaults.default_configuration) {
	      defaults.default_configuration = 'Release';
	    }
	
	    // set the target_arch variable
	    variables.target_arch = gyp.opts.arch || process.arch || 'ia32';
	
	    // set the node development directory
	    variables.nodedir = nodeDir;
	
	    // disable -T "thin" static archives by default
	    variables.standalone_static_library = gyp.opts.thin ? 0 : 1;
	
	    if (vsSetup) {
	      // GYP doesn't (yet) have support for VS2017, so we force it to VS2015
	      // to avoid pulling a floating patch that has not landed upstream.
	      // Ref: https://chromium-review.googlesource.com/#/c/433540/
	      gyp.opts.msvs_version = '2015';
	      process.env['GYP_MSVS_VERSION'] = 2015;
	      process.env['GYP_MSVS_OVERRIDE_PATH'] = vsSetup.path;
	      defaults['msbuild_toolset'] = 'v141';
	      defaults['msvs_windows_target_platform_version'] = vsSetup.sdk;
	      variables['msbuild_path'] = path.join(vsSetup.path, 'MSBuild', '15.0', 'Bin', 'MSBuild.exe');
	    }
	
	    // loop through the rest of the opts and add the unknown ones as variables.
	    // this allows for module-specific configure flags like:
	    //
	    //   $ node-gyp configure --shared-libxml2
	    Object.keys(gyp.opts).forEach(function (opt) {
	      if (opt === 'argv') return;
	      if (opt in gyp.configDefs) return;
	      variables[opt.replace(/-/g, '_')] = gyp.opts[opt];
	    });
	
	    // ensures that any boolean values from `process.config` get stringified
	    function boolsToString(k, v) {
	      if (typeof v === 'boolean') return String(v);
	      return v;
	    }
	
	    log.silly('build/' + configFilename, config);
	
	    // now write out the config.gypi file to the build/ dir
	    var prefix = '# Do not edit. File was generated by node-gyp\'s "configure" step',
	        json = JSON.stringify(config, boolsToString, 2);
	    log.verbose('build/' + configFilename, 'writing out config file: %s', configPath);
	    configs.push(configPath);
	    fs.writeFile(configPath, [prefix, json, ''].join('\n'), findConfigs);
	  }
	
	  function findConfigs(err) {
	    if (err) return callback(err);
	    var name = configNames.shift();
	    if (!name) return runGyp();
	    var fullPath = path.resolve(name);
	    log.verbose(name, 'checking for gypi file: %s', fullPath);
	    fs.stat(fullPath, function (err, stat) {
	      if (err) {
	        if (err.code == 'ENOENT') {
	          findConfigs(); // check next gypi filename
	        } else {
	          callback(err);
	        }
	      } else {
	        log.verbose(name, 'found gypi file');
	        configs.push(fullPath);
	        findConfigs();
	      }
	    });
	  }
	
	  function runGyp(err) {
	    if (err) return callback(err);
	
	    if (!~argv.indexOf('-f') && !~argv.indexOf('--format')) {
	      if (win) {
	        log.verbose('gyp', 'gyp format was not specified; forcing "msvs"');
	        // force the 'make' target for non-Windows
	        argv.push('-f', 'msvs');
	      } else {
	        log.verbose('gyp', 'gyp format was not specified; forcing "make"');
	        // force the 'make' target for non-Windows
	        argv.push('-f', 'make');
	      }
	    }
	
	    function hasMsvsVersion() {
	      return argv.some(function (arg) {
	        return arg.indexOf('msvs_version') === 0;
	      });
	    }
	
	    if (win && !hasMsvsVersion()) {
	      if ('msvs_version' in gyp.opts) {
	        argv.push('-G', 'msvs_version=' + gyp.opts.msvs_version);
	      } else {
	        argv.push('-G', 'msvs_version=auto');
	      }
	    }
	
	    // include all the ".gypi" files that were found
	    configs.forEach(function (config) {
	      argv.push('-I', config);
	    });
	
	    // for AIX we need to set up the path to the exp file
	    // which contains the symbols needed for linking.
	    // The file will either be in one of the following
	    // depending on whether it is an installed or
	    // development environment:
	    //  - the include/node directory
	    //  - the out/Release directory
	    //  - the out/Debug directory
	    //  - the root directory
	    var node_exp_file = undefined;
	    if (process.platform === 'aix') {
	      var node_root_dir = findNodeDirectory();
	      var candidates = ['include/node/node.exp', 'out/Release/node.exp', 'out/Debug/node.exp', 'node.exp'];
	      var logprefix = 'find exports file';
	      node_exp_file = findAccessibleSync(logprefix, node_root_dir, candidates);
	      if (node_exp_file !== undefined) {
	        log.verbose(logprefix, 'Found exports file: %s', node_exp_file);
	      } else {
	        var msg = msgFormat('Could not find node.exp file in %s', node_root_dir);
	        log.error(logprefix, 'Could not find exports file');
	        return callback(new Error(msg));
	      }
	    }
	
	    // this logic ported from the old `gyp_addon` python file
	    var gyp_script = path.resolve(__dirname, '..', 'gyp', 'gyp_main.py');
	    var addon_gypi = path.resolve(__dirname, '..', 'addon.gypi');
	    var common_gypi = path.resolve(nodeDir, 'include/node/common.gypi');
	    fs.stat(common_gypi, function (err, stat) {
	      if (err) common_gypi = path.resolve(nodeDir, 'common.gypi');
	
	      var output_dir = 'build';
	      if (win) {
	        // Windows expects an absolute path
	        output_dir = buildDir;
	      }
	      var nodeGypDir = path.resolve(__dirname, '..');
	      var nodeLibFile = path.join(nodeDir, !gyp.opts.nodedir ? '<(target_arch)' : '$(Configuration)', release.name + '.lib');
	
	      argv.push('-I', addon_gypi);
	      argv.push('-I', common_gypi);
	      argv.push('-Dlibrary=shared_library');
	      argv.push('-Dvisibility=default');
	      argv.push('-Dnode_root_dir=' + nodeDir);
	      if (process.platform === 'aix') {
	        argv.push('-Dnode_exp_file=' + node_exp_file);
	      }
	      argv.push('-Dnode_gyp_dir=' + nodeGypDir);
	      argv.push('-Dnode_lib_file=' + nodeLibFile);
	      argv.push('-Dmodule_root_dir=' + process.cwd());
	      argv.push('-Dnode_engine=' + (gyp.opts.node_engine || process.jsEngine || 'v8'));
	      argv.push('--depth=.');
	      argv.push('--no-parallel');
	
	      // tell gyp to write the Makefile/Solution files into output_dir
	      argv.push('--generator-output', output_dir);
	
	      // tell make to write its output into the same dir
	      argv.push('-Goutput_dir=.');
	
	      // enforce use of the "binding.gyp" file
	      argv.unshift('binding.gyp');
	
	      // execute `gyp` from the current target nodedir
	      argv.unshift(gyp_script);
	
	      // make sure python uses files that came with this particular node package
	      var pypath = [path.join(__dirname, '..', 'gyp', 'pylib')];
	      if (process.env.PYTHONPATH) {
	        pypath.push(process.env.PYTHONPATH);
	      }
	      process.env.PYTHONPATH = pypath.join(win ? ';' : ':');
	
	      var cp = gyp.spawn(python, argv);
	      cp.on('exit', onCpExit);
	    });
	  }
	
	  /**
	   * Called when the `gyp` child process exits.
	   */
	
	  function onCpExit(code, signal) {
	    if (code !== 0) {
	      callback(new Error('`gyp` failed with exit code: ' + code));
	    } else {
	      // we're done
	      callback();
	    }
	  }
	}
	
	/**
	 * Returns the first file or directory from an array of candidates that is
	 * readable by the current user, or undefined if none of the candidates are
	 * readable.
	 */
	function findAccessibleSync(logprefix, dir, candidates) {
	  for (var next = 0; next < candidates.length; next++) {
	    var candidate = path.resolve(dir, candidates[next]);
	    try {
	      var fd = fs.openSync(candidate, 'r');
	    } catch (e) {
	      // this candidate was not found or not readable, do nothing
	      log.silly(logprefix, 'Could not open %s: %s', candidate, e.message);
	      continue;
	    }
	    fs.closeSync(fd);
	    log.silly(logprefix, 'Found readable %s', candidate);
	    return candidate;
	  }
	
	  return undefined;
	}
	
	function PythonFinder(python, callback) {
	  this.callback = callback;
	  this.python = python;
	}
	
	PythonFinder.prototype = {
	  checkPythonLauncherDepth: 0,
	  env: process.env,
	  execFile: cp.execFile,
	  log: log,
	  resolve: path.win32 && path.win32.resolve || path.resolve,
	  stat: fs.stat,
	  which: which,
	  win: win,
	
	  checkPython: function checkPython() {
	    this.log.verbose('check python', 'checking for Python executable "%s" in the PATH', this.python);
	    this.which(this.python, function (err, execPath) {
	      if (err) {
	        this.log.verbose('`which` failed', this.python, err);
	        if (this.python === 'python2') {
	          this.python = 'python';
	          return this.checkPython();
	        }
	        if (this.win) {
	          this.checkPythonLauncher();
	        } else {
	          this.failNoPython();
	        }
	      } else {
	        this.log.verbose('`which` succeeded', this.python, execPath);
	        // Found the `python` executable, and from now on we use it explicitly.
	        // This solves #667 and #750 (`execFile` won't run batch files
	        // (*.cmd, and *.bat))
	        this.python = execPath;
	        this.checkPythonVersion();
	      }
	    }.bind(this));
	  },
	
	  // Distributions of Python on Windows by default install with the "py.exe"
	  // Python launcher which is more likely to exist than the Python executable
	  // being in the $PATH.
	  // Because the Python launcher supports all versions of Python, we have to
	  // explicitly request a Python 2 version. This is done by supplying "-2" as
	  // the first command line argument. Since "py.exe -2" would be an invalid
	  // executable for "execFile", we have to use the launcher to figure out
	  // where the actual "python.exe" executable is located.
	  checkPythonLauncher: function checkPythonLauncher() {
	    this.checkPythonLauncherDepth += 1;
	
	    this.log.verbose('could not find "' + this.python + '". checking python launcher');
	    var env = extend({}, this.env);
	    env.TERM = 'dumb';
	
	    var launcherArgs = ['-2', '-c', 'import sys; print sys.executable'];
	    this.execFile('py.exe', launcherArgs, { env: env }, function (err, stdout) {
	      if (err) {
	        this.guessPython();
	      } else {
	        this.python = stdout.trim();
	        this.log.verbose('check python launcher', 'python executable found: %j', this.python);
	        this.checkPythonVersion();
	      }
	      this.checkPythonLauncherDepth -= 1;
	    }.bind(this));
	  },
	
	  checkPythonVersion: function checkPythonVersion() {
	    var args = ['-c', 'import platform; print(platform.python_version());'];
	    var env = extend({}, this.env);
	    env.TERM = 'dumb';
	
	    this.execFile(this.python, args, { env: env }, function (err, stdout) {
	      if (err) {
	        return this.callback(err);
	      }
	      this.log.verbose('check python version', '`%s -c "' + args[1] + '"` returned: %j', this.python, stdout);
	      var version = stdout.trim();
	      if (~version.indexOf('+')) {
	        this.log.silly('stripping "+" sign(s) from version');
	        version = version.replace(/\+/g, '');
	      }
	      if (~version.indexOf('rc')) {
	        this.log.silly('stripping "rc" identifier from version');
	        version = version.replace(/rc(.*)$/ig, '');
	      }
	      var range = semver.Range('>=2.5.0 <3.0.0');
	      var valid = false;
	      try {
	        valid = range.test(version);
	      } catch (e) {
	        this.log.silly('range.test() error', e);
	      }
	      if (valid) {
	        this.callback(null, this.python);
	      } else if (this.win && this.checkPythonLauncherDepth === 0) {
	        this.checkPythonLauncher();
	      } else {
	        this.failPythonVersion(version);
	      }
	    }.bind(this));
	  },
	
	  failNoPython: function failNoPython() {
	    var errmsg = 'Can\'t find Python executable "' + this.python + '", you can set the PYTHON env variable.';
	    this.callback(new Error(errmsg));
	  },
	
	  failPythonVersion: function failPythonVersion(badVersion) {
	    var errmsg = 'Python executable "' + this.python + '" is v' + badVersion + ', which is not supported by gyp.\n' + 'You can pass the --python switch to point to ' + 'Python >= v2.5.0 & < 3.0.0.';
	    this.callback(new Error(errmsg));
	  },
	
	  // Called on Windows when "python" isn't available in the current $PATH.
	  // We are going to check if "%SystemDrive%\python27\python.exe" exists.
	  guessPython: function guessPython() {
	    this.log.verbose('could not find "' + this.python + '". guessing location');
	    var rootDir = this.env.SystemDrive || 'C:\\';
	    if (rootDir[rootDir.length - 1] !== '\\') {
	      rootDir += '\\';
	    }
	    var pythonPath = this.resolve(rootDir, 'Python27', 'python.exe');
	    this.log.verbose('ensuring that file exists:', pythonPath);
	    this.stat(pythonPath, function (err, stat) {
	      if (err) {
	        if (err.code == 'ENOENT') {
	          this.failNoPython();
	        } else {
	          this.callback(err);
	        }
	        return;
	      }
	      this.python = pythonPath;
	      this.checkPythonVersion();
	    }.bind(this));
	  }
	};
	
	function findPython(python, callback) {
	  var finder = new PythonFinder(python, callback);
	  finder.checkPython();
	}
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3), "/"))

/***/ }),
/* 384 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';
	
	var isWindows = process.platform === 'win32';
	var path = __webpack_require__(270);
	var exec = __webpack_require__(!(function webpackMissingModule() { var e = new Error("Cannot find module \"child_process\""); e.code = 'MODULE_NOT_FOUND'; throw e; }())).exec;
	var osTmpdir = __webpack_require__(385);
	var osHomedir = __webpack_require__(386);
	
	// looking up envs is a bit costly.
	// Also, sometimes we want to have a fallback
	// Pass in a callback to wait for the fallback on failures
	// After the first lookup, always returns the same thing.
	function memo(key, lookup, fallback) {
	  var fell = false;
	  var falling = false;
	  exports[key] = function (cb) {
	    var val = lookup();
	    if (!val && !fell && !falling && fallback) {
	      fell = true;
	      falling = true;
	      exec(fallback, function (er, output, stderr) {
	        falling = false;
	        if (er) return; // oh well, we tried
	        val = output.trim();
	      });
	    }
	    exports[key] = function (cb) {
	      if (cb) process.nextTick(cb.bind(null, null, val));
	      return val;
	    };
	    if (cb && !falling) process.nextTick(cb.bind(null, null, val));
	    return val;
	  };
	}
	
	memo('user', function () {
	  return isWindows ? process.env.USERDOMAIN + '\\' + process.env.USERNAME : process.env.USER;
	}, 'whoami');
	
	memo('prompt', function () {
	  return isWindows ? process.env.PROMPT : process.env.PS1;
	});
	
	memo('hostname', function () {
	  return isWindows ? process.env.COMPUTERNAME : process.env.HOSTNAME;
	}, 'hostname');
	
	memo('tmpdir', function () {
	  return osTmpdir();
	});
	
	memo('home', function () {
	  return osHomedir();
	});
	
	memo('path', function () {
	  return (process.env.PATH || process.env.Path || process.env.path).split(isWindows ? ';' : ':');
	});
	
	memo('editor', function () {
	  return process.env.EDITOR || process.env.VISUAL || (isWindows ? 'notepad.exe' : 'vi');
	});
	
	memo('shell', function () {
	  return isWindows ? process.env.ComSpec || 'cmd' : process.env.SHELL || 'bash';
	});
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ }),
/* 385 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';
	
	var isWindows = process.platform === 'win32';
	var trailingSlashRe = isWindows ? /[^:]\\$/ : /.\/$/;
	
	// https://github.com/nodejs/node/blob/3e7a14381497a3b73dda68d05b5130563cdab420/lib/os.js#L25-L43
	module.exports = function () {
		var path;
	
		if (isWindows) {
			path = process.env.TEMP || process.env.TMP || (process.env.SystemRoot || process.env.windir) + '\\temp';
		} else {
			path = process.env.TMPDIR || process.env.TMP || process.env.TEMP || '/tmp';
		}
	
		if (trailingSlashRe.test(path)) {
			path = path.slice(0, -1);
		}
	
		return path;
	};
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ }),
/* 386 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';
	
	var os = __webpack_require__(333);
	
	function homedir() {
		var env = process.env;
		var home = env.HOME;
		var user = env.LOGNAME || env.USER || env.LNAME || env.USERNAME;
	
		if (process.platform === 'win32') {
			return env.USERPROFILE || env.HOMEDRIVE + env.HOMEPATH || home || null;
		}
	
		if (process.platform === 'darwin') {
			return home || (user ? '/Users/' + user : null);
		}
	
		if (process.platform === 'linux') {
			return home || (process.getuid() === 0 ? '/root' : user ? '/home/' + user : null);
		}
	
		return home || null;
	}
	
	module.exports = typeof os.homedir === 'function' ? os.homedir : homedir;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ }),
/* 387 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
	
	var path = __webpack_require__(270);
	var fs = __webpack_require__(!(function webpackMissingModule() { var e = new Error("Cannot find module \"fs\""); e.code = 'MODULE_NOT_FOUND'; throw e; }()));
	var _0777 = parseInt('0777', 8);
	
	module.exports = mkdirP.mkdirp = mkdirP.mkdirP = mkdirP;
	
	function mkdirP(p, opts, f, made) {
	    if (typeof opts === 'function') {
	        f = opts;
	        opts = {};
	    } else if (!opts || (typeof opts === 'undefined' ? 'undefined' : _typeof(opts)) !== 'object') {
	        opts = { mode: opts };
	    }
	
	    var mode = opts.mode;
	    var xfs = opts.fs || fs;
	
	    if (mode === undefined) {
	        mode = _0777 & ~process.umask();
	    }
	    if (!made) made = null;
	
	    var cb = f || function () {};
	    p = path.resolve(p);
	
	    xfs.mkdir(p, mode, function (er) {
	        if (!er) {
	            made = made || p;
	            return cb(null, made);
	        }
	        switch (er.code) {
	            case 'ENOENT':
	                mkdirP(path.dirname(p), opts, function (er, made) {
	                    if (er) cb(er, made);else mkdirP(p, opts, cb, made);
	                });
	                break;
	
	            // In the case of any other error, just see if there's a dir
	            // there already.  If so, then hooray!  If not, then something
	            // is borked.
	            default:
	                xfs.stat(p, function (er2, stat) {
	                    // if the stat fails, then that's super weird.
	                    // let the original error be the failure reason.
	                    if (er2 || !stat.isDirectory()) cb(er, made);else cb(null, made);
	                });
	                break;
	        }
	    });
	}
	
	mkdirP.sync = function sync(p, opts, made) {
	    if (!opts || (typeof opts === 'undefined' ? 'undefined' : _typeof(opts)) !== 'object') {
	        opts = { mode: opts };
	    }
	
	    var mode = opts.mode;
	    var xfs = opts.fs || fs;
	
	    if (mode === undefined) {
	        mode = _0777 & ~process.umask();
	    }
	    if (!made) made = null;
	
	    p = path.resolve(p);
	
	    try {
	        xfs.mkdirSync(p, mode);
	        made = made || p;
	    } catch (err0) {
	        switch (err0.code) {
	            case 'ENOENT':
	                made = sync(path.dirname(p), opts, made);
	                sync(p, opts, made);
	                break;
	
	            // In the case of any other error, just see if there's a dir
	            // there already.  If so, then hooray!  If not, then something
	            // is borked.
	            default:
	                var stat;
	                try {
	                    stat = xfs.statSync(p);
	                } catch (err1) {
	                    throw err0;
	                }
	                if (!stat.isDirectory()) throw err0;
	                break;
	        }
	    }
	
	    return made;
	};
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ }),
/* 388 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(__dirname, process) {'use strict';
	
	var path = __webpack_require__(270),
	    log = __webpack_require__(310);
	
	function findNodeDirectory(scriptLocation, processObj) {
	  // set dirname and process if not passed in
	  // this facilitates regression tests
	  if (scriptLocation === undefined) {
	    scriptLocation = __dirname;
	  }
	  if (processObj === undefined) {
	    processObj = process;
	  }
	
	  // Have a look to see what is above us, to try and work out where we are
	  npm_parent_directory = path.join(scriptLocation, '../../../..');
	  log.verbose('node-gyp root', 'npm_parent_directory is ' + path.basename(npm_parent_directory));
	  node_root_dir = "";
	
	  log.verbose('node-gyp root', 'Finding node root directory');
	  if (path.basename(npm_parent_directory) === 'deps') {
	    // We are in a build directory where this script lives in
	    // deps/npm/node_modules/node-gyp/lib
	    node_root_dir = path.join(npm_parent_directory, '..');
	    log.verbose('node-gyp root', 'in build directory, root = ' + node_root_dir);
	  } else if (path.basename(npm_parent_directory) === 'node_modules') {
	    // We are in a node install directory where this script lives in
	    // lib/node_modules/npm/node_modules/node-gyp/lib or
	    // node_modules/npm/node_modules/node-gyp/lib depending on the
	    // platform
	    if (processObj.platform === 'win32') {
	      node_root_dir = path.join(npm_parent_directory, '..');
	    } else {
	      node_root_dir = path.join(npm_parent_directory, '../..');
	    }
	    log.verbose('node-gyp root', 'in install directory, root = ' + node_root_dir);
	  } else {
	    // We don't know where we are, try working it out from the location
	    // of the node binary
	    var node_dir = path.dirname(processObj.execPath);
	    var directory_up = path.basename(node_dir);
	    if (directory_up === 'bin') {
	      node_root_dir = path.join(node_dir, '..');
	    } else if (directory_up === 'Release' || directory_up === 'Debug') {
	      // If we are a recently built node, and the directory structure
	      // is that of a repository. If we are on Windows then we only need
	      // to go one level up, everything else, two
	      if (processObj.platform === 'win32') {
	        node_root_dir = path.join(node_dir, '..');
	      } else {
	        node_root_dir = path.join(node_dir, '../..');
	      }
	    }
	    // Else return the default blank, "".
	  }
	  return node_root_dir;
	}
	
	module.exports = findNodeDirectory;
	/* WEBPACK VAR INJECTION */}.call(exports, "/", __webpack_require__(3)))

/***/ }),
/* 389 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process, __dirname) {'use strict';
	
	var log = __webpack_require__(310),
	    execFile = __webpack_require__(!(function webpackMissingModule() { var e = new Error("Cannot find module \"child_process\""); e.code = 'MODULE_NOT_FOUND'; throw e; }())).execFile,
	    path = __webpack_require__(270);
	
	function findVS2017(callback) {
	  var ps = path.join(process.env.SystemRoot, 'System32', 'WindowsPowerShell', 'v1.0', 'powershell.exe');
	  var csFile = path.join(__dirname, 'Find-VS2017.cs');
	  var psArgs = ['-ExecutionPolicy', 'Unrestricted', '-Command', '&{Add-Type -Path \'' + csFile + '\'; [VisualStudioConfiguration.Main]::Query()}'];
	
	  log.silly('find vs2017', 'Running', ps, psArgs);
	  var child = execFile(ps, psArgs, { encoding: 'utf8' }, function (err, stdout, stderr) {
	    log.silly('find vs2017', 'PS err:', err);
	    log.silly('find vs2017', 'PS stdout:', stdout);
	    log.silly('find vs2017', 'PS stderr:', stderr);
	
	    if (err) return callback(new Error('Could not use PowerShell to find VS2017'));
	
	    var vsSetup;
	    try {
	      vsSetup = JSON.parse(stdout);
	    } catch (e) {
	      log.silly('find vs2017', e);
	      return callback(new Error('Could not use PowerShell to find VS2017'));
	    }
	    log.silly('find vs2017', 'vsSetup:', vsSetup);
	
	    if (vsSetup && vsSetup.log) log.verbose('find vs2017', vsSetup.log.trimRight());
	
	    if (!vsSetup || !vsSetup.path || !vsSetup.sdk) {
	      return callback(new Error('No usable installation of VS2017 found'));
	    }
	
	    log.verbose('find vs2017', 'using installation:', vsSetup.path);
	    callback(null, { "path": vsSetup.path, "sdk": vsSetup.sdk });
	  });
	
	  child.stdin.end();
	}
	
	module.exports = findVS2017;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3), "/"))

/***/ }),
/* 390 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process, Buffer) {'use strict';
	
	module.exports = exports = install;
	
	module.exports.test = { download: download, readCAFile: readCAFile };
	
	exports.usage = 'Install node development files for the specified node version.';
	
	/**
	 * Module dependencies.
	 */
	
	var fs = __webpack_require__(354),
	    osenv = __webpack_require__(384),
	    tar = __webpack_require__(!(function webpackMissingModule() { var e = new Error("Cannot find module \"tar\""); e.code = 'MODULE_NOT_FOUND'; throw e; }())),
	    rm = __webpack_require__(363),
	    path = __webpack_require__(270),
	    crypto = __webpack_require__(392),
	    zlib = __webpack_require__(421),
	    log = __webpack_require__(310),
	    semver = __webpack_require__(349),
	    fstream = __webpack_require__(434),
	    request = __webpack_require__(449),
	    minimatch = __webpack_require__(367),
	    mkdir = __webpack_require__(387),
	    processRelease = __webpack_require__(381),
	    win = process.platform == 'win32';
	
	function install(gyp, argv, callback) {
	
	  var release = processRelease(argv, gyp, process.version, process.release);
	
	  // ensure no double-callbacks happen
	  function cb(err) {
	    if (cb.done) return;
	    cb.done = true;
	    if (err) {
	      log.warn('install', 'got an error, rolling back install');
	      // roll-back the install if anything went wrong
	      gyp.commands.remove([release.versionDir], function (err2) {
	        callback(err);
	      });
	    } else {
	      callback(null, release.version);
	    }
	  }
	
	  // Determine which node dev files version we are installing
	  log.verbose('install', 'input version string %j', release.version);
	
	  if (!release.semver) {
	    // could not parse the version string with semver
	    return callback(new Error('Invalid version number: ' + release.version));
	  }
	
	  if (semver.lt(release.version, '0.8.0')) {
	    return callback(new Error('Minimum target version is `0.8.0` or greater. Got: ' + release.version));
	  }
	
	  // 0.x.y-pre versions are not published yet and cannot be installed. Bail.
	  if (release.semver.prerelease[0] === 'pre') {
	    log.verbose('detected "pre" node version', release.version);
	    if (gyp.opts.nodedir) {
	      log.verbose('--nodedir flag was passed; skipping install', gyp.opts.nodedir);
	      callback();
	    } else {
	      callback(new Error('"pre" versions of node cannot be installed, use the --nodedir flag instead'));
	    }
	    return;
	  }
	
	  // flatten version into String
	  log.verbose('install', 'installing version: %s', release.versionDir);
	
	  // the directory where the dev files will be installed
	  var devDir = path.resolve(gyp.devDir, release.versionDir);
	
	  // If '--ensure' was passed, then don't *always* install the version;
	  // check if it is already installed, and only install when needed
	  if (gyp.opts.ensure) {
	    log.verbose('install', '--ensure was passed, so won\'t reinstall if already installed');
	    fs.stat(devDir, function (err, stat) {
	      if (err) {
	        if (err.code == 'ENOENT') {
	          log.verbose('install', 'version not already installed, continuing with install', release.version);
	          go();
	        } else if (err.code == 'EACCES') {
	          eaccesFallback();
	        } else {
	          cb(err);
	        }
	        return;
	      }
	      log.verbose('install', 'version is already installed, need to check "installVersion"');
	      var installVersionFile = path.resolve(devDir, 'installVersion');
	      fs.readFile(installVersionFile, 'ascii', function (err, ver) {
	        if (err && err.code != 'ENOENT') {
	          return cb(err);
	        }
	        var installVersion = parseInt(ver, 10) || 0;
	        log.verbose('got "installVersion"', installVersion);
	        log.verbose('needs "installVersion"', gyp.package.installVersion);
	        if (installVersion < gyp.package.installVersion) {
	          log.verbose('install', 'version is no good; reinstalling');
	          go();
	        } else {
	          log.verbose('install', 'version is good');
	          cb();
	        }
	      });
	    });
	  } else {
	    go();
	  }
	
	  function getContentSha(res, callback) {
	    var shasum = crypto.createHash('sha256');
	    res.on('data', function (chunk) {
	      shasum.update(chunk);
	    }).on('end', function () {
	      callback(null, shasum.digest('hex'));
	    });
	  }
	
	  function go() {
	
	    log.verbose('ensuring nodedir is created', devDir);
	
	    // first create the dir for the node dev files
	    mkdir(devDir, function (err, created) {
	      if (err) {
	        if (err.code == 'EACCES') {
	          eaccesFallback();
	        } else {
	          cb(err);
	        }
	        return;
	      }
	
	      if (created) {
	        log.verbose('created nodedir', created);
	      }
	
	      // now download the node tarball
	      var tarPath = gyp.opts.tarball;
	      var badDownload = false,
	          extractCount = 0,
	          gunzip = zlib.createGunzip(),
	          extracter = tar.Extract({ path: devDir, strip: 1, filter: isValid });
	
	      var contentShasums = {};
	      var expectShasums = {};
	
	      // checks if a file to be extracted from the tarball is valid.
	      // only .h header files and the gyp files get extracted
	      function isValid() {
	        var name = this.path.substring(devDir.length + 1);
	        var isValid = valid(name);
	        if (name === '' && this.type === 'Directory') {
	          // the first directory entry is ok
	          return true;
	        }
	        if (isValid) {
	          log.verbose('extracted file from tarball', name);
	          extractCount++;
	        } else {
	          // invalid
	          log.silly('ignoring from tarball', name);
	        }
	        return isValid;
	      }
	
	      gunzip.on('error', cb);
	      extracter.on('error', cb);
	      extracter.on('end', afterTarball);
	
	      // download the tarball, gunzip and extract!
	
	      if (tarPath) {
	        var input = fs.createReadStream(tarPath);
	        input.pipe(gunzip).pipe(extracter);
	        return;
	      }
	
	      try {
	        var req = download(gyp, process.env, release.tarballUrl);
	      } catch (e) {
	        return cb(e);
	      }
	
	      // something went wrong downloading the tarball?
	      req.on('error', function (err) {
	        if (err.code === 'ENOTFOUND') {
	          return cb(new Error('This is most likely not a problem with node-gyp or the package itself and\n' + 'is related to network connectivity. In most cases you are behind a proxy or have bad \n' + 'network settings.'));
	        }
	        badDownload = true;
	        cb(err);
	      });
	
	      req.on('close', function () {
	        if (extractCount === 0) {
	          cb(new Error('Connection closed while downloading tarball file'));
	        }
	      });
	
	      req.on('response', function (res) {
	        if (res.statusCode !== 200) {
	          badDownload = true;
	          cb(new Error(res.statusCode + ' response downloading ' + release.tarballUrl));
	          return;
	        }
	        // content checksum
	        getContentSha(res, function (_, checksum) {
	          var filename = path.basename(release.tarballUrl).trim();
	          contentShasums[filename] = checksum;
	          log.verbose('content checksum', filename, checksum);
	        });
	
	        // start unzipping and untaring
	        req.pipe(gunzip).pipe(extracter);
	      });
	
	      // invoked after the tarball has finished being extracted
	      function afterTarball() {
	        if (badDownload) return;
	        if (extractCount === 0) {
	          return cb(new Error('There was a fatal problem while downloading/extracting the tarball'));
	        }
	        log.verbose('tarball', 'done parsing tarball');
	        var async = 0;
	
	        if (win) {
	          // need to download node.lib
	          async++;
	          downloadNodeLib(deref);
	        }
	
	        // write the "installVersion" file
	        async++;
	        var installVersionPath = path.resolve(devDir, 'installVersion');
	        fs.writeFile(installVersionPath, gyp.package.installVersion + '\n', deref);
	
	        // Only download SHASUMS.txt if not using tarPath override
	        if (!tarPath) {
	          // download SHASUMS.txt
	          async++;
	          downloadShasums(deref);
	        }
	
	        if (async === 0) {
	          // no async tasks required
	          cb();
	        }
	
	        function deref(err) {
	          if (err) return cb(err);
	
	          async--;
	          if (!async) {
	            log.verbose('download contents checksum', JSON.stringify(contentShasums));
	            // check content shasums
	            for (var k in contentShasums) {
	              log.verbose('validating download checksum for ' + k, '(%s == %s)', contentShasums[k], expectShasums[k]);
	              if (contentShasums[k] !== expectShasums[k]) {
	                cb(new Error(k + ' local checksum ' + contentShasums[k] + ' not match remote ' + expectShasums[k]));
	                return;
	              }
	            }
	            cb();
	          }
	        }
	      }
	
	      function downloadShasums(done) {
	        log.verbose('check download content checksum, need to download `SHASUMS256.txt`...');
	        var shasumsPath = path.resolve(devDir, 'SHASUMS256.txt');
	
	        log.verbose('checksum url', release.shasumsUrl);
	        try {
	          var req = download(gyp, process.env, release.shasumsUrl);
	        } catch (e) {
	          return cb(e);
	        }
	
	        req.on('error', done);
	        req.on('response', function (res) {
	          if (res.statusCode !== 200) {
	            done(new Error(res.statusCode + ' status code downloading checksum'));
	            return;
	          }
	
	          var chunks = [];
	          res.on('data', function (chunk) {
	            chunks.push(chunk);
	          });
	          res.on('end', function () {
	            var lines = Buffer.concat(chunks).toString().trim().split('\n');
	            lines.forEach(function (line) {
	              var items = line.trim().split(/\s+/);
	              if (items.length !== 2) return;
	
	              // 0035d18e2dcf9aad669b1c7c07319e17abfe3762  ./node-v0.11.4.tar.gz
	              var name = items[1].replace(/^\.\//, '');
	              expectShasums[name] = items[0];
	            });
	
	            log.verbose('checksum data', JSON.stringify(expectShasums));
	            done();
	          });
	        });
	      }
	
	      function downloadNodeLib(done) {
	        log.verbose('on Windows; need to download `' + release.name + '.lib`...');
	        var dir32 = path.resolve(devDir, 'ia32'),
	            dir64 = path.resolve(devDir, 'x64'),
	            libPath32 = path.resolve(dir32, release.name + '.lib'),
	            libPath64 = path.resolve(dir64, release.name + '.lib');
	
	        log.verbose('32-bit ' + release.name + '.lib dir', dir32);
	        log.verbose('64-bit ' + release.name + '.lib dir', dir64);
	        log.verbose('`' + release.name + '.lib` 32-bit url', release.libUrl32);
	        log.verbose('`' + release.name + '.lib` 64-bit url', release.libUrl64);
	
	        var async = 2;
	        mkdir(dir32, function (err) {
	          if (err) return done(err);
	          log.verbose('streaming 32-bit ' + release.name + '.lib to:', libPath32);
	
	          try {
	            var req = download(gyp, process.env, release.libUrl32, cb);
	          } catch (e) {
	            return cb(e);
	          }
	
	          req.on('error', done);
	          req.on('response', function (res) {
	            if (res.statusCode !== 200) {
	              done(new Error(res.statusCode + ' status code downloading 32-bit ' + release.name + '.lib'));
	              return;
	            }
	
	            getContentSha(res, function (_, checksum) {
	              contentShasums[release.libPath32] = checksum;
	              log.verbose('content checksum', release.libPath32, checksum);
	            });
	
	            var ws = fs.createWriteStream(libPath32);
	            ws.on('error', cb);
	            req.pipe(ws);
	          });
	          req.on('end', function () {
	            --async || done();
	          });
	        });
	        mkdir(dir64, function (err) {
	          if (err) return done(err);
	          log.verbose('streaming 64-bit ' + release.name + '.lib to:', libPath64);
	
	          try {
	            var req = download(gyp, process.env, release.libUrl64, cb);
	          } catch (e) {
	            return cb(e);
	          }
	
	          req.on('error', done);
	          req.on('response', function (res) {
	            if (res.statusCode !== 200) {
	              done(new Error(res.statusCode + ' status code downloading 64-bit ' + release.name + '.lib'));
	              return;
	            }
	
	            getContentSha(res, function (_, checksum) {
	              contentShasums[release.libPath64] = checksum;
	              log.verbose('content checksum', release.libPath64, checksum);
	            });
	
	            var ws = fs.createWriteStream(libPath64);
	            ws.on('error', cb);
	            req.pipe(ws);
	          });
	          req.on('end', function () {
	            --async || done();
	          });
	        });
	      } // downloadNodeLib()
	    }); // mkdir()
	  } // go()
	
	  /**
	   * Checks if a given filename is "valid" for this installation.
	   */
	
	  function valid(file) {
	    // header files
	    return minimatch(file, '*.h', { matchBase: true }) || minimatch(file, '*.gypi', { matchBase: true });
	  }
	
	  /**
	   * The EACCES fallback is a workaround for npm's `sudo` behavior, where
	   * it drops the permissions before invoking any child processes (like
	   * node-gyp). So what happens is the "nobody" user doesn't have
	   * permission to create the dev dir. As a fallback, make the tmpdir() be
	   * the dev dir for this installation. This is not ideal, but at least
	   * the compilation will succeed...
	   */
	
	  function eaccesFallback() {
	    var tmpdir = osenv.tmpdir();
	    gyp.devDir = path.resolve(tmpdir, '.node-gyp');
	    log.warn('EACCES', 'user "%s" does not have permission to access the dev dir "%s"', osenv.user(), devDir);
	    log.warn('EACCES', 'attempting to reinstall using temporary dev dir "%s"', gyp.devDir);
	    if (process.cwd() == tmpdir) {
	      log.verbose('tmpdir == cwd', 'automatically will remove dev files after to save disk space');
	      gyp.todo.push({ name: 'remove', args: argv });
	    }
	    gyp.commands.install(argv, cb);
	  }
	}
	
	function download(gyp, env, url) {
	  log.http('GET', url);
	
	  var requestOpts = {
	    uri: url,
	    headers: {
	      'User-Agent': 'node-gyp v' + gyp.version + ' (node ' + process.version + ')'
	    }
	  };
	
	  var cafile = gyp.opts.cafile;
	  if (cafile) {
	    requestOpts.ca = readCAFile(cafile);
	  }
	
	  // basic support for a proxy server
	  var proxyUrl = gyp.opts.proxy || env.http_proxy || env.HTTP_PROXY || env.npm_config_proxy;
	  if (proxyUrl) {
	    if (/^https?:\/\//i.test(proxyUrl)) {
	      log.verbose('download', 'using proxy url: "%s"', proxyUrl);
	      requestOpts.proxy = proxyUrl;
	    } else {
	      log.warn('download', 'ignoring invalid "proxy" config setting: "%s"', proxyUrl);
	    }
	  }
	
	  var req = request(requestOpts);
	  req.on('response', function (res) {
	    log.http(res.statusCode, url);
	  });
	
	  return req;
	}
	
	function readCAFile(filename) {
	  // The CA file can contain multiple certificates so split on certificate
	  // boundaries.  [\S\s]*? is used to match everything including newlines.
	  var ca = fs.readFileSync(filename, 'utf8');
	  var re = /(-----BEGIN CERTIFICATE-----[\S\s]*?-----END CERTIFICATE-----)/g;
	  return ca.match(re);
	}
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3), __webpack_require__(290).Buffer))

/***/ }),
/* 391 */,
/* 392 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {'use strict';
	
	var rng = __webpack_require__(393);
	
	function error() {
	  var m = [].slice.call(arguments).join(' ');
	  throw new Error([m, 'we accept pull requests', 'http://github.com/dominictarr/crypto-browserify'].join('\n'));
	}
	
	exports.createHash = __webpack_require__(395);
	
	exports.createHmac = __webpack_require__(404);
	
	exports.randomBytes = function (size, callback) {
	  if (callback && callback.call) {
	    try {
	      callback.call(this, undefined, new Buffer(rng(size)));
	    } catch (err) {
	      callback(err);
	    }
	  } else {
	    return new Buffer(rng(size));
	  }
	};
	
	function each(a, f) {
	  for (var i in a) {
	    f(a[i], i);
	  }
	}
	
	exports.getHashes = function () {
	  return ['sha1', 'sha256', 'sha512', 'md5', 'rmd160'];
	};
	
	var p = __webpack_require__(405)(exports);
	exports.pbkdf2 = p.pbkdf2;
	exports.pbkdf2Sync = p.pbkdf2Sync;
	__webpack_require__(407)(exports, module.exports);
	
	// the least I can do is make error messages for the rest of the node.js/crypto api.
	each(['createCredentials', 'createSign', 'createVerify', 'createDiffieHellman'], function (name) {
	  exports[name] = function () {
	    error('sorry,', name, 'is not implemented yet');
	  };
	});
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(290).Buffer))

/***/ }),
/* 393 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global, Buffer) {'use strict';
	
	(function () {
	  var g = ('undefined' === typeof window ? global : window) || {};
	  _crypto = g.crypto || g.msCrypto || __webpack_require__(394);
	  module.exports = function (size) {
	    // Modern Browsers
	    if (_crypto.getRandomValues) {
	      var bytes = new Buffer(size); //in browserify, this is an extended Uint8Array
	      /* This will not work in older browsers.
	       * See https://developer.mozilla.org/en-US/docs/Web/API/window.crypto.getRandomValues
	       */
	
	      _crypto.getRandomValues(bytes);
	      return bytes;
	    } else if (_crypto.randomBytes) {
	      return _crypto.randomBytes(size);
	    } else throw new Error('secure random number generation not supported by this browser\n' + 'use chrome, FireFox or Internet Explorer 11');
	  };
	})();
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }()), __webpack_require__(290).Buffer))

/***/ }),
/* 394 */
/***/ (function(module, exports) {

	/* (ignored) */

/***/ }),
/* 395 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {'use strict';
	
	var createHash = __webpack_require__(396);
	
	var md5 = toConstructor(__webpack_require__(401));
	var rmd160 = toConstructor(__webpack_require__(403));
	
	function toConstructor(fn) {
	  return function () {
	    var buffers = [];
	    var m = {
	      update: function update(data, enc) {
	        if (!Buffer.isBuffer(data)) data = new Buffer(data, enc);
	        buffers.push(data);
	        return this;
	      },
	      digest: function digest(enc) {
	        var buf = Buffer.concat(buffers);
	        var r = fn(buf);
	        buffers = null;
	        return enc ? r.toString(enc) : r;
	      }
	    };
	    return m;
	  };
	}
	
	module.exports = function (alg) {
	  if ('md5' === alg) return new md5();
	  if ('rmd160' === alg) return new rmd160();
	  return createHash(alg);
	};
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(290).Buffer))

/***/ }),
/* 396 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var _exports = module.exports = function (alg) {
	  var Alg = _exports[alg];
	  if (!Alg) throw new Error(alg + ' is not supported (we accept pull requests)');
	  return new Alg();
	};
	
	var Buffer = __webpack_require__(290).Buffer;
	var Hash = __webpack_require__(397)(Buffer);
	
	_exports.sha1 = __webpack_require__(398)(Buffer, Hash);
	_exports.sha256 = __webpack_require__(399)(Buffer, Hash);
	_exports.sha512 = __webpack_require__(400)(Buffer, Hash);

/***/ }),
/* 397 */
/***/ (function(module, exports) {

	"use strict";
	
	module.exports = function (Buffer) {
	
	  //prototype class for hash functions
	  function Hash(blockSize, finalSize) {
	    this._block = new Buffer(blockSize); //new Uint32Array(blockSize/4)
	    this._finalSize = finalSize;
	    this._blockSize = blockSize;
	    this._len = 0;
	    this._s = 0;
	  }
	
	  Hash.prototype.init = function () {
	    this._s = 0;
	    this._len = 0;
	  };
	
	  Hash.prototype.update = function (data, enc) {
	    if ("string" === typeof data) {
	      enc = enc || "utf8";
	      data = new Buffer(data, enc);
	    }
	
	    var l = this._len += data.length;
	    var s = this._s = this._s || 0;
	    var f = 0;
	    var buffer = this._block;
	
	    while (s < l) {
	      var t = Math.min(data.length, f + this._blockSize - s % this._blockSize);
	      var ch = t - f;
	
	      for (var i = 0; i < ch; i++) {
	        buffer[s % this._blockSize + i] = data[i + f];
	      }
	
	      s += ch;
	      f += ch;
	
	      if (s % this._blockSize === 0) {
	        this._update(buffer);
	      }
	    }
	    this._s = s;
	
	    return this;
	  };
	
	  Hash.prototype.digest = function (enc) {
	    // Suppose the length of the message M, in bits, is l
	    var l = this._len * 8;
	
	    // Append the bit 1 to the end of the message
	    this._block[this._len % this._blockSize] = 0x80;
	
	    // and then k zero bits, where k is the smallest non-negative solution to the equation (l + 1 + k) === finalSize mod blockSize
	    this._block.fill(0, this._len % this._blockSize + 1);
	
	    if (l % (this._blockSize * 8) >= this._finalSize * 8) {
	      this._update(this._block);
	      this._block.fill(0);
	    }
	
	    // to this append the block which is equal to the number l written in binary
	    // TODO: handle case where l is > Math.pow(2, 29)
	    this._block.writeInt32BE(l, this._blockSize - 4);
	
	    var hash = this._update(this._block) || this._hash();
	
	    return enc ? hash.toString(enc) : hash;
	  };
	
	  Hash.prototype._update = function () {
	    throw new Error('_update must be implemented by subclass');
	  };
	
	  return Hash;
	};

/***/ }),
/* 398 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	/*
	 * A JavaScript implementation of the Secure Hash Algorithm, SHA-1, as defined
	 * in FIPS PUB 180-1
	 * Version 2.1a Copyright Paul Johnston 2000 - 2002.
	 * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
	 * Distributed under the BSD License
	 * See http://pajhome.org.uk/crypt/md5 for details.
	 */
	
	var inherits = __webpack_require__(271).inherits;
	
	module.exports = function (Buffer, Hash) {
	
	  var A = 0 | 0;
	  var B = 4 | 0;
	  var C = 8 | 0;
	  var D = 12 | 0;
	  var E = 16 | 0;
	
	  var W = new (typeof Int32Array === 'undefined' ? Array : Int32Array)(80);
	
	  var POOL = [];
	
	  function Sha1() {
	    if (POOL.length) return POOL.pop().init();
	
	    if (!(this instanceof Sha1)) return new Sha1();
	    this._w = W;
	    Hash.call(this, 16 * 4, 14 * 4);
	
	    this._h = null;
	    this.init();
	  }
	
	  inherits(Sha1, Hash);
	
	  Sha1.prototype.init = function () {
	    this._a = 0x67452301;
	    this._b = 0xefcdab89;
	    this._c = 0x98badcfe;
	    this._d = 0x10325476;
	    this._e = 0xc3d2e1f0;
	
	    Hash.prototype.init.call(this);
	    return this;
	  };
	
	  Sha1.prototype._POOL = POOL;
	  Sha1.prototype._update = function (X) {
	
	    var a, b, c, d, e, _a, _b, _c, _d, _e;
	
	    a = _a = this._a;
	    b = _b = this._b;
	    c = _c = this._c;
	    d = _d = this._d;
	    e = _e = this._e;
	
	    var w = this._w;
	
	    for (var j = 0; j < 80; j++) {
	      var W = w[j] = j < 16 ? X.readInt32BE(j * 4) : rol(w[j - 3] ^ w[j - 8] ^ w[j - 14] ^ w[j - 16], 1);
	
	      var t = add(add(rol(a, 5), sha1_ft(j, b, c, d)), add(add(e, W), sha1_kt(j)));
	
	      e = d;
	      d = c;
	      c = rol(b, 30);
	      b = a;
	      a = t;
	    }
	
	    this._a = add(a, _a);
	    this._b = add(b, _b);
	    this._c = add(c, _c);
	    this._d = add(d, _d);
	    this._e = add(e, _e);
	  };
	
	  Sha1.prototype._hash = function () {
	    if (POOL.length < 100) POOL.push(this);
	    var H = new Buffer(20);
	    //console.log(this._a|0, this._b|0, this._c|0, this._d|0, this._e|0)
	    H.writeInt32BE(this._a | 0, A);
	    H.writeInt32BE(this._b | 0, B);
	    H.writeInt32BE(this._c | 0, C);
	    H.writeInt32BE(this._d | 0, D);
	    H.writeInt32BE(this._e | 0, E);
	    return H;
	  };
	
	  /*
	   * Perform the appropriate triplet combination function for the current
	   * iteration
	   */
	  function sha1_ft(t, b, c, d) {
	    if (t < 20) return b & c | ~b & d;
	    if (t < 40) return b ^ c ^ d;
	    if (t < 60) return b & c | b & d | c & d;
	    return b ^ c ^ d;
	  }
	
	  /*
	   * Determine the appropriate additive constant for the current iteration
	   */
	  function sha1_kt(t) {
	    return t < 20 ? 1518500249 : t < 40 ? 1859775393 : t < 60 ? -1894007588 : -899497514;
	  }
	
	  /*
	   * Add integers, wrapping at 2^32. This uses 16-bit operations internally
	   * to work around bugs in some JS interpreters.
	   * //dominictarr: this is 10 years old, so maybe this can be dropped?)
	   *
	   */
	  function add(x, y) {
	    return x + y | 0;
	    //lets see how this goes on testling.
	    //  var lsw = (x & 0xFFFF) + (y & 0xFFFF);
	    //  var msw = (x >> 16) + (y >> 16) + (lsw >> 16);
	    //  return (msw << 16) | (lsw & 0xFFFF);
	  }
	
	  /*
	   * Bitwise rotate a 32-bit number to the left.
	   */
	  function rol(num, cnt) {
	    return num << cnt | num >>> 32 - cnt;
	  }
	
	  return Sha1;
	};

/***/ }),
/* 399 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	/**
	 * A JavaScript implementation of the Secure Hash Algorithm, SHA-256, as defined
	 * in FIPS 180-2
	 * Version 2.2-beta Copyright Angel Marin, Paul Johnston 2000 - 2009.
	 * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
	 *
	 */
	
	var inherits = __webpack_require__(271).inherits;
	
	module.exports = function (Buffer, Hash) {
	
	  var K = [0x428A2F98, 0x71374491, 0xB5C0FBCF, 0xE9B5DBA5, 0x3956C25B, 0x59F111F1, 0x923F82A4, 0xAB1C5ED5, 0xD807AA98, 0x12835B01, 0x243185BE, 0x550C7DC3, 0x72BE5D74, 0x80DEB1FE, 0x9BDC06A7, 0xC19BF174, 0xE49B69C1, 0xEFBE4786, 0x0FC19DC6, 0x240CA1CC, 0x2DE92C6F, 0x4A7484AA, 0x5CB0A9DC, 0x76F988DA, 0x983E5152, 0xA831C66D, 0xB00327C8, 0xBF597FC7, 0xC6E00BF3, 0xD5A79147, 0x06CA6351, 0x14292967, 0x27B70A85, 0x2E1B2138, 0x4D2C6DFC, 0x53380D13, 0x650A7354, 0x766A0ABB, 0x81C2C92E, 0x92722C85, 0xA2BFE8A1, 0xA81A664B, 0xC24B8B70, 0xC76C51A3, 0xD192E819, 0xD6990624, 0xF40E3585, 0x106AA070, 0x19A4C116, 0x1E376C08, 0x2748774C, 0x34B0BCB5, 0x391C0CB3, 0x4ED8AA4A, 0x5B9CCA4F, 0x682E6FF3, 0x748F82EE, 0x78A5636F, 0x84C87814, 0x8CC70208, 0x90BEFFFA, 0xA4506CEB, 0xBEF9A3F7, 0xC67178F2];
	
	  var W = new Array(64);
	
	  function Sha256() {
	    this.init();
	
	    this._w = W; //new Array(64)
	
	    Hash.call(this, 16 * 4, 14 * 4);
	  }
	
	  inherits(Sha256, Hash);
	
	  Sha256.prototype.init = function () {
	
	    this._a = 0x6a09e667 | 0;
	    this._b = 0xbb67ae85 | 0;
	    this._c = 0x3c6ef372 | 0;
	    this._d = 0xa54ff53a | 0;
	    this._e = 0x510e527f | 0;
	    this._f = 0x9b05688c | 0;
	    this._g = 0x1f83d9ab | 0;
	    this._h = 0x5be0cd19 | 0;
	
	    this._len = this._s = 0;
	
	    return this;
	  };
	
	  function S(X, n) {
	    return X >>> n | X << 32 - n;
	  }
	
	  function R(X, n) {
	    return X >>> n;
	  }
	
	  function Ch(x, y, z) {
	    return x & y ^ ~x & z;
	  }
	
	  function Maj(x, y, z) {
	    return x & y ^ x & z ^ y & z;
	  }
	
	  function Sigma0256(x) {
	    return S(x, 2) ^ S(x, 13) ^ S(x, 22);
	  }
	
	  function Sigma1256(x) {
	    return S(x, 6) ^ S(x, 11) ^ S(x, 25);
	  }
	
	  function Gamma0256(x) {
	    return S(x, 7) ^ S(x, 18) ^ R(x, 3);
	  }
	
	  function Gamma1256(x) {
	    return S(x, 17) ^ S(x, 19) ^ R(x, 10);
	  }
	
	  Sha256.prototype._update = function (M) {
	
	    var W = this._w;
	    var a, b, c, d, e, f, g, h;
	    var T1, T2;
	
	    a = this._a | 0;
	    b = this._b | 0;
	    c = this._c | 0;
	    d = this._d | 0;
	    e = this._e | 0;
	    f = this._f | 0;
	    g = this._g | 0;
	    h = this._h | 0;
	
	    for (var j = 0; j < 64; j++) {
	      var w = W[j] = j < 16 ? M.readInt32BE(j * 4) : Gamma1256(W[j - 2]) + W[j - 7] + Gamma0256(W[j - 15]) + W[j - 16];
	
	      T1 = h + Sigma1256(e) + Ch(e, f, g) + K[j] + w;
	
	      T2 = Sigma0256(a) + Maj(a, b, c);
	      h = g;g = f;f = e;e = d + T1;d = c;c = b;b = a;a = T1 + T2;
	    }
	
	    this._a = a + this._a | 0;
	    this._b = b + this._b | 0;
	    this._c = c + this._c | 0;
	    this._d = d + this._d | 0;
	    this._e = e + this._e | 0;
	    this._f = f + this._f | 0;
	    this._g = g + this._g | 0;
	    this._h = h + this._h | 0;
	  };
	
	  Sha256.prototype._hash = function () {
	    var H = new Buffer(32);
	
	    H.writeInt32BE(this._a, 0);
	    H.writeInt32BE(this._b, 4);
	    H.writeInt32BE(this._c, 8);
	    H.writeInt32BE(this._d, 12);
	    H.writeInt32BE(this._e, 16);
	    H.writeInt32BE(this._f, 20);
	    H.writeInt32BE(this._g, 24);
	    H.writeInt32BE(this._h, 28);
	
	    return H;
	  };
	
	  return Sha256;
	};

/***/ }),
/* 400 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var inherits = __webpack_require__(271).inherits;
	
	module.exports = function (Buffer, Hash) {
	  var K = [0x428a2f98, 0xd728ae22, 0x71374491, 0x23ef65cd, 0xb5c0fbcf, 0xec4d3b2f, 0xe9b5dba5, 0x8189dbbc, 0x3956c25b, 0xf348b538, 0x59f111f1, 0xb605d019, 0x923f82a4, 0xaf194f9b, 0xab1c5ed5, 0xda6d8118, 0xd807aa98, 0xa3030242, 0x12835b01, 0x45706fbe, 0x243185be, 0x4ee4b28c, 0x550c7dc3, 0xd5ffb4e2, 0x72be5d74, 0xf27b896f, 0x80deb1fe, 0x3b1696b1, 0x9bdc06a7, 0x25c71235, 0xc19bf174, 0xcf692694, 0xe49b69c1, 0x9ef14ad2, 0xefbe4786, 0x384f25e3, 0x0fc19dc6, 0x8b8cd5b5, 0x240ca1cc, 0x77ac9c65, 0x2de92c6f, 0x592b0275, 0x4a7484aa, 0x6ea6e483, 0x5cb0a9dc, 0xbd41fbd4, 0x76f988da, 0x831153b5, 0x983e5152, 0xee66dfab, 0xa831c66d, 0x2db43210, 0xb00327c8, 0x98fb213f, 0xbf597fc7, 0xbeef0ee4, 0xc6e00bf3, 0x3da88fc2, 0xd5a79147, 0x930aa725, 0x06ca6351, 0xe003826f, 0x14292967, 0x0a0e6e70, 0x27b70a85, 0x46d22ffc, 0x2e1b2138, 0x5c26c926, 0x4d2c6dfc, 0x5ac42aed, 0x53380d13, 0x9d95b3df, 0x650a7354, 0x8baf63de, 0x766a0abb, 0x3c77b2a8, 0x81c2c92e, 0x47edaee6, 0x92722c85, 0x1482353b, 0xa2bfe8a1, 0x4cf10364, 0xa81a664b, 0xbc423001, 0xc24b8b70, 0xd0f89791, 0xc76c51a3, 0x0654be30, 0xd192e819, 0xd6ef5218, 0xd6990624, 0x5565a910, 0xf40e3585, 0x5771202a, 0x106aa070, 0x32bbd1b8, 0x19a4c116, 0xb8d2d0c8, 0x1e376c08, 0x5141ab53, 0x2748774c, 0xdf8eeb99, 0x34b0bcb5, 0xe19b48a8, 0x391c0cb3, 0xc5c95a63, 0x4ed8aa4a, 0xe3418acb, 0x5b9cca4f, 0x7763e373, 0x682e6ff3, 0xd6b2b8a3, 0x748f82ee, 0x5defb2fc, 0x78a5636f, 0x43172f60, 0x84c87814, 0xa1f0ab72, 0x8cc70208, 0x1a6439ec, 0x90befffa, 0x23631e28, 0xa4506ceb, 0xde82bde9, 0xbef9a3f7, 0xb2c67915, 0xc67178f2, 0xe372532b, 0xca273ece, 0xea26619c, 0xd186b8c7, 0x21c0c207, 0xeada7dd6, 0xcde0eb1e, 0xf57d4f7f, 0xee6ed178, 0x06f067aa, 0x72176fba, 0x0a637dc5, 0xa2c898a6, 0x113f9804, 0xbef90dae, 0x1b710b35, 0x131c471b, 0x28db77f5, 0x23047d84, 0x32caab7b, 0x40c72493, 0x3c9ebe0a, 0x15c9bebc, 0x431d67c4, 0x9c100d4c, 0x4cc5d4be, 0xcb3e42b6, 0x597f299c, 0xfc657e2a, 0x5fcb6fab, 0x3ad6faec, 0x6c44198c, 0x4a475817];
	
	  var W = new Array(160);
	
	  function Sha512() {
	    this.init();
	    this._w = W;
	
	    Hash.call(this, 128, 112);
	  }
	
	  inherits(Sha512, Hash);
	
	  Sha512.prototype.init = function () {
	
	    this._a = 0x6a09e667 | 0;
	    this._b = 0xbb67ae85 | 0;
	    this._c = 0x3c6ef372 | 0;
	    this._d = 0xa54ff53a | 0;
	    this._e = 0x510e527f | 0;
	    this._f = 0x9b05688c | 0;
	    this._g = 0x1f83d9ab | 0;
	    this._h = 0x5be0cd19 | 0;
	
	    this._al = 0xf3bcc908 | 0;
	    this._bl = 0x84caa73b | 0;
	    this._cl = 0xfe94f82b | 0;
	    this._dl = 0x5f1d36f1 | 0;
	    this._el = 0xade682d1 | 0;
	    this._fl = 0x2b3e6c1f | 0;
	    this._gl = 0xfb41bd6b | 0;
	    this._hl = 0x137e2179 | 0;
	
	    this._len = this._s = 0;
	
	    return this;
	  };
	
	  function S(X, Xl, n) {
	    return X >>> n | Xl << 32 - n;
	  }
	
	  function Ch(x, y, z) {
	    return x & y ^ ~x & z;
	  }
	
	  function Maj(x, y, z) {
	    return x & y ^ x & z ^ y & z;
	  }
	
	  Sha512.prototype._update = function (M) {
	
	    var W = this._w;
	    var a, b, c, d, e, f, g, h;
	    var al, bl, cl, dl, el, fl, gl, hl;
	
	    a = this._a | 0;
	    b = this._b | 0;
	    c = this._c | 0;
	    d = this._d | 0;
	    e = this._e | 0;
	    f = this._f | 0;
	    g = this._g | 0;
	    h = this._h | 0;
	
	    al = this._al | 0;
	    bl = this._bl | 0;
	    cl = this._cl | 0;
	    dl = this._dl | 0;
	    el = this._el | 0;
	    fl = this._fl | 0;
	    gl = this._gl | 0;
	    hl = this._hl | 0;
	
	    for (var i = 0; i < 80; i++) {
	      var j = i * 2;
	
	      var Wi, Wil;
	
	      if (i < 16) {
	        Wi = W[j] = M.readInt32BE(j * 4);
	        Wil = W[j + 1] = M.readInt32BE(j * 4 + 4);
	      } else {
	        var x = W[j - 15 * 2];
	        var xl = W[j - 15 * 2 + 1];
	        var gamma0 = S(x, xl, 1) ^ S(x, xl, 8) ^ x >>> 7;
	        var gamma0l = S(xl, x, 1) ^ S(xl, x, 8) ^ S(xl, x, 7);
	
	        x = W[j - 2 * 2];
	        xl = W[j - 2 * 2 + 1];
	        var gamma1 = S(x, xl, 19) ^ S(xl, x, 29) ^ x >>> 6;
	        var gamma1l = S(xl, x, 19) ^ S(x, xl, 29) ^ S(xl, x, 6);
	
	        // W[i] = gamma0 + W[i - 7] + gamma1 + W[i - 16]
	        var Wi7 = W[j - 7 * 2];
	        var Wi7l = W[j - 7 * 2 + 1];
	
	        var Wi16 = W[j - 16 * 2];
	        var Wi16l = W[j - 16 * 2 + 1];
	
	        Wil = gamma0l + Wi7l;
	        Wi = gamma0 + Wi7 + (Wil >>> 0 < gamma0l >>> 0 ? 1 : 0);
	        Wil = Wil + gamma1l;
	        Wi = Wi + gamma1 + (Wil >>> 0 < gamma1l >>> 0 ? 1 : 0);
	        Wil = Wil + Wi16l;
	        Wi = Wi + Wi16 + (Wil >>> 0 < Wi16l >>> 0 ? 1 : 0);
	
	        W[j] = Wi;
	        W[j + 1] = Wil;
	      }
	
	      var maj = Maj(a, b, c);
	      var majl = Maj(al, bl, cl);
	
	      var sigma0h = S(a, al, 28) ^ S(al, a, 2) ^ S(al, a, 7);
	      var sigma0l = S(al, a, 28) ^ S(a, al, 2) ^ S(a, al, 7);
	      var sigma1h = S(e, el, 14) ^ S(e, el, 18) ^ S(el, e, 9);
	      var sigma1l = S(el, e, 14) ^ S(el, e, 18) ^ S(e, el, 9);
	
	      // t1 = h + sigma1 + ch + K[i] + W[i]
	      var Ki = K[j];
	      var Kil = K[j + 1];
	
	      var ch = Ch(e, f, g);
	      var chl = Ch(el, fl, gl);
	
	      var t1l = hl + sigma1l;
	      var t1 = h + sigma1h + (t1l >>> 0 < hl >>> 0 ? 1 : 0);
	      t1l = t1l + chl;
	      t1 = t1 + ch + (t1l >>> 0 < chl >>> 0 ? 1 : 0);
	      t1l = t1l + Kil;
	      t1 = t1 + Ki + (t1l >>> 0 < Kil >>> 0 ? 1 : 0);
	      t1l = t1l + Wil;
	      t1 = t1 + Wi + (t1l >>> 0 < Wil >>> 0 ? 1 : 0);
	
	      // t2 = sigma0 + maj
	      var t2l = sigma0l + majl;
	      var t2 = sigma0h + maj + (t2l >>> 0 < sigma0l >>> 0 ? 1 : 0);
	
	      h = g;
	      hl = gl;
	      g = f;
	      gl = fl;
	      f = e;
	      fl = el;
	      el = dl + t1l | 0;
	      e = d + t1 + (el >>> 0 < dl >>> 0 ? 1 : 0) | 0;
	      d = c;
	      dl = cl;
	      c = b;
	      cl = bl;
	      b = a;
	      bl = al;
	      al = t1l + t2l | 0;
	      a = t1 + t2 + (al >>> 0 < t1l >>> 0 ? 1 : 0) | 0;
	    }
	
	    this._al = this._al + al | 0;
	    this._bl = this._bl + bl | 0;
	    this._cl = this._cl + cl | 0;
	    this._dl = this._dl + dl | 0;
	    this._el = this._el + el | 0;
	    this._fl = this._fl + fl | 0;
	    this._gl = this._gl + gl | 0;
	    this._hl = this._hl + hl | 0;
	
	    this._a = this._a + a + (this._al >>> 0 < al >>> 0 ? 1 : 0) | 0;
	    this._b = this._b + b + (this._bl >>> 0 < bl >>> 0 ? 1 : 0) | 0;
	    this._c = this._c + c + (this._cl >>> 0 < cl >>> 0 ? 1 : 0) | 0;
	    this._d = this._d + d + (this._dl >>> 0 < dl >>> 0 ? 1 : 0) | 0;
	    this._e = this._e + e + (this._el >>> 0 < el >>> 0 ? 1 : 0) | 0;
	    this._f = this._f + f + (this._fl >>> 0 < fl >>> 0 ? 1 : 0) | 0;
	    this._g = this._g + g + (this._gl >>> 0 < gl >>> 0 ? 1 : 0) | 0;
	    this._h = this._h + h + (this._hl >>> 0 < hl >>> 0 ? 1 : 0) | 0;
	  };
	
	  Sha512.prototype._hash = function () {
	    var H = new Buffer(64);
	
	    function writeInt64BE(h, l, offset) {
	      H.writeInt32BE(h, offset);
	      H.writeInt32BE(l, offset + 4);
	    }
	
	    writeInt64BE(this._a, this._al, 0);
	    writeInt64BE(this._b, this._bl, 8);
	    writeInt64BE(this._c, this._cl, 16);
	    writeInt64BE(this._d, this._dl, 24);
	    writeInt64BE(this._e, this._el, 32);
	    writeInt64BE(this._f, this._fl, 40);
	    writeInt64BE(this._g, this._gl, 48);
	    writeInt64BE(this._h, this._hl, 56);
	
	    return H;
	  };
	
	  return Sha512;
	};

/***/ }),
/* 401 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	/*
	 * A JavaScript implementation of the RSA Data Security, Inc. MD5 Message
	 * Digest Algorithm, as defined in RFC 1321.
	 * Version 2.1 Copyright (C) Paul Johnston 1999 - 2002.
	 * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
	 * Distributed under the BSD License
	 * See http://pajhome.org.uk/crypt/md5 for more info.
	 */
	
	var helpers = __webpack_require__(402);
	
	/*
	 * Calculate the MD5 of an array of little-endian words, and a bit length
	 */
	function core_md5(x, len) {
	  /* append padding */
	  x[len >> 5] |= 0x80 << len % 32;
	  x[(len + 64 >>> 9 << 4) + 14] = len;
	
	  var a = 1732584193;
	  var b = -271733879;
	  var c = -1732584194;
	  var d = 271733878;
	
	  for (var i = 0; i < x.length; i += 16) {
	    var olda = a;
	    var oldb = b;
	    var oldc = c;
	    var oldd = d;
	
	    a = md5_ff(a, b, c, d, x[i + 0], 7, -680876936);
	    d = md5_ff(d, a, b, c, x[i + 1], 12, -389564586);
	    c = md5_ff(c, d, a, b, x[i + 2], 17, 606105819);
	    b = md5_ff(b, c, d, a, x[i + 3], 22, -1044525330);
	    a = md5_ff(a, b, c, d, x[i + 4], 7, -176418897);
	    d = md5_ff(d, a, b, c, x[i + 5], 12, 1200080426);
	    c = md5_ff(c, d, a, b, x[i + 6], 17, -1473231341);
	    b = md5_ff(b, c, d, a, x[i + 7], 22, -45705983);
	    a = md5_ff(a, b, c, d, x[i + 8], 7, 1770035416);
	    d = md5_ff(d, a, b, c, x[i + 9], 12, -1958414417);
	    c = md5_ff(c, d, a, b, x[i + 10], 17, -42063);
	    b = md5_ff(b, c, d, a, x[i + 11], 22, -1990404162);
	    a = md5_ff(a, b, c, d, x[i + 12], 7, 1804603682);
	    d = md5_ff(d, a, b, c, x[i + 13], 12, -40341101);
	    c = md5_ff(c, d, a, b, x[i + 14], 17, -1502002290);
	    b = md5_ff(b, c, d, a, x[i + 15], 22, 1236535329);
	
	    a = md5_gg(a, b, c, d, x[i + 1], 5, -165796510);
	    d = md5_gg(d, a, b, c, x[i + 6], 9, -1069501632);
	    c = md5_gg(c, d, a, b, x[i + 11], 14, 643717713);
	    b = md5_gg(b, c, d, a, x[i + 0], 20, -373897302);
	    a = md5_gg(a, b, c, d, x[i + 5], 5, -701558691);
	    d = md5_gg(d, a, b, c, x[i + 10], 9, 38016083);
	    c = md5_gg(c, d, a, b, x[i + 15], 14, -660478335);
	    b = md5_gg(b, c, d, a, x[i + 4], 20, -405537848);
	    a = md5_gg(a, b, c, d, x[i + 9], 5, 568446438);
	    d = md5_gg(d, a, b, c, x[i + 14], 9, -1019803690);
	    c = md5_gg(c, d, a, b, x[i + 3], 14, -187363961);
	    b = md5_gg(b, c, d, a, x[i + 8], 20, 1163531501);
	    a = md5_gg(a, b, c, d, x[i + 13], 5, -1444681467);
	    d = md5_gg(d, a, b, c, x[i + 2], 9, -51403784);
	    c = md5_gg(c, d, a, b, x[i + 7], 14, 1735328473);
	    b = md5_gg(b, c, d, a, x[i + 12], 20, -1926607734);
	
	    a = md5_hh(a, b, c, d, x[i + 5], 4, -378558);
	    d = md5_hh(d, a, b, c, x[i + 8], 11, -2022574463);
	    c = md5_hh(c, d, a, b, x[i + 11], 16, 1839030562);
	    b = md5_hh(b, c, d, a, x[i + 14], 23, -35309556);
	    a = md5_hh(a, b, c, d, x[i + 1], 4, -1530992060);
	    d = md5_hh(d, a, b, c, x[i + 4], 11, 1272893353);
	    c = md5_hh(c, d, a, b, x[i + 7], 16, -155497632);
	    b = md5_hh(b, c, d, a, x[i + 10], 23, -1094730640);
	    a = md5_hh(a, b, c, d, x[i + 13], 4, 681279174);
	    d = md5_hh(d, a, b, c, x[i + 0], 11, -358537222);
	    c = md5_hh(c, d, a, b, x[i + 3], 16, -722521979);
	    b = md5_hh(b, c, d, a, x[i + 6], 23, 76029189);
	    a = md5_hh(a, b, c, d, x[i + 9], 4, -640364487);
	    d = md5_hh(d, a, b, c, x[i + 12], 11, -421815835);
	    c = md5_hh(c, d, a, b, x[i + 15], 16, 530742520);
	    b = md5_hh(b, c, d, a, x[i + 2], 23, -995338651);
	
	    a = md5_ii(a, b, c, d, x[i + 0], 6, -198630844);
	    d = md5_ii(d, a, b, c, x[i + 7], 10, 1126891415);
	    c = md5_ii(c, d, a, b, x[i + 14], 15, -1416354905);
	    b = md5_ii(b, c, d, a, x[i + 5], 21, -57434055);
	    a = md5_ii(a, b, c, d, x[i + 12], 6, 1700485571);
	    d = md5_ii(d, a, b, c, x[i + 3], 10, -1894986606);
	    c = md5_ii(c, d, a, b, x[i + 10], 15, -1051523);
	    b = md5_ii(b, c, d, a, x[i + 1], 21, -2054922799);
	    a = md5_ii(a, b, c, d, x[i + 8], 6, 1873313359);
	    d = md5_ii(d, a, b, c, x[i + 15], 10, -30611744);
	    c = md5_ii(c, d, a, b, x[i + 6], 15, -1560198380);
	    b = md5_ii(b, c, d, a, x[i + 13], 21, 1309151649);
	    a = md5_ii(a, b, c, d, x[i + 4], 6, -145523070);
	    d = md5_ii(d, a, b, c, x[i + 11], 10, -1120210379);
	    c = md5_ii(c, d, a, b, x[i + 2], 15, 718787259);
	    b = md5_ii(b, c, d, a, x[i + 9], 21, -343485551);
	
	    a = safe_add(a, olda);
	    b = safe_add(b, oldb);
	    c = safe_add(c, oldc);
	    d = safe_add(d, oldd);
	  }
	  return Array(a, b, c, d);
	}
	
	/*
	 * These functions implement the four basic operations the algorithm uses.
	 */
	function md5_cmn(q, a, b, x, s, t) {
	  return safe_add(bit_rol(safe_add(safe_add(a, q), safe_add(x, t)), s), b);
	}
	function md5_ff(a, b, c, d, x, s, t) {
	  return md5_cmn(b & c | ~b & d, a, b, x, s, t);
	}
	function md5_gg(a, b, c, d, x, s, t) {
	  return md5_cmn(b & d | c & ~d, a, b, x, s, t);
	}
	function md5_hh(a, b, c, d, x, s, t) {
	  return md5_cmn(b ^ c ^ d, a, b, x, s, t);
	}
	function md5_ii(a, b, c, d, x, s, t) {
	  return md5_cmn(c ^ (b | ~d), a, b, x, s, t);
	}
	
	/*
	 * Add integers, wrapping at 2^32. This uses 16-bit operations internally
	 * to work around bugs in some JS interpreters.
	 */
	function safe_add(x, y) {
	  var lsw = (x & 0xFFFF) + (y & 0xFFFF);
	  var msw = (x >> 16) + (y >> 16) + (lsw >> 16);
	  return msw << 16 | lsw & 0xFFFF;
	}
	
	/*
	 * Bitwise rotate a 32-bit number to the left.
	 */
	function bit_rol(num, cnt) {
	  return num << cnt | num >>> 32 - cnt;
	}
	
	module.exports = function md5(buf) {
	  return helpers.hash(buf, core_md5, 16);
	};

/***/ }),
/* 402 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {"use strict";
	
	var intSize = 4;
	var zeroBuffer = new Buffer(intSize);zeroBuffer.fill(0);
	var chrsz = 8;
	
	function toArray(buf, bigEndian) {
	  if (buf.length % intSize !== 0) {
	    var len = buf.length + (intSize - buf.length % intSize);
	    buf = Buffer.concat([buf, zeroBuffer], len);
	  }
	
	  var arr = [];
	  var fn = bigEndian ? buf.readInt32BE : buf.readInt32LE;
	  for (var i = 0; i < buf.length; i += intSize) {
	    arr.push(fn.call(buf, i));
	  }
	  return arr;
	}
	
	function toBuffer(arr, size, bigEndian) {
	  var buf = new Buffer(size);
	  var fn = bigEndian ? buf.writeInt32BE : buf.writeInt32LE;
	  for (var i = 0; i < arr.length; i++) {
	    fn.call(buf, arr[i], i * 4, true);
	  }
	  return buf;
	}
	
	function hash(buf, fn, hashSize, bigEndian) {
	  if (!Buffer.isBuffer(buf)) buf = new Buffer(buf);
	  var arr = fn(toArray(buf, bigEndian), buf.length * chrsz);
	  return toBuffer(arr, hashSize, bigEndian);
	}
	
	module.exports = { hash: hash };
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(290).Buffer))

/***/ }),
/* 403 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {'use strict';
	
	module.exports = ripemd160;
	
	/*
	CryptoJS v3.1.2
	code.google.com/p/crypto-js
	(c) 2009-2013 by Jeff Mott. All rights reserved.
	code.google.com/p/crypto-js/wiki/License
	*/
	/** @preserve
	(c) 2012 by Cédric Mesnil. All rights reserved.
	
	Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:
	
	    - Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.
	    - Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.
	
	THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*/
	
	// Constants table
	var zl = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 7, 4, 13, 1, 10, 6, 15, 3, 12, 0, 9, 5, 2, 14, 11, 8, 3, 10, 14, 4, 9, 15, 8, 1, 2, 7, 0, 6, 13, 11, 5, 12, 1, 9, 11, 10, 0, 8, 12, 4, 13, 3, 7, 15, 14, 5, 6, 2, 4, 0, 5, 9, 7, 12, 2, 10, 14, 1, 3, 8, 11, 6, 15, 13];
	var zr = [5, 14, 7, 0, 9, 2, 11, 4, 13, 6, 15, 8, 1, 10, 3, 12, 6, 11, 3, 7, 0, 13, 5, 10, 14, 15, 8, 12, 4, 9, 1, 2, 15, 5, 1, 3, 7, 14, 6, 9, 11, 8, 12, 2, 10, 0, 4, 13, 8, 6, 4, 1, 3, 11, 15, 0, 5, 12, 2, 13, 9, 7, 10, 14, 12, 15, 10, 4, 1, 5, 8, 7, 6, 2, 13, 14, 0, 3, 9, 11];
	var sl = [11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8, 7, 6, 8, 13, 11, 9, 7, 15, 7, 12, 15, 9, 11, 7, 13, 12, 11, 13, 6, 7, 14, 9, 13, 15, 14, 8, 13, 6, 5, 12, 7, 5, 11, 12, 14, 15, 14, 15, 9, 8, 9, 14, 5, 6, 8, 6, 5, 12, 9, 15, 5, 11, 6, 8, 13, 12, 5, 12, 13, 14, 11, 8, 5, 6];
	var sr = [8, 9, 9, 11, 13, 15, 15, 5, 7, 7, 8, 11, 14, 14, 12, 6, 9, 13, 15, 7, 12, 8, 9, 11, 7, 7, 12, 7, 6, 15, 13, 11, 9, 7, 15, 11, 8, 6, 6, 14, 12, 13, 5, 14, 13, 13, 7, 5, 15, 5, 8, 11, 14, 14, 6, 14, 6, 9, 12, 9, 12, 5, 15, 8, 8, 5, 12, 9, 12, 5, 14, 6, 8, 13, 6, 5, 15, 13, 11, 11];
	
	var hl = [0x00000000, 0x5A827999, 0x6ED9EBA1, 0x8F1BBCDC, 0xA953FD4E];
	var hr = [0x50A28BE6, 0x5C4DD124, 0x6D703EF3, 0x7A6D76E9, 0x00000000];
	
	var bytesToWords = function bytesToWords(bytes) {
	  var words = [];
	  for (var i = 0, b = 0; i < bytes.length; i++, b += 8) {
	    words[b >>> 5] |= bytes[i] << 24 - b % 32;
	  }
	  return words;
	};
	
	var wordsToBytes = function wordsToBytes(words) {
	  var bytes = [];
	  for (var b = 0; b < words.length * 32; b += 8) {
	    bytes.push(words[b >>> 5] >>> 24 - b % 32 & 0xFF);
	  }
	  return bytes;
	};
	
	var processBlock = function processBlock(H, M, offset) {
	
	  // Swap endian
	  for (var i = 0; i < 16; i++) {
	    var offset_i = offset + i;
	    var M_offset_i = M[offset_i];
	
	    // Swap
	    M[offset_i] = (M_offset_i << 8 | M_offset_i >>> 24) & 0x00ff00ff | (M_offset_i << 24 | M_offset_i >>> 8) & 0xff00ff00;
	  }
	
	  // Working variables
	  var al, bl, cl, dl, el;
	  var ar, br, cr, dr, er;
	
	  ar = al = H[0];
	  br = bl = H[1];
	  cr = cl = H[2];
	  dr = dl = H[3];
	  er = el = H[4];
	  // Computation
	  var t;
	  for (var i = 0; i < 80; i += 1) {
	    t = al + M[offset + zl[i]] | 0;
	    if (i < 16) {
	      t += f1(bl, cl, dl) + hl[0];
	    } else if (i < 32) {
	      t += f2(bl, cl, dl) + hl[1];
	    } else if (i < 48) {
	      t += f3(bl, cl, dl) + hl[2];
	    } else if (i < 64) {
	      t += f4(bl, cl, dl) + hl[3];
	    } else {
	      // if (i<80) {
	      t += f5(bl, cl, dl) + hl[4];
	    }
	    t = t | 0;
	    t = rotl(t, sl[i]);
	    t = t + el | 0;
	    al = el;
	    el = dl;
	    dl = rotl(cl, 10);
	    cl = bl;
	    bl = t;
	
	    t = ar + M[offset + zr[i]] | 0;
	    if (i < 16) {
	      t += f5(br, cr, dr) + hr[0];
	    } else if (i < 32) {
	      t += f4(br, cr, dr) + hr[1];
	    } else if (i < 48) {
	      t += f3(br, cr, dr) + hr[2];
	    } else if (i < 64) {
	      t += f2(br, cr, dr) + hr[3];
	    } else {
	      // if (i<80) {
	      t += f1(br, cr, dr) + hr[4];
	    }
	    t = t | 0;
	    t = rotl(t, sr[i]);
	    t = t + er | 0;
	    ar = er;
	    er = dr;
	    dr = rotl(cr, 10);
	    cr = br;
	    br = t;
	  }
	  // Intermediate hash value
	  t = H[1] + cl + dr | 0;
	  H[1] = H[2] + dl + er | 0;
	  H[2] = H[3] + el + ar | 0;
	  H[3] = H[4] + al + br | 0;
	  H[4] = H[0] + bl + cr | 0;
	  H[0] = t;
	};
	
	function f1(x, y, z) {
	  return x ^ y ^ z;
	}
	
	function f2(x, y, z) {
	  return x & y | ~x & z;
	}
	
	function f3(x, y, z) {
	  return (x | ~y) ^ z;
	}
	
	function f4(x, y, z) {
	  return x & z | y & ~z;
	}
	
	function f5(x, y, z) {
	  return x ^ (y | ~z);
	}
	
	function rotl(x, n) {
	  return x << n | x >>> 32 - n;
	}
	
	function ripemd160(message) {
	  var H = [0x67452301, 0xEFCDAB89, 0x98BADCFE, 0x10325476, 0xC3D2E1F0];
	
	  if (typeof message == 'string') message = new Buffer(message, 'utf8');
	
	  var m = bytesToWords(message);
	
	  var nBitsLeft = message.length * 8;
	  var nBitsTotal = message.length * 8;
	
	  // Add padding
	  m[nBitsLeft >>> 5] |= 0x80 << 24 - nBitsLeft % 32;
	  m[(nBitsLeft + 64 >>> 9 << 4) + 14] = (nBitsTotal << 8 | nBitsTotal >>> 24) & 0x00ff00ff | (nBitsTotal << 24 | nBitsTotal >>> 8) & 0xff00ff00;
	
	  for (var i = 0; i < m.length; i += 16) {
	    processBlock(H, m, i);
	  }
	
	  // Swap endian
	  for (var i = 0; i < 5; i++) {
	    // Shortcut
	    var H_i = H[i];
	
	    // Swap
	    H[i] = (H_i << 8 | H_i >>> 24) & 0x00ff00ff | (H_i << 24 | H_i >>> 8) & 0xff00ff00;
	  }
	
	  var digestbytes = wordsToBytes(H);
	  return new Buffer(digestbytes);
	}
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(290).Buffer))

/***/ }),
/* 404 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {'use strict';
	
	var createHash = __webpack_require__(395);
	
	var zeroBuffer = new Buffer(128);
	zeroBuffer.fill(0);
	
	module.exports = Hmac;
	
	function Hmac(alg, key) {
	  if (!(this instanceof Hmac)) return new Hmac(alg, key);
	  this._opad = opad;
	  this._alg = alg;
	
	  var blocksize = alg === 'sha512' ? 128 : 64;
	
	  key = this._key = !Buffer.isBuffer(key) ? new Buffer(key) : key;
	
	  if (key.length > blocksize) {
	    key = createHash(alg).update(key).digest();
	  } else if (key.length < blocksize) {
	    key = Buffer.concat([key, zeroBuffer], blocksize);
	  }
	
	  var ipad = this._ipad = new Buffer(blocksize);
	  var opad = this._opad = new Buffer(blocksize);
	
	  for (var i = 0; i < blocksize; i++) {
	    ipad[i] = key[i] ^ 0x36;
	    opad[i] = key[i] ^ 0x5C;
	  }
	
	  this._hash = createHash(alg).update(ipad);
	}
	
	Hmac.prototype.update = function (data, enc) {
	  this._hash.update(data, enc);
	  return this;
	};
	
	Hmac.prototype.digest = function (enc) {
	  var h = this._hash.digest();
	  return createHash(this._alg).update(this._opad).update(h).digest(enc);
	};
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(290).Buffer))

/***/ }),
/* 405 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var pbkdf2Export = __webpack_require__(406);
	
	module.exports = function (crypto, exports) {
	  exports = exports || {};
	
	  var exported = pbkdf2Export(crypto);
	
	  exports.pbkdf2 = exported.pbkdf2;
	  exports.pbkdf2Sync = exported.pbkdf2Sync;
	
	  return exports;
	};

/***/ }),
/* 406 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {'use strict';
	
	module.exports = function (crypto) {
	  function pbkdf2(password, salt, iterations, keylen, digest, callback) {
	    if ('function' === typeof digest) {
	      callback = digest;
	      digest = undefined;
	    }
	
	    if ('function' !== typeof callback) throw new Error('No callback provided to pbkdf2');
	
	    setTimeout(function () {
	      var result;
	
	      try {
	        result = pbkdf2Sync(password, salt, iterations, keylen, digest);
	      } catch (e) {
	        return callback(e);
	      }
	
	      callback(undefined, result);
	    });
	  }
	
	  function pbkdf2Sync(password, salt, iterations, keylen, digest) {
	    if ('number' !== typeof iterations) throw new TypeError('Iterations not a number');
	
	    if (iterations < 0) throw new TypeError('Bad iterations');
	
	    if ('number' !== typeof keylen) throw new TypeError('Key length not a number');
	
	    if (keylen < 0) throw new TypeError('Bad key length');
	
	    digest = digest || 'sha1';
	
	    if (!Buffer.isBuffer(password)) password = new Buffer(password);
	    if (!Buffer.isBuffer(salt)) salt = new Buffer(salt);
	
	    var hLen,
	        l = 1,
	        r,
	        T;
	    var DK = new Buffer(keylen);
	    var block1 = new Buffer(salt.length + 4);
	    salt.copy(block1, 0, 0, salt.length);
	
	    for (var i = 1; i <= l; i++) {
	      block1.writeUInt32BE(i, salt.length);
	
	      var U = crypto.createHmac(digest, password).update(block1).digest();
	
	      if (!hLen) {
	        hLen = U.length;
	        T = new Buffer(hLen);
	        l = Math.ceil(keylen / hLen);
	        r = keylen - (l - 1) * hLen;
	
	        if (keylen > (Math.pow(2, 32) - 1) * hLen) throw new TypeError('keylen exceeds maximum length');
	      }
	
	      U.copy(T, 0, 0, hLen);
	
	      for (var j = 1; j < iterations; j++) {
	        U = crypto.createHmac(digest, password).update(U).digest();
	
	        for (var k = 0; k < hLen; k++) {
	          T[k] ^= U[k];
	        }
	      }
	
	      var destPos = (i - 1) * hLen;
	      var len = i == l ? r : hLen;
	      T.copy(DK, destPos, 0, len);
	    }
	
	    return DK;
	  }
	
	  return {
	    pbkdf2: pbkdf2,
	    pbkdf2Sync: pbkdf2Sync
	  };
	};
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(290).Buffer))

/***/ }),
/* 407 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports = function (crypto, exports) {
	  exports = exports || {};
	  var ciphers = __webpack_require__(408)(crypto);
	  exports.createCipher = ciphers.createCipher;
	  exports.createCipheriv = ciphers.createCipheriv;
	  var deciphers = __webpack_require__(420)(crypto);
	  exports.createDecipher = deciphers.createDecipher;
	  exports.createDecipheriv = deciphers.createDecipheriv;
	  var modes = __webpack_require__(411);
	  function listCiphers() {
	    return Object.keys(modes);
	  }
	  exports.listCiphers = listCiphers;
	};

/***/ }),
/* 408 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {'use strict';
	
	var aes = __webpack_require__(409);
	var Transform = __webpack_require__(410);
	var inherits = __webpack_require__(284);
	var modes = __webpack_require__(411);
	var ebtk = __webpack_require__(412);
	var StreamCipher = __webpack_require__(413);
	inherits(Cipher, Transform);
	function Cipher(mode, key, iv) {
	  if (!(this instanceof Cipher)) {
	    return new Cipher(mode, key, iv);
	  }
	  Transform.call(this);
	  this._cache = new Splitter();
	  this._cipher = new aes.AES(key);
	  this._prev = new Buffer(iv.length);
	  iv.copy(this._prev);
	  this._mode = mode;
	}
	Cipher.prototype._transform = function (data, _, next) {
	  this._cache.add(data);
	  var chunk;
	  var thing;
	  while (chunk = this._cache.get()) {
	    thing = this._mode.encrypt(this, chunk);
	    this.push(thing);
	  }
	  next();
	};
	Cipher.prototype._flush = function (next) {
	  var chunk = this._cache.flush();
	  this.push(this._mode.encrypt(this, chunk));
	  this._cipher.scrub();
	  next();
	};
	
	function Splitter() {
	  if (!(this instanceof Splitter)) {
	    return new Splitter();
	  }
	  this.cache = new Buffer('');
	}
	Splitter.prototype.add = function (data) {
	  this.cache = Buffer.concat([this.cache, data]);
	};
	
	Splitter.prototype.get = function () {
	  if (this.cache.length > 15) {
	    var out = this.cache.slice(0, 16);
	    this.cache = this.cache.slice(16);
	    return out;
	  }
	  return null;
	};
	Splitter.prototype.flush = function () {
	  var len = 16 - this.cache.length;
	  var padBuff = new Buffer(len);
	
	  var i = -1;
	  while (++i < len) {
	    padBuff.writeUInt8(len, i);
	  }
	  var out = Buffer.concat([this.cache, padBuff]);
	  return out;
	};
	var modelist = {
	  ECB: __webpack_require__(414),
	  CBC: __webpack_require__(415),
	  CFB: __webpack_require__(417),
	  OFB: __webpack_require__(418),
	  CTR: __webpack_require__(419)
	};
	module.exports = function (crypto) {
	  function createCipheriv(suite, password, iv) {
	    var config = modes[suite];
	    if (!config) {
	      throw new TypeError('invalid suite type');
	    }
	    if (typeof iv === 'string') {
	      iv = new Buffer(iv);
	    }
	    if (typeof password === 'string') {
	      password = new Buffer(password);
	    }
	    if (password.length !== config.key / 8) {
	      throw new TypeError('invalid key length ' + password.length);
	    }
	    if (iv.length !== config.iv) {
	      throw new TypeError('invalid iv length ' + iv.length);
	    }
	    if (config.type === 'stream') {
	      return new StreamCipher(modelist[config.mode], password, iv);
	    }
	    return new Cipher(modelist[config.mode], password, iv);
	  }
	  function createCipher(suite, password) {
	    var config = modes[suite];
	    if (!config) {
	      throw new TypeError('invalid suite type');
	    }
	    var keys = ebtk(crypto, password, config.key, config.iv);
	    return createCipheriv(suite, keys.key, keys.iv);
	  }
	  return {
	    createCipher: createCipher,
	    createCipheriv: createCipheriv
	  };
	};
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(290).Buffer))

/***/ }),
/* 409 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {"use strict";
	
	var uint_max = Math.pow(2, 32);
	function fixup_uint32(x) {
	  var ret, x_pos;
	  ret = x > uint_max || x < 0 ? (x_pos = Math.abs(x) % uint_max, x < 0 ? uint_max - x_pos : x_pos) : x;
	  return ret;
	}
	function scrub_vec(v) {
	  var i, _i, _ref;
	  for (i = _i = 0, _ref = v.length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
	    v[i] = 0;
	  }
	  return false;
	}
	
	function Global() {
	  var i;
	  this.SBOX = [];
	  this.INV_SBOX = [];
	  this.SUB_MIX = function () {
	    var _i, _results;
	    _results = [];
	    for (i = _i = 0; _i < 4; i = ++_i) {
	      _results.push([]);
	    }
	    return _results;
	  }();
	  this.INV_SUB_MIX = function () {
	    var _i, _results;
	    _results = [];
	    for (i = _i = 0; _i < 4; i = ++_i) {
	      _results.push([]);
	    }
	    return _results;
	  }();
	  this.init();
	  this.RCON = [0x00, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36];
	}
	
	Global.prototype.init = function () {
	  var d, i, sx, t, x, x2, x4, x8, xi, _i;
	  d = function () {
	    var _i, _results;
	    _results = [];
	    for (i = _i = 0; _i < 256; i = ++_i) {
	      if (i < 128) {
	        _results.push(i << 1);
	      } else {
	        _results.push(i << 1 ^ 0x11b);
	      }
	    }
	    return _results;
	  }();
	  x = 0;
	  xi = 0;
	  for (i = _i = 0; _i < 256; i = ++_i) {
	    sx = xi ^ xi << 1 ^ xi << 2 ^ xi << 3 ^ xi << 4;
	    sx = sx >>> 8 ^ sx & 0xff ^ 0x63;
	    this.SBOX[x] = sx;
	    this.INV_SBOX[sx] = x;
	    x2 = d[x];
	    x4 = d[x2];
	    x8 = d[x4];
	    t = d[sx] * 0x101 ^ sx * 0x1010100;
	    this.SUB_MIX[0][x] = t << 24 | t >>> 8;
	    this.SUB_MIX[1][x] = t << 16 | t >>> 16;
	    this.SUB_MIX[2][x] = t << 8 | t >>> 24;
	    this.SUB_MIX[3][x] = t;
	    t = x8 * 0x1010101 ^ x4 * 0x10001 ^ x2 * 0x101 ^ x * 0x1010100;
	    this.INV_SUB_MIX[0][sx] = t << 24 | t >>> 8;
	    this.INV_SUB_MIX[1][sx] = t << 16 | t >>> 16;
	    this.INV_SUB_MIX[2][sx] = t << 8 | t >>> 24;
	    this.INV_SUB_MIX[3][sx] = t;
	    if (x === 0) {
	      x = xi = 1;
	    } else {
	      x = x2 ^ d[d[d[x8 ^ x2]]];
	      xi ^= d[d[xi]];
	    }
	  }
	  return true;
	};
	
	var G = new Global();
	
	AES.blockSize = 4 * 4;
	
	AES.prototype.blockSize = AES.blockSize;
	
	AES.keySize = 256 / 8;
	
	AES.prototype.keySize = AES.keySize;
	
	AES.ivSize = AES.blockSize;
	
	AES.prototype.ivSize = AES.ivSize;
	
	function bufferToArray(buf) {
	  var len = buf.length / 4;
	  var out = new Array(len);
	  var i = -1;
	  while (++i < len) {
	    out[i] = buf.readUInt32BE(i * 4);
	  }
	  return out;
	}
	function AES(key) {
	  this._key = bufferToArray(key);
	  this._doReset();
	}
	
	AES.prototype._doReset = function () {
	  var invKsRow, keySize, keyWords, ksRow, ksRows, t, _i, _j;
	  keyWords = this._key;
	  keySize = keyWords.length;
	  this._nRounds = keySize + 6;
	  ksRows = (this._nRounds + 1) * 4;
	  this._keySchedule = [];
	  for (ksRow = _i = 0; 0 <= ksRows ? _i < ksRows : _i > ksRows; ksRow = 0 <= ksRows ? ++_i : --_i) {
	    this._keySchedule[ksRow] = ksRow < keySize ? keyWords[ksRow] : (t = this._keySchedule[ksRow - 1], ksRow % keySize === 0 ? (t = t << 8 | t >>> 24, t = G.SBOX[t >>> 24] << 24 | G.SBOX[t >>> 16 & 0xff] << 16 | G.SBOX[t >>> 8 & 0xff] << 8 | G.SBOX[t & 0xff], t ^= G.RCON[ksRow / keySize | 0] << 24) : keySize > 6 && ksRow % keySize === 4 ? t = G.SBOX[t >>> 24] << 24 | G.SBOX[t >>> 16 & 0xff] << 16 | G.SBOX[t >>> 8 & 0xff] << 8 | G.SBOX[t & 0xff] : void 0, this._keySchedule[ksRow - keySize] ^ t);
	  }
	  this._invKeySchedule = [];
	  for (invKsRow = _j = 0; 0 <= ksRows ? _j < ksRows : _j > ksRows; invKsRow = 0 <= ksRows ? ++_j : --_j) {
	    ksRow = ksRows - invKsRow;
	    t = this._keySchedule[ksRow - (invKsRow % 4 ? 0 : 4)];
	    this._invKeySchedule[invKsRow] = invKsRow < 4 || ksRow <= 4 ? t : G.INV_SUB_MIX[0][G.SBOX[t >>> 24]] ^ G.INV_SUB_MIX[1][G.SBOX[t >>> 16 & 0xff]] ^ G.INV_SUB_MIX[2][G.SBOX[t >>> 8 & 0xff]] ^ G.INV_SUB_MIX[3][G.SBOX[t & 0xff]];
	  }
	  return true;
	};
	
	AES.prototype.encryptBlock = function (M) {
	  M = bufferToArray(new Buffer(M));
	  var out = this._doCryptBlock(M, this._keySchedule, G.SUB_MIX, G.SBOX);
	  var buf = new Buffer(16);
	  buf.writeUInt32BE(out[0], 0);
	  buf.writeUInt32BE(out[1], 4);
	  buf.writeUInt32BE(out[2], 8);
	  buf.writeUInt32BE(out[3], 12);
	  return buf;
	};
	
	AES.prototype.decryptBlock = function (M) {
	  M = bufferToArray(new Buffer(M));
	  var temp = [M[3], M[1]];
	  M[1] = temp[0];
	  M[3] = temp[1];
	  var out = this._doCryptBlock(M, this._invKeySchedule, G.INV_SUB_MIX, G.INV_SBOX);
	  var buf = new Buffer(16);
	  buf.writeUInt32BE(out[0], 0);
	  buf.writeUInt32BE(out[3], 4);
	  buf.writeUInt32BE(out[2], 8);
	  buf.writeUInt32BE(out[1], 12);
	  return buf;
	};
	
	AES.prototype.scrub = function () {
	  scrub_vec(this._keySchedule);
	  scrub_vec(this._invKeySchedule);
	  scrub_vec(this._key);
	};
	
	AES.prototype._doCryptBlock = function (M, keySchedule, SUB_MIX, SBOX) {
	  var ksRow, round, s0, s1, s2, s3, t0, t1, t2, t3, _i, _ref;
	
	  s0 = M[0] ^ keySchedule[0];
	  s1 = M[1] ^ keySchedule[1];
	  s2 = M[2] ^ keySchedule[2];
	  s3 = M[3] ^ keySchedule[3];
	  ksRow = 4;
	  for (round = _i = 1, _ref = this._nRounds; 1 <= _ref ? _i < _ref : _i > _ref; round = 1 <= _ref ? ++_i : --_i) {
	    t0 = SUB_MIX[0][s0 >>> 24] ^ SUB_MIX[1][s1 >>> 16 & 0xff] ^ SUB_MIX[2][s2 >>> 8 & 0xff] ^ SUB_MIX[3][s3 & 0xff] ^ keySchedule[ksRow++];
	    t1 = SUB_MIX[0][s1 >>> 24] ^ SUB_MIX[1][s2 >>> 16 & 0xff] ^ SUB_MIX[2][s3 >>> 8 & 0xff] ^ SUB_MIX[3][s0 & 0xff] ^ keySchedule[ksRow++];
	    t2 = SUB_MIX[0][s2 >>> 24] ^ SUB_MIX[1][s3 >>> 16 & 0xff] ^ SUB_MIX[2][s0 >>> 8 & 0xff] ^ SUB_MIX[3][s1 & 0xff] ^ keySchedule[ksRow++];
	    t3 = SUB_MIX[0][s3 >>> 24] ^ SUB_MIX[1][s0 >>> 16 & 0xff] ^ SUB_MIX[2][s1 >>> 8 & 0xff] ^ SUB_MIX[3][s2 & 0xff] ^ keySchedule[ksRow++];
	    s0 = t0;
	    s1 = t1;
	    s2 = t2;
	    s3 = t3;
	  }
	  t0 = (SBOX[s0 >>> 24] << 24 | SBOX[s1 >>> 16 & 0xff] << 16 | SBOX[s2 >>> 8 & 0xff] << 8 | SBOX[s3 & 0xff]) ^ keySchedule[ksRow++];
	  t1 = (SBOX[s1 >>> 24] << 24 | SBOX[s2 >>> 16 & 0xff] << 16 | SBOX[s3 >>> 8 & 0xff] << 8 | SBOX[s0 & 0xff]) ^ keySchedule[ksRow++];
	  t2 = (SBOX[s2 >>> 24] << 24 | SBOX[s3 >>> 16 & 0xff] << 16 | SBOX[s0 >>> 8 & 0xff] << 8 | SBOX[s1 & 0xff]) ^ keySchedule[ksRow++];
	  t3 = (SBOX[s3 >>> 24] << 24 | SBOX[s0 >>> 16 & 0xff] << 16 | SBOX[s1 >>> 8 & 0xff] << 8 | SBOX[s2 & 0xff]) ^ keySchedule[ksRow++];
	  return [fixup_uint32(t0), fixup_uint32(t1), fixup_uint32(t2), fixup_uint32(t3)];
	};
	
	exports.AES = AES;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(290).Buffer))

/***/ }),
/* 410 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {'use strict';
	
	var Transform = __webpack_require__(282).Transform;
	var inherits = __webpack_require__(284);
	
	module.exports = CipherBase;
	inherits(CipherBase, Transform);
	function CipherBase() {
	  Transform.call(this);
	}
	CipherBase.prototype.update = function (data, inputEnd, outputEnc) {
	  this.write(data, inputEnd);
	  var outData = new Buffer('');
	  var chunk;
	  while (chunk = this.read()) {
	    outData = Buffer.concat([outData, chunk]);
	  }
	  if (outputEnc) {
	    outData = outData.toString(outputEnc);
	  }
	  return outData;
	};
	CipherBase.prototype.final = function (outputEnc) {
	  this.end();
	  var outData = new Buffer('');
	  var chunk;
	  while (chunk = this.read()) {
	    outData = Buffer.concat([outData, chunk]);
	  }
	  if (outputEnc) {
	    outData = outData.toString(outputEnc);
	  }
	  return outData;
	};
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(290).Buffer))

/***/ }),
/* 411 */
/***/ (function(module, exports) {

	'use strict';
	
	exports['aes-128-ecb'] = {
	  cipher: 'AES',
	  key: 128,
	  iv: 0,
	  mode: 'ECB',
	  type: 'block'
	};
	exports['aes-192-ecb'] = {
	  cipher: 'AES',
	  key: 192,
	  iv: 0,
	  mode: 'ECB',
	  type: 'block'
	};
	exports['aes-256-ecb'] = {
	  cipher: 'AES',
	  key: 256,
	  iv: 0,
	  mode: 'ECB',
	  type: 'block'
	};
	exports['aes-128-cbc'] = {
	  cipher: 'AES',
	  key: 128,
	  iv: 16,
	  mode: 'CBC',
	  type: 'block'
	};
	exports['aes-192-cbc'] = {
	  cipher: 'AES',
	  key: 192,
	  iv: 16,
	  mode: 'CBC',
	  type: 'block'
	};
	exports['aes-256-cbc'] = {
	  cipher: 'AES',
	  key: 256,
	  iv: 16,
	  mode: 'CBC',
	  type: 'block'
	};
	exports['aes128'] = exports['aes-128-cbc'];
	exports['aes192'] = exports['aes-192-cbc'];
	exports['aes256'] = exports['aes-256-cbc'];
	exports['aes-128-cfb'] = {
	  cipher: 'AES',
	  key: 128,
	  iv: 16,
	  mode: 'CFB',
	  type: 'stream'
	};
	exports['aes-192-cfb'] = {
	  cipher: 'AES',
	  key: 192,
	  iv: 16,
	  mode: 'CFB',
	  type: 'stream'
	};
	exports['aes-256-cfb'] = {
	  cipher: 'AES',
	  key: 256,
	  iv: 16,
	  mode: 'CFB',
	  type: 'stream'
	};
	exports['aes-128-ofb'] = {
	  cipher: 'AES',
	  key: 128,
	  iv: 16,
	  mode: 'OFB',
	  type: 'stream'
	};
	exports['aes-192-ofb'] = {
	  cipher: 'AES',
	  key: 192,
	  iv: 16,
	  mode: 'OFB',
	  type: 'stream'
	};
	exports['aes-256-ofb'] = {
	  cipher: 'AES',
	  key: 256,
	  iv: 16,
	  mode: 'OFB',
	  type: 'stream'
	};
	exports['aes-128-ctr'] = {
	  cipher: 'AES',
	  key: 128,
	  iv: 16,
	  mode: 'CTR',
	  type: 'stream'
	};
	exports['aes-192-ctr'] = {
	  cipher: 'AES',
	  key: 192,
	  iv: 16,
	  mode: 'CTR',
	  type: 'stream'
	};
	exports['aes-256-ctr'] = {
	  cipher: 'AES',
	  key: 256,
	  iv: 16,
	  mode: 'CTR',
	  type: 'stream'
	};

/***/ }),
/* 412 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {'use strict';
	
	module.exports = function (crypto, password, keyLen, ivLen) {
	  keyLen = keyLen / 8;
	  ivLen = ivLen || 0;
	  var ki = 0;
	  var ii = 0;
	  var key = new Buffer(keyLen);
	  var iv = new Buffer(ivLen);
	  var addmd = 0;
	  var md, md_buf;
	  var i;
	  while (true) {
	    md = crypto.createHash('md5');
	    if (addmd++ > 0) {
	      md.update(md_buf);
	    }
	    md.update(password);
	    md_buf = md.digest();
	    i = 0;
	    if (keyLen > 0) {
	      while (true) {
	        if (keyLen === 0) {
	          break;
	        }
	        if (i === md_buf.length) {
	          break;
	        }
	        key[ki++] = md_buf[i];
	        keyLen--;
	        i++;
	      }
	    }
	    if (ivLen > 0 && i !== md_buf.length) {
	      while (true) {
	        if (ivLen === 0) {
	          break;
	        }
	        if (i === md_buf.length) {
	          break;
	        }
	        iv[ii++] = md_buf[i];
	        ivLen--;
	        i++;
	      }
	    }
	    if (keyLen === 0 && ivLen === 0) {
	      break;
	    }
	  }
	  for (i = 0; i < md_buf.length; i++) {
	    md_buf[i] = 0;
	  }
	  return {
	    key: key,
	    iv: iv
	  };
	};
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(290).Buffer))

/***/ }),
/* 413 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {'use strict';
	
	var aes = __webpack_require__(409);
	var Transform = __webpack_require__(410);
	var inherits = __webpack_require__(284);
	
	inherits(StreamCipher, Transform);
	module.exports = StreamCipher;
	function StreamCipher(mode, key, iv, decrypt) {
	  if (!(this instanceof StreamCipher)) {
	    return new StreamCipher(mode, key, iv);
	  }
	  Transform.call(this);
	  this._cipher = new aes.AES(key);
	  this._prev = new Buffer(iv.length);
	  this._cache = new Buffer('');
	  this._secCache = new Buffer('');
	  this._decrypt = decrypt;
	  iv.copy(this._prev);
	  this._mode = mode;
	}
	StreamCipher.prototype._transform = function (chunk, _, next) {
	  next(null, this._mode.encrypt(this, chunk, this._decrypt));
	};
	StreamCipher.prototype._flush = function (next) {
	  this._cipher.scrub();
	  next();
	};
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(290).Buffer))

/***/ }),
/* 414 */
/***/ (function(module, exports) {

	"use strict";
	
	exports.encrypt = function (self, block) {
	  return self._cipher.encryptBlock(block);
	};
	exports.decrypt = function (self, block) {
	  return self._cipher.decryptBlock(block);
	};

/***/ }),
/* 415 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var xor = __webpack_require__(416);
	exports.encrypt = function (self, block) {
	  var data = xor(block, self._prev);
	  self._prev = self._cipher.encryptBlock(data);
	  return self._prev;
	};
	exports.decrypt = function (self, block) {
	  var pad = self._prev;
	  self._prev = block;
	  var out = self._cipher.decryptBlock(block);
	  return xor(out, pad);
	};

/***/ }),
/* 416 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {"use strict";
	
	module.exports = xor;
	function xor(a, b) {
	  var len = Math.min(a.length, b.length);
	  var out = new Buffer(len);
	  var i = -1;
	  while (++i < len) {
	    out.writeUInt8(a[i] ^ b[i], i);
	  }
	  return out;
	}
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(290).Buffer))

/***/ }),
/* 417 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {'use strict';
	
	var xor = __webpack_require__(416);
	exports.encrypt = function (self, data, decrypt) {
	  var out = new Buffer('');
	  var len;
	  while (data.length) {
	    if (self._cache.length === 0) {
	      self._cache = self._cipher.encryptBlock(self._prev);
	      self._prev = new Buffer('');
	    }
	    if (self._cache.length <= data.length) {
	      len = self._cache.length;
	      out = Buffer.concat([out, encryptStart(self, data.slice(0, len), decrypt)]);
	      data = data.slice(len);
	    } else {
	      out = Buffer.concat([out, encryptStart(self, data, decrypt)]);
	      break;
	    }
	  }
	  return out;
	};
	function encryptStart(self, data, decrypt) {
	  var len = data.length;
	  var out = xor(data, self._cache);
	  self._cache = self._cache.slice(len);
	  self._prev = Buffer.concat([self._prev, decrypt ? data : out]);
	  return out;
	}
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(290).Buffer))

/***/ }),
/* 418 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {'use strict';
	
	var xor = __webpack_require__(416);
	function getBlock(self) {
	  self._prev = self._cipher.encryptBlock(self._prev);
	  return self._prev;
	}
	exports.encrypt = function (self, chunk) {
	  while (self._cache.length < chunk.length) {
	    self._cache = Buffer.concat([self._cache, getBlock(self)]);
	  }
	  var pad = self._cache.slice(0, chunk.length);
	  self._cache = self._cache.slice(chunk.length);
	  return xor(chunk, pad);
	};
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(290).Buffer))

/***/ }),
/* 419 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {'use strict';
	
	var xor = __webpack_require__(416);
	function getBlock(self) {
	  var out = self._cipher.encryptBlock(self._prev);
	  incr32(self._prev);
	  return out;
	}
	exports.encrypt = function (self, chunk) {
	  while (self._cache.length < chunk.length) {
	    self._cache = Buffer.concat([self._cache, getBlock(self)]);
	  }
	  var pad = self._cache.slice(0, chunk.length);
	  self._cache = self._cache.slice(chunk.length);
	  return xor(chunk, pad);
	};
	function incr32(iv) {
	  var len = iv.length;
	  var item;
	  while (len--) {
	    item = iv.readUInt8(len);
	    if (item === 255) {
	      iv.writeUInt8(0, len);
	    } else {
	      item++;
	      iv.writeUInt8(item, len);
	      break;
	    }
	  }
	}
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(290).Buffer))

/***/ }),
/* 420 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {'use strict';
	
	var aes = __webpack_require__(409);
	var Transform = __webpack_require__(410);
	var inherits = __webpack_require__(284);
	var modes = __webpack_require__(411);
	var StreamCipher = __webpack_require__(413);
	var ebtk = __webpack_require__(412);
	
	inherits(Decipher, Transform);
	function Decipher(mode, key, iv) {
	  if (!(this instanceof Decipher)) {
	    return new Decipher(mode, key, iv);
	  }
	  Transform.call(this);
	  this._cache = new Splitter();
	  this._last = void 0;
	  this._cipher = new aes.AES(key);
	  this._prev = new Buffer(iv.length);
	  iv.copy(this._prev);
	  this._mode = mode;
	}
	Decipher.prototype._transform = function (data, _, next) {
	  this._cache.add(data);
	  var chunk;
	  var thing;
	  while (chunk = this._cache.get()) {
	    thing = this._mode.decrypt(this, chunk);
	    this.push(thing);
	  }
	  next();
	};
	Decipher.prototype._flush = function (next) {
	  var chunk = this._cache.flush();
	  if (!chunk) {
	    return next;
	  }
	
	  this.push(unpad(this._mode.decrypt(this, chunk)));
	
	  next();
	};
	
	function Splitter() {
	  if (!(this instanceof Splitter)) {
	    return new Splitter();
	  }
	  this.cache = new Buffer('');
	}
	Splitter.prototype.add = function (data) {
	  this.cache = Buffer.concat([this.cache, data]);
	};
	
	Splitter.prototype.get = function () {
	  if (this.cache.length > 16) {
	    var out = this.cache.slice(0, 16);
	    this.cache = this.cache.slice(16);
	    return out;
	  }
	  return null;
	};
	Splitter.prototype.flush = function () {
	  if (this.cache.length) {
	    return this.cache;
	  }
	};
	function unpad(last) {
	  var padded = last[15];
	  if (padded === 16) {
	    return;
	  }
	  return last.slice(0, 16 - padded);
	}
	
	var modelist = {
	  ECB: __webpack_require__(414),
	  CBC: __webpack_require__(415),
	  CFB: __webpack_require__(417),
	  OFB: __webpack_require__(418),
	  CTR: __webpack_require__(419)
	};
	
	module.exports = function (crypto) {
	  function createDecipheriv(suite, password, iv) {
	    var config = modes[suite];
	    if (!config) {
	      throw new TypeError('invalid suite type');
	    }
	    if (typeof iv === 'string') {
	      iv = new Buffer(iv);
	    }
	    if (typeof password === 'string') {
	      password = new Buffer(password);
	    }
	    if (password.length !== config.key / 8) {
	      throw new TypeError('invalid key length ' + password.length);
	    }
	    if (iv.length !== config.iv) {
	      throw new TypeError('invalid iv length ' + iv.length);
	    }
	    if (config.type === 'stream') {
	      return new StreamCipher(modelist[config.mode], password, iv, true);
	    }
	    return new Decipher(modelist[config.mode], password, iv);
	  }
	
	  function createDecipher(suite, password) {
	    var config = modes[suite];
	    if (!config) {
	      throw new TypeError('invalid suite type');
	    }
	    var keys = ebtk(crypto, password, config.key, config.iv);
	    return createDecipheriv(suite, keys.key, keys.iv);
	  }
	  return {
	    createDecipher: createDecipher,
	    createDecipheriv: createDecipheriv
	  };
	};
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(290).Buffer))

/***/ }),
/* 421 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer, process) {'use strict';
	
	// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.
	
	var Transform = __webpack_require__(307);
	
	var binding = __webpack_require__(422);
	var util = __webpack_require__(271);
	var assert = __webpack_require__(336).ok;
	
	// zlib doesn't provide these, so kludge them in following the same
	// const naming scheme zlib uses.
	binding.Z_MIN_WINDOWBITS = 8;
	binding.Z_MAX_WINDOWBITS = 15;
	binding.Z_DEFAULT_WINDOWBITS = 15;
	
	// fewer than 64 bytes per chunk is stupid.
	// technically it could work with as few as 8, but even 64 bytes
	// is absurdly low.  Usually a MB or more is best.
	binding.Z_MIN_CHUNK = 64;
	binding.Z_MAX_CHUNK = Infinity;
	binding.Z_DEFAULT_CHUNK = 16 * 1024;
	
	binding.Z_MIN_MEMLEVEL = 1;
	binding.Z_MAX_MEMLEVEL = 9;
	binding.Z_DEFAULT_MEMLEVEL = 8;
	
	binding.Z_MIN_LEVEL = -1;
	binding.Z_MAX_LEVEL = 9;
	binding.Z_DEFAULT_LEVEL = binding.Z_DEFAULT_COMPRESSION;
	
	// expose all the zlib constants
	Object.keys(binding).forEach(function (k) {
	  if (k.match(/^Z/)) exports[k] = binding[k];
	});
	
	// translation table for return codes.
	exports.codes = {
	  Z_OK: binding.Z_OK,
	  Z_STREAM_END: binding.Z_STREAM_END,
	  Z_NEED_DICT: binding.Z_NEED_DICT,
	  Z_ERRNO: binding.Z_ERRNO,
	  Z_STREAM_ERROR: binding.Z_STREAM_ERROR,
	  Z_DATA_ERROR: binding.Z_DATA_ERROR,
	  Z_MEM_ERROR: binding.Z_MEM_ERROR,
	  Z_BUF_ERROR: binding.Z_BUF_ERROR,
	  Z_VERSION_ERROR: binding.Z_VERSION_ERROR
	};
	
	Object.keys(exports.codes).forEach(function (k) {
	  exports.codes[exports.codes[k]] = k;
	});
	
	exports.Deflate = Deflate;
	exports.Inflate = Inflate;
	exports.Gzip = Gzip;
	exports.Gunzip = Gunzip;
	exports.DeflateRaw = DeflateRaw;
	exports.InflateRaw = InflateRaw;
	exports.Unzip = Unzip;
	
	exports.createDeflate = function (o) {
	  return new Deflate(o);
	};
	
	exports.createInflate = function (o) {
	  return new Inflate(o);
	};
	
	exports.createDeflateRaw = function (o) {
	  return new DeflateRaw(o);
	};
	
	exports.createInflateRaw = function (o) {
	  return new InflateRaw(o);
	};
	
	exports.createGzip = function (o) {
	  return new Gzip(o);
	};
	
	exports.createGunzip = function (o) {
	  return new Gunzip(o);
	};
	
	exports.createUnzip = function (o) {
	  return new Unzip(o);
	};
	
	// Convenience methods.
	// compress/decompress a string or buffer in one step.
	exports.deflate = function (buffer, opts, callback) {
	  if (typeof opts === 'function') {
	    callback = opts;
	    opts = {};
	  }
	  return zlibBuffer(new Deflate(opts), buffer, callback);
	};
	
	exports.deflateSync = function (buffer, opts) {
	  return zlibBufferSync(new Deflate(opts), buffer);
	};
	
	exports.gzip = function (buffer, opts, callback) {
	  if (typeof opts === 'function') {
	    callback = opts;
	    opts = {};
	  }
	  return zlibBuffer(new Gzip(opts), buffer, callback);
	};
	
	exports.gzipSync = function (buffer, opts) {
	  return zlibBufferSync(new Gzip(opts), buffer);
	};
	
	exports.deflateRaw = function (buffer, opts, callback) {
	  if (typeof opts === 'function') {
	    callback = opts;
	    opts = {};
	  }
	  return zlibBuffer(new DeflateRaw(opts), buffer, callback);
	};
	
	exports.deflateRawSync = function (buffer, opts) {
	  return zlibBufferSync(new DeflateRaw(opts), buffer);
	};
	
	exports.unzip = function (buffer, opts, callback) {
	  if (typeof opts === 'function') {
	    callback = opts;
	    opts = {};
	  }
	  return zlibBuffer(new Unzip(opts), buffer, callback);
	};
	
	exports.unzipSync = function (buffer, opts) {
	  return zlibBufferSync(new Unzip(opts), buffer);
	};
	
	exports.inflate = function (buffer, opts, callback) {
	  if (typeof opts === 'function') {
	    callback = opts;
	    opts = {};
	  }
	  return zlibBuffer(new Inflate(opts), buffer, callback);
	};
	
	exports.inflateSync = function (buffer, opts) {
	  return zlibBufferSync(new Inflate(opts), buffer);
	};
	
	exports.gunzip = function (buffer, opts, callback) {
	  if (typeof opts === 'function') {
	    callback = opts;
	    opts = {};
	  }
	  return zlibBuffer(new Gunzip(opts), buffer, callback);
	};
	
	exports.gunzipSync = function (buffer, opts) {
	  return zlibBufferSync(new Gunzip(opts), buffer);
	};
	
	exports.inflateRaw = function (buffer, opts, callback) {
	  if (typeof opts === 'function') {
	    callback = opts;
	    opts = {};
	  }
	  return zlibBuffer(new InflateRaw(opts), buffer, callback);
	};
	
	exports.inflateRawSync = function (buffer, opts) {
	  return zlibBufferSync(new InflateRaw(opts), buffer);
	};
	
	function zlibBuffer(engine, buffer, callback) {
	  var buffers = [];
	  var nread = 0;
	
	  engine.on('error', onError);
	  engine.on('end', onEnd);
	
	  engine.end(buffer);
	  flow();
	
	  function flow() {
	    var chunk;
	    while (null !== (chunk = engine.read())) {
	      buffers.push(chunk);
	      nread += chunk.length;
	    }
	    engine.once('readable', flow);
	  }
	
	  function onError(err) {
	    engine.removeListener('end', onEnd);
	    engine.removeListener('readable', flow);
	    callback(err);
	  }
	
	  function onEnd() {
	    var buf = Buffer.concat(buffers, nread);
	    buffers = [];
	    callback(null, buf);
	    engine.close();
	  }
	}
	
	function zlibBufferSync(engine, buffer) {
	  if (typeof buffer === 'string') buffer = new Buffer(buffer);
	  if (!Buffer.isBuffer(buffer)) throw new TypeError('Not a string or buffer');
	
	  var flushFlag = binding.Z_FINISH;
	
	  return engine._processChunk(buffer, flushFlag);
	}
	
	// generic zlib
	// minimal 2-byte header
	function Deflate(opts) {
	  if (!(this instanceof Deflate)) return new Deflate(opts);
	  Zlib.call(this, opts, binding.DEFLATE);
	}
	
	function Inflate(opts) {
	  if (!(this instanceof Inflate)) return new Inflate(opts);
	  Zlib.call(this, opts, binding.INFLATE);
	}
	
	// gzip - bigger header, same deflate compression
	function Gzip(opts) {
	  if (!(this instanceof Gzip)) return new Gzip(opts);
	  Zlib.call(this, opts, binding.GZIP);
	}
	
	function Gunzip(opts) {
	  if (!(this instanceof Gunzip)) return new Gunzip(opts);
	  Zlib.call(this, opts, binding.GUNZIP);
	}
	
	// raw - no header
	function DeflateRaw(opts) {
	  if (!(this instanceof DeflateRaw)) return new DeflateRaw(opts);
	  Zlib.call(this, opts, binding.DEFLATERAW);
	}
	
	function InflateRaw(opts) {
	  if (!(this instanceof InflateRaw)) return new InflateRaw(opts);
	  Zlib.call(this, opts, binding.INFLATERAW);
	}
	
	// auto-detect header.
	function Unzip(opts) {
	  if (!(this instanceof Unzip)) return new Unzip(opts);
	  Zlib.call(this, opts, binding.UNZIP);
	}
	
	// the Zlib class they all inherit from
	// This thing manages the queue of requests, and returns
	// true or false if there is anything in the queue when
	// you call the .write() method.
	
	function Zlib(opts, mode) {
	  this._opts = opts = opts || {};
	  this._chunkSize = opts.chunkSize || exports.Z_DEFAULT_CHUNK;
	
	  Transform.call(this, opts);
	
	  if (opts.flush) {
	    if (opts.flush !== binding.Z_NO_FLUSH && opts.flush !== binding.Z_PARTIAL_FLUSH && opts.flush !== binding.Z_SYNC_FLUSH && opts.flush !== binding.Z_FULL_FLUSH && opts.flush !== binding.Z_FINISH && opts.flush !== binding.Z_BLOCK) {
	      throw new Error('Invalid flush flag: ' + opts.flush);
	    }
	  }
	  this._flushFlag = opts.flush || binding.Z_NO_FLUSH;
	
	  if (opts.chunkSize) {
	    if (opts.chunkSize < exports.Z_MIN_CHUNK || opts.chunkSize > exports.Z_MAX_CHUNK) {
	      throw new Error('Invalid chunk size: ' + opts.chunkSize);
	    }
	  }
	
	  if (opts.windowBits) {
	    if (opts.windowBits < exports.Z_MIN_WINDOWBITS || opts.windowBits > exports.Z_MAX_WINDOWBITS) {
	      throw new Error('Invalid windowBits: ' + opts.windowBits);
	    }
	  }
	
	  if (opts.level) {
	    if (opts.level < exports.Z_MIN_LEVEL || opts.level > exports.Z_MAX_LEVEL) {
	      throw new Error('Invalid compression level: ' + opts.level);
	    }
	  }
	
	  if (opts.memLevel) {
	    if (opts.memLevel < exports.Z_MIN_MEMLEVEL || opts.memLevel > exports.Z_MAX_MEMLEVEL) {
	      throw new Error('Invalid memLevel: ' + opts.memLevel);
	    }
	  }
	
	  if (opts.strategy) {
	    if (opts.strategy != exports.Z_FILTERED && opts.strategy != exports.Z_HUFFMAN_ONLY && opts.strategy != exports.Z_RLE && opts.strategy != exports.Z_FIXED && opts.strategy != exports.Z_DEFAULT_STRATEGY) {
	      throw new Error('Invalid strategy: ' + opts.strategy);
	    }
	  }
	
	  if (opts.dictionary) {
	    if (!Buffer.isBuffer(opts.dictionary)) {
	      throw new Error('Invalid dictionary: it should be a Buffer instance');
	    }
	  }
	
	  this._binding = new binding.Zlib(mode);
	
	  var self = this;
	  this._hadError = false;
	  this._binding.onerror = function (message, errno) {
	    // there is no way to cleanly recover.
	    // continuing only obscures problems.
	    self._binding = null;
	    self._hadError = true;
	
	    var error = new Error(message);
	    error.errno = errno;
	    error.code = exports.codes[errno];
	    self.emit('error', error);
	  };
	
	  var level = exports.Z_DEFAULT_COMPRESSION;
	  if (typeof opts.level === 'number') level = opts.level;
	
	  var strategy = exports.Z_DEFAULT_STRATEGY;
	  if (typeof opts.strategy === 'number') strategy = opts.strategy;
	
	  this._binding.init(opts.windowBits || exports.Z_DEFAULT_WINDOWBITS, level, opts.memLevel || exports.Z_DEFAULT_MEMLEVEL, strategy, opts.dictionary);
	
	  this._buffer = new Buffer(this._chunkSize);
	  this._offset = 0;
	  this._closed = false;
	  this._level = level;
	  this._strategy = strategy;
	
	  this.once('end', this.close);
	}
	
	util.inherits(Zlib, Transform);
	
	Zlib.prototype.params = function (level, strategy, callback) {
	  if (level < exports.Z_MIN_LEVEL || level > exports.Z_MAX_LEVEL) {
	    throw new RangeError('Invalid compression level: ' + level);
	  }
	  if (strategy != exports.Z_FILTERED && strategy != exports.Z_HUFFMAN_ONLY && strategy != exports.Z_RLE && strategy != exports.Z_FIXED && strategy != exports.Z_DEFAULT_STRATEGY) {
	    throw new TypeError('Invalid strategy: ' + strategy);
	  }
	
	  if (this._level !== level || this._strategy !== strategy) {
	    var self = this;
	    this.flush(binding.Z_SYNC_FLUSH, function () {
	      self._binding.params(level, strategy);
	      if (!self._hadError) {
	        self._level = level;
	        self._strategy = strategy;
	        if (callback) callback();
	      }
	    });
	  } else {
	    process.nextTick(callback);
	  }
	};
	
	Zlib.prototype.reset = function () {
	  return this._binding.reset();
	};
	
	// This is the _flush function called by the transform class,
	// internally, when the last chunk has been written.
	Zlib.prototype._flush = function (callback) {
	  this._transform(new Buffer(0), '', callback);
	};
	
	Zlib.prototype.flush = function (kind, callback) {
	  var ws = this._writableState;
	
	  if (typeof kind === 'function' || kind === void 0 && !callback) {
	    callback = kind;
	    kind = binding.Z_FULL_FLUSH;
	  }
	
	  if (ws.ended) {
	    if (callback) process.nextTick(callback);
	  } else if (ws.ending) {
	    if (callback) this.once('end', callback);
	  } else if (ws.needDrain) {
	    var self = this;
	    this.once('drain', function () {
	      self.flush(callback);
	    });
	  } else {
	    this._flushFlag = kind;
	    this.write(new Buffer(0), '', callback);
	  }
	};
	
	Zlib.prototype.close = function (callback) {
	  if (callback) process.nextTick(callback);
	
	  if (this._closed) return;
	
	  this._closed = true;
	
	  this._binding.close();
	
	  var self = this;
	  process.nextTick(function () {
	    self.emit('close');
	  });
	};
	
	Zlib.prototype._transform = function (chunk, encoding, cb) {
	  var flushFlag;
	  var ws = this._writableState;
	  var ending = ws.ending || ws.ended;
	  var last = ending && (!chunk || ws.length === chunk.length);
	
	  if (!chunk === null && !Buffer.isBuffer(chunk)) return cb(new Error('invalid input'));
	
	  // If it's the last chunk, or a final flush, we use the Z_FINISH flush flag.
	  // If it's explicitly flushing at some other time, then we use
	  // Z_FULL_FLUSH. Otherwise, use Z_NO_FLUSH for maximum compression
	  // goodness.
	  if (last) flushFlag = binding.Z_FINISH;else {
	    flushFlag = this._flushFlag;
	    // once we've flushed the last of the queue, stop flushing and
	    // go back to the normal behavior.
	    if (chunk.length >= ws.length) {
	      this._flushFlag = this._opts.flush || binding.Z_NO_FLUSH;
	    }
	  }
	
	  var self = this;
	  this._processChunk(chunk, flushFlag, cb);
	};
	
	Zlib.prototype._processChunk = function (chunk, flushFlag, cb) {
	  var availInBefore = chunk && chunk.length;
	  var availOutBefore = this._chunkSize - this._offset;
	  var inOff = 0;
	
	  var self = this;
	
	  var async = typeof cb === 'function';
	
	  if (!async) {
	    var buffers = [];
	    var nread = 0;
	
	    var error;
	    this.on('error', function (er) {
	      error = er;
	    });
	
	    do {
	      var res = this._binding.writeSync(flushFlag, chunk, // in
	      inOff, // in_off
	      availInBefore, // in_len
	      this._buffer, // out
	      this._offset, //out_off
	      availOutBefore); // out_len
	    } while (!this._hadError && callback(res[0], res[1]));
	
	    if (this._hadError) {
	      throw error;
	    }
	
	    var buf = Buffer.concat(buffers, nread);
	    this.close();
	
	    return buf;
	  }
	
	  var req = this._binding.write(flushFlag, chunk, // in
	  inOff, // in_off
	  availInBefore, // in_len
	  this._buffer, // out
	  this._offset, //out_off
	  availOutBefore); // out_len
	
	  req.buffer = chunk;
	  req.callback = callback;
	
	  function callback(availInAfter, availOutAfter) {
	    if (self._hadError) return;
	
	    var have = availOutBefore - availOutAfter;
	    assert(have >= 0, 'have should not go down');
	
	    if (have > 0) {
	      var out = self._buffer.slice(self._offset, self._offset + have);
	      self._offset += have;
	      // serve some output to the consumer.
	      if (async) {
	        self.push(out);
	      } else {
	        buffers.push(out);
	        nread += out.length;
	      }
	    }
	
	    // exhausted the output buffer, or used all the input create a new one.
	    if (availOutAfter === 0 || self._offset >= self._chunkSize) {
	      availOutBefore = self._chunkSize;
	      self._offset = 0;
	      self._buffer = new Buffer(self._chunkSize);
	    }
	
	    if (availOutAfter === 0) {
	      // Not actually done.  Need to reprocess.
	      // Also, update the availInBefore to the availInAfter value,
	      // so that if we have to hit it a third (fourth, etc.) time,
	      // it'll have the correct byte counts.
	      inOff += availInBefore - availInAfter;
	      availInBefore = availInAfter;
	
	      if (!async) return true;
	
	      var newReq = self._binding.write(flushFlag, chunk, inOff, availInBefore, self._buffer, self._offset, self._chunkSize);
	      newReq.callback = callback; // this same function
	      newReq.buffer = chunk;
	      return;
	    }
	
	    if (!async) return false;
	
	    // finished with the chunk.
	    cb();
	  }
	};
	
	util.inherits(Deflate, Zlib);
	util.inherits(Inflate, Zlib);
	util.inherits(Gzip, Zlib);
	util.inherits(Gunzip, Zlib);
	util.inherits(DeflateRaw, Zlib);
	util.inherits(InflateRaw, Zlib);
	util.inherits(Unzip, Zlib);
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(290).Buffer, __webpack_require__(3)))

/***/ }),
/* 422 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process, Buffer) {'use strict';
	
	var msg = __webpack_require__(423);
	var zstream = __webpack_require__(424);
	var zlib_deflate = __webpack_require__(425);
	var zlib_inflate = __webpack_require__(430);
	var constants = __webpack_require__(433);
	
	for (var key in constants) {
	  exports[key] = constants[key];
	}
	
	// zlib modes
	exports.NONE = 0;
	exports.DEFLATE = 1;
	exports.INFLATE = 2;
	exports.GZIP = 3;
	exports.GUNZIP = 4;
	exports.DEFLATERAW = 5;
	exports.INFLATERAW = 6;
	exports.UNZIP = 7;
	
	/**
	 * Emulate Node's zlib C++ layer for use by the JS layer in index.js
	 */
	function Zlib(mode) {
	  if (mode < exports.DEFLATE || mode > exports.UNZIP) throw new TypeError("Bad argument");
	
	  this.mode = mode;
	  this.init_done = false;
	  this.write_in_progress = false;
	  this.pending_close = false;
	  this.windowBits = 0;
	  this.level = 0;
	  this.memLevel = 0;
	  this.strategy = 0;
	  this.dictionary = null;
	}
	
	Zlib.prototype.init = function (windowBits, level, memLevel, strategy, dictionary) {
	  this.windowBits = windowBits;
	  this.level = level;
	  this.memLevel = memLevel;
	  this.strategy = strategy;
	  // dictionary not supported.
	
	  if (this.mode === exports.GZIP || this.mode === exports.GUNZIP) this.windowBits += 16;
	
	  if (this.mode === exports.UNZIP) this.windowBits += 32;
	
	  if (this.mode === exports.DEFLATERAW || this.mode === exports.INFLATERAW) this.windowBits = -this.windowBits;
	
	  this.strm = new zstream();
	
	  switch (this.mode) {
	    case exports.DEFLATE:
	    case exports.GZIP:
	    case exports.DEFLATERAW:
	      var status = zlib_deflate.deflateInit2(this.strm, this.level, exports.Z_DEFLATED, this.windowBits, this.memLevel, this.strategy);
	      break;
	    case exports.INFLATE:
	    case exports.GUNZIP:
	    case exports.INFLATERAW:
	    case exports.UNZIP:
	      var status = zlib_inflate.inflateInit2(this.strm, this.windowBits);
	      break;
	    default:
	      throw new Error("Unknown mode " + this.mode);
	  }
	
	  if (status !== exports.Z_OK) {
	    this._error(status);
	    return;
	  }
	
	  this.write_in_progress = false;
	  this.init_done = true;
	};
	
	Zlib.prototype.params = function () {
	  throw new Error("deflateParams Not supported");
	};
	
	Zlib.prototype._writeCheck = function () {
	  if (!this.init_done) throw new Error("write before init");
	
	  if (this.mode === exports.NONE) throw new Error("already finalized");
	
	  if (this.write_in_progress) throw new Error("write already in progress");
	
	  if (this.pending_close) throw new Error("close is pending");
	};
	
	Zlib.prototype.write = function (flush, input, in_off, in_len, out, out_off, out_len) {
	  this._writeCheck();
	  this.write_in_progress = true;
	
	  var self = this;
	  process.nextTick(function () {
	    self.write_in_progress = false;
	    var res = self._write(flush, input, in_off, in_len, out, out_off, out_len);
	    self.callback(res[0], res[1]);
	
	    if (self.pending_close) self.close();
	  });
	
	  return this;
	};
	
	// set method for Node buffers, used by pako
	function bufferSet(data, offset) {
	  for (var i = 0; i < data.length; i++) {
	    this[offset + i] = data[i];
	  }
	}
	
	Zlib.prototype.writeSync = function (flush, input, in_off, in_len, out, out_off, out_len) {
	  this._writeCheck();
	  return this._write(flush, input, in_off, in_len, out, out_off, out_len);
	};
	
	Zlib.prototype._write = function (flush, input, in_off, in_len, out, out_off, out_len) {
	  this.write_in_progress = true;
	
	  if (flush !== exports.Z_NO_FLUSH && flush !== exports.Z_PARTIAL_FLUSH && flush !== exports.Z_SYNC_FLUSH && flush !== exports.Z_FULL_FLUSH && flush !== exports.Z_FINISH && flush !== exports.Z_BLOCK) {
	    throw new Error("Invalid flush value");
	  }
	
	  if (input == null) {
	    input = new Buffer(0);
	    in_len = 0;
	    in_off = 0;
	  }
	
	  if (out._set) out.set = out._set;else out.set = bufferSet;
	
	  var strm = this.strm;
	  strm.avail_in = in_len;
	  strm.input = input;
	  strm.next_in = in_off;
	  strm.avail_out = out_len;
	  strm.output = out;
	  strm.next_out = out_off;
	
	  switch (this.mode) {
	    case exports.DEFLATE:
	    case exports.GZIP:
	    case exports.DEFLATERAW:
	      var status = zlib_deflate.deflate(strm, flush);
	      break;
	    case exports.UNZIP:
	    case exports.INFLATE:
	    case exports.GUNZIP:
	    case exports.INFLATERAW:
	      var status = zlib_inflate.inflate(strm, flush);
	      break;
	    default:
	      throw new Error("Unknown mode " + this.mode);
	  }
	
	  if (status !== exports.Z_STREAM_END && status !== exports.Z_OK) {
	    this._error(status);
	  }
	
	  this.write_in_progress = false;
	  return [strm.avail_in, strm.avail_out];
	};
	
	Zlib.prototype.close = function () {
	  if (this.write_in_progress) {
	    this.pending_close = true;
	    return;
	  }
	
	  this.pending_close = false;
	
	  if (this.mode === exports.DEFLATE || this.mode === exports.GZIP || this.mode === exports.DEFLATERAW) {
	    zlib_deflate.deflateEnd(this.strm);
	  } else {
	    zlib_inflate.inflateEnd(this.strm);
	  }
	
	  this.mode = exports.NONE;
	};
	
	Zlib.prototype.reset = function () {
	  switch (this.mode) {
	    case exports.DEFLATE:
	    case exports.DEFLATERAW:
	      var status = zlib_deflate.deflateReset(this.strm);
	      break;
	    case exports.INFLATE:
	    case exports.INFLATERAW:
	      var status = zlib_inflate.inflateReset(this.strm);
	      break;
	  }
	
	  if (status !== exports.Z_OK) {
	    this._error(status);
	  }
	};
	
	Zlib.prototype._error = function (status) {
	  this.onerror(msg[status] + ': ' + this.strm.msg, status);
	
	  this.write_in_progress = false;
	  if (this.pending_close) this.close();
	};
	
	exports.Zlib = Zlib;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3), __webpack_require__(290).Buffer))

/***/ }),
/* 423 */
/***/ (function(module, exports) {

	'use strict';
	
	module.exports = {
	  2: 'need dictionary', /* Z_NEED_DICT       2  */
	  1: 'stream end', /* Z_STREAM_END      1  */
	  0: '', /* Z_OK              0  */
	  '-1': 'file error', /* Z_ERRNO         (-1) */
	  '-2': 'stream error', /* Z_STREAM_ERROR  (-2) */
	  '-3': 'data error', /* Z_DATA_ERROR    (-3) */
	  '-4': 'insufficient memory', /* Z_MEM_ERROR     (-4) */
	  '-5': 'buffer error', /* Z_BUF_ERROR     (-5) */
	  '-6': 'incompatible version' /* Z_VERSION_ERROR (-6) */
	};

/***/ }),
/* 424 */
/***/ (function(module, exports) {

	'use strict';
	
	function ZStream() {
	  /* next input byte */
	  this.input = null; // JS specific, because we have no pointers
	  this.next_in = 0;
	  /* number of bytes available at input */
	  this.avail_in = 0;
	  /* total number of input bytes read so far */
	  this.total_in = 0;
	  /* next output byte should be put there */
	  this.output = null; // JS specific, because we have no pointers
	  this.next_out = 0;
	  /* remaining free space at output */
	  this.avail_out = 0;
	  /* total number of bytes output so far */
	  this.total_out = 0;
	  /* last error message, NULL if no error */
	  this.msg = '' /*Z_NULL*/;
	  /* not visible by applications */
	  this.state = null;
	  /* best guess about the data type: binary or text */
	  this.data_type = 2 /*Z_UNKNOWN*/;
	  /* adler32 value of the uncompressed data */
	  this.adler = 0;
	}
	
	module.exports = ZStream;

/***/ }),
/* 425 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var utils = __webpack_require__(426);
	var trees = __webpack_require__(427);
	var adler32 = __webpack_require__(428);
	var crc32 = __webpack_require__(429);
	var msg = __webpack_require__(423);
	
	/* Public constants ==========================================================*/
	/* ===========================================================================*/
	
	/* Allowed flush values; see deflate() and inflate() below for details */
	var Z_NO_FLUSH = 0;
	var Z_PARTIAL_FLUSH = 1;
	//var Z_SYNC_FLUSH    = 2;
	var Z_FULL_FLUSH = 3;
	var Z_FINISH = 4;
	var Z_BLOCK = 5;
	//var Z_TREES         = 6;
	
	
	/* Return codes for the compression/decompression functions. Negative values
	 * are errors, positive values are used for special but normal events.
	 */
	var Z_OK = 0;
	var Z_STREAM_END = 1;
	//var Z_NEED_DICT     = 2;
	//var Z_ERRNO         = -1;
	var Z_STREAM_ERROR = -2;
	var Z_DATA_ERROR = -3;
	//var Z_MEM_ERROR     = -4;
	var Z_BUF_ERROR = -5;
	//var Z_VERSION_ERROR = -6;
	
	
	/* compression levels */
	//var Z_NO_COMPRESSION      = 0;
	//var Z_BEST_SPEED          = 1;
	//var Z_BEST_COMPRESSION    = 9;
	var Z_DEFAULT_COMPRESSION = -1;
	
	var Z_FILTERED = 1;
	var Z_HUFFMAN_ONLY = 2;
	var Z_RLE = 3;
	var Z_FIXED = 4;
	var Z_DEFAULT_STRATEGY = 0;
	
	/* Possible values of the data_type field (though see inflate()) */
	//var Z_BINARY              = 0;
	//var Z_TEXT                = 1;
	//var Z_ASCII               = 1; // = Z_TEXT
	var Z_UNKNOWN = 2;
	
	/* The deflate compression method */
	var Z_DEFLATED = 8;
	
	/*============================================================================*/
	
	var MAX_MEM_LEVEL = 9;
	/* Maximum value for memLevel in deflateInit2 */
	var MAX_WBITS = 15;
	/* 32K LZ77 window */
	var DEF_MEM_LEVEL = 8;
	
	var LENGTH_CODES = 29;
	/* number of length codes, not counting the special END_BLOCK code */
	var LITERALS = 256;
	/* number of literal bytes 0..255 */
	var L_CODES = LITERALS + 1 + LENGTH_CODES;
	/* number of Literal or Length codes, including the END_BLOCK code */
	var D_CODES = 30;
	/* number of distance codes */
	var BL_CODES = 19;
	/* number of codes used to transfer the bit lengths */
	var HEAP_SIZE = 2 * L_CODES + 1;
	/* maximum heap size */
	var MAX_BITS = 15;
	/* All codes must not exceed MAX_BITS bits */
	
	var MIN_MATCH = 3;
	var MAX_MATCH = 258;
	var MIN_LOOKAHEAD = MAX_MATCH + MIN_MATCH + 1;
	
	var PRESET_DICT = 0x20;
	
	var INIT_STATE = 42;
	var EXTRA_STATE = 69;
	var NAME_STATE = 73;
	var COMMENT_STATE = 91;
	var HCRC_STATE = 103;
	var BUSY_STATE = 113;
	var FINISH_STATE = 666;
	
	var BS_NEED_MORE = 1; /* block not completed, need more input or more output */
	var BS_BLOCK_DONE = 2; /* block flush performed */
	var BS_FINISH_STARTED = 3; /* finish started, need only more output at next deflate */
	var BS_FINISH_DONE = 4; /* finish done, accept no more input or output */
	
	var OS_CODE = 0x03; // Unix :) . Don't detect, use this default.
	
	function err(strm, errorCode) {
	  strm.msg = msg[errorCode];
	  return errorCode;
	}
	
	function rank(f) {
	  return (f << 1) - (f > 4 ? 9 : 0);
	}
	
	function zero(buf) {
	  var len = buf.length;while (--len >= 0) {
	    buf[len] = 0;
	  }
	}
	
	/* =========================================================================
	 * Flush as much pending output as possible. All deflate() output goes
	 * through this function so some applications may wish to modify it
	 * to avoid allocating a large strm->output buffer and copying into it.
	 * (See also read_buf()).
	 */
	function flush_pending(strm) {
	  var s = strm.state;
	
	  //_tr_flush_bits(s);
	  var len = s.pending;
	  if (len > strm.avail_out) {
	    len = strm.avail_out;
	  }
	  if (len === 0) {
	    return;
	  }
	
	  utils.arraySet(strm.output, s.pending_buf, s.pending_out, len, strm.next_out);
	  strm.next_out += len;
	  s.pending_out += len;
	  strm.total_out += len;
	  strm.avail_out -= len;
	  s.pending -= len;
	  if (s.pending === 0) {
	    s.pending_out = 0;
	  }
	}
	
	function flush_block_only(s, last) {
	  trees._tr_flush_block(s, s.block_start >= 0 ? s.block_start : -1, s.strstart - s.block_start, last);
	  s.block_start = s.strstart;
	  flush_pending(s.strm);
	}
	
	function put_byte(s, b) {
	  s.pending_buf[s.pending++] = b;
	}
	
	/* =========================================================================
	 * Put a short in the pending buffer. The 16-bit value is put in MSB order.
	 * IN assertion: the stream state is correct and there is enough room in
	 * pending_buf.
	 */
	function putShortMSB(s, b) {
	  //  put_byte(s, (Byte)(b >> 8));
	  //  put_byte(s, (Byte)(b & 0xff));
	  s.pending_buf[s.pending++] = b >>> 8 & 0xff;
	  s.pending_buf[s.pending++] = b & 0xff;
	}
	
	/* ===========================================================================
	 * Read a new buffer from the current input stream, update the adler32
	 * and total number of bytes read.  All deflate() input goes through
	 * this function so some applications may wish to modify it to avoid
	 * allocating a large strm->input buffer and copying from it.
	 * (See also flush_pending()).
	 */
	function read_buf(strm, buf, start, size) {
	  var len = strm.avail_in;
	
	  if (len > size) {
	    len = size;
	  }
	  if (len === 0) {
	    return 0;
	  }
	
	  strm.avail_in -= len;
	
	  // zmemcpy(buf, strm->next_in, len);
	  utils.arraySet(buf, strm.input, strm.next_in, len, start);
	  if (strm.state.wrap === 1) {
	    strm.adler = adler32(strm.adler, buf, len, start);
	  } else if (strm.state.wrap === 2) {
	    strm.adler = crc32(strm.adler, buf, len, start);
	  }
	
	  strm.next_in += len;
	  strm.total_in += len;
	
	  return len;
	}
	
	/* ===========================================================================
	 * Set match_start to the longest match starting at the given string and
	 * return its length. Matches shorter or equal to prev_length are discarded,
	 * in which case the result is equal to prev_length and match_start is
	 * garbage.
	 * IN assertions: cur_match is the head of the hash chain for the current
	 *   string (strstart) and its distance is <= MAX_DIST, and prev_length >= 1
	 * OUT assertion: the match length is not greater than s->lookahead.
	 */
	function longest_match(s, cur_match) {
	  var chain_length = s.max_chain_length; /* max hash chain length */
	  var scan = s.strstart; /* current string */
	  var match; /* matched string */
	  var len; /* length of current match */
	  var best_len = s.prev_length; /* best match length so far */
	  var nice_match = s.nice_match; /* stop if match long enough */
	  var limit = s.strstart > s.w_size - MIN_LOOKAHEAD ? s.strstart - (s.w_size - MIN_LOOKAHEAD) : 0 /*NIL*/;
	
	  var _win = s.window; // shortcut
	
	  var wmask = s.w_mask;
	  var prev = s.prev;
	
	  /* Stop when cur_match becomes <= limit. To simplify the code,
	   * we prevent matches with the string of window index 0.
	   */
	
	  var strend = s.strstart + MAX_MATCH;
	  var scan_end1 = _win[scan + best_len - 1];
	  var scan_end = _win[scan + best_len];
	
	  /* The code is optimized for HASH_BITS >= 8 and MAX_MATCH-2 multiple of 16.
	   * It is easy to get rid of this optimization if necessary.
	   */
	  // Assert(s->hash_bits >= 8 && MAX_MATCH == 258, "Code too clever");
	
	  /* Do not waste too much time if we already have a good match: */
	  if (s.prev_length >= s.good_match) {
	    chain_length >>= 2;
	  }
	  /* Do not look for matches beyond the end of the input. This is necessary
	   * to make deflate deterministic.
	   */
	  if (nice_match > s.lookahead) {
	    nice_match = s.lookahead;
	  }
	
	  // Assert((ulg)s->strstart <= s->window_size-MIN_LOOKAHEAD, "need lookahead");
	
	  do {
	    // Assert(cur_match < s->strstart, "no future");
	    match = cur_match;
	
	    /* Skip to next match if the match length cannot increase
	     * or if the match length is less than 2.  Note that the checks below
	     * for insufficient lookahead only occur occasionally for performance
	     * reasons.  Therefore uninitialized memory will be accessed, and
	     * conditional jumps will be made that depend on those values.
	     * However the length of the match is limited to the lookahead, so
	     * the output of deflate is not affected by the uninitialized values.
	     */
	
	    if (_win[match + best_len] !== scan_end || _win[match + best_len - 1] !== scan_end1 || _win[match] !== _win[scan] || _win[++match] !== _win[scan + 1]) {
	      continue;
	    }
	
	    /* The check at best_len-1 can be removed because it will be made
	     * again later. (This heuristic is not always a win.)
	     * It is not necessary to compare scan[2] and match[2] since they
	     * are always equal when the other bytes match, given that
	     * the hash keys are equal and that HASH_BITS >= 8.
	     */
	    scan += 2;
	    match++;
	    // Assert(*scan == *match, "match[2]?");
	
	    /* We check for insufficient lookahead only every 8th comparison;
	     * the 256th check will be made at strstart+258.
	     */
	    do {
	      /*jshint noempty:false*/
	    } while (_win[++scan] === _win[++match] && _win[++scan] === _win[++match] && _win[++scan] === _win[++match] && _win[++scan] === _win[++match] && _win[++scan] === _win[++match] && _win[++scan] === _win[++match] && _win[++scan] === _win[++match] && _win[++scan] === _win[++match] && scan < strend);
	
	    // Assert(scan <= s->window+(unsigned)(s->window_size-1), "wild scan");
	
	    len = MAX_MATCH - (strend - scan);
	    scan = strend - MAX_MATCH;
	
	    if (len > best_len) {
	      s.match_start = cur_match;
	      best_len = len;
	      if (len >= nice_match) {
	        break;
	      }
	      scan_end1 = _win[scan + best_len - 1];
	      scan_end = _win[scan + best_len];
	    }
	  } while ((cur_match = prev[cur_match & wmask]) > limit && --chain_length !== 0);
	
	  if (best_len <= s.lookahead) {
	    return best_len;
	  }
	  return s.lookahead;
	}
	
	/* ===========================================================================
	 * Fill the window when the lookahead becomes insufficient.
	 * Updates strstart and lookahead.
	 *
	 * IN assertion: lookahead < MIN_LOOKAHEAD
	 * OUT assertions: strstart <= window_size-MIN_LOOKAHEAD
	 *    At least one byte has been read, or avail_in == 0; reads are
	 *    performed for at least two bytes (required for the zip translate_eol
	 *    option -- not supported here).
	 */
	function fill_window(s) {
	  var _w_size = s.w_size;
	  var p, n, m, more, str;
	
	  //Assert(s->lookahead < MIN_LOOKAHEAD, "already enough lookahead");
	
	  do {
	    more = s.window_size - s.lookahead - s.strstart;
	
	    // JS ints have 32 bit, block below not needed
	    /* Deal with !@#$% 64K limit: */
	    //if (sizeof(int) <= 2) {
	    //    if (more == 0 && s->strstart == 0 && s->lookahead == 0) {
	    //        more = wsize;
	    //
	    //  } else if (more == (unsigned)(-1)) {
	    //        /* Very unlikely, but possible on 16 bit machine if
	    //         * strstart == 0 && lookahead == 1 (input done a byte at time)
	    //         */
	    //        more--;
	    //    }
	    //}
	
	
	    /* If the window is almost full and there is insufficient lookahead,
	     * move the upper half to the lower one to make room in the upper half.
	     */
	    if (s.strstart >= _w_size + (_w_size - MIN_LOOKAHEAD)) {
	
	      utils.arraySet(s.window, s.window, _w_size, _w_size, 0);
	      s.match_start -= _w_size;
	      s.strstart -= _w_size;
	      /* we now have strstart >= MAX_DIST */
	      s.block_start -= _w_size;
	
	      /* Slide the hash table (could be avoided with 32 bit values
	       at the expense of memory usage). We slide even when level == 0
	       to keep the hash table consistent if we switch back to level > 0
	       later. (Using level 0 permanently is not an optimal usage of
	       zlib, so we don't care about this pathological case.)
	       */
	
	      n = s.hash_size;
	      p = n;
	      do {
	        m = s.head[--p];
	        s.head[p] = m >= _w_size ? m - _w_size : 0;
	      } while (--n);
	
	      n = _w_size;
	      p = n;
	      do {
	        m = s.prev[--p];
	        s.prev[p] = m >= _w_size ? m - _w_size : 0;
	        /* If n is not on any hash chain, prev[n] is garbage but
	         * its value will never be used.
	         */
	      } while (--n);
	
	      more += _w_size;
	    }
	    if (s.strm.avail_in === 0) {
	      break;
	    }
	
	    /* If there was no sliding:
	     *    strstart <= WSIZE+MAX_DIST-1 && lookahead <= MIN_LOOKAHEAD - 1 &&
	     *    more == window_size - lookahead - strstart
	     * => more >= window_size - (MIN_LOOKAHEAD-1 + WSIZE + MAX_DIST-1)
	     * => more >= window_size - 2*WSIZE + 2
	     * In the BIG_MEM or MMAP case (not yet supported),
	     *   window_size == input_size + MIN_LOOKAHEAD  &&
	     *   strstart + s->lookahead <= input_size => more >= MIN_LOOKAHEAD.
	     * Otherwise, window_size == 2*WSIZE so more >= 2.
	     * If there was sliding, more >= WSIZE. So in all cases, more >= 2.
	     */
	    //Assert(more >= 2, "more < 2");
	    n = read_buf(s.strm, s.window, s.strstart + s.lookahead, more);
	    s.lookahead += n;
	
	    /* Initialize the hash value now that we have some input: */
	    if (s.lookahead + s.insert >= MIN_MATCH) {
	      str = s.strstart - s.insert;
	      s.ins_h = s.window[str];
	
	      /* UPDATE_HASH(s, s->ins_h, s->window[str + 1]); */
	      s.ins_h = (s.ins_h << s.hash_shift ^ s.window[str + 1]) & s.hash_mask;
	      //#if MIN_MATCH != 3
	      //        Call update_hash() MIN_MATCH-3 more times
	      //#endif
	      while (s.insert) {
	        /* UPDATE_HASH(s, s->ins_h, s->window[str + MIN_MATCH-1]); */
	        s.ins_h = (s.ins_h << s.hash_shift ^ s.window[str + MIN_MATCH - 1]) & s.hash_mask;
	
	        s.prev[str & s.w_mask] = s.head[s.ins_h];
	        s.head[s.ins_h] = str;
	        str++;
	        s.insert--;
	        if (s.lookahead + s.insert < MIN_MATCH) {
	          break;
	        }
	      }
	    }
	    /* If the whole input has less than MIN_MATCH bytes, ins_h is garbage,
	     * but this is not important since only literal bytes will be emitted.
	     */
	  } while (s.lookahead < MIN_LOOKAHEAD && s.strm.avail_in !== 0);
	
	  /* If the WIN_INIT bytes after the end of the current data have never been
	   * written, then zero those bytes in order to avoid memory check reports of
	   * the use of uninitialized (or uninitialised as Julian writes) bytes by
	   * the longest match routines.  Update the high water mark for the next
	   * time through here.  WIN_INIT is set to MAX_MATCH since the longest match
	   * routines allow scanning to strstart + MAX_MATCH, ignoring lookahead.
	   */
	  //  if (s.high_water < s.window_size) {
	  //    var curr = s.strstart + s.lookahead;
	  //    var init = 0;
	  //
	  //    if (s.high_water < curr) {
	  //      /* Previous high water mark below current data -- zero WIN_INIT
	  //       * bytes or up to end of window, whichever is less.
	  //       */
	  //      init = s.window_size - curr;
	  //      if (init > WIN_INIT)
	  //        init = WIN_INIT;
	  //      zmemzero(s->window + curr, (unsigned)init);
	  //      s->high_water = curr + init;
	  //    }
	  //    else if (s->high_water < (ulg)curr + WIN_INIT) {
	  //      /* High water mark at or above current data, but below current data
	  //       * plus WIN_INIT -- zero out to current data plus WIN_INIT, or up
	  //       * to end of window, whichever is less.
	  //       */
	  //      init = (ulg)curr + WIN_INIT - s->high_water;
	  //      if (init > s->window_size - s->high_water)
	  //        init = s->window_size - s->high_water;
	  //      zmemzero(s->window + s->high_water, (unsigned)init);
	  //      s->high_water += init;
	  //    }
	  //  }
	  //
	  //  Assert((ulg)s->strstart <= s->window_size - MIN_LOOKAHEAD,
	  //    "not enough room for search");
	}
	
	/* ===========================================================================
	 * Copy without compression as much as possible from the input stream, return
	 * the current block state.
	 * This function does not insert new strings in the dictionary since
	 * uncompressible data is probably not useful. This function is used
	 * only for the level=0 compression option.
	 * NOTE: this function should be optimized to avoid extra copying from
	 * window to pending_buf.
	 */
	function deflate_stored(s, flush) {
	  /* Stored blocks are limited to 0xffff bytes, pending_buf is limited
	   * to pending_buf_size, and each stored block has a 5 byte header:
	   */
	  var max_block_size = 0xffff;
	
	  if (max_block_size > s.pending_buf_size - 5) {
	    max_block_size = s.pending_buf_size - 5;
	  }
	
	  /* Copy as much as possible from input to output: */
	  for (;;) {
	    /* Fill the window as much as possible: */
	    if (s.lookahead <= 1) {
	
	      //Assert(s->strstart < s->w_size+MAX_DIST(s) ||
	      //  s->block_start >= (long)s->w_size, "slide too late");
	      //      if (!(s.strstart < s.w_size + (s.w_size - MIN_LOOKAHEAD) ||
	      //        s.block_start >= s.w_size)) {
	      //        throw  new Error("slide too late");
	      //      }
	
	      fill_window(s);
	      if (s.lookahead === 0 && flush === Z_NO_FLUSH) {
	        return BS_NEED_MORE;
	      }
	
	      if (s.lookahead === 0) {
	        break;
	      }
	      /* flush the current block */
	    }
	    //Assert(s->block_start >= 0L, "block gone");
	    //    if (s.block_start < 0) throw new Error("block gone");
	
	    s.strstart += s.lookahead;
	    s.lookahead = 0;
	
	    /* Emit a stored block if pending_buf will be full: */
	    var max_start = s.block_start + max_block_size;
	
	    if (s.strstart === 0 || s.strstart >= max_start) {
	      /* strstart == 0 is possible when wraparound on 16-bit machine */
	      s.lookahead = s.strstart - max_start;
	      s.strstart = max_start;
	      /*** FLUSH_BLOCK(s, 0); ***/
	      flush_block_only(s, false);
	      if (s.strm.avail_out === 0) {
	        return BS_NEED_MORE;
	      }
	      /***/
	    }
	    /* Flush if we may have to slide, otherwise block_start may become
	     * negative and the data will be gone:
	     */
	    if (s.strstart - s.block_start >= s.w_size - MIN_LOOKAHEAD) {
	      /*** FLUSH_BLOCK(s, 0); ***/
	      flush_block_only(s, false);
	      if (s.strm.avail_out === 0) {
	        return BS_NEED_MORE;
	      }
	      /***/
	    }
	  }
	
	  s.insert = 0;
	
	  if (flush === Z_FINISH) {
	    /*** FLUSH_BLOCK(s, 1); ***/
	    flush_block_only(s, true);
	    if (s.strm.avail_out === 0) {
	      return BS_FINISH_STARTED;
	    }
	    /***/
	    return BS_FINISH_DONE;
	  }
	
	  if (s.strstart > s.block_start) {
	    /*** FLUSH_BLOCK(s, 0); ***/
	    flush_block_only(s, false);
	    if (s.strm.avail_out === 0) {
	      return BS_NEED_MORE;
	    }
	    /***/
	  }
	
	  return BS_NEED_MORE;
	}
	
	/* ===========================================================================
	 * Compress as much as possible from the input stream, return the current
	 * block state.
	 * This function does not perform lazy evaluation of matches and inserts
	 * new strings in the dictionary only for unmatched strings or for short
	 * matches. It is used only for the fast compression options.
	 */
	function deflate_fast(s, flush) {
	  var hash_head; /* head of the hash chain */
	  var bflush; /* set if current block must be flushed */
	
	  for (;;) {
	    /* Make sure that we always have enough lookahead, except
	     * at the end of the input file. We need MAX_MATCH bytes
	     * for the next match, plus MIN_MATCH bytes to insert the
	     * string following the next match.
	     */
	    if (s.lookahead < MIN_LOOKAHEAD) {
	      fill_window(s);
	      if (s.lookahead < MIN_LOOKAHEAD && flush === Z_NO_FLUSH) {
	        return BS_NEED_MORE;
	      }
	      if (s.lookahead === 0) {
	        break; /* flush the current block */
	      }
	    }
	
	    /* Insert the string window[strstart .. strstart+2] in the
	     * dictionary, and set hash_head to the head of the hash chain:
	     */
	    hash_head = 0 /*NIL*/;
	    if (s.lookahead >= MIN_MATCH) {
	      /*** INSERT_STRING(s, s.strstart, hash_head); ***/
	      s.ins_h = (s.ins_h << s.hash_shift ^ s.window[s.strstart + MIN_MATCH - 1]) & s.hash_mask;
	      hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];
	      s.head[s.ins_h] = s.strstart;
	      /***/
	    }
	
	    /* Find the longest match, discarding those <= prev_length.
	     * At this point we have always match_length < MIN_MATCH
	     */
	    if (hash_head !== 0 /*NIL*/ && s.strstart - hash_head <= s.w_size - MIN_LOOKAHEAD) {
	      /* To simplify the code, we prevent matches with the string
	       * of window index 0 (in particular we have to avoid a match
	       * of the string with itself at the start of the input file).
	       */
	      s.match_length = longest_match(s, hash_head);
	      /* longest_match() sets match_start */
	    }
	    if (s.match_length >= MIN_MATCH) {
	      // check_match(s, s.strstart, s.match_start, s.match_length); // for debug only
	
	      /*** _tr_tally_dist(s, s.strstart - s.match_start,
	                     s.match_length - MIN_MATCH, bflush); ***/
	      bflush = trees._tr_tally(s, s.strstart - s.match_start, s.match_length - MIN_MATCH);
	
	      s.lookahead -= s.match_length;
	
	      /* Insert new strings in the hash table only if the match length
	       * is not too large. This saves time but degrades compression.
	       */
	      if (s.match_length <= s.max_lazy_match /*max_insert_length*/ && s.lookahead >= MIN_MATCH) {
	        s.match_length--; /* string at strstart already in table */
	        do {
	          s.strstart++;
	          /*** INSERT_STRING(s, s.strstart, hash_head); ***/
	          s.ins_h = (s.ins_h << s.hash_shift ^ s.window[s.strstart + MIN_MATCH - 1]) & s.hash_mask;
	          hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];
	          s.head[s.ins_h] = s.strstart;
	          /***/
	          /* strstart never exceeds WSIZE-MAX_MATCH, so there are
	           * always MIN_MATCH bytes ahead.
	           */
	        } while (--s.match_length !== 0);
	        s.strstart++;
	      } else {
	        s.strstart += s.match_length;
	        s.match_length = 0;
	        s.ins_h = s.window[s.strstart];
	        /* UPDATE_HASH(s, s.ins_h, s.window[s.strstart+1]); */
	        s.ins_h = (s.ins_h << s.hash_shift ^ s.window[s.strstart + 1]) & s.hash_mask;
	
	        //#if MIN_MATCH != 3
	        //                Call UPDATE_HASH() MIN_MATCH-3 more times
	        //#endif
	        /* If lookahead < MIN_MATCH, ins_h is garbage, but it does not
	         * matter since it will be recomputed at next deflate call.
	         */
	      }
	    } else {
	      /* No match, output a literal byte */
	      //Tracevv((stderr,"%c", s.window[s.strstart]));
	      /*** _tr_tally_lit(s, s.window[s.strstart], bflush); ***/
	      bflush = trees._tr_tally(s, 0, s.window[s.strstart]);
	
	      s.lookahead--;
	      s.strstart++;
	    }
	    if (bflush) {
	      /*** FLUSH_BLOCK(s, 0); ***/
	      flush_block_only(s, false);
	      if (s.strm.avail_out === 0) {
	        return BS_NEED_MORE;
	      }
	      /***/
	    }
	  }
	  s.insert = s.strstart < MIN_MATCH - 1 ? s.strstart : MIN_MATCH - 1;
	  if (flush === Z_FINISH) {
	    /*** FLUSH_BLOCK(s, 1); ***/
	    flush_block_only(s, true);
	    if (s.strm.avail_out === 0) {
	      return BS_FINISH_STARTED;
	    }
	    /***/
	    return BS_FINISH_DONE;
	  }
	  if (s.last_lit) {
	    /*** FLUSH_BLOCK(s, 0); ***/
	    flush_block_only(s, false);
	    if (s.strm.avail_out === 0) {
	      return BS_NEED_MORE;
	    }
	    /***/
	  }
	  return BS_BLOCK_DONE;
	}
	
	/* ===========================================================================
	 * Same as above, but achieves better compression. We use a lazy
	 * evaluation for matches: a match is finally adopted only if there is
	 * no better match at the next window position.
	 */
	function deflate_slow(s, flush) {
	  var hash_head; /* head of hash chain */
	  var bflush; /* set if current block must be flushed */
	
	  var max_insert;
	
	  /* Process the input block. */
	  for (;;) {
	    /* Make sure that we always have enough lookahead, except
	     * at the end of the input file. We need MAX_MATCH bytes
	     * for the next match, plus MIN_MATCH bytes to insert the
	     * string following the next match.
	     */
	    if (s.lookahead < MIN_LOOKAHEAD) {
	      fill_window(s);
	      if (s.lookahead < MIN_LOOKAHEAD && flush === Z_NO_FLUSH) {
	        return BS_NEED_MORE;
	      }
	      if (s.lookahead === 0) {
	        break;
	      } /* flush the current block */
	    }
	
	    /* Insert the string window[strstart .. strstart+2] in the
	     * dictionary, and set hash_head to the head of the hash chain:
	     */
	    hash_head = 0 /*NIL*/;
	    if (s.lookahead >= MIN_MATCH) {
	      /*** INSERT_STRING(s, s.strstart, hash_head); ***/
	      s.ins_h = (s.ins_h << s.hash_shift ^ s.window[s.strstart + MIN_MATCH - 1]) & s.hash_mask;
	      hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];
	      s.head[s.ins_h] = s.strstart;
	      /***/
	    }
	
	    /* Find the longest match, discarding those <= prev_length.
	     */
	    s.prev_length = s.match_length;
	    s.prev_match = s.match_start;
	    s.match_length = MIN_MATCH - 1;
	
	    if (hash_head !== 0 /*NIL*/ && s.prev_length < s.max_lazy_match && s.strstart - hash_head <= s.w_size - MIN_LOOKAHEAD /*MAX_DIST(s)*/) {
	        /* To simplify the code, we prevent matches with the string
	         * of window index 0 (in particular we have to avoid a match
	         * of the string with itself at the start of the input file).
	         */
	        s.match_length = longest_match(s, hash_head);
	        /* longest_match() sets match_start */
	
	        if (s.match_length <= 5 && (s.strategy === Z_FILTERED || s.match_length === MIN_MATCH && s.strstart - s.match_start > 4096 /*TOO_FAR*/)) {
	
	          /* If prev_match is also MIN_MATCH, match_start is garbage
	           * but we will ignore the current match anyway.
	           */
	          s.match_length = MIN_MATCH - 1;
	        }
	      }
	    /* If there was a match at the previous step and the current
	     * match is not better, output the previous match:
	     */
	    if (s.prev_length >= MIN_MATCH && s.match_length <= s.prev_length) {
	      max_insert = s.strstart + s.lookahead - MIN_MATCH;
	      /* Do not insert strings in hash table beyond this. */
	
	      //check_match(s, s.strstart-1, s.prev_match, s.prev_length);
	
	      /***_tr_tally_dist(s, s.strstart - 1 - s.prev_match,
	                     s.prev_length - MIN_MATCH, bflush);***/
	      bflush = trees._tr_tally(s, s.strstart - 1 - s.prev_match, s.prev_length - MIN_MATCH);
	      /* Insert in hash table all strings up to the end of the match.
	       * strstart-1 and strstart are already inserted. If there is not
	       * enough lookahead, the last two strings are not inserted in
	       * the hash table.
	       */
	      s.lookahead -= s.prev_length - 1;
	      s.prev_length -= 2;
	      do {
	        if (++s.strstart <= max_insert) {
	          /*** INSERT_STRING(s, s.strstart, hash_head); ***/
	          s.ins_h = (s.ins_h << s.hash_shift ^ s.window[s.strstart + MIN_MATCH - 1]) & s.hash_mask;
	          hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];
	          s.head[s.ins_h] = s.strstart;
	          /***/
	        }
	      } while (--s.prev_length !== 0);
	      s.match_available = 0;
	      s.match_length = MIN_MATCH - 1;
	      s.strstart++;
	
	      if (bflush) {
	        /*** FLUSH_BLOCK(s, 0); ***/
	        flush_block_only(s, false);
	        if (s.strm.avail_out === 0) {
	          return BS_NEED_MORE;
	        }
	        /***/
	      }
	    } else if (s.match_available) {
	      /* If there was no match at the previous position, output a
	       * single literal. If there was a match but the current match
	       * is longer, truncate the previous match to a single literal.
	       */
	      //Tracevv((stderr,"%c", s->window[s->strstart-1]));
	      /*** _tr_tally_lit(s, s.window[s.strstart-1], bflush); ***/
	      bflush = trees._tr_tally(s, 0, s.window[s.strstart - 1]);
	
	      if (bflush) {
	        /*** FLUSH_BLOCK_ONLY(s, 0) ***/
	        flush_block_only(s, false);
	        /***/
	      }
	      s.strstart++;
	      s.lookahead--;
	      if (s.strm.avail_out === 0) {
	        return BS_NEED_MORE;
	      }
	    } else {
	      /* There is no previous match to compare with, wait for
	       * the next step to decide.
	       */
	      s.match_available = 1;
	      s.strstart++;
	      s.lookahead--;
	    }
	  }
	  //Assert (flush != Z_NO_FLUSH, "no flush?");
	  if (s.match_available) {
	    //Tracevv((stderr,"%c", s->window[s->strstart-1]));
	    /*** _tr_tally_lit(s, s.window[s.strstart-1], bflush); ***/
	    bflush = trees._tr_tally(s, 0, s.window[s.strstart - 1]);
	
	    s.match_available = 0;
	  }
	  s.insert = s.strstart < MIN_MATCH - 1 ? s.strstart : MIN_MATCH - 1;
	  if (flush === Z_FINISH) {
	    /*** FLUSH_BLOCK(s, 1); ***/
	    flush_block_only(s, true);
	    if (s.strm.avail_out === 0) {
	      return BS_FINISH_STARTED;
	    }
	    /***/
	    return BS_FINISH_DONE;
	  }
	  if (s.last_lit) {
	    /*** FLUSH_BLOCK(s, 0); ***/
	    flush_block_only(s, false);
	    if (s.strm.avail_out === 0) {
	      return BS_NEED_MORE;
	    }
	    /***/
	  }
	
	  return BS_BLOCK_DONE;
	}
	
	/* ===========================================================================
	 * For Z_RLE, simply look for runs of bytes, generate matches only of distance
	 * one.  Do not maintain a hash table.  (It will be regenerated if this run of
	 * deflate switches away from Z_RLE.)
	 */
	function deflate_rle(s, flush) {
	  var bflush; /* set if current block must be flushed */
	  var prev; /* byte at distance one to match */
	  var scan, strend; /* scan goes up to strend for length of run */
	
	  var _win = s.window;
	
	  for (;;) {
	    /* Make sure that we always have enough lookahead, except
	     * at the end of the input file. We need MAX_MATCH bytes
	     * for the longest run, plus one for the unrolled loop.
	     */
	    if (s.lookahead <= MAX_MATCH) {
	      fill_window(s);
	      if (s.lookahead <= MAX_MATCH && flush === Z_NO_FLUSH) {
	        return BS_NEED_MORE;
	      }
	      if (s.lookahead === 0) {
	        break;
	      } /* flush the current block */
	    }
	
	    /* See how many times the previous byte repeats */
	    s.match_length = 0;
	    if (s.lookahead >= MIN_MATCH && s.strstart > 0) {
	      scan = s.strstart - 1;
	      prev = _win[scan];
	      if (prev === _win[++scan] && prev === _win[++scan] && prev === _win[++scan]) {
	        strend = s.strstart + MAX_MATCH;
	        do {
	          /*jshint noempty:false*/
	        } while (prev === _win[++scan] && prev === _win[++scan] && prev === _win[++scan] && prev === _win[++scan] && prev === _win[++scan] && prev === _win[++scan] && prev === _win[++scan] && prev === _win[++scan] && scan < strend);
	        s.match_length = MAX_MATCH - (strend - scan);
	        if (s.match_length > s.lookahead) {
	          s.match_length = s.lookahead;
	        }
	      }
	      //Assert(scan <= s->window+(uInt)(s->window_size-1), "wild scan");
	    }
	
	    /* Emit match if have run of MIN_MATCH or longer, else emit literal */
	    if (s.match_length >= MIN_MATCH) {
	      //check_match(s, s.strstart, s.strstart - 1, s.match_length);
	
	      /*** _tr_tally_dist(s, 1, s.match_length - MIN_MATCH, bflush); ***/
	      bflush = trees._tr_tally(s, 1, s.match_length - MIN_MATCH);
	
	      s.lookahead -= s.match_length;
	      s.strstart += s.match_length;
	      s.match_length = 0;
	    } else {
	      /* No match, output a literal byte */
	      //Tracevv((stderr,"%c", s->window[s->strstart]));
	      /*** _tr_tally_lit(s, s.window[s.strstart], bflush); ***/
	      bflush = trees._tr_tally(s, 0, s.window[s.strstart]);
	
	      s.lookahead--;
	      s.strstart++;
	    }
	    if (bflush) {
	      /*** FLUSH_BLOCK(s, 0); ***/
	      flush_block_only(s, false);
	      if (s.strm.avail_out === 0) {
	        return BS_NEED_MORE;
	      }
	      /***/
	    }
	  }
	  s.insert = 0;
	  if (flush === Z_FINISH) {
	    /*** FLUSH_BLOCK(s, 1); ***/
	    flush_block_only(s, true);
	    if (s.strm.avail_out === 0) {
	      return BS_FINISH_STARTED;
	    }
	    /***/
	    return BS_FINISH_DONE;
	  }
	  if (s.last_lit) {
	    /*** FLUSH_BLOCK(s, 0); ***/
	    flush_block_only(s, false);
	    if (s.strm.avail_out === 0) {
	      return BS_NEED_MORE;
	    }
	    /***/
	  }
	  return BS_BLOCK_DONE;
	}
	
	/* ===========================================================================
	 * For Z_HUFFMAN_ONLY, do not look for matches.  Do not maintain a hash table.
	 * (It will be regenerated if this run of deflate switches away from Huffman.)
	 */
	function deflate_huff(s, flush) {
	  var bflush; /* set if current block must be flushed */
	
	  for (;;) {
	    /* Make sure that we have a literal to write. */
	    if (s.lookahead === 0) {
	      fill_window(s);
	      if (s.lookahead === 0) {
	        if (flush === Z_NO_FLUSH) {
	          return BS_NEED_MORE;
	        }
	        break; /* flush the current block */
	      }
	    }
	
	    /* Output a literal byte */
	    s.match_length = 0;
	    //Tracevv((stderr,"%c", s->window[s->strstart]));
	    /*** _tr_tally_lit(s, s.window[s.strstart], bflush); ***/
	    bflush = trees._tr_tally(s, 0, s.window[s.strstart]);
	    s.lookahead--;
	    s.strstart++;
	    if (bflush) {
	      /*** FLUSH_BLOCK(s, 0); ***/
	      flush_block_only(s, false);
	      if (s.strm.avail_out === 0) {
	        return BS_NEED_MORE;
	      }
	      /***/
	    }
	  }
	  s.insert = 0;
	  if (flush === Z_FINISH) {
	    /*** FLUSH_BLOCK(s, 1); ***/
	    flush_block_only(s, true);
	    if (s.strm.avail_out === 0) {
	      return BS_FINISH_STARTED;
	    }
	    /***/
	    return BS_FINISH_DONE;
	  }
	  if (s.last_lit) {
	    /*** FLUSH_BLOCK(s, 0); ***/
	    flush_block_only(s, false);
	    if (s.strm.avail_out === 0) {
	      return BS_NEED_MORE;
	    }
	    /***/
	  }
	  return BS_BLOCK_DONE;
	}
	
	/* Values for max_lazy_match, good_match and max_chain_length, depending on
	 * the desired pack level (0..9). The values given below have been tuned to
	 * exclude worst case performance for pathological files. Better values may be
	 * found for specific files.
	 */
	function Config(good_length, max_lazy, nice_length, max_chain, func) {
	  this.good_length = good_length;
	  this.max_lazy = max_lazy;
	  this.nice_length = nice_length;
	  this.max_chain = max_chain;
	  this.func = func;
	}
	
	var configuration_table;
	
	configuration_table = [
	/*      good lazy nice chain */
	new Config(0, 0, 0, 0, deflate_stored), /* 0 store only */
	new Config(4, 4, 8, 4, deflate_fast), /* 1 max speed, no lazy matches */
	new Config(4, 5, 16, 8, deflate_fast), /* 2 */
	new Config(4, 6, 32, 32, deflate_fast), /* 3 */
	
	new Config(4, 4, 16, 16, deflate_slow), /* 4 lazy matches */
	new Config(8, 16, 32, 32, deflate_slow), /* 5 */
	new Config(8, 16, 128, 128, deflate_slow), /* 6 */
	new Config(8, 32, 128, 256, deflate_slow), /* 7 */
	new Config(32, 128, 258, 1024, deflate_slow), /* 8 */
	new Config(32, 258, 258, 4096, deflate_slow) /* 9 max compression */
	];
	
	/* ===========================================================================
	 * Initialize the "longest match" routines for a new zlib stream
	 */
	function lm_init(s) {
	  s.window_size = 2 * s.w_size;
	
	  /*** CLEAR_HASH(s); ***/
	  zero(s.head); // Fill with NIL (= 0);
	
	  /* Set the default configuration parameters:
	   */
	  s.max_lazy_match = configuration_table[s.level].max_lazy;
	  s.good_match = configuration_table[s.level].good_length;
	  s.nice_match = configuration_table[s.level].nice_length;
	  s.max_chain_length = configuration_table[s.level].max_chain;
	
	  s.strstart = 0;
	  s.block_start = 0;
	  s.lookahead = 0;
	  s.insert = 0;
	  s.match_length = s.prev_length = MIN_MATCH - 1;
	  s.match_available = 0;
	  s.ins_h = 0;
	}
	
	function DeflateState() {
	  this.strm = null; /* pointer back to this zlib stream */
	  this.status = 0; /* as the name implies */
	  this.pending_buf = null; /* output still pending */
	  this.pending_buf_size = 0; /* size of pending_buf */
	  this.pending_out = 0; /* next pending byte to output to the stream */
	  this.pending = 0; /* nb of bytes in the pending buffer */
	  this.wrap = 0; /* bit 0 true for zlib, bit 1 true for gzip */
	  this.gzhead = null; /* gzip header information to write */
	  this.gzindex = 0; /* where in extra, name, or comment */
	  this.method = Z_DEFLATED; /* can only be DEFLATED */
	  this.last_flush = -1; /* value of flush param for previous deflate call */
	
	  this.w_size = 0; /* LZ77 window size (32K by default) */
	  this.w_bits = 0; /* log2(w_size)  (8..16) */
	  this.w_mask = 0; /* w_size - 1 */
	
	  this.window = null;
	  /* Sliding window. Input bytes are read into the second half of the window,
	   * and move to the first half later to keep a dictionary of at least wSize
	   * bytes. With this organization, matches are limited to a distance of
	   * wSize-MAX_MATCH bytes, but this ensures that IO is always
	   * performed with a length multiple of the block size.
	   */
	
	  this.window_size = 0;
	  /* Actual size of window: 2*wSize, except when the user input buffer
	   * is directly used as sliding window.
	   */
	
	  this.prev = null;
	  /* Link to older string with same hash index. To limit the size of this
	   * array to 64K, this link is maintained only for the last 32K strings.
	   * An index in this array is thus a window index modulo 32K.
	   */
	
	  this.head = null; /* Heads of the hash chains or NIL. */
	
	  this.ins_h = 0; /* hash index of string to be inserted */
	  this.hash_size = 0; /* number of elements in hash table */
	  this.hash_bits = 0; /* log2(hash_size) */
	  this.hash_mask = 0; /* hash_size-1 */
	
	  this.hash_shift = 0;
	  /* Number of bits by which ins_h must be shifted at each input
	   * step. It must be such that after MIN_MATCH steps, the oldest
	   * byte no longer takes part in the hash key, that is:
	   *   hash_shift * MIN_MATCH >= hash_bits
	   */
	
	  this.block_start = 0;
	  /* Window position at the beginning of the current output block. Gets
	   * negative when the window is moved backwards.
	   */
	
	  this.match_length = 0; /* length of best match */
	  this.prev_match = 0; /* previous match */
	  this.match_available = 0; /* set if previous match exists */
	  this.strstart = 0; /* start of string to insert */
	  this.match_start = 0; /* start of matching string */
	  this.lookahead = 0; /* number of valid bytes ahead in window */
	
	  this.prev_length = 0;
	  /* Length of the best match at previous step. Matches not greater than this
	   * are discarded. This is used in the lazy match evaluation.
	   */
	
	  this.max_chain_length = 0;
	  /* To speed up deflation, hash chains are never searched beyond this
	   * length.  A higher limit improves compression ratio but degrades the
	   * speed.
	   */
	
	  this.max_lazy_match = 0;
	  /* Attempt to find a better match only when the current match is strictly
	   * smaller than this value. This mechanism is used only for compression
	   * levels >= 4.
	   */
	  // That's alias to max_lazy_match, don't use directly
	  //this.max_insert_length = 0;
	  /* Insert new strings in the hash table only if the match length is not
	   * greater than this length. This saves time but degrades compression.
	   * max_insert_length is used only for compression levels <= 3.
	   */
	
	  this.level = 0; /* compression level (1..9) */
	  this.strategy = 0; /* favor or force Huffman coding*/
	
	  this.good_match = 0;
	  /* Use a faster search when the previous match is longer than this */
	
	  this.nice_match = 0; /* Stop searching when current match exceeds this */
	
	  /* used by trees.c: */
	
	  /* Didn't use ct_data typedef below to suppress compiler warning */
	
	  // struct ct_data_s dyn_ltree[HEAP_SIZE];   /* literal and length tree */
	  // struct ct_data_s dyn_dtree[2*D_CODES+1]; /* distance tree */
	  // struct ct_data_s bl_tree[2*BL_CODES+1];  /* Huffman tree for bit lengths */
	
	  // Use flat array of DOUBLE size, with interleaved fata,
	  // because JS does not support effective
	  this.dyn_ltree = new utils.Buf16(HEAP_SIZE * 2);
	  this.dyn_dtree = new utils.Buf16((2 * D_CODES + 1) * 2);
	  this.bl_tree = new utils.Buf16((2 * BL_CODES + 1) * 2);
	  zero(this.dyn_ltree);
	  zero(this.dyn_dtree);
	  zero(this.bl_tree);
	
	  this.l_desc = null; /* desc. for literal tree */
	  this.d_desc = null; /* desc. for distance tree */
	  this.bl_desc = null; /* desc. for bit length tree */
	
	  //ush bl_count[MAX_BITS+1];
	  this.bl_count = new utils.Buf16(MAX_BITS + 1);
	  /* number of codes at each bit length for an optimal tree */
	
	  //int heap[2*L_CODES+1];      /* heap used to build the Huffman trees */
	  this.heap = new utils.Buf16(2 * L_CODES + 1); /* heap used to build the Huffman trees */
	  zero(this.heap);
	
	  this.heap_len = 0; /* number of elements in the heap */
	  this.heap_max = 0; /* element of largest frequency */
	  /* The sons of heap[n] are heap[2*n] and heap[2*n+1]. heap[0] is not used.
	   * The same heap array is used to build all trees.
	   */
	
	  this.depth = new utils.Buf16(2 * L_CODES + 1); //uch depth[2*L_CODES+1];
	  zero(this.depth);
	  /* Depth of each subtree used as tie breaker for trees of equal frequency
	   */
	
	  this.l_buf = 0; /* buffer index for literals or lengths */
	
	  this.lit_bufsize = 0;
	  /* Size of match buffer for literals/lengths.  There are 4 reasons for
	   * limiting lit_bufsize to 64K:
	   *   - frequencies can be kept in 16 bit counters
	   *   - if compression is not successful for the first block, all input
	   *     data is still in the window so we can still emit a stored block even
	   *     when input comes from standard input.  (This can also be done for
	   *     all blocks if lit_bufsize is not greater than 32K.)
	   *   - if compression is not successful for a file smaller than 64K, we can
	   *     even emit a stored file instead of a stored block (saving 5 bytes).
	   *     This is applicable only for zip (not gzip or zlib).
	   *   - creating new Huffman trees less frequently may not provide fast
	   *     adaptation to changes in the input data statistics. (Take for
	   *     example a binary file with poorly compressible code followed by
	   *     a highly compressible string table.) Smaller buffer sizes give
	   *     fast adaptation but have of course the overhead of transmitting
	   *     trees more frequently.
	   *   - I can't count above 4
	   */
	
	  this.last_lit = 0; /* running index in l_buf */
	
	  this.d_buf = 0;
	  /* Buffer index for distances. To simplify the code, d_buf and l_buf have
	   * the same number of elements. To use different lengths, an extra flag
	   * array would be necessary.
	   */
	
	  this.opt_len = 0; /* bit length of current block with optimal trees */
	  this.static_len = 0; /* bit length of current block with static trees */
	  this.matches = 0; /* number of string matches in current block */
	  this.insert = 0; /* bytes at end of window left to insert */
	
	  this.bi_buf = 0;
	  /* Output buffer. bits are inserted starting at the bottom (least
	   * significant bits).
	   */
	  this.bi_valid = 0;
	  /* Number of valid bits in bi_buf.  All bits above the last valid bit
	   * are always zero.
	   */
	
	  // Used for window memory init. We safely ignore it for JS. That makes
	  // sense only for pointers and memory check tools.
	  //this.high_water = 0;
	  /* High water mark offset in window for initialized bytes -- bytes above
	   * this are set to zero in order to avoid memory check warnings when
	   * longest match routines access bytes past the input.  This is then
	   * updated to the new high water mark.
	   */
	}
	
	function deflateResetKeep(strm) {
	  var s;
	
	  if (!strm || !strm.state) {
	    return err(strm, Z_STREAM_ERROR);
	  }
	
	  strm.total_in = strm.total_out = 0;
	  strm.data_type = Z_UNKNOWN;
	
	  s = strm.state;
	  s.pending = 0;
	  s.pending_out = 0;
	
	  if (s.wrap < 0) {
	    s.wrap = -s.wrap;
	    /* was made negative by deflate(..., Z_FINISH); */
	  }
	  s.status = s.wrap ? INIT_STATE : BUSY_STATE;
	  strm.adler = s.wrap === 2 ? 0 // crc32(0, Z_NULL, 0)
	  : 1; // adler32(0, Z_NULL, 0)
	  s.last_flush = Z_NO_FLUSH;
	  trees._tr_init(s);
	  return Z_OK;
	}
	
	function deflateReset(strm) {
	  var ret = deflateResetKeep(strm);
	  if (ret === Z_OK) {
	    lm_init(strm.state);
	  }
	  return ret;
	}
	
	function deflateSetHeader(strm, head) {
	  if (!strm || !strm.state) {
	    return Z_STREAM_ERROR;
	  }
	  if (strm.state.wrap !== 2) {
	    return Z_STREAM_ERROR;
	  }
	  strm.state.gzhead = head;
	  return Z_OK;
	}
	
	function deflateInit2(strm, level, method, windowBits, memLevel, strategy) {
	  if (!strm) {
	    // === Z_NULL
	    return Z_STREAM_ERROR;
	  }
	  var wrap = 1;
	
	  if (level === Z_DEFAULT_COMPRESSION) {
	    level = 6;
	  }
	
	  if (windowBits < 0) {
	    /* suppress zlib wrapper */
	    wrap = 0;
	    windowBits = -windowBits;
	  } else if (windowBits > 15) {
	    wrap = 2; /* write gzip wrapper instead */
	    windowBits -= 16;
	  }
	
	  if (memLevel < 1 || memLevel > MAX_MEM_LEVEL || method !== Z_DEFLATED || windowBits < 8 || windowBits > 15 || level < 0 || level > 9 || strategy < 0 || strategy > Z_FIXED) {
	    return err(strm, Z_STREAM_ERROR);
	  }
	
	  if (windowBits === 8) {
	    windowBits = 9;
	  }
	  /* until 256-byte window bug fixed */
	
	  var s = new DeflateState();
	
	  strm.state = s;
	  s.strm = strm;
	
	  s.wrap = wrap;
	  s.gzhead = null;
	  s.w_bits = windowBits;
	  s.w_size = 1 << s.w_bits;
	  s.w_mask = s.w_size - 1;
	
	  s.hash_bits = memLevel + 7;
	  s.hash_size = 1 << s.hash_bits;
	  s.hash_mask = s.hash_size - 1;
	  s.hash_shift = ~~((s.hash_bits + MIN_MATCH - 1) / MIN_MATCH);
	
	  s.window = new utils.Buf8(s.w_size * 2);
	  s.head = new utils.Buf16(s.hash_size);
	  s.prev = new utils.Buf16(s.w_size);
	
	  // Don't need mem init magic for JS.
	  //s.high_water = 0;  /* nothing written to s->window yet */
	
	  s.lit_bufsize = 1 << memLevel + 6; /* 16K elements by default */
	
	  s.pending_buf_size = s.lit_bufsize * 4;
	
	  //overlay = (ushf *) ZALLOC(strm, s->lit_bufsize, sizeof(ush)+2);
	  //s->pending_buf = (uchf *) overlay;
	  s.pending_buf = new utils.Buf8(s.pending_buf_size);
	
	  // It is offset from `s.pending_buf` (size is `s.lit_bufsize * 2`)
	  //s->d_buf = overlay + s->lit_bufsize/sizeof(ush);
	  s.d_buf = 1 * s.lit_bufsize;
	
	  //s->l_buf = s->pending_buf + (1+sizeof(ush))*s->lit_bufsize;
	  s.l_buf = (1 + 2) * s.lit_bufsize;
	
	  s.level = level;
	  s.strategy = strategy;
	  s.method = method;
	
	  return deflateReset(strm);
	}
	
	function deflateInit(strm, level) {
	  return deflateInit2(strm, level, Z_DEFLATED, MAX_WBITS, DEF_MEM_LEVEL, Z_DEFAULT_STRATEGY);
	}
	
	function deflate(strm, flush) {
	  var old_flush, s;
	  var beg, val; // for gzip header write only
	
	  if (!strm || !strm.state || flush > Z_BLOCK || flush < 0) {
	    return strm ? err(strm, Z_STREAM_ERROR) : Z_STREAM_ERROR;
	  }
	
	  s = strm.state;
	
	  if (!strm.output || !strm.input && strm.avail_in !== 0 || s.status === FINISH_STATE && flush !== Z_FINISH) {
	    return err(strm, strm.avail_out === 0 ? Z_BUF_ERROR : Z_STREAM_ERROR);
	  }
	
	  s.strm = strm; /* just in case */
	  old_flush = s.last_flush;
	  s.last_flush = flush;
	
	  /* Write the header */
	  if (s.status === INIT_STATE) {
	
	    if (s.wrap === 2) {
	      // GZIP header
	      strm.adler = 0; //crc32(0L, Z_NULL, 0);
	      put_byte(s, 31);
	      put_byte(s, 139);
	      put_byte(s, 8);
	      if (!s.gzhead) {
	        // s->gzhead == Z_NULL
	        put_byte(s, 0);
	        put_byte(s, 0);
	        put_byte(s, 0);
	        put_byte(s, 0);
	        put_byte(s, 0);
	        put_byte(s, s.level === 9 ? 2 : s.strategy >= Z_HUFFMAN_ONLY || s.level < 2 ? 4 : 0);
	        put_byte(s, OS_CODE);
	        s.status = BUSY_STATE;
	      } else {
	        put_byte(s, (s.gzhead.text ? 1 : 0) + (s.gzhead.hcrc ? 2 : 0) + (!s.gzhead.extra ? 0 : 4) + (!s.gzhead.name ? 0 : 8) + (!s.gzhead.comment ? 0 : 16));
	        put_byte(s, s.gzhead.time & 0xff);
	        put_byte(s, s.gzhead.time >> 8 & 0xff);
	        put_byte(s, s.gzhead.time >> 16 & 0xff);
	        put_byte(s, s.gzhead.time >> 24 & 0xff);
	        put_byte(s, s.level === 9 ? 2 : s.strategy >= Z_HUFFMAN_ONLY || s.level < 2 ? 4 : 0);
	        put_byte(s, s.gzhead.os & 0xff);
	        if (s.gzhead.extra && s.gzhead.extra.length) {
	          put_byte(s, s.gzhead.extra.length & 0xff);
	          put_byte(s, s.gzhead.extra.length >> 8 & 0xff);
	        }
	        if (s.gzhead.hcrc) {
	          strm.adler = crc32(strm.adler, s.pending_buf, s.pending, 0);
	        }
	        s.gzindex = 0;
	        s.status = EXTRA_STATE;
	      }
	    } else // DEFLATE header
	      {
	        var header = Z_DEFLATED + (s.w_bits - 8 << 4) << 8;
	        var level_flags = -1;
	
	        if (s.strategy >= Z_HUFFMAN_ONLY || s.level < 2) {
	          level_flags = 0;
	        } else if (s.level < 6) {
	          level_flags = 1;
	        } else if (s.level === 6) {
	          level_flags = 2;
	        } else {
	          level_flags = 3;
	        }
	        header |= level_flags << 6;
	        if (s.strstart !== 0) {
	          header |= PRESET_DICT;
	        }
	        header += 31 - header % 31;
	
	        s.status = BUSY_STATE;
	        putShortMSB(s, header);
	
	        /* Save the adler32 of the preset dictionary: */
	        if (s.strstart !== 0) {
	          putShortMSB(s, strm.adler >>> 16);
	          putShortMSB(s, strm.adler & 0xffff);
	        }
	        strm.adler = 1; // adler32(0L, Z_NULL, 0);
	      }
	  }
	
	  //#ifdef GZIP
	  if (s.status === EXTRA_STATE) {
	    if (s.gzhead.extra /* != Z_NULL*/) {
	        beg = s.pending; /* start of bytes to update crc */
	
	        while (s.gzindex < (s.gzhead.extra.length & 0xffff)) {
	          if (s.pending === s.pending_buf_size) {
	            if (s.gzhead.hcrc && s.pending > beg) {
	              strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);
	            }
	            flush_pending(strm);
	            beg = s.pending;
	            if (s.pending === s.pending_buf_size) {
	              break;
	            }
	          }
	          put_byte(s, s.gzhead.extra[s.gzindex] & 0xff);
	          s.gzindex++;
	        }
	        if (s.gzhead.hcrc && s.pending > beg) {
	          strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);
	        }
	        if (s.gzindex === s.gzhead.extra.length) {
	          s.gzindex = 0;
	          s.status = NAME_STATE;
	        }
	      } else {
	      s.status = NAME_STATE;
	    }
	  }
	  if (s.status === NAME_STATE) {
	    if (s.gzhead.name /* != Z_NULL*/) {
	        beg = s.pending; /* start of bytes to update crc */
	        //int val;
	
	        do {
	          if (s.pending === s.pending_buf_size) {
	            if (s.gzhead.hcrc && s.pending > beg) {
	              strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);
	            }
	            flush_pending(strm);
	            beg = s.pending;
	            if (s.pending === s.pending_buf_size) {
	              val = 1;
	              break;
	            }
	          }
	          // JS specific: little magic to add zero terminator to end of string
	          if (s.gzindex < s.gzhead.name.length) {
	            val = s.gzhead.name.charCodeAt(s.gzindex++) & 0xff;
	          } else {
	            val = 0;
	          }
	          put_byte(s, val);
	        } while (val !== 0);
	
	        if (s.gzhead.hcrc && s.pending > beg) {
	          strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);
	        }
	        if (val === 0) {
	          s.gzindex = 0;
	          s.status = COMMENT_STATE;
	        }
	      } else {
	      s.status = COMMENT_STATE;
	    }
	  }
	  if (s.status === COMMENT_STATE) {
	    if (s.gzhead.comment /* != Z_NULL*/) {
	        beg = s.pending; /* start of bytes to update crc */
	        //int val;
	
	        do {
	          if (s.pending === s.pending_buf_size) {
	            if (s.gzhead.hcrc && s.pending > beg) {
	              strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);
	            }
	            flush_pending(strm);
	            beg = s.pending;
	            if (s.pending === s.pending_buf_size) {
	              val = 1;
	              break;
	            }
	          }
	          // JS specific: little magic to add zero terminator to end of string
	          if (s.gzindex < s.gzhead.comment.length) {
	            val = s.gzhead.comment.charCodeAt(s.gzindex++) & 0xff;
	          } else {
	            val = 0;
	          }
	          put_byte(s, val);
	        } while (val !== 0);
	
	        if (s.gzhead.hcrc && s.pending > beg) {
	          strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);
	        }
	        if (val === 0) {
	          s.status = HCRC_STATE;
	        }
	      } else {
	      s.status = HCRC_STATE;
	    }
	  }
	  if (s.status === HCRC_STATE) {
	    if (s.gzhead.hcrc) {
	      if (s.pending + 2 > s.pending_buf_size) {
	        flush_pending(strm);
	      }
	      if (s.pending + 2 <= s.pending_buf_size) {
	        put_byte(s, strm.adler & 0xff);
	        put_byte(s, strm.adler >> 8 & 0xff);
	        strm.adler = 0; //crc32(0L, Z_NULL, 0);
	        s.status = BUSY_STATE;
	      }
	    } else {
	      s.status = BUSY_STATE;
	    }
	  }
	  //#endif
	
	  /* Flush as much pending output as possible */
	  if (s.pending !== 0) {
	    flush_pending(strm);
	    if (strm.avail_out === 0) {
	      /* Since avail_out is 0, deflate will be called again with
	       * more output space, but possibly with both pending and
	       * avail_in equal to zero. There won't be anything to do,
	       * but this is not an error situation so make sure we
	       * return OK instead of BUF_ERROR at next call of deflate:
	       */
	      s.last_flush = -1;
	      return Z_OK;
	    }
	
	    /* Make sure there is something to do and avoid duplicate consecutive
	     * flushes. For repeated and useless calls with Z_FINISH, we keep
	     * returning Z_STREAM_END instead of Z_BUF_ERROR.
	     */
	  } else if (strm.avail_in === 0 && rank(flush) <= rank(old_flush) && flush !== Z_FINISH) {
	    return err(strm, Z_BUF_ERROR);
	  }
	
	  /* User must not provide more input after the first FINISH: */
	  if (s.status === FINISH_STATE && strm.avail_in !== 0) {
	    return err(strm, Z_BUF_ERROR);
	  }
	
	  /* Start a new block or continue the current one.
	   */
	  if (strm.avail_in !== 0 || s.lookahead !== 0 || flush !== Z_NO_FLUSH && s.status !== FINISH_STATE) {
	    var bstate = s.strategy === Z_HUFFMAN_ONLY ? deflate_huff(s, flush) : s.strategy === Z_RLE ? deflate_rle(s, flush) : configuration_table[s.level].func(s, flush);
	
	    if (bstate === BS_FINISH_STARTED || bstate === BS_FINISH_DONE) {
	      s.status = FINISH_STATE;
	    }
	    if (bstate === BS_NEED_MORE || bstate === BS_FINISH_STARTED) {
	      if (strm.avail_out === 0) {
	        s.last_flush = -1;
	        /* avoid BUF_ERROR next call, see above */
	      }
	      return Z_OK;
	      /* If flush != Z_NO_FLUSH && avail_out == 0, the next call
	       * of deflate should use the same flush parameter to make sure
	       * that the flush is complete. So we don't have to output an
	       * empty block here, this will be done at next call. This also
	       * ensures that for a very small output buffer, we emit at most
	       * one empty block.
	       */
	    }
	    if (bstate === BS_BLOCK_DONE) {
	      if (flush === Z_PARTIAL_FLUSH) {
	        trees._tr_align(s);
	      } else if (flush !== Z_BLOCK) {
	        /* FULL_FLUSH or SYNC_FLUSH */
	
	        trees._tr_stored_block(s, 0, 0, false);
	        /* For a full flush, this empty block will be recognized
	         * as a special marker by inflate_sync().
	         */
	        if (flush === Z_FULL_FLUSH) {
	          /*** CLEAR_HASH(s); ***/ /* forget history */
	          zero(s.head); // Fill with NIL (= 0);
	
	          if (s.lookahead === 0) {
	            s.strstart = 0;
	            s.block_start = 0;
	            s.insert = 0;
	          }
	        }
	      }
	      flush_pending(strm);
	      if (strm.avail_out === 0) {
	        s.last_flush = -1; /* avoid BUF_ERROR at next call, see above */
	        return Z_OK;
	      }
	    }
	  }
	  //Assert(strm->avail_out > 0, "bug2");
	  //if (strm.avail_out <= 0) { throw new Error("bug2");}
	
	  if (flush !== Z_FINISH) {
	    return Z_OK;
	  }
	  if (s.wrap <= 0) {
	    return Z_STREAM_END;
	  }
	
	  /* Write the trailer */
	  if (s.wrap === 2) {
	    put_byte(s, strm.adler & 0xff);
	    put_byte(s, strm.adler >> 8 & 0xff);
	    put_byte(s, strm.adler >> 16 & 0xff);
	    put_byte(s, strm.adler >> 24 & 0xff);
	    put_byte(s, strm.total_in & 0xff);
	    put_byte(s, strm.total_in >> 8 & 0xff);
	    put_byte(s, strm.total_in >> 16 & 0xff);
	    put_byte(s, strm.total_in >> 24 & 0xff);
	  } else {
	    putShortMSB(s, strm.adler >>> 16);
	    putShortMSB(s, strm.adler & 0xffff);
	  }
	
	  flush_pending(strm);
	  /* If avail_out is zero, the application will call deflate again
	   * to flush the rest.
	   */
	  if (s.wrap > 0) {
	    s.wrap = -s.wrap;
	  }
	  /* write the trailer only once! */
	  return s.pending !== 0 ? Z_OK : Z_STREAM_END;
	}
	
	function deflateEnd(strm) {
	  var status;
	
	  if (!strm /*== Z_NULL*/ || !strm.state /*== Z_NULL*/) {
	      return Z_STREAM_ERROR;
	    }
	
	  status = strm.state.status;
	  if (status !== INIT_STATE && status !== EXTRA_STATE && status !== NAME_STATE && status !== COMMENT_STATE && status !== HCRC_STATE && status !== BUSY_STATE && status !== FINISH_STATE) {
	    return err(strm, Z_STREAM_ERROR);
	  }
	
	  strm.state = null;
	
	  return status === BUSY_STATE ? err(strm, Z_DATA_ERROR) : Z_OK;
	}
	
	/* =========================================================================
	 * Initializes the compression dictionary from the given byte
	 * sequence without producing any compressed output.
	 */
	function deflateSetDictionary(strm, dictionary) {
	  var dictLength = dictionary.length;
	
	  var s;
	  var str, n;
	  var wrap;
	  var avail;
	  var next;
	  var input;
	  var tmpDict;
	
	  if (!strm /*== Z_NULL*/ || !strm.state /*== Z_NULL*/) {
	      return Z_STREAM_ERROR;
	    }
	
	  s = strm.state;
	  wrap = s.wrap;
	
	  if (wrap === 2 || wrap === 1 && s.status !== INIT_STATE || s.lookahead) {
	    return Z_STREAM_ERROR;
	  }
	
	  /* when using zlib wrappers, compute Adler-32 for provided dictionary */
	  if (wrap === 1) {
	    /* adler32(strm->adler, dictionary, dictLength); */
	    strm.adler = adler32(strm.adler, dictionary, dictLength, 0);
	  }
	
	  s.wrap = 0; /* avoid computing Adler-32 in read_buf */
	
	  /* if dictionary would fill window, just replace the history */
	  if (dictLength >= s.w_size) {
	    if (wrap === 0) {
	      /* already empty otherwise */
	      /*** CLEAR_HASH(s); ***/
	      zero(s.head); // Fill with NIL (= 0);
	      s.strstart = 0;
	      s.block_start = 0;
	      s.insert = 0;
	    }
	    /* use the tail */
	    // dictionary = dictionary.slice(dictLength - s.w_size);
	    tmpDict = new utils.Buf8(s.w_size);
	    utils.arraySet(tmpDict, dictionary, dictLength - s.w_size, s.w_size, 0);
	    dictionary = tmpDict;
	    dictLength = s.w_size;
	  }
	  /* insert dictionary into window and hash */
	  avail = strm.avail_in;
	  next = strm.next_in;
	  input = strm.input;
	  strm.avail_in = dictLength;
	  strm.next_in = 0;
	  strm.input = dictionary;
	  fill_window(s);
	  while (s.lookahead >= MIN_MATCH) {
	    str = s.strstart;
	    n = s.lookahead - (MIN_MATCH - 1);
	    do {
	      /* UPDATE_HASH(s, s->ins_h, s->window[str + MIN_MATCH-1]); */
	      s.ins_h = (s.ins_h << s.hash_shift ^ s.window[str + MIN_MATCH - 1]) & s.hash_mask;
	
	      s.prev[str & s.w_mask] = s.head[s.ins_h];
	
	      s.head[s.ins_h] = str;
	      str++;
	    } while (--n);
	    s.strstart = str;
	    s.lookahead = MIN_MATCH - 1;
	    fill_window(s);
	  }
	  s.strstart += s.lookahead;
	  s.block_start = s.strstart;
	  s.insert = s.lookahead;
	  s.lookahead = 0;
	  s.match_length = s.prev_length = MIN_MATCH - 1;
	  s.match_available = 0;
	  strm.next_in = next;
	  strm.input = input;
	  strm.avail_in = avail;
	  s.wrap = wrap;
	  return Z_OK;
	}
	
	exports.deflateInit = deflateInit;
	exports.deflateInit2 = deflateInit2;
	exports.deflateReset = deflateReset;
	exports.deflateResetKeep = deflateResetKeep;
	exports.deflateSetHeader = deflateSetHeader;
	exports.deflate = deflate;
	exports.deflateEnd = deflateEnd;
	exports.deflateSetDictionary = deflateSetDictionary;
	exports.deflateInfo = 'pako deflate (from Nodeca project)';
	
	/* Not implemented
	exports.deflateBound = deflateBound;
	exports.deflateCopy = deflateCopy;
	exports.deflateParams = deflateParams;
	exports.deflatePending = deflatePending;
	exports.deflatePrime = deflatePrime;
	exports.deflateTune = deflateTune;
	*/

/***/ }),
/* 426 */
/***/ (function(module, exports) {

	'use strict';
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
	
	var TYPED_OK = typeof Uint8Array !== 'undefined' && typeof Uint16Array !== 'undefined' && typeof Int32Array !== 'undefined';
	
	exports.assign = function (obj /*from1, from2, from3, ...*/) {
	  var sources = Array.prototype.slice.call(arguments, 1);
	  while (sources.length) {
	    var source = sources.shift();
	    if (!source) {
	      continue;
	    }
	
	    if ((typeof source === 'undefined' ? 'undefined' : _typeof(source)) !== 'object') {
	      throw new TypeError(source + 'must be non-object');
	    }
	
	    for (var p in source) {
	      if (source.hasOwnProperty(p)) {
	        obj[p] = source[p];
	      }
	    }
	  }
	
	  return obj;
	};
	
	// reduce buffer size, avoiding mem copy
	exports.shrinkBuf = function (buf, size) {
	  if (buf.length === size) {
	    return buf;
	  }
	  if (buf.subarray) {
	    return buf.subarray(0, size);
	  }
	  buf.length = size;
	  return buf;
	};
	
	var fnTyped = {
	  arraySet: function arraySet(dest, src, src_offs, len, dest_offs) {
	    if (src.subarray && dest.subarray) {
	      dest.set(src.subarray(src_offs, src_offs + len), dest_offs);
	      return;
	    }
	    // Fallback to ordinary array
	    for (var i = 0; i < len; i++) {
	      dest[dest_offs + i] = src[src_offs + i];
	    }
	  },
	  // Join array of chunks to single array.
	  flattenChunks: function flattenChunks(chunks) {
	    var i, l, len, pos, chunk, result;
	
	    // calculate data length
	    len = 0;
	    for (i = 0, l = chunks.length; i < l; i++) {
	      len += chunks[i].length;
	    }
	
	    // join chunks
	    result = new Uint8Array(len);
	    pos = 0;
	    for (i = 0, l = chunks.length; i < l; i++) {
	      chunk = chunks[i];
	      result.set(chunk, pos);
	      pos += chunk.length;
	    }
	
	    return result;
	  }
	};
	
	var fnUntyped = {
	  arraySet: function arraySet(dest, src, src_offs, len, dest_offs) {
	    for (var i = 0; i < len; i++) {
	      dest[dest_offs + i] = src[src_offs + i];
	    }
	  },
	  // Join array of chunks to single array.
	  flattenChunks: function flattenChunks(chunks) {
	    return [].concat.apply([], chunks);
	  }
	};
	
	// Enable/Disable typed arrays use, for testing
	//
	exports.setTyped = function (on) {
	  if (on) {
	    exports.Buf8 = Uint8Array;
	    exports.Buf16 = Uint16Array;
	    exports.Buf32 = Int32Array;
	    exports.assign(exports, fnTyped);
	  } else {
	    exports.Buf8 = Array;
	    exports.Buf16 = Array;
	    exports.Buf32 = Array;
	    exports.assign(exports, fnUntyped);
	  }
	};
	
	exports.setTyped(TYPED_OK);

/***/ }),
/* 427 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var utils = __webpack_require__(426);
	
	/* Public constants ==========================================================*/
	/* ===========================================================================*/
	
	//var Z_FILTERED          = 1;
	//var Z_HUFFMAN_ONLY      = 2;
	//var Z_RLE               = 3;
	var Z_FIXED = 4;
	//var Z_DEFAULT_STRATEGY  = 0;
	
	/* Possible values of the data_type field (though see inflate()) */
	var Z_BINARY = 0;
	var Z_TEXT = 1;
	//var Z_ASCII             = 1; // = Z_TEXT
	var Z_UNKNOWN = 2;
	
	/*============================================================================*/
	
	function zero(buf) {
	  var len = buf.length;while (--len >= 0) {
	    buf[len] = 0;
	  }
	}
	
	// From zutil.h
	
	var STORED_BLOCK = 0;
	var STATIC_TREES = 1;
	var DYN_TREES = 2;
	/* The three kinds of block type */
	
	var MIN_MATCH = 3;
	var MAX_MATCH = 258;
	/* The minimum and maximum match lengths */
	
	// From deflate.h
	/* ===========================================================================
	 * Internal compression state.
	 */
	
	var LENGTH_CODES = 29;
	/* number of length codes, not counting the special END_BLOCK code */
	
	var LITERALS = 256;
	/* number of literal bytes 0..255 */
	
	var L_CODES = LITERALS + 1 + LENGTH_CODES;
	/* number of Literal or Length codes, including the END_BLOCK code */
	
	var D_CODES = 30;
	/* number of distance codes */
	
	var BL_CODES = 19;
	/* number of codes used to transfer the bit lengths */
	
	var HEAP_SIZE = 2 * L_CODES + 1;
	/* maximum heap size */
	
	var MAX_BITS = 15;
	/* All codes must not exceed MAX_BITS bits */
	
	var Buf_size = 16;
	/* size of bit buffer in bi_buf */
	
	/* ===========================================================================
	 * Constants
	 */
	
	var MAX_BL_BITS = 7;
	/* Bit length codes must not exceed MAX_BL_BITS bits */
	
	var END_BLOCK = 256;
	/* end of block literal code */
	
	var REP_3_6 = 16;
	/* repeat previous bit length 3-6 times (2 bits of repeat count) */
	
	var REPZ_3_10 = 17;
	/* repeat a zero length 3-10 times  (3 bits of repeat count) */
	
	var REPZ_11_138 = 18;
	/* repeat a zero length 11-138 times  (7 bits of repeat count) */
	
	/* eslint-disable comma-spacing,array-bracket-spacing */
	var extra_lbits = /* extra bits for each length code */
	[0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 0];
	
	var extra_dbits = /* extra bits for each distance code */
	[0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13];
	
	var extra_blbits = /* extra bits for each bit length code */
	[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 3, 7];
	
	var bl_order = [16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15];
	/* eslint-enable comma-spacing,array-bracket-spacing */
	
	/* The lengths of the bit length codes are sent in order of decreasing
	 * probability, to avoid transmitting the lengths for unused bit length codes.
	 */
	
	/* ===========================================================================
	 * Local data. These are initialized only once.
	 */
	
	// We pre-fill arrays with 0 to avoid uninitialized gaps
	
	var DIST_CODE_LEN = 512; /* see definition of array dist_code below */
	
	// !!!! Use flat array insdead of structure, Freq = i*2, Len = i*2+1
	var static_ltree = new Array((L_CODES + 2) * 2);
	zero(static_ltree);
	/* The static literal tree. Since the bit lengths are imposed, there is no
	 * need for the L_CODES extra codes used during heap construction. However
	 * The codes 286 and 287 are needed to build a canonical tree (see _tr_init
	 * below).
	 */
	
	var static_dtree = new Array(D_CODES * 2);
	zero(static_dtree);
	/* The static distance tree. (Actually a trivial tree since all codes use
	 * 5 bits.)
	 */
	
	var _dist_code = new Array(DIST_CODE_LEN);
	zero(_dist_code);
	/* Distance codes. The first 256 values correspond to the distances
	 * 3 .. 258, the last 256 values correspond to the top 8 bits of
	 * the 15 bit distances.
	 */
	
	var _length_code = new Array(MAX_MATCH - MIN_MATCH + 1);
	zero(_length_code);
	/* length code for each normalized match length (0 == MIN_MATCH) */
	
	var base_length = new Array(LENGTH_CODES);
	zero(base_length);
	/* First normalized length for each code (0 = MIN_MATCH) */
	
	var base_dist = new Array(D_CODES);
	zero(base_dist);
	/* First normalized distance for each code (0 = distance of 1) */
	
	function StaticTreeDesc(static_tree, extra_bits, extra_base, elems, max_length) {
	
	  this.static_tree = static_tree; /* static tree or NULL */
	  this.extra_bits = extra_bits; /* extra bits for each code or NULL */
	  this.extra_base = extra_base; /* base index for extra_bits */
	  this.elems = elems; /* max number of elements in the tree */
	  this.max_length = max_length; /* max bit length for the codes */
	
	  // show if `static_tree` has data or dummy - needed for monomorphic objects
	  this.has_stree = static_tree && static_tree.length;
	}
	
	var static_l_desc;
	var static_d_desc;
	var static_bl_desc;
	
	function TreeDesc(dyn_tree, stat_desc) {
	  this.dyn_tree = dyn_tree; /* the dynamic tree */
	  this.max_code = 0; /* largest code with non zero frequency */
	  this.stat_desc = stat_desc; /* the corresponding static tree */
	}
	
	function d_code(dist) {
	  return dist < 256 ? _dist_code[dist] : _dist_code[256 + (dist >>> 7)];
	}
	
	/* ===========================================================================
	 * Output a short LSB first on the stream.
	 * IN assertion: there is enough room in pendingBuf.
	 */
	function put_short(s, w) {
	  //    put_byte(s, (uch)((w) & 0xff));
	  //    put_byte(s, (uch)((ush)(w) >> 8));
	  s.pending_buf[s.pending++] = w & 0xff;
	  s.pending_buf[s.pending++] = w >>> 8 & 0xff;
	}
	
	/* ===========================================================================
	 * Send a value on a given number of bits.
	 * IN assertion: length <= 16 and value fits in length bits.
	 */
	function send_bits(s, value, length) {
	  if (s.bi_valid > Buf_size - length) {
	    s.bi_buf |= value << s.bi_valid & 0xffff;
	    put_short(s, s.bi_buf);
	    s.bi_buf = value >> Buf_size - s.bi_valid;
	    s.bi_valid += length - Buf_size;
	  } else {
	    s.bi_buf |= value << s.bi_valid & 0xffff;
	    s.bi_valid += length;
	  }
	}
	
	function send_code(s, c, tree) {
	  send_bits(s, tree[c * 2] /*.Code*/, tree[c * 2 + 1] /*.Len*/);
	}
	
	/* ===========================================================================
	 * Reverse the first len bits of a code, using straightforward code (a faster
	 * method would use a table)
	 * IN assertion: 1 <= len <= 15
	 */
	function bi_reverse(code, len) {
	  var res = 0;
	  do {
	    res |= code & 1;
	    code >>>= 1;
	    res <<= 1;
	  } while (--len > 0);
	  return res >>> 1;
	}
	
	/* ===========================================================================
	 * Flush the bit buffer, keeping at most 7 bits in it.
	 */
	function bi_flush(s) {
	  if (s.bi_valid === 16) {
	    put_short(s, s.bi_buf);
	    s.bi_buf = 0;
	    s.bi_valid = 0;
	  } else if (s.bi_valid >= 8) {
	    s.pending_buf[s.pending++] = s.bi_buf & 0xff;
	    s.bi_buf >>= 8;
	    s.bi_valid -= 8;
	  }
	}
	
	/* ===========================================================================
	 * Compute the optimal bit lengths for a tree and update the total bit length
	 * for the current block.
	 * IN assertion: the fields freq and dad are set, heap[heap_max] and
	 *    above are the tree nodes sorted by increasing frequency.
	 * OUT assertions: the field len is set to the optimal bit length, the
	 *     array bl_count contains the frequencies for each bit length.
	 *     The length opt_len is updated; static_len is also updated if stree is
	 *     not null.
	 */
	function gen_bitlen(s, desc)
	//    deflate_state *s;
	//    tree_desc *desc;    /* the tree descriptor */
	{
	  var tree = desc.dyn_tree;
	  var max_code = desc.max_code;
	  var stree = desc.stat_desc.static_tree;
	  var has_stree = desc.stat_desc.has_stree;
	  var extra = desc.stat_desc.extra_bits;
	  var base = desc.stat_desc.extra_base;
	  var max_length = desc.stat_desc.max_length;
	  var h; /* heap index */
	  var n, m; /* iterate over the tree elements */
	  var bits; /* bit length */
	  var xbits; /* extra bits */
	  var f; /* frequency */
	  var overflow = 0; /* number of elements with bit length too large */
	
	  for (bits = 0; bits <= MAX_BITS; bits++) {
	    s.bl_count[bits] = 0;
	  }
	
	  /* In a first pass, compute the optimal bit lengths (which may
	   * overflow in the case of the bit length tree).
	   */
	  tree[s.heap[s.heap_max] * 2 + 1] /*.Len*/ = 0; /* root of the heap */
	
	  for (h = s.heap_max + 1; h < HEAP_SIZE; h++) {
	    n = s.heap[h];
	    bits = tree[tree[n * 2 + 1] /*.Dad*/ * 2 + 1] /*.Len*/ + 1;
	    if (bits > max_length) {
	      bits = max_length;
	      overflow++;
	    }
	    tree[n * 2 + 1] /*.Len*/ = bits;
	    /* We overwrite tree[n].Dad which is no longer needed */
	
	    if (n > max_code) {
	      continue;
	    } /* not a leaf node */
	
	    s.bl_count[bits]++;
	    xbits = 0;
	    if (n >= base) {
	      xbits = extra[n - base];
	    }
	    f = tree[n * 2] /*.Freq*/;
	    s.opt_len += f * (bits + xbits);
	    if (has_stree) {
	      s.static_len += f * (stree[n * 2 + 1] /*.Len*/ + xbits);
	    }
	  }
	  if (overflow === 0) {
	    return;
	  }
	
	  // Trace((stderr,"\nbit length overflow\n"));
	  /* This happens for example on obj2 and pic of the Calgary corpus */
	
	  /* Find the first bit length which could increase: */
	  do {
	    bits = max_length - 1;
	    while (s.bl_count[bits] === 0) {
	      bits--;
	    }
	    s.bl_count[bits]--; /* move one leaf down the tree */
	    s.bl_count[bits + 1] += 2; /* move one overflow item as its brother */
	    s.bl_count[max_length]--;
	    /* The brother of the overflow item also moves one step up,
	     * but this does not affect bl_count[max_length]
	     */
	    overflow -= 2;
	  } while (overflow > 0);
	
	  /* Now recompute all bit lengths, scanning in increasing frequency.
	   * h is still equal to HEAP_SIZE. (It is simpler to reconstruct all
	   * lengths instead of fixing only the wrong ones. This idea is taken
	   * from 'ar' written by Haruhiko Okumura.)
	   */
	  for (bits = max_length; bits !== 0; bits--) {
	    n = s.bl_count[bits];
	    while (n !== 0) {
	      m = s.heap[--h];
	      if (m > max_code) {
	        continue;
	      }
	      if (tree[m * 2 + 1] /*.Len*/ !== bits) {
	        // Trace((stderr,"code %d bits %d->%d\n", m, tree[m].Len, bits));
	        s.opt_len += (bits - tree[m * 2 + 1] /*.Len*/) * tree[m * 2] /*.Freq*/;
	        tree[m * 2 + 1] /*.Len*/ = bits;
	      }
	      n--;
	    }
	  }
	}
	
	/* ===========================================================================
	 * Generate the codes for a given tree and bit counts (which need not be
	 * optimal).
	 * IN assertion: the array bl_count contains the bit length statistics for
	 * the given tree and the field len is set for all tree elements.
	 * OUT assertion: the field code is set for all tree elements of non
	 *     zero code length.
	 */
	function gen_codes(tree, max_code, bl_count)
	//    ct_data *tree;             /* the tree to decorate */
	//    int max_code;              /* largest code with non zero frequency */
	//    ushf *bl_count;            /* number of codes at each bit length */
	{
	  var next_code = new Array(MAX_BITS + 1); /* next code value for each bit length */
	  var code = 0; /* running code value */
	  var bits; /* bit index */
	  var n; /* code index */
	
	  /* The distribution counts are first used to generate the code values
	   * without bit reversal.
	   */
	  for (bits = 1; bits <= MAX_BITS; bits++) {
	    next_code[bits] = code = code + bl_count[bits - 1] << 1;
	  }
	  /* Check that the bit counts in bl_count are consistent. The last code
	   * must be all ones.
	   */
	  //Assert (code + bl_count[MAX_BITS]-1 == (1<<MAX_BITS)-1,
	  //        "inconsistent bit counts");
	  //Tracev((stderr,"\ngen_codes: max_code %d ", max_code));
	
	  for (n = 0; n <= max_code; n++) {
	    var len = tree[n * 2 + 1] /*.Len*/;
	    if (len === 0) {
	      continue;
	    }
	    /* Now reverse the bits */
	    tree[n * 2] /*.Code*/ = bi_reverse(next_code[len]++, len);
	
	    //Tracecv(tree != static_ltree, (stderr,"\nn %3d %c l %2d c %4x (%x) ",
	    //     n, (isgraph(n) ? n : ' '), len, tree[n].Code, next_code[len]-1));
	  }
	}
	
	/* ===========================================================================
	 * Initialize the various 'constant' tables.
	 */
	function tr_static_init() {
	  var n; /* iterates over tree elements */
	  var bits; /* bit counter */
	  var length; /* length value */
	  var code; /* code value */
	  var dist; /* distance index */
	  var bl_count = new Array(MAX_BITS + 1);
	  /* number of codes at each bit length for an optimal tree */
	
	  // do check in _tr_init()
	  //if (static_init_done) return;
	
	  /* For some embedded targets, global variables are not initialized: */
	  /*#ifdef NO_INIT_GLOBAL_POINTERS
	    static_l_desc.static_tree = static_ltree;
	    static_l_desc.extra_bits = extra_lbits;
	    static_d_desc.static_tree = static_dtree;
	    static_d_desc.extra_bits = extra_dbits;
	    static_bl_desc.extra_bits = extra_blbits;
	  #endif*/
	
	  /* Initialize the mapping length (0..255) -> length code (0..28) */
	  length = 0;
	  for (code = 0; code < LENGTH_CODES - 1; code++) {
	    base_length[code] = length;
	    for (n = 0; n < 1 << extra_lbits[code]; n++) {
	      _length_code[length++] = code;
	    }
	  }
	  //Assert (length == 256, "tr_static_init: length != 256");
	  /* Note that the length 255 (match length 258) can be represented
	   * in two different ways: code 284 + 5 bits or code 285, so we
	   * overwrite length_code[255] to use the best encoding:
	   */
	  _length_code[length - 1] = code;
	
	  /* Initialize the mapping dist (0..32K) -> dist code (0..29) */
	  dist = 0;
	  for (code = 0; code < 16; code++) {
	    base_dist[code] = dist;
	    for (n = 0; n < 1 << extra_dbits[code]; n++) {
	      _dist_code[dist++] = code;
	    }
	  }
	  //Assert (dist == 256, "tr_static_init: dist != 256");
	  dist >>= 7; /* from now on, all distances are divided by 128 */
	  for (; code < D_CODES; code++) {
	    base_dist[code] = dist << 7;
	    for (n = 0; n < 1 << extra_dbits[code] - 7; n++) {
	      _dist_code[256 + dist++] = code;
	    }
	  }
	  //Assert (dist == 256, "tr_static_init: 256+dist != 512");
	
	  /* Construct the codes of the static literal tree */
	  for (bits = 0; bits <= MAX_BITS; bits++) {
	    bl_count[bits] = 0;
	  }
	
	  n = 0;
	  while (n <= 143) {
	    static_ltree[n * 2 + 1] /*.Len*/ = 8;
	    n++;
	    bl_count[8]++;
	  }
	  while (n <= 255) {
	    static_ltree[n * 2 + 1] /*.Len*/ = 9;
	    n++;
	    bl_count[9]++;
	  }
	  while (n <= 279) {
	    static_ltree[n * 2 + 1] /*.Len*/ = 7;
	    n++;
	    bl_count[7]++;
	  }
	  while (n <= 287) {
	    static_ltree[n * 2 + 1] /*.Len*/ = 8;
	    n++;
	    bl_count[8]++;
	  }
	  /* Codes 286 and 287 do not exist, but we must include them in the
	   * tree construction to get a canonical Huffman tree (longest code
	   * all ones)
	   */
	  gen_codes(static_ltree, L_CODES + 1, bl_count);
	
	  /* The static distance tree is trivial: */
	  for (n = 0; n < D_CODES; n++) {
	    static_dtree[n * 2 + 1] /*.Len*/ = 5;
	    static_dtree[n * 2] /*.Code*/ = bi_reverse(n, 5);
	  }
	
	  // Now data ready and we can init static trees
	  static_l_desc = new StaticTreeDesc(static_ltree, extra_lbits, LITERALS + 1, L_CODES, MAX_BITS);
	  static_d_desc = new StaticTreeDesc(static_dtree, extra_dbits, 0, D_CODES, MAX_BITS);
	  static_bl_desc = new StaticTreeDesc(new Array(0), extra_blbits, 0, BL_CODES, MAX_BL_BITS);
	
	  //static_init_done = true;
	}
	
	/* ===========================================================================
	 * Initialize a new block.
	 */
	function init_block(s) {
	  var n; /* iterates over tree elements */
	
	  /* Initialize the trees. */
	  for (n = 0; n < L_CODES; n++) {
	    s.dyn_ltree[n * 2] /*.Freq*/ = 0;
	  }
	  for (n = 0; n < D_CODES; n++) {
	    s.dyn_dtree[n * 2] /*.Freq*/ = 0;
	  }
	  for (n = 0; n < BL_CODES; n++) {
	    s.bl_tree[n * 2] /*.Freq*/ = 0;
	  }
	
	  s.dyn_ltree[END_BLOCK * 2] /*.Freq*/ = 1;
	  s.opt_len = s.static_len = 0;
	  s.last_lit = s.matches = 0;
	}
	
	/* ===========================================================================
	 * Flush the bit buffer and align the output on a byte boundary
	 */
	function bi_windup(s) {
	  if (s.bi_valid > 8) {
	    put_short(s, s.bi_buf);
	  } else if (s.bi_valid > 0) {
	    //put_byte(s, (Byte)s->bi_buf);
	    s.pending_buf[s.pending++] = s.bi_buf;
	  }
	  s.bi_buf = 0;
	  s.bi_valid = 0;
	}
	
	/* ===========================================================================
	 * Copy a stored block, storing first the length and its
	 * one's complement if requested.
	 */
	function copy_block(s, buf, len, header)
	//DeflateState *s;
	//charf    *buf;    /* the input data */
	//unsigned len;     /* its length */
	//int      header;  /* true if block header must be written */
	{
	  bi_windup(s); /* align on byte boundary */
	
	  if (header) {
	    put_short(s, len);
	    put_short(s, ~len);
	  }
	  //  while (len--) {
	  //    put_byte(s, *buf++);
	  //  }
	  utils.arraySet(s.pending_buf, s.window, buf, len, s.pending);
	  s.pending += len;
	}
	
	/* ===========================================================================
	 * Compares to subtrees, using the tree depth as tie breaker when
	 * the subtrees have equal frequency. This minimizes the worst case length.
	 */
	function smaller(tree, n, m, depth) {
	  var _n2 = n * 2;
	  var _m2 = m * 2;
	  return tree[_n2] /*.Freq*/ < tree[_m2] /*.Freq*/ || tree[_n2] /*.Freq*/ === tree[_m2] /*.Freq*/ && depth[n] <= depth[m];
	}
	
	/* ===========================================================================
	 * Restore the heap property by moving down the tree starting at node k,
	 * exchanging a node with the smallest of its two sons if necessary, stopping
	 * when the heap property is re-established (each father smaller than its
	 * two sons).
	 */
	function pqdownheap(s, tree, k)
	//    deflate_state *s;
	//    ct_data *tree;  /* the tree to restore */
	//    int k;               /* node to move down */
	{
	  var v = s.heap[k];
	  var j = k << 1; /* left son of k */
	  while (j <= s.heap_len) {
	    /* Set j to the smallest of the two sons: */
	    if (j < s.heap_len && smaller(tree, s.heap[j + 1], s.heap[j], s.depth)) {
	      j++;
	    }
	    /* Exit if v is smaller than both sons */
	    if (smaller(tree, v, s.heap[j], s.depth)) {
	      break;
	    }
	
	    /* Exchange v with the smallest son */
	    s.heap[k] = s.heap[j];
	    k = j;
	
	    /* And continue down the tree, setting j to the left son of k */
	    j <<= 1;
	  }
	  s.heap[k] = v;
	}
	
	// inlined manually
	// var SMALLEST = 1;
	
	/* ===========================================================================
	 * Send the block data compressed using the given Huffman trees
	 */
	function compress_block(s, ltree, dtree)
	//    deflate_state *s;
	//    const ct_data *ltree; /* literal tree */
	//    const ct_data *dtree; /* distance tree */
	{
	  var dist; /* distance of matched string */
	  var lc; /* match length or unmatched char (if dist == 0) */
	  var lx = 0; /* running index in l_buf */
	  var code; /* the code to send */
	  var extra; /* number of extra bits to send */
	
	  if (s.last_lit !== 0) {
	    do {
	      dist = s.pending_buf[s.d_buf + lx * 2] << 8 | s.pending_buf[s.d_buf + lx * 2 + 1];
	      lc = s.pending_buf[s.l_buf + lx];
	      lx++;
	
	      if (dist === 0) {
	        send_code(s, lc, ltree); /* send a literal byte */
	        //Tracecv(isgraph(lc), (stderr," '%c' ", lc));
	      } else {
	        /* Here, lc is the match length - MIN_MATCH */
	        code = _length_code[lc];
	        send_code(s, code + LITERALS + 1, ltree); /* send the length code */
	        extra = extra_lbits[code];
	        if (extra !== 0) {
	          lc -= base_length[code];
	          send_bits(s, lc, extra); /* send the extra length bits */
	        }
	        dist--; /* dist is now the match distance - 1 */
	        code = d_code(dist);
	        //Assert (code < D_CODES, "bad d_code");
	
	        send_code(s, code, dtree); /* send the distance code */
	        extra = extra_dbits[code];
	        if (extra !== 0) {
	          dist -= base_dist[code];
	          send_bits(s, dist, extra); /* send the extra distance bits */
	        }
	      } /* literal or match pair ? */
	
	      /* Check that the overlay between pending_buf and d_buf+l_buf is ok: */
	      //Assert((uInt)(s->pending) < s->lit_bufsize + 2*lx,
	      //       "pendingBuf overflow");
	    } while (lx < s.last_lit);
	  }
	
	  send_code(s, END_BLOCK, ltree);
	}
	
	/* ===========================================================================
	 * Construct one Huffman tree and assigns the code bit strings and lengths.
	 * Update the total bit length for the current block.
	 * IN assertion: the field freq is set for all tree elements.
	 * OUT assertions: the fields len and code are set to the optimal bit length
	 *     and corresponding code. The length opt_len is updated; static_len is
	 *     also updated if stree is not null. The field max_code is set.
	 */
	function build_tree(s, desc)
	//    deflate_state *s;
	//    tree_desc *desc; /* the tree descriptor */
	{
	  var tree = desc.dyn_tree;
	  var stree = desc.stat_desc.static_tree;
	  var has_stree = desc.stat_desc.has_stree;
	  var elems = desc.stat_desc.elems;
	  var n, m; /* iterate over heap elements */
	  var max_code = -1; /* largest code with non zero frequency */
	  var node; /* new node being created */
	
	  /* Construct the initial heap, with least frequent element in
	   * heap[SMALLEST]. The sons of heap[n] are heap[2*n] and heap[2*n+1].
	   * heap[0] is not used.
	   */
	  s.heap_len = 0;
	  s.heap_max = HEAP_SIZE;
	
	  for (n = 0; n < elems; n++) {
	    if (tree[n * 2] /*.Freq*/ !== 0) {
	      s.heap[++s.heap_len] = max_code = n;
	      s.depth[n] = 0;
	    } else {
	      tree[n * 2 + 1] /*.Len*/ = 0;
	    }
	  }
	
	  /* The pkzip format requires that at least one distance code exists,
	   * and that at least one bit should be sent even if there is only one
	   * possible code. So to avoid special checks later on we force at least
	   * two codes of non zero frequency.
	   */
	  while (s.heap_len < 2) {
	    node = s.heap[++s.heap_len] = max_code < 2 ? ++max_code : 0;
	    tree[node * 2] /*.Freq*/ = 1;
	    s.depth[node] = 0;
	    s.opt_len--;
	
	    if (has_stree) {
	      s.static_len -= stree[node * 2 + 1] /*.Len*/;
	    }
	    /* node is 0 or 1 so it does not have extra bits */
	  }
	  desc.max_code = max_code;
	
	  /* The elements heap[heap_len/2+1 .. heap_len] are leaves of the tree,
	   * establish sub-heaps of increasing lengths:
	   */
	  for (n = s.heap_len >> 1 /*int /2*/; n >= 1; n--) {
	    pqdownheap(s, tree, n);
	  }
	
	  /* Construct the Huffman tree by repeatedly combining the least two
	   * frequent nodes.
	   */
	  node = elems; /* next internal node of the tree */
	  do {
	    //pqremove(s, tree, n);  /* n = node of least frequency */
	    /*** pqremove ***/
	    n = s.heap[1 /*SMALLEST*/];
	    s.heap[1 /*SMALLEST*/] = s.heap[s.heap_len--];
	    pqdownheap(s, tree, 1 /*SMALLEST*/);
	    /***/
	
	    m = s.heap[1 /*SMALLEST*/]; /* m = node of next least frequency */
	
	    s.heap[--s.heap_max] = n; /* keep the nodes sorted by frequency */
	    s.heap[--s.heap_max] = m;
	
	    /* Create a new node father of n and m */
	    tree[node * 2] /*.Freq*/ = tree[n * 2] /*.Freq*/ + tree[m * 2] /*.Freq*/;
	    s.depth[node] = (s.depth[n] >= s.depth[m] ? s.depth[n] : s.depth[m]) + 1;
	    tree[n * 2 + 1] /*.Dad*/ = tree[m * 2 + 1] /*.Dad*/ = node;
	
	    /* and insert the new node in the heap */
	    s.heap[1 /*SMALLEST*/] = node++;
	    pqdownheap(s, tree, 1 /*SMALLEST*/);
	  } while (s.heap_len >= 2);
	
	  s.heap[--s.heap_max] = s.heap[1 /*SMALLEST*/];
	
	  /* At this point, the fields freq and dad are set. We can now
	   * generate the bit lengths.
	   */
	  gen_bitlen(s, desc);
	
	  /* The field len is now set, we can generate the bit codes */
	  gen_codes(tree, max_code, s.bl_count);
	}
	
	/* ===========================================================================
	 * Scan a literal or distance tree to determine the frequencies of the codes
	 * in the bit length tree.
	 */
	function scan_tree(s, tree, max_code)
	//    deflate_state *s;
	//    ct_data *tree;   /* the tree to be scanned */
	//    int max_code;    /* and its largest code of non zero frequency */
	{
	  var n; /* iterates over all tree elements */
	  var prevlen = -1; /* last emitted length */
	  var curlen; /* length of current code */
	
	  var nextlen = tree[0 * 2 + 1] /*.Len*/; /* length of next code */
	
	  var count = 0; /* repeat count of the current code */
	  var max_count = 7; /* max repeat count */
	  var min_count = 4; /* min repeat count */
	
	  if (nextlen === 0) {
	    max_count = 138;
	    min_count = 3;
	  }
	  tree[(max_code + 1) * 2 + 1] /*.Len*/ = 0xffff; /* guard */
	
	  for (n = 0; n <= max_code; n++) {
	    curlen = nextlen;
	    nextlen = tree[(n + 1) * 2 + 1] /*.Len*/;
	
	    if (++count < max_count && curlen === nextlen) {
	      continue;
	    } else if (count < min_count) {
	      s.bl_tree[curlen * 2] /*.Freq*/ += count;
	    } else if (curlen !== 0) {
	
	      if (curlen !== prevlen) {
	        s.bl_tree[curlen * 2] /*.Freq*/++;
	      }
	      s.bl_tree[REP_3_6 * 2] /*.Freq*/++;
	    } else if (count <= 10) {
	      s.bl_tree[REPZ_3_10 * 2] /*.Freq*/++;
	    } else {
	      s.bl_tree[REPZ_11_138 * 2] /*.Freq*/++;
	    }
	
	    count = 0;
	    prevlen = curlen;
	
	    if (nextlen === 0) {
	      max_count = 138;
	      min_count = 3;
	    } else if (curlen === nextlen) {
	      max_count = 6;
	      min_count = 3;
	    } else {
	      max_count = 7;
	      min_count = 4;
	    }
	  }
	}
	
	/* ===========================================================================
	 * Send a literal or distance tree in compressed form, using the codes in
	 * bl_tree.
	 */
	function send_tree(s, tree, max_code)
	//    deflate_state *s;
	//    ct_data *tree; /* the tree to be scanned */
	//    int max_code;       /* and its largest code of non zero frequency */
	{
	  var n; /* iterates over all tree elements */
	  var prevlen = -1; /* last emitted length */
	  var curlen; /* length of current code */
	
	  var nextlen = tree[0 * 2 + 1] /*.Len*/; /* length of next code */
	
	  var count = 0; /* repeat count of the current code */
	  var max_count = 7; /* max repeat count */
	  var min_count = 4; /* min repeat count */
	
	  /* tree[max_code+1].Len = -1; */ /* guard already set */
	  if (nextlen === 0) {
	    max_count = 138;
	    min_count = 3;
	  }
	
	  for (n = 0; n <= max_code; n++) {
	    curlen = nextlen;
	    nextlen = tree[(n + 1) * 2 + 1] /*.Len*/;
	
	    if (++count < max_count && curlen === nextlen) {
	      continue;
	    } else if (count < min_count) {
	      do {
	        send_code(s, curlen, s.bl_tree);
	      } while (--count !== 0);
	    } else if (curlen !== 0) {
	      if (curlen !== prevlen) {
	        send_code(s, curlen, s.bl_tree);
	        count--;
	      }
	      //Assert(count >= 3 && count <= 6, " 3_6?");
	      send_code(s, REP_3_6, s.bl_tree);
	      send_bits(s, count - 3, 2);
	    } else if (count <= 10) {
	      send_code(s, REPZ_3_10, s.bl_tree);
	      send_bits(s, count - 3, 3);
	    } else {
	      send_code(s, REPZ_11_138, s.bl_tree);
	      send_bits(s, count - 11, 7);
	    }
	
	    count = 0;
	    prevlen = curlen;
	    if (nextlen === 0) {
	      max_count = 138;
	      min_count = 3;
	    } else if (curlen === nextlen) {
	      max_count = 6;
	      min_count = 3;
	    } else {
	      max_count = 7;
	      min_count = 4;
	    }
	  }
	}
	
	/* ===========================================================================
	 * Construct the Huffman tree for the bit lengths and return the index in
	 * bl_order of the last bit length code to send.
	 */
	function build_bl_tree(s) {
	  var max_blindex; /* index of last bit length code of non zero freq */
	
	  /* Determine the bit length frequencies for literal and distance trees */
	  scan_tree(s, s.dyn_ltree, s.l_desc.max_code);
	  scan_tree(s, s.dyn_dtree, s.d_desc.max_code);
	
	  /* Build the bit length tree: */
	  build_tree(s, s.bl_desc);
	  /* opt_len now includes the length of the tree representations, except
	   * the lengths of the bit lengths codes and the 5+5+4 bits for the counts.
	   */
	
	  /* Determine the number of bit length codes to send. The pkzip format
	   * requires that at least 4 bit length codes be sent. (appnote.txt says
	   * 3 but the actual value used is 4.)
	   */
	  for (max_blindex = BL_CODES - 1; max_blindex >= 3; max_blindex--) {
	    if (s.bl_tree[bl_order[max_blindex] * 2 + 1] /*.Len*/ !== 0) {
	      break;
	    }
	  }
	  /* Update opt_len to include the bit length tree and counts */
	  s.opt_len += 3 * (max_blindex + 1) + 5 + 5 + 4;
	  //Tracev((stderr, "\ndyn trees: dyn %ld, stat %ld",
	  //        s->opt_len, s->static_len));
	
	  return max_blindex;
	}
	
	/* ===========================================================================
	 * Send the header for a block using dynamic Huffman trees: the counts, the
	 * lengths of the bit length codes, the literal tree and the distance tree.
	 * IN assertion: lcodes >= 257, dcodes >= 1, blcodes >= 4.
	 */
	function send_all_trees(s, lcodes, dcodes, blcodes)
	//    deflate_state *s;
	//    int lcodes, dcodes, blcodes; /* number of codes for each tree */
	{
	  var rank; /* index in bl_order */
	
	  //Assert (lcodes >= 257 && dcodes >= 1 && blcodes >= 4, "not enough codes");
	  //Assert (lcodes <= L_CODES && dcodes <= D_CODES && blcodes <= BL_CODES,
	  //        "too many codes");
	  //Tracev((stderr, "\nbl counts: "));
	  send_bits(s, lcodes - 257, 5); /* not +255 as stated in appnote.txt */
	  send_bits(s, dcodes - 1, 5);
	  send_bits(s, blcodes - 4, 4); /* not -3 as stated in appnote.txt */
	  for (rank = 0; rank < blcodes; rank++) {
	    //Tracev((stderr, "\nbl code %2d ", bl_order[rank]));
	    send_bits(s, s.bl_tree[bl_order[rank] * 2 + 1] /*.Len*/, 3);
	  }
	  //Tracev((stderr, "\nbl tree: sent %ld", s->bits_sent));
	
	  send_tree(s, s.dyn_ltree, lcodes - 1); /* literal tree */
	  //Tracev((stderr, "\nlit tree: sent %ld", s->bits_sent));
	
	  send_tree(s, s.dyn_dtree, dcodes - 1); /* distance tree */
	  //Tracev((stderr, "\ndist tree: sent %ld", s->bits_sent));
	}
	
	/* ===========================================================================
	 * Check if the data type is TEXT or BINARY, using the following algorithm:
	 * - TEXT if the two conditions below are satisfied:
	 *    a) There are no non-portable control characters belonging to the
	 *       "black list" (0..6, 14..25, 28..31).
	 *    b) There is at least one printable character belonging to the
	 *       "white list" (9 {TAB}, 10 {LF}, 13 {CR}, 32..255).
	 * - BINARY otherwise.
	 * - The following partially-portable control characters form a
	 *   "gray list" that is ignored in this detection algorithm:
	 *   (7 {BEL}, 8 {BS}, 11 {VT}, 12 {FF}, 26 {SUB}, 27 {ESC}).
	 * IN assertion: the fields Freq of dyn_ltree are set.
	 */
	function detect_data_type(s) {
	  /* black_mask is the bit mask of black-listed bytes
	   * set bits 0..6, 14..25, and 28..31
	   * 0xf3ffc07f = binary 11110011111111111100000001111111
	   */
	  var black_mask = 0xf3ffc07f;
	  var n;
	
	  /* Check for non-textual ("black-listed") bytes. */
	  for (n = 0; n <= 31; n++, black_mask >>>= 1) {
	    if (black_mask & 1 && s.dyn_ltree[n * 2] /*.Freq*/ !== 0) {
	      return Z_BINARY;
	    }
	  }
	
	  /* Check for textual ("white-listed") bytes. */
	  if (s.dyn_ltree[9 * 2] /*.Freq*/ !== 0 || s.dyn_ltree[10 * 2] /*.Freq*/ !== 0 || s.dyn_ltree[13 * 2] /*.Freq*/ !== 0) {
	    return Z_TEXT;
	  }
	  for (n = 32; n < LITERALS; n++) {
	    if (s.dyn_ltree[n * 2] /*.Freq*/ !== 0) {
	      return Z_TEXT;
	    }
	  }
	
	  /* There are no "black-listed" or "white-listed" bytes:
	   * this stream either is empty or has tolerated ("gray-listed") bytes only.
	   */
	  return Z_BINARY;
	}
	
	var static_init_done = false;
	
	/* ===========================================================================
	 * Initialize the tree data structures for a new zlib stream.
	 */
	function _tr_init(s) {
	
	  if (!static_init_done) {
	    tr_static_init();
	    static_init_done = true;
	  }
	
	  s.l_desc = new TreeDesc(s.dyn_ltree, static_l_desc);
	  s.d_desc = new TreeDesc(s.dyn_dtree, static_d_desc);
	  s.bl_desc = new TreeDesc(s.bl_tree, static_bl_desc);
	
	  s.bi_buf = 0;
	  s.bi_valid = 0;
	
	  /* Initialize the first block of the first file: */
	  init_block(s);
	}
	
	/* ===========================================================================
	 * Send a stored block
	 */
	function _tr_stored_block(s, buf, stored_len, last)
	//DeflateState *s;
	//charf *buf;       /* input block */
	//ulg stored_len;   /* length of input block */
	//int last;         /* one if this is the last block for a file */
	{
	  send_bits(s, (STORED_BLOCK << 1) + (last ? 1 : 0), 3); /* send block type */
	  copy_block(s, buf, stored_len, true); /* with header */
	}
	
	/* ===========================================================================
	 * Send one empty static block to give enough lookahead for inflate.
	 * This takes 10 bits, of which 7 may remain in the bit buffer.
	 */
	function _tr_align(s) {
	  send_bits(s, STATIC_TREES << 1, 3);
	  send_code(s, END_BLOCK, static_ltree);
	  bi_flush(s);
	}
	
	/* ===========================================================================
	 * Determine the best encoding for the current block: dynamic trees, static
	 * trees or store, and output the encoded block to the zip file.
	 */
	function _tr_flush_block(s, buf, stored_len, last)
	//DeflateState *s;
	//charf *buf;       /* input block, or NULL if too old */
	//ulg stored_len;   /* length of input block */
	//int last;         /* one if this is the last block for a file */
	{
	  var opt_lenb, static_lenb; /* opt_len and static_len in bytes */
	  var max_blindex = 0; /* index of last bit length code of non zero freq */
	
	  /* Build the Huffman trees unless a stored block is forced */
	  if (s.level > 0) {
	
	    /* Check if the file is binary or text */
	    if (s.strm.data_type === Z_UNKNOWN) {
	      s.strm.data_type = detect_data_type(s);
	    }
	
	    /* Construct the literal and distance trees */
	    build_tree(s, s.l_desc);
	    // Tracev((stderr, "\nlit data: dyn %ld, stat %ld", s->opt_len,
	    //        s->static_len));
	
	    build_tree(s, s.d_desc);
	    // Tracev((stderr, "\ndist data: dyn %ld, stat %ld", s->opt_len,
	    //        s->static_len));
	    /* At this point, opt_len and static_len are the total bit lengths of
	     * the compressed block data, excluding the tree representations.
	     */
	
	    /* Build the bit length tree for the above two trees, and get the index
	     * in bl_order of the last bit length code to send.
	     */
	    max_blindex = build_bl_tree(s);
	
	    /* Determine the best encoding. Compute the block lengths in bytes. */
	    opt_lenb = s.opt_len + 3 + 7 >>> 3;
	    static_lenb = s.static_len + 3 + 7 >>> 3;
	
	    // Tracev((stderr, "\nopt %lu(%lu) stat %lu(%lu) stored %lu lit %u ",
	    //        opt_lenb, s->opt_len, static_lenb, s->static_len, stored_len,
	    //        s->last_lit));
	
	    if (static_lenb <= opt_lenb) {
	      opt_lenb = static_lenb;
	    }
	  } else {
	    // Assert(buf != (char*)0, "lost buf");
	    opt_lenb = static_lenb = stored_len + 5; /* force a stored block */
	  }
	
	  if (stored_len + 4 <= opt_lenb && buf !== -1) {
	    /* 4: two words for the lengths */
	
	    /* The test buf != NULL is only necessary if LIT_BUFSIZE > WSIZE.
	     * Otherwise we can't have processed more than WSIZE input bytes since
	     * the last block flush, because compression would have been
	     * successful. If LIT_BUFSIZE <= WSIZE, it is never too late to
	     * transform a block into a stored block.
	     */
	    _tr_stored_block(s, buf, stored_len, last);
	  } else if (s.strategy === Z_FIXED || static_lenb === opt_lenb) {
	
	    send_bits(s, (STATIC_TREES << 1) + (last ? 1 : 0), 3);
	    compress_block(s, static_ltree, static_dtree);
	  } else {
	    send_bits(s, (DYN_TREES << 1) + (last ? 1 : 0), 3);
	    send_all_trees(s, s.l_desc.max_code + 1, s.d_desc.max_code + 1, max_blindex + 1);
	    compress_block(s, s.dyn_ltree, s.dyn_dtree);
	  }
	  // Assert (s->compressed_len == s->bits_sent, "bad compressed size");
	  /* The above check is made mod 2^32, for files larger than 512 MB
	   * and uLong implemented on 32 bits.
	   */
	  init_block(s);
	
	  if (last) {
	    bi_windup(s);
	  }
	  // Tracev((stderr,"\ncomprlen %lu(%lu) ", s->compressed_len>>3,
	  //       s->compressed_len-7*last));
	}
	
	/* ===========================================================================
	 * Save the match info and tally the frequency counts. Return true if
	 * the current block must be flushed.
	 */
	function _tr_tally(s, dist, lc)
	//    deflate_state *s;
	//    unsigned dist;  /* distance of matched string */
	//    unsigned lc;    /* match length-MIN_MATCH or unmatched char (if dist==0) */
	{
	  //var out_length, in_length, dcode;
	
	  s.pending_buf[s.d_buf + s.last_lit * 2] = dist >>> 8 & 0xff;
	  s.pending_buf[s.d_buf + s.last_lit * 2 + 1] = dist & 0xff;
	
	  s.pending_buf[s.l_buf + s.last_lit] = lc & 0xff;
	  s.last_lit++;
	
	  if (dist === 0) {
	    /* lc is the unmatched char */
	    s.dyn_ltree[lc * 2] /*.Freq*/++;
	  } else {
	    s.matches++;
	    /* Here, lc is the match length - MIN_MATCH */
	    dist--; /* dist = match distance - 1 */
	    //Assert((ush)dist < (ush)MAX_DIST(s) &&
	    //       (ush)lc <= (ush)(MAX_MATCH-MIN_MATCH) &&
	    //       (ush)d_code(dist) < (ush)D_CODES,  "_tr_tally: bad match");
	
	    s.dyn_ltree[(_length_code[lc] + LITERALS + 1) * 2] /*.Freq*/++;
	    s.dyn_dtree[d_code(dist) * 2] /*.Freq*/++;
	  }
	
	  // (!) This block is disabled in zlib defailts,
	  // don't enable it for binary compatibility
	
	  //#ifdef TRUNCATE_BLOCK
	  //  /* Try to guess if it is profitable to stop the current block here */
	  //  if ((s.last_lit & 0x1fff) === 0 && s.level > 2) {
	  //    /* Compute an upper bound for the compressed length */
	  //    out_length = s.last_lit*8;
	  //    in_length = s.strstart - s.block_start;
	  //
	  //    for (dcode = 0; dcode < D_CODES; dcode++) {
	  //      out_length += s.dyn_dtree[dcode*2]/*.Freq*/ * (5 + extra_dbits[dcode]);
	  //    }
	  //    out_length >>>= 3;
	  //    //Tracev((stderr,"\nlast_lit %u, in %ld, out ~%ld(%ld%%) ",
	  //    //       s->last_lit, in_length, out_length,
	  //    //       100L - out_length*100L/in_length));
	  //    if (s.matches < (s.last_lit>>1)/*int /2*/ && out_length < (in_length>>1)/*int /2*/) {
	  //      return true;
	  //    }
	  //  }
	  //#endif
	
	  return s.last_lit === s.lit_bufsize - 1;
	  /* We avoid equality with lit_bufsize because of wraparound at 64K
	   * on 16 bit machines and because stored blocks are restricted to
	   * 64K-1 bytes.
	   */
	}
	
	exports._tr_init = _tr_init;
	exports._tr_stored_block = _tr_stored_block;
	exports._tr_flush_block = _tr_flush_block;
	exports._tr_tally = _tr_tally;
	exports._tr_align = _tr_align;

/***/ }),
/* 428 */
/***/ (function(module, exports) {

	'use strict';
	
	// Note: adler32 takes 12% for level 0 and 2% for level 6.
	// It doesn't worth to make additional optimizationa as in original.
	// Small size is preferable.
	
	function adler32(adler, buf, len, pos) {
	  var s1 = adler & 0xffff | 0,
	      s2 = adler >>> 16 & 0xffff | 0,
	      n = 0;
	
	  while (len !== 0) {
	    // Set limit ~ twice less than 5552, to keep
	    // s2 in 31-bits, because we force signed ints.
	    // in other case %= will fail.
	    n = len > 2000 ? 2000 : len;
	    len -= n;
	
	    do {
	      s1 = s1 + buf[pos++] | 0;
	      s2 = s2 + s1 | 0;
	    } while (--n);
	
	    s1 %= 65521;
	    s2 %= 65521;
	  }
	
	  return s1 | s2 << 16 | 0;
	}
	
	module.exports = adler32;

/***/ }),
/* 429 */
/***/ (function(module, exports) {

	'use strict';
	
	// Note: we can't get significant speed boost here.
	// So write code to minimize size - no pregenerated tables
	// and array tools dependencies.
	
	
	// Use ordinary array, since untyped makes no boost here
	
	function makeTable() {
	  var c,
	      table = [];
	
	  for (var n = 0; n < 256; n++) {
	    c = n;
	    for (var k = 0; k < 8; k++) {
	      c = c & 1 ? 0xEDB88320 ^ c >>> 1 : c >>> 1;
	    }
	    table[n] = c;
	  }
	
	  return table;
	}
	
	// Create table on load. Just 255 signed longs. Not a problem.
	var crcTable = makeTable();
	
	function crc32(crc, buf, len, pos) {
	  var t = crcTable,
	      end = pos + len;
	
	  crc ^= -1;
	
	  for (var i = pos; i < end; i++) {
	    crc = crc >>> 8 ^ t[(crc ^ buf[i]) & 0xFF];
	  }
	
	  return crc ^ -1; // >>> 0;
	}
	
	module.exports = crc32;

/***/ }),
/* 430 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var utils = __webpack_require__(426);
	var adler32 = __webpack_require__(428);
	var crc32 = __webpack_require__(429);
	var inflate_fast = __webpack_require__(431);
	var inflate_table = __webpack_require__(432);
	
	var CODES = 0;
	var LENS = 1;
	var DISTS = 2;
	
	/* Public constants ==========================================================*/
	/* ===========================================================================*/
	
	/* Allowed flush values; see deflate() and inflate() below for details */
	//var Z_NO_FLUSH      = 0;
	//var Z_PARTIAL_FLUSH = 1;
	//var Z_SYNC_FLUSH    = 2;
	//var Z_FULL_FLUSH    = 3;
	var Z_FINISH = 4;
	var Z_BLOCK = 5;
	var Z_TREES = 6;
	
	/* Return codes for the compression/decompression functions. Negative values
	 * are errors, positive values are used for special but normal events.
	 */
	var Z_OK = 0;
	var Z_STREAM_END = 1;
	var Z_NEED_DICT = 2;
	//var Z_ERRNO         = -1;
	var Z_STREAM_ERROR = -2;
	var Z_DATA_ERROR = -3;
	var Z_MEM_ERROR = -4;
	var Z_BUF_ERROR = -5;
	//var Z_VERSION_ERROR = -6;
	
	/* The deflate compression method */
	var Z_DEFLATED = 8;
	
	/* STATES ====================================================================*/
	/* ===========================================================================*/
	
	var HEAD = 1; /* i: waiting for magic header */
	var FLAGS = 2; /* i: waiting for method and flags (gzip) */
	var TIME = 3; /* i: waiting for modification time (gzip) */
	var OS = 4; /* i: waiting for extra flags and operating system (gzip) */
	var EXLEN = 5; /* i: waiting for extra length (gzip) */
	var EXTRA = 6; /* i: waiting for extra bytes (gzip) */
	var NAME = 7; /* i: waiting for end of file name (gzip) */
	var COMMENT = 8; /* i: waiting for end of comment (gzip) */
	var HCRC = 9; /* i: waiting for header crc (gzip) */
	var DICTID = 10; /* i: waiting for dictionary check value */
	var DICT = 11; /* waiting for inflateSetDictionary() call */
	var TYPE = 12; /* i: waiting for type bits, including last-flag bit */
	var TYPEDO = 13; /* i: same, but skip check to exit inflate on new block */
	var STORED = 14; /* i: waiting for stored size (length and complement) */
	var COPY_ = 15; /* i/o: same as COPY below, but only first time in */
	var COPY = 16; /* i/o: waiting for input or output to copy stored block */
	var TABLE = 17; /* i: waiting for dynamic block table lengths */
	var LENLENS = 18; /* i: waiting for code length code lengths */
	var CODELENS = 19; /* i: waiting for length/lit and distance code lengths */
	var LEN_ = 20; /* i: same as LEN below, but only first time in */
	var LEN = 21; /* i: waiting for length/lit/eob code */
	var LENEXT = 22; /* i: waiting for length extra bits */
	var DIST = 23; /* i: waiting for distance code */
	var DISTEXT = 24; /* i: waiting for distance extra bits */
	var MATCH = 25; /* o: waiting for output space to copy string */
	var LIT = 26; /* o: waiting for output space to write literal */
	var CHECK = 27; /* i: waiting for 32-bit check value */
	var LENGTH = 28; /* i: waiting for 32-bit length (gzip) */
	var DONE = 29; /* finished check, done -- remain here until reset */
	var BAD = 30; /* got a data error -- remain here until reset */
	var MEM = 31; /* got an inflate() memory error -- remain here until reset */
	var SYNC = 32; /* looking for synchronization bytes to restart inflate() */
	
	/* ===========================================================================*/
	
	var ENOUGH_LENS = 852;
	var ENOUGH_DISTS = 592;
	//var ENOUGH =  (ENOUGH_LENS+ENOUGH_DISTS);
	
	var MAX_WBITS = 15;
	/* 32K LZ77 window */
	var DEF_WBITS = MAX_WBITS;
	
	function zswap32(q) {
	  return (q >>> 24 & 0xff) + (q >>> 8 & 0xff00) + ((q & 0xff00) << 8) + ((q & 0xff) << 24);
	}
	
	function InflateState() {
	  this.mode = 0; /* current inflate mode */
	  this.last = false; /* true if processing last block */
	  this.wrap = 0; /* bit 0 true for zlib, bit 1 true for gzip */
	  this.havedict = false; /* true if dictionary provided */
	  this.flags = 0; /* gzip header method and flags (0 if zlib) */
	  this.dmax = 0; /* zlib header max distance (INFLATE_STRICT) */
	  this.check = 0; /* protected copy of check value */
	  this.total = 0; /* protected copy of output count */
	  // TODO: may be {}
	  this.head = null; /* where to save gzip header information */
	
	  /* sliding window */
	  this.wbits = 0; /* log base 2 of requested window size */
	  this.wsize = 0; /* window size or zero if not using window */
	  this.whave = 0; /* valid bytes in the window */
	  this.wnext = 0; /* window write index */
	  this.window = null; /* allocated sliding window, if needed */
	
	  /* bit accumulator */
	  this.hold = 0; /* input bit accumulator */
	  this.bits = 0; /* number of bits in "in" */
	
	  /* for string and stored block copying */
	  this.length = 0; /* literal or length of data to copy */
	  this.offset = 0; /* distance back to copy string from */
	
	  /* for table and code decoding */
	  this.extra = 0; /* extra bits needed */
	
	  /* fixed and dynamic code tables */
	  this.lencode = null; /* starting table for length/literal codes */
	  this.distcode = null; /* starting table for distance codes */
	  this.lenbits = 0; /* index bits for lencode */
	  this.distbits = 0; /* index bits for distcode */
	
	  /* dynamic table building */
	  this.ncode = 0; /* number of code length code lengths */
	  this.nlen = 0; /* number of length code lengths */
	  this.ndist = 0; /* number of distance code lengths */
	  this.have = 0; /* number of code lengths in lens[] */
	  this.next = null; /* next available space in codes[] */
	
	  this.lens = new utils.Buf16(320); /* temporary storage for code lengths */
	  this.work = new utils.Buf16(288); /* work area for code table building */
	
	  /*
	   because we don't have pointers in js, we use lencode and distcode directly
	   as buffers so we don't need codes
	  */
	  //this.codes = new utils.Buf32(ENOUGH);       /* space for code tables */
	  this.lendyn = null; /* dynamic table for length/literal codes (JS specific) */
	  this.distdyn = null; /* dynamic table for distance codes (JS specific) */
	  this.sane = 0; /* if false, allow invalid distance too far */
	  this.back = 0; /* bits back of last unprocessed length/lit */
	  this.was = 0; /* initial length of match */
	}
	
	function inflateResetKeep(strm) {
	  var state;
	
	  if (!strm || !strm.state) {
	    return Z_STREAM_ERROR;
	  }
	  state = strm.state;
	  strm.total_in = strm.total_out = state.total = 0;
	  strm.msg = ''; /*Z_NULL*/
	  if (state.wrap) {
	    /* to support ill-conceived Java test suite */
	    strm.adler = state.wrap & 1;
	  }
	  state.mode = HEAD;
	  state.last = 0;
	  state.havedict = 0;
	  state.dmax = 32768;
	  state.head = null /*Z_NULL*/;
	  state.hold = 0;
	  state.bits = 0;
	  //state.lencode = state.distcode = state.next = state.codes;
	  state.lencode = state.lendyn = new utils.Buf32(ENOUGH_LENS);
	  state.distcode = state.distdyn = new utils.Buf32(ENOUGH_DISTS);
	
	  state.sane = 1;
	  state.back = -1;
	  //Tracev((stderr, "inflate: reset\n"));
	  return Z_OK;
	}
	
	function inflateReset(strm) {
	  var state;
	
	  if (!strm || !strm.state) {
	    return Z_STREAM_ERROR;
	  }
	  state = strm.state;
	  state.wsize = 0;
	  state.whave = 0;
	  state.wnext = 0;
	  return inflateResetKeep(strm);
	}
	
	function inflateReset2(strm, windowBits) {
	  var wrap;
	  var state;
	
	  /* get the state */
	  if (!strm || !strm.state) {
	    return Z_STREAM_ERROR;
	  }
	  state = strm.state;
	
	  /* extract wrap request from windowBits parameter */
	  if (windowBits < 0) {
	    wrap = 0;
	    windowBits = -windowBits;
	  } else {
	    wrap = (windowBits >> 4) + 1;
	    if (windowBits < 48) {
	      windowBits &= 15;
	    }
	  }
	
	  /* set number of window bits, free window if different */
	  if (windowBits && (windowBits < 8 || windowBits > 15)) {
	    return Z_STREAM_ERROR;
	  }
	  if (state.window !== null && state.wbits !== windowBits) {
	    state.window = null;
	  }
	
	  /* update state and reset the rest of it */
	  state.wrap = wrap;
	  state.wbits = windowBits;
	  return inflateReset(strm);
	}
	
	function inflateInit2(strm, windowBits) {
	  var ret;
	  var state;
	
	  if (!strm) {
	    return Z_STREAM_ERROR;
	  }
	  //strm.msg = Z_NULL;                 /* in case we return an error */
	
	  state = new InflateState();
	
	  //if (state === Z_NULL) return Z_MEM_ERROR;
	  //Tracev((stderr, "inflate: allocated\n"));
	  strm.state = state;
	  state.window = null /*Z_NULL*/;
	  ret = inflateReset2(strm, windowBits);
	  if (ret !== Z_OK) {
	    strm.state = null /*Z_NULL*/;
	  }
	  return ret;
	}
	
	function inflateInit(strm) {
	  return inflateInit2(strm, DEF_WBITS);
	}
	
	/*
	 Return state with length and distance decoding tables and index sizes set to
	 fixed code decoding.  Normally this returns fixed tables from inffixed.h.
	 If BUILDFIXED is defined, then instead this routine builds the tables the
	 first time it's called, and returns those tables the first time and
	 thereafter.  This reduces the size of the code by about 2K bytes, in
	 exchange for a little execution time.  However, BUILDFIXED should not be
	 used for threaded applications, since the rewriting of the tables and virgin
	 may not be thread-safe.
	 */
	var virgin = true;
	
	var lenfix, distfix; // We have no pointers in JS, so keep tables separate
	
	function fixedtables(state) {
	  /* build fixed huffman tables if first call (may not be thread safe) */
	  if (virgin) {
	    var sym;
	
	    lenfix = new utils.Buf32(512);
	    distfix = new utils.Buf32(32);
	
	    /* literal/length table */
	    sym = 0;
	    while (sym < 144) {
	      state.lens[sym++] = 8;
	    }
	    while (sym < 256) {
	      state.lens[sym++] = 9;
	    }
	    while (sym < 280) {
	      state.lens[sym++] = 7;
	    }
	    while (sym < 288) {
	      state.lens[sym++] = 8;
	    }
	
	    inflate_table(LENS, state.lens, 0, 288, lenfix, 0, state.work, { bits: 9 });
	
	    /* distance table */
	    sym = 0;
	    while (sym < 32) {
	      state.lens[sym++] = 5;
	    }
	
	    inflate_table(DISTS, state.lens, 0, 32, distfix, 0, state.work, { bits: 5 });
	
	    /* do this just once */
	    virgin = false;
	  }
	
	  state.lencode = lenfix;
	  state.lenbits = 9;
	  state.distcode = distfix;
	  state.distbits = 5;
	}
	
	/*
	 Update the window with the last wsize (normally 32K) bytes written before
	 returning.  If window does not exist yet, create it.  This is only called
	 when a window is already in use, or when output has been written during this
	 inflate call, but the end of the deflate stream has not been reached yet.
	 It is also called to create a window for dictionary data when a dictionary
	 is loaded.
	
	 Providing output buffers larger than 32K to inflate() should provide a speed
	 advantage, since only the last 32K of output is copied to the sliding window
	 upon return from inflate(), and since all distances after the first 32K of
	 output will fall in the output data, making match copies simpler and faster.
	 The advantage may be dependent on the size of the processor's data caches.
	 */
	function updatewindow(strm, src, end, copy) {
	  var dist;
	  var state = strm.state;
	
	  /* if it hasn't been done already, allocate space for the window */
	  if (state.window === null) {
	    state.wsize = 1 << state.wbits;
	    state.wnext = 0;
	    state.whave = 0;
	
	    state.window = new utils.Buf8(state.wsize);
	  }
	
	  /* copy state->wsize or less output bytes into the circular window */
	  if (copy >= state.wsize) {
	    utils.arraySet(state.window, src, end - state.wsize, state.wsize, 0);
	    state.wnext = 0;
	    state.whave = state.wsize;
	  } else {
	    dist = state.wsize - state.wnext;
	    if (dist > copy) {
	      dist = copy;
	    }
	    //zmemcpy(state->window + state->wnext, end - copy, dist);
	    utils.arraySet(state.window, src, end - copy, dist, state.wnext);
	    copy -= dist;
	    if (copy) {
	      //zmemcpy(state->window, end - copy, copy);
	      utils.arraySet(state.window, src, end - copy, copy, 0);
	      state.wnext = copy;
	      state.whave = state.wsize;
	    } else {
	      state.wnext += dist;
	      if (state.wnext === state.wsize) {
	        state.wnext = 0;
	      }
	      if (state.whave < state.wsize) {
	        state.whave += dist;
	      }
	    }
	  }
	  return 0;
	}
	
	function inflate(strm, flush) {
	  var state;
	  var input, output; // input/output buffers
	  var next; /* next input INDEX */
	  var put; /* next output INDEX */
	  var have, left; /* available input and output */
	  var hold; /* bit buffer */
	  var bits; /* bits in bit buffer */
	  var _in, _out; /* save starting available input and output */
	  var copy; /* number of stored or match bytes to copy */
	  var from; /* where to copy match bytes from */
	  var from_source;
	  var here = 0; /* current decoding table entry */
	  var here_bits, here_op, here_val; // paked "here" denormalized (JS specific)
	  //var last;                   /* parent table entry */
	  var last_bits, last_op, last_val; // paked "last" denormalized (JS specific)
	  var len; /* length to copy for repeats, bits to drop */
	  var ret; /* return code */
	  var hbuf = new utils.Buf8(4); /* buffer for gzip header crc calculation */
	  var opts;
	
	  var n; // temporary var for NEED_BITS
	
	  var order = /* permutation of code lengths */
	  [16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15];
	
	  if (!strm || !strm.state || !strm.output || !strm.input && strm.avail_in !== 0) {
	    return Z_STREAM_ERROR;
	  }
	
	  state = strm.state;
	  if (state.mode === TYPE) {
	    state.mode = TYPEDO;
	  } /* skip check */
	
	  //--- LOAD() ---
	  put = strm.next_out;
	  output = strm.output;
	  left = strm.avail_out;
	  next = strm.next_in;
	  input = strm.input;
	  have = strm.avail_in;
	  hold = state.hold;
	  bits = state.bits;
	  //---
	
	  _in = have;
	  _out = left;
	  ret = Z_OK;
	
	  inf_leave: // goto emulation
	  for (;;) {
	    switch (state.mode) {
	      case HEAD:
	        if (state.wrap === 0) {
	          state.mode = TYPEDO;
	          break;
	        }
	        //=== NEEDBITS(16);
	        while (bits < 16) {
	          if (have === 0) {
	            break inf_leave;
	          }
	          have--;
	          hold += input[next++] << bits;
	          bits += 8;
	        }
	        //===//
	        if (state.wrap & 2 && hold === 0x8b1f) {
	          /* gzip header */
	          state.check = 0 /*crc32(0L, Z_NULL, 0)*/;
	          //=== CRC2(state.check, hold);
	          hbuf[0] = hold & 0xff;
	          hbuf[1] = hold >>> 8 & 0xff;
	          state.check = crc32(state.check, hbuf, 2, 0);
	          //===//
	
	          //=== INITBITS();
	          hold = 0;
	          bits = 0;
	          //===//
	          state.mode = FLAGS;
	          break;
	        }
	        state.flags = 0; /* expect zlib header */
	        if (state.head) {
	          state.head.done = false;
	        }
	        if (!(state.wrap & 1) || /* check if zlib header allowed */
	        (((hold & 0xff) << /*BITS(8)*/8) + (hold >> 8)) % 31) {
	          strm.msg = 'incorrect header check';
	          state.mode = BAD;
	          break;
	        }
	        if ((hold & 0x0f) !== /*BITS(4)*/Z_DEFLATED) {
	          strm.msg = 'unknown compression method';
	          state.mode = BAD;
	          break;
	        }
	        //--- DROPBITS(4) ---//
	        hold >>>= 4;
	        bits -= 4;
	        //---//
	        len = (hold & 0x0f) + /*BITS(4)*/8;
	        if (state.wbits === 0) {
	          state.wbits = len;
	        } else if (len > state.wbits) {
	          strm.msg = 'invalid window size';
	          state.mode = BAD;
	          break;
	        }
	        state.dmax = 1 << len;
	        //Tracev((stderr, "inflate:   zlib header ok\n"));
	        strm.adler = state.check = 1 /*adler32(0L, Z_NULL, 0)*/;
	        state.mode = hold & 0x200 ? DICTID : TYPE;
	        //=== INITBITS();
	        hold = 0;
	        bits = 0;
	        //===//
	        break;
	      case FLAGS:
	        //=== NEEDBITS(16); */
	        while (bits < 16) {
	          if (have === 0) {
	            break inf_leave;
	          }
	          have--;
	          hold += input[next++] << bits;
	          bits += 8;
	        }
	        //===//
	        state.flags = hold;
	        if ((state.flags & 0xff) !== Z_DEFLATED) {
	          strm.msg = 'unknown compression method';
	          state.mode = BAD;
	          break;
	        }
	        if (state.flags & 0xe000) {
	          strm.msg = 'unknown header flags set';
	          state.mode = BAD;
	          break;
	        }
	        if (state.head) {
	          state.head.text = hold >> 8 & 1;
	        }
	        if (state.flags & 0x0200) {
	          //=== CRC2(state.check, hold);
	          hbuf[0] = hold & 0xff;
	          hbuf[1] = hold >>> 8 & 0xff;
	          state.check = crc32(state.check, hbuf, 2, 0);
	          //===//
	        }
	        //=== INITBITS();
	        hold = 0;
	        bits = 0;
	        //===//
	        state.mode = TIME;
	      /* falls through */
	      case TIME:
	        //=== NEEDBITS(32); */
	        while (bits < 32) {
	          if (have === 0) {
	            break inf_leave;
	          }
	          have--;
	          hold += input[next++] << bits;
	          bits += 8;
	        }
	        //===//
	        if (state.head) {
	          state.head.time = hold;
	        }
	        if (state.flags & 0x0200) {
	          //=== CRC4(state.check, hold)
	          hbuf[0] = hold & 0xff;
	          hbuf[1] = hold >>> 8 & 0xff;
	          hbuf[2] = hold >>> 16 & 0xff;
	          hbuf[3] = hold >>> 24 & 0xff;
	          state.check = crc32(state.check, hbuf, 4, 0);
	          //===
	        }
	        //=== INITBITS();
	        hold = 0;
	        bits = 0;
	        //===//
	        state.mode = OS;
	      /* falls through */
	      case OS:
	        //=== NEEDBITS(16); */
	        while (bits < 16) {
	          if (have === 0) {
	            break inf_leave;
	          }
	          have--;
	          hold += input[next++] << bits;
	          bits += 8;
	        }
	        //===//
	        if (state.head) {
	          state.head.xflags = hold & 0xff;
	          state.head.os = hold >> 8;
	        }
	        if (state.flags & 0x0200) {
	          //=== CRC2(state.check, hold);
	          hbuf[0] = hold & 0xff;
	          hbuf[1] = hold >>> 8 & 0xff;
	          state.check = crc32(state.check, hbuf, 2, 0);
	          //===//
	        }
	        //=== INITBITS();
	        hold = 0;
	        bits = 0;
	        //===//
	        state.mode = EXLEN;
	      /* falls through */
	      case EXLEN:
	        if (state.flags & 0x0400) {
	          //=== NEEDBITS(16); */
	          while (bits < 16) {
	            if (have === 0) {
	              break inf_leave;
	            }
	            have--;
	            hold += input[next++] << bits;
	            bits += 8;
	          }
	          //===//
	          state.length = hold;
	          if (state.head) {
	            state.head.extra_len = hold;
	          }
	          if (state.flags & 0x0200) {
	            //=== CRC2(state.check, hold);
	            hbuf[0] = hold & 0xff;
	            hbuf[1] = hold >>> 8 & 0xff;
	            state.check = crc32(state.check, hbuf, 2, 0);
	            //===//
	          }
	          //=== INITBITS();
	          hold = 0;
	          bits = 0;
	          //===//
	        } else if (state.head) {
	          state.head.extra = null /*Z_NULL*/;
	        }
	        state.mode = EXTRA;
	      /* falls through */
	      case EXTRA:
	        if (state.flags & 0x0400) {
	          copy = state.length;
	          if (copy > have) {
	            copy = have;
	          }
	          if (copy) {
	            if (state.head) {
	              len = state.head.extra_len - state.length;
	              if (!state.head.extra) {
	                // Use untyped array for more conveniend processing later
	                state.head.extra = new Array(state.head.extra_len);
	              }
	              utils.arraySet(state.head.extra, input, next,
	              // extra field is limited to 65536 bytes
	              // - no need for additional size check
	              copy,
	              /*len + copy > state.head.extra_max - len ? state.head.extra_max : copy,*/
	              len);
	              //zmemcpy(state.head.extra + len, next,
	              //        len + copy > state.head.extra_max ?
	              //        state.head.extra_max - len : copy);
	            }
	            if (state.flags & 0x0200) {
	              state.check = crc32(state.check, input, copy, next);
	            }
	            have -= copy;
	            next += copy;
	            state.length -= copy;
	          }
	          if (state.length) {
	            break inf_leave;
	          }
	        }
	        state.length = 0;
	        state.mode = NAME;
	      /* falls through */
	      case NAME:
	        if (state.flags & 0x0800) {
	          if (have === 0) {
	            break inf_leave;
	          }
	          copy = 0;
	          do {
	            // TODO: 2 or 1 bytes?
	            len = input[next + copy++];
	            /* use constant limit because in js we should not preallocate memory */
	            if (state.head && len && state.length < 65536 /*state.head.name_max*/) {
	              state.head.name += String.fromCharCode(len);
	            }
	          } while (len && copy < have);
	
	          if (state.flags & 0x0200) {
	            state.check = crc32(state.check, input, copy, next);
	          }
	          have -= copy;
	          next += copy;
	          if (len) {
	            break inf_leave;
	          }
	        } else if (state.head) {
	          state.head.name = null;
	        }
	        state.length = 0;
	        state.mode = COMMENT;
	      /* falls through */
	      case COMMENT:
	        if (state.flags & 0x1000) {
	          if (have === 0) {
	            break inf_leave;
	          }
	          copy = 0;
	          do {
	            len = input[next + copy++];
	            /* use constant limit because in js we should not preallocate memory */
	            if (state.head && len && state.length < 65536 /*state.head.comm_max*/) {
	              state.head.comment += String.fromCharCode(len);
	            }
	          } while (len && copy < have);
	          if (state.flags & 0x0200) {
	            state.check = crc32(state.check, input, copy, next);
	          }
	          have -= copy;
	          next += copy;
	          if (len) {
	            break inf_leave;
	          }
	        } else if (state.head) {
	          state.head.comment = null;
	        }
	        state.mode = HCRC;
	      /* falls through */
	      case HCRC:
	        if (state.flags & 0x0200) {
	          //=== NEEDBITS(16); */
	          while (bits < 16) {
	            if (have === 0) {
	              break inf_leave;
	            }
	            have--;
	            hold += input[next++] << bits;
	            bits += 8;
	          }
	          //===//
	          if (hold !== (state.check & 0xffff)) {
	            strm.msg = 'header crc mismatch';
	            state.mode = BAD;
	            break;
	          }
	          //=== INITBITS();
	          hold = 0;
	          bits = 0;
	          //===//
	        }
	        if (state.head) {
	          state.head.hcrc = state.flags >> 9 & 1;
	          state.head.done = true;
	        }
	        strm.adler = state.check = 0;
	        state.mode = TYPE;
	        break;
	      case DICTID:
	        //=== NEEDBITS(32); */
	        while (bits < 32) {
	          if (have === 0) {
	            break inf_leave;
	          }
	          have--;
	          hold += input[next++] << bits;
	          bits += 8;
	        }
	        //===//
	        strm.adler = state.check = zswap32(hold);
	        //=== INITBITS();
	        hold = 0;
	        bits = 0;
	        //===//
	        state.mode = DICT;
	      /* falls through */
	      case DICT:
	        if (state.havedict === 0) {
	          //--- RESTORE() ---
	          strm.next_out = put;
	          strm.avail_out = left;
	          strm.next_in = next;
	          strm.avail_in = have;
	          state.hold = hold;
	          state.bits = bits;
	          //---
	          return Z_NEED_DICT;
	        }
	        strm.adler = state.check = 1 /*adler32(0L, Z_NULL, 0)*/;
	        state.mode = TYPE;
	      /* falls through */
	      case TYPE:
	        if (flush === Z_BLOCK || flush === Z_TREES) {
	          break inf_leave;
	        }
	      /* falls through */
	      case TYPEDO:
	        if (state.last) {
	          //--- BYTEBITS() ---//
	          hold >>>= bits & 7;
	          bits -= bits & 7;
	          //---//
	          state.mode = CHECK;
	          break;
	        }
	        //=== NEEDBITS(3); */
	        while (bits < 3) {
	          if (have === 0) {
	            break inf_leave;
	          }
	          have--;
	          hold += input[next++] << bits;
	          bits += 8;
	        }
	        //===//
	        state.last = hold & 0x01 /*BITS(1)*/;
	        //--- DROPBITS(1) ---//
	        hold >>>= 1;
	        bits -= 1;
	        //---//
	
	        switch (hold & 0x03) {/*BITS(2)*/case 0:
	            /* stored block */
	            //Tracev((stderr, "inflate:     stored block%s\n",
	            //        state.last ? " (last)" : ""));
	            state.mode = STORED;
	            break;
	          case 1:
	            /* fixed block */
	            fixedtables(state);
	            //Tracev((stderr, "inflate:     fixed codes block%s\n",
	            //        state.last ? " (last)" : ""));
	            state.mode = LEN_; /* decode codes */
	            if (flush === Z_TREES) {
	              //--- DROPBITS(2) ---//
	              hold >>>= 2;
	              bits -= 2;
	              //---//
	              break inf_leave;
	            }
	            break;
	          case 2:
	            /* dynamic block */
	            //Tracev((stderr, "inflate:     dynamic codes block%s\n",
	            //        state.last ? " (last)" : ""));
	            state.mode = TABLE;
	            break;
	          case 3:
	            strm.msg = 'invalid block type';
	            state.mode = BAD;
	        }
	        //--- DROPBITS(2) ---//
	        hold >>>= 2;
	        bits -= 2;
	        //---//
	        break;
	      case STORED:
	        //--- BYTEBITS() ---// /* go to byte boundary */
	        hold >>>= bits & 7;
	        bits -= bits & 7;
	        //---//
	        //=== NEEDBITS(32); */
	        while (bits < 32) {
	          if (have === 0) {
	            break inf_leave;
	          }
	          have--;
	          hold += input[next++] << bits;
	          bits += 8;
	        }
	        //===//
	        if ((hold & 0xffff) !== (hold >>> 16 ^ 0xffff)) {
	          strm.msg = 'invalid stored block lengths';
	          state.mode = BAD;
	          break;
	        }
	        state.length = hold & 0xffff;
	        //Tracev((stderr, "inflate:       stored length %u\n",
	        //        state.length));
	        //=== INITBITS();
	        hold = 0;
	        bits = 0;
	        //===//
	        state.mode = COPY_;
	        if (flush === Z_TREES) {
	          break inf_leave;
	        }
	      /* falls through */
	      case COPY_:
	        state.mode = COPY;
	      /* falls through */
	      case COPY:
	        copy = state.length;
	        if (copy) {
	          if (copy > have) {
	            copy = have;
	          }
	          if (copy > left) {
	            copy = left;
	          }
	          if (copy === 0) {
	            break inf_leave;
	          }
	          //--- zmemcpy(put, next, copy); ---
	          utils.arraySet(output, input, next, copy, put);
	          //---//
	          have -= copy;
	          next += copy;
	          left -= copy;
	          put += copy;
	          state.length -= copy;
	          break;
	        }
	        //Tracev((stderr, "inflate:       stored end\n"));
	        state.mode = TYPE;
	        break;
	      case TABLE:
	        //=== NEEDBITS(14); */
	        while (bits < 14) {
	          if (have === 0) {
	            break inf_leave;
	          }
	          have--;
	          hold += input[next++] << bits;
	          bits += 8;
	        }
	        //===//
	        state.nlen = (hold & 0x1f) + /*BITS(5)*/257;
	        //--- DROPBITS(5) ---//
	        hold >>>= 5;
	        bits -= 5;
	        //---//
	        state.ndist = (hold & 0x1f) + /*BITS(5)*/1;
	        //--- DROPBITS(5) ---//
	        hold >>>= 5;
	        bits -= 5;
	        //---//
	        state.ncode = (hold & 0x0f) + /*BITS(4)*/4;
	        //--- DROPBITS(4) ---//
	        hold >>>= 4;
	        bits -= 4;
	        //---//
	        //#ifndef PKZIP_BUG_WORKAROUND
	        if (state.nlen > 286 || state.ndist > 30) {
	          strm.msg = 'too many length or distance symbols';
	          state.mode = BAD;
	          break;
	        }
	        //#endif
	        //Tracev((stderr, "inflate:       table sizes ok\n"));
	        state.have = 0;
	        state.mode = LENLENS;
	      /* falls through */
	      case LENLENS:
	        while (state.have < state.ncode) {
	          //=== NEEDBITS(3);
	          while (bits < 3) {
	            if (have === 0) {
	              break inf_leave;
	            }
	            have--;
	            hold += input[next++] << bits;
	            bits += 8;
	          }
	          //===//
	          state.lens[order[state.have++]] = hold & 0x07; //BITS(3);
	          //--- DROPBITS(3) ---//
	          hold >>>= 3;
	          bits -= 3;
	          //---//
	        }
	        while (state.have < 19) {
	          state.lens[order[state.have++]] = 0;
	        }
	        // We have separate tables & no pointers. 2 commented lines below not needed.
	        //state.next = state.codes;
	        //state.lencode = state.next;
	        // Switch to use dynamic table
	        state.lencode = state.lendyn;
	        state.lenbits = 7;
	
	        opts = { bits: state.lenbits };
	        ret = inflate_table(CODES, state.lens, 0, 19, state.lencode, 0, state.work, opts);
	        state.lenbits = opts.bits;
	
	        if (ret) {
	          strm.msg = 'invalid code lengths set';
	          state.mode = BAD;
	          break;
	        }
	        //Tracev((stderr, "inflate:       code lengths ok\n"));
	        state.have = 0;
	        state.mode = CODELENS;
	      /* falls through */
	      case CODELENS:
	        while (state.have < state.nlen + state.ndist) {
	          for (;;) {
	            here = state.lencode[hold & (1 << state.lenbits) - 1]; /*BITS(state.lenbits)*/
	            here_bits = here >>> 24;
	            here_op = here >>> 16 & 0xff;
	            here_val = here & 0xffff;
	
	            if (here_bits <= bits) {
	              break;
	            }
	            //--- PULLBYTE() ---//
	            if (have === 0) {
	              break inf_leave;
	            }
	            have--;
	            hold += input[next++] << bits;
	            bits += 8;
	            //---//
	          }
	          if (here_val < 16) {
	            //--- DROPBITS(here.bits) ---//
	            hold >>>= here_bits;
	            bits -= here_bits;
	            //---//
	            state.lens[state.have++] = here_val;
	          } else {
	            if (here_val === 16) {
	              //=== NEEDBITS(here.bits + 2);
	              n = here_bits + 2;
	              while (bits < n) {
	                if (have === 0) {
	                  break inf_leave;
	                }
	                have--;
	                hold += input[next++] << bits;
	                bits += 8;
	              }
	              //===//
	              //--- DROPBITS(here.bits) ---//
	              hold >>>= here_bits;
	              bits -= here_bits;
	              //---//
	              if (state.have === 0) {
	                strm.msg = 'invalid bit length repeat';
	                state.mode = BAD;
	                break;
	              }
	              len = state.lens[state.have - 1];
	              copy = 3 + (hold & 0x03); //BITS(2);
	              //--- DROPBITS(2) ---//
	              hold >>>= 2;
	              bits -= 2;
	              //---//
	            } else if (here_val === 17) {
	              //=== NEEDBITS(here.bits + 3);
	              n = here_bits + 3;
	              while (bits < n) {
	                if (have === 0) {
	                  break inf_leave;
	                }
	                have--;
	                hold += input[next++] << bits;
	                bits += 8;
	              }
	              //===//
	              //--- DROPBITS(here.bits) ---//
	              hold >>>= here_bits;
	              bits -= here_bits;
	              //---//
	              len = 0;
	              copy = 3 + (hold & 0x07); //BITS(3);
	              //--- DROPBITS(3) ---//
	              hold >>>= 3;
	              bits -= 3;
	              //---//
	            } else {
	              //=== NEEDBITS(here.bits + 7);
	              n = here_bits + 7;
	              while (bits < n) {
	                if (have === 0) {
	                  break inf_leave;
	                }
	                have--;
	                hold += input[next++] << bits;
	                bits += 8;
	              }
	              //===//
	              //--- DROPBITS(here.bits) ---//
	              hold >>>= here_bits;
	              bits -= here_bits;
	              //---//
	              len = 0;
	              copy = 11 + (hold & 0x7f); //BITS(7);
	              //--- DROPBITS(7) ---//
	              hold >>>= 7;
	              bits -= 7;
	              //---//
	            }
	            if (state.have + copy > state.nlen + state.ndist) {
	              strm.msg = 'invalid bit length repeat';
	              state.mode = BAD;
	              break;
	            }
	            while (copy--) {
	              state.lens[state.have++] = len;
	            }
	          }
	        }
	
	        /* handle error breaks in while */
	        if (state.mode === BAD) {
	          break;
	        }
	
	        /* check for end-of-block code (better have one) */
	        if (state.lens[256] === 0) {
	          strm.msg = 'invalid code -- missing end-of-block';
	          state.mode = BAD;
	          break;
	        }
	
	        /* build code tables -- note: do not change the lenbits or distbits
	           values here (9 and 6) without reading the comments in inftrees.h
	           concerning the ENOUGH constants, which depend on those values */
	        state.lenbits = 9;
	
	        opts = { bits: state.lenbits };
	        ret = inflate_table(LENS, state.lens, 0, state.nlen, state.lencode, 0, state.work, opts);
	        // We have separate tables & no pointers. 2 commented lines below not needed.
	        // state.next_index = opts.table_index;
	        state.lenbits = opts.bits;
	        // state.lencode = state.next;
	
	        if (ret) {
	          strm.msg = 'invalid literal/lengths set';
	          state.mode = BAD;
	          break;
	        }
	
	        state.distbits = 6;
	        //state.distcode.copy(state.codes);
	        // Switch to use dynamic table
	        state.distcode = state.distdyn;
	        opts = { bits: state.distbits };
	        ret = inflate_table(DISTS, state.lens, state.nlen, state.ndist, state.distcode, 0, state.work, opts);
	        // We have separate tables & no pointers. 2 commented lines below not needed.
	        // state.next_index = opts.table_index;
	        state.distbits = opts.bits;
	        // state.distcode = state.next;
	
	        if (ret) {
	          strm.msg = 'invalid distances set';
	          state.mode = BAD;
	          break;
	        }
	        //Tracev((stderr, 'inflate:       codes ok\n'));
	        state.mode = LEN_;
	        if (flush === Z_TREES) {
	          break inf_leave;
	        }
	      /* falls through */
	      case LEN_:
	        state.mode = LEN;
	      /* falls through */
	      case LEN:
	        if (have >= 6 && left >= 258) {
	          //--- RESTORE() ---
	          strm.next_out = put;
	          strm.avail_out = left;
	          strm.next_in = next;
	          strm.avail_in = have;
	          state.hold = hold;
	          state.bits = bits;
	          //---
	          inflate_fast(strm, _out);
	          //--- LOAD() ---
	          put = strm.next_out;
	          output = strm.output;
	          left = strm.avail_out;
	          next = strm.next_in;
	          input = strm.input;
	          have = strm.avail_in;
	          hold = state.hold;
	          bits = state.bits;
	          //---
	
	          if (state.mode === TYPE) {
	            state.back = -1;
	          }
	          break;
	        }
	        state.back = 0;
	        for (;;) {
	          here = state.lencode[hold & (1 << state.lenbits) - 1]; /*BITS(state.lenbits)*/
	          here_bits = here >>> 24;
	          here_op = here >>> 16 & 0xff;
	          here_val = here & 0xffff;
	
	          if (here_bits <= bits) {
	            break;
	          }
	          //--- PULLBYTE() ---//
	          if (have === 0) {
	            break inf_leave;
	          }
	          have--;
	          hold += input[next++] << bits;
	          bits += 8;
	          //---//
	        }
	        if (here_op && (here_op & 0xf0) === 0) {
	          last_bits = here_bits;
	          last_op = here_op;
	          last_val = here_val;
	          for (;;) {
	            here = state.lencode[last_val + ((hold & (1 << last_bits + last_op) - 1) >> /*BITS(last.bits + last.op)*/last_bits)];
	            here_bits = here >>> 24;
	            here_op = here >>> 16 & 0xff;
	            here_val = here & 0xffff;
	
	            if (last_bits + here_bits <= bits) {
	              break;
	            }
	            //--- PULLBYTE() ---//
	            if (have === 0) {
	              break inf_leave;
	            }
	            have--;
	            hold += input[next++] << bits;
	            bits += 8;
	            //---//
	          }
	          //--- DROPBITS(last.bits) ---//
	          hold >>>= last_bits;
	          bits -= last_bits;
	          //---//
	          state.back += last_bits;
	        }
	        //--- DROPBITS(here.bits) ---//
	        hold >>>= here_bits;
	        bits -= here_bits;
	        //---//
	        state.back += here_bits;
	        state.length = here_val;
	        if (here_op === 0) {
	          //Tracevv((stderr, here.val >= 0x20 && here.val < 0x7f ?
	          //        "inflate:         literal '%c'\n" :
	          //        "inflate:         literal 0x%02x\n", here.val));
	          state.mode = LIT;
	          break;
	        }
	        if (here_op & 32) {
	          //Tracevv((stderr, "inflate:         end of block\n"));
	          state.back = -1;
	          state.mode = TYPE;
	          break;
	        }
	        if (here_op & 64) {
	          strm.msg = 'invalid literal/length code';
	          state.mode = BAD;
	          break;
	        }
	        state.extra = here_op & 15;
	        state.mode = LENEXT;
	      /* falls through */
	      case LENEXT:
	        if (state.extra) {
	          //=== NEEDBITS(state.extra);
	          n = state.extra;
	          while (bits < n) {
	            if (have === 0) {
	              break inf_leave;
	            }
	            have--;
	            hold += input[next++] << bits;
	            bits += 8;
	          }
	          //===//
	          state.length += hold & (1 << state.extra) - 1 /*BITS(state.extra)*/;
	          //--- DROPBITS(state.extra) ---//
	          hold >>>= state.extra;
	          bits -= state.extra;
	          //---//
	          state.back += state.extra;
	        }
	        //Tracevv((stderr, "inflate:         length %u\n", state.length));
	        state.was = state.length;
	        state.mode = DIST;
	      /* falls through */
	      case DIST:
	        for (;;) {
	          here = state.distcode[hold & (1 << state.distbits) - 1]; /*BITS(state.distbits)*/
	          here_bits = here >>> 24;
	          here_op = here >>> 16 & 0xff;
	          here_val = here & 0xffff;
	
	          if (here_bits <= bits) {
	            break;
	          }
	          //--- PULLBYTE() ---//
	          if (have === 0) {
	            break inf_leave;
	          }
	          have--;
	          hold += input[next++] << bits;
	          bits += 8;
	          //---//
	        }
	        if ((here_op & 0xf0) === 0) {
	          last_bits = here_bits;
	          last_op = here_op;
	          last_val = here_val;
	          for (;;) {
	            here = state.distcode[last_val + ((hold & (1 << last_bits + last_op) - 1) >> /*BITS(last.bits + last.op)*/last_bits)];
	            here_bits = here >>> 24;
	            here_op = here >>> 16 & 0xff;
	            here_val = here & 0xffff;
	
	            if (last_bits + here_bits <= bits) {
	              break;
	            }
	            //--- PULLBYTE() ---//
	            if (have === 0) {
	              break inf_leave;
	            }
	            have--;
	            hold += input[next++] << bits;
	            bits += 8;
	            //---//
	          }
	          //--- DROPBITS(last.bits) ---//
	          hold >>>= last_bits;
	          bits -= last_bits;
	          //---//
	          state.back += last_bits;
	        }
	        //--- DROPBITS(here.bits) ---//
	        hold >>>= here_bits;
	        bits -= here_bits;
	        //---//
	        state.back += here_bits;
	        if (here_op & 64) {
	          strm.msg = 'invalid distance code';
	          state.mode = BAD;
	          break;
	        }
	        state.offset = here_val;
	        state.extra = here_op & 15;
	        state.mode = DISTEXT;
	      /* falls through */
	      case DISTEXT:
	        if (state.extra) {
	          //=== NEEDBITS(state.extra);
	          n = state.extra;
	          while (bits < n) {
	            if (have === 0) {
	              break inf_leave;
	            }
	            have--;
	            hold += input[next++] << bits;
	            bits += 8;
	          }
	          //===//
	          state.offset += hold & (1 << state.extra) - 1 /*BITS(state.extra)*/;
	          //--- DROPBITS(state.extra) ---//
	          hold >>>= state.extra;
	          bits -= state.extra;
	          //---//
	          state.back += state.extra;
	        }
	        //#ifdef INFLATE_STRICT
	        if (state.offset > state.dmax) {
	          strm.msg = 'invalid distance too far back';
	          state.mode = BAD;
	          break;
	        }
	        //#endif
	        //Tracevv((stderr, "inflate:         distance %u\n", state.offset));
	        state.mode = MATCH;
	      /* falls through */
	      case MATCH:
	        if (left === 0) {
	          break inf_leave;
	        }
	        copy = _out - left;
	        if (state.offset > copy) {
	          /* copy from window */
	          copy = state.offset - copy;
	          if (copy > state.whave) {
	            if (state.sane) {
	              strm.msg = 'invalid distance too far back';
	              state.mode = BAD;
	              break;
	            }
	            // (!) This block is disabled in zlib defailts,
	            // don't enable it for binary compatibility
	            //#ifdef INFLATE_ALLOW_INVALID_DISTANCE_TOOFAR_ARRR
	            //          Trace((stderr, "inflate.c too far\n"));
	            //          copy -= state.whave;
	            //          if (copy > state.length) { copy = state.length; }
	            //          if (copy > left) { copy = left; }
	            //          left -= copy;
	            //          state.length -= copy;
	            //          do {
	            //            output[put++] = 0;
	            //          } while (--copy);
	            //          if (state.length === 0) { state.mode = LEN; }
	            //          break;
	            //#endif
	          }
	          if (copy > state.wnext) {
	            copy -= state.wnext;
	            from = state.wsize - copy;
	          } else {
	            from = state.wnext - copy;
	          }
	          if (copy > state.length) {
	            copy = state.length;
	          }
	          from_source = state.window;
	        } else {
	          /* copy from output */
	          from_source = output;
	          from = put - state.offset;
	          copy = state.length;
	        }
	        if (copy > left) {
	          copy = left;
	        }
	        left -= copy;
	        state.length -= copy;
	        do {
	          output[put++] = from_source[from++];
	        } while (--copy);
	        if (state.length === 0) {
	          state.mode = LEN;
	        }
	        break;
	      case LIT:
	        if (left === 0) {
	          break inf_leave;
	        }
	        output[put++] = state.length;
	        left--;
	        state.mode = LEN;
	        break;
	      case CHECK:
	        if (state.wrap) {
	          //=== NEEDBITS(32);
	          while (bits < 32) {
	            if (have === 0) {
	              break inf_leave;
	            }
	            have--;
	            // Use '|' insdead of '+' to make sure that result is signed
	            hold |= input[next++] << bits;
	            bits += 8;
	          }
	          //===//
	          _out -= left;
	          strm.total_out += _out;
	          state.total += _out;
	          if (_out) {
	            strm.adler = state.check =
	            /*UPDATE(state.check, put - _out, _out);*/
	            state.flags ? crc32(state.check, output, _out, put - _out) : adler32(state.check, output, _out, put - _out);
	          }
	          _out = left;
	          // NB: crc32 stored as signed 32-bit int, zswap32 returns signed too
	          if ((state.flags ? hold : zswap32(hold)) !== state.check) {
	            strm.msg = 'incorrect data check';
	            state.mode = BAD;
	            break;
	          }
	          //=== INITBITS();
	          hold = 0;
	          bits = 0;
	          //===//
	          //Tracev((stderr, "inflate:   check matches trailer\n"));
	        }
	        state.mode = LENGTH;
	      /* falls through */
	      case LENGTH:
	        if (state.wrap && state.flags) {
	          //=== NEEDBITS(32);
	          while (bits < 32) {
	            if (have === 0) {
	              break inf_leave;
	            }
	            have--;
	            hold += input[next++] << bits;
	            bits += 8;
	          }
	          //===//
	          if (hold !== (state.total & 0xffffffff)) {
	            strm.msg = 'incorrect length check';
	            state.mode = BAD;
	            break;
	          }
	          //=== INITBITS();
	          hold = 0;
	          bits = 0;
	          //===//
	          //Tracev((stderr, "inflate:   length matches trailer\n"));
	        }
	        state.mode = DONE;
	      /* falls through */
	      case DONE:
	        ret = Z_STREAM_END;
	        break inf_leave;
	      case BAD:
	        ret = Z_DATA_ERROR;
	        break inf_leave;
	      case MEM:
	        return Z_MEM_ERROR;
	      case SYNC:
	      /* falls through */
	      default:
	        return Z_STREAM_ERROR;
	    }
	  }
	
	  // inf_leave <- here is real place for "goto inf_leave", emulated via "break inf_leave"
	
	  /*
	     Return from inflate(), updating the total counts and the check value.
	     If there was no progress during the inflate() call, return a buffer
	     error.  Call updatewindow() to create and/or update the window state.
	     Note: a memory error from inflate() is non-recoverable.
	   */
	
	  //--- RESTORE() ---
	  strm.next_out = put;
	  strm.avail_out = left;
	  strm.next_in = next;
	  strm.avail_in = have;
	  state.hold = hold;
	  state.bits = bits;
	  //---
	
	  if (state.wsize || _out !== strm.avail_out && state.mode < BAD && (state.mode < CHECK || flush !== Z_FINISH)) {
	    if (updatewindow(strm, strm.output, strm.next_out, _out - strm.avail_out)) {
	      state.mode = MEM;
	      return Z_MEM_ERROR;
	    }
	  }
	  _in -= strm.avail_in;
	  _out -= strm.avail_out;
	  strm.total_in += _in;
	  strm.total_out += _out;
	  state.total += _out;
	  if (state.wrap && _out) {
	    strm.adler = state.check = /*UPDATE(state.check, strm.next_out - _out, _out);*/
	    state.flags ? crc32(state.check, output, _out, strm.next_out - _out) : adler32(state.check, output, _out, strm.next_out - _out);
	  }
	  strm.data_type = state.bits + (state.last ? 64 : 0) + (state.mode === TYPE ? 128 : 0) + (state.mode === LEN_ || state.mode === COPY_ ? 256 : 0);
	  if ((_in === 0 && _out === 0 || flush === Z_FINISH) && ret === Z_OK) {
	    ret = Z_BUF_ERROR;
	  }
	  return ret;
	}
	
	function inflateEnd(strm) {
	
	  if (!strm || !strm.state /*|| strm->zfree == (free_func)0*/) {
	      return Z_STREAM_ERROR;
	    }
	
	  var state = strm.state;
	  if (state.window) {
	    state.window = null;
	  }
	  strm.state = null;
	  return Z_OK;
	}
	
	function inflateGetHeader(strm, head) {
	  var state;
	
	  /* check state */
	  if (!strm || !strm.state) {
	    return Z_STREAM_ERROR;
	  }
	  state = strm.state;
	  if ((state.wrap & 2) === 0) {
	    return Z_STREAM_ERROR;
	  }
	
	  /* save header structure */
	  state.head = head;
	  head.done = false;
	  return Z_OK;
	}
	
	function inflateSetDictionary(strm, dictionary) {
	  var dictLength = dictionary.length;
	
	  var state;
	  var dictid;
	  var ret;
	
	  /* check state */
	  if (!strm /* == Z_NULL */ || !strm.state /* == Z_NULL */) {
	      return Z_STREAM_ERROR;
	    }
	  state = strm.state;
	
	  if (state.wrap !== 0 && state.mode !== DICT) {
	    return Z_STREAM_ERROR;
	  }
	
	  /* check for correct dictionary identifier */
	  if (state.mode === DICT) {
	    dictid = 1; /* adler32(0, null, 0)*/
	    /* dictid = adler32(dictid, dictionary, dictLength); */
	    dictid = adler32(dictid, dictionary, dictLength, 0);
	    if (dictid !== state.check) {
	      return Z_DATA_ERROR;
	    }
	  }
	  /* copy dictionary to window using updatewindow(), which will amend the
	   existing dictionary if appropriate */
	  ret = updatewindow(strm, dictionary, dictLength, dictLength);
	  if (ret) {
	    state.mode = MEM;
	    return Z_MEM_ERROR;
	  }
	  state.havedict = 1;
	  // Tracev((stderr, "inflate:   dictionary set\n"));
	  return Z_OK;
	}
	
	exports.inflateReset = inflateReset;
	exports.inflateReset2 = inflateReset2;
	exports.inflateResetKeep = inflateResetKeep;
	exports.inflateInit = inflateInit;
	exports.inflateInit2 = inflateInit2;
	exports.inflate = inflate;
	exports.inflateEnd = inflateEnd;
	exports.inflateGetHeader = inflateGetHeader;
	exports.inflateSetDictionary = inflateSetDictionary;
	exports.inflateInfo = 'pako inflate (from Nodeca project)';
	
	/* Not implemented
	exports.inflateCopy = inflateCopy;
	exports.inflateGetDictionary = inflateGetDictionary;
	exports.inflateMark = inflateMark;
	exports.inflatePrime = inflatePrime;
	exports.inflateSync = inflateSync;
	exports.inflateSyncPoint = inflateSyncPoint;
	exports.inflateUndermine = inflateUndermine;
	*/

/***/ }),
/* 431 */
/***/ (function(module, exports) {

	'use strict';
	
	// See state defs from inflate.js
	
	var BAD = 30; /* got a data error -- remain here until reset */
	var TYPE = 12; /* i: waiting for type bits, including last-flag bit */
	
	/*
	   Decode literal, length, and distance codes and write out the resulting
	   literal and match bytes until either not enough input or output is
	   available, an end-of-block is encountered, or a data error is encountered.
	   When large enough input and output buffers are supplied to inflate(), for
	   example, a 16K input buffer and a 64K output buffer, more than 95% of the
	   inflate execution time is spent in this routine.
	
	   Entry assumptions:
	
	        state.mode === LEN
	        strm.avail_in >= 6
	        strm.avail_out >= 258
	        start >= strm.avail_out
	        state.bits < 8
	
	   On return, state.mode is one of:
	
	        LEN -- ran out of enough output space or enough available input
	        TYPE -- reached end of block code, inflate() to interpret next block
	        BAD -- error in block data
	
	   Notes:
	
	    - The maximum input bits used by a length/distance pair is 15 bits for the
	      length code, 5 bits for the length extra, 15 bits for the distance code,
	      and 13 bits for the distance extra.  This totals 48 bits, or six bytes.
	      Therefore if strm.avail_in >= 6, then there is enough input to avoid
	      checking for available input while decoding.
	
	    - The maximum bytes that a single length/distance pair can output is 258
	      bytes, which is the maximum length that can be coded.  inflate_fast()
	      requires strm.avail_out >= 258 for each loop to avoid checking for
	      output space.
	 */
	module.exports = function inflate_fast(strm, start) {
	  var state;
	  var _in; /* local strm.input */
	  var last; /* have enough input while in < last */
	  var _out; /* local strm.output */
	  var beg; /* inflate()'s initial strm.output */
	  var end; /* while out < end, enough space available */
	  //#ifdef INFLATE_STRICT
	  var dmax; /* maximum distance from zlib header */
	  //#endif
	  var wsize; /* window size or zero if not using window */
	  var whave; /* valid bytes in the window */
	  var wnext; /* window write index */
	  // Use `s_window` instead `window`, avoid conflict with instrumentation tools
	  var s_window; /* allocated sliding window, if wsize != 0 */
	  var hold; /* local strm.hold */
	  var bits; /* local strm.bits */
	  var lcode; /* local strm.lencode */
	  var dcode; /* local strm.distcode */
	  var lmask; /* mask for first level of length codes */
	  var dmask; /* mask for first level of distance codes */
	  var here; /* retrieved table entry */
	  var op; /* code bits, operation, extra bits, or */
	  /*  window position, window bytes to copy */
	  var len; /* match length, unused bytes */
	  var dist; /* match distance */
	  var from; /* where to copy match from */
	  var from_source;
	
	  var input, output; // JS specific, because we have no pointers
	
	  /* copy state to local variables */
	  state = strm.state;
	  //here = state.here;
	  _in = strm.next_in;
	  input = strm.input;
	  last = _in + (strm.avail_in - 5);
	  _out = strm.next_out;
	  output = strm.output;
	  beg = _out - (start - strm.avail_out);
	  end = _out + (strm.avail_out - 257);
	  //#ifdef INFLATE_STRICT
	  dmax = state.dmax;
	  //#endif
	  wsize = state.wsize;
	  whave = state.whave;
	  wnext = state.wnext;
	  s_window = state.window;
	  hold = state.hold;
	  bits = state.bits;
	  lcode = state.lencode;
	  dcode = state.distcode;
	  lmask = (1 << state.lenbits) - 1;
	  dmask = (1 << state.distbits) - 1;
	
	  /* decode literals and length/distances until end-of-block or not enough
	     input data or output space */
	
	  top: do {
	    if (bits < 15) {
	      hold += input[_in++] << bits;
	      bits += 8;
	      hold += input[_in++] << bits;
	      bits += 8;
	    }
	
	    here = lcode[hold & lmask];
	
	    dolen: for (;;) {
	      // Goto emulation
	      op = here >>> 24 /*here.bits*/;
	      hold >>>= op;
	      bits -= op;
	      op = here >>> 16 & 0xff /*here.op*/;
	      if (op === 0) {
	        /* literal */
	        //Tracevv((stderr, here.val >= 0x20 && here.val < 0x7f ?
	        //        "inflate:         literal '%c'\n" :
	        //        "inflate:         literal 0x%02x\n", here.val));
	        output[_out++] = here & 0xffff /*here.val*/;
	      } else if (op & 16) {
	        /* length base */
	        len = here & 0xffff /*here.val*/;
	        op &= 15; /* number of extra bits */
	        if (op) {
	          if (bits < op) {
	            hold += input[_in++] << bits;
	            bits += 8;
	          }
	          len += hold & (1 << op) - 1;
	          hold >>>= op;
	          bits -= op;
	        }
	        //Tracevv((stderr, "inflate:         length %u\n", len));
	        if (bits < 15) {
	          hold += input[_in++] << bits;
	          bits += 8;
	          hold += input[_in++] << bits;
	          bits += 8;
	        }
	        here = dcode[hold & dmask];
	
	        dodist: for (;;) {
	          // goto emulation
	          op = here >>> 24 /*here.bits*/;
	          hold >>>= op;
	          bits -= op;
	          op = here >>> 16 & 0xff /*here.op*/;
	
	          if (op & 16) {
	            /* distance base */
	            dist = here & 0xffff /*here.val*/;
	            op &= 15; /* number of extra bits */
	            if (bits < op) {
	              hold += input[_in++] << bits;
	              bits += 8;
	              if (bits < op) {
	                hold += input[_in++] << bits;
	                bits += 8;
	              }
	            }
	            dist += hold & (1 << op) - 1;
	            //#ifdef INFLATE_STRICT
	            if (dist > dmax) {
	              strm.msg = 'invalid distance too far back';
	              state.mode = BAD;
	              break top;
	            }
	            //#endif
	            hold >>>= op;
	            bits -= op;
	            //Tracevv((stderr, "inflate:         distance %u\n", dist));
	            op = _out - beg; /* max distance in output */
	            if (dist > op) {
	              /* see if copy from window */
	              op = dist - op; /* distance back in window */
	              if (op > whave) {
	                if (state.sane) {
	                  strm.msg = 'invalid distance too far back';
	                  state.mode = BAD;
	                  break top;
	                }
	
	                // (!) This block is disabled in zlib defailts,
	                // don't enable it for binary compatibility
	                //#ifdef INFLATE_ALLOW_INVALID_DISTANCE_TOOFAR_ARRR
	                //                if (len <= op - whave) {
	                //                  do {
	                //                    output[_out++] = 0;
	                //                  } while (--len);
	                //                  continue top;
	                //                }
	                //                len -= op - whave;
	                //                do {
	                //                  output[_out++] = 0;
	                //                } while (--op > whave);
	                //                if (op === 0) {
	                //                  from = _out - dist;
	                //                  do {
	                //                    output[_out++] = output[from++];
	                //                  } while (--len);
	                //                  continue top;
	                //                }
	                //#endif
	              }
	              from = 0; // window index
	              from_source = s_window;
	              if (wnext === 0) {
	                /* very common case */
	                from += wsize - op;
	                if (op < len) {
	                  /* some from window */
	                  len -= op;
	                  do {
	                    output[_out++] = s_window[from++];
	                  } while (--op);
	                  from = _out - dist; /* rest from output */
	                  from_source = output;
	                }
	              } else if (wnext < op) {
	                /* wrap around window */
	                from += wsize + wnext - op;
	                op -= wnext;
	                if (op < len) {
	                  /* some from end of window */
	                  len -= op;
	                  do {
	                    output[_out++] = s_window[from++];
	                  } while (--op);
	                  from = 0;
	                  if (wnext < len) {
	                    /* some from start of window */
	                    op = wnext;
	                    len -= op;
	                    do {
	                      output[_out++] = s_window[from++];
	                    } while (--op);
	                    from = _out - dist; /* rest from output */
	                    from_source = output;
	                  }
	                }
	              } else {
	                /* contiguous in window */
	                from += wnext - op;
	                if (op < len) {
	                  /* some from window */
	                  len -= op;
	                  do {
	                    output[_out++] = s_window[from++];
	                  } while (--op);
	                  from = _out - dist; /* rest from output */
	                  from_source = output;
	                }
	              }
	              while (len > 2) {
	                output[_out++] = from_source[from++];
	                output[_out++] = from_source[from++];
	                output[_out++] = from_source[from++];
	                len -= 3;
	              }
	              if (len) {
	                output[_out++] = from_source[from++];
	                if (len > 1) {
	                  output[_out++] = from_source[from++];
	                }
	              }
	            } else {
	              from = _out - dist; /* copy direct from output */
	              do {
	                /* minimum length is three */
	                output[_out++] = output[from++];
	                output[_out++] = output[from++];
	                output[_out++] = output[from++];
	                len -= 3;
	              } while (len > 2);
	              if (len) {
	                output[_out++] = output[from++];
	                if (len > 1) {
	                  output[_out++] = output[from++];
	                }
	              }
	            }
	          } else if ((op & 64) === 0) {
	            /* 2nd level distance code */
	            here = dcode[(here & 0xffff) + ( /*here.val*/hold & (1 << op) - 1)];
	            continue dodist;
	          } else {
	            strm.msg = 'invalid distance code';
	            state.mode = BAD;
	            break top;
	          }
	
	          break; // need to emulate goto via "continue"
	        }
	      } else if ((op & 64) === 0) {
	        /* 2nd level length code */
	        here = lcode[(here & 0xffff) + ( /*here.val*/hold & (1 << op) - 1)];
	        continue dolen;
	      } else if (op & 32) {
	        /* end-of-block */
	        //Tracevv((stderr, "inflate:         end of block\n"));
	        state.mode = TYPE;
	        break top;
	      } else {
	        strm.msg = 'invalid literal/length code';
	        state.mode = BAD;
	        break top;
	      }
	
	      break; // need to emulate goto via "continue"
	    }
	  } while (_in < last && _out < end);
	
	  /* return unused bytes (on entry, bits < 8, so in won't go too far back) */
	  len = bits >> 3;
	  _in -= len;
	  bits -= len << 3;
	  hold &= (1 << bits) - 1;
	
	  /* update state and return */
	  strm.next_in = _in;
	  strm.next_out = _out;
	  strm.avail_in = _in < last ? 5 + (last - _in) : 5 - (_in - last);
	  strm.avail_out = _out < end ? 257 + (end - _out) : 257 - (_out - end);
	  state.hold = hold;
	  state.bits = bits;
	  return;
	};

/***/ }),
/* 432 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var utils = __webpack_require__(426);
	
	var MAXBITS = 15;
	var ENOUGH_LENS = 852;
	var ENOUGH_DISTS = 592;
	//var ENOUGH = (ENOUGH_LENS+ENOUGH_DISTS);
	
	var CODES = 0;
	var LENS = 1;
	var DISTS = 2;
	
	var lbase = [/* Length codes 257..285 base */
	3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 15, 17, 19, 23, 27, 31, 35, 43, 51, 59, 67, 83, 99, 115, 131, 163, 195, 227, 258, 0, 0];
	
	var lext = [/* Length codes 257..285 extra */
	16, 16, 16, 16, 16, 16, 16, 16, 17, 17, 17, 17, 18, 18, 18, 18, 19, 19, 19, 19, 20, 20, 20, 20, 21, 21, 21, 21, 16, 72, 78];
	
	var dbase = [/* Distance codes 0..29 base */
	1, 2, 3, 4, 5, 7, 9, 13, 17, 25, 33, 49, 65, 97, 129, 193, 257, 385, 513, 769, 1025, 1537, 2049, 3073, 4097, 6145, 8193, 12289, 16385, 24577, 0, 0];
	
	var dext = [/* Distance codes 0..29 extra */
	16, 16, 16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 21, 21, 22, 22, 23, 23, 24, 24, 25, 25, 26, 26, 27, 27, 28, 28, 29, 29, 64, 64];
	
	module.exports = function inflate_table(type, lens, lens_index, codes, table, table_index, work, opts) {
	  var bits = opts.bits;
	  //here = opts.here; /* table entry for duplication */
	
	  var len = 0; /* a code's length in bits */
	  var sym = 0; /* index of code symbols */
	  var min = 0,
	      max = 0; /* minimum and maximum code lengths */
	  var root = 0; /* number of index bits for root table */
	  var curr = 0; /* number of index bits for current table */
	  var drop = 0; /* code bits to drop for sub-table */
	  var left = 0; /* number of prefix codes available */
	  var used = 0; /* code entries in table used */
	  var huff = 0; /* Huffman code */
	  var incr; /* for incrementing code, index */
	  var fill; /* index for replicating entries */
	  var low; /* low bits for current root entry */
	  var mask; /* mask for low root bits */
	  var next; /* next available space in table */
	  var base = null; /* base value table to use */
	  var base_index = 0;
	  //  var shoextra;    /* extra bits table to use */
	  var end; /* use base and extra for symbol > end */
	  var count = new utils.Buf16(MAXBITS + 1); //[MAXBITS+1];    /* number of codes of each length */
	  var offs = new utils.Buf16(MAXBITS + 1); //[MAXBITS+1];     /* offsets in table for each length */
	  var extra = null;
	  var extra_index = 0;
	
	  var here_bits, here_op, here_val;
	
	  /*
	   Process a set of code lengths to create a canonical Huffman code.  The
	   code lengths are lens[0..codes-1].  Each length corresponds to the
	   symbols 0..codes-1.  The Huffman code is generated by first sorting the
	   symbols by length from short to long, and retaining the symbol order
	   for codes with equal lengths.  Then the code starts with all zero bits
	   for the first code of the shortest length, and the codes are integer
	   increments for the same length, and zeros are appended as the length
	   increases.  For the deflate format, these bits are stored backwards
	   from their more natural integer increment ordering, and so when the
	   decoding tables are built in the large loop below, the integer codes
	   are incremented backwards.
	    This routine assumes, but does not check, that all of the entries in
	   lens[] are in the range 0..MAXBITS.  The caller must assure this.
	   1..MAXBITS is interpreted as that code length.  zero means that that
	   symbol does not occur in this code.
	    The codes are sorted by computing a count of codes for each length,
	   creating from that a table of starting indices for each length in the
	   sorted table, and then entering the symbols in order in the sorted
	   table.  The sorted table is work[], with that space being provided by
	   the caller.
	    The length counts are used for other purposes as well, i.e. finding
	   the minimum and maximum length codes, determining if there are any
	   codes at all, checking for a valid set of lengths, and looking ahead
	   at length counts to determine sub-table sizes when building the
	   decoding tables.
	   */
	
	  /* accumulate lengths for codes (assumes lens[] all in 0..MAXBITS) */
	  for (len = 0; len <= MAXBITS; len++) {
	    count[len] = 0;
	  }
	  for (sym = 0; sym < codes; sym++) {
	    count[lens[lens_index + sym]]++;
	  }
	
	  /* bound code lengths, force root to be within code lengths */
	  root = bits;
	  for (max = MAXBITS; max >= 1; max--) {
	    if (count[max] !== 0) {
	      break;
	    }
	  }
	  if (root > max) {
	    root = max;
	  }
	  if (max === 0) {
	    /* no symbols to code at all */
	    //table.op[opts.table_index] = 64;  //here.op = (var char)64;    /* invalid code marker */
	    //table.bits[opts.table_index] = 1;   //here.bits = (var char)1;
	    //table.val[opts.table_index++] = 0;   //here.val = (var short)0;
	    table[table_index++] = 1 << 24 | 64 << 16 | 0;
	
	    //table.op[opts.table_index] = 64;
	    //table.bits[opts.table_index] = 1;
	    //table.val[opts.table_index++] = 0;
	    table[table_index++] = 1 << 24 | 64 << 16 | 0;
	
	    opts.bits = 1;
	    return 0; /* no symbols, but wait for decoding to report error */
	  }
	  for (min = 1; min < max; min++) {
	    if (count[min] !== 0) {
	      break;
	    }
	  }
	  if (root < min) {
	    root = min;
	  }
	
	  /* check for an over-subscribed or incomplete set of lengths */
	  left = 1;
	  for (len = 1; len <= MAXBITS; len++) {
	    left <<= 1;
	    left -= count[len];
	    if (left < 0) {
	      return -1;
	    } /* over-subscribed */
	  }
	  if (left > 0 && (type === CODES || max !== 1)) {
	    return -1; /* incomplete set */
	  }
	
	  /* generate offsets into symbol table for each length for sorting */
	  offs[1] = 0;
	  for (len = 1; len < MAXBITS; len++) {
	    offs[len + 1] = offs[len] + count[len];
	  }
	
	  /* sort symbols by length, by symbol order within each length */
	  for (sym = 0; sym < codes; sym++) {
	    if (lens[lens_index + sym] !== 0) {
	      work[offs[lens[lens_index + sym]]++] = sym;
	    }
	  }
	
	  /*
	   Create and fill in decoding tables.  In this loop, the table being
	   filled is at next and has curr index bits.  The code being used is huff
	   with length len.  That code is converted to an index by dropping drop
	   bits off of the bottom.  For codes where len is less than drop + curr,
	   those top drop + curr - len bits are incremented through all values to
	   fill the table with replicated entries.
	    root is the number of index bits for the root table.  When len exceeds
	   root, sub-tables are created pointed to by the root entry with an index
	   of the low root bits of huff.  This is saved in low to check for when a
	   new sub-table should be started.  drop is zero when the root table is
	   being filled, and drop is root when sub-tables are being filled.
	    When a new sub-table is needed, it is necessary to look ahead in the
	   code lengths to determine what size sub-table is needed.  The length
	   counts are used for this, and so count[] is decremented as codes are
	   entered in the tables.
	    used keeps track of how many table entries have been allocated from the
	   provided *table space.  It is checked for LENS and DIST tables against
	   the constants ENOUGH_LENS and ENOUGH_DISTS to guard against changes in
	   the initial root table size constants.  See the comments in inftrees.h
	   for more information.
	    sym increments through all symbols, and the loop terminates when
	   all codes of length max, i.e. all codes, have been processed.  This
	   routine permits incomplete codes, so another loop after this one fills
	   in the rest of the decoding tables with invalid code markers.
	   */
	
	  /* set up for code type */
	  // poor man optimization - use if-else instead of switch,
	  // to avoid deopts in old v8
	  if (type === CODES) {
	    base = extra = work; /* dummy value--not used */
	    end = 19;
	  } else if (type === LENS) {
	    base = lbase;
	    base_index -= 257;
	    extra = lext;
	    extra_index -= 257;
	    end = 256;
	  } else {
	    /* DISTS */
	    base = dbase;
	    extra = dext;
	    end = -1;
	  }
	
	  /* initialize opts for loop */
	  huff = 0; /* starting code */
	  sym = 0; /* starting code symbol */
	  len = min; /* starting code length */
	  next = table_index; /* current table to fill in */
	  curr = root; /* current table index bits */
	  drop = 0; /* current bits to drop from code for index */
	  low = -1; /* trigger new sub-table when len > root */
	  used = 1 << root; /* use root table entries */
	  mask = used - 1; /* mask for comparing low */
	
	  /* check available table space */
	  if (type === LENS && used > ENOUGH_LENS || type === DISTS && used > ENOUGH_DISTS) {
	    return 1;
	  }
	
	  var i = 0;
	  /* process all codes and make table entries */
	  for (;;) {
	    i++;
	    /* create table entry */
	    here_bits = len - drop;
	    if (work[sym] < end) {
	      here_op = 0;
	      here_val = work[sym];
	    } else if (work[sym] > end) {
	      here_op = extra[extra_index + work[sym]];
	      here_val = base[base_index + work[sym]];
	    } else {
	      here_op = 32 + 64; /* end of block */
	      here_val = 0;
	    }
	
	    /* replicate for those indices with low len bits equal to huff */
	    incr = 1 << len - drop;
	    fill = 1 << curr;
	    min = fill; /* save offset to next table */
	    do {
	      fill -= incr;
	      table[next + (huff >> drop) + fill] = here_bits << 24 | here_op << 16 | here_val | 0;
	    } while (fill !== 0);
	
	    /* backwards increment the len-bit code huff */
	    incr = 1 << len - 1;
	    while (huff & incr) {
	      incr >>= 1;
	    }
	    if (incr !== 0) {
	      huff &= incr - 1;
	      huff += incr;
	    } else {
	      huff = 0;
	    }
	
	    /* go to next symbol, update count, len */
	    sym++;
	    if (--count[len] === 0) {
	      if (len === max) {
	        break;
	      }
	      len = lens[lens_index + work[sym]];
	    }
	
	    /* create new sub-table if needed */
	    if (len > root && (huff & mask) !== low) {
	      /* if first time, transition to sub-tables */
	      if (drop === 0) {
	        drop = root;
	      }
	
	      /* increment past last table */
	      next += min; /* here min is 1 << curr */
	
	      /* determine length of next table */
	      curr = len - drop;
	      left = 1 << curr;
	      while (curr + drop < max) {
	        left -= count[curr + drop];
	        if (left <= 0) {
	          break;
	        }
	        curr++;
	        left <<= 1;
	      }
	
	      /* check for enough space */
	      used += 1 << curr;
	      if (type === LENS && used > ENOUGH_LENS || type === DISTS && used > ENOUGH_DISTS) {
	        return 1;
	      }
	
	      /* point entry in root table to sub-table */
	      low = huff & mask;
	      /*table.op[low] = curr;
	      table.bits[low] = root;
	      table.val[low] = next - opts.table_index;*/
	      table[low] = root << 24 | curr << 16 | next - table_index | 0;
	    }
	  }
	
	  /* fill in remaining table entry if code is incomplete (guaranteed to have
	   at most one remaining entry, since if the code is incomplete, the
	   maximum code length that was allowed to get this far is one bit) */
	  if (huff !== 0) {
	    //table.op[next + huff] = 64;            /* invalid code marker */
	    //table.bits[next + huff] = len - drop;
	    //table.val[next + huff] = 0;
	    table[next + huff] = len - drop << 24 | 64 << 16 | 0;
	  }
	
	  /* set return parameters */
	  //opts.table_index += used;
	  opts.bits = root;
	  return 0;
	};

/***/ }),
/* 433 */
/***/ (function(module, exports) {

	'use strict';
	
	module.exports = {
	
	  /* Allowed flush values; see deflate() and inflate() below for details */
	  Z_NO_FLUSH: 0,
	  Z_PARTIAL_FLUSH: 1,
	  Z_SYNC_FLUSH: 2,
	  Z_FULL_FLUSH: 3,
	  Z_FINISH: 4,
	  Z_BLOCK: 5,
	  Z_TREES: 6,
	
	  /* Return codes for the compression/decompression functions. Negative values
	  * are errors, positive values are used for special but normal events.
	  */
	  Z_OK: 0,
	  Z_STREAM_END: 1,
	  Z_NEED_DICT: 2,
	  Z_ERRNO: -1,
	  Z_STREAM_ERROR: -2,
	  Z_DATA_ERROR: -3,
	  //Z_MEM_ERROR:     -4,
	  Z_BUF_ERROR: -5,
	  //Z_VERSION_ERROR: -6,
	
	  /* compression levels */
	  Z_NO_COMPRESSION: 0,
	  Z_BEST_SPEED: 1,
	  Z_BEST_COMPRESSION: 9,
	  Z_DEFAULT_COMPRESSION: -1,
	
	  Z_FILTERED: 1,
	  Z_HUFFMAN_ONLY: 2,
	  Z_RLE: 3,
	  Z_FIXED: 4,
	  Z_DEFAULT_STRATEGY: 0,
	
	  /* Possible values of the data_type field (though see inflate()) */
	  Z_BINARY: 0,
	  Z_TEXT: 1,
	  //Z_ASCII:                1, // = Z_TEXT (deprecated)
	  Z_UNKNOWN: 2,
	
	  /* The deflate compression method */
	  Z_DEFLATED: 8
	  //Z_NULL:                 null // Use -1 or null inline, depending on var type
	};

/***/ }),
/* 434 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	exports.Abstract = __webpack_require__(435);
	exports.Reader = __webpack_require__(436);
	exports.Writer = __webpack_require__(443);
	
	exports.File = {
	  Reader: __webpack_require__(440),
	  Writer: __webpack_require__(447)
	};
	
	exports.Dir = {
	  Reader: __webpack_require__(439),
	  Writer: __webpack_require__(444)
	};
	
	exports.Link = {
	  Reader: __webpack_require__(438),
	  Writer: __webpack_require__(446)
	};
	
	exports.Proxy = {
	  Reader: __webpack_require__(442),
	  Writer: __webpack_require__(448)
	};
	
	exports.Reader.Dir = exports.DirReader = exports.Dir.Reader;
	exports.Reader.File = exports.FileReader = exports.File.Reader;
	exports.Reader.Link = exports.LinkReader = exports.Link.Reader;
	exports.Reader.Proxy = exports.ProxyReader = exports.Proxy.Reader;
	
	exports.Writer.Dir = exports.DirWriter = exports.Dir.Writer;
	exports.Writer.File = exports.FileWriter = exports.File.Writer;
	exports.Writer.Link = exports.LinkWriter = exports.Link.Writer;
	exports.Writer.Proxy = exports.ProxyWriter = exports.Proxy.Writer;
	
	exports.collect = __webpack_require__(445);

/***/ }),
/* 435 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';
	
	// the parent class for all fstreams.
	
	module.exports = Abstract;
	
	var Stream = __webpack_require__(282).Stream;
	var inherits = __webpack_require__(284);
	
	function Abstract() {
	  Stream.call(this);
	}
	
	inherits(Abstract, Stream);
	
	Abstract.prototype.on = function (ev, fn) {
	  if (ev === 'ready' && this.ready) {
	    process.nextTick(fn.bind(this));
	  } else {
	    Stream.prototype.on.call(this, ev, fn);
	  }
	  return this;
	};
	
	Abstract.prototype.abort = function () {
	  this._aborted = true;
	  this.emit('abort');
	};
	
	Abstract.prototype.destroy = function () {};
	
	Abstract.prototype.warn = function (msg, code) {
	  var self = this;
	  var er = decorate(msg, code, self);
	  if (!self.listeners('warn')) {
	    console.error('%s %s\n' + 'path = %s\n' + 'syscall = %s\n' + 'fstream_type = %s\n' + 'fstream_path = %s\n' + 'fstream_unc_path = %s\n' + 'fstream_class = %s\n' + 'fstream_stack =\n%s\n', code || 'UNKNOWN', er.stack, er.path, er.syscall, er.fstream_type, er.fstream_path, er.fstream_unc_path, er.fstream_class, er.fstream_stack.join('\n'));
	  } else {
	    self.emit('warn', er);
	  }
	};
	
	Abstract.prototype.info = function (msg, code) {
	  this.emit('info', msg, code);
	};
	
	Abstract.prototype.error = function (msg, code, th) {
	  var er = decorate(msg, code, this);
	  if (th) throw er;else this.emit('error', er);
	};
	
	function decorate(er, code, self) {
	  if (!(er instanceof Error)) er = new Error(er);
	  er.code = er.code || code;
	  er.path = er.path || self.path;
	  er.fstream_type = er.fstream_type || self.type;
	  er.fstream_path = er.fstream_path || self.path;
	  if (self._path !== self.path) {
	    er.fstream_unc_path = er.fstream_unc_path || self._path;
	  }
	  if (self.linkpath) {
	    er.fstream_linkpath = er.fstream_linkpath || self.linkpath;
	  }
	  er.fstream_class = er.fstream_class || self.constructor.name;
	  er.fstream_stack = er.fstream_stack || new Error().stack.split(/\n/).slice(3).map(function (s) {
	    return s.replace(/^ {4}at /, '');
	  });
	
	  return er;
	}
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ }),
/* 436 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';
	
	module.exports = Reader;
	
	var fs = __webpack_require__(354);
	var Stream = __webpack_require__(282).Stream;
	var inherits = __webpack_require__(284);
	var path = __webpack_require__(270);
	var getType = __webpack_require__(437);
	var hardLinks = Reader.hardLinks = {};
	var Abstract = __webpack_require__(435);
	
	// Must do this *before* loading the child classes
	inherits(Reader, Abstract);
	
	var LinkReader = __webpack_require__(438);
	
	function Reader(props, currentStat) {
	  var self = this;
	  if (!(self instanceof Reader)) return new Reader(props, currentStat);
	
	  if (typeof props === 'string') {
	    props = { path: props };
	  }
	
	  // polymorphism.
	  // call fstream.Reader(dir) to get a DirReader object, etc.
	  // Note that, unlike in the Writer case, ProxyReader is going
	  // to be the *normal* state of affairs, since we rarely know
	  // the type of a file prior to reading it.
	
	  var type;
	  var ClassType;
	
	  if (props.type && typeof props.type === 'function') {
	    type = props.type;
	    ClassType = type;
	  } else {
	    type = getType(props);
	    ClassType = Reader;
	  }
	
	  if (currentStat && !type) {
	    type = getType(currentStat);
	    props[type] = true;
	    props.type = type;
	  }
	
	  switch (type) {
	    case 'Directory':
	      ClassType = __webpack_require__(439);
	      break;
	
	    case 'Link':
	    // XXX hard links are just files.
	    // However, it would be good to keep track of files' dev+inode
	    // and nlink values, and create a HardLinkReader that emits
	    // a linkpath value of the original copy, so that the tar
	    // writer can preserve them.
	    // ClassType = HardLinkReader
	    // break
	
	    case 'File':
	      ClassType = __webpack_require__(440);
	      break;
	
	    case 'SymbolicLink':
	      ClassType = LinkReader;
	      break;
	
	    case 'Socket':
	      ClassType = __webpack_require__(441);
	      break;
	
	    case null:
	      ClassType = __webpack_require__(442);
	      break;
	  }
	
	  if (!(self instanceof ClassType)) {
	    return new ClassType(props);
	  }
	
	  Abstract.call(self);
	
	  if (!props.path) {
	    self.error('Must provide a path', null, true);
	  }
	
	  self.readable = true;
	  self.writable = false;
	
	  self.type = type;
	  self.props = props;
	  self.depth = props.depth = props.depth || 0;
	  self.parent = props.parent || null;
	  self.root = props.root || props.parent && props.parent.root || self;
	
	  self._path = self.path = path.resolve(props.path);
	  if (process.platform === 'win32') {
	    self.path = self._path = self.path.replace(/\?/g, '_');
	    if (self._path.length >= 260) {
	      // how DOES one create files on the moon?
	      // if the path has spaces in it, then UNC will fail.
	      self._swallowErrors = true;
	      // if (self._path.indexOf(" ") === -1) {
	      self._path = '\\\\?\\' + self.path.replace(/\//g, '\\');
	      // }
	    }
	  }
	  self.basename = props.basename = path.basename(self.path);
	  self.dirname = props.dirname = path.dirname(self.path);
	
	  // these have served their purpose, and are now just noisy clutter
	  props.parent = props.root = null;
	
	  // console.error("\n\n\n%s setting size to", props.path, props.size)
	  self.size = props.size;
	  self.filter = typeof props.filter === 'function' ? props.filter : null;
	  if (props.sort === 'alpha') props.sort = alphasort;
	
	  // start the ball rolling.
	  // this will stat the thing, and then call self._read()
	  // to start reading whatever it is.
	  // console.error("calling stat", props.path, currentStat)
	  self._stat(currentStat);
	}
	
	function alphasort(a, b) {
	  return a === b ? 0 : a.toLowerCase() > b.toLowerCase() ? 1 : a.toLowerCase() < b.toLowerCase() ? -1 : a > b ? 1 : -1;
	}
	
	Reader.prototype._stat = function (currentStat) {
	  var self = this;
	  var props = self.props;
	  var stat = props.follow ? 'stat' : 'lstat';
	  // console.error("Reader._stat", self._path, currentStat)
	  if (currentStat) process.nextTick(statCb.bind(null, null, currentStat));else fs[stat](self._path, statCb);
	
	  function statCb(er, props_) {
	    // console.error("Reader._stat, statCb", self._path, props_, props_.nlink)
	    if (er) return self.error(er);
	
	    Object.keys(props_).forEach(function (k) {
	      props[k] = props_[k];
	    });
	
	    // if it's not the expected size, then abort here.
	    if (undefined !== self.size && props.size !== self.size) {
	      return self.error('incorrect size');
	    }
	    self.size = props.size;
	
	    var type = getType(props);
	    var handleHardlinks = props.hardlinks !== false;
	
	    // special little thing for handling hardlinks.
	    if (handleHardlinks && type !== 'Directory' && props.nlink && props.nlink > 1) {
	      var k = props.dev + ':' + props.ino;
	      // console.error("Reader has nlink", self._path, k)
	      if (hardLinks[k] === self._path || !hardLinks[k]) {
	        hardLinks[k] = self._path;
	      } else {
	        // switch into hardlink mode.
	        type = self.type = self.props.type = 'Link';
	        self.Link = self.props.Link = true;
	        self.linkpath = self.props.linkpath = hardLinks[k];
	        // console.error("Hardlink detected, switching mode", self._path, self.linkpath)
	        // Setting __proto__ would arguably be the "correct"
	        // approach here, but that just seems too wrong.
	        self._stat = self._read = LinkReader.prototype._read;
	      }
	    }
	
	    if (self.type && self.type !== type) {
	      self.error('Unexpected type: ' + type);
	    }
	
	    // if the filter doesn't pass, then just skip over this one.
	    // still have to emit end so that dir-walking can move on.
	    if (self.filter) {
	      var who = self._proxy || self;
	      // special handling for ProxyReaders
	      if (!self.filter.call(who, who, props)) {
	        if (!self._disowned) {
	          self.abort();
	          self.emit('end');
	          self.emit('close');
	        }
	        return;
	      }
	    }
	
	    // last chance to abort or disown before the flow starts!
	    var events = ['_stat', 'stat', 'ready'];
	    var e = 0;(function go() {
	      if (self._aborted) {
	        self.emit('end');
	        self.emit('close');
	        return;
	      }
	
	      if (self._paused && self.type !== 'Directory') {
	        self.once('resume', go);
	        return;
	      }
	
	      var ev = events[e++];
	      if (!ev) {
	        return self._read();
	      }
	      self.emit(ev, props);
	      go();
	    })();
	  }
	};
	
	Reader.prototype.pipe = function (dest) {
	  var self = this;
	  if (typeof dest.add === 'function') {
	    // piping to a multi-compatible, and we've got directory entries.
	    self.on('entry', function (entry) {
	      var ret = dest.add(entry);
	      if (ret === false) {
	        self.pause();
	      }
	    });
	  }
	
	  // console.error("R Pipe apply Stream Pipe")
	  return Stream.prototype.pipe.apply(this, arguments);
	};
	
	Reader.prototype.pause = function (who) {
	  this._paused = true;
	  who = who || this;
	  this.emit('pause', who);
	  if (this._stream) this._stream.pause(who);
	};
	
	Reader.prototype.resume = function (who) {
	  this._paused = false;
	  who = who || this;
	  this.emit('resume', who);
	  if (this._stream) this._stream.resume(who);
	  this._read();
	};
	
	Reader.prototype._read = function () {
	  this.error('Cannot read unknown type: ' + this.type);
	};
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ }),
/* 437 */
/***/ (function(module, exports) {

	'use strict';
	
	module.exports = getType;
	
	function getType(st) {
	  var types = ['Directory', 'File', 'SymbolicLink', 'Link', // special for hardlinks from tarballs
	  'BlockDevice', 'CharacterDevice', 'FIFO', 'Socket'];
	  var type;
	
	  if (st.type && types.indexOf(st.type) !== -1) {
	    st[st.type] = true;
	    return st.type;
	  }
	
	  for (var i = 0, l = types.length; i < l; i++) {
	    type = types[i];
	    var is = st[type] || st['is' + type];
	    if (typeof is === 'function') is = is.call(st);
	    if (is) {
	      st[type] = true;
	      st.type = type;
	      return type;
	    }
	  }
	
	  return null;
	}

/***/ }),
/* 438 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	// Basically just a wrapper around an fs.readlink
	//
	// XXX: Enhance this to support the Link type, by keeping
	// a lookup table of {<dev+inode>:<path>}, so that hardlinks
	// can be preserved in tarballs.
	
	module.exports = LinkReader;
	
	var fs = __webpack_require__(354);
	var inherits = __webpack_require__(284);
	var Reader = __webpack_require__(436);
	
	inherits(LinkReader, Reader);
	
	function LinkReader(props) {
	  var self = this;
	  if (!(self instanceof LinkReader)) {
	    throw new Error('LinkReader must be called as constructor.');
	  }
	
	  if (!(props.type === 'Link' && props.Link || props.type === 'SymbolicLink' && props.SymbolicLink)) {
	    throw new Error('Non-link type ' + props.type);
	  }
	
	  Reader.call(self, props);
	}
	
	// When piping a LinkReader into a LinkWriter, we have to
	// already have the linkpath property set, so that has to
	// happen *before* the "ready" event, which means we need to
	// override the _stat method.
	LinkReader.prototype._stat = function (currentStat) {
	  var self = this;
	  fs.readlink(self._path, function (er, linkpath) {
	    if (er) return self.error(er);
	    self.linkpath = self.props.linkpath = linkpath;
	    self.emit('linkpath', linkpath);
	    Reader.prototype._stat.call(self, currentStat);
	  });
	};
	
	LinkReader.prototype._read = function () {
	  var self = this;
	  if (self._paused) return;
	  // basically just a no-op, since we got all the info we need
	  // from the _stat method
	  if (!self._ended) {
	    self.emit('end');
	    self.emit('close');
	    self._ended = true;
	  }
	};

/***/ }),
/* 439 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	// A thing that emits "entry" events with Reader objects
	// Pausing it causes it to stop emitting entry events, and also
	// pauses the current entry if there is one.
	
	module.exports = DirReader;
	
	var fs = __webpack_require__(354);
	var inherits = __webpack_require__(284);
	var path = __webpack_require__(270);
	var Reader = __webpack_require__(436);
	var assert = __webpack_require__(336).ok;
	
	inherits(DirReader, Reader);
	
	function DirReader(props) {
	  var self = this;
	  if (!(self instanceof DirReader)) {
	    throw new Error('DirReader must be called as constructor.');
	  }
	
	  // should already be established as a Directory type
	  if (props.type !== 'Directory' || !props.Directory) {
	    throw new Error('Non-directory type ' + props.type);
	  }
	
	  self.entries = null;
	  self._index = -1;
	  self._paused = false;
	  self._length = -1;
	
	  if (props.sort) {
	    this.sort = props.sort;
	  }
	
	  Reader.call(this, props);
	}
	
	DirReader.prototype._getEntries = function () {
	  var self = this;
	
	  // race condition.  might pause() before calling _getEntries,
	  // and then resume, and try to get them a second time.
	  if (self._gotEntries) return;
	  self._gotEntries = true;
	
	  fs.readdir(self._path, function (er, entries) {
	    if (er) return self.error(er);
	
	    self.entries = entries;
	
	    self.emit('entries', entries);
	    if (self._paused) self.once('resume', processEntries);else processEntries();
	
	    function processEntries() {
	      self._length = self.entries.length;
	      if (typeof self.sort === 'function') {
	        self.entries = self.entries.sort(self.sort.bind(self));
	      }
	      self._read();
	    }
	  });
	};
	
	// start walking the dir, and emit an "entry" event for each one.
	DirReader.prototype._read = function () {
	  var self = this;
	
	  if (!self.entries) return self._getEntries();
	
	  if (self._paused || self._currentEntry || self._aborted) {
	    // console.error('DR paused=%j, current=%j, aborted=%j', self._paused, !!self._currentEntry, self._aborted)
	    return;
	  }
	
	  self._index++;
	  if (self._index >= self.entries.length) {
	    if (!self._ended) {
	      self._ended = true;
	      self.emit('end');
	      self.emit('close');
	    }
	    return;
	  }
	
	  // ok, handle this one, then.
	
	  // save creating a proxy, by stat'ing the thing now.
	  var p = path.resolve(self._path, self.entries[self._index]);
	  assert(p !== self._path);
	  assert(self.entries[self._index]);
	
	  // set this to prevent trying to _read() again in the stat time.
	  self._currentEntry = p;
	  fs[self.props.follow ? 'stat' : 'lstat'](p, function (er, stat) {
	    if (er) return self.error(er);
	
	    var who = self._proxy || self;
	
	    stat.path = p;
	    stat.basename = path.basename(p);
	    stat.dirname = path.dirname(p);
	    var childProps = self.getChildProps.call(who, stat);
	    childProps.path = p;
	    childProps.basename = path.basename(p);
	    childProps.dirname = path.dirname(p);
	
	    var entry = Reader(childProps, stat);
	
	    // console.error("DR Entry", p, stat.size)
	
	    self._currentEntry = entry;
	
	    // "entry" events are for direct entries in a specific dir.
	    // "child" events are for any and all children at all levels.
	    // This nomenclature is not completely final.
	
	    entry.on('pause', function (who) {
	      if (!self._paused && !entry._disowned) {
	        self.pause(who);
	      }
	    });
	
	    entry.on('resume', function (who) {
	      if (self._paused && !entry._disowned) {
	        self.resume(who);
	      }
	    });
	
	    entry.on('stat', function (props) {
	      self.emit('_entryStat', entry, props);
	      if (entry._aborted) return;
	      if (entry._paused) {
	        entry.once('resume', function () {
	          self.emit('entryStat', entry, props);
	        });
	      } else self.emit('entryStat', entry, props);
	    });
	
	    entry.on('ready', function EMITCHILD() {
	      // console.error("DR emit child", entry._path)
	      if (self._paused) {
	        // console.error("  DR emit child - try again later")
	        // pause the child, and emit the "entry" event once we drain.
	        // console.error("DR pausing child entry")
	        entry.pause(self);
	        return self.once('resume', EMITCHILD);
	      }
	
	      // skip over sockets.  they can't be piped around properly,
	      // so there's really no sense even acknowledging them.
	      // if someone really wants to see them, they can listen to
	      // the "socket" events.
	      if (entry.type === 'Socket') {
	        self.emit('socket', entry);
	      } else {
	        self.emitEntry(entry);
	      }
	    });
	
	    var ended = false;
	    entry.on('close', onend);
	    entry.on('disown', onend);
	    function onend() {
	      if (ended) return;
	      ended = true;
	      self.emit('childEnd', entry);
	      self.emit('entryEnd', entry);
	      self._currentEntry = null;
	      if (!self._paused) {
	        self._read();
	      }
	    }
	
	    // XXX Remove this.  Works in node as of 0.6.2 or so.
	    // Long filenames should not break stuff.
	    entry.on('error', function (er) {
	      if (entry._swallowErrors) {
	        self.warn(er);
	        entry.emit('end');
	        entry.emit('close');
	      } else {
	        self.emit('error', er);
	      }
	    })
	
	    // proxy up some events.
	    ;['child', 'childEnd', 'warn'].forEach(function (ev) {
	      entry.on(ev, self.emit.bind(self, ev));
	    });
	  });
	};
	
	DirReader.prototype.disown = function (entry) {
	  entry.emit('beforeDisown');
	  entry._disowned = true;
	  entry.parent = entry.root = null;
	  if (entry === this._currentEntry) {
	    this._currentEntry = null;
	  }
	  entry.emit('disown');
	};
	
	DirReader.prototype.getChildProps = function () {
	  return {
	    depth: this.depth + 1,
	    root: this.root || this,
	    parent: this,
	    follow: this.follow,
	    filter: this.filter,
	    sort: this.props.sort,
	    hardlinks: this.props.hardlinks
	  };
	};
	
	DirReader.prototype.pause = function (who) {
	  var self = this;
	  if (self._paused) return;
	  who = who || self;
	  self._paused = true;
	  if (self._currentEntry && self._currentEntry.pause) {
	    self._currentEntry.pause(who);
	  }
	  self.emit('pause', who);
	};
	
	DirReader.prototype.resume = function (who) {
	  var self = this;
	  if (!self._paused) return;
	  who = who || self;
	
	  self._paused = false;
	  // console.error('DR Emit Resume', self._path)
	  self.emit('resume', who);
	  if (self._paused) {
	    // console.error('DR Re-paused', self._path)
	    return;
	  }
	
	  if (self._currentEntry) {
	    if (self._currentEntry.resume) self._currentEntry.resume(who);
	  } else self._read();
	};
	
	DirReader.prototype.emitEntry = function (entry) {
	  this.emit('entry', entry);
	  this.emit('child', entry);
	};

/***/ }),
/* 440 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	// Basically just a wrapper around an fs.ReadStream
	
	module.exports = FileReader;
	
	var fs = __webpack_require__(354);
	var inherits = __webpack_require__(284);
	var Reader = __webpack_require__(436);
	var EOF = { EOF: true };
	var CLOSE = { CLOSE: true };
	
	inherits(FileReader, Reader);
	
	function FileReader(props) {
	  // console.error("    FR create", props.path, props.size, new Error().stack)
	  var self = this;
	  if (!(self instanceof FileReader)) {
	    throw new Error('FileReader must be called as constructor.');
	  }
	
	  // should already be established as a File type
	  // XXX Todo: preserve hardlinks by tracking dev+inode+nlink,
	  // with a HardLinkReader class.
	  if (!(props.type === 'Link' && props.Link || props.type === 'File' && props.File)) {
	    throw new Error('Non-file type ' + props.type);
	  }
	
	  self._buffer = [];
	  self._bytesEmitted = 0;
	  Reader.call(self, props);
	}
	
	FileReader.prototype._getStream = function () {
	  var self = this;
	  var stream = self._stream = fs.createReadStream(self._path, self.props);
	
	  if (self.props.blksize) {
	    stream.bufferSize = self.props.blksize;
	  }
	
	  stream.on('open', self.emit.bind(self, 'open'));
	
	  stream.on('data', function (c) {
	    // console.error('\t\t%d %s', c.length, self.basename)
	    self._bytesEmitted += c.length;
	    // no point saving empty chunks
	    if (!c.length) {
	      return;
	    } else if (self._paused || self._buffer.length) {
	      self._buffer.push(c);
	      self._read();
	    } else self.emit('data', c);
	  });
	
	  stream.on('end', function () {
	    if (self._paused || self._buffer.length) {
	      // console.error('FR Buffering End', self._path)
	      self._buffer.push(EOF);
	      self._read();
	    } else {
	      self.emit('end');
	    }
	
	    if (self._bytesEmitted !== self.props.size) {
	      self.error("Didn't get expected byte count\n" + 'expect: ' + self.props.size + '\n' + 'actual: ' + self._bytesEmitted);
	    }
	  });
	
	  stream.on('close', function () {
	    if (self._paused || self._buffer.length) {
	      // console.error('FR Buffering Close', self._path)
	      self._buffer.push(CLOSE);
	      self._read();
	    } else {
	      // console.error('FR close 1', self._path)
	      self.emit('close');
	    }
	  });
	
	  stream.on('error', function (e) {
	    self.emit('error', e);
	  });
	
	  self._read();
	};
	
	FileReader.prototype._read = function () {
	  var self = this;
	  // console.error('FR _read', self._path)
	  if (self._paused) {
	    // console.error('FR _read paused', self._path)
	    return;
	  }
	
	  if (!self._stream) {
	    // console.error('FR _getStream calling', self._path)
	    return self._getStream();
	  }
	
	  // clear out the buffer, if there is one.
	  if (self._buffer.length) {
	    // console.error('FR _read has buffer', self._buffer.length, self._path)
	    var buf = self._buffer;
	    for (var i = 0, l = buf.length; i < l; i++) {
	      var c = buf[i];
	      if (c === EOF) {
	        // console.error('FR Read emitting buffered end', self._path)
	        self.emit('end');
	      } else if (c === CLOSE) {
	        // console.error('FR Read emitting buffered close', self._path)
	        self.emit('close');
	      } else {
	        // console.error('FR Read emitting buffered data', self._path)
	        self.emit('data', c);
	      }
	
	      if (self._paused) {
	        // console.error('FR Read Re-pausing at '+i, self._path)
	        self._buffer = buf.slice(i);
	        return;
	      }
	    }
	    self._buffer.length = 0;
	  }
	  // console.error("FR _read done")
	  // that's about all there is to it.
	};
	
	FileReader.prototype.pause = function (who) {
	  var self = this;
	  // console.error('FR Pause', self._path)
	  if (self._paused) return;
	  who = who || self;
	  self._paused = true;
	  if (self._stream) self._stream.pause();
	  self.emit('pause', who);
	};
	
	FileReader.prototype.resume = function (who) {
	  var self = this;
	  // console.error('FR Resume', self._path)
	  if (!self._paused) return;
	  who = who || self;
	  self.emit('resume', who);
	  self._paused = false;
	  if (self._stream) self._stream.resume();
	  self._read();
	};

/***/ }),
/* 441 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	// Just get the stats, and then don't do anything.
	// You can't really "read" from a socket.  You "connect" to it.
	// Mostly, this is here so that reading a dir with a socket in it
	// doesn't blow up.
	
	module.exports = SocketReader;
	
	var inherits = __webpack_require__(284);
	var Reader = __webpack_require__(436);
	
	inherits(SocketReader, Reader);
	
	function SocketReader(props) {
	  var self = this;
	  if (!(self instanceof SocketReader)) {
	    throw new Error('SocketReader must be called as constructor.');
	  }
	
	  if (!(props.type === 'Socket' && props.Socket)) {
	    throw new Error('Non-socket type ' + props.type);
	  }
	
	  Reader.call(self, props);
	}
	
	SocketReader.prototype._read = function () {
	  var self = this;
	  if (self._paused) return;
	  // basically just a no-op, since we got all the info we have
	  // from the _stat method
	  if (!self._ended) {
	    self.emit('end');
	    self.emit('close');
	    self._ended = true;
	  }
	};

/***/ }),
/* 442 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	// A reader for when we don't yet know what kind of thing
	// the thing is.
	
	module.exports = ProxyReader;
	
	var Reader = __webpack_require__(436);
	var getType = __webpack_require__(437);
	var inherits = __webpack_require__(284);
	var fs = __webpack_require__(354);
	
	inherits(ProxyReader, Reader);
	
	function ProxyReader(props) {
	  var self = this;
	  if (!(self instanceof ProxyReader)) {
	    throw new Error('ProxyReader must be called as constructor.');
	  }
	
	  self.props = props;
	  self._buffer = [];
	  self.ready = false;
	
	  Reader.call(self, props);
	}
	
	ProxyReader.prototype._stat = function () {
	  var self = this;
	  var props = self.props;
	  // stat the thing to see what the proxy should be.
	  var stat = props.follow ? 'stat' : 'lstat';
	
	  fs[stat](props.path, function (er, current) {
	    var type;
	    if (er || !current) {
	      type = 'File';
	    } else {
	      type = getType(current);
	    }
	
	    props[type] = true;
	    props.type = self.type = type;
	
	    self._old = current;
	    self._addProxy(Reader(props, current));
	  });
	};
	
	ProxyReader.prototype._addProxy = function (proxy) {
	  var self = this;
	  if (self._proxyTarget) {
	    return self.error('proxy already set');
	  }
	
	  self._proxyTarget = proxy;
	  proxy._proxy = self;['error', 'data', 'end', 'close', 'linkpath', 'entry', 'entryEnd', 'child', 'childEnd', 'warn', 'stat'].forEach(function (ev) {
	    // console.error('~~ proxy event', ev, self.path)
	    proxy.on(ev, self.emit.bind(self, ev));
	  });
	
	  self.emit('proxy', proxy);
	
	  proxy.on('ready', function () {
	    // console.error("~~ proxy is ready!", self.path)
	    self.ready = true;
	    self.emit('ready');
	  });
	
	  var calls = self._buffer;
	  self._buffer.length = 0;
	  calls.forEach(function (c) {
	    proxy[c[0]].apply(proxy, c[1]);
	  });
	};
	
	ProxyReader.prototype.pause = function () {
	  return this._proxyTarget ? this._proxyTarget.pause() : false;
	};
	
	ProxyReader.prototype.resume = function () {
	  return this._proxyTarget ? this._proxyTarget.resume() : false;
	};

/***/ }),
/* 443 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
	
	module.exports = Writer;
	
	var fs = __webpack_require__(354);
	var inherits = __webpack_require__(284);
	var rimraf = __webpack_require__(363);
	var mkdir = __webpack_require__(387);
	var path = __webpack_require__(270);
	var umask = process.platform === 'win32' ? 0 : process.umask();
	var getType = __webpack_require__(437);
	var Abstract = __webpack_require__(435);
	
	// Must do this *before* loading the child classes
	inherits(Writer, Abstract);
	
	Writer.dirmode = parseInt('0777', 8) & ~umask;
	Writer.filemode = parseInt('0666', 8) & ~umask;
	
	var DirWriter = __webpack_require__(444);
	var LinkWriter = __webpack_require__(446);
	var FileWriter = __webpack_require__(447);
	var ProxyWriter = __webpack_require__(448);
	
	// props is the desired state.  current is optionally the current stat,
	// provided here so that subclasses can avoid statting the target
	// more than necessary.
	function Writer(props, current) {
	  var self = this;
	
	  if (typeof props === 'string') {
	    props = { path: props };
	  }
	
	  // polymorphism.
	  // call fstream.Writer(dir) to get a DirWriter object, etc.
	  var type = getType(props);
	  var ClassType = Writer;
	
	  switch (type) {
	    case 'Directory':
	      ClassType = DirWriter;
	      break;
	    case 'File':
	      ClassType = FileWriter;
	      break;
	    case 'Link':
	    case 'SymbolicLink':
	      ClassType = LinkWriter;
	      break;
	    case null:
	    default:
	      // Don't know yet what type to create, so we wrap in a proxy.
	      ClassType = ProxyWriter;
	      break;
	  }
	
	  if (!(self instanceof ClassType)) return new ClassType(props);
	
	  // now get down to business.
	
	  Abstract.call(self);
	
	  if (!props.path) self.error('Must provide a path', null, true);
	
	  // props is what we want to set.
	  // set some convenience properties as well.
	  self.type = props.type;
	  self.props = props;
	  self.depth = props.depth || 0;
	  self.clobber = props.clobber === false ? props.clobber : true;
	  self.parent = props.parent || null;
	  self.root = props.root || props.parent && props.parent.root || self;
	
	  self._path = self.path = path.resolve(props.path);
	  if (process.platform === 'win32') {
	    self.path = self._path = self.path.replace(/\?/g, '_');
	    if (self._path.length >= 260) {
	      self._swallowErrors = true;
	      self._path = '\\\\?\\' + self.path.replace(/\//g, '\\');
	    }
	  }
	  self.basename = path.basename(props.path);
	  self.dirname = path.dirname(props.path);
	  self.linkpath = props.linkpath || null;
	
	  props.parent = props.root = null;
	
	  // console.error("\n\n\n%s setting size to", props.path, props.size)
	  self.size = props.size;
	
	  if (typeof props.mode === 'string') {
	    props.mode = parseInt(props.mode, 8);
	  }
	
	  self.readable = false;
	  self.writable = true;
	
	  // buffer until ready, or while handling another entry
	  self._buffer = [];
	  self.ready = false;
	
	  self.filter = typeof props.filter === 'function' ? props.filter : null;
	
	  // start the ball rolling.
	  // this checks what's there already, and then calls
	  // self._create() to call the impl-specific creation stuff.
	  self._stat(current);
	}
	
	// Calling this means that it's something we can't create.
	// Just assert that it's already there, otherwise raise a warning.
	Writer.prototype._create = function () {
	  var self = this;
	  fs[self.props.follow ? 'stat' : 'lstat'](self._path, function (er) {
	    if (er) {
	      return self.warn('Cannot create ' + self._path + '\n' + 'Unsupported type: ' + self.type, 'ENOTSUP');
	    }
	    self._finish();
	  });
	};
	
	Writer.prototype._stat = function (current) {
	  var self = this;
	  var props = self.props;
	  var stat = props.follow ? 'stat' : 'lstat';
	  var who = self._proxy || self;
	
	  if (current) statCb(null, current);else fs[stat](self._path, statCb);
	
	  function statCb(er, current) {
	    if (self.filter && !self.filter.call(who, who, current)) {
	      self._aborted = true;
	      self.emit('end');
	      self.emit('close');
	      return;
	    }
	
	    // if it's not there, great.  We'll just create it.
	    // if it is there, then we'll need to change whatever differs
	    if (er || !current) {
	      return create(self);
	    }
	
	    self._old = current;
	    var currentType = getType(current);
	
	    // if it's a type change, then we need to clobber or error.
	    // if it's not a type change, then let the impl take care of it.
	    if (currentType !== self.type) {
	      return rimraf(self._path, function (er) {
	        if (er) return self.error(er);
	        self._old = null;
	        create(self);
	      });
	    }
	
	    // otherwise, just handle in the app-specific way
	    // this creates a fs.WriteStream, or mkdir's, or whatever
	    create(self);
	  }
	};
	
	function create(self) {
	  // console.error("W create", self._path, Writer.dirmode)
	
	  // XXX Need to clobber non-dirs that are in the way,
	  // unless { clobber: false } in the props.
	  mkdir(path.dirname(self._path), Writer.dirmode, function (er, made) {
	    // console.error("W created", path.dirname(self._path), er)
	    if (er) return self.error(er);
	
	    // later on, we have to set the mode and owner for these
	    self._madeDir = made;
	    return self._create();
	  });
	}
	
	function endChmod(self, want, current, path, cb) {
	  var wantMode = want.mode;
	  var chmod = want.follow || self.type !== 'SymbolicLink' ? 'chmod' : 'lchmod';
	
	  if (!fs[chmod]) return cb();
	  if (typeof wantMode !== 'number') return cb();
	
	  var curMode = current.mode & parseInt('0777', 8);
	  wantMode = wantMode & parseInt('0777', 8);
	  if (wantMode === curMode) return cb();
	
	  fs[chmod](path, wantMode, cb);
	}
	
	function endChown(self, want, current, path, cb) {
	  // Don't even try it unless root.  Too easy to EPERM.
	  if (process.platform === 'win32') return cb();
	  if (!process.getuid || process.getuid() !== 0) return cb();
	  if (typeof want.uid !== 'number' && typeof want.gid !== 'number') return cb();
	
	  if (current.uid === want.uid && current.gid === want.gid) return cb();
	
	  var chown = self.props.follow || self.type !== 'SymbolicLink' ? 'chown' : 'lchown';
	  if (!fs[chown]) return cb();
	
	  if (typeof want.uid !== 'number') want.uid = current.uid;
	  if (typeof want.gid !== 'number') want.gid = current.gid;
	
	  fs[chown](path, want.uid, want.gid, cb);
	}
	
	function endUtimes(self, want, current, path, cb) {
	  if (!fs.utimes || process.platform === 'win32') return cb();
	
	  var utimes = want.follow || self.type !== 'SymbolicLink' ? 'utimes' : 'lutimes';
	
	  if (utimes === 'lutimes' && !fs[utimes]) {
	    utimes = 'utimes';
	  }
	
	  if (!fs[utimes]) return cb();
	
	  var curA = current.atime;
	  var curM = current.mtime;
	  var meA = want.atime;
	  var meM = want.mtime;
	
	  if (meA === undefined) meA = curA;
	  if (meM === undefined) meM = curM;
	
	  if (!isDate(meA)) meA = new Date(meA);
	  if (!isDate(meM)) meA = new Date(meM);
	
	  if (meA.getTime() === curA.getTime() && meM.getTime() === curM.getTime()) return cb();
	
	  fs[utimes](path, meA, meM, cb);
	}
	
	// XXX This function is beastly.  Break it up!
	Writer.prototype._finish = function () {
	  var self = this;
	
	  if (self._finishing) return;
	  self._finishing = true;
	
	  // console.error(" W Finish", self._path, self.size)
	
	  // set up all the things.
	  // At this point, we're already done writing whatever we've gotta write,
	  // adding files to the dir, etc.
	  var todo = 0;
	  var errState = null;
	  var done = false;
	
	  if (self._old) {
	    // the times will almost *certainly* have changed.
	    // adds the utimes syscall, but remove another stat.
	    self._old.atime = new Date(0);
	    self._old.mtime = new Date(0);
	    // console.error(" W Finish Stale Stat", self._path, self.size)
	    setProps(self._old);
	  } else {
	    var stat = self.props.follow ? 'stat' : 'lstat';
	    // console.error(" W Finish Stating", self._path, self.size)
	    fs[stat](self._path, function (er, current) {
	      // console.error(" W Finish Stated", self._path, self.size, current)
	      if (er) {
	        // if we're in the process of writing out a
	        // directory, it's very possible that the thing we're linking to
	        // doesn't exist yet (especially if it was intended as a symlink),
	        // so swallow ENOENT errors here and just soldier on.
	        if (er.code === 'ENOENT' && (self.type === 'Link' || self.type === 'SymbolicLink') && process.platform === 'win32') {
	          self.ready = true;
	          self.emit('ready');
	          self.emit('end');
	          self.emit('close');
	          self.end = self._finish = function () {};
	          return;
	        } else return self.error(er);
	      }
	      setProps(self._old = current);
	    });
	  }
	
	  return;
	
	  function setProps(current) {
	    todo += 3;
	    endChmod(self, self.props, current, self._path, next('chmod'));
	    endChown(self, self.props, current, self._path, next('chown'));
	    endUtimes(self, self.props, current, self._path, next('utimes'));
	  }
	
	  function next(what) {
	    return function (er) {
	      // console.error("   W Finish", what, todo)
	      if (errState) return;
	      if (er) {
	        er.fstream_finish_call = what;
	        return self.error(errState = er);
	      }
	      if (--todo > 0) return;
	      if (done) return;
	      done = true;
	
	      // we may still need to set the mode/etc. on some parent dirs
	      // that were created previously.  delay end/close until then.
	      if (!self._madeDir) return end();else endMadeDir(self, self._path, end);
	
	      function end(er) {
	        if (er) {
	          er.fstream_finish_call = 'setupMadeDir';
	          return self.error(er);
	        }
	        // all the props have been set, so we're completely done.
	        self.emit('end');
	        self.emit('close');
	      }
	    };
	  }
	};
	
	function endMadeDir(self, p, cb) {
	  var made = self._madeDir;
	  // everything *between* made and path.dirname(self._path)
	  // needs to be set up.  Note that this may just be one dir.
	  var d = path.dirname(p);
	
	  endMadeDir_(self, d, function (er) {
	    if (er) return cb(er);
	    if (d === made) {
	      return cb();
	    }
	    endMadeDir(self, d, cb);
	  });
	}
	
	function endMadeDir_(self, p, cb) {
	  var dirProps = {};
	  Object.keys(self.props).forEach(function (k) {
	    dirProps[k] = self.props[k];
	
	    // only make non-readable dirs if explicitly requested.
	    if (k === 'mode' && self.type !== 'Directory') {
	      dirProps[k] = dirProps[k] | parseInt('0111', 8);
	    }
	  });
	
	  var todo = 3;
	  var errState = null;
	  fs.stat(p, function (er, current) {
	    if (er) return cb(errState = er);
	    endChmod(self, dirProps, current, p, next);
	    endChown(self, dirProps, current, p, next);
	    endUtimes(self, dirProps, current, p, next);
	  });
	
	  function next(er) {
	    if (errState) return;
	    if (er) return cb(errState = er);
	    if (--todo === 0) return cb();
	  }
	}
	
	Writer.prototype.pipe = function () {
	  this.error("Can't pipe from writable stream");
	};
	
	Writer.prototype.add = function () {
	  this.error("Can't add to non-Directory type");
	};
	
	Writer.prototype.write = function () {
	  return true;
	};
	
	function objectToString(d) {
	  return Object.prototype.toString.call(d);
	}
	
	function isDate(d) {
	  return (typeof d === 'undefined' ? 'undefined' : _typeof(d)) === 'object' && objectToString(d) === '[object Date]';
	}
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ }),
/* 444 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	// It is expected that, when .add() returns false, the consumer
	// of the DirWriter will pause until a "drain" event occurs. Note
	// that this is *almost always going to be the case*, unless the
	// thing being written is some sort of unsupported type, and thus
	// skipped over.
	
	module.exports = DirWriter;
	
	var Writer = __webpack_require__(443);
	var inherits = __webpack_require__(284);
	var mkdir = __webpack_require__(387);
	var path = __webpack_require__(270);
	var collect = __webpack_require__(445);
	
	inherits(DirWriter, Writer);
	
	function DirWriter(props) {
	  var self = this;
	  if (!(self instanceof DirWriter)) {
	    self.error('DirWriter must be called as constructor.', null, true);
	  }
	
	  // should already be established as a Directory type
	  if (props.type !== 'Directory' || !props.Directory) {
	    self.error('Non-directory type ' + props.type + ' ' + JSON.stringify(props), null, true);
	  }
	
	  Writer.call(this, props);
	}
	
	DirWriter.prototype._create = function () {
	  var self = this;
	  mkdir(self._path, Writer.dirmode, function (er) {
	    if (er) return self.error(er);
	    // ready to start getting entries!
	    self.ready = true;
	    self.emit('ready');
	    self._process();
	  });
	};
	
	// a DirWriter has an add(entry) method, but its .write() doesn't
	// do anything.  Why a no-op rather than a throw?  Because this
	// leaves open the door for writing directory metadata for
	// gnu/solaris style dumpdirs.
	DirWriter.prototype.write = function () {
	  return true;
	};
	
	DirWriter.prototype.end = function () {
	  this._ended = true;
	  this._process();
	};
	
	DirWriter.prototype.add = function (entry) {
	  var self = this;
	
	  // console.error('\tadd', entry._path, '->', self._path)
	  collect(entry);
	  if (!self.ready || self._currentEntry) {
	    self._buffer.push(entry);
	    return false;
	  }
	
	  // create a new writer, and pipe the incoming entry into it.
	  if (self._ended) {
	    return self.error('add after end');
	  }
	
	  self._buffer.push(entry);
	  self._process();
	
	  return this._buffer.length === 0;
	};
	
	DirWriter.prototype._process = function () {
	  var self = this;
	
	  // console.error('DW Process p=%j', self._processing, self.basename)
	
	  if (self._processing) return;
	
	  var entry = self._buffer.shift();
	  if (!entry) {
	    // console.error("DW Drain")
	    self.emit('drain');
	    if (self._ended) self._finish();
	    return;
	  }
	
	  self._processing = true;
	  // console.error("DW Entry", entry._path)
	
	  self.emit('entry', entry);
	
	  // ok, add this entry
	  //
	  // don't allow recursive copying
	  var p = entry;
	  var pp;
	  do {
	    pp = p._path || p.path;
	    if (pp === self.root._path || pp === self._path || pp && pp.indexOf(self._path) === 0) {
	      // console.error('DW Exit (recursive)', entry.basename, self._path)
	      self._processing = false;
	      if (entry._collected) entry.pipe();
	      return self._process();
	    }
	    p = p.parent;
	  } while (p);
	
	  // console.error("DW not recursive")
	
	  // chop off the entry's root dir, replace with ours
	  var props = {
	    parent: self,
	    root: self.root || self,
	    type: entry.type,
	    depth: self.depth + 1
	  };
	
	  pp = entry._path || entry.path || entry.props.path;
	  if (entry.parent) {
	    pp = pp.substr(entry.parent._path.length + 1);
	  }
	  // get rid of any ../../ shenanigans
	  props.path = path.join(self.path, path.join('/', pp));
	
	  // if i have a filter, the child should inherit it.
	  props.filter = self.filter;
	
	  // all the rest of the stuff, copy over from the source.
	  Object.keys(entry.props).forEach(function (k) {
	    if (!props.hasOwnProperty(k)) {
	      props[k] = entry.props[k];
	    }
	  });
	
	  // not sure at this point what kind of writer this is.
	  var child = self._currentChild = new Writer(props);
	  child.on('ready', function () {
	    // console.error("DW Child Ready", child.type, child._path)
	    // console.error("  resuming", entry._path)
	    entry.pipe(child);
	    entry.resume();
	  });
	
	  // XXX Make this work in node.
	  // Long filenames should not break stuff.
	  child.on('error', function (er) {
	    if (child._swallowErrors) {
	      self.warn(er);
	      child.emit('end');
	      child.emit('close');
	    } else {
	      self.emit('error', er);
	    }
	  });
	
	  // we fire _end internally *after* end, so that we don't move on
	  // until any "end" listeners have had their chance to do stuff.
	  child.on('close', onend);
	  var ended = false;
	  function onend() {
	    if (ended) return;
	    ended = true;
	    // console.error("* DW Child end", child.basename)
	    self._currentChild = null;
	    self._processing = false;
	    self._process();
	  }
	};

/***/ }),
/* 445 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {'use strict';
	
	module.exports = collect;
	
	function collect(stream) {
	  if (stream._collected) return;
	
	  if (stream._paused) return stream.on('resume', collect.bind(null, stream));
	
	  stream._collected = true;
	  stream.pause();
	
	  stream.on('data', save);
	  stream.on('end', save);
	  var buf = [];
	  function save(b) {
	    if (typeof b === 'string') b = new Buffer(b);
	    if (Buffer.isBuffer(b) && !b.length) return;
	    buf.push(b);
	  }
	
	  stream.on('entry', saveEntry);
	  var entryBuffer = [];
	  function saveEntry(e) {
	    collect(e);
	    entryBuffer.push(e);
	  }
	
	  stream.on('proxy', proxyPause);
	  function proxyPause(p) {
	    p.pause();
	  }
	
	  // replace the pipe method with a new version that will
	  // unlock the buffered stuff.  if you just call .pipe()
	  // without a destination, then it'll re-play the events.
	  stream.pipe = function (orig) {
	    return function (dest) {
	      // console.error(' === open the pipes', dest && dest.path)
	
	      // let the entries flow through one at a time.
	      // Once they're all done, then we can resume completely.
	      var e = 0;(function unblockEntry() {
	        var entry = entryBuffer[e++];
	        // console.error(" ==== unblock entry", entry && entry.path)
	        if (!entry) return resume();
	        entry.on('end', unblockEntry);
	        if (dest) dest.add(entry);else stream.emit('entry', entry);
	      })();
	
	      function resume() {
	        stream.removeListener('entry', saveEntry);
	        stream.removeListener('data', save);
	        stream.removeListener('end', save);
	
	        stream.pipe = orig;
	        if (dest) stream.pipe(dest);
	
	        buf.forEach(function (b) {
	          if (b) stream.emit('data', b);else stream.emit('end');
	        });
	
	        stream.resume();
	      }
	
	      return dest;
	    };
	  }(stream.pipe);
	}
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(290).Buffer))

/***/ }),
/* 446 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';
	
	module.exports = LinkWriter;
	
	var fs = __webpack_require__(354);
	var Writer = __webpack_require__(443);
	var inherits = __webpack_require__(284);
	var path = __webpack_require__(270);
	var rimraf = __webpack_require__(363);
	
	inherits(LinkWriter, Writer);
	
	function LinkWriter(props) {
	  var self = this;
	  if (!(self instanceof LinkWriter)) {
	    throw new Error('LinkWriter must be called as constructor.');
	  }
	
	  // should already be established as a Link type
	  if (!(props.type === 'Link' && props.Link || props.type === 'SymbolicLink' && props.SymbolicLink)) {
	    throw new Error('Non-link type ' + props.type);
	  }
	
	  if (props.linkpath === '') props.linkpath = '.';
	  if (!props.linkpath) {
	    self.error('Need linkpath property to create ' + props.type);
	  }
	
	  Writer.call(this, props);
	}
	
	LinkWriter.prototype._create = function () {
	  // console.error(" LW _create")
	  var self = this;
	  var hard = self.type === 'Link' || process.platform === 'win32';
	  var link = hard ? 'link' : 'symlink';
	  var lp = hard ? path.resolve(self.dirname, self.linkpath) : self.linkpath;
	
	  // can only change the link path by clobbering
	  // For hard links, let's just assume that's always the case, since
	  // there's no good way to read them if we don't already know.
	  if (hard) return clobber(self, lp, link);
	
	  fs.readlink(self._path, function (er, p) {
	    // only skip creation if it's exactly the same link
	    if (p && p === lp) return finish(self);
	    clobber(self, lp, link);
	  });
	};
	
	function clobber(self, lp, link) {
	  rimraf(self._path, function (er) {
	    if (er) return self.error(er);
	    create(self, lp, link);
	  });
	}
	
	function create(self, lp, link) {
	  fs[link](lp, self._path, function (er) {
	    // if this is a hard link, and we're in the process of writing out a
	    // directory, it's very possible that the thing we're linking to
	    // doesn't exist yet (especially if it was intended as a symlink),
	    // so swallow ENOENT errors here and just soldier in.
	    // Additionally, an EPERM or EACCES can happen on win32 if it's trying
	    // to make a link to a directory.  Again, just skip it.
	    // A better solution would be to have fs.symlink be supported on
	    // windows in some nice fashion.
	    if (er) {
	      if ((er.code === 'ENOENT' || er.code === 'EACCES' || er.code === 'EPERM') && process.platform === 'win32') {
	        self.ready = true;
	        self.emit('ready');
	        self.emit('end');
	        self.emit('close');
	        self.end = self._finish = function () {};
	      } else return self.error(er);
	    }
	    finish(self);
	  });
	}
	
	function finish(self) {
	  self.ready = true;
	  self.emit('ready');
	  if (self._ended && !self._finished) self._finish();
	}
	
	LinkWriter.prototype.end = function () {
	  // console.error("LW finish in end")
	  this._ended = true;
	  if (this.ready) {
	    this._finished = true;
	    this._finish();
	  }
	};
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ }),
/* 447 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {'use strict';
	
	module.exports = FileWriter;
	
	var fs = __webpack_require__(354);
	var Writer = __webpack_require__(443);
	var inherits = __webpack_require__(284);
	var EOF = {};
	
	inherits(FileWriter, Writer);
	
	function FileWriter(props) {
	  var self = this;
	  if (!(self instanceof FileWriter)) {
	    throw new Error('FileWriter must be called as constructor.');
	  }
	
	  // should already be established as a File type
	  if (props.type !== 'File' || !props.File) {
	    throw new Error('Non-file type ' + props.type);
	  }
	
	  self._buffer = [];
	  self._bytesWritten = 0;
	
	  Writer.call(this, props);
	}
	
	FileWriter.prototype._create = function () {
	  var self = this;
	  if (self._stream) return;
	
	  var so = {};
	  if (self.props.flags) so.flags = self.props.flags;
	  so.mode = Writer.filemode;
	  if (self._old && self._old.blksize) so.bufferSize = self._old.blksize;
	
	  self._stream = fs.createWriteStream(self._path, so);
	
	  self._stream.on('open', function () {
	    // console.error("FW open", self._buffer, self._path)
	    self.ready = true;
	    self._buffer.forEach(function (c) {
	      if (c === EOF) self._stream.end();else self._stream.write(c);
	    });
	    self.emit('ready');
	    // give this a kick just in case it needs it.
	    self.emit('drain');
	  });
	
	  self._stream.on('error', function (er) {
	    self.emit('error', er);
	  });
	
	  self._stream.on('drain', function () {
	    self.emit('drain');
	  });
	
	  self._stream.on('close', function () {
	    // console.error('\n\nFW Stream Close', self._path, self.size)
	    self._finish();
	  });
	};
	
	FileWriter.prototype.write = function (c) {
	  var self = this;
	
	  self._bytesWritten += c.length;
	
	  if (!self.ready) {
	    if (!Buffer.isBuffer(c) && typeof c !== 'string') {
	      throw new Error('invalid write data');
	    }
	    self._buffer.push(c);
	    return false;
	  }
	
	  var ret = self._stream.write(c);
	  // console.error('\t-- fw wrote, _stream says', ret, self._stream._queue.length)
	
	  // allow 2 buffered writes, because otherwise there's just too
	  // much stop and go bs.
	  if (ret === false && self._stream._queue) {
	    return self._stream._queue.length <= 2;
	  } else {
	    return ret;
	  }
	};
	
	FileWriter.prototype.end = function (c) {
	  var self = this;
	
	  if (c) self.write(c);
	
	  if (!self.ready) {
	    self._buffer.push(EOF);
	    return false;
	  }
	
	  return self._stream.end();
	};
	
	FileWriter.prototype._finish = function () {
	  var self = this;
	  if (typeof self.size === 'number' && self._bytesWritten !== self.size) {
	    self.error('Did not get expected byte count.\n' + 'expect: ' + self.size + '\n' + 'actual: ' + self._bytesWritten);
	  }
	  Writer.prototype._finish.call(self);
	};
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(290).Buffer))

/***/ }),
/* 448 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	// A writer for when we don't know what kind of thing
	// the thing is.  That is, it's not explicitly set,
	// so we're going to make it whatever the thing already
	// is, or "File"
	//
	// Until then, collect all events.
	
	module.exports = ProxyWriter;
	
	var Writer = __webpack_require__(443);
	var getType = __webpack_require__(437);
	var inherits = __webpack_require__(284);
	var collect = __webpack_require__(445);
	var fs = __webpack_require__(!(function webpackMissingModule() { var e = new Error("Cannot find module \"fs\""); e.code = 'MODULE_NOT_FOUND'; throw e; }()));
	
	inherits(ProxyWriter, Writer);
	
	function ProxyWriter(props) {
	  var self = this;
	  if (!(self instanceof ProxyWriter)) {
	    throw new Error('ProxyWriter must be called as constructor.');
	  }
	
	  self.props = props;
	  self._needDrain = false;
	
	  Writer.call(self, props);
	}
	
	ProxyWriter.prototype._stat = function () {
	  var self = this;
	  var props = self.props;
	  // stat the thing to see what the proxy should be.
	  var stat = props.follow ? 'stat' : 'lstat';
	
	  fs[stat](props.path, function (er, current) {
	    var type;
	    if (er || !current) {
	      type = 'File';
	    } else {
	      type = getType(current);
	    }
	
	    props[type] = true;
	    props.type = self.type = type;
	
	    self._old = current;
	    self._addProxy(Writer(props, current));
	  });
	};
	
	ProxyWriter.prototype._addProxy = function (proxy) {
	  // console.error("~~ set proxy", this.path)
	  var self = this;
	  if (self._proxy) {
	    return self.error('proxy already set');
	  }
	
	  self._proxy = proxy;['ready', 'error', 'close', 'pipe', 'drain', 'warn'].forEach(function (ev) {
	    proxy.on(ev, self.emit.bind(self, ev));
	  });
	
	  self.emit('proxy', proxy);
	
	  var calls = self._buffer;
	  calls.forEach(function (c) {
	    // console.error("~~ ~~ proxy buffered call", c[0], c[1])
	    proxy[c[0]].apply(proxy, c[1]);
	  });
	  self._buffer.length = 0;
	  if (self._needsDrain) self.emit('drain');
	};
	
	ProxyWriter.prototype.add = function (entry) {
	  // console.error("~~ proxy add")
	  collect(entry);
	
	  if (!this._proxy) {
	    this._buffer.push(['add', [entry]]);
	    this._needDrain = true;
	    return false;
	  }
	  return this._proxy.add(entry);
	};
	
	ProxyWriter.prototype.write = function (c) {
	  // console.error('~~ proxy write')
	  if (!this._proxy) {
	    this._buffer.push(['write', [c]]);
	    this._needDrain = true;
	    return false;
	  }
	  return this._proxy.write(c);
	};
	
	ProxyWriter.prototype.end = function (c) {
	  // console.error('~~ proxy end')
	  if (!this._proxy) {
	    this._buffer.push(['end', [c]]);
	    return false;
	  }
	  return this._proxy.end(c);
	};

/***/ }),
/* 449 */
/***/ (function(module, exports, __webpack_require__) {

	// Copyright 2010-2012 Mikeal Rogers
	//
	//    Licensed under the Apache License, Version 2.0 (the "License");
	//    you may not use this file except in compliance with the License.
	//    You may obtain a copy of the License at
	//
	//        http://www.apache.org/licenses/LICENSE-2.0
	//
	//    Unless required by applicable law or agreed to in writing, software
	//    distributed under the License is distributed on an "AS IS" BASIS,
	//    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	//    See the License for the specific language governing permissions and
	//    limitations under the License.
	
	'use strict';
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
	
	var extend = __webpack_require__(450),
	    cookies = __webpack_require__(451),
	    helpers = __webpack_require__(460);
	
	var paramsHaveRequestBody = helpers.paramsHaveRequestBody;
	
	// organize params for patch, post, put, head, del
	function initParams(uri, options, callback) {
	  if (typeof options === 'function') {
	    callback = options;
	  }
	
	  var params = {};
	  if ((typeof options === 'undefined' ? 'undefined' : _typeof(options)) === 'object') {
	    extend(params, options, { uri: uri });
	  } else if (typeof uri === 'string') {
	    extend(params, { uri: uri });
	  } else {
	    extend(params, uri);
	  }
	
	  params.callback = callback || params.callback;
	  return params;
	}
	
	function request(uri, options, callback) {
	  if (typeof uri === 'undefined') {
	    throw new Error('undefined is not a valid uri or options object.');
	  }
	
	  var params = initParams(uri, options, callback);
	
	  if (params.method === 'HEAD' && paramsHaveRequestBody(params)) {
	    throw new Error('HTTP HEAD requests MUST NOT include a request body.');
	  }
	
	  return new request.Request(params);
	}
	
	function verbFunc(verb) {
	  var method = verb.toUpperCase();
	  return function (uri, options, callback) {
	    var params = initParams(uri, options, callback);
	    params.method = method;
	    return request(params, params.callback);
	  };
	}
	
	// define like this to please codeintel/intellisense IDEs
	request.get = verbFunc('get');
	request.head = verbFunc('head');
	request.post = verbFunc('post');
	request.put = verbFunc('put');
	request.patch = verbFunc('patch');
	request.del = verbFunc('delete');
	request['delete'] = verbFunc('delete');
	
	request.jar = function (store) {
	  return cookies.jar(store);
	};
	
	request.cookie = function (str) {
	  return cookies.parse(str);
	};
	
	function wrapRequestMethod(method, options, requester, verb) {
	
	  return function (uri, opts, callback) {
	    var params = initParams(uri, opts, callback);
	
	    var target = {};
	    extend(true, target, options, params);
	
	    target.pool = params.pool || options.pool;
	
	    if (verb) {
	      target.method = verb.toUpperCase();
	    }
	
	    if (typeof requester === 'function') {
	      method = requester;
	    }
	
	    return method(target, target.callback);
	  };
	}
	
	request.defaults = function (options, requester) {
	  var self = this;
	
	  options = options || {};
	
	  if (typeof options === 'function') {
	    requester = options;
	    options = {};
	  }
	
	  var defaults = wrapRequestMethod(self, options, requester);
	
	  var verbs = ['get', 'head', 'post', 'put', 'patch', 'del', 'delete'];
	  verbs.forEach(function (verb) {
	    defaults[verb] = wrapRequestMethod(self[verb], options, requester, verb);
	  });
	
	  defaults.cookie = wrapRequestMethod(self.cookie, options, requester);
	  defaults.jar = self.jar;
	  defaults.defaults = self.defaults;
	  return defaults;
	};
	
	request.forever = function (agentOptions, optionsArg) {
	  var options = {};
	  if (optionsArg) {
	    extend(options, optionsArg);
	  }
	  if (agentOptions) {
	    options.agentOptions = agentOptions;
	  }
	
	  options.forever = true;
	  return request.defaults(options);
	};
	
	// Exports
	
	module.exports = request;
	request.Request = __webpack_require__(463);
	request.initParams = initParams;
	
	// Backwards compatibility for request.debug
	Object.defineProperty(request, 'debug', {
	  enumerable: true,
	  get: function get() {
	    return request.Request.debug;
	  },
	  set: function set(debug) {
	    request.Request.debug = debug;
	  }
	});

/***/ }),
/* 450 */
/***/ (function(module, exports) {

	'use strict';
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
	
	var hasOwn = Object.prototype.hasOwnProperty;
	var toStr = Object.prototype.toString;
	
	var isArray = function isArray(arr) {
		if (typeof Array.isArray === 'function') {
			return Array.isArray(arr);
		}
	
		return toStr.call(arr) === '[object Array]';
	};
	
	var isPlainObject = function isPlainObject(obj) {
		if (!obj || toStr.call(obj) !== '[object Object]') {
			return false;
		}
	
		var hasOwnConstructor = hasOwn.call(obj, 'constructor');
		var hasIsPrototypeOf = obj.constructor && obj.constructor.prototype && hasOwn.call(obj.constructor.prototype, 'isPrototypeOf');
		// Not own constructor property must be Object
		if (obj.constructor && !hasOwnConstructor && !hasIsPrototypeOf) {
			return false;
		}
	
		// Own properties are enumerated firstly, so to speed up,
		// if last one is own, then all properties are own.
		var key;
		for (key in obj) {/**/}
	
		return typeof key === 'undefined' || hasOwn.call(obj, key);
	};
	
	module.exports = function extend() {
		var options,
		    name,
		    src,
		    copy,
		    copyIsArray,
		    clone,
		    target = arguments[0],
		    i = 1,
		    length = arguments.length,
		    deep = false;
	
		// Handle a deep copy situation
		if (typeof target === 'boolean') {
			deep = target;
			target = arguments[1] || {};
			// skip the boolean and the target
			i = 2;
		} else if ((typeof target === 'undefined' ? 'undefined' : _typeof(target)) !== 'object' && typeof target !== 'function' || target == null) {
			target = {};
		}
	
		for (; i < length; ++i) {
			options = arguments[i];
			// Only deal with non-null/undefined values
			if (options != null) {
				// Extend the base object
				for (name in options) {
					src = target[name];
					copy = options[name];
	
					// Prevent never-ending loop
					if (target !== copy) {
						// Recurse if we're merging plain objects or arrays
						if (deep && copy && (isPlainObject(copy) || (copyIsArray = isArray(copy)))) {
							if (copyIsArray) {
								copyIsArray = false;
								clone = src && isArray(src) ? src : [];
							} else {
								clone = src && isPlainObject(src) ? src : {};
							}
	
							// Never move original objects, clone them
							target[name] = extend(deep, clone, copy);
	
							// Don't bring in undefined values
						} else if (typeof copy !== 'undefined') {
							target[name] = copy;
						}
					}
				}
			}
		}
	
		// Return the modified object
		return target;
	};

/***/ }),
/* 451 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var tough = __webpack_require__(452);
	
	var Cookie = tough.Cookie,
	    CookieJar = tough.CookieJar;
	
	exports.parse = function (str) {
	  if (str && str.uri) {
	    str = str.uri;
	  }
	  if (typeof str !== 'string') {
	    throw new Error('The cookie function only accepts STRING as param');
	  }
	  return Cookie.parse(str, { loose: true });
	};
	
	// Adapt the sometimes-Async api of tough.CookieJar to our requirements
	function RequestJar(store) {
	  var self = this;
	  self._jar = new CookieJar(store, { looseMode: true });
	}
	RequestJar.prototype.setCookie = function (cookieOrStr, uri, options) {
	  var self = this;
	  return self._jar.setCookieSync(cookieOrStr, uri, options || {});
	};
	RequestJar.prototype.getCookieString = function (uri) {
	  var self = this;
	  return self._jar.getCookieStringSync(uri);
	};
	RequestJar.prototype.getCookies = function (uri) {
	  var self = this;
	  return self._jar.getCookiesSync(uri);
	};
	
	exports.jar = function (store) {
	  return new RequestJar(store);
	};

/***/ }),
/* 452 */
/***/ (function(module, exports, __webpack_require__) {

	/*!
	 * Copyright (c) 2015, Salesforce.com, Inc.
	 * All rights reserved.
	 *
	 * Redistribution and use in source and binary forms, with or without
	 * modification, are permitted provided that the following conditions are met:
	 *
	 * 1. Redistributions of source code must retain the above copyright notice,
	 * this list of conditions and the following disclaimer.
	 *
	 * 2. Redistributions in binary form must reproduce the above copyright notice,
	 * this list of conditions and the following disclaimer in the documentation
	 * and/or other materials provided with the distribution.
	 *
	 * 3. Neither the name of Salesforce.com nor the names of its contributors may
	 * be used to endorse or promote products derived from this software without
	 * specific prior written permission.
	 *
	 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
	 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
	 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
	 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
	 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
	 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
	 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
	 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
	 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
	 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
	 * POSSIBILITY OF SUCH DAMAGE.
	 */
	'use strict';
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
	
	var net = __webpack_require__(!(function webpackMissingModule() { var e = new Error("Cannot find module \"net\""); e.code = 'MODULE_NOT_FOUND'; throw e; }()));
	var urlParse = __webpack_require__(275).parse;
	var pubsuffix = __webpack_require__(453);
	var Store = __webpack_require__(455).Store;
	var MemoryCookieStore = __webpack_require__(456).MemoryCookieStore;
	var pathMatch = __webpack_require__(458).pathMatch;
	var VERSION = __webpack_require__(!(function webpackMissingModule() { var e = new Error("Cannot find module \"../package.json\""); e.code = 'MODULE_NOT_FOUND'; throw e; }())).version;
	
	var punycode;
	try {
	  punycode = __webpack_require__(454);
	} catch (e) {
	  console.warn("cookie: can't load punycode; won't use punycode for domain normalization");
	}
	
	var DATE_DELIM = /[\x09\x20-\x2F\x3B-\x40\x5B-\x60\x7B-\x7E]/;
	
	// From RFC6265 S4.1.1
	// note that it excludes \x3B ";"
	var COOKIE_OCTET = /[\x21\x23-\x2B\x2D-\x3A\x3C-\x5B\x5D-\x7E]/;
	var COOKIE_OCTETS = new RegExp('^' + COOKIE_OCTET.source + '+$');
	
	var CONTROL_CHARS = /[\x00-\x1F]/;
	
	// Double quotes are part of the value (see: S4.1.1).
	// '\r', '\n' and '\0' should be treated as a terminator in the "relaxed" mode
	// (see: https://github.com/ChromiumWebApps/chromium/blob/b3d3b4da8bb94c1b2e061600df106d590fda3620/net/cookies/parsed_cookie.cc#L60)
	// '=' and ';' are attribute/values separators
	// (see: https://github.com/ChromiumWebApps/chromium/blob/b3d3b4da8bb94c1b2e061600df106d590fda3620/net/cookies/parsed_cookie.cc#L64)
	var COOKIE_PAIR = /^(([^=;]+))\s*=\s*([^\n\r\0]*)/;
	
	// Used to parse non-RFC-compliant cookies like '=abc' when given the `loose`
	// option in Cookie.parse:
	var LOOSE_COOKIE_PAIR = /^((?:=)?([^=;]*)\s*=\s*)?([^\n\r\0]*)/;
	
	// RFC6265 S4.1.1 defines path value as 'any CHAR except CTLs or ";"'
	// Note ';' is \x3B
	var PATH_VALUE = /[\x20-\x3A\x3C-\x7E]+/;
	
	var DAY_OF_MONTH = /^(\d{1,2})[^\d]*$/;
	var TIME = /^(\d{1,2})[^\d]*:(\d{1,2})[^\d]*:(\d{1,2})[^\d]*$/;
	var MONTH = /^(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)/i;
	
	var MONTH_TO_NUM = {
	  jan: 0, feb: 1, mar: 2, apr: 3, may: 4, jun: 5,
	  jul: 6, aug: 7, sep: 8, oct: 9, nov: 10, dec: 11
	};
	var NUM_TO_MONTH = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
	var NUM_TO_DAY = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];
	
	var YEAR = /^(\d{2}|\d{4})$/; // 2 to 4 digits
	
	var MAX_TIME = 2147483647000; // 31-bit max
	var MIN_TIME = 0; // 31-bit min
	
	
	// RFC6265 S5.1.1 date parser:
	function parseDate(str) {
	  if (!str) {
	    return;
	  }
	
	  /* RFC6265 S5.1.1:
	   * 2. Process each date-token sequentially in the order the date-tokens
	   * appear in the cookie-date
	   */
	  var tokens = str.split(DATE_DELIM);
	  if (!tokens) {
	    return;
	  }
	
	  var hour = null;
	  var minutes = null;
	  var seconds = null;
	  var day = null;
	  var month = null;
	  var year = null;
	
	  for (var i = 0; i < tokens.length; i++) {
	    var token = tokens[i].trim();
	    if (!token.length) {
	      continue;
	    }
	
	    var result;
	
	    /* 2.1. If the found-time flag is not set and the token matches the time
	     * production, set the found-time flag and set the hour- value,
	     * minute-value, and second-value to the numbers denoted by the digits in
	     * the date-token, respectively.  Skip the remaining sub-steps and continue
	     * to the next date-token.
	     */
	    if (seconds === null) {
	      result = TIME.exec(token);
	      if (result) {
	        hour = parseInt(result[1], 10);
	        minutes = parseInt(result[2], 10);
	        seconds = parseInt(result[3], 10);
	        /* RFC6265 S5.1.1.5:
	         * [fail if]
	         * *  the hour-value is greater than 23,
	         * *  the minute-value is greater than 59, or
	         * *  the second-value is greater than 59.
	         */
	        if (hour > 23 || minutes > 59 || seconds > 59) {
	          return;
	        }
	
	        continue;
	      }
	    }
	
	    /* 2.2. If the found-day-of-month flag is not set and the date-token matches
	     * the day-of-month production, set the found-day-of- month flag and set
	     * the day-of-month-value to the number denoted by the date-token.  Skip
	     * the remaining sub-steps and continue to the next date-token.
	     */
	    if (day === null) {
	      result = DAY_OF_MONTH.exec(token);
	      if (result) {
	        day = parseInt(result, 10);
	        /* RFC6265 S5.1.1.5:
	         * [fail if] the day-of-month-value is less than 1 or greater than 31
	         */
	        if (day < 1 || day > 31) {
	          return;
	        }
	        continue;
	      }
	    }
	
	    /* 2.3. If the found-month flag is not set and the date-token matches the
	     * month production, set the found-month flag and set the month-value to
	     * the month denoted by the date-token.  Skip the remaining sub-steps and
	     * continue to the next date-token.
	     */
	    if (month === null) {
	      result = MONTH.exec(token);
	      if (result) {
	        month = MONTH_TO_NUM[result[1].toLowerCase()];
	        continue;
	      }
	    }
	
	    /* 2.4. If the found-year flag is not set and the date-token matches the year
	     * production, set the found-year flag and set the year-value to the number
	     * denoted by the date-token.  Skip the remaining sub-steps and continue to
	     * the next date-token.
	     */
	    if (year === null) {
	      result = YEAR.exec(token);
	      if (result) {
	        year = parseInt(result[0], 10);
	        /* From S5.1.1:
	         * 3.  If the year-value is greater than or equal to 70 and less
	         * than or equal to 99, increment the year-value by 1900.
	         * 4.  If the year-value is greater than or equal to 0 and less
	         * than or equal to 69, increment the year-value by 2000.
	         */
	        if (70 <= year && year <= 99) {
	          year += 1900;
	        } else if (0 <= year && year <= 69) {
	          year += 2000;
	        }
	
	        if (year < 1601) {
	          return; // 5. ... the year-value is less than 1601
	        }
	      }
	    }
	  }
	
	  if (seconds === null || day === null || month === null || year === null) {
	    return; // 5. ... at least one of the found-day-of-month, found-month, found-
	    // year, or found-time flags is not set,
	  }
	
	  return new Date(Date.UTC(year, month, day, hour, minutes, seconds));
	}
	
	function formatDate(date) {
	  var d = date.getUTCDate();d = d >= 10 ? d : '0' + d;
	  var h = date.getUTCHours();h = h >= 10 ? h : '0' + h;
	  var m = date.getUTCMinutes();m = m >= 10 ? m : '0' + m;
	  var s = date.getUTCSeconds();s = s >= 10 ? s : '0' + s;
	  return NUM_TO_DAY[date.getUTCDay()] + ', ' + d + ' ' + NUM_TO_MONTH[date.getUTCMonth()] + ' ' + date.getUTCFullYear() + ' ' + h + ':' + m + ':' + s + ' GMT';
	}
	
	// S5.1.2 Canonicalized Host Names
	function canonicalDomain(str) {
	  if (str == null) {
	    return null;
	  }
	  str = str.trim().replace(/^\./, ''); // S4.1.2.3 & S5.2.3: ignore leading .
	
	  // convert to IDN if any non-ASCII characters
	  if (punycode && /[^\u0001-\u007f]/.test(str)) {
	    str = punycode.toASCII(str);
	  }
	
	  return str.toLowerCase();
	}
	
	// S5.1.3 Domain Matching
	function domainMatch(str, domStr, canonicalize) {
	  if (str == null || domStr == null) {
	    return null;
	  }
	  if (canonicalize !== false) {
	    str = canonicalDomain(str);
	    domStr = canonicalDomain(domStr);
	  }
	
	  /*
	   * "The domain string and the string are identical. (Note that both the
	   * domain string and the string will have been canonicalized to lower case at
	   * this point)"
	   */
	  if (str == domStr) {
	    return true;
	  }
	
	  /* "All of the following [three] conditions hold:" (order adjusted from the RFC) */
	
	  /* "* The string is a host name (i.e., not an IP address)." */
	  if (net.isIP(str)) {
	    return false;
	  }
	
	  /* "* The domain string is a suffix of the string" */
	  var idx = str.indexOf(domStr);
	  if (idx <= 0) {
	    return false; // it's a non-match (-1) or prefix (0)
	  }
	
	  // e.g "a.b.c".indexOf("b.c") === 2
	  // 5 === 3+2
	  if (str.length !== domStr.length + idx) {
	    // it's not a suffix
	    return false;
	  }
	
	  /* "* The last character of the string that is not included in the domain
	  * string is a %x2E (".") character." */
	  if (str.substr(idx - 1, 1) !== '.') {
	    return false;
	  }
	
	  return true;
	}
	
	// RFC6265 S5.1.4 Paths and Path-Match
	
	/*
	 * "The user agent MUST use an algorithm equivalent to the following algorithm
	 * to compute the default-path of a cookie:"
	 *
	 * Assumption: the path (and not query part or absolute uri) is passed in.
	 */
	function defaultPath(path) {
	  // "2. If the uri-path is empty or if the first character of the uri-path is not
	  // a %x2F ("/") character, output %x2F ("/") and skip the remaining steps.
	  if (!path || path.substr(0, 1) !== "/") {
	    return "/";
	  }
	
	  // "3. If the uri-path contains no more than one %x2F ("/") character, output
	  // %x2F ("/") and skip the remaining step."
	  if (path === "/") {
	    return path;
	  }
	
	  var rightSlash = path.lastIndexOf("/");
	  if (rightSlash === 0) {
	    return "/";
	  }
	
	  // "4. Output the characters of the uri-path from the first character up to,
	  // but not including, the right-most %x2F ("/")."
	  return path.slice(0, rightSlash);
	}
	
	function parse(str, options) {
	  if (!options || (typeof options === 'undefined' ? 'undefined' : _typeof(options)) !== 'object') {
	    options = {};
	  }
	  str = str.trim();
	
	  // We use a regex to parse the "name-value-pair" part of S5.2
	  var firstSemi = str.indexOf(';'); // S5.2 step 1
	  var pairRe = options.loose ? LOOSE_COOKIE_PAIR : COOKIE_PAIR;
	  var result = pairRe.exec(firstSemi === -1 ? str : str.substr(0, firstSemi));
	
	  // Rx satisfies the "the name string is empty" and "lacks a %x3D ("=")"
	  // constraints as well as trimming any whitespace.
	  if (!result) {
	    return;
	  }
	
	  var c = new Cookie();
	  if (result[1]) {
	    c.key = result[2].trim();
	  } else {
	    c.key = '';
	  }
	  c.value = result[3].trim();
	  if (CONTROL_CHARS.test(c.key) || CONTROL_CHARS.test(c.value)) {
	    return;
	  }
	
	  if (firstSemi === -1) {
	    return c;
	  }
	
	  // S5.2.3 "unparsed-attributes consist of the remainder of the set-cookie-string
	  // (including the %x3B (";") in question)." plus later on in the same section
	  // "discard the first ";" and trim".
	  var unparsed = str.slice(firstSemi + 1).trim();
	
	  // "If the unparsed-attributes string is empty, skip the rest of these
	  // steps."
	  if (unparsed.length === 0) {
	    return c;
	  }
	
	  /*
	   * S5.2 says that when looping over the items "[p]rocess the attribute-name
	   * and attribute-value according to the requirements in the following
	   * subsections" for every item.  Plus, for many of the individual attributes
	   * in S5.3 it says to use the "attribute-value of the last attribute in the
	   * cookie-attribute-list".  Therefore, in this implementation, we overwrite
	   * the previous value.
	   */
	  var cookie_avs = unparsed.split(';');
	  while (cookie_avs.length) {
	    var av = cookie_avs.shift().trim();
	    if (av.length === 0) {
	      // happens if ";;" appears
	      continue;
	    }
	    var av_sep = av.indexOf('=');
	    var av_key, av_value;
	
	    if (av_sep === -1) {
	      av_key = av;
	      av_value = null;
	    } else {
	      av_key = av.substr(0, av_sep);
	      av_value = av.substr(av_sep + 1);
	    }
	
	    av_key = av_key.trim().toLowerCase();
	
	    if (av_value) {
	      av_value = av_value.trim();
	    }
	
	    switch (av_key) {
	      case 'expires':
	        // S5.2.1
	        if (av_value) {
	          var exp = parseDate(av_value);
	          // "If the attribute-value failed to parse as a cookie date, ignore the
	          // cookie-av."
	          if (exp) {
	            // over and underflow not realistically a concern: V8's getTime() seems to
	            // store something larger than a 32-bit time_t (even with 32-bit node)
	            c.expires = exp;
	          }
	        }
	        break;
	
	      case 'max-age':
	        // S5.2.2
	        if (av_value) {
	          // "If the first character of the attribute-value is not a DIGIT or a "-"
	          // character ...[or]... If the remainder of attribute-value contains a
	          // non-DIGIT character, ignore the cookie-av."
	          if (/^-?[0-9]+$/.test(av_value)) {
	            var delta = parseInt(av_value, 10);
	            // "If delta-seconds is less than or equal to zero (0), let expiry-time
	            // be the earliest representable date and time."
	            c.setMaxAge(delta);
	          }
	        }
	        break;
	
	      case 'domain':
	        // S5.2.3
	        // "If the attribute-value is empty, the behavior is undefined.  However,
	        // the user agent SHOULD ignore the cookie-av entirely."
	        if (av_value) {
	          // S5.2.3 "Let cookie-domain be the attribute-value without the leading %x2E
	          // (".") character."
	          var domain = av_value.trim().replace(/^\./, '');
	          if (domain) {
	            // "Convert the cookie-domain to lower case."
	            c.domain = domain.toLowerCase();
	          }
	        }
	        break;
	
	      case 'path':
	        // S5.2.4
	        /*
	         * "If the attribute-value is empty or if the first character of the
	         * attribute-value is not %x2F ("/"):
	         *   Let cookie-path be the default-path.
	         * Otherwise:
	         *   Let cookie-path be the attribute-value."
	         *
	         * We'll represent the default-path as null since it depends on the
	         * context of the parsing.
	         */
	        c.path = av_value && av_value[0] === "/" ? av_value : null;
	        break;
	
	      case 'secure':
	        // S5.2.5
	        /*
	         * "If the attribute-name case-insensitively matches the string "Secure",
	         * the user agent MUST append an attribute to the cookie-attribute-list
	         * with an attribute-name of Secure and an empty attribute-value."
	         */
	        c.secure = true;
	        break;
	
	      case 'httponly':
	        // S5.2.6 -- effectively the same as 'secure'
	        c.httpOnly = true;
	        break;
	
	      default:
	        c.extensions = c.extensions || [];
	        c.extensions.push(av);
	        break;
	    }
	  }
	
	  return c;
	}
	
	// avoid the V8 deoptimization monster!
	function jsonParse(str) {
	  var obj;
	  try {
	    obj = JSON.parse(str);
	  } catch (e) {
	    return e;
	  }
	  return obj;
	}
	
	function fromJSON(str) {
	  if (!str) {
	    return null;
	  }
	
	  var obj;
	  if (typeof str === 'string') {
	    obj = jsonParse(str);
	    if (obj instanceof Error) {
	      return null;
	    }
	  } else {
	    // assume it's an Object
	    obj = str;
	  }
	
	  var c = new Cookie();
	  for (var i = 0; i < Cookie.serializableProperties.length; i++) {
	    var prop = Cookie.serializableProperties[i];
	    if (obj[prop] === undefined || obj[prop] === Cookie.prototype[prop]) {
	      continue; // leave as prototype default
	    }
	
	    if (prop === 'expires' || prop === 'creation' || prop === 'lastAccessed') {
	      if (obj[prop] === null) {
	        c[prop] = null;
	      } else {
	        c[prop] = obj[prop] == "Infinity" ? "Infinity" : new Date(obj[prop]);
	      }
	    } else {
	      c[prop] = obj[prop];
	    }
	  }
	
	  return c;
	}
	
	/* Section 5.4 part 2:
	 * "*  Cookies with longer paths are listed before cookies with
	 *     shorter paths.
	 *
	 *  *  Among cookies that have equal-length path fields, cookies with
	 *     earlier creation-times are listed before cookies with later
	 *     creation-times."
	 */
	
	function cookieCompare(a, b) {
	  var cmp = 0;
	
	  // descending for length: b CMP a
	  var aPathLen = a.path ? a.path.length : 0;
	  var bPathLen = b.path ? b.path.length : 0;
	  cmp = bPathLen - aPathLen;
	  if (cmp !== 0) {
	    return cmp;
	  }
	
	  // ascending for time: a CMP b
	  var aTime = a.creation ? a.creation.getTime() : MAX_TIME;
	  var bTime = b.creation ? b.creation.getTime() : MAX_TIME;
	  cmp = aTime - bTime;
	  if (cmp !== 0) {
	    return cmp;
	  }
	
	  // break ties for the same millisecond (precision of JavaScript's clock)
	  cmp = a.creationIndex - b.creationIndex;
	
	  return cmp;
	}
	
	// Gives the permutation of all possible pathMatch()es of a given path. The
	// array is in longest-to-shortest order.  Handy for indexing.
	function permutePath(path) {
	  if (path === '/') {
	    return ['/'];
	  }
	  if (path.lastIndexOf('/') === path.length - 1) {
	    path = path.substr(0, path.length - 1);
	  }
	  var permutations = [path];
	  while (path.length > 1) {
	    var lindex = path.lastIndexOf('/');
	    if (lindex === 0) {
	      break;
	    }
	    path = path.substr(0, lindex);
	    permutations.push(path);
	  }
	  permutations.push('/');
	  return permutations;
	}
	
	function getCookieContext(url) {
	  if (url instanceof Object) {
	    return url;
	  }
	  // NOTE: decodeURI will throw on malformed URIs (see GH-32).
	  // Therefore, we will just skip decoding for such URIs.
	  try {
	    url = decodeURI(url);
	  } catch (err) {
	    // Silently swallow error
	  }
	
	  return urlParse(url);
	}
	
	function Cookie(options) {
	  options = options || {};
	
	  Object.keys(options).forEach(function (prop) {
	    if (Cookie.prototype.hasOwnProperty(prop) && Cookie.prototype[prop] !== options[prop] && prop.substr(0, 1) !== '_') {
	      this[prop] = options[prop];
	    }
	  }, this);
	
	  this.creation = this.creation || new Date();
	
	  // used to break creation ties in cookieCompare():
	  Object.defineProperty(this, 'creationIndex', {
	    configurable: false,
	    enumerable: false, // important for assert.deepEqual checks
	    writable: true,
	    value: ++Cookie.cookiesCreated
	  });
	}
	
	Cookie.cookiesCreated = 0; // incremented each time a cookie is created
	
	Cookie.parse = parse;
	Cookie.fromJSON = fromJSON;
	
	Cookie.prototype.key = "";
	Cookie.prototype.value = "";
	
	// the order in which the RFC has them:
	Cookie.prototype.expires = "Infinity"; // coerces to literal Infinity
	Cookie.prototype.maxAge = null; // takes precedence over expires for TTL
	Cookie.prototype.domain = null;
	Cookie.prototype.path = null;
	Cookie.prototype.secure = false;
	Cookie.prototype.httpOnly = false;
	Cookie.prototype.extensions = null;
	
	// set by the CookieJar:
	Cookie.prototype.hostOnly = null; // boolean when set
	Cookie.prototype.pathIsDefault = null; // boolean when set
	Cookie.prototype.creation = null; // Date when set; defaulted by Cookie.parse
	Cookie.prototype.lastAccessed = null; // Date when set
	Object.defineProperty(Cookie.prototype, 'creationIndex', {
	  configurable: true,
	  enumerable: false,
	  writable: true,
	  value: 0
	});
	
	Cookie.serializableProperties = Object.keys(Cookie.prototype).filter(function (prop) {
	  return !(Cookie.prototype[prop] instanceof Function || prop === 'creationIndex' || prop.substr(0, 1) === '_');
	});
	
	Cookie.prototype.inspect = function inspect() {
	  var now = Date.now();
	  return 'Cookie="' + this.toString() + '; hostOnly=' + (this.hostOnly != null ? this.hostOnly : '?') + '; aAge=' + (this.lastAccessed ? now - this.lastAccessed.getTime() + 'ms' : '?') + '; cAge=' + (this.creation ? now - this.creation.getTime() + 'ms' : '?') + '"';
	};
	
	Cookie.prototype.toJSON = function () {
	  var obj = {};
	
	  var props = Cookie.serializableProperties;
	  for (var i = 0; i < props.length; i++) {
	    var prop = props[i];
	    if (this[prop] === Cookie.prototype[prop]) {
	      continue; // leave as prototype default
	    }
	
	    if (prop === 'expires' || prop === 'creation' || prop === 'lastAccessed') {
	      if (this[prop] === null) {
	        obj[prop] = null;
	      } else {
	        obj[prop] = this[prop] == "Infinity" ? // intentionally not ===
	        "Infinity" : this[prop].toISOString();
	      }
	    } else if (prop === 'maxAge') {
	      if (this[prop] !== null) {
	        // again, intentionally not ===
	        obj[prop] = this[prop] == Infinity || this[prop] == -Infinity ? this[prop].toString() : this[prop];
	      }
	    } else {
	      if (this[prop] !== Cookie.prototype[prop]) {
	        obj[prop] = this[prop];
	      }
	    }
	  }
	
	  return obj;
	};
	
	Cookie.prototype.clone = function () {
	  return fromJSON(this.toJSON());
	};
	
	Cookie.prototype.validate = function validate() {
	  if (!COOKIE_OCTETS.test(this.value)) {
	    return false;
	  }
	  if (this.expires != Infinity && !(this.expires instanceof Date) && !parseDate(this.expires)) {
	    return false;
	  }
	  if (this.maxAge != null && this.maxAge <= 0) {
	    return false; // "Max-Age=" non-zero-digit *DIGIT
	  }
	  if (this.path != null && !PATH_VALUE.test(this.path)) {
	    return false;
	  }
	
	  var cdomain = this.cdomain();
	  if (cdomain) {
	    if (cdomain.match(/\.$/)) {
	      return false; // S4.1.2.3 suggests that this is bad. domainMatch() tests confirm this
	    }
	    var suffix = pubsuffix.getPublicSuffix(cdomain);
	    if (suffix == null) {
	      // it's a public suffix
	      return false;
	    }
	  }
	  return true;
	};
	
	Cookie.prototype.setExpires = function setExpires(exp) {
	  if (exp instanceof Date) {
	    this.expires = exp;
	  } else {
	    this.expires = parseDate(exp) || "Infinity";
	  }
	};
	
	Cookie.prototype.setMaxAge = function setMaxAge(age) {
	  if (age === Infinity || age === -Infinity) {
	    this.maxAge = age.toString(); // so JSON.stringify() works
	  } else {
	    this.maxAge = age;
	  }
	};
	
	// gives Cookie header format
	Cookie.prototype.cookieString = function cookieString() {
	  var val = this.value;
	  if (val == null) {
	    val = '';
	  }
	  if (this.key === '') {
	    return val;
	  }
	  return this.key + '=' + val;
	};
	
	// gives Set-Cookie header format
	Cookie.prototype.toString = function toString() {
	  var str = this.cookieString();
	
	  if (this.expires != Infinity) {
	    if (this.expires instanceof Date) {
	      str += '; Expires=' + formatDate(this.expires);
	    } else {
	      str += '; Expires=' + this.expires;
	    }
	  }
	
	  if (this.maxAge != null && this.maxAge != Infinity) {
	    str += '; Max-Age=' + this.maxAge;
	  }
	
	  if (this.domain && !this.hostOnly) {
	    str += '; Domain=' + this.domain;
	  }
	  if (this.path) {
	    str += '; Path=' + this.path;
	  }
	
	  if (this.secure) {
	    str += '; Secure';
	  }
	  if (this.httpOnly) {
	    str += '; HttpOnly';
	  }
	  if (this.extensions) {
	    this.extensions.forEach(function (ext) {
	      str += '; ' + ext;
	    });
	  }
	
	  return str;
	};
	
	// TTL() partially replaces the "expiry-time" parts of S5.3 step 3 (setCookie()
	// elsewhere)
	// S5.3 says to give the "latest representable date" for which we use Infinity
	// For "expired" we use 0
	Cookie.prototype.TTL = function TTL(now) {
	  /* RFC6265 S4.1.2.2 If a cookie has both the Max-Age and the Expires
	   * attribute, the Max-Age attribute has precedence and controls the
	   * expiration date of the cookie.
	   * (Concurs with S5.3 step 3)
	   */
	  if (this.maxAge != null) {
	    return this.maxAge <= 0 ? 0 : this.maxAge * 1000;
	  }
	
	  var expires = this.expires;
	  if (expires != Infinity) {
	    if (!(expires instanceof Date)) {
	      expires = parseDate(expires) || Infinity;
	    }
	
	    if (expires == Infinity) {
	      return Infinity;
	    }
	
	    return expires.getTime() - (now || Date.now());
	  }
	
	  return Infinity;
	};
	
	// expiryTime() replaces the "expiry-time" parts of S5.3 step 3 (setCookie()
	// elsewhere)
	Cookie.prototype.expiryTime = function expiryTime(now) {
	  if (this.maxAge != null) {
	    var relativeTo = now || this.creation || new Date();
	    var age = this.maxAge <= 0 ? -Infinity : this.maxAge * 1000;
	    return relativeTo.getTime() + age;
	  }
	
	  if (this.expires == Infinity) {
	    return Infinity;
	  }
	  return this.expires.getTime();
	};
	
	// expiryDate() replaces the "expiry-time" parts of S5.3 step 3 (setCookie()
	// elsewhere), except it returns a Date
	Cookie.prototype.expiryDate = function expiryDate(now) {
	  var millisec = this.expiryTime(now);
	  if (millisec == Infinity) {
	    return new Date(MAX_TIME);
	  } else if (millisec == -Infinity) {
	    return new Date(MIN_TIME);
	  } else {
	    return new Date(millisec);
	  }
	};
	
	// This replaces the "persistent-flag" parts of S5.3 step 3
	Cookie.prototype.isPersistent = function isPersistent() {
	  return this.maxAge != null || this.expires != Infinity;
	};
	
	// Mostly S5.1.2 and S5.2.3:
	Cookie.prototype.cdomain = Cookie.prototype.canonicalizedDomain = function canonicalizedDomain() {
	  if (this.domain == null) {
	    return null;
	  }
	  return canonicalDomain(this.domain);
	};
	
	function CookieJar(store, options) {
	  if (typeof options === "boolean") {
	    options = { rejectPublicSuffixes: options };
	  } else if (options == null) {
	    options = {};
	  }
	  if (options.rejectPublicSuffixes != null) {
	    this.rejectPublicSuffixes = options.rejectPublicSuffixes;
	  }
	  if (options.looseMode != null) {
	    this.enableLooseMode = options.looseMode;
	  }
	
	  if (!store) {
	    store = new MemoryCookieStore();
	  }
	  this.store = store;
	}
	CookieJar.prototype.store = null;
	CookieJar.prototype.rejectPublicSuffixes = true;
	CookieJar.prototype.enableLooseMode = false;
	var CAN_BE_SYNC = [];
	
	CAN_BE_SYNC.push('setCookie');
	CookieJar.prototype.setCookie = function (cookie, url, options, cb) {
	  var err;
	  var context = getCookieContext(url);
	  if (options instanceof Function) {
	    cb = options;
	    options = {};
	  }
	
	  var host = canonicalDomain(context.hostname);
	  var loose = this.enableLooseMode;
	  if (options.loose != null) {
	    loose = options.loose;
	  }
	
	  // S5.3 step 1
	  if (!(cookie instanceof Cookie)) {
	    cookie = Cookie.parse(cookie, { loose: loose });
	  }
	  if (!cookie) {
	    err = new Error("Cookie failed to parse");
	    return cb(options.ignoreError ? null : err);
	  }
	
	  // S5.3 step 2
	  var now = options.now || new Date(); // will assign later to save effort in the face of errors
	
	  // S5.3 step 3: NOOP; persistent-flag and expiry-time is handled by getCookie()
	
	  // S5.3 step 4: NOOP; domain is null by default
	
	  // S5.3 step 5: public suffixes
	  if (this.rejectPublicSuffixes && cookie.domain) {
	    var suffix = pubsuffix.getPublicSuffix(cookie.cdomain());
	    if (suffix == null) {
	      // e.g. "com"
	      err = new Error("Cookie has domain set to a public suffix");
	      return cb(options.ignoreError ? null : err);
	    }
	  }
	
	  // S5.3 step 6:
	  if (cookie.domain) {
	    if (!domainMatch(host, cookie.cdomain(), false)) {
	      err = new Error("Cookie not in this host's domain. Cookie:" + cookie.cdomain() + " Request:" + host);
	      return cb(options.ignoreError ? null : err);
	    }
	
	    if (cookie.hostOnly == null) {
	      // don't reset if already set
	      cookie.hostOnly = false;
	    }
	  } else {
	    cookie.hostOnly = true;
	    cookie.domain = host;
	  }
	
	  //S5.2.4 If the attribute-value is empty or if the first character of the
	  //attribute-value is not %x2F ("/"):
	  //Let cookie-path be the default-path.
	  if (!cookie.path || cookie.path[0] !== '/') {
	    cookie.path = defaultPath(context.pathname);
	    cookie.pathIsDefault = true;
	  }
	
	  // S5.3 step 8: NOOP; secure attribute
	  // S5.3 step 9: NOOP; httpOnly attribute
	
	  // S5.3 step 10
	  if (options.http === false && cookie.httpOnly) {
	    err = new Error("Cookie is HttpOnly and this isn't an HTTP API");
	    return cb(options.ignoreError ? null : err);
	  }
	
	  var store = this.store;
	
	  if (!store.updateCookie) {
	    store.updateCookie = function (oldCookie, newCookie, cb) {
	      this.putCookie(newCookie, cb);
	    };
	  }
	
	  function withCookie(err, oldCookie) {
	    if (err) {
	      return cb(err);
	    }
	
	    var next = function next(err) {
	      if (err) {
	        return cb(err);
	      } else {
	        cb(null, cookie);
	      }
	    };
	
	    if (oldCookie) {
	      // S5.3 step 11 - "If the cookie store contains a cookie with the same name,
	      // domain, and path as the newly created cookie:"
	      if (options.http === false && oldCookie.httpOnly) {
	        // step 11.2
	        err = new Error("old Cookie is HttpOnly and this isn't an HTTP API");
	        return cb(options.ignoreError ? null : err);
	      }
	      cookie.creation = oldCookie.creation; // step 11.3
	      cookie.creationIndex = oldCookie.creationIndex; // preserve tie-breaker
	      cookie.lastAccessed = now;
	      // Step 11.4 (delete cookie) is implied by just setting the new one:
	      store.updateCookie(oldCookie, cookie, next); // step 12
	    } else {
	      cookie.creation = cookie.lastAccessed = now;
	      store.putCookie(cookie, next); // step 12
	    }
	  }
	
	  store.findCookie(cookie.domain, cookie.path, cookie.key, withCookie);
	};
	
	// RFC6365 S5.4
	CAN_BE_SYNC.push('getCookies');
	CookieJar.prototype.getCookies = function (url, options, cb) {
	  var context = getCookieContext(url);
	  if (options instanceof Function) {
	    cb = options;
	    options = {};
	  }
	
	  var host = canonicalDomain(context.hostname);
	  var path = context.pathname || '/';
	
	  var secure = options.secure;
	  if (secure == null && context.protocol && (context.protocol == 'https:' || context.protocol == 'wss:')) {
	    secure = true;
	  }
	
	  var http = options.http;
	  if (http == null) {
	    http = true;
	  }
	
	  var now = options.now || Date.now();
	  var expireCheck = options.expire !== false;
	  var allPaths = !!options.allPaths;
	  var store = this.store;
	
	  function matchingCookie(c) {
	    // "Either:
	    //   The cookie's host-only-flag is true and the canonicalized
	    //   request-host is identical to the cookie's domain.
	    // Or:
	    //   The cookie's host-only-flag is false and the canonicalized
	    //   request-host domain-matches the cookie's domain."
	    if (c.hostOnly) {
	      if (c.domain != host) {
	        return false;
	      }
	    } else {
	      if (!domainMatch(host, c.domain, false)) {
	        return false;
	      }
	    }
	
	    // "The request-uri's path path-matches the cookie's path."
	    if (!allPaths && !pathMatch(path, c.path)) {
	      return false;
	    }
	
	    // "If the cookie's secure-only-flag is true, then the request-uri's
	    // scheme must denote a "secure" protocol"
	    if (c.secure && !secure) {
	      return false;
	    }
	
	    // "If the cookie's http-only-flag is true, then exclude the cookie if the
	    // cookie-string is being generated for a "non-HTTP" API"
	    if (c.httpOnly && !http) {
	      return false;
	    }
	
	    // deferred from S5.3
	    // non-RFC: allow retention of expired cookies by choice
	    if (expireCheck && c.expiryTime() <= now) {
	      store.removeCookie(c.domain, c.path, c.key, function () {}); // result ignored
	      return false;
	    }
	
	    return true;
	  }
	
	  store.findCookies(host, allPaths ? null : path, function (err, cookies) {
	    if (err) {
	      return cb(err);
	    }
	
	    cookies = cookies.filter(matchingCookie);
	
	    // sorting of S5.4 part 2
	    if (options.sort !== false) {
	      cookies = cookies.sort(cookieCompare);
	    }
	
	    // S5.4 part 3
	    var now = new Date();
	    cookies.forEach(function (c) {
	      c.lastAccessed = now;
	    });
	    // TODO persist lastAccessed
	
	    cb(null, cookies);
	  });
	};
	
	CAN_BE_SYNC.push('getCookieString');
	CookieJar.prototype.getCookieString = function () /*..., cb*/{
	  var args = Array.prototype.slice.call(arguments, 0);
	  var cb = args.pop();
	  var next = function next(err, cookies) {
	    if (err) {
	      cb(err);
	    } else {
	      cb(null, cookies.sort(cookieCompare).map(function (c) {
	        return c.cookieString();
	      }).join('; '));
	    }
	  };
	  args.push(next);
	  this.getCookies.apply(this, args);
	};
	
	CAN_BE_SYNC.push('getSetCookieStrings');
	CookieJar.prototype.getSetCookieStrings = function () /*..., cb*/{
	  var args = Array.prototype.slice.call(arguments, 0);
	  var cb = args.pop();
	  var next = function next(err, cookies) {
	    if (err) {
	      cb(err);
	    } else {
	      cb(null, cookies.map(function (c) {
	        return c.toString();
	      }));
	    }
	  };
	  args.push(next);
	  this.getCookies.apply(this, args);
	};
	
	CAN_BE_SYNC.push('serialize');
	CookieJar.prototype.serialize = function (cb) {
	  var type = this.store.constructor.name;
	  if (type === 'Object') {
	    type = null;
	  }
	
	  // update README.md "Serialization Format" if you change this, please!
	  var serialized = {
	    // The version of tough-cookie that serialized this jar. Generally a good
	    // practice since future versions can make data import decisions based on
	    // known past behavior. When/if this matters, use `semver`.
	    version: 'tough-cookie@' + VERSION,
	
	    // add the store type, to make humans happy:
	    storeType: type,
	
	    // CookieJar configuration:
	    rejectPublicSuffixes: !!this.rejectPublicSuffixes,
	
	    // this gets filled from getAllCookies:
	    cookies: []
	  };
	
	  if (!(this.store.getAllCookies && typeof this.store.getAllCookies === 'function')) {
	    return cb(new Error('store does not support getAllCookies and cannot be serialized'));
	  }
	
	  this.store.getAllCookies(function (err, cookies) {
	    if (err) {
	      return cb(err);
	    }
	
	    serialized.cookies = cookies.map(function (cookie) {
	      // convert to serialized 'raw' cookies
	      cookie = cookie instanceof Cookie ? cookie.toJSON() : cookie;
	
	      // Remove the index so new ones get assigned during deserialization
	      delete cookie.creationIndex;
	
	      return cookie;
	    });
	
	    return cb(null, serialized);
	  });
	};
	
	// well-known name that JSON.stringify calls
	CookieJar.prototype.toJSON = function () {
	  return this.serializeSync();
	};
	
	// use the class method CookieJar.deserialize instead of calling this directly
	CAN_BE_SYNC.push('_importCookies');
	CookieJar.prototype._importCookies = function (serialized, cb) {
	  var jar = this;
	  var cookies = serialized.cookies;
	  if (!cookies || !Array.isArray(cookies)) {
	    return cb(new Error('serialized jar has no cookies array'));
	  }
	
	  function putNext(err) {
	    if (err) {
	      return cb(err);
	    }
	
	    if (!cookies.length) {
	      return cb(err, jar);
	    }
	
	    var cookie;
	    try {
	      cookie = fromJSON(cookies.shift());
	    } catch (e) {
	      return cb(e);
	    }
	
	    if (cookie === null) {
	      return putNext(null); // skip this cookie
	    }
	
	    jar.store.putCookie(cookie, putNext);
	  }
	
	  putNext();
	};
	
	CookieJar.deserialize = function (strOrObj, store, cb) {
	  if (arguments.length !== 3) {
	    // store is optional
	    cb = store;
	    store = null;
	  }
	
	  var serialized;
	  if (typeof strOrObj === 'string') {
	    serialized = jsonParse(strOrObj);
	    if (serialized instanceof Error) {
	      return cb(serialized);
	    }
	  } else {
	    serialized = strOrObj;
	  }
	
	  var jar = new CookieJar(store, serialized.rejectPublicSuffixes);
	  jar._importCookies(serialized, function (err) {
	    if (err) {
	      return cb(err);
	    }
	    cb(null, jar);
	  });
	};
	
	CookieJar.deserializeSync = function (strOrObj, store) {
	  var serialized = typeof strOrObj === 'string' ? JSON.parse(strOrObj) : strOrObj;
	  var jar = new CookieJar(store, serialized.rejectPublicSuffixes);
	
	  // catch this mistake early:
	  if (!jar.store.synchronous) {
	    throw new Error('CookieJar store is not synchronous; use async API instead.');
	  }
	
	  jar._importCookiesSync(serialized);
	  return jar;
	};
	CookieJar.fromJSON = CookieJar.deserializeSync;
	
	CAN_BE_SYNC.push('clone');
	CookieJar.prototype.clone = function (newStore, cb) {
	  if (arguments.length === 1) {
	    cb = newStore;
	    newStore = null;
	  }
	
	  this.serialize(function (err, serialized) {
	    if (err) {
	      return cb(err);
	    }
	    CookieJar.deserialize(newStore, serialized, cb);
	  });
	};
	
	// Use a closure to provide a true imperative API for synchronous stores.
	function syncWrap(method) {
	  return function () {
	    if (!this.store.synchronous) {
	      throw new Error('CookieJar store is not synchronous; use async API instead.');
	    }
	
	    var args = Array.prototype.slice.call(arguments);
	    var syncErr, syncResult;
	    args.push(function syncCb(err, result) {
	      syncErr = err;
	      syncResult = result;
	    });
	    this[method].apply(this, args);
	
	    if (syncErr) {
	      throw syncErr;
	    }
	    return syncResult;
	  };
	}
	
	// wrap all declared CAN_BE_SYNC methods in the sync wrapper
	CAN_BE_SYNC.forEach(function (method) {
	  CookieJar.prototype[method + 'Sync'] = syncWrap(method);
	});
	
	module.exports = {
	  CookieJar: CookieJar,
	  Cookie: Cookie,
	  Store: Store,
	  MemoryCookieStore: MemoryCookieStore,
	  parseDate: parseDate,
	  formatDate: formatDate,
	  parse: parse,
	  fromJSON: fromJSON,
	  domainMatch: domainMatch,
	  defaultPath: defaultPath,
	  pathMatch: pathMatch,
	  getPublicSuffix: pubsuffix.getPublicSuffix,
	  cookieCompare: cookieCompare,
	  permuteDomain: __webpack_require__(457).permuteDomain,
	  permutePath: permutePath,
	  canonicalDomain: canonicalDomain
	};

/***/ }),
/* 453 */
/***/ (function(module, exports, __webpack_require__) {

	/****************************************************
	 * AUTOMATICALLY GENERATED by generate-pubsuffix.js *
	 *                  DO NOT EDIT!                    *
	 ****************************************************/
	
	"use strict";
	
	var punycode = __webpack_require__(454);
	
	module.exports.getPublicSuffix = function getPublicSuffix(domain) {
	  /*!
	   * Copyright (c) 2015, Salesforce.com, Inc.
	   * All rights reserved.
	   *
	   * Redistribution and use in source and binary forms, with or without
	   * modification, are permitted provided that the following conditions are met:
	   *
	   * 1. Redistributions of source code must retain the above copyright notice,
	   * this list of conditions and the following disclaimer.
	   *
	   * 2. Redistributions in binary form must reproduce the above copyright notice,
	   * this list of conditions and the following disclaimer in the documentation
	   * and/or other materials provided with the distribution.
	   *
	   * 3. Neither the name of Salesforce.com nor the names of its contributors may
	   * be used to endorse or promote products derived from this software without
	   * specific prior written permission.
	   *
	   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
	   * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
	   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
	   * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
	   * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
	   * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
	   * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
	   * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
	   * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
	   * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
	   * POSSIBILITY OF SUCH DAMAGE.
	   */
	  if (!domain) {
	    return null;
	  }
	  if (domain.match(/^\./)) {
	    return null;
	  }
	  var asciiDomain = punycode.toASCII(domain);
	  var converted = false;
	  if (asciiDomain !== domain) {
	    domain = asciiDomain;
	    converted = true;
	  }
	  if (index[domain]) {
	    return null;
	  }
	
	  domain = domain.toLowerCase();
	  var parts = domain.split('.').reverse();
	
	  var suffix = '';
	  var suffixLen = 0;
	  for (var i = 0; i < parts.length; i++) {
	    var part = parts[i];
	    var starstr = '*' + suffix;
	    var partstr = part + suffix;
	
	    if (index[starstr]) {
	      // star rule matches
	      suffixLen = i + 1;
	      if (index[partstr] === false) {
	        // exception rule matches (NB: false, not undefined)
	        suffixLen--;
	      }
	    } else if (index[partstr]) {
	      // exact match, not exception
	      suffixLen = i + 1;
	    }
	
	    suffix = '.' + partstr;
	  }
	
	  if (index['*' + suffix]) {
	    // *.domain exists (e.g. *.kyoto.jp for domain='kyoto.jp');
	    return null;
	  }
	
	  suffixLen = suffixLen || 1;
	  if (parts.length > suffixLen) {
	    var publicSuffix = parts.slice(0, suffixLen + 1).reverse().join('.');
	    return converted ? punycode.toUnicode(publicSuffix) : publicSuffix;
	  }
	
	  return null;
	};
	
	// The following generated structure is used under the MPL version 2.0
	// See public-suffix.txt for more information
	
	var index = module.exports.index = Object.freeze({ "ac": true, "com.ac": true, "edu.ac": true, "gov.ac": true, "net.ac": true, "mil.ac": true, "org.ac": true, "ad": true, "nom.ad": true, "ae": true, "co.ae": true, "net.ae": true, "org.ae": true, "sch.ae": true, "ac.ae": true, "gov.ae": true, "mil.ae": true, "aero": true, "accident-investigation.aero": true, "accident-prevention.aero": true, "aerobatic.aero": true, "aeroclub.aero": true, "aerodrome.aero": true, "agents.aero": true, "aircraft.aero": true, "airline.aero": true, "airport.aero": true, "air-surveillance.aero": true, "airtraffic.aero": true, "air-traffic-control.aero": true, "ambulance.aero": true, "amusement.aero": true, "association.aero": true, "author.aero": true, "ballooning.aero": true, "broker.aero": true, "caa.aero": true, "cargo.aero": true, "catering.aero": true, "certification.aero": true, "championship.aero": true, "charter.aero": true, "civilaviation.aero": true, "club.aero": true, "conference.aero": true, "consultant.aero": true, "consulting.aero": true, "control.aero": true, "council.aero": true, "crew.aero": true, "design.aero": true, "dgca.aero": true, "educator.aero": true, "emergency.aero": true, "engine.aero": true, "engineer.aero": true, "entertainment.aero": true, "equipment.aero": true, "exchange.aero": true, "express.aero": true, "federation.aero": true, "flight.aero": true, "freight.aero": true, "fuel.aero": true, "gliding.aero": true, "government.aero": true, "groundhandling.aero": true, "group.aero": true, "hanggliding.aero": true, "homebuilt.aero": true, "insurance.aero": true, "journal.aero": true, "journalist.aero": true, "leasing.aero": true, "logistics.aero": true, "magazine.aero": true, "maintenance.aero": true, "marketplace.aero": true, "media.aero": true, "microlight.aero": true, "modelling.aero": true, "navigation.aero": true, "parachuting.aero": true, "paragliding.aero": true, "passenger-association.aero": true, "pilot.aero": true, "press.aero": true, "production.aero": true, "recreation.aero": true, "repbody.aero": true, "res.aero": true, "research.aero": true, "rotorcraft.aero": true, "safety.aero": true, "scientist.aero": true, "services.aero": true, "show.aero": true, "skydiving.aero": true, "software.aero": true, "student.aero": true, "taxi.aero": true, "trader.aero": true, "trading.aero": true, "trainer.aero": true, "union.aero": true, "workinggroup.aero": true, "works.aero": true, "af": true, "gov.af": true, "com.af": true, "org.af": true, "net.af": true, "edu.af": true, "ag": true, "com.ag": true, "org.ag": true, "net.ag": true, "co.ag": true, "nom.ag": true, "ai": true, "off.ai": true, "com.ai": true, "net.ai": true, "org.ai": true, "al": true, "com.al": true, "edu.al": true, "gov.al": true, "mil.al": true, "net.al": true, "org.al": true, "am": true, "an": true, "com.an": true, "net.an": true, "org.an": true, "edu.an": true, "ao": true, "ed.ao": true, "gv.ao": true, "og.ao": true, "co.ao": true, "pb.ao": true, "it.ao": true, "aq": true, "ar": true, "com.ar": true, "edu.ar": true, "gob.ar": true, "gov.ar": true, "int.ar": true, "mil.ar": true, "net.ar": true, "org.ar": true, "tur.ar": true, "arpa": true, "e164.arpa": true, "in-addr.arpa": true, "ip6.arpa": true, "iris.arpa": true, "uri.arpa": true, "urn.arpa": true, "as": true, "gov.as": true, "asia": true, "at": true, "ac.at": true, "co.at": true, "gv.at": true, "or.at": true, "au": true, "com.au": true, "net.au": true, "org.au": true, "edu.au": true, "gov.au": true, "asn.au": true, "id.au": true, "info.au": true, "conf.au": true, "oz.au": true, "act.au": true, "nsw.au": true, "nt.au": true, "qld.au": true, "sa.au": true, "tas.au": true, "vic.au": true, "wa.au": true, "act.edu.au": true, "nsw.edu.au": true, "nt.edu.au": true, "qld.edu.au": true, "sa.edu.au": true, "tas.edu.au": true, "vic.edu.au": true, "wa.edu.au": true, "qld.gov.au": true, "sa.gov.au": true, "tas.gov.au": true, "vic.gov.au": true, "wa.gov.au": true, "aw": true, "com.aw": true, "ax": true, "az": true, "com.az": true, "net.az": true, "int.az": true, "gov.az": true, "org.az": true, "edu.az": true, "info.az": true, "pp.az": true, "mil.az": true, "name.az": true, "pro.az": true, "biz.az": true, "ba": true, "org.ba": true, "net.ba": true, "edu.ba": true, "gov.ba": true, "mil.ba": true, "unsa.ba": true, "unbi.ba": true, "co.ba": true, "com.ba": true, "rs.ba": true, "bb": true, "biz.bb": true, "co.bb": true, "com.bb": true, "edu.bb": true, "gov.bb": true, "info.bb": true, "net.bb": true, "org.bb": true, "store.bb": true, "tv.bb": true, "*.bd": true, "be": true, "ac.be": true, "bf": true, "gov.bf": true, "bg": true, "a.bg": true, "b.bg": true, "c.bg": true, "d.bg": true, "e.bg": true, "f.bg": true, "g.bg": true, "h.bg": true, "i.bg": true, "j.bg": true, "k.bg": true, "l.bg": true, "m.bg": true, "n.bg": true, "o.bg": true, "p.bg": true, "q.bg": true, "r.bg": true, "s.bg": true, "t.bg": true, "u.bg": true, "v.bg": true, "w.bg": true, "x.bg": true, "y.bg": true, "z.bg": true, "0.bg": true, "1.bg": true, "2.bg": true, "3.bg": true, "4.bg": true, "5.bg": true, "6.bg": true, "7.bg": true, "8.bg": true, "9.bg": true, "bh": true, "com.bh": true, "edu.bh": true, "net.bh": true, "org.bh": true, "gov.bh": true, "bi": true, "co.bi": true, "com.bi": true, "edu.bi": true, "or.bi": true, "org.bi": true, "biz": true, "bj": true, "asso.bj": true, "barreau.bj": true, "gouv.bj": true, "bm": true, "com.bm": true, "edu.bm": true, "gov.bm": true, "net.bm": true, "org.bm": true, "*.bn": true, "bo": true, "com.bo": true, "edu.bo": true, "gov.bo": true, "gob.bo": true, "int.bo": true, "org.bo": true, "net.bo": true, "mil.bo": true, "tv.bo": true, "br": true, "adm.br": true, "adv.br": true, "agr.br": true, "am.br": true, "arq.br": true, "art.br": true, "ato.br": true, "b.br": true, "bio.br": true, "blog.br": true, "bmd.br": true, "cim.br": true, "cng.br": true, "cnt.br": true, "com.br": true, "coop.br": true, "ecn.br": true, "eco.br": true, "edu.br": true, "emp.br": true, "eng.br": true, "esp.br": true, "etc.br": true, "eti.br": true, "far.br": true, "flog.br": true, "fm.br": true, "fnd.br": true, "fot.br": true, "fst.br": true, "g12.br": true, "ggf.br": true, "gov.br": true, "imb.br": true, "ind.br": true, "inf.br": true, "jor.br": true, "jus.br": true, "leg.br": true, "lel.br": true, "mat.br": true, "med.br": true, "mil.br": true, "mp.br": true, "mus.br": true, "net.br": true, "*.nom.br": true, "not.br": true, "ntr.br": true, "odo.br": true, "org.br": true, "ppg.br": true, "pro.br": true, "psc.br": true, "psi.br": true, "qsl.br": true, "radio.br": true, "rec.br": true, "slg.br": true, "srv.br": true, "taxi.br": true, "teo.br": true, "tmp.br": true, "trd.br": true, "tur.br": true, "tv.br": true, "vet.br": true, "vlog.br": true, "wiki.br": true, "zlg.br": true, "bs": true, "com.bs": true, "net.bs": true, "org.bs": true, "edu.bs": true, "gov.bs": true, "bt": true, "com.bt": true, "edu.bt": true, "gov.bt": true, "net.bt": true, "org.bt": true, "bv": true, "bw": true, "co.bw": true, "org.bw": true, "by": true, "gov.by": true, "mil.by": true, "com.by": true, "of.by": true, "bz": true, "com.bz": true, "net.bz": true, "org.bz": true, "edu.bz": true, "gov.bz": true, "ca": true, "ab.ca": true, "bc.ca": true, "mb.ca": true, "nb.ca": true, "nf.ca": true, "nl.ca": true, "ns.ca": true, "nt.ca": true, "nu.ca": true, "on.ca": true, "pe.ca": true, "qc.ca": true, "sk.ca": true, "yk.ca": true, "gc.ca": true, "cat": true, "cc": true, "cd": true, "gov.cd": true, "cf": true, "cg": true, "ch": true, "ci": true, "org.ci": true, "or.ci": true, "com.ci": true, "co.ci": true, "edu.ci": true, "ed.ci": true, "ac.ci": true, "net.ci": true, "go.ci": true, "asso.ci": true, "xn--aroport-bya.ci": true, "int.ci": true, "presse.ci": true, "md.ci": true, "gouv.ci": true, "*.ck": true, "www.ck": false, "cl": true, "gov.cl": true, "gob.cl": true, "co.cl": true, "mil.cl": true, "cm": true, "co.cm": true, "com.cm": true, "gov.cm": true, "net.cm": true, "cn": true, "ac.cn": true, "com.cn": true, "edu.cn": true, "gov.cn": true, "net.cn": true, "org.cn": true, "mil.cn": true, "xn--55qx5d.cn": true, "xn--io0a7i.cn": true, "xn--od0alg.cn": true, "ah.cn": true, "bj.cn": true, "cq.cn": true, "fj.cn": true, "gd.cn": true, "gs.cn": true, "gz.cn": true, "gx.cn": true, "ha.cn": true, "hb.cn": true, "he.cn": true, "hi.cn": true, "hl.cn": true, "hn.cn": true, "jl.cn": true, "js.cn": true, "jx.cn": true, "ln.cn": true, "nm.cn": true, "nx.cn": true, "qh.cn": true, "sc.cn": true, "sd.cn": true, "sh.cn": true, "sn.cn": true, "sx.cn": true, "tj.cn": true, "xj.cn": true, "xz.cn": true, "yn.cn": true, "zj.cn": true, "hk.cn": true, "mo.cn": true, "tw.cn": true, "co": true, "arts.co": true, "com.co": true, "edu.co": true, "firm.co": true, "gov.co": true, "info.co": true, "int.co": true, "mil.co": true, "net.co": true, "nom.co": true, "org.co": true, "rec.co": true, "web.co": true, "com": true, "coop": true, "cr": true, "ac.cr": true, "co.cr": true, "ed.cr": true, "fi.cr": true, "go.cr": true, "or.cr": true, "sa.cr": true, "cu": true, "com.cu": true, "edu.cu": true, "org.cu": true, "net.cu": true, "gov.cu": true, "inf.cu": true, "cv": true, "cw": true, "com.cw": true, "edu.cw": true, "net.cw": true, "org.cw": true, "cx": true, "gov.cx": true, "ac.cy": true, "biz.cy": true, "com.cy": true, "ekloges.cy": true, "gov.cy": true, "ltd.cy": true, "name.cy": true, "net.cy": true, "org.cy": true, "parliament.cy": true, "press.cy": true, "pro.cy": true, "tm.cy": true, "cz": true, "de": true, "dj": true, "dk": true, "dm": true, "com.dm": true, "net.dm": true, "org.dm": true, "edu.dm": true, "gov.dm": true, "do": true, "art.do": true, "com.do": true, "edu.do": true, "gob.do": true, "gov.do": true, "mil.do": true, "net.do": true, "org.do": true, "sld.do": true, "web.do": true, "dz": true, "com.dz": true, "org.dz": true, "net.dz": true, "gov.dz": true, "edu.dz": true, "asso.dz": true, "pol.dz": true, "art.dz": true, "ec": true, "com.ec": true, "info.ec": true, "net.ec": true, "fin.ec": true, "k12.ec": true, "med.ec": true, "pro.ec": true, "org.ec": true, "edu.ec": true, "gov.ec": true, "gob.ec": true, "mil.ec": true, "edu": true, "ee": true, "edu.ee": true, "gov.ee": true, "riik.ee": true, "lib.ee": true, "med.ee": true, "com.ee": true, "pri.ee": true, "aip.ee": true, "org.ee": true, "fie.ee": true, "eg": true, "com.eg": true, "edu.eg": true, "eun.eg": true, "gov.eg": true, "mil.eg": true, "name.eg": true, "net.eg": true, "org.eg": true, "sci.eg": true, "*.er": true, "es": true, "com.es": true, "nom.es": true, "org.es": true, "gob.es": true, "edu.es": true, "et": true, "com.et": true, "gov.et": true, "org.et": true, "edu.et": true, "biz.et": true, "name.et": true, "info.et": true, "net.et": true, "eu": true, "fi": true, "aland.fi": true, "*.fj": true, "*.fk": true, "fm": true, "fo": true, "fr": true, "com.fr": true, "asso.fr": true, "nom.fr": true, "prd.fr": true, "presse.fr": true, "tm.fr": true, "aeroport.fr": true, "assedic.fr": true, "avocat.fr": true, "avoues.fr": true, "cci.fr": true, "chambagri.fr": true, "chirurgiens-dentistes.fr": true, "experts-comptables.fr": true, "geometre-expert.fr": true, "gouv.fr": true, "greta.fr": true, "huissier-justice.fr": true, "medecin.fr": true, "notaires.fr": true, "pharmacien.fr": true, "port.fr": true, "veterinaire.fr": true, "ga": true, "gb": true, "gd": true, "ge": true, "com.ge": true, "edu.ge": true, "gov.ge": true, "org.ge": true, "mil.ge": true, "net.ge": true, "pvt.ge": true, "gf": true, "gg": true, "co.gg": true, "net.gg": true, "org.gg": true, "gh": true, "com.gh": true, "edu.gh": true, "gov.gh": true, "org.gh": true, "mil.gh": true, "gi": true, "com.gi": true, "ltd.gi": true, "gov.gi": true, "mod.gi": true, "edu.gi": true, "org.gi": true, "gl": true, "co.gl": true, "com.gl": true, "edu.gl": true, "net.gl": true, "org.gl": true, "gm": true, "gn": true, "ac.gn": true, "com.gn": true, "edu.gn": true, "gov.gn": true, "org.gn": true, "net.gn": true, "gov": true, "gp": true, "com.gp": true, "net.gp": true, "mobi.gp": true, "edu.gp": true, "org.gp": true, "asso.gp": true, "gq": true, "gr": true, "com.gr": true, "edu.gr": true, "net.gr": true, "org.gr": true, "gov.gr": true, "gs": true, "gt": true, "com.gt": true, "edu.gt": true, "gob.gt": true, "ind.gt": true, "mil.gt": true, "net.gt": true, "org.gt": true, "*.gu": true, "gw": true, "gy": true, "co.gy": true, "com.gy": true, "net.gy": true, "hk": true, "com.hk": true, "edu.hk": true, "gov.hk": true, "idv.hk": true, "net.hk": true, "org.hk": true, "xn--55qx5d.hk": true, "xn--wcvs22d.hk": true, "xn--lcvr32d.hk": true, "xn--mxtq1m.hk": true, "xn--gmqw5a.hk": true, "xn--ciqpn.hk": true, "xn--gmq050i.hk": true, "xn--zf0avx.hk": true, "xn--io0a7i.hk": true, "xn--mk0axi.hk": true, "xn--od0alg.hk": true, "xn--od0aq3b.hk": true, "xn--tn0ag.hk": true, "xn--uc0atv.hk": true, "xn--uc0ay4a.hk": true, "hm": true, "hn": true, "com.hn": true, "edu.hn": true, "org.hn": true, "net.hn": true, "mil.hn": true, "gob.hn": true, "hr": true, "iz.hr": true, "from.hr": true, "name.hr": true, "com.hr": true, "ht": true, "com.ht": true, "shop.ht": true, "firm.ht": true, "info.ht": true, "adult.ht": true, "net.ht": true, "pro.ht": true, "org.ht": true, "med.ht": true, "art.ht": true, "coop.ht": true, "pol.ht": true, "asso.ht": true, "edu.ht": true, "rel.ht": true, "gouv.ht": true, "perso.ht": true, "hu": true, "co.hu": true, "info.hu": true, "org.hu": true, "priv.hu": true, "sport.hu": true, "tm.hu": true, "2000.hu": true, "agrar.hu": true, "bolt.hu": true, "casino.hu": true, "city.hu": true, "erotica.hu": true, "erotika.hu": true, "film.hu": true, "forum.hu": true, "games.hu": true, "hotel.hu": true, "ingatlan.hu": true, "jogasz.hu": true, "konyvelo.hu": true, "lakas.hu": true, "media.hu": true, "news.hu": true, "reklam.hu": true, "sex.hu": true, "shop.hu": true, "suli.hu": true, "szex.hu": true, "tozsde.hu": true, "utazas.hu": true, "video.hu": true, "id": true, "ac.id": true, "biz.id": true, "co.id": true, "desa.id": true, "go.id": true, "mil.id": true, "my.id": true, "net.id": true, "or.id": true, "sch.id": true, "web.id": true, "ie": true, "gov.ie": true, "il": true, "ac.il": true, "co.il": true, "gov.il": true, "idf.il": true, "k12.il": true, "muni.il": true, "net.il": true, "org.il": true, "im": true, "ac.im": true, "co.im": true, "com.im": true, "ltd.co.im": true, "net.im": true, "org.im": true, "plc.co.im": true, "tt.im": true, "tv.im": true, "in": true, "co.in": true, "firm.in": true, "net.in": true, "org.in": true, "gen.in": true, "ind.in": true, "nic.in": true, "ac.in": true, "edu.in": true, "res.in": true, "gov.in": true, "mil.in": true, "info": true, "int": true, "eu.int": true, "io": true, "com.io": true, "iq": true, "gov.iq": true, "edu.iq": true, "mil.iq": true, "com.iq": true, "org.iq": true, "net.iq": true, "ir": true, "ac.ir": true, "co.ir": true, "gov.ir": true, "id.ir": true, "net.ir": true, "org.ir": true, "sch.ir": true, "xn--mgba3a4f16a.ir": true, "xn--mgba3a4fra.ir": true, "is": true, "net.is": true, "com.is": true, "edu.is": true, "gov.is": true, "org.is": true, "int.is": true, "it": true, "gov.it": true, "edu.it": true, "abr.it": true, "abruzzo.it": true, "aosta-valley.it": true, "aostavalley.it": true, "bas.it": true, "basilicata.it": true, "cal.it": true, "calabria.it": true, "cam.it": true, "campania.it": true, "emilia-romagna.it": true, "emiliaromagna.it": true, "emr.it": true, "friuli-v-giulia.it": true, "friuli-ve-giulia.it": true, "friuli-vegiulia.it": true, "friuli-venezia-giulia.it": true, "friuli-veneziagiulia.it": true, "friuli-vgiulia.it": true, "friuliv-giulia.it": true, "friulive-giulia.it": true, "friulivegiulia.it": true, "friulivenezia-giulia.it": true, "friuliveneziagiulia.it": true, "friulivgiulia.it": true, "fvg.it": true, "laz.it": true, "lazio.it": true, "lig.it": true, "liguria.it": true, "lom.it": true, "lombardia.it": true, "lombardy.it": true, "lucania.it": true, "mar.it": true, "marche.it": true, "mol.it": true, "molise.it": true, "piedmont.it": true, "piemonte.it": true, "pmn.it": true, "pug.it": true, "puglia.it": true, "sar.it": true, "sardegna.it": true, "sardinia.it": true, "sic.it": true, "sicilia.it": true, "sicily.it": true, "taa.it": true, "tos.it": true, "toscana.it": true, "trentino-a-adige.it": true, "trentino-aadige.it": true, "trentino-alto-adige.it": true, "trentino-altoadige.it": true, "trentino-s-tirol.it": true, "trentino-stirol.it": true, "trentino-sud-tirol.it": true, "trentino-sudtirol.it": true, "trentino-sued-tirol.it": true, "trentino-suedtirol.it": true, "trentinoa-adige.it": true, "trentinoaadige.it": true, "trentinoalto-adige.it": true, "trentinoaltoadige.it": true, "trentinos-tirol.it": true, "trentinostirol.it": true, "trentinosud-tirol.it": true, "trentinosudtirol.it": true, "trentinosued-tirol.it": true, "trentinosuedtirol.it": true, "tuscany.it": true, "umb.it": true, "umbria.it": true, "val-d-aosta.it": true, "val-daosta.it": true, "vald-aosta.it": true, "valdaosta.it": true, "valle-aosta.it": true, "valle-d-aosta.it": true, "valle-daosta.it": true, "valleaosta.it": true, "valled-aosta.it": true, "valledaosta.it": true, "vallee-aoste.it": true, "valleeaoste.it": true, "vao.it": true, "vda.it": true, "ven.it": true, "veneto.it": true, "ag.it": true, "agrigento.it": true, "al.it": true, "alessandria.it": true, "alto-adige.it": true, "altoadige.it": true, "an.it": true, "ancona.it": true, "andria-barletta-trani.it": true, "andria-trani-barletta.it": true, "andriabarlettatrani.it": true, "andriatranibarletta.it": true, "ao.it": true, "aosta.it": true, "aoste.it": true, "ap.it": true, "aq.it": true, "aquila.it": true, "ar.it": true, "arezzo.it": true, "ascoli-piceno.it": true, "ascolipiceno.it": true, "asti.it": true, "at.it": true, "av.it": true, "avellino.it": true, "ba.it": true, "balsan.it": true, "bari.it": true, "barletta-trani-andria.it": true, "barlettatraniandria.it": true, "belluno.it": true, "benevento.it": true, "bergamo.it": true, "bg.it": true, "bi.it": true, "biella.it": true, "bl.it": true, "bn.it": true, "bo.it": true, "bologna.it": true, "bolzano.it": true, "bozen.it": true, "br.it": true, "brescia.it": true, "brindisi.it": true, "bs.it": true, "bt.it": true, "bz.it": true, "ca.it": true, "cagliari.it": true, "caltanissetta.it": true, "campidano-medio.it": true, "campidanomedio.it": true, "campobasso.it": true, "carbonia-iglesias.it": true, "carboniaiglesias.it": true, "carrara-massa.it": true, "carraramassa.it": true, "caserta.it": true, "catania.it": true, "catanzaro.it": true, "cb.it": true, "ce.it": true, "cesena-forli.it": true, "cesenaforli.it": true, "ch.it": true, "chieti.it": true, "ci.it": true, "cl.it": true, "cn.it": true, "co.it": true, "como.it": true, "cosenza.it": true, "cr.it": true, "cremona.it": true, "crotone.it": true, "cs.it": true, "ct.it": true, "cuneo.it": true, "cz.it": true, "dell-ogliastra.it": true, "dellogliastra.it": true, "en.it": true, "enna.it": true, "fc.it": true, "fe.it": true, "fermo.it": true, "ferrara.it": true, "fg.it": true, "fi.it": true, "firenze.it": true, "florence.it": true, "fm.it": true, "foggia.it": true, "forli-cesena.it": true, "forlicesena.it": true, "fr.it": true, "frosinone.it": true, "ge.it": true, "genoa.it": true, "genova.it": true, "go.it": true, "gorizia.it": true, "gr.it": true, "grosseto.it": true, "iglesias-carbonia.it": true, "iglesiascarbonia.it": true, "im.it": true, "imperia.it": true, "is.it": true, "isernia.it": true, "kr.it": true, "la-spezia.it": true, "laquila.it": true, "laspezia.it": true, "latina.it": true, "lc.it": true, "le.it": true, "lecce.it": true, "lecco.it": true, "li.it": true, "livorno.it": true, "lo.it": true, "lodi.it": true, "lt.it": true, "lu.it": true, "lucca.it": true, "macerata.it": true, "mantova.it": true, "massa-carrara.it": true, "massacarrara.it": true, "matera.it": true, "mb.it": true, "mc.it": true, "me.it": true, "medio-campidano.it": true, "mediocampidano.it": true, "messina.it": true, "mi.it": true, "milan.it": true, "milano.it": true, "mn.it": true, "mo.it": true, "modena.it": true, "monza-brianza.it": true, "monza-e-della-brianza.it": true, "monza.it": true, "monzabrianza.it": true, "monzaebrianza.it": true, "monzaedellabrianza.it": true, "ms.it": true, "mt.it": true, "na.it": true, "naples.it": true, "napoli.it": true, "no.it": true, "novara.it": true, "nu.it": true, "nuoro.it": true, "og.it": true, "ogliastra.it": true, "olbia-tempio.it": true, "olbiatempio.it": true, "or.it": true, "oristano.it": true, "ot.it": true, "pa.it": true, "padova.it": true, "padua.it": true, "palermo.it": true, "parma.it": true, "pavia.it": true, "pc.it": true, "pd.it": true, "pe.it": true, "perugia.it": true, "pesaro-urbino.it": true, "pesarourbino.it": true, "pescara.it": true, "pg.it": true, "pi.it": true, "piacenza.it": true, "pisa.it": true, "pistoia.it": true, "pn.it": true, "po.it": true, "pordenone.it": true, "potenza.it": true, "pr.it": true, "prato.it": true, "pt.it": true, "pu.it": true, "pv.it": true, "pz.it": true, "ra.it": true, "ragusa.it": true, "ravenna.it": true, "rc.it": true, "re.it": true, "reggio-calabria.it": true, "reggio-emilia.it": true, "reggiocalabria.it": true, "reggioemilia.it": true, "rg.it": true, "ri.it": true, "rieti.it": true, "rimini.it": true, "rm.it": true, "rn.it": true, "ro.it": true, "roma.it": true, "rome.it": true, "rovigo.it": true, "sa.it": true, "salerno.it": true, "sassari.it": true, "savona.it": true, "si.it": true, "siena.it": true, "siracusa.it": true, "so.it": true, "sondrio.it": true, "sp.it": true, "sr.it": true, "ss.it": true, "suedtirol.it": true, "sv.it": true, "ta.it": true, "taranto.it": true, "te.it": true, "tempio-olbia.it": true, "tempioolbia.it": true, "teramo.it": true, "terni.it": true, "tn.it": true, "to.it": true, "torino.it": true, "tp.it": true, "tr.it": true, "trani-andria-barletta.it": true, "trani-barletta-andria.it": true, "traniandriabarletta.it": true, "tranibarlettaandria.it": true, "trapani.it": true, "trentino.it": true, "trento.it": true, "treviso.it": true, "trieste.it": true, "ts.it": true, "turin.it": true, "tv.it": true, "ud.it": true, "udine.it": true, "urbino-pesaro.it": true, "urbinopesaro.it": true, "va.it": true, "varese.it": true, "vb.it": true, "vc.it": true, "ve.it": true, "venezia.it": true, "venice.it": true, "verbania.it": true, "vercelli.it": true, "verona.it": true, "vi.it": true, "vibo-valentia.it": true, "vibovalentia.it": true, "vicenza.it": true, "viterbo.it": true, "vr.it": true, "vs.it": true, "vt.it": true, "vv.it": true, "je": true, "co.je": true, "net.je": true, "org.je": true, "*.jm": true, "jo": true, "com.jo": true, "org.jo": true, "net.jo": true, "edu.jo": true, "sch.jo": true, "gov.jo": true, "mil.jo": true, "name.jo": true, "jobs": true, "jp": true, "ac.jp": true, "ad.jp": true, "co.jp": true, "ed.jp": true, "go.jp": true, "gr.jp": true, "lg.jp": true, "ne.jp": true, "or.jp": true, "aichi.jp": true, "akita.jp": true, "aomori.jp": true, "chiba.jp": true, "ehime.jp": true, "fukui.jp": true, "fukuoka.jp": true, "fukushima.jp": true, "gifu.jp": true, "gunma.jp": true, "hiroshima.jp": true, "hokkaido.jp": true, "hyogo.jp": true, "ibaraki.jp": true, "ishikawa.jp": true, "iwate.jp": true, "kagawa.jp": true, "kagoshima.jp": true, "kanagawa.jp": true, "kochi.jp": true, "kumamoto.jp": true, "kyoto.jp": true, "mie.jp": true, "miyagi.jp": true, "miyazaki.jp": true, "nagano.jp": true, "nagasaki.jp": true, "nara.jp": true, "niigata.jp": true, "oita.jp": true, "okayama.jp": true, "okinawa.jp": true, "osaka.jp": true, "saga.jp": true, "saitama.jp": true, "shiga.jp": true, "shimane.jp": true, "shizuoka.jp": true, "tochigi.jp": true, "tokushima.jp": true, "tokyo.jp": true, "tottori.jp": true, "toyama.jp": true, "wakayama.jp": true, "yamagata.jp": true, "yamaguchi.jp": true, "yamanashi.jp": true, "xn--4pvxs.jp": true, "xn--vgu402c.jp": true, "xn--c3s14m.jp": true, "xn--f6qx53a.jp": true, "xn--8pvr4u.jp": true, "xn--uist22h.jp": true, "xn--djrs72d6uy.jp": true, "xn--mkru45i.jp": true, "xn--0trq7p7nn.jp": true, "xn--8ltr62k.jp": true, "xn--2m4a15e.jp": true, "xn--efvn9s.jp": true, "xn--32vp30h.jp": true, "xn--4it797k.jp": true, "xn--1lqs71d.jp": true, "xn--5rtp49c.jp": true, "xn--5js045d.jp": true, "xn--ehqz56n.jp": true, "xn--1lqs03n.jp": true, "xn--qqqt11m.jp": true, "xn--kbrq7o.jp": true, "xn--pssu33l.jp": true, "xn--ntsq17g.jp": true, "xn--uisz3g.jp": true, "xn--6btw5a.jp": true, "xn--1ctwo.jp": true, "xn--6orx2r.jp": true, "xn--rht61e.jp": true, "xn--rht27z.jp": true, "xn--djty4k.jp": true, "xn--nit225k.jp": true, "xn--rht3d.jp": true, "xn--klty5x.jp": true, "xn--kltx9a.jp": true, "xn--kltp7d.jp": true, "xn--uuwu58a.jp": true, "xn--zbx025d.jp": true, "xn--ntso0iqx3a.jp": true, "xn--elqq16h.jp": true, "xn--4it168d.jp": true, "xn--klt787d.jp": true, "xn--rny31h.jp": true, "xn--7t0a264c.jp": true, "xn--5rtq34k.jp": true, "xn--k7yn95e.jp": true, "xn--tor131o.jp": true, "xn--d5qv7z876c.jp": true, "*.kawasaki.jp": true, "*.kitakyushu.jp": true, "*.kobe.jp": true, "*.nagoya.jp": true, "*.sapporo.jp": true, "*.sendai.jp": true, "*.yokohama.jp": true, "city.kawasaki.jp": false, "city.kitakyushu.jp": false, "city.kobe.jp": false, "city.nagoya.jp": false, "city.sapporo.jp": false, "city.sendai.jp": false, "city.yokohama.jp": false, "aisai.aichi.jp": true, "ama.aichi.jp": true, "anjo.aichi.jp": true, "asuke.aichi.jp": true, "chiryu.aichi.jp": true, "chita.aichi.jp": true, "fuso.aichi.jp": true, "gamagori.aichi.jp": true, "handa.aichi.jp": true, "hazu.aichi.jp": true, "hekinan.aichi.jp": true, "higashiura.aichi.jp": true, "ichinomiya.aichi.jp": true, "inazawa.aichi.jp": true, "inuyama.aichi.jp": true, "isshiki.aichi.jp": true, "iwakura.aichi.jp": true, "kanie.aichi.jp": true, "kariya.aichi.jp": true, "kasugai.aichi.jp": true, "kira.aichi.jp": true, "kiyosu.aichi.jp": true, "komaki.aichi.jp": true, "konan.aichi.jp": true, "kota.aichi.jp": true, "mihama.aichi.jp": true, "miyoshi.aichi.jp": true, "nishio.aichi.jp": true, "nisshin.aichi.jp": true, "obu.aichi.jp": true, "oguchi.aichi.jp": true, "oharu.aichi.jp": true, "okazaki.aichi.jp": true, "owariasahi.aichi.jp": true, "seto.aichi.jp": true, "shikatsu.aichi.jp": true, "shinshiro.aichi.jp": true, "shitara.aichi.jp": true, "tahara.aichi.jp": true, "takahama.aichi.jp": true, "tobishima.aichi.jp": true, "toei.aichi.jp": true, "togo.aichi.jp": true, "tokai.aichi.jp": true, "tokoname.aichi.jp": true, "toyoake.aichi.jp": true, "toyohashi.aichi.jp": true, "toyokawa.aichi.jp": true, "toyone.aichi.jp": true, "toyota.aichi.jp": true, "tsushima.aichi.jp": true, "yatomi.aichi.jp": true, "akita.akita.jp": true, "daisen.akita.jp": true, "fujisato.akita.jp": true, "gojome.akita.jp": true, "hachirogata.akita.jp": true, "happou.akita.jp": true, "higashinaruse.akita.jp": true, "honjo.akita.jp": true, "honjyo.akita.jp": true, "ikawa.akita.jp": true, "kamikoani.akita.jp": true, "kamioka.akita.jp": true, "katagami.akita.jp": true, "kazuno.akita.jp": true, "kitaakita.akita.jp": true, "kosaka.akita.jp": true, "kyowa.akita.jp": true, "misato.akita.jp": true, "mitane.akita.jp": true, "moriyoshi.akita.jp": true, "nikaho.akita.jp": true, "noshiro.akita.jp": true, "odate.akita.jp": true, "oga.akita.jp": true, "ogata.akita.jp": true, "semboku.akita.jp": true, "yokote.akita.jp": true, "yurihonjo.akita.jp": true, "aomori.aomori.jp": true, "gonohe.aomori.jp": true, "hachinohe.aomori.jp": true, "hashikami.aomori.jp": true, "hiranai.aomori.jp": true, "hirosaki.aomori.jp": true, "itayanagi.aomori.jp": true, "kuroishi.aomori.jp": true, "misawa.aomori.jp": true, "mutsu.aomori.jp": true, "nakadomari.aomori.jp": true, "noheji.aomori.jp": true, "oirase.aomori.jp": true, "owani.aomori.jp": true, "rokunohe.aomori.jp": true, "sannohe.aomori.jp": true, "shichinohe.aomori.jp": true, "shingo.aomori.jp": true, "takko.aomori.jp": true, "towada.aomori.jp": true, "tsugaru.aomori.jp": true, "tsuruta.aomori.jp": true, "abiko.chiba.jp": true, "asahi.chiba.jp": true, "chonan.chiba.jp": true, "chosei.chiba.jp": true, "choshi.chiba.jp": true, "chuo.chiba.jp": true, "funabashi.chiba.jp": true, "futtsu.chiba.jp": true, "hanamigawa.chiba.jp": true, "ichihara.chiba.jp": true, "ichikawa.chiba.jp": true, "ichinomiya.chiba.jp": true, "inzai.chiba.jp": true, "isumi.chiba.jp": true, "kamagaya.chiba.jp": true, "kamogawa.chiba.jp": true, "kashiwa.chiba.jp": true, "katori.chiba.jp": true, "katsuura.chiba.jp": true, "kimitsu.chiba.jp": true, "kisarazu.chiba.jp": true, "kozaki.chiba.jp": true, "kujukuri.chiba.jp": true, "kyonan.chiba.jp": true, "matsudo.chiba.jp": true, "midori.chiba.jp": true, "mihama.chiba.jp": true, "minamiboso.chiba.jp": true, "mobara.chiba.jp": true, "mutsuzawa.chiba.jp": true, "nagara.chiba.jp": true, "nagareyama.chiba.jp": true, "narashino.chiba.jp": true, "narita.chiba.jp": true, "noda.chiba.jp": true, "oamishirasato.chiba.jp": true, "omigawa.chiba.jp": true, "onjuku.chiba.jp": true, "otaki.chiba.jp": true, "sakae.chiba.jp": true, "sakura.chiba.jp": true, "shimofusa.chiba.jp": true, "shirako.chiba.jp": true, "shiroi.chiba.jp": true, "shisui.chiba.jp": true, "sodegaura.chiba.jp": true, "sosa.chiba.jp": true, "tako.chiba.jp": true, "tateyama.chiba.jp": true, "togane.chiba.jp": true, "tohnosho.chiba.jp": true, "tomisato.chiba.jp": true, "urayasu.chiba.jp": true, "yachimata.chiba.jp": true, "yachiyo.chiba.jp": true, "yokaichiba.chiba.jp": true, "yokoshibahikari.chiba.jp": true, "yotsukaido.chiba.jp": true, "ainan.ehime.jp": true, "honai.ehime.jp": true, "ikata.ehime.jp": true, "imabari.ehime.jp": true, "iyo.ehime.jp": true, "kamijima.ehime.jp": true, "kihoku.ehime.jp": true, "kumakogen.ehime.jp": true, "masaki.ehime.jp": true, "matsuno.ehime.jp": true, "matsuyama.ehime.jp": true, "namikata.ehime.jp": true, "niihama.ehime.jp": true, "ozu.ehime.jp": true, "saijo.ehime.jp": true, "seiyo.ehime.jp": true, "shikokuchuo.ehime.jp": true, "tobe.ehime.jp": true, "toon.ehime.jp": true, "uchiko.ehime.jp": true, "uwajima.ehime.jp": true, "yawatahama.ehime.jp": true, "echizen.fukui.jp": true, "eiheiji.fukui.jp": true, "fukui.fukui.jp": true, "ikeda.fukui.jp": true, "katsuyama.fukui.jp": true, "mihama.fukui.jp": true, "minamiechizen.fukui.jp": true, "obama.fukui.jp": true, "ohi.fukui.jp": true, "ono.fukui.jp": true, "sabae.fukui.jp": true, "sakai.fukui.jp": true, "takahama.fukui.jp": true, "tsuruga.fukui.jp": true, "wakasa.fukui.jp": true, "ashiya.fukuoka.jp": true, "buzen.fukuoka.jp": true, "chikugo.fukuoka.jp": true, "chikuho.fukuoka.jp": true, "chikujo.fukuoka.jp": true, "chikushino.fukuoka.jp": true, "chikuzen.fukuoka.jp": true, "chuo.fukuoka.jp": true, "dazaifu.fukuoka.jp": true, "fukuchi.fukuoka.jp": true, "hakata.fukuoka.jp": true, "higashi.fukuoka.jp": true, "hirokawa.fukuoka.jp": true, "hisayama.fukuoka.jp": true, "iizuka.fukuoka.jp": true, "inatsuki.fukuoka.jp": true, "kaho.fukuoka.jp": true, "kasuga.fukuoka.jp": true, "kasuya.fukuoka.jp": true, "kawara.fukuoka.jp": true, "keisen.fukuoka.jp": true, "koga.fukuoka.jp": true, "kurate.fukuoka.jp": true, "kurogi.fukuoka.jp": true, "kurume.fukuoka.jp": true, "minami.fukuoka.jp": true, "miyako.fukuoka.jp": true, "miyama.fukuoka.jp": true, "miyawaka.fukuoka.jp": true, "mizumaki.fukuoka.jp": true, "munakata.fukuoka.jp": true, "nakagawa.fukuoka.jp": true, "nakama.fukuoka.jp": true, "nishi.fukuoka.jp": true, "nogata.fukuoka.jp": true, "ogori.fukuoka.jp": true, "okagaki.fukuoka.jp": true, "okawa.fukuoka.jp": true, "oki.fukuoka.jp": true, "omuta.fukuoka.jp": true, "onga.fukuoka.jp": true, "onojo.fukuoka.jp": true, "oto.fukuoka.jp": true, "saigawa.fukuoka.jp": true, "sasaguri.fukuoka.jp": true, "shingu.fukuoka.jp": true, "shinyoshitomi.fukuoka.jp": true, "shonai.fukuoka.jp": true, "soeda.fukuoka.jp": true, "sue.fukuoka.jp": true, "tachiarai.fukuoka.jp": true, "tagawa.fukuoka.jp": true, "takata.fukuoka.jp": true, "toho.fukuoka.jp": true, "toyotsu.fukuoka.jp": true, "tsuiki.fukuoka.jp": true, "ukiha.fukuoka.jp": true, "umi.fukuoka.jp": true, "usui.fukuoka.jp": true, "yamada.fukuoka.jp": true, "yame.fukuoka.jp": true, "yanagawa.fukuoka.jp": true, "yukuhashi.fukuoka.jp": true, "aizubange.fukushima.jp": true, "aizumisato.fukushima.jp": true, "aizuwakamatsu.fukushima.jp": true, "asakawa.fukushima.jp": true, "bandai.fukushima.jp": true, "date.fukushima.jp": true, "fukushima.fukushima.jp": true, "furudono.fukushima.jp": true, "futaba.fukushima.jp": true, "hanawa.fukushima.jp": true, "higashi.fukushima.jp": true, "hirata.fukushima.jp": true, "hirono.fukushima.jp": true, "iitate.fukushima.jp": true, "inawashiro.fukushima.jp": true, "ishikawa.fukushima.jp": true, "iwaki.fukushima.jp": true, "izumizaki.fukushima.jp": true, "kagamiishi.fukushima.jp": true, "kaneyama.fukushima.jp": true, "kawamata.fukushima.jp": true, "kitakata.fukushima.jp": true, "kitashiobara.fukushima.jp": true, "koori.fukushima.jp": true, "koriyama.fukushima.jp": true, "kunimi.fukushima.jp": true, "miharu.fukushima.jp": true, "mishima.fukushima.jp": true, "namie.fukushima.jp": true, "nango.fukushima.jp": true, "nishiaizu.fukushima.jp": true, "nishigo.fukushima.jp": true, "okuma.fukushima.jp": true, "omotego.fukushima.jp": true, "ono.fukushima.jp": true, "otama.fukushima.jp": true, "samegawa.fukushima.jp": true, "shimogo.fukushima.jp": true, "shirakawa.fukushima.jp": true, "showa.fukushima.jp": true, "soma.fukushima.jp": true, "sukagawa.fukushima.jp": true, "taishin.fukushima.jp": true, "tamakawa.fukushima.jp": true, "tanagura.fukushima.jp": true, "tenei.fukushima.jp": true, "yabuki.fukushima.jp": true, "yamato.fukushima.jp": true, "yamatsuri.fukushima.jp": true, "yanaizu.fukushima.jp": true, "yugawa.fukushima.jp": true, "anpachi.gifu.jp": true, "ena.gifu.jp": true, "gifu.gifu.jp": true, "ginan.gifu.jp": true, "godo.gifu.jp": true, "gujo.gifu.jp": true, "hashima.gifu.jp": true, "hichiso.gifu.jp": true, "hida.gifu.jp": true, "higashishirakawa.gifu.jp": true, "ibigawa.gifu.jp": true, "ikeda.gifu.jp": true, "kakamigahara.gifu.jp": true, "kani.gifu.jp": true, "kasahara.gifu.jp": true, "kasamatsu.gifu.jp": true, "kawaue.gifu.jp": true, "kitagata.gifu.jp": true, "mino.gifu.jp": true, "minokamo.gifu.jp": true, "mitake.gifu.jp": true, "mizunami.gifu.jp": true, "motosu.gifu.jp": true, "nakatsugawa.gifu.jp": true, "ogaki.gifu.jp": true, "sakahogi.gifu.jp": true, "seki.gifu.jp": true, "sekigahara.gifu.jp": true, "shirakawa.gifu.jp": true, "tajimi.gifu.jp": true, "takayama.gifu.jp": true, "tarui.gifu.jp": true, "toki.gifu.jp": true, "tomika.gifu.jp": true, "wanouchi.gifu.jp": true, "yamagata.gifu.jp": true, "yaotsu.gifu.jp": true, "yoro.gifu.jp": true, "annaka.gunma.jp": true, "chiyoda.gunma.jp": true, "fujioka.gunma.jp": true, "higashiagatsuma.gunma.jp": true, "isesaki.gunma.jp": true, "itakura.gunma.jp": true, "kanna.gunma.jp": true, "kanra.gunma.jp": true, "katashina.gunma.jp": true, "kawaba.gunma.jp": true, "kiryu.gunma.jp": true, "kusatsu.gunma.jp": true, "maebashi.gunma.jp": true, "meiwa.gunma.jp": true, "midori.gunma.jp": true, "minakami.gunma.jp": true, "naganohara.gunma.jp": true, "nakanojo.gunma.jp": true, "nanmoku.gunma.jp": true, "numata.gunma.jp": true, "oizumi.gunma.jp": true, "ora.gunma.jp": true, "ota.gunma.jp": true, "shibukawa.gunma.jp": true, "shimonita.gunma.jp": true, "shinto.gunma.jp": true, "showa.gunma.jp": true, "takasaki.gunma.jp": true, "takayama.gunma.jp": true, "tamamura.gunma.jp": true, "tatebayashi.gunma.jp": true, "tomioka.gunma.jp": true, "tsukiyono.gunma.jp": true, "tsumagoi.gunma.jp": true, "ueno.gunma.jp": true, "yoshioka.gunma.jp": true, "asaminami.hiroshima.jp": true, "daiwa.hiroshima.jp": true, "etajima.hiroshima.jp": true, "fuchu.hiroshima.jp": true, "fukuyama.hiroshima.jp": true, "hatsukaichi.hiroshima.jp": true, "higashihiroshima.hiroshima.jp": true, "hongo.hiroshima.jp": true, "jinsekikogen.hiroshima.jp": true, "kaita.hiroshima.jp": true, "kui.hiroshima.jp": true, "kumano.hiroshima.jp": true, "kure.hiroshima.jp": true, "mihara.hiroshima.jp": true, "miyoshi.hiroshima.jp": true, "naka.hiroshima.jp": true, "onomichi.hiroshima.jp": true, "osakikamijima.hiroshima.jp": true, "otake.hiroshima.jp": true, "saka.hiroshima.jp": true, "sera.hiroshima.jp": true, "seranishi.hiroshima.jp": true, "shinichi.hiroshima.jp": true, "shobara.hiroshima.jp": true, "takehara.hiroshima.jp": true, "abashiri.hokkaido.jp": true, "abira.hokkaido.jp": true, "aibetsu.hokkaido.jp": true, "akabira.hokkaido.jp": true, "akkeshi.hokkaido.jp": true, "asahikawa.hokkaido.jp": true, "ashibetsu.hokkaido.jp": true, "ashoro.hokkaido.jp": true, "assabu.hokkaido.jp": true, "atsuma.hokkaido.jp": true, "bibai.hokkaido.jp": true, "biei.hokkaido.jp": true, "bifuka.hokkaido.jp": true, "bihoro.hokkaido.jp": true, "biratori.hokkaido.jp": true, "chippubetsu.hokkaido.jp": true, "chitose.hokkaido.jp": true, "date.hokkaido.jp": true, "ebetsu.hokkaido.jp": true, "embetsu.hokkaido.jp": true, "eniwa.hokkaido.jp": true, "erimo.hokkaido.jp": true, "esan.hokkaido.jp": true, "esashi.hokkaido.jp": true, "fukagawa.hokkaido.jp": true, "fukushima.hokkaido.jp": true, "furano.hokkaido.jp": true, "furubira.hokkaido.jp": true, "haboro.hokkaido.jp": true, "hakodate.hokkaido.jp": true, "hamatonbetsu.hokkaido.jp": true, "hidaka.hokkaido.jp": true, "higashikagura.hokkaido.jp": true, "higashikawa.hokkaido.jp": true, "hiroo.hokkaido.jp": true, "hokuryu.hokkaido.jp": true, "hokuto.hokkaido.jp": true, "honbetsu.hokkaido.jp": true, "horokanai.hokkaido.jp": true, "horonobe.hokkaido.jp": true, "ikeda.hokkaido.jp": true, "imakane.hokkaido.jp": true, "ishikari.hokkaido.jp": true, "iwamizawa.hokkaido.jp": true, "iwanai.hokkaido.jp": true, "kamifurano.hokkaido.jp": true, "kamikawa.hokkaido.jp": true, "kamishihoro.hokkaido.jp": true, "kamisunagawa.hokkaido.jp": true, "kamoenai.hokkaido.jp": true, "kayabe.hokkaido.jp": true, "kembuchi.hokkaido.jp": true, "kikonai.hokkaido.jp": true, "kimobetsu.hokkaido.jp": true, "kitahiroshima.hokkaido.jp": true, "kitami.hokkaido.jp": true, "kiyosato.hokkaido.jp": true, "koshimizu.hokkaido.jp": true, "kunneppu.hokkaido.jp": true, "kuriyama.hokkaido.jp": true, "kuromatsunai.hokkaido.jp": true, "kushiro.hokkaido.jp": true, "kutchan.hokkaido.jp": true, "kyowa.hokkaido.jp": true, "mashike.hokkaido.jp": true, "matsumae.hokkaido.jp": true, "mikasa.hokkaido.jp": true, "minamifurano.hokkaido.jp": true, "mombetsu.hokkaido.jp": true, "moseushi.hokkaido.jp": true, "mukawa.hokkaido.jp": true, "muroran.hokkaido.jp": true, "naie.hokkaido.jp": true, "nakagawa.hokkaido.jp": true, "nakasatsunai.hokkaido.jp": true, "nakatombetsu.hokkaido.jp": true, "nanae.hokkaido.jp": true, "nanporo.hokkaido.jp": true, "nayoro.hokkaido.jp": true, "nemuro.hokkaido.jp": true, "niikappu.hokkaido.jp": true, "niki.hokkaido.jp": true, "nishiokoppe.hokkaido.jp": true, "noboribetsu.hokkaido.jp": true, "numata.hokkaido.jp": true, "obihiro.hokkaido.jp": true, "obira.hokkaido.jp": true, "oketo.hokkaido.jp": true, "okoppe.hokkaido.jp": true, "otaru.hokkaido.jp": true, "otobe.hokkaido.jp": true, "otofuke.hokkaido.jp": true, "otoineppu.hokkaido.jp": true, "oumu.hokkaido.jp": true, "ozora.hokkaido.jp": true, "pippu.hokkaido.jp": true, "rankoshi.hokkaido.jp": true, "rebun.hokkaido.jp": true, "rikubetsu.hokkaido.jp": true, "rishiri.hokkaido.jp": true, "rishirifuji.hokkaido.jp": true, "saroma.hokkaido.jp": true, "sarufutsu.hokkaido.jp": true, "shakotan.hokkaido.jp": true, "shari.hokkaido.jp": true, "shibecha.hokkaido.jp": true, "shibetsu.hokkaido.jp": true, "shikabe.hokkaido.jp": true, "shikaoi.hokkaido.jp": true, "shimamaki.hokkaido.jp": true, "shimizu.hokkaido.jp": true, "shimokawa.hokkaido.jp": true, "shinshinotsu.hokkaido.jp": true, "shintoku.hokkaido.jp": true, "shiranuka.hokkaido.jp": true, "shiraoi.hokkaido.jp": true, "shiriuchi.hokkaido.jp": true, "sobetsu.hokkaido.jp": true, "sunagawa.hokkaido.jp": true, "taiki.hokkaido.jp": true, "takasu.hokkaido.jp": true, "takikawa.hokkaido.jp": true, "takinoue.hokkaido.jp": true, "teshikaga.hokkaido.jp": true, "tobetsu.hokkaido.jp": true, "tohma.hokkaido.jp": true, "tomakomai.hokkaido.jp": true, "tomari.hokkaido.jp": true, "toya.hokkaido.jp": true, "toyako.hokkaido.jp": true, "toyotomi.hokkaido.jp": true, "toyoura.hokkaido.jp": true, "tsubetsu.hokkaido.jp": true, "tsukigata.hokkaido.jp": true, "urakawa.hokkaido.jp": true, "urausu.hokkaido.jp": true, "uryu.hokkaido.jp": true, "utashinai.hokkaido.jp": true, "wakkanai.hokkaido.jp": true, "wassamu.hokkaido.jp": true, "yakumo.hokkaido.jp": true, "yoichi.hokkaido.jp": true, "aioi.hyogo.jp": true, "akashi.hyogo.jp": true, "ako.hyogo.jp": true, "amagasaki.hyogo.jp": true, "aogaki.hyogo.jp": true, "asago.hyogo.jp": true, "ashiya.hyogo.jp": true, "awaji.hyogo.jp": true, "fukusaki.hyogo.jp": true, "goshiki.hyogo.jp": true, "harima.hyogo.jp": true, "himeji.hyogo.jp": true, "ichikawa.hyogo.jp": true, "inagawa.hyogo.jp": true, "itami.hyogo.jp": true, "kakogawa.hyogo.jp": true, "kamigori.hyogo.jp": true, "kamikawa.hyogo.jp": true, "kasai.hyogo.jp": true, "kasuga.hyogo.jp": true, "kawanishi.hyogo.jp": true, "miki.hyogo.jp": true, "minamiawaji.hyogo.jp": true, "nishinomiya.hyogo.jp": true, "nishiwaki.hyogo.jp": true, "ono.hyogo.jp": true, "sanda.hyogo.jp": true, "sannan.hyogo.jp": true, "sasayama.hyogo.jp": true, "sayo.hyogo.jp": true, "shingu.hyogo.jp": true, "shinonsen.hyogo.jp": true, "shiso.hyogo.jp": true, "sumoto.hyogo.jp": true, "taishi.hyogo.jp": true, "taka.hyogo.jp": true, "takarazuka.hyogo.jp": true, "takasago.hyogo.jp": true, "takino.hyogo.jp": true, "tamba.hyogo.jp": true, "tatsuno.hyogo.jp": true, "toyooka.hyogo.jp": true, "yabu.hyogo.jp": true, "yashiro.hyogo.jp": true, "yoka.hyogo.jp": true, "yokawa.hyogo.jp": true, "ami.ibaraki.jp": true, "asahi.ibaraki.jp": true, "bando.ibaraki.jp": true, "chikusei.ibaraki.jp": true, "daigo.ibaraki.jp": true, "fujishiro.ibaraki.jp": true, "hitachi.ibaraki.jp": true, "hitachinaka.ibaraki.jp": true, "hitachiomiya.ibaraki.jp": true, "hitachiota.ibaraki.jp": true, "ibaraki.ibaraki.jp": true, "ina.ibaraki.jp": true, "inashiki.ibaraki.jp": true, "itako.ibaraki.jp": true, "iwama.ibaraki.jp": true, "joso.ibaraki.jp": true, "kamisu.ibaraki.jp": true, "kasama.ibaraki.jp": true, "kashima.ibaraki.jp": true, "kasumigaura.ibaraki.jp": true, "koga.ibaraki.jp": true, "miho.ibaraki.jp": true, "mito.ibaraki.jp": true, "moriya.ibaraki.jp": true, "naka.ibaraki.jp": true, "namegata.ibaraki.jp": true, "oarai.ibaraki.jp": true, "ogawa.ibaraki.jp": true, "omitama.ibaraki.jp": true, "ryugasaki.ibaraki.jp": true, "sakai.ibaraki.jp": true, "sakuragawa.ibaraki.jp": true, "shimodate.ibaraki.jp": true, "shimotsuma.ibaraki.jp": true, "shirosato.ibaraki.jp": true, "sowa.ibaraki.jp": true, "suifu.ibaraki.jp": true, "takahagi.ibaraki.jp": true, "tamatsukuri.ibaraki.jp": true, "tokai.ibaraki.jp": true, "tomobe.ibaraki.jp": true, "tone.ibaraki.jp": true, "toride.ibaraki.jp": true, "tsuchiura.ibaraki.jp": true, "tsukuba.ibaraki.jp": true, "uchihara.ibaraki.jp": true, "ushiku.ibaraki.jp": true, "yachiyo.ibaraki.jp": true, "yamagata.ibaraki.jp": true, "yawara.ibaraki.jp": true, "yuki.ibaraki.jp": true, "anamizu.ishikawa.jp": true, "hakui.ishikawa.jp": true, "hakusan.ishikawa.jp": true, "kaga.ishikawa.jp": true, "kahoku.ishikawa.jp": true, "kanazawa.ishikawa.jp": true, "kawakita.ishikawa.jp": true, "komatsu.ishikawa.jp": true, "nakanoto.ishikawa.jp": true, "nanao.ishikawa.jp": true, "nomi.ishikawa.jp": true, "nonoichi.ishikawa.jp": true, "noto.ishikawa.jp": true, "shika.ishikawa.jp": true, "suzu.ishikawa.jp": true, "tsubata.ishikawa.jp": true, "tsurugi.ishikawa.jp": true, "uchinada.ishikawa.jp": true, "wajima.ishikawa.jp": true, "fudai.iwate.jp": true, "fujisawa.iwate.jp": true, "hanamaki.iwate.jp": true, "hiraizumi.iwate.jp": true, "hirono.iwate.jp": true, "ichinohe.iwate.jp": true, "ichinoseki.iwate.jp": true, "iwaizumi.iwate.jp": true, "iwate.iwate.jp": true, "joboji.iwate.jp": true, "kamaishi.iwate.jp": true, "kanegasaki.iwate.jp": true, "karumai.iwate.jp": true, "kawai.iwate.jp": true, "kitakami.iwate.jp": true, "kuji.iwate.jp": true, "kunohe.iwate.jp": true, "kuzumaki.iwate.jp": true, "miyako.iwate.jp": true, "mizusawa.iwate.jp": true, "morioka.iwate.jp": true, "ninohe.iwate.jp": true, "noda.iwate.jp": true, "ofunato.iwate.jp": true, "oshu.iwate.jp": true, "otsuchi.iwate.jp": true, "rikuzentakata.iwate.jp": true, "shiwa.iwate.jp": true, "shizukuishi.iwate.jp": true, "sumita.iwate.jp": true, "tanohata.iwate.jp": true, "tono.iwate.jp": true, "yahaba.iwate.jp": true, "yamada.iwate.jp": true, "ayagawa.kagawa.jp": true, "higashikagawa.kagawa.jp": true, "kanonji.kagawa.jp": true, "kotohira.kagawa.jp": true, "manno.kagawa.jp": true, "marugame.kagawa.jp": true, "mitoyo.kagawa.jp": true, "naoshima.kagawa.jp": true, "sanuki.kagawa.jp": true, "tadotsu.kagawa.jp": true, "takamatsu.kagawa.jp": true, "tonosho.kagawa.jp": true, "uchinomi.kagawa.jp": true, "utazu.kagawa.jp": true, "zentsuji.kagawa.jp": true, "akune.kagoshima.jp": true, "amami.kagoshima.jp": true, "hioki.kagoshima.jp": true, "isa.kagoshima.jp": true, "isen.kagoshima.jp": true, "izumi.kagoshima.jp": true, "kagoshima.kagoshima.jp": true, "kanoya.kagoshima.jp": true, "kawanabe.kagoshima.jp": true, "kinko.kagoshima.jp": true, "kouyama.kagoshima.jp": true, "makurazaki.kagoshima.jp": true, "matsumoto.kagoshima.jp": true, "minamitane.kagoshima.jp": true, "nakatane.kagoshima.jp": true, "nishinoomote.kagoshima.jp": true, "satsumasendai.kagoshima.jp": true, "soo.kagoshima.jp": true, "tarumizu.kagoshima.jp": true, "yusui.kagoshima.jp": true, "aikawa.kanagawa.jp": true, "atsugi.kanagawa.jp": true, "ayase.kanagawa.jp": true, "chigasaki.kanagawa.jp": true, "ebina.kanagawa.jp": true, "fujisawa.kanagawa.jp": true, "hadano.kanagawa.jp": true, "hakone.kanagawa.jp": true, "hiratsuka.kanagawa.jp": true, "isehara.kanagawa.jp": true, "kaisei.kanagawa.jp": true, "kamakura.kanagawa.jp": true, "kiyokawa.kanagawa.jp": true, "matsuda.kanagawa.jp": true, "minamiashigara.kanagawa.jp": true, "miura.kanagawa.jp": true, "nakai.kanagawa.jp": true, "ninomiya.kanagawa.jp": true, "odawara.kanagawa.jp": true, "oi.kanagawa.jp": true, "oiso.kanagawa.jp": true, "sagamihara.kanagawa.jp": true, "samukawa.kanagawa.jp": true, "tsukui.kanagawa.jp": true, "yamakita.kanagawa.jp": true, "yamato.kanagawa.jp": true, "yokosuka.kanagawa.jp": true, "yugawara.kanagawa.jp": true, "zama.kanagawa.jp": true, "zushi.kanagawa.jp": true, "aki.kochi.jp": true, "geisei.kochi.jp": true, "hidaka.kochi.jp": true, "higashitsuno.kochi.jp": true, "ino.kochi.jp": true, "kagami.kochi.jp": true, "kami.kochi.jp": true, "kitagawa.kochi.jp": true, "kochi.kochi.jp": true, "mihara.kochi.jp": true, "motoyama.kochi.jp": true, "muroto.kochi.jp": true, "nahari.kochi.jp": true, "nakamura.kochi.jp": true, "nankoku.kochi.jp": true, "nishitosa.kochi.jp": true, "niyodogawa.kochi.jp": true, "ochi.kochi.jp": true, "okawa.kochi.jp": true, "otoyo.kochi.jp": true, "otsuki.kochi.jp": true, "sakawa.kochi.jp": true, "sukumo.kochi.jp": true, "susaki.kochi.jp": true, "tosa.kochi.jp": true, "tosashimizu.kochi.jp": true, "toyo.kochi.jp": true, "tsuno.kochi.jp": true, "umaji.kochi.jp": true, "yasuda.kochi.jp": true, "yusuhara.kochi.jp": true, "amakusa.kumamoto.jp": true, "arao.kumamoto.jp": true, "aso.kumamoto.jp": true, "choyo.kumamoto.jp": true, "gyokuto.kumamoto.jp": true, "hitoyoshi.kumamoto.jp": true, "kamiamakusa.kumamoto.jp": true, "kashima.kumamoto.jp": true, "kikuchi.kumamoto.jp": true, "kosa.kumamoto.jp": true, "kumamoto.kumamoto.jp": true, "mashiki.kumamoto.jp": true, "mifune.kumamoto.jp": true, "minamata.kumamoto.jp": true, "minamioguni.kumamoto.jp": true, "nagasu.kumamoto.jp": true, "nishihara.kumamoto.jp": true, "oguni.kumamoto.jp": true, "ozu.kumamoto.jp": true, "sumoto.kumamoto.jp": true, "takamori.kumamoto.jp": true, "uki.kumamoto.jp": true, "uto.kumamoto.jp": true, "yamaga.kumamoto.jp": true, "yamato.kumamoto.jp": true, "yatsushiro.kumamoto.jp": true, "ayabe.kyoto.jp": true, "fukuchiyama.kyoto.jp": true, "higashiyama.kyoto.jp": true, "ide.kyoto.jp": true, "ine.kyoto.jp": true, "joyo.kyoto.jp": true, "kameoka.kyoto.jp": true, "kamo.kyoto.jp": true, "kita.kyoto.jp": true, "kizu.kyoto.jp": true, "kumiyama.kyoto.jp": true, "kyotamba.kyoto.jp": true, "kyotanabe.kyoto.jp": true, "kyotango.kyoto.jp": true, "maizuru.kyoto.jp": true, "minami.kyoto.jp": true, "minamiyamashiro.kyoto.jp": true, "miyazu.kyoto.jp": true, "muko.kyoto.jp": true, "nagaokakyo.kyoto.jp": true, "nakagyo.kyoto.jp": true, "nantan.kyoto.jp": true, "oyamazaki.kyoto.jp": true, "sakyo.kyoto.jp": true, "seika.kyoto.jp": true, "tanabe.kyoto.jp": true, "uji.kyoto.jp": true, "ujitawara.kyoto.jp": true, "wazuka.kyoto.jp": true, "yamashina.kyoto.jp": true, "yawata.kyoto.jp": true, "asahi.mie.jp": true, "inabe.mie.jp": true, "ise.mie.jp": true, "kameyama.mie.jp": true, "kawagoe.mie.jp": true, "kiho.mie.jp": true, "kisosaki.mie.jp": true, "kiwa.mie.jp": true, "komono.mie.jp": true, "kumano.mie.jp": true, "kuwana.mie.jp": true, "matsusaka.mie.jp": true, "meiwa.mie.jp": true, "mihama.mie.jp": true, "minamiise.mie.jp": true, "misugi.mie.jp": true, "miyama.mie.jp": true, "nabari.mie.jp": true, "shima.mie.jp": true, "suzuka.mie.jp": true, "tado.mie.jp": true, "taiki.mie.jp": true, "taki.mie.jp": true, "tamaki.mie.jp": true, "toba.mie.jp": true, "tsu.mie.jp": true, "udono.mie.jp": true, "ureshino.mie.jp": true, "watarai.mie.jp": true, "yokkaichi.mie.jp": true, "furukawa.miyagi.jp": true, "higashimatsushima.miyagi.jp": true, "ishinomaki.miyagi.jp": true, "iwanuma.miyagi.jp": true, "kakuda.miyagi.jp": true, "kami.miyagi.jp": true, "kawasaki.miyagi.jp": true, "kesennuma.miyagi.jp": true, "marumori.miyagi.jp": true, "matsushima.miyagi.jp": true, "minamisanriku.miyagi.jp": true, "misato.miyagi.jp": true, "murata.miyagi.jp": true, "natori.miyagi.jp": true, "ogawara.miyagi.jp": true, "ohira.miyagi.jp": true, "onagawa.miyagi.jp": true, "osaki.miyagi.jp": true, "rifu.miyagi.jp": true, "semine.miyagi.jp": true, "shibata.miyagi.jp": true, "shichikashuku.miyagi.jp": true, "shikama.miyagi.jp": true, "shiogama.miyagi.jp": true, "shiroishi.miyagi.jp": true, "tagajo.miyagi.jp": true, "taiwa.miyagi.jp": true, "tome.miyagi.jp": true, "tomiya.miyagi.jp": true, "wakuya.miyagi.jp": true, "watari.miyagi.jp": true, "yamamoto.miyagi.jp": true, "zao.miyagi.jp": true, "aya.miyazaki.jp": true, "ebino.miyazaki.jp": true, "gokase.miyazaki.jp": true, "hyuga.miyazaki.jp": true, "kadogawa.miyazaki.jp": true, "kawaminami.miyazaki.jp": true, "kijo.miyazaki.jp": true, "kitagawa.miyazaki.jp": true, "kitakata.miyazaki.jp": true, "kitaura.miyazaki.jp": true, "kobayashi.miyazaki.jp": true, "kunitomi.miyazaki.jp": true, "kushima.miyazaki.jp": true, "mimata.miyazaki.jp": true, "miyakonojo.miyazaki.jp": true, "miyazaki.miyazaki.jp": true, "morotsuka.miyazaki.jp": true, "nichinan.miyazaki.jp": true, "nishimera.miyazaki.jp": true, "nobeoka.miyazaki.jp": true, "saito.miyazaki.jp": true, "shiiba.miyazaki.jp": true, "shintomi.miyazaki.jp": true, "takaharu.miyazaki.jp": true, "takanabe.miyazaki.jp": true, "takazaki.miyazaki.jp": true, "tsuno.miyazaki.jp": true, "achi.nagano.jp": true, "agematsu.nagano.jp": true, "anan.nagano.jp": true, "aoki.nagano.jp": true, "asahi.nagano.jp": true, "azumino.nagano.jp": true, "chikuhoku.nagano.jp": true, "chikuma.nagano.jp": true, "chino.nagano.jp": true, "fujimi.nagano.jp": true, "hakuba.nagano.jp": true, "hara.nagano.jp": true, "hiraya.nagano.jp": true, "iida.nagano.jp": true, "iijima.nagano.jp": true, "iiyama.nagano.jp": true, "iizuna.nagano.jp": true, "ikeda.nagano.jp": true, "ikusaka.nagano.jp": true, "ina.nagano.jp": true, "karuizawa.nagano.jp": true, "kawakami.nagano.jp": true, "kiso.nagano.jp": true, "kisofukushima.nagano.jp": true, "kitaaiki.nagano.jp": true, "komagane.nagano.jp": true, "komoro.nagano.jp": true, "matsukawa.nagano.jp": true, "matsumoto.nagano.jp": true, "miasa.nagano.jp": true, "minamiaiki.nagano.jp": true, "minamimaki.nagano.jp": true, "minamiminowa.nagano.jp": true, "minowa.nagano.jp": true, "miyada.nagano.jp": true, "miyota.nagano.jp": true, "mochizuki.nagano.jp": true, "nagano.nagano.jp": true, "nagawa.nagano.jp": true, "nagiso.nagano.jp": true, "nakagawa.nagano.jp": true, "nakano.nagano.jp": true, "nozawaonsen.nagano.jp": true, "obuse.nagano.jp": true, "ogawa.nagano.jp": true, "okaya.nagano.jp": true, "omachi.nagano.jp": true, "omi.nagano.jp": true, "ookuwa.nagano.jp": true, "ooshika.nagano.jp": true, "otaki.nagano.jp": true, "otari.nagano.jp": true, "sakae.nagano.jp": true, "sakaki.nagano.jp": true, "saku.nagano.jp": true, "sakuho.nagano.jp": true, "shimosuwa.nagano.jp": true, "shinanomachi.nagano.jp": true, "shiojiri.nagano.jp": true, "suwa.nagano.jp": true, "suzaka.nagano.jp": true, "takagi.nagano.jp": true, "takamori.nagano.jp": true, "takayama.nagano.jp": true, "tateshina.nagano.jp": true, "tatsuno.nagano.jp": true, "togakushi.nagano.jp": true, "togura.nagano.jp": true, "tomi.nagano.jp": true, "ueda.nagano.jp": true, "wada.nagano.jp": true, "yamagata.nagano.jp": true, "yamanouchi.nagano.jp": true, "yasaka.nagano.jp": true, "yasuoka.nagano.jp": true, "chijiwa.nagasaki.jp": true, "futsu.nagasaki.jp": true, "goto.nagasaki.jp": true, "hasami.nagasaki.jp": true, "hirado.nagasaki.jp": true, "iki.nagasaki.jp": true, "isahaya.nagasaki.jp": true, "kawatana.nagasaki.jp": true, "kuchinotsu.nagasaki.jp": true, "matsuura.nagasaki.jp": true, "nagasaki.nagasaki.jp": true, "obama.nagasaki.jp": true, "omura.nagasaki.jp": true, "oseto.nagasaki.jp": true, "saikai.nagasaki.jp": true, "sasebo.nagasaki.jp": true, "seihi.nagasaki.jp": true, "shimabara.nagasaki.jp": true, "shinkamigoto.nagasaki.jp": true, "togitsu.nagasaki.jp": true, "tsushima.nagasaki.jp": true, "unzen.nagasaki.jp": true, "ando.nara.jp": true, "gose.nara.jp": true, "heguri.nara.jp": true, "higashiyoshino.nara.jp": true, "ikaruga.nara.jp": true, "ikoma.nara.jp": true, "kamikitayama.nara.jp": true, "kanmaki.nara.jp": true, "kashiba.nara.jp": true, "kashihara.nara.jp": true, "katsuragi.nara.jp": true, "kawai.nara.jp": true, "kawakami.nara.jp": true, "kawanishi.nara.jp": true, "koryo.nara.jp": true, "kurotaki.nara.jp": true, "mitsue.nara.jp": true, "miyake.nara.jp": true, "nara.nara.jp": true, "nosegawa.nara.jp": true, "oji.nara.jp": true, "ouda.nara.jp": true, "oyodo.nara.jp": true, "sakurai.nara.jp": true, "sango.nara.jp": true, "shimoichi.nara.jp": true, "shimokitayama.nara.jp": true, "shinjo.nara.jp": true, "soni.nara.jp": true, "takatori.nara.jp": true, "tawaramoto.nara.jp": true, "tenkawa.nara.jp": true, "tenri.nara.jp": true, "uda.nara.jp": true, "yamatokoriyama.nara.jp": true, "yamatotakada.nara.jp": true, "yamazoe.nara.jp": true, "yoshino.nara.jp": true, "aga.niigata.jp": true, "agano.niigata.jp": true, "gosen.niigata.jp": true, "itoigawa.niigata.jp": true, "izumozaki.niigata.jp": true, "joetsu.niigata.jp": true, "kamo.niigata.jp": true, "kariwa.niigata.jp": true, "kashiwazaki.niigata.jp": true, "minamiuonuma.niigata.jp": true, "mitsuke.niigata.jp": true, "muika.niigata.jp": true, "murakami.niigata.jp": true, "myoko.niigata.jp": true, "nagaoka.niigata.jp": true, "niigata.niigata.jp": true, "ojiya.niigata.jp": true, "omi.niigata.jp": true, "sado.niigata.jp": true, "sanjo.niigata.jp": true, "seiro.niigata.jp": true, "seirou.niigata.jp": true, "sekikawa.niigata.jp": true, "shibata.niigata.jp": true, "tagami.niigata.jp": true, "tainai.niigata.jp": true, "tochio.niigata.jp": true, "tokamachi.niigata.jp": true, "tsubame.niigata.jp": true, "tsunan.niigata.jp": true, "uonuma.niigata.jp": true, "yahiko.niigata.jp": true, "yoita.niigata.jp": true, "yuzawa.niigata.jp": true, "beppu.oita.jp": true, "bungoono.oita.jp": true, "bungotakada.oita.jp": true, "hasama.oita.jp": true, "hiji.oita.jp": true, "himeshima.oita.jp": true, "hita.oita.jp": true, "kamitsue.oita.jp": true, "kokonoe.oita.jp": true, "kuju.oita.jp": true, "kunisaki.oita.jp": true, "kusu.oita.jp": true, "oita.oita.jp": true, "saiki.oita.jp": true, "taketa.oita.jp": true, "tsukumi.oita.jp": true, "usa.oita.jp": true, "usuki.oita.jp": true, "yufu.oita.jp": true, "akaiwa.okayama.jp": true, "asakuchi.okayama.jp": true, "bizen.okayama.jp": true, "hayashima.okayama.jp": true, "ibara.okayama.jp": true, "kagamino.okayama.jp": true, "kasaoka.okayama.jp": true, "kibichuo.okayama.jp": true, "kumenan.okayama.jp": true, "kurashiki.okayama.jp": true, "maniwa.okayama.jp": true, "misaki.okayama.jp": true, "nagi.okayama.jp": true, "niimi.okayama.jp": true, "nishiawakura.okayama.jp": true, "okayama.okayama.jp": true, "satosho.okayama.jp": true, "setouchi.okayama.jp": true, "shinjo.okayama.jp": true, "shoo.okayama.jp": true, "soja.okayama.jp": true, "takahashi.okayama.jp": true, "tamano.okayama.jp": true, "tsuyama.okayama.jp": true, "wake.okayama.jp": true, "yakage.okayama.jp": true, "aguni.okinawa.jp": true, "ginowan.okinawa.jp": true, "ginoza.okinawa.jp": true, "gushikami.okinawa.jp": true, "haebaru.okinawa.jp": true, "higashi.okinawa.jp": true, "hirara.okinawa.jp": true, "iheya.okinawa.jp": true, "ishigaki.okinawa.jp": true, "ishikawa.okinawa.jp": true, "itoman.okinawa.jp": true, "izena.okinawa.jp": true, "kadena.okinawa.jp": true, "kin.okinawa.jp": true, "kitadaito.okinawa.jp": true, "kitanakagusuku.okinawa.jp": true, "kumejima.okinawa.jp": true, "kunigami.okinawa.jp": true, "minamidaito.okinawa.jp": true, "motobu.okinawa.jp": true, "nago.okinawa.jp": true, "naha.okinawa.jp": true, "nakagusuku.okinawa.jp": true, "nakijin.okinawa.jp": true, "nanjo.okinawa.jp": true, "nishihara.okinawa.jp": true, "ogimi.okinawa.jp": true, "okinawa.okinawa.jp": true, "onna.okinawa.jp": true, "shimoji.okinawa.jp": true, "taketomi.okinawa.jp": true, "tarama.okinawa.jp": true, "tokashiki.okinawa.jp": true, "tomigusuku.okinawa.jp": true, "tonaki.okinawa.jp": true, "urasoe.okinawa.jp": true, "uruma.okinawa.jp": true, "yaese.okinawa.jp": true, "yomitan.okinawa.jp": true, "yonabaru.okinawa.jp": true, "yonaguni.okinawa.jp": true, "zamami.okinawa.jp": true, "abeno.osaka.jp": true, "chihayaakasaka.osaka.jp": true, "chuo.osaka.jp": true, "daito.osaka.jp": true, "fujiidera.osaka.jp": true, "habikino.osaka.jp": true, "hannan.osaka.jp": true, "higashiosaka.osaka.jp": true, "higashisumiyoshi.osaka.jp": true, "higashiyodogawa.osaka.jp": true, "hirakata.osaka.jp": true, "ibaraki.osaka.jp": true, "ikeda.osaka.jp": true, "izumi.osaka.jp": true, "izumiotsu.osaka.jp": true, "izumisano.osaka.jp": true, "kadoma.osaka.jp": true, "kaizuka.osaka.jp": true, "kanan.osaka.jp": true, "kashiwara.osaka.jp": true, "katano.osaka.jp": true, "kawachinagano.osaka.jp": true, "kishiwada.osaka.jp": true, "kita.osaka.jp": true, "kumatori.osaka.jp": true, "matsubara.osaka.jp": true, "minato.osaka.jp": true, "minoh.osaka.jp": true, "misaki.osaka.jp": true, "moriguchi.osaka.jp": true, "neyagawa.osaka.jp": true, "nishi.osaka.jp": true, "nose.osaka.jp": true, "osakasayama.osaka.jp": true, "sakai.osaka.jp": true, "sayama.osaka.jp": true, "sennan.osaka.jp": true, "settsu.osaka.jp": true, "shijonawate.osaka.jp": true, "shimamoto.osaka.jp": true, "suita.osaka.jp": true, "tadaoka.osaka.jp": true, "taishi.osaka.jp": true, "tajiri.osaka.jp": true, "takaishi.osaka.jp": true, "takatsuki.osaka.jp": true, "tondabayashi.osaka.jp": true, "toyonaka.osaka.jp": true, "toyono.osaka.jp": true, "yao.osaka.jp": true, "ariake.saga.jp": true, "arita.saga.jp": true, "fukudomi.saga.jp": true, "genkai.saga.jp": true, "hamatama.saga.jp": true, "hizen.saga.jp": true, "imari.saga.jp": true, "kamimine.saga.jp": true, "kanzaki.saga.jp": true, "karatsu.saga.jp": true, "kashima.saga.jp": true, "kitagata.saga.jp": true, "kitahata.saga.jp": true, "kiyama.saga.jp": true, "kouhoku.saga.jp": true, "kyuragi.saga.jp": true, "nishiarita.saga.jp": true, "ogi.saga.jp": true, "omachi.saga.jp": true, "ouchi.saga.jp": true, "saga.saga.jp": true, "shiroishi.saga.jp": true, "taku.saga.jp": true, "tara.saga.jp": true, "tosu.saga.jp": true, "yoshinogari.saga.jp": true, "arakawa.saitama.jp": true, "asaka.saitama.jp": true, "chichibu.saitama.jp": true, "fujimi.saitama.jp": true, "fujimino.saitama.jp": true, "fukaya.saitama.jp": true, "hanno.saitama.jp": true, "hanyu.saitama.jp": true, "hasuda.saitama.jp": true, "hatogaya.saitama.jp": true, "hatoyama.saitama.jp": true, "hidaka.saitama.jp": true, "higashichichibu.saitama.jp": true, "higashimatsuyama.saitama.jp": true, "honjo.saitama.jp": true, "ina.saitama.jp": true, "iruma.saitama.jp": true, "iwatsuki.saitama.jp": true, "kamiizumi.saitama.jp": true, "kamikawa.saitama.jp": true, "kamisato.saitama.jp": true, "kasukabe.saitama.jp": true, "kawagoe.saitama.jp": true, "kawaguchi.saitama.jp": true, "kawajima.saitama.jp": true, "kazo.saitama.jp": true, "kitamoto.saitama.jp": true, "koshigaya.saitama.jp": true, "kounosu.saitama.jp": true, "kuki.saitama.jp": true, "kumagaya.saitama.jp": true, "matsubushi.saitama.jp": true, "minano.saitama.jp": true, "misato.saitama.jp": true, "miyashiro.saitama.jp": true, "miyoshi.saitama.jp": true, "moroyama.saitama.jp": true, "nagatoro.saitama.jp": true, "namegawa.saitama.jp": true, "niiza.saitama.jp": true, "ogano.saitama.jp": true, "ogawa.saitama.jp": true, "ogose.saitama.jp": true, "okegawa.saitama.jp": true, "omiya.saitama.jp": true, "otaki.saitama.jp": true, "ranzan.saitama.jp": true, "ryokami.saitama.jp": true, "saitama.saitama.jp": true, "sakado.saitama.jp": true, "satte.saitama.jp": true, "sayama.saitama.jp": true, "shiki.saitama.jp": true, "shiraoka.saitama.jp": true, "soka.saitama.jp": true, "sugito.saitama.jp": true, "toda.saitama.jp": true, "tokigawa.saitama.jp": true, "tokorozawa.saitama.jp": true, "tsurugashima.saitama.jp": true, "urawa.saitama.jp": true, "warabi.saitama.jp": true, "yashio.saitama.jp": true, "yokoze.saitama.jp": true, "yono.saitama.jp": true, "yorii.saitama.jp": true, "yoshida.saitama.jp": true, "yoshikawa.saitama.jp": true, "yoshimi.saitama.jp": true, "aisho.shiga.jp": true, "gamo.shiga.jp": true, "higashiomi.shiga.jp": true, "hikone.shiga.jp": true, "koka.shiga.jp": true, "konan.shiga.jp": true, "kosei.shiga.jp": true, "koto.shiga.jp": true, "kusatsu.shiga.jp": true, "maibara.shiga.jp": true, "moriyama.shiga.jp": true, "nagahama.shiga.jp": true, "nishiazai.shiga.jp": true, "notogawa.shiga.jp": true, "omihachiman.shiga.jp": true, "otsu.shiga.jp": true, "ritto.shiga.jp": true, "ryuoh.shiga.jp": true, "takashima.shiga.jp": true, "takatsuki.shiga.jp": true, "torahime.shiga.jp": true, "toyosato.shiga.jp": true, "yasu.shiga.jp": true, "akagi.shimane.jp": true, "ama.shimane.jp": true, "gotsu.shimane.jp": true, "hamada.shimane.jp": true, "higashiizumo.shimane.jp": true, "hikawa.shimane.jp": true, "hikimi.shimane.jp": true, "izumo.shimane.jp": true, "kakinoki.shimane.jp": true, "masuda.shimane.jp": true, "matsue.shimane.jp": true, "misato.shimane.jp": true, "nishinoshima.shimane.jp": true, "ohda.shimane.jp": true, "okinoshima.shimane.jp": true, "okuizumo.shimane.jp": true, "shimane.shimane.jp": true, "tamayu.shimane.jp": true, "tsuwano.shimane.jp": true, "unnan.shimane.jp": true, "yakumo.shimane.jp": true, "yasugi.shimane.jp": true, "yatsuka.shimane.jp": true, "arai.shizuoka.jp": true, "atami.shizuoka.jp": true, "fuji.shizuoka.jp": true, "fujieda.shizuoka.jp": true, "fujikawa.shizuoka.jp": true, "fujinomiya.shizuoka.jp": true, "fukuroi.shizuoka.jp": true, "gotemba.shizuoka.jp": true, "haibara.shizuoka.jp": true, "hamamatsu.shizuoka.jp": true, "higashiizu.shizuoka.jp": true, "ito.shizuoka.jp": true, "iwata.shizuoka.jp": true, "izu.shizuoka.jp": true, "izunokuni.shizuoka.jp": true, "kakegawa.shizuoka.jp": true, "kannami.shizuoka.jp": true, "kawanehon.shizuoka.jp": true, "kawazu.shizuoka.jp": true, "kikugawa.shizuoka.jp": true, "kosai.shizuoka.jp": true, "makinohara.shizuoka.jp": true, "matsuzaki.shizuoka.jp": true, "minamiizu.shizuoka.jp": true, "mishima.shizuoka.jp": true, "morimachi.shizuoka.jp": true, "nishiizu.shizuoka.jp": true, "numazu.shizuoka.jp": true, "omaezaki.shizuoka.jp": true, "shimada.shizuoka.jp": true, "shimizu.shizuoka.jp": true, "shimoda.shizuoka.jp": true, "shizuoka.shizuoka.jp": true, "susono.shizuoka.jp": true, "yaizu.shizuoka.jp": true, "yoshida.shizuoka.jp": true, "ashikaga.tochigi.jp": true, "bato.tochigi.jp": true, "haga.tochigi.jp": true, "ichikai.tochigi.jp": true, "iwafune.tochigi.jp": true, "kaminokawa.tochigi.jp": true, "kanuma.tochigi.jp": true, "karasuyama.tochigi.jp": true, "kuroiso.tochigi.jp": true, "mashiko.tochigi.jp": true, "mibu.tochigi.jp": true, "moka.tochigi.jp": true, "motegi.tochigi.jp": true, "nasu.tochigi.jp": true, "nasushiobara.tochigi.jp": true, "nikko.tochigi.jp": true, "nishikata.tochigi.jp": true, "nogi.tochigi.jp": true, "ohira.tochigi.jp": true, "ohtawara.tochigi.jp": true, "oyama.tochigi.jp": true, "sakura.tochigi.jp": true, "sano.tochigi.jp": true, "shimotsuke.tochigi.jp": true, "shioya.tochigi.jp": true, "takanezawa.tochigi.jp": true, "tochigi.tochigi.jp": true, "tsuga.tochigi.jp": true, "ujiie.tochigi.jp": true, "utsunomiya.tochigi.jp": true, "yaita.tochigi.jp": true, "aizumi.tokushima.jp": true, "anan.tokushima.jp": true, "ichiba.tokushima.jp": true, "itano.tokushima.jp": true, "kainan.tokushima.jp": true, "komatsushima.tokushima.jp": true, "matsushige.tokushima.jp": true, "mima.tokushima.jp": true, "minami.tokushima.jp": true, "miyoshi.tokushima.jp": true, "mugi.tokushima.jp": true, "nakagawa.tokushima.jp": true, "naruto.tokushima.jp": true, "sanagochi.tokushima.jp": true, "shishikui.tokushima.jp": true, "tokushima.tokushima.jp": true, "wajiki.tokushima.jp": true, "adachi.tokyo.jp": true, "akiruno.tokyo.jp": true, "akishima.tokyo.jp": true, "aogashima.tokyo.jp": true, "arakawa.tokyo.jp": true, "bunkyo.tokyo.jp": true, "chiyoda.tokyo.jp": true, "chofu.tokyo.jp": true, "chuo.tokyo.jp": true, "edogawa.tokyo.jp": true, "fuchu.tokyo.jp": true, "fussa.tokyo.jp": true, "hachijo.tokyo.jp": true, "hachioji.tokyo.jp": true, "hamura.tokyo.jp": true, "higashikurume.tokyo.jp": true, "higashimurayama.tokyo.jp": true, "higashiyamato.tokyo.jp": true, "hino.tokyo.jp": true, "hinode.tokyo.jp": true, "hinohara.tokyo.jp": true, "inagi.tokyo.jp": true, "itabashi.tokyo.jp": true, "katsushika.tokyo.jp": true, "kita.tokyo.jp": true, "kiyose.tokyo.jp": true, "kodaira.tokyo.jp": true, "koganei.tokyo.jp": true, "kokubunji.tokyo.jp": true, "komae.tokyo.jp": true, "koto.tokyo.jp": true, "kouzushima.tokyo.jp": true, "kunitachi.tokyo.jp": true, "machida.tokyo.jp": true, "meguro.tokyo.jp": true, "minato.tokyo.jp": true, "mitaka.tokyo.jp": true, "mizuho.tokyo.jp": true, "musashimurayama.tokyo.jp": true, "musashino.tokyo.jp": true, "nakano.tokyo.jp": true, "nerima.tokyo.jp": true, "ogasawara.tokyo.jp": true, "okutama.tokyo.jp": true, "ome.tokyo.jp": true, "oshima.tokyo.jp": true, "ota.tokyo.jp": true, "setagaya.tokyo.jp": true, "shibuya.tokyo.jp": true, "shinagawa.tokyo.jp": true, "shinjuku.tokyo.jp": true, "suginami.tokyo.jp": true, "sumida.tokyo.jp": true, "tachikawa.tokyo.jp": true, "taito.tokyo.jp": true, "tama.tokyo.jp": true, "toshima.tokyo.jp": true, "chizu.tottori.jp": true, "hino.tottori.jp": true, "kawahara.tottori.jp": true, "koge.tottori.jp": true, "kotoura.tottori.jp": true, "misasa.tottori.jp": true, "nanbu.tottori.jp": true, "nichinan.tottori.jp": true, "sakaiminato.tottori.jp": true, "tottori.tottori.jp": true, "wakasa.tottori.jp": true, "yazu.tottori.jp": true, "yonago.tottori.jp": true, "asahi.toyama.jp": true, "fuchu.toyama.jp": true, "fukumitsu.toyama.jp": true, "funahashi.toyama.jp": true, "himi.toyama.jp": true, "imizu.toyama.jp": true, "inami.toyama.jp": true, "johana.toyama.jp": true, "kamiichi.toyama.jp": true, "kurobe.toyama.jp": true, "nakaniikawa.toyama.jp": true, "namerikawa.toyama.jp": true, "nanto.toyama.jp": true, "nyuzen.toyama.jp": true, "oyabe.toyama.jp": true, "taira.toyama.jp": true, "takaoka.toyama.jp": true, "tateyama.toyama.jp": true, "toga.toyama.jp": true, "tonami.toyama.jp": true, "toyama.toyama.jp": true, "unazuki.toyama.jp": true, "uozu.toyama.jp": true, "yamada.toyama.jp": true, "arida.wakayama.jp": true, "aridagawa.wakayama.jp": true, "gobo.wakayama.jp": true, "hashimoto.wakayama.jp": true, "hidaka.wakayama.jp": true, "hirogawa.wakayama.jp": true, "inami.wakayama.jp": true, "iwade.wakayama.jp": true, "kainan.wakayama.jp": true, "kamitonda.wakayama.jp": true, "katsuragi.wakayama.jp": true, "kimino.wakayama.jp": true, "kinokawa.wakayama.jp": true, "kitayama.wakayama.jp": true, "koya.wakayama.jp": true, "koza.wakayama.jp": true, "kozagawa.wakayama.jp": true, "kudoyama.wakayama.jp": true, "kushimoto.wakayama.jp": true, "mihama.wakayama.jp": true, "misato.wakayama.jp": true, "nachikatsuura.wakayama.jp": true, "shingu.wakayama.jp": true, "shirahama.wakayama.jp": true, "taiji.wakayama.jp": true, "tanabe.wakayama.jp": true, "wakayama.wakayama.jp": true, "yuasa.wakayama.jp": true, "yura.wakayama.jp": true, "asahi.yamagata.jp": true, "funagata.yamagata.jp": true, "higashine.yamagata.jp": true, "iide.yamagata.jp": true, "kahoku.yamagata.jp": true, "kaminoyama.yamagata.jp": true, "kaneyama.yamagata.jp": true, "kawanishi.yamagata.jp": true, "mamurogawa.yamagata.jp": true, "mikawa.yamagata.jp": true, "murayama.yamagata.jp": true, "nagai.yamagata.jp": true, "nakayama.yamagata.jp": true, "nanyo.yamagata.jp": true, "nishikawa.yamagata.jp": true, "obanazawa.yamagata.jp": true, "oe.yamagata.jp": true, "oguni.yamagata.jp": true, "ohkura.yamagata.jp": true, "oishida.yamagata.jp": true, "sagae.yamagata.jp": true, "sakata.yamagata.jp": true, "sakegawa.yamagata.jp": true, "shinjo.yamagata.jp": true, "shirataka.yamagata.jp": true, "shonai.yamagata.jp": true, "takahata.yamagata.jp": true, "tendo.yamagata.jp": true, "tozawa.yamagata.jp": true, "tsuruoka.yamagata.jp": true, "yamagata.yamagata.jp": true, "yamanobe.yamagata.jp": true, "yonezawa.yamagata.jp": true, "yuza.yamagata.jp": true, "abu.yamaguchi.jp": true, "hagi.yamaguchi.jp": true, "hikari.yamaguchi.jp": true, "hofu.yamaguchi.jp": true, "iwakuni.yamaguchi.jp": true, "kudamatsu.yamaguchi.jp": true, "mitou.yamaguchi.jp": true, "nagato.yamaguchi.jp": true, "oshima.yamaguchi.jp": true, "shimonoseki.yamaguchi.jp": true, "shunan.yamaguchi.jp": true, "tabuse.yamaguchi.jp": true, "tokuyama.yamaguchi.jp": true, "toyota.yamaguchi.jp": true, "ube.yamaguchi.jp": true, "yuu.yamaguchi.jp": true, "chuo.yamanashi.jp": true, "doshi.yamanashi.jp": true, "fuefuki.yamanashi.jp": true, "fujikawa.yamanashi.jp": true, "fujikawaguchiko.yamanashi.jp": true, "fujiyoshida.yamanashi.jp": true, "hayakawa.yamanashi.jp": true, "hokuto.yamanashi.jp": true, "ichikawamisato.yamanashi.jp": true, "kai.yamanashi.jp": true, "kofu.yamanashi.jp": true, "koshu.yamanashi.jp": true, "kosuge.yamanashi.jp": true, "minami-alps.yamanashi.jp": true, "minobu.yamanashi.jp": true, "nakamichi.yamanashi.jp": true, "nanbu.yamanashi.jp": true, "narusawa.yamanashi.jp": true, "nirasaki.yamanashi.jp": true, "nishikatsura.yamanashi.jp": true, "oshino.yamanashi.jp": true, "otsuki.yamanashi.jp": true, "showa.yamanashi.jp": true, "tabayama.yamanashi.jp": true, "tsuru.yamanashi.jp": true, "uenohara.yamanashi.jp": true, "yamanakako.yamanashi.jp": true, "yamanashi.yamanashi.jp": true, "*.ke": true, "kg": true, "org.kg": true, "net.kg": true, "com.kg": true, "edu.kg": true, "gov.kg": true, "mil.kg": true, "*.kh": true, "ki": true, "edu.ki": true, "biz.ki": true, "net.ki": true, "org.ki": true, "gov.ki": true, "info.ki": true, "com.ki": true, "km": true, "org.km": true, "nom.km": true, "gov.km": true, "prd.km": true, "tm.km": true, "edu.km": true, "mil.km": true, "ass.km": true, "com.km": true, "coop.km": true, "asso.km": true, "presse.km": true, "medecin.km": true, "notaires.km": true, "pharmaciens.km": true, "veterinaire.km": true, "gouv.km": true, "kn": true, "net.kn": true, "org.kn": true, "edu.kn": true, "gov.kn": true, "kp": true, "com.kp": true, "edu.kp": true, "gov.kp": true, "org.kp": true, "rep.kp": true, "tra.kp": true, "kr": true, "ac.kr": true, "co.kr": true, "es.kr": true, "go.kr": true, "hs.kr": true, "kg.kr": true, "mil.kr": true, "ms.kr": true, "ne.kr": true, "or.kr": true, "pe.kr": true, "re.kr": true, "sc.kr": true, "busan.kr": true, "chungbuk.kr": true, "chungnam.kr": true, "daegu.kr": true, "daejeon.kr": true, "gangwon.kr": true, "gwangju.kr": true, "gyeongbuk.kr": true, "gyeonggi.kr": true, "gyeongnam.kr": true, "incheon.kr": true, "jeju.kr": true, "jeonbuk.kr": true, "jeonnam.kr": true, "seoul.kr": true, "ulsan.kr": true, "*.kw": true, "ky": true, "edu.ky": true, "gov.ky": true, "com.ky": true, "org.ky": true, "net.ky": true, "kz": true, "org.kz": true, "edu.kz": true, "net.kz": true, "gov.kz": true, "mil.kz": true, "com.kz": true, "la": true, "int.la": true, "net.la": true, "info.la": true, "edu.la": true, "gov.la": true, "per.la": true, "com.la": true, "org.la": true, "lb": true, "com.lb": true, "edu.lb": true, "gov.lb": true, "net.lb": true, "org.lb": true, "lc": true, "com.lc": true, "net.lc": true, "co.lc": true, "org.lc": true, "edu.lc": true, "gov.lc": true, "li": true, "lk": true, "gov.lk": true, "sch.lk": true, "net.lk": true, "int.lk": true, "com.lk": true, "org.lk": true, "edu.lk": true, "ngo.lk": true, "soc.lk": true, "web.lk": true, "ltd.lk": true, "assn.lk": true, "grp.lk": true, "hotel.lk": true, "ac.lk": true, "lr": true, "com.lr": true, "edu.lr": true, "gov.lr": true, "org.lr": true, "net.lr": true, "ls": true, "co.ls": true, "org.ls": true, "lt": true, "gov.lt": true, "lu": true, "lv": true, "com.lv": true, "edu.lv": true, "gov.lv": true, "org.lv": true, "mil.lv": true, "id.lv": true, "net.lv": true, "asn.lv": true, "conf.lv": true, "ly": true, "com.ly": true, "net.ly": true, "gov.ly": true, "plc.ly": true, "edu.ly": true, "sch.ly": true, "med.ly": true, "org.ly": true, "id.ly": true, "ma": true, "co.ma": true, "net.ma": true, "gov.ma": true, "org.ma": true, "ac.ma": true, "press.ma": true, "mc": true, "tm.mc": true, "asso.mc": true, "md": true, "me": true, "co.me": true, "net.me": true, "org.me": true, "edu.me": true, "ac.me": true, "gov.me": true, "its.me": true, "priv.me": true, "mg": true, "org.mg": true, "nom.mg": true, "gov.mg": true, "prd.mg": true, "tm.mg": true, "edu.mg": true, "mil.mg": true, "com.mg": true, "co.mg": true, "mh": true, "mil": true, "mk": true, "com.mk": true, "org.mk": true, "net.mk": true, "edu.mk": true, "gov.mk": true, "inf.mk": true, "name.mk": true, "ml": true, "com.ml": true, "edu.ml": true, "gouv.ml": true, "gov.ml": true, "net.ml": true, "org.ml": true, "presse.ml": true, "*.mm": true, "mn": true, "gov.mn": true, "edu.mn": true, "org.mn": true, "mo": true, "com.mo": true, "net.mo": true, "org.mo": true, "edu.mo": true, "gov.mo": true, "mobi": true, "mp": true, "mq": true, "mr": true, "gov.mr": true, "ms": true, "com.ms": true, "edu.ms": true, "gov.ms": true, "net.ms": true, "org.ms": true, "mt": true, "com.mt": true, "edu.mt": true, "net.mt": true, "org.mt": true, "mu": true, "com.mu": true, "net.mu": true, "org.mu": true, "gov.mu": true, "ac.mu": true, "co.mu": true, "or.mu": true, "museum": true, "academy.museum": true, "agriculture.museum": true, "air.museum": true, "airguard.museum": true, "alabama.museum": true, "alaska.museum": true, "amber.museum": true, "ambulance.museum": true, "american.museum": true, "americana.museum": true, "americanantiques.museum": true, "americanart.museum": true, "amsterdam.museum": true, "and.museum": true, "annefrank.museum": true, "anthro.museum": true, "anthropology.museum": true, "antiques.museum": true, "aquarium.museum": true, "arboretum.museum": true, "archaeological.museum": true, "archaeology.museum": true, "architecture.museum": true, "art.museum": true, "artanddesign.museum": true, "artcenter.museum": true, "artdeco.museum": true, "arteducation.museum": true, "artgallery.museum": true, "arts.museum": true, "artsandcrafts.museum": true, "asmatart.museum": true, "assassination.museum": true, "assisi.museum": true, "association.museum": true, "astronomy.museum": true, "atlanta.museum": true, "austin.museum": true, "australia.museum": true, "automotive.museum": true, "aviation.museum": true, "axis.museum": true, "badajoz.museum": true, "baghdad.museum": true, "bahn.museum": true, "bale.museum": true, "baltimore.museum": true, "barcelona.museum": true, "baseball.museum": true, "basel.museum": true, "baths.museum": true, "bauern.museum": true, "beauxarts.museum": true, "beeldengeluid.museum": true, "bellevue.museum": true, "bergbau.museum": true, "berkeley.museum": true, "berlin.museum": true, "bern.museum": true, "bible.museum": true, "bilbao.museum": true, "bill.museum": true, "birdart.museum": true, "birthplace.museum": true, "bonn.museum": true, "boston.museum": true, "botanical.museum": true, "botanicalgarden.museum": true, "botanicgarden.museum": true, "botany.museum": true, "brandywinevalley.museum": true, "brasil.museum": true, "bristol.museum": true, "british.museum": true, "britishcolumbia.museum": true, "broadcast.museum": true, "brunel.museum": true, "brussel.museum": true, "brussels.museum": true, "bruxelles.museum": true, "building.museum": true, "burghof.museum": true, "bus.museum": true, "bushey.museum": true, "cadaques.museum": true, "california.museum": true, "cambridge.museum": true, "can.museum": true, "canada.museum": true, "capebreton.museum": true, "carrier.museum": true, "cartoonart.museum": true, "casadelamoneda.museum": true, "castle.museum": true, "castres.museum": true, "celtic.museum": true, "center.museum": true, "chattanooga.museum": true, "cheltenham.museum": true, "chesapeakebay.museum": true, "chicago.museum": true, "children.museum": true, "childrens.museum": true, "childrensgarden.museum": true, "chiropractic.museum": true, "chocolate.museum": true, "christiansburg.museum": true, "cincinnati.museum": true, "cinema.museum": true, "circus.museum": true, "civilisation.museum": true, "civilization.museum": true, "civilwar.museum": true, "clinton.museum": true, "clock.museum": true, "coal.museum": true, "coastaldefence.museum": true, "cody.museum": true, "coldwar.museum": true, "collection.museum": true, "colonialwilliamsburg.museum": true, "coloradoplateau.museum": true, "columbia.museum": true, "columbus.museum": true, "communication.museum": true, "communications.museum": true, "community.museum": true, "computer.museum": true, "computerhistory.museum": true, "xn--comunicaes-v6a2o.museum": true, "contemporary.museum": true, "contemporaryart.museum": true, "convent.museum": true, "copenhagen.museum": true, "corporation.museum": true, "xn--correios-e-telecomunicaes-ghc29a.museum": true, "corvette.museum": true, "costume.museum": true, "countryestate.museum": true, "county.museum": true, "crafts.museum": true, "cranbrook.museum": true, "creation.museum": true, "cultural.museum": true, "culturalcenter.museum": true, "culture.museum": true, "cyber.museum": true, "cymru.museum": true, "dali.museum": true, "dallas.museum": true, "database.museum": true, "ddr.museum": true, "decorativearts.museum": true, "delaware.museum": true, "delmenhorst.museum": true, "denmark.museum": true, "depot.museum": true, "design.museum": true, "detroit.museum": true, "dinosaur.museum": true, "discovery.museum": true, "dolls.museum": true, "donostia.museum": true, "durham.museum": true, "eastafrica.museum": true, "eastcoast.museum": true, "education.museum": true, "educational.museum": true, "egyptian.museum": true, "eisenbahn.museum": true, "elburg.museum": true, "elvendrell.museum": true, "embroidery.museum": true, "encyclopedic.museum": true, "england.museum": true, "entomology.museum": true, "environment.museum": true, "environmentalconservation.museum": true, "epilepsy.museum": true, "essex.museum": true, "estate.museum": true, "ethnology.museum": true, "exeter.museum": true, "exhibition.museum": true, "family.museum": true, "farm.museum": true, "farmequipment.museum": true, "farmers.museum": true, "farmstead.museum": true, "field.museum": true, "figueres.museum": true, "filatelia.museum": true, "film.museum": true, "fineart.museum": true, "finearts.museum": true, "finland.museum": true, "flanders.museum": true, "florida.museum": true, "force.museum": true, "fortmissoula.museum": true, "fortworth.museum": true, "foundation.museum": true, "francaise.museum": true, "frankfurt.museum": true, "franziskaner.museum": true, "freemasonry.museum": true, "freiburg.museum": true, "fribourg.museum": true, "frog.museum": true, "fundacio.museum": true, "furniture.museum": true, "gallery.museum": true, "garden.museum": true, "gateway.museum": true, "geelvinck.museum": true, "gemological.museum": true, "geology.museum": true, "georgia.museum": true, "giessen.museum": true, "glas.museum": true, "glass.museum": true, "gorge.museum": true, "grandrapids.museum": true, "graz.museum": true, "guernsey.museum": true, "halloffame.museum": true, "hamburg.museum": true, "handson.museum": true, "harvestcelebration.museum": true, "hawaii.museum": true, "health.museum": true, "heimatunduhren.museum": true, "hellas.museum": true, "helsinki.museum": true, "hembygdsforbund.museum": true, "heritage.museum": true, "histoire.museum": true, "historical.museum": true, "historicalsociety.museum": true, "historichouses.museum": true, "historisch.museum": true, "historisches.museum": true, "history.museum": true, "historyofscience.museum": true, "horology.museum": true, "house.museum": true, "humanities.museum": true, "illustration.museum": true, "imageandsound.museum": true, "indian.museum": true, "indiana.museum": true, "indianapolis.museum": true, "indianmarket.museum": true, "intelligence.museum": true, "interactive.museum": true, "iraq.museum": true, "iron.museum": true, "isleofman.museum": true, "jamison.museum": true, "jefferson.museum": true, "jerusalem.museum": true, "jewelry.museum": true, "jewish.museum": true, "jewishart.museum": true, "jfk.museum": true, "journalism.museum": true, "judaica.museum": true, "judygarland.museum": true, "juedisches.museum": true, "juif.museum": true, "karate.museum": true, "karikatur.museum": true, "kids.museum": true, "koebenhavn.museum": true, "koeln.museum": true, "kunst.museum": true, "kunstsammlung.museum": true, "kunstunddesign.museum": true, "labor.museum": true, "labour.museum": true, "lajolla.museum": true, "lancashire.museum": true, "landes.museum": true, "lans.museum": true, "xn--lns-qla.museum": true, "larsson.museum": true, "lewismiller.museum": true, "lincoln.museum": true, "linz.museum": true, "living.museum": true, "livinghistory.museum": true, "localhistory.museum": true, "london.museum": true, "losangeles.museum": true, "louvre.museum": true, "loyalist.museum": true, "lucerne.museum": true, "luxembourg.museum": true, "luzern.museum": true, "mad.museum": true, "madrid.museum": true, "mallorca.museum": true, "manchester.museum": true, "mansion.museum": true, "mansions.museum": true, "manx.museum": true, "marburg.museum": true, "maritime.museum": true, "maritimo.museum": true, "maryland.museum": true, "marylhurst.museum": true, "media.museum": true, "medical.museum": true, "medizinhistorisches.museum": true, "meeres.museum": true, "memorial.museum": true, "mesaverde.museum": true, "michigan.museum": true, "midatlantic.museum": true, "military.museum": true, "mill.museum": true, "miners.museum": true, "mining.museum": true, "minnesota.museum": true, "missile.museum": true, "missoula.museum": true, "modern.museum": true, "moma.museum": true, "money.museum": true, "monmouth.museum": true, "monticello.museum": true, "montreal.museum": true, "moscow.museum": true, "motorcycle.museum": true, "muenchen.museum": true, "muenster.museum": true, "mulhouse.museum": true, "muncie.museum": true, "museet.museum": true, "museumcenter.museum": true, "museumvereniging.museum": true, "music.museum": true, "national.museum": true, "nationalfirearms.museum": true, "nationalheritage.museum": true, "nativeamerican.museum": true, "naturalhistory.museum": true, "naturalhistorymuseum.museum": true, "naturalsciences.museum": true, "nature.museum": true, "naturhistorisches.museum": true, "natuurwetenschappen.museum": true, "naumburg.museum": true, "naval.museum": true, "nebraska.museum": true, "neues.museum": true, "newhampshire.museum": true, "newjersey.museum": true, "newmexico.museum": true, "newport.museum": true, "newspaper.museum": true, "newyork.museum": true, "niepce.museum": true, "norfolk.museum": true, "north.museum": true, "nrw.museum": true, "nuernberg.museum": true, "nuremberg.museum": true, "nyc.museum": true, "nyny.museum": true, "oceanographic.museum": true, "oceanographique.museum": true, "omaha.museum": true, "online.museum": true, "ontario.museum": true, "openair.museum": true, "oregon.museum": true, "oregontrail.museum": true, "otago.museum": true, "oxford.museum": true, "pacific.museum": true, "paderborn.museum": true, "palace.museum": true, "paleo.museum": true, "palmsprings.museum": true, "panama.museum": true, "paris.museum": true, "pasadena.museum": true, "pharmacy.museum": true, "philadelphia.museum": true, "philadelphiaarea.museum": true, "philately.museum": true, "phoenix.museum": true, "photography.museum": true, "pilots.museum": true, "pittsburgh.museum": true, "planetarium.museum": true, "plantation.museum": true, "plants.museum": true, "plaza.museum": true, "portal.museum": true, "portland.museum": true, "portlligat.museum": true, "posts-and-telecommunications.museum": true, "preservation.museum": true, "presidio.museum": true, "press.museum": true, "project.museum": true, "public.museum": true, "pubol.museum": true, "quebec.museum": true, "railroad.museum": true, "railway.museum": true, "research.museum": true, "resistance.museum": true, "riodejaneiro.museum": true, "rochester.museum": true, "rockart.museum": true, "roma.museum": true, "russia.museum": true, "saintlouis.museum": true, "salem.museum": true, "salvadordali.museum": true, "salzburg.museum": true, "sandiego.museum": true, "sanfrancisco.museum": true, "santabarbara.museum": true, "santacruz.museum": true, "santafe.museum": true, "saskatchewan.museum": true, "satx.museum": true, "savannahga.museum": true, "schlesisches.museum": true, "schoenbrunn.museum": true, "schokoladen.museum": true, "school.museum": true, "schweiz.museum": true, "science.museum": true, "scienceandhistory.museum": true, "scienceandindustry.museum": true, "sciencecenter.museum": true, "sciencecenters.museum": true, "science-fiction.museum": true, "sciencehistory.museum": true, "sciences.museum": true, "sciencesnaturelles.museum": true, "scotland.museum": true, "seaport.museum": true, "settlement.museum": true, "settlers.museum": true, "shell.museum": true, "sherbrooke.museum": true, "sibenik.museum": true, "silk.museum": true, "ski.museum": true, "skole.museum": true, "society.museum": true, "sologne.museum": true, "soundandvision.museum": true, "southcarolina.museum": true, "southwest.museum": true, "space.museum": true, "spy.museum": true, "square.museum": true, "stadt.museum": true, "stalbans.museum": true, "starnberg.museum": true, "state.museum": true, "stateofdelaware.museum": true, "station.museum": true, "steam.museum": true, "steiermark.museum": true, "stjohn.museum": true, "stockholm.museum": true, "stpetersburg.museum": true, "stuttgart.museum": true, "suisse.museum": true, "surgeonshall.museum": true, "surrey.museum": true, "svizzera.museum": true, "sweden.museum": true, "sydney.museum": true, "tank.museum": true, "tcm.museum": true, "technology.museum": true, "telekommunikation.museum": true, "television.museum": true, "texas.museum": true, "textile.museum": true, "theater.museum": true, "time.museum": true, "timekeeping.museum": true, "topology.museum": true, "torino.museum": true, "touch.museum": true, "town.museum": true, "transport.museum": true, "tree.museum": true, "trolley.museum": true, "trust.museum": true, "trustee.museum": true, "uhren.museum": true, "ulm.museum": true, "undersea.museum": true, "university.museum": true, "usa.museum": true, "usantiques.museum": true, "usarts.museum": true, "uscountryestate.museum": true, "usculture.museum": true, "usdecorativearts.museum": true, "usgarden.museum": true, "ushistory.museum": true, "ushuaia.museum": true, "uslivinghistory.museum": true, "utah.museum": true, "uvic.museum": true, "valley.museum": true, "vantaa.museum": true, "versailles.museum": true, "viking.museum": true, "village.museum": true, "virginia.museum": true, "virtual.museum": true, "virtuel.museum": true, "vlaanderen.museum": true, "volkenkunde.museum": true, "wales.museum": true, "wallonie.museum": true, "war.museum": true, "washingtondc.museum": true, "watchandclock.museum": true, "watch-and-clock.museum": true, "western.museum": true, "westfalen.museum": true, "whaling.museum": true, "wildlife.museum": true, "williamsburg.museum": true, "windmill.museum": true, "workshop.museum": true, "york.museum": true, "yorkshire.museum": true, "yosemite.museum": true, "youth.museum": true, "zoological.museum": true, "zoology.museum": true, "xn--9dbhblg6di.museum": true, "xn--h1aegh.museum": true, "mv": true, "aero.mv": true, "biz.mv": true, "com.mv": true, "coop.mv": true, "edu.mv": true, "gov.mv": true, "info.mv": true, "int.mv": true, "mil.mv": true, "museum.mv": true, "name.mv": true, "net.mv": true, "org.mv": true, "pro.mv": true, "mw": true, "ac.mw": true, "biz.mw": true, "co.mw": true, "com.mw": true, "coop.mw": true, "edu.mw": true, "gov.mw": true, "int.mw": true, "museum.mw": true, "net.mw": true, "org.mw": true, "mx": true, "com.mx": true, "org.mx": true, "gob.mx": true, "edu.mx": true, "net.mx": true, "my": true, "com.my": true, "net.my": true, "org.my": true, "gov.my": true, "edu.my": true, "mil.my": true, "name.my": true, "*.mz": true, "teledata.mz": false, "na": true, "info.na": true, "pro.na": true, "name.na": true, "school.na": true, "or.na": true, "dr.na": true, "us.na": true, "mx.na": true, "ca.na": true, "in.na": true, "cc.na": true, "tv.na": true, "ws.na": true, "mobi.na": true, "co.na": true, "com.na": true, "org.na": true, "name": true, "nc": true, "asso.nc": true, "ne": true, "net": true, "nf": true, "com.nf": true, "net.nf": true, "per.nf": true, "rec.nf": true, "web.nf": true, "arts.nf": true, "firm.nf": true, "info.nf": true, "other.nf": true, "store.nf": true, "ng": true, "com.ng": true, "edu.ng": true, "name.ng": true, "net.ng": true, "org.ng": true, "sch.ng": true, "gov.ng": true, "mil.ng": true, "mobi.ng": true, "*.ni": true, "nl": true, "bv.nl": true, "no": true, "fhs.no": true, "vgs.no": true, "fylkesbibl.no": true, "folkebibl.no": true, "museum.no": true, "idrett.no": true, "priv.no": true, "mil.no": true, "stat.no": true, "dep.no": true, "kommune.no": true, "herad.no": true, "aa.no": true, "ah.no": true, "bu.no": true, "fm.no": true, "hl.no": true, "hm.no": true, "jan-mayen.no": true, "mr.no": true, "nl.no": true, "nt.no": true, "of.no": true, "ol.no": true, "oslo.no": true, "rl.no": true, "sf.no": true, "st.no": true, "svalbard.no": true, "tm.no": true, "tr.no": true, "va.no": true, "vf.no": true, "gs.aa.no": true, "gs.ah.no": true, "gs.bu.no": true, "gs.fm.no": true, "gs.hl.no": true, "gs.hm.no": true, "gs.jan-mayen.no": true, "gs.mr.no": true, "gs.nl.no": true, "gs.nt.no": true, "gs.of.no": true, "gs.ol.no": true, "gs.oslo.no": true, "gs.rl.no": true, "gs.sf.no": true, "gs.st.no": true, "gs.svalbard.no": true, "gs.tm.no": true, "gs.tr.no": true, "gs.va.no": true, "gs.vf.no": true, "akrehamn.no": true, "xn--krehamn-dxa.no": true, "algard.no": true, "xn--lgrd-poac.no": true, "arna.no": true, "brumunddal.no": true, "bryne.no": true, "bronnoysund.no": true, "xn--brnnysund-m8ac.no": true, "drobak.no": true, "xn--drbak-wua.no": true, "egersund.no": true, "fetsund.no": true, "floro.no": true, "xn--flor-jra.no": true, "fredrikstad.no": true, "hokksund.no": true, "honefoss.no": true, "xn--hnefoss-q1a.no": true, "jessheim.no": true, "jorpeland.no": true, "xn--jrpeland-54a.no": true, "kirkenes.no": true, "kopervik.no": true, "krokstadelva.no": true, "langevag.no": true, "xn--langevg-jxa.no": true, "leirvik.no": true, "mjondalen.no": true, "xn--mjndalen-64a.no": true, "mo-i-rana.no": true, "mosjoen.no": true, "xn--mosjen-eya.no": true, "nesoddtangen.no": true, "orkanger.no": true, "osoyro.no": true, "xn--osyro-wua.no": true, "raholt.no": true, "xn--rholt-mra.no": true, "sandnessjoen.no": true, "xn--sandnessjen-ogb.no": true, "skedsmokorset.no": true, "slattum.no": true, "spjelkavik.no": true, "stathelle.no": true, "stavern.no": true, "stjordalshalsen.no": true, "xn--stjrdalshalsen-sqb.no": true, "tananger.no": true, "tranby.no": true, "vossevangen.no": true, "afjord.no": true, "xn--fjord-lra.no": true, "agdenes.no": true, "al.no": true, "xn--l-1fa.no": true, "alesund.no": true, "xn--lesund-hua.no": true, "alstahaug.no": true, "alta.no": true, "xn--lt-liac.no": true, "alaheadju.no": true, "xn--laheadju-7ya.no": true, "alvdal.no": true, "amli.no": true, "xn--mli-tla.no": true, "amot.no": true, "xn--mot-tla.no": true, "andebu.no": true, "andoy.no": true, "xn--andy-ira.no": true, "andasuolo.no": true, "ardal.no": true, "xn--rdal-poa.no": true, "aremark.no": true, "arendal.no": true, "xn--s-1fa.no": true, "aseral.no": true, "xn--seral-lra.no": true, "asker.no": true, "askim.no": true, "askvoll.no": true, "askoy.no": true, "xn--asky-ira.no": true, "asnes.no": true, "xn--snes-poa.no": true, "audnedaln.no": true, "aukra.no": true, "aure.no": true, "aurland.no": true, "aurskog-holand.no": true, "xn--aurskog-hland-jnb.no": true, "austevoll.no": true, "austrheim.no": true, "averoy.no": true, "xn--avery-yua.no": true, "balestrand.no": true, "ballangen.no": true, "balat.no": true, "xn--blt-elab.no": true, "balsfjord.no": true, "bahccavuotna.no": true, "xn--bhccavuotna-k7a.no": true, "bamble.no": true, "bardu.no": true, "beardu.no": true, "beiarn.no": true, "bajddar.no": true, "xn--bjddar-pta.no": true, "baidar.no": true, "xn--bidr-5nac.no": true, "berg.no": true, "bergen.no": true, "berlevag.no": true, "xn--berlevg-jxa.no": true, "bearalvahki.no": true, "xn--bearalvhki-y4a.no": true, "bindal.no": true, "birkenes.no": true, "bjarkoy.no": true, "xn--bjarky-fya.no": true, "bjerkreim.no": true, "bjugn.no": true, "bodo.no": true, "xn--bod-2na.no": true, "badaddja.no": true, "xn--bdddj-mrabd.no": true, "budejju.no": true, "bokn.no": true, "bremanger.no": true, "bronnoy.no": true, "xn--brnny-wuac.no": true, "bygland.no": true, "bykle.no": true, "barum.no": true, "xn--brum-voa.no": true, "bo.telemark.no": true, "xn--b-5ga.telemark.no": true, "bo.nordland.no": true, "xn--b-5ga.nordland.no": true, "bievat.no": true, "xn--bievt-0qa.no": true, "bomlo.no": true, "xn--bmlo-gra.no": true, "batsfjord.no": true, "xn--btsfjord-9za.no": true, "bahcavuotna.no": true, "xn--bhcavuotna-s4a.no": true, "dovre.no": true, "drammen.no": true, "drangedal.no": true, "dyroy.no": true, "xn--dyry-ira.no": true, "donna.no": true, "xn--dnna-gra.no": true, "eid.no": true, "eidfjord.no": true, "eidsberg.no": true, "eidskog.no": true, "eidsvoll.no": true, "eigersund.no": true, "elverum.no": true, "enebakk.no": true, "engerdal.no": true, "etne.no": true, "etnedal.no": true, "evenes.no": true, "evenassi.no": true, "xn--eveni-0qa01ga.no": true, "evje-og-hornnes.no": true, "farsund.no": true, "fauske.no": true, "fuossko.no": true, "fuoisku.no": true, "fedje.no": true, "fet.no": true, "finnoy.no": true, "xn--finny-yua.no": true, "fitjar.no": true, "fjaler.no": true, "fjell.no": true, "flakstad.no": true, "flatanger.no": true, "flekkefjord.no": true, "flesberg.no": true, "flora.no": true, "fla.no": true, "xn--fl-zia.no": true, "folldal.no": true, "forsand.no": true, "fosnes.no": true, "frei.no": true, "frogn.no": true, "froland.no": true, "frosta.no": true, "frana.no": true, "xn--frna-woa.no": true, "froya.no": true, "xn--frya-hra.no": true, "fusa.no": true, "fyresdal.no": true, "forde.no": true, "xn--frde-gra.no": true, "gamvik.no": true, "gangaviika.no": true, "xn--ggaviika-8ya47h.no": true, "gaular.no": true, "gausdal.no": true, "gildeskal.no": true, "xn--gildeskl-g0a.no": true, "giske.no": true, "gjemnes.no": true, "gjerdrum.no": true, "gjerstad.no": true, "gjesdal.no": true, "gjovik.no": true, "xn--gjvik-wua.no": true, "gloppen.no": true, "gol.no": true, "gran.no": true, "grane.no": true, "granvin.no": true, "gratangen.no": true, "grimstad.no": true, "grong.no": true, "kraanghke.no": true, "xn--kranghke-b0a.no": true, "grue.no": true, "gulen.no": true, "hadsel.no": true, "halden.no": true, "halsa.no": true, "hamar.no": true, "hamaroy.no": true, "habmer.no": true, "xn--hbmer-xqa.no": true, "hapmir.no": true, "xn--hpmir-xqa.no": true, "hammerfest.no": true, "hammarfeasta.no": true, "xn--hmmrfeasta-s4ac.no": true, "haram.no": true, "hareid.no": true, "harstad.no": true, "hasvik.no": true, "aknoluokta.no": true, "xn--koluokta-7ya57h.no": true, "hattfjelldal.no": true, "aarborte.no": true, "haugesund.no": true, "hemne.no": true, "hemnes.no": true, "hemsedal.no": true, "heroy.more-og-romsdal.no": true, "xn--hery-ira.xn--mre-og-romsdal-qqb.no": true, "heroy.nordland.no": true, "xn--hery-ira.nordland.no": true, "hitra.no": true, "hjartdal.no": true, "hjelmeland.no": true, "hobol.no": true, "xn--hobl-ira.no": true, "hof.no": true, "hol.no": true, "hole.no": true, "holmestrand.no": true, "holtalen.no": true, "xn--holtlen-hxa.no": true, "hornindal.no": true, "horten.no": true, "hurdal.no": true, "hurum.no": true, "hvaler.no": true, "hyllestad.no": true, "hagebostad.no": true, "xn--hgebostad-g3a.no": true, "hoyanger.no": true, "xn--hyanger-q1a.no": true, "hoylandet.no": true, "xn--hylandet-54a.no": true, "ha.no": true, "xn--h-2fa.no": true, "ibestad.no": true, "inderoy.no": true, "xn--indery-fya.no": true, "iveland.no": true, "jevnaker.no": true, "jondal.no": true, "jolster.no": true, "xn--jlster-bya.no": true, "karasjok.no": true, "karasjohka.no": true, "xn--krjohka-hwab49j.no": true, "karlsoy.no": true, "galsa.no": true, "xn--gls-elac.no": true, "karmoy.no": true, "xn--karmy-yua.no": true, "kautokeino.no": true, "guovdageaidnu.no": true, "klepp.no": true, "klabu.no": true, "xn--klbu-woa.no": true, "kongsberg.no": true, "kongsvinger.no": true, "kragero.no": true, "xn--krager-gya.no": true, "kristiansand.no": true, "kristiansund.no": true, "krodsherad.no": true, "xn--krdsherad-m8a.no": true, "kvalsund.no": true, "rahkkeravju.no": true, "xn--rhkkervju-01af.no": true, "kvam.no": true, "kvinesdal.no": true, "kvinnherad.no": true, "kviteseid.no": true, "kvitsoy.no": true, "xn--kvitsy-fya.no": true, "kvafjord.no": true, "xn--kvfjord-nxa.no": true, "giehtavuoatna.no": true, "kvanangen.no": true, "xn--kvnangen-k0a.no": true, "navuotna.no": true, "xn--nvuotna-hwa.no": true, "kafjord.no": true, "xn--kfjord-iua.no": true, "gaivuotna.no": true, "xn--givuotna-8ya.no": true, "larvik.no": true, "lavangen.no": true, "lavagis.no": true, "loabat.no": true, "xn--loabt-0qa.no": true, "lebesby.no": true, "davvesiida.no": true, "leikanger.no": true, "leirfjord.no": true, "leka.no": true, "leksvik.no": true, "lenvik.no": true, "leangaviika.no": true, "xn--leagaviika-52b.no": true, "lesja.no": true, "levanger.no": true, "lier.no": true, "lierne.no": true, "lillehammer.no": true, "lillesand.no": true, "lindesnes.no": true, "lindas.no": true, "xn--linds-pra.no": true, "lom.no": true, "loppa.no": true, "lahppi.no": true, "xn--lhppi-xqa.no": true, "lund.no": true, "lunner.no": true, "luroy.no": true, "xn--lury-ira.no": true, "luster.no": true, "lyngdal.no": true, "lyngen.no": true, "ivgu.no": true, "lardal.no": true, "lerdal.no": true, "xn--lrdal-sra.no": true, "lodingen.no": true, "xn--ldingen-q1a.no": true, "lorenskog.no": true, "xn--lrenskog-54a.no": true, "loten.no": true, "xn--lten-gra.no": true, "malvik.no": true, "masoy.no": true, "xn--msy-ula0h.no": true, "muosat.no": true, "xn--muost-0qa.no": true, "mandal.no": true, "marker.no": true, "marnardal.no": true, "masfjorden.no": true, "meland.no": true, "meldal.no": true, "melhus.no": true, "meloy.no": true, "xn--mely-ira.no": true, "meraker.no": true, "xn--merker-kua.no": true, "moareke.no": true, "xn--moreke-jua.no": true, "midsund.no": true, "midtre-gauldal.no": true, "modalen.no": true, "modum.no": true, "molde.no": true, "moskenes.no": true, "moss.no": true, "mosvik.no": true, "malselv.no": true, "xn--mlselv-iua.no": true, "malatvuopmi.no": true, "xn--mlatvuopmi-s4a.no": true, "namdalseid.no": true, "aejrie.no": true, "namsos.no": true, "namsskogan.no": true, "naamesjevuemie.no": true, "xn--nmesjevuemie-tcba.no": true, "laakesvuemie.no": true, "nannestad.no": true, "narvik.no": true, "narviika.no": true, "naustdal.no": true, "nedre-eiker.no": true, "nes.akershus.no": true, "nes.buskerud.no": true, "nesna.no": true, "nesodden.no": true, "nesseby.no": true, "unjarga.no": true, "xn--unjrga-rta.no": true, "nesset.no": true, "nissedal.no": true, "nittedal.no": true, "nord-aurdal.no": true, "nord-fron.no": true, "nord-odal.no": true, "norddal.no": true, "nordkapp.no": true, "davvenjarga.no": true, "xn--davvenjrga-y4a.no": true, "nordre-land.no": true, "nordreisa.no": true, "raisa.no": true, "xn--risa-5na.no": true, "nore-og-uvdal.no": true, "notodden.no": true, "naroy.no": true, "xn--nry-yla5g.no": true, "notteroy.no": true, "xn--nttery-byae.no": true, "odda.no": true, "oksnes.no": true, "xn--ksnes-uua.no": true, "oppdal.no": true, "oppegard.no": true, "xn--oppegrd-ixa.no": true, "orkdal.no": true, "orland.no": true, "xn--rland-uua.no": true, "orskog.no": true, "xn--rskog-uua.no": true, "orsta.no": true, "xn--rsta-fra.no": true, "os.hedmark.no": true, "os.hordaland.no": true, "osen.no": true, "osteroy.no": true, "xn--ostery-fya.no": true, "ostre-toten.no": true, "xn--stre-toten-zcb.no": true, "overhalla.no": true, "ovre-eiker.no": true, "xn--vre-eiker-k8a.no": true, "oyer.no": true, "xn--yer-zna.no": true, "oygarden.no": true, "xn--ygarden-p1a.no": true, "oystre-slidre.no": true, "xn--ystre-slidre-ujb.no": true, "porsanger.no": true, "porsangu.no": true, "xn--porsgu-sta26f.no": true, "porsgrunn.no": true, "radoy.no": true, "xn--rady-ira.no": true, "rakkestad.no": true, "rana.no": true, "ruovat.no": true, "randaberg.no": true, "rauma.no": true, "rendalen.no": true, "rennebu.no": true, "rennesoy.no": true, "xn--rennesy-v1a.no": true, "rindal.no": true, "ringebu.no": true, "ringerike.no": true, "ringsaker.no": true, "rissa.no": true, "risor.no": true, "xn--risr-ira.no": true, "roan.no": true, "rollag.no": true, "rygge.no": true, "ralingen.no": true, "xn--rlingen-mxa.no": true, "rodoy.no": true, "xn--rdy-0nab.no": true, "romskog.no": true, "xn--rmskog-bya.no": true, "roros.no": true, "xn--rros-gra.no": true, "rost.no": true, "xn--rst-0na.no": true, "royken.no": true, "xn--ryken-vua.no": true, "royrvik.no": true, "xn--ryrvik-bya.no": true, "rade.no": true, "xn--rde-ula.no": true, "salangen.no": true, "siellak.no": true, "saltdal.no": true, "salat.no": true, "xn--slt-elab.no": true, "xn--slat-5na.no": true, "samnanger.no": true, "sande.more-og-romsdal.no": true, "sande.xn--mre-og-romsdal-qqb.no": true, "sande.vestfold.no": true, "sandefjord.no": true, "sandnes.no": true, "sandoy.no": true, "xn--sandy-yua.no": true, "sarpsborg.no": true, "sauda.no": true, "sauherad.no": true, "sel.no": true, "selbu.no": true, "selje.no": true, "seljord.no": true, "sigdal.no": true, "siljan.no": true, "sirdal.no": true, "skaun.no": true, "skedsmo.no": true, "ski.no": true, "skien.no": true, "skiptvet.no": true, "skjervoy.no": true, "xn--skjervy-v1a.no": true, "skierva.no": true, "xn--skierv-uta.no": true, "skjak.no": true, "xn--skjk-soa.no": true, "skodje.no": true, "skanland.no": true, "xn--sknland-fxa.no": true, "skanit.no": true, "xn--sknit-yqa.no": true, "smola.no": true, "xn--smla-hra.no": true, "snillfjord.no": true, "snasa.no": true, "xn--snsa-roa.no": true, "snoasa.no": true, "snaase.no": true, "xn--snase-nra.no": true, "sogndal.no": true, "sokndal.no": true, "sola.no": true, "solund.no": true, "songdalen.no": true, "sortland.no": true, "spydeberg.no": true, "stange.no": true, "stavanger.no": true, "steigen.no": true, "steinkjer.no": true, "stjordal.no": true, "xn--stjrdal-s1a.no": true, "stokke.no": true, "stor-elvdal.no": true, "stord.no": true, "stordal.no": true, "storfjord.no": true, "omasvuotna.no": true, "strand.no": true, "stranda.no": true, "stryn.no": true, "sula.no": true, "suldal.no": true, "sund.no": true, "sunndal.no": true, "surnadal.no": true, "sveio.no": true, "svelvik.no": true, "sykkylven.no": true, "sogne.no": true, "xn--sgne-gra.no": true, "somna.no": true, "xn--smna-gra.no": true, "sondre-land.no": true, "xn--sndre-land-0cb.no": true, "sor-aurdal.no": true, "xn--sr-aurdal-l8a.no": true, "sor-fron.no": true, "xn--sr-fron-q1a.no": true, "sor-odal.no": true, "xn--sr-odal-q1a.no": true, "sor-varanger.no": true, "xn--sr-varanger-ggb.no": true, "matta-varjjat.no": true, "xn--mtta-vrjjat-k7af.no": true, "sorfold.no": true, "xn--srfold-bya.no": true, "sorreisa.no": true, "xn--srreisa-q1a.no": true, "sorum.no": true, "xn--srum-gra.no": true, "tana.no": true, "deatnu.no": true, "time.no": true, "tingvoll.no": true, "tinn.no": true, "tjeldsund.no": true, "dielddanuorri.no": true, "tjome.no": true, "xn--tjme-hra.no": true, "tokke.no": true, "tolga.no": true, "torsken.no": true, "tranoy.no": true, "xn--trany-yua.no": true, "tromso.no": true, "xn--troms-zua.no": true, "tromsa.no": true, "romsa.no": true, "trondheim.no": true, "troandin.no": true, "trysil.no": true, "trana.no": true, "xn--trna-woa.no": true, "trogstad.no": true, "xn--trgstad-r1a.no": true, "tvedestrand.no": true, "tydal.no": true, "tynset.no": true, "tysfjord.no": true, "divtasvuodna.no": true, "divttasvuotna.no": true, "tysnes.no": true, "tysvar.no": true, "xn--tysvr-vra.no": true, "tonsberg.no": true, "xn--tnsberg-q1a.no": true, "ullensaker.no": true, "ullensvang.no": true, "ulvik.no": true, "utsira.no": true, "vadso.no": true, "xn--vads-jra.no": true, "cahcesuolo.no": true, "xn--hcesuolo-7ya35b.no": true, "vaksdal.no": true, "valle.no": true, "vang.no": true, "vanylven.no": true, "vardo.no": true, "xn--vard-jra.no": true, "varggat.no": true, "xn--vrggt-xqad.no": true, "vefsn.no": true, "vaapste.no": true, "vega.no": true, "vegarshei.no": true, "xn--vegrshei-c0a.no": true, "vennesla.no": true, "verdal.no": true, "verran.no": true, "vestby.no": true, "vestnes.no": true, "vestre-slidre.no": true, "vestre-toten.no": true, "vestvagoy.no": true, "xn--vestvgy-ixa6o.no": true, "vevelstad.no": true, "vik.no": true, "vikna.no": true, "vindafjord.no": true, "volda.no": true, "voss.no": true, "varoy.no": true, "xn--vry-yla5g.no": true, "vagan.no": true, "xn--vgan-qoa.no": true, "voagat.no": true, "vagsoy.no": true, "xn--vgsy-qoa0j.no": true, "vaga.no": true, "xn--vg-yiab.no": true, "valer.ostfold.no": true, "xn--vler-qoa.xn--stfold-9xa.no": true, "valer.hedmark.no": true, "xn--vler-qoa.hedmark.no": true, "*.np": true, "nr": true, "biz.nr": true, "info.nr": true, "gov.nr": true, "edu.nr": true, "org.nr": true, "net.nr": true, "com.nr": true, "nu": true, "nz": true, "ac.nz": true, "co.nz": true, "cri.nz": true, "geek.nz": true, "gen.nz": true, "govt.nz": true, "health.nz": true, "iwi.nz": true, "kiwi.nz": true, "maori.nz": true, "mil.nz": true, "xn--mori-qsa.nz": true, "net.nz": true, "org.nz": true, "parliament.nz": true, "school.nz": true, "om": true, "co.om": true, "com.om": true, "edu.om": true, "gov.om": true, "med.om": true, "museum.om": true, "net.om": true, "org.om": true, "pro.om": true, "org": true, "pa": true, "ac.pa": true, "gob.pa": true, "com.pa": true, "org.pa": true, "sld.pa": true, "edu.pa": true, "net.pa": true, "ing.pa": true, "abo.pa": true, "med.pa": true, "nom.pa": true, "pe": true, "edu.pe": true, "gob.pe": true, "nom.pe": true, "mil.pe": true, "org.pe": true, "com.pe": true, "net.pe": true, "pf": true, "com.pf": true, "org.pf": true, "edu.pf": true, "*.pg": true, "ph": true, "com.ph": true, "net.ph": true, "org.ph": true, "gov.ph": true, "edu.ph": true, "ngo.ph": true, "mil.ph": true, "i.ph": true, "pk": true, "com.pk": true, "net.pk": true, "edu.pk": true, "org.pk": true, "fam.pk": true, "biz.pk": true, "web.pk": true, "gov.pk": true, "gob.pk": true, "gok.pk": true, "gon.pk": true, "gop.pk": true, "gos.pk": true, "info.pk": true, "pl": true, "com.pl": true, "net.pl": true, "org.pl": true, "aid.pl": true, "agro.pl": true, "atm.pl": true, "auto.pl": true, "biz.pl": true, "edu.pl": true, "gmina.pl": true, "gsm.pl": true, "info.pl": true, "mail.pl": true, "miasta.pl": true, "media.pl": true, "mil.pl": true, "nieruchomosci.pl": true, "nom.pl": true, "pc.pl": true, "powiat.pl": true, "priv.pl": true, "realestate.pl": true, "rel.pl": true, "sex.pl": true, "shop.pl": true, "sklep.pl": true, "sos.pl": true, "szkola.pl": true, "targi.pl": true, "tm.pl": true, "tourism.pl": true, "travel.pl": true, "turystyka.pl": true, "gov.pl": true, "ap.gov.pl": true, "ic.gov.pl": true, "is.gov.pl": true, "us.gov.pl": true, "kmpsp.gov.pl": true, "kppsp.gov.pl": true, "kwpsp.gov.pl": true, "psp.gov.pl": true, "wskr.gov.pl": true, "kwp.gov.pl": true, "mw.gov.pl": true, "ug.gov.pl": true, "um.gov.pl": true, "umig.gov.pl": true, "ugim.gov.pl": true, "upow.gov.pl": true, "uw.gov.pl": true, "starostwo.gov.pl": true, "pa.gov.pl": true, "po.gov.pl": true, "psse.gov.pl": true, "pup.gov.pl": true, "rzgw.gov.pl": true, "sa.gov.pl": true, "so.gov.pl": true, "sr.gov.pl": true, "wsa.gov.pl": true, "sko.gov.pl": true, "uzs.gov.pl": true, "wiih.gov.pl": true, "winb.gov.pl": true, "pinb.gov.pl": true, "wios.gov.pl": true, "witd.gov.pl": true, "wzmiuw.gov.pl": true, "piw.gov.pl": true, "wiw.gov.pl": true, "griw.gov.pl": true, "wif.gov.pl": true, "oum.gov.pl": true, "sdn.gov.pl": true, "zp.gov.pl": true, "uppo.gov.pl": true, "mup.gov.pl": true, "wuoz.gov.pl": true, "konsulat.gov.pl": true, "oirm.gov.pl": true, "augustow.pl": true, "babia-gora.pl": true, "bedzin.pl": true, "beskidy.pl": true, "bialowieza.pl": true, "bialystok.pl": true, "bielawa.pl": true, "bieszczady.pl": true, "boleslawiec.pl": true, "bydgoszcz.pl": true, "bytom.pl": true, "cieszyn.pl": true, "czeladz.pl": true, "czest.pl": true, "dlugoleka.pl": true, "elblag.pl": true, "elk.pl": true, "glogow.pl": true, "gniezno.pl": true, "gorlice.pl": true, "grajewo.pl": true, "ilawa.pl": true, "jaworzno.pl": true, "jelenia-gora.pl": true, "jgora.pl": true, "kalisz.pl": true, "kazimierz-dolny.pl": true, "karpacz.pl": true, "kartuzy.pl": true, "kaszuby.pl": true, "katowice.pl": true, "kepno.pl": true, "ketrzyn.pl": true, "klodzko.pl": true, "kobierzyce.pl": true, "kolobrzeg.pl": true, "konin.pl": true, "konskowola.pl": true, "kutno.pl": true, "lapy.pl": true, "lebork.pl": true, "legnica.pl": true, "lezajsk.pl": true, "limanowa.pl": true, "lomza.pl": true, "lowicz.pl": true, "lubin.pl": true, "lukow.pl": true, "malbork.pl": true, "malopolska.pl": true, "mazowsze.pl": true, "mazury.pl": true, "mielec.pl": true, "mielno.pl": true, "mragowo.pl": true, "naklo.pl": true, "nowaruda.pl": true, "nysa.pl": true, "olawa.pl": true, "olecko.pl": true, "olkusz.pl": true, "olsztyn.pl": true, "opoczno.pl": true, "opole.pl": true, "ostroda.pl": true, "ostroleka.pl": true, "ostrowiec.pl": true, "ostrowwlkp.pl": true, "pila.pl": true, "pisz.pl": true, "podhale.pl": true, "podlasie.pl": true, "polkowice.pl": true, "pomorze.pl": true, "pomorskie.pl": true, "prochowice.pl": true, "pruszkow.pl": true, "przeworsk.pl": true, "pulawy.pl": true, "radom.pl": true, "rawa-maz.pl": true, "rybnik.pl": true, "rzeszow.pl": true, "sanok.pl": true, "sejny.pl": true, "slask.pl": true, "slupsk.pl": true, "sosnowiec.pl": true, "stalowa-wola.pl": true, "skoczow.pl": true, "starachowice.pl": true, "stargard.pl": true, "suwalki.pl": true, "swidnica.pl": true, "swiebodzin.pl": true, "swinoujscie.pl": true, "szczecin.pl": true, "szczytno.pl": true, "tarnobrzeg.pl": true, "tgory.pl": true, "turek.pl": true, "tychy.pl": true, "ustka.pl": true, "walbrzych.pl": true, "warmia.pl": true, "warszawa.pl": true, "waw.pl": true, "wegrow.pl": true, "wielun.pl": true, "wlocl.pl": true, "wloclawek.pl": true, "wodzislaw.pl": true, "wolomin.pl": true, "wroclaw.pl": true, "zachpomor.pl": true, "zagan.pl": true, "zarow.pl": true, "zgora.pl": true, "zgorzelec.pl": true, "pm": true, "pn": true, "gov.pn": true, "co.pn": true, "org.pn": true, "edu.pn": true, "net.pn": true, "post": true, "pr": true, "com.pr": true, "net.pr": true, "org.pr": true, "gov.pr": true, "edu.pr": true, "isla.pr": true, "pro.pr": true, "biz.pr": true, "info.pr": true, "name.pr": true, "est.pr": true, "prof.pr": true, "ac.pr": true, "pro": true, "aca.pro": true, "bar.pro": true, "cpa.pro": true, "jur.pro": true, "law.pro": true, "med.pro": true, "eng.pro": true, "ps": true, "edu.ps": true, "gov.ps": true, "sec.ps": true, "plo.ps": true, "com.ps": true, "org.ps": true, "net.ps": true, "pt": true, "net.pt": true, "gov.pt": true, "org.pt": true, "edu.pt": true, "int.pt": true, "publ.pt": true, "com.pt": true, "nome.pt": true, "pw": true, "co.pw": true, "ne.pw": true, "or.pw": true, "ed.pw": true, "go.pw": true, "belau.pw": true, "py": true, "com.py": true, "coop.py": true, "edu.py": true, "gov.py": true, "mil.py": true, "net.py": true, "org.py": true, "qa": true, "com.qa": true, "edu.qa": true, "gov.qa": true, "mil.qa": true, "name.qa": true, "net.qa": true, "org.qa": true, "sch.qa": true, "re": true, "com.re": true, "asso.re": true, "nom.re": true, "ro": true, "com.ro": true, "org.ro": true, "tm.ro": true, "nt.ro": true, "nom.ro": true, "info.ro": true, "rec.ro": true, "arts.ro": true, "firm.ro": true, "store.ro": true, "www.ro": true, "rs": true, "co.rs": true, "org.rs": true, "edu.rs": true, "ac.rs": true, "gov.rs": true, "in.rs": true, "ru": true, "ac.ru": true, "com.ru": true, "edu.ru": true, "int.ru": true, "net.ru": true, "org.ru": true, "pp.ru": true, "adygeya.ru": true, "altai.ru": true, "amur.ru": true, "arkhangelsk.ru": true, "astrakhan.ru": true, "bashkiria.ru": true, "belgorod.ru": true, "bir.ru": true, "bryansk.ru": true, "buryatia.ru": true, "cbg.ru": true, "chel.ru": true, "chelyabinsk.ru": true, "chita.ru": true, "chukotka.ru": true, "chuvashia.ru": true, "dagestan.ru": true, "dudinka.ru": true, "e-burg.ru": true, "grozny.ru": true, "irkutsk.ru": true, "ivanovo.ru": true, "izhevsk.ru": true, "jar.ru": true, "joshkar-ola.ru": true, "kalmykia.ru": true, "kaluga.ru": true, "kamchatka.ru": true, "karelia.ru": true, "kazan.ru": true, "kchr.ru": true, "kemerovo.ru": true, "khabarovsk.ru": true, "khakassia.ru": true, "khv.ru": true, "kirov.ru": true, "koenig.ru": true, "komi.ru": true, "kostroma.ru": true, "krasnoyarsk.ru": true, "kuban.ru": true, "kurgan.ru": true, "kursk.ru": true, "lipetsk.ru": true, "magadan.ru": true, "mari.ru": true, "mari-el.ru": true, "marine.ru": true, "mordovia.ru": true, "msk.ru": true, "murmansk.ru": true, "nalchik.ru": true, "nnov.ru": true, "nov.ru": true, "novosibirsk.ru": true, "nsk.ru": true, "omsk.ru": true, "orenburg.ru": true, "oryol.ru": true, "palana.ru": true, "penza.ru": true, "perm.ru": true, "ptz.ru": true, "rnd.ru": true, "ryazan.ru": true, "sakhalin.ru": true, "samara.ru": true, "saratov.ru": true, "simbirsk.ru": true, "smolensk.ru": true, "spb.ru": true, "stavropol.ru": true, "stv.ru": true, "surgut.ru": true, "tambov.ru": true, "tatarstan.ru": true, "tom.ru": true, "tomsk.ru": true, "tsaritsyn.ru": true, "tsk.ru": true, "tula.ru": true, "tuva.ru": true, "tver.ru": true, "tyumen.ru": true, "udm.ru": true, "udmurtia.ru": true, "ulan-ude.ru": true, "vladikavkaz.ru": true, "vladimir.ru": true, "vladivostok.ru": true, "volgograd.ru": true, "vologda.ru": true, "voronezh.ru": true, "vrn.ru": true, "vyatka.ru": true, "yakutia.ru": true, "yamal.ru": true, "yaroslavl.ru": true, "yekaterinburg.ru": true, "yuzhno-sakhalinsk.ru": true, "amursk.ru": true, "baikal.ru": true, "cmw.ru": true, "fareast.ru": true, "jamal.ru": true, "kms.ru": true, "k-uralsk.ru": true, "kustanai.ru": true, "kuzbass.ru": true, "magnitka.ru": true, "mytis.ru": true, "nakhodka.ru": true, "nkz.ru": true, "norilsk.ru": true, "oskol.ru": true, "pyatigorsk.ru": true, "rubtsovsk.ru": true, "snz.ru": true, "syzran.ru": true, "vdonsk.ru": true, "zgrad.ru": true, "gov.ru": true, "mil.ru": true, "test.ru": true, "rw": true, "gov.rw": true, "net.rw": true, "edu.rw": true, "ac.rw": true, "com.rw": true, "co.rw": true, "int.rw": true, "mil.rw": true, "gouv.rw": true, "sa": true, "com.sa": true, "net.sa": true, "org.sa": true, "gov.sa": true, "med.sa": true, "pub.sa": true, "edu.sa": true, "sch.sa": true, "sb": true, "com.sb": true, "edu.sb": true, "gov.sb": true, "net.sb": true, "org.sb": true, "sc": true, "com.sc": true, "gov.sc": true, "net.sc": true, "org.sc": true, "edu.sc": true, "sd": true, "com.sd": true, "net.sd": true, "org.sd": true, "edu.sd": true, "med.sd": true, "tv.sd": true, "gov.sd": true, "info.sd": true, "se": true, "a.se": true, "ac.se": true, "b.se": true, "bd.se": true, "brand.se": true, "c.se": true, "d.se": true, "e.se": true, "f.se": true, "fh.se": true, "fhsk.se": true, "fhv.se": true, "g.se": true, "h.se": true, "i.se": true, "k.se": true, "komforb.se": true, "kommunalforbund.se": true, "komvux.se": true, "l.se": true, "lanbib.se": true, "m.se": true, "n.se": true, "naturbruksgymn.se": true, "o.se": true, "org.se": true, "p.se": true, "parti.se": true, "pp.se": true, "press.se": true, "r.se": true, "s.se": true, "t.se": true, "tm.se": true, "u.se": true, "w.se": true, "x.se": true, "y.se": true, "z.se": true, "sg": true, "com.sg": true, "net.sg": true, "org.sg": true, "gov.sg": true, "edu.sg": true, "per.sg": true, "sh": true, "com.sh": true, "net.sh": true, "gov.sh": true, "org.sh": true, "mil.sh": true, "si": true, "sj": true, "sk": true, "sl": true, "com.sl": true, "net.sl": true, "edu.sl": true, "gov.sl": true, "org.sl": true, "sm": true, "sn": true, "art.sn": true, "com.sn": true, "edu.sn": true, "gouv.sn": true, "org.sn": true, "perso.sn": true, "univ.sn": true, "so": true, "com.so": true, "net.so": true, "org.so": true, "sr": true, "st": true, "co.st": true, "com.st": true, "consulado.st": true, "edu.st": true, "embaixada.st": true, "gov.st": true, "mil.st": true, "net.st": true, "org.st": true, "principe.st": true, "saotome.st": true, "store.st": true, "su": true, "adygeya.su": true, "arkhangelsk.su": true, "balashov.su": true, "bashkiria.su": true, "bryansk.su": true, "dagestan.su": true, "grozny.su": true, "ivanovo.su": true, "kalmykia.su": true, "kaluga.su": true, "karelia.su": true, "khakassia.su": true, "krasnodar.su": true, "kurgan.su": true, "lenug.su": true, "mordovia.su": true, "msk.su": true, "murmansk.su": true, "nalchik.su": true, "nov.su": true, "obninsk.su": true, "penza.su": true, "pokrovsk.su": true, "sochi.su": true, "spb.su": true, "togliatti.su": true, "troitsk.su": true, "tula.su": true, "tuva.su": true, "vladikavkaz.su": true, "vladimir.su": true, "vologda.su": true, "sv": true, "com.sv": true, "edu.sv": true, "gob.sv": true, "org.sv": true, "red.sv": true, "sx": true, "gov.sx": true, "sy": true, "edu.sy": true, "gov.sy": true, "net.sy": true, "mil.sy": true, "com.sy": true, "org.sy": true, "sz": true, "co.sz": true, "ac.sz": true, "org.sz": true, "tc": true, "td": true, "tel": true, "tf": true, "tg": true, "th": true, "ac.th": true, "co.th": true, "go.th": true, "in.th": true, "mi.th": true, "net.th": true, "or.th": true, "tj": true, "ac.tj": true, "biz.tj": true, "co.tj": true, "com.tj": true, "edu.tj": true, "go.tj": true, "gov.tj": true, "int.tj": true, "mil.tj": true, "name.tj": true, "net.tj": true, "nic.tj": true, "org.tj": true, "test.tj": true, "web.tj": true, "tk": true, "tl": true, "gov.tl": true, "tm": true, "com.tm": true, "co.tm": true, "org.tm": true, "net.tm": true, "nom.tm": true, "gov.tm": true, "mil.tm": true, "edu.tm": true, "tn": true, "com.tn": true, "ens.tn": true, "fin.tn": true, "gov.tn": true, "ind.tn": true, "intl.tn": true, "nat.tn": true, "net.tn": true, "org.tn": true, "info.tn": true, "perso.tn": true, "tourism.tn": true, "edunet.tn": true, "rnrt.tn": true, "rns.tn": true, "rnu.tn": true, "mincom.tn": true, "agrinet.tn": true, "defense.tn": true, "turen.tn": true, "to": true, "com.to": true, "gov.to": true, "net.to": true, "org.to": true, "edu.to": true, "mil.to": true, "tp": true, "tr": true, "com.tr": true, "info.tr": true, "biz.tr": true, "net.tr": true, "org.tr": true, "web.tr": true, "gen.tr": true, "tv.tr": true, "av.tr": true, "dr.tr": true, "bbs.tr": true, "name.tr": true, "tel.tr": true, "gov.tr": true, "bel.tr": true, "pol.tr": true, "mil.tr": true, "k12.tr": true, "edu.tr": true, "kep.tr": true, "nc.tr": true, "gov.nc.tr": true, "travel": true, "tt": true, "co.tt": true, "com.tt": true, "org.tt": true, "net.tt": true, "biz.tt": true, "info.tt": true, "pro.tt": true, "int.tt": true, "coop.tt": true, "jobs.tt": true, "mobi.tt": true, "travel.tt": true, "museum.tt": true, "aero.tt": true, "name.tt": true, "gov.tt": true, "edu.tt": true, "tv": true, "tw": true, "edu.tw": true, "gov.tw": true, "mil.tw": true, "com.tw": true, "net.tw": true, "org.tw": true, "idv.tw": true, "game.tw": true, "ebiz.tw": true, "club.tw": true, "xn--zf0ao64a.tw": true, "xn--uc0atv.tw": true, "xn--czrw28b.tw": true, "tz": true, "ac.tz": true, "co.tz": true, "go.tz": true, "hotel.tz": true, "info.tz": true, "me.tz": true, "mil.tz": true, "mobi.tz": true, "ne.tz": true, "or.tz": true, "sc.tz": true, "tv.tz": true, "ua": true, "com.ua": true, "edu.ua": true, "gov.ua": true, "in.ua": true, "net.ua": true, "org.ua": true, "cherkassy.ua": true, "cherkasy.ua": true, "chernigov.ua": true, "chernihiv.ua": true, "chernivtsi.ua": true, "chernovtsy.ua": true, "ck.ua": true, "cn.ua": true, "cr.ua": true, "crimea.ua": true, "cv.ua": true, "dn.ua": true, "dnepropetrovsk.ua": true, "dnipropetrovsk.ua": true, "dominic.ua": true, "donetsk.ua": true, "dp.ua": true, "if.ua": true, "ivano-frankivsk.ua": true, "kh.ua": true, "kharkiv.ua": true, "kharkov.ua": true, "kherson.ua": true, "khmelnitskiy.ua": true, "khmelnytskyi.ua": true, "kiev.ua": true, "kirovograd.ua": true, "km.ua": true, "kr.ua": true, "krym.ua": true, "ks.ua": true, "kv.ua": true, "kyiv.ua": true, "lg.ua": true, "lt.ua": true, "lugansk.ua": true, "lutsk.ua": true, "lv.ua": true, "lviv.ua": true, "mk.ua": true, "mykolaiv.ua": true, "nikolaev.ua": true, "od.ua": true, "odesa.ua": true, "odessa.ua": true, "pl.ua": true, "poltava.ua": true, "rivne.ua": true, "rovno.ua": true, "rv.ua": true, "sb.ua": true, "sebastopol.ua": true, "sevastopol.ua": true, "sm.ua": true, "sumy.ua": true, "te.ua": true, "ternopil.ua": true, "uz.ua": true, "uzhgorod.ua": true, "vinnica.ua": true, "vinnytsia.ua": true, "vn.ua": true, "volyn.ua": true, "yalta.ua": true, "zaporizhzhe.ua": true, "zaporizhzhia.ua": true, "zhitomir.ua": true, "zhytomyr.ua": true, "zp.ua": true, "zt.ua": true, "ug": true, "co.ug": true, "or.ug": true, "ac.ug": true, "sc.ug": true, "go.ug": true, "ne.ug": true, "com.ug": true, "org.ug": true, "uk": true, "ac.uk": true, "co.uk": true, "gov.uk": true, "ltd.uk": true, "me.uk": true, "net.uk": true, "nhs.uk": true, "org.uk": true, "plc.uk": true, "police.uk": true, "*.sch.uk": true, "us": true, "dni.us": true, "fed.us": true, "isa.us": true, "kids.us": true, "nsn.us": true, "ak.us": true, "al.us": true, "ar.us": true, "as.us": true, "az.us": true, "ca.us": true, "co.us": true, "ct.us": true, "dc.us": true, "de.us": true, "fl.us": true, "ga.us": true, "gu.us": true, "hi.us": true, "ia.us": true, "id.us": true, "il.us": true, "in.us": true, "ks.us": true, "ky.us": true, "la.us": true, "ma.us": true, "md.us": true, "me.us": true, "mi.us": true, "mn.us": true, "mo.us": true, "ms.us": true, "mt.us": true, "nc.us": true, "nd.us": true, "ne.us": true, "nh.us": true, "nj.us": true, "nm.us": true, "nv.us": true, "ny.us": true, "oh.us": true, "ok.us": true, "or.us": true, "pa.us": true, "pr.us": true, "ri.us": true, "sc.us": true, "sd.us": true, "tn.us": true, "tx.us": true, "ut.us": true, "vi.us": true, "vt.us": true, "va.us": true, "wa.us": true, "wi.us": true, "wv.us": true, "wy.us": true, "k12.ak.us": true, "k12.al.us": true, "k12.ar.us": true, "k12.as.us": true, "k12.az.us": true, "k12.ca.us": true, "k12.co.us": true, "k12.ct.us": true, "k12.dc.us": true, "k12.de.us": true, "k12.fl.us": true, "k12.ga.us": true, "k12.gu.us": true, "k12.ia.us": true, "k12.id.us": true, "k12.il.us": true, "k12.in.us": true, "k12.ks.us": true, "k12.ky.us": true, "k12.la.us": true, "k12.ma.us": true, "k12.md.us": true, "k12.me.us": true, "k12.mi.us": true, "k12.mn.us": true, "k12.mo.us": true, "k12.ms.us": true, "k12.mt.us": true, "k12.nc.us": true, "k12.ne.us": true, "k12.nh.us": true, "k12.nj.us": true, "k12.nm.us": true, "k12.nv.us": true, "k12.ny.us": true, "k12.oh.us": true, "k12.ok.us": true, "k12.or.us": true, "k12.pa.us": true, "k12.pr.us": true, "k12.ri.us": true, "k12.sc.us": true, "k12.tn.us": true, "k12.tx.us": true, "k12.ut.us": true, "k12.vi.us": true, "k12.vt.us": true, "k12.va.us": true, "k12.wa.us": true, "k12.wi.us": true, "k12.wy.us": true, "cc.ak.us": true, "cc.al.us": true, "cc.ar.us": true, "cc.as.us": true, "cc.az.us": true, "cc.ca.us": true, "cc.co.us": true, "cc.ct.us": true, "cc.dc.us": true, "cc.de.us": true, "cc.fl.us": true, "cc.ga.us": true, "cc.gu.us": true, "cc.hi.us": true, "cc.ia.us": true, "cc.id.us": true, "cc.il.us": true, "cc.in.us": true, "cc.ks.us": true, "cc.ky.us": true, "cc.la.us": true, "cc.ma.us": true, "cc.md.us": true, "cc.me.us": true, "cc.mi.us": true, "cc.mn.us": true, "cc.mo.us": true, "cc.ms.us": true, "cc.mt.us": true, "cc.nc.us": true, "cc.nd.us": true, "cc.ne.us": true, "cc.nh.us": true, "cc.nj.us": true, "cc.nm.us": true, "cc.nv.us": true, "cc.ny.us": true, "cc.oh.us": true, "cc.ok.us": true, "cc.or.us": true, "cc.pa.us": true, "cc.pr.us": true, "cc.ri.us": true, "cc.sc.us": true, "cc.sd.us": true, "cc.tn.us": true, "cc.tx.us": true, "cc.ut.us": true, "cc.vi.us": true, "cc.vt.us": true, "cc.va.us": true, "cc.wa.us": true, "cc.wi.us": true, "cc.wv.us": true, "cc.wy.us": true, "lib.ak.us": true, "lib.al.us": true, "lib.ar.us": true, "lib.as.us": true, "lib.az.us": true, "lib.ca.us": true, "lib.co.us": true, "lib.ct.us": true, "lib.dc.us": true, "lib.de.us": true, "lib.fl.us": true, "lib.ga.us": true, "lib.gu.us": true, "lib.hi.us": true, "lib.ia.us": true, "lib.id.us": true, "lib.il.us": true, "lib.in.us": true, "lib.ks.us": true, "lib.ky.us": true, "lib.la.us": true, "lib.ma.us": true, "lib.md.us": true, "lib.me.us": true, "lib.mi.us": true, "lib.mn.us": true, "lib.mo.us": true, "lib.ms.us": true, "lib.mt.us": true, "lib.nc.us": true, "lib.nd.us": true, "lib.ne.us": true, "lib.nh.us": true, "lib.nj.us": true, "lib.nm.us": true, "lib.nv.us": true, "lib.ny.us": true, "lib.oh.us": true, "lib.ok.us": true, "lib.or.us": true, "lib.pa.us": true, "lib.pr.us": true, "lib.ri.us": true, "lib.sc.us": true, "lib.sd.us": true, "lib.tn.us": true, "lib.tx.us": true, "lib.ut.us": true, "lib.vi.us": true, "lib.vt.us": true, "lib.va.us": true, "lib.wa.us": true, "lib.wi.us": true, "lib.wy.us": true, "pvt.k12.ma.us": true, "chtr.k12.ma.us": true, "paroch.k12.ma.us": true, "uy": true, "com.uy": true, "edu.uy": true, "gub.uy": true, "mil.uy": true, "net.uy": true, "org.uy": true, "uz": true, "co.uz": true, "com.uz": true, "net.uz": true, "org.uz": true, "va": true, "vc": true, "com.vc": true, "net.vc": true, "org.vc": true, "gov.vc": true, "mil.vc": true, "edu.vc": true, "ve": true, "arts.ve": true, "co.ve": true, "com.ve": true, "e12.ve": true, "edu.ve": true, "firm.ve": true, "gob.ve": true, "gov.ve": true, "info.ve": true, "int.ve": true, "mil.ve": true, "net.ve": true, "org.ve": true, "rec.ve": true, "store.ve": true, "tec.ve": true, "web.ve": true, "vg": true, "vi": true, "co.vi": true, "com.vi": true, "k12.vi": true, "net.vi": true, "org.vi": true, "vn": true, "com.vn": true, "net.vn": true, "org.vn": true, "edu.vn": true, "gov.vn": true, "int.vn": true, "ac.vn": true, "biz.vn": true, "info.vn": true, "name.vn": true, "pro.vn": true, "health.vn": true, "vu": true, "com.vu": true, "edu.vu": true, "net.vu": true, "org.vu": true, "wf": true, "ws": true, "com.ws": true, "net.ws": true, "org.ws": true, "gov.ws": true, "edu.ws": true, "yt": true, "xn--mgbaam7a8h": true, "xn--y9a3aq": true, "xn--54b7fta0cc": true, "xn--90ais": true, "xn--fiqs8s": true, "xn--fiqz9s": true, "xn--lgbbat1ad8j": true, "xn--wgbh1c": true, "xn--node": true, "xn--qxam": true, "xn--j6w193g": true, "xn--h2brj9c": true, "xn--mgbbh1a71e": true, "xn--fpcrj9c3d": true, "xn--gecrj9c": true, "xn--s9brj9c": true, "xn--45brj9c": true, "xn--xkc2dl3a5ee0h": true, "xn--mgba3a4f16a": true, "xn--mgba3a4fra": true, "xn--mgbtx2b": true, "xn--mgbayh7gpa": true, "xn--3e0b707e": true, "xn--80ao21a": true, "xn--fzc2c9e2c": true, "xn--xkc2al3hye2a": true, "xn--mgbc0a9azcg": true, "xn--d1alf": true, "xn--l1acc": true, "xn--mix891f": true, "xn--mix082f": true, "xn--mgbx4cd0ab": true, "xn--mgb9awbf": true, "xn--mgbai9azgqp6j": true, "xn--mgbai9a5eva00b": true, "xn--ygbi2ammx": true, "xn--90a3ac": true, "xn--o1ac.xn--90a3ac": true, "xn--c1avg.xn--90a3ac": true, "xn--90azh.xn--90a3ac": true, "xn--d1at.xn--90a3ac": true, "xn--o1ach.xn--90a3ac": true, "xn--80au.xn--90a3ac": true, "xn--p1ai": true, "xn--wgbl6a": true, "xn--mgberp4a5d4ar": true, "xn--mgberp4a5d4a87g": true, "xn--mgbqly7c0a67fbc": true, "xn--mgbqly7cvafr": true, "xn--mgbpl2fh": true, "xn--yfro4i67o": true, "xn--clchc0ea0b2g2a9gcd": true, "xn--ogbpf8fl": true, "xn--mgbtf8fl": true, "xn--o3cw4h": true, "xn--pgbs0dh": true, "xn--kpry57d": true, "xn--kprw13d": true, "xn--nnx388a": true, "xn--j1amh": true, "xn--mgb2ddes": true, "xxx": true, "*.ye": true, "ac.za": true, "agrica.za": true, "alt.za": true, "co.za": true, "edu.za": true, "gov.za": true, "grondar.za": true, "law.za": true, "mil.za": true, "net.za": true, "ngo.za": true, "nis.za": true, "nom.za": true, "org.za": true, "school.za": true, "tm.za": true, "web.za": true, "*.zm": true, "*.zw": true, "aaa": true, "aarp": true, "abarth": true, "abb": true, "abbott": true, "abbvie": true, "abc": true, "able": true, "abogado": true, "abudhabi": true, "academy": true, "accenture": true, "accountant": true, "accountants": true, "aco": true, "active": true, "actor": true, "adac": true, "ads": true, "adult": true, "aeg": true, "aetna": true, "afamilycompany": true, "afl": true, "africa": true, "africamagic": true, "agakhan": true, "agency": true, "aig": true, "aigo": true, "airbus": true, "airforce": true, "airtel": true, "akdn": true, "alfaromeo": true, "alibaba": true, "alipay": true, "allfinanz": true, "allstate": true, "ally": true, "alsace": true, "alstom": true, "americanexpress": true, "americanfamily": true, "amex": true, "amfam": true, "amica": true, "amsterdam": true, "analytics": true, "android": true, "anquan": true, "anz": true, "aol": true, "apartments": true, "app": true, "apple": true, "aquarelle": true, "aramco": true, "archi": true, "army": true, "arte": true, "asda": true, "associates": true, "athleta": true, "attorney": true, "auction": true, "audi": true, "audible": true, "audio": true, "auspost": true, "author": true, "auto": true, "autos": true, "avianca": true, "aws": true, "axa": true, "azure": true, "baby": true, "baidu": true, "banamex": true, "bananarepublic": true, "band": true, "bank": true, "bar": true, "barcelona": true, "barclaycard": true, "barclays": true, "barefoot": true, "bargains": true, "basketball": true, "bauhaus": true, "bayern": true, "bbc": true, "bbt": true, "bbva": true, "bcg": true, "bcn": true, "beats": true, "beer": true, "bentley": true, "berlin": true, "best": true, "bestbuy": true, "bet": true, "bharti": true, "bible": true, "bid": true, "bike": true, "bing": true, "bingo": true, "bio": true, "black": true, "blackfriday": true, "blanco": true, "blockbuster": true, "blog": true, "bloomberg": true, "blue": true, "bms": true, "bmw": true, "bnl": true, "bnpparibas": true, "boats": true, "boehringer": true, "bofa": true, "bom": true, "bond": true, "boo": true, "book": true, "booking": true, "boots": true, "bosch": true, "bostik": true, "bot": true, "boutique": true, "bradesco": true, "bridgestone": true, "broadway": true, "broker": true, "brother": true, "brussels": true, "budapest": true, "bugatti": true, "build": true, "builders": true, "business": true, "buy": true, "buzz": true, "bzh": true, "cab": true, "cafe": true, "cal": true, "call": true, "calvinklein": true, "camera": true, "camp": true, "cancerresearch": true, "canon": true, "capetown": true, "capital": true, "capitalone": true, "car": true, "caravan": true, "cards": true, "care": true, "career": true, "careers": true, "cars": true, "cartier": true, "casa": true, "case": true, "caseih": true, "cash": true, "casino": true, "catering": true, "cba": true, "cbn": true, "cbre": true, "cbs": true, "ceb": true, "center": true, "ceo": true, "cern": true, "cfa": true, "cfd": true, "chanel": true, "channel": true, "chase": true, "chat": true, "cheap": true, "chintai": true, "chloe": true, "christmas": true, "chrome": true, "chrysler": true, "church": true, "cipriani": true, "circle": true, "cisco": true, "citadel": true, "citi": true, "citic": true, "city": true, "cityeats": true, "claims": true, "cleaning": true, "click": true, "clinic": true, "clothing": true, "cloud": true, "club": true, "clubmed": true, "coach": true, "codes": true, "coffee": true, "college": true, "cologne": true, "comcast": true, "commbank": true, "community": true, "company": true, "computer": true, "comsec": true, "condos": true, "construction": true, "consulting": true, "contact": true, "contractors": true, "cooking": true, "cookingchannel": true, "cool": true, "corsica": true, "country": true, "coupon": true, "coupons": true, "courses": true, "credit": true, "creditcard": true, "creditunion": true, "cricket": true, "crown": true, "crs": true, "cruises": true, "csc": true, "cuisinella": true, "cymru": true, "cyou": true, "dabur": true, "dad": true, "dance": true, "date": true, "dating": true, "datsun": true, "day": true, "dclk": true, "dds": true, "deal": true, "dealer": true, "deals": true, "degree": true, "delivery": true, "dell": true, "deloitte": true, "delta": true, "democrat": true, "dental": true, "dentist": true, "desi": true, "design": true, "dev": true, "dhl": true, "diamonds": true, "diet": true, "digital": true, "direct": true, "directory": true, "discount": true, "discover": true, "dish": true, "dnp": true, "docs": true, "dodge": true, "dog": true, "doha": true, "domains": true, "doosan": true, "dot": true, "download": true, "drive": true, "dstv": true, "dtv": true, "dubai": true, "duck": true, "dunlop": true, "duns": true, "dupont": true, "durban": true, "dvag": true, "dwg": true, "earth": true, "eat": true, "edeka": true, "education": true, "email": true, "emerck": true, "emerson": true, "energy": true, "engineer": true, "engineering": true, "enterprises": true, "epost": true, "epson": true, "equipment": true, "ericsson": true, "erni": true, "esq": true, "estate": true, "esurance": true, "etisalat": true, "eurovision": true, "eus": true, "events": true, "everbank": true, "exchange": true, "expert": true, "exposed": true, "express": true, "extraspace": true, "fage": true, "fail": true, "fairwinds": true, "faith": true, "family": true, "fan": true, "fans": true, "farm": true, "farmers": true, "fashion": true, "fast": true, "fedex": true, "feedback": true, "ferrari": true, "ferrero": true, "fiat": true, "fidelity": true, "fido": true, "film": true, "final": true, "finance": true, "financial": true, "fire": true, "firestone": true, "firmdale": true, "fish": true, "fishing": true, "fit": true, "fitness": true, "flickr": true, "flights": true, "flir": true, "florist": true, "flowers": true, "flsmidth": true, "fly": true, "foo": true, "foodnetwork": true, "football": true, "ford": true, "forex": true, "forsale": true, "forum": true, "foundation": true, "fox": true, "fresenius": true, "frl": true, "frogans": true, "frontdoor": true, "frontier": true, "ftr": true, "fujitsu": true, "fujixerox": true, "fund": true, "furniture": true, "futbol": true, "fyi": true, "gal": true, "gallery": true, "gallo": true, "gallup": true, "game": true, "games": true, "gap": true, "garden": true, "gbiz": true, "gdn": true, "gea": true, "gent": true, "genting": true, "george": true, "ggee": true, "gift": true, "gifts": true, "gives": true, "giving": true, "glade": true, "glass": true, "gle": true, "global": true, "globo": true, "gmail": true, "gmo": true, "gmx": true, "godaddy": true, "gold": true, "goldpoint": true, "golf": true, "goo": true, "goodhands": true, "goodyear": true, "goog": true, "google": true, "gop": true, "got": true, "gotv": true, "grainger": true, "graphics": true, "gratis": true, "green": true, "gripe": true, "group": true, "guardian": true, "gucci": true, "guge": true, "guide": true, "guitars": true, "guru": true, "hamburg": true, "hangout": true, "haus": true, "hbo": true, "hdfc": true, "hdfcbank": true, "health": true, "healthcare": true, "help": true, "helsinki": true, "here": true, "hermes": true, "hgtv": true, "hiphop": true, "hisamitsu": true, "hitachi": true, "hiv": true, "hkt": true, "hockey": true, "holdings": true, "holiday": true, "homedepot": true, "homegoods": true, "homes": true, "homesense": true, "honda": true, "honeywell": true, "horse": true, "host": true, "hosting": true, "hot": true, "hoteles": true, "hotmail": true, "house": true, "how": true, "hsbc": true, "htc": true, "hughes": true, "hyatt": true, "hyundai": true, "ibm": true, "icbc": true, "ice": true, "icu": true, "ieee": true, "ifm": true, "iinet": true, "ikano": true, "imamat": true, "imdb": true, "immo": true, "immobilien": true, "industries": true, "infiniti": true, "ing": true, "ink": true, "institute": true, "insurance": true, "insure": true, "intel": true, "international": true, "intuit": true, "investments": true, "ipiranga": true, "irish": true, "iselect": true, "ismaili": true, "ist": true, "istanbul": true, "itau": true, "itv": true, "iveco": true, "iwc": true, "jaguar": true, "java": true, "jcb": true, "jcp": true, "jeep": true, "jetzt": true, "jewelry": true, "jio": true, "jlc": true, "jll": true, "jmp": true, "jnj": true, "joburg": true, "jot": true, "joy": true, "jpmorgan": true, "jprs": true, "juegos": true, "juniper": true, "kaufen": true, "kddi": true, "kerryhotels": true, "kerrylogistics": true, "kerryproperties": true, "kfh": true, "kia": true, "kim": true, "kinder": true, "kindle": true, "kitchen": true, "kiwi": true, "koeln": true, "komatsu": true, "kosher": true, "kpmg": true, "kpn": true, "krd": true, "kred": true, "kuokgroup": true, "kyknet": true, "kyoto": true, "lacaixa": true, "ladbrokes": true, "lamborghini": true, "lancaster": true, "lancia": true, "lancome": true, "land": true, "landrover": true, "lanxess": true, "lasalle": true, "lat": true, "latino": true, "latrobe": true, "law": true, "lawyer": true, "lds": true, "lease": true, "leclerc": true, "lefrak": true, "legal": true, "lego": true, "lexus": true, "lgbt": true, "liaison": true, "lidl": true, "life": true, "lifeinsurance": true, "lifestyle": true, "lighting": true, "like": true, "lilly": true, "limited": true, "limo": true, "lincoln": true, "linde": true, "link": true, "lipsy": true, "live": true, "living": true, "lixil": true, "loan": true, "loans": true, "locker": true, "locus": true, "loft": true, "lol": true, "london": true, "lotte": true, "lotto": true, "love": true, "lpl": true, "lplfinancial": true, "ltd": true, "ltda": true, "lundbeck": true, "lupin": true, "luxe": true, "luxury": true, "macys": true, "madrid": true, "maif": true, "maison": true, "makeup": true, "man": true, "management": true, "mango": true, "market": true, "marketing": true, "markets": true, "marriott": true, "marshalls": true, "maserati": true, "mattel": true, "mba": true, "mcd": true, "mcdonalds": true, "mckinsey": true, "med": true, "media": true, "meet": true, "melbourne": true, "meme": true, "memorial": true, "men": true, "menu": true, "meo": true, "metlife": true, "miami": true, "microsoft": true, "mini": true, "mint": true, "mit": true, "mitsubishi": true, "mlb": true, "mls": true, "mma": true, "mnet": true, "mobily": true, "moda": true, "moe": true, "moi": true, "mom": true, "monash": true, "money": true, "monster": true, "montblanc": true, "mopar": true, "mormon": true, "mortgage": true, "moscow": true, "moto": true, "motorcycles": true, "mov": true, "movie": true, "movistar": true, "msd": true, "mtn": true, "mtpc": true, "mtr": true, "multichoice": true, "mutual": true, "mutuelle": true, "mzansimagic": true, "nab": true, "nadex": true, "nagoya": true, "naspers": true, "nationwide": true, "natura": true, "navy": true, "nba": true, "nec": true, "netbank": true, "netflix": true, "network": true, "neustar": true, "new": true, "newholland": true, "news": true, "next": true, "nextdirect": true, "nexus": true, "nfl": true, "ngo": true, "nhk": true, "nico": true, "nike": true, "nikon": true, "ninja": true, "nissan": true, "nokia": true, "northwesternmutual": true, "norton": true, "now": true, "nowruz": true, "nowtv": true, "nra": true, "nrw": true, "ntt": true, "nyc": true, "obi": true, "observer": true, "off": true, "office": true, "okinawa": true, "olayan": true, "olayangroup": true, "oldnavy": true, "ollo": true, "omega": true, "one": true, "ong": true, "onl": true, "online": true, "onyourside": true, "ooo": true, "open": true, "oracle": true, "orange": true, "organic": true, "orientexpress": true, "osaka": true, "otsuka": true, "ott": true, "ovh": true, "page": true, "pamperedchef": true, "panasonic": true, "panerai": true, "paris": true, "pars": true, "partners": true, "parts": true, "party": true, "passagens": true, "pay": true, "payu": true, "pccw": true, "pet": true, "pfizer": true, "pharmacy": true, "philips": true, "photo": true, "photography": true, "photos": true, "physio": true, "piaget": true, "pics": true, "pictet": true, "pictures": true, "pid": true, "pin": true, "ping": true, "pink": true, "pioneer": true, "pizza": true, "place": true, "play": true, "playstation": true, "plumbing": true, "plus": true, "pnc": true, "pohl": true, "poker": true, "politie": true, "porn": true, "pramerica": true, "praxi": true, "press": true, "prime": true, "prod": true, "productions": true, "prof": true, "progressive": true, "promo": true, "properties": true, "property": true, "protection": true, "pru": true, "prudential": true, "pub": true, "qpon": true, "quebec": true, "quest": true, "qvc": true, "racing": true, "raid": true, "read": true, "realestate": true, "realtor": true, "realty": true, "recipes": true, "red": true, "redstone": true, "redumbrella": true, "rehab": true, "reise": true, "reisen": true, "reit": true, "reliance": true, "ren": true, "rent": true, "rentals": true, "repair": true, "report": true, "republican": true, "rest": true, "restaurant": true, "review": true, "reviews": true, "rexroth": true, "rich": true, "richardli": true, "ricoh": true, "rightathome": true, "ril": true, "rio": true, "rip": true, "rocher": true, "rocks": true, "rodeo": true, "rogers": true, "room": true, "rsvp": true, "ruhr": true, "run": true, "rwe": true, "ryukyu": true, "saarland": true, "safe": true, "safety": true, "sakura": true, "sale": true, "salon": true, "samsclub": true, "samsung": true, "sandvik": true, "sandvikcoromant": true, "sanofi": true, "sap": true, "sapo": true, "sarl": true, "sas": true, "save": true, "saxo": true, "sbi": true, "sbs": true, "sca": true, "scb": true, "schaeffler": true, "schmidt": true, "scholarships": true, "school": true, "schule": true, "schwarz": true, "science": true, "scjohnson": true, "scor": true, "scot": true, "seat": true, "secure": true, "security": true, "seek": true, "sener": true, "services": true, "ses": true, "seven": true, "sew": true, "sex": true, "sexy": true, "sfr": true, "shangrila": true, "sharp": true, "shaw": true, "shell": true, "shia": true, "shiksha": true, "shoes": true, "shouji": true, "show": true, "showtime": true, "shriram": true, "silk": true, "sina": true, "singles": true, "site": true, "ski": true, "skin": true, "sky": true, "skype": true, "sling": true, "smart": true, "smile": true, "sncf": true, "soccer": true, "social": true, "softbank": true, "software": true, "sohu": true, "solar": true, "solutions": true, "song": true, "sony": true, "soy": true, "space": true, "spiegel": true, "spot": true, "spreadbetting": true, "srl": true, "srt": true, "stada": true, "staples": true, "star": true, "starhub": true, "statebank": true, "statefarm": true, "statoil": true, "stc": true, "stcgroup": true, "stockholm": true, "storage": true, "store": true, "studio": true, "study": true, "style": true, "sucks": true, "supersport": true, "supplies": true, "supply": true, "support": true, "surf": true, "surgery": true, "suzuki": true, "swatch": true, "swiftcover": true, "swiss": true, "sydney": true, "symantec": true, "systems": true, "tab": true, "taipei": true, "talk": true, "taobao": true, "target": true, "tatamotors": true, "tatar": true, "tattoo": true, "tax": true, "taxi": true, "tci": true, "tdk": true, "team": true, "tech": true, "technology": true, "telecity": true, "telefonica": true, "temasek": true, "tennis": true, "teva": true, "thd": true, "theater": true, "theatre": true, "theguardian": true, "tiaa": true, "tickets": true, "tienda": true, "tiffany": true, "tips": true, "tires": true, "tirol": true, "tjmaxx": true, "tjx": true, "tkmaxx": true, "tmall": true, "today": true, "tokyo": true, "tools": true, "top": true, "toray": true, "toshiba": true, "total": true, "tours": true, "town": true, "toyota": true, "toys": true, "trade": true, "trading": true, "training": true, "travelchannel": true, "travelers": true, "travelersinsurance": true, "trust": true, "trv": true, "tube": true, "tui": true, "tunes": true, "tushu": true, "tvs": true, "ubank": true, "ubs": true, "uconnect": true, "university": true, "uno": true, "uol": true, "ups": true, "vacations": true, "vana": true, "vanguard": true, "vegas": true, "ventures": true, "verisign": true, "versicherung": true, "vet": true, "viajes": true, "video": true, "vig": true, "viking": true, "villas": true, "vin": true, "vip": true, "virgin": true, "visa": true, "vision": true, "vista": true, "vistaprint": true, "viva": true, "vivo": true, "vlaanderen": true, "vodka": true, "volkswagen": true, "vote": true, "voting": true, "voto": true, "voyage": true, "vuelos": true, "wales": true, "walmart": true, "walter": true, "wang": true, "wanggou": true, "warman": true, "watch": true, "watches": true, "weather": true, "weatherchannel": true, "webcam": true, "weber": true, "website": true, "wed": true, "wedding": true, "weibo": true, "weir": true, "whoswho": true, "wien": true, "wiki": true, "williamhill": true, "win": true, "windows": true, "wine": true, "winners": true, "wme": true, "wolterskluwer": true, "woodside": true, "work": true, "works": true, "world": true, "wtc": true, "wtf": true, "xbox": true, "xerox": true, "xfinity": true, "xihuan": true, "xin": true, "xn--11b4c3d": true, "xn--1ck2e1b": true, "xn--1qqw23a": true, "xn--30rr7y": true, "xn--3bst00m": true, "xn--3ds443g": true, "xn--3oq18vl8pn36a": true, "xn--3pxu8k": true, "xn--42c2d9a": true, "xn--45q11c": true, "xn--4gbrim": true, "xn--4gq48lf9j": true, "xn--55qw42g": true, "xn--55qx5d": true, "xn--5su34j936bgsg": true, "xn--5tzm5g": true, "xn--6frz82g": true, "xn--6qq986b3xl": true, "xn--80adxhks": true, "xn--80asehdb": true, "xn--80aswg": true, "xn--8y0a063a": true, "xn--9dbq2a": true, "xn--9et52u": true, "xn--9krt00a": true, "xn--b4w605ferd": true, "xn--bck1b9a5dre4c": true, "xn--c1avg": true, "xn--c2br7g": true, "xn--cck2b3b": true, "xn--cg4bki": true, "xn--czr694b": true, "xn--czrs0t": true, "xn--czru2d": true, "xn--d1acj3b": true, "xn--eckvdtc9d": true, "xn--efvy88h": true, "xn--estv75g": true, "xn--fct429k": true, "xn--fhbei": true, "xn--fiq228c5hs": true, "xn--fiq64b": true, "xn--fjq720a": true, "xn--flw351e": true, "xn--fzys8d69uvgm": true, "xn--g2xx48c": true, "xn--gckr3f0f": true, "xn--hxt814e": true, "xn--i1b6b1a6a2e": true, "xn--imr513n": true, "xn--io0a7i": true, "xn--j1aef": true, "xn--jlq61u9w7b": true, "xn--jvr189m": true, "xn--kcrx77d1x4a": true, "xn--kpu716f": true, "xn--kput3i": true, "xn--mgba3a3ejt": true, "xn--mgba7c0bbn0a": true, "xn--mgbaakc7dvf": true, "xn--mgbab2bd": true, "xn--mgbb9fbpob": true, "xn--mgbca7dzdo": true, "xn--mgbt3dhd": true, "xn--mk1bu44c": true, "xn--mxtq1m": true, "xn--ngbc5azd": true, "xn--ngbe9e0a": true, "xn--nqv7f": true, "xn--nqv7fs00ema": true, "xn--nyqy26a": true, "xn--p1acf": true, "xn--pbt977c": true, "xn--pssy2u": true, "xn--q9jyb4c": true, "xn--qcka1pmc": true, "xn--rhqv96g": true, "xn--rovu88b": true, "xn--ses554g": true, "xn--t60b56a": true, "xn--tckwe": true, "xn--unup4y": true, "xn--vermgensberater-ctb": true, "xn--vermgensberatung-pwb": true, "xn--vhquv": true, "xn--vuq861b": true, "xn--w4r85el8fhu5dnra": true, "xn--w4rs40l": true, "xn--xhq521b": true, "xn--zfr164b": true, "xperia": true, "xyz": true, "yachts": true, "yahoo": true, "yamaxun": true, "yandex": true, "yodobashi": true, "yoga": true, "yokohama": true, "you": true, "youtube": true, "yun": true, "zappos": true, "zara": true, "zero": true, "zip": true, "zippo": true, "zone": true, "zuerich": true, "cloudfront.net": true, "ap-northeast-1.compute.amazonaws.com": true, "ap-southeast-1.compute.amazonaws.com": true, "ap-southeast-2.compute.amazonaws.com": true, "cn-north-1.compute.amazonaws.cn": true, "compute.amazonaws.cn": true, "compute.amazonaws.com": true, "compute-1.amazonaws.com": true, "eu-west-1.compute.amazonaws.com": true, "eu-central-1.compute.amazonaws.com": true, "sa-east-1.compute.amazonaws.com": true, "us-east-1.amazonaws.com": true, "us-gov-west-1.compute.amazonaws.com": true, "us-west-1.compute.amazonaws.com": true, "us-west-2.compute.amazonaws.com": true, "z-1.compute-1.amazonaws.com": true, "z-2.compute-1.amazonaws.com": true, "elasticbeanstalk.com": true, "elb.amazonaws.com": true, "s3.amazonaws.com": true, "s3-ap-northeast-1.amazonaws.com": true, "s3-ap-southeast-1.amazonaws.com": true, "s3-ap-southeast-2.amazonaws.com": true, "s3-external-1.amazonaws.com": true, "s3-external-2.amazonaws.com": true, "s3-fips-us-gov-west-1.amazonaws.com": true, "s3-eu-central-1.amazonaws.com": true, "s3-eu-west-1.amazonaws.com": true, "s3-sa-east-1.amazonaws.com": true, "s3-us-gov-west-1.amazonaws.com": true, "s3-us-west-1.amazonaws.com": true, "s3-us-west-2.amazonaws.com": true, "s3.cn-north-1.amazonaws.com.cn": true, "s3.eu-central-1.amazonaws.com": true, "betainabox.com": true, "ae.org": true, "ar.com": true, "br.com": true, "cn.com": true, "com.de": true, "com.se": true, "de.com": true, "eu.com": true, "gb.com": true, "gb.net": true, "hu.com": true, "hu.net": true, "jp.net": true, "jpn.com": true, "kr.com": true, "mex.com": true, "no.com": true, "qc.com": true, "ru.com": true, "sa.com": true, "se.com": true, "se.net": true, "uk.com": true, "uk.net": true, "us.com": true, "uy.com": true, "za.bz": true, "za.com": true, "africa.com": true, "gr.com": true, "in.net": true, "us.org": true, "co.com": true, "c.la": true, "cloudcontrolled.com": true, "cloudcontrolapp.com": true, "co.ca": true, "c.cdn77.org": true, "cdn77-ssl.net": true, "r.cdn77.net": true, "rsc.cdn77.org": true, "ssl.origin.cdn77-secure.org": true, "co.nl": true, "co.no": true, "*.platform.sh": true, "cupcake.is": true, "dreamhosters.com": true, "duckdns.org": true, "dyndns-at-home.com": true, "dyndns-at-work.com": true, "dyndns-blog.com": true, "dyndns-free.com": true, "dyndns-home.com": true, "dyndns-ip.com": true, "dyndns-mail.com": true, "dyndns-office.com": true, "dyndns-pics.com": true, "dyndns-remote.com": true, "dyndns-server.com": true, "dyndns-web.com": true, "dyndns-wiki.com": true, "dyndns-work.com": true, "dyndns.biz": true, "dyndns.info": true, "dyndns.org": true, "dyndns.tv": true, "at-band-camp.net": true, "ath.cx": true, "barrel-of-knowledge.info": true, "barrell-of-knowledge.info": true, "better-than.tv": true, "blogdns.com": true, "blogdns.net": true, "blogdns.org": true, "blogsite.org": true, "boldlygoingnowhere.org": true, "broke-it.net": true, "buyshouses.net": true, "cechire.com": true, "dnsalias.com": true, "dnsalias.net": true, "dnsalias.org": true, "dnsdojo.com": true, "dnsdojo.net": true, "dnsdojo.org": true, "does-it.net": true, "doesntexist.com": true, "doesntexist.org": true, "dontexist.com": true, "dontexist.net": true, "dontexist.org": true, "doomdns.com": true, "doomdns.org": true, "dvrdns.org": true, "dyn-o-saur.com": true, "dynalias.com": true, "dynalias.net": true, "dynalias.org": true, "dynathome.net": true, "dyndns.ws": true, "endofinternet.net": true, "endofinternet.org": true, "endoftheinternet.org": true, "est-a-la-maison.com": true, "est-a-la-masion.com": true, "est-le-patron.com": true, "est-mon-blogueur.com": true, "for-better.biz": true, "for-more.biz": true, "for-our.info": true, "for-some.biz": true, "for-the.biz": true, "forgot.her.name": true, "forgot.his.name": true, "from-ak.com": true, "from-al.com": true, "from-ar.com": true, "from-az.net": true, "from-ca.com": true, "from-co.net": true, "from-ct.com": true, "from-dc.com": true, "from-de.com": true, "from-fl.com": true, "from-ga.com": true, "from-hi.com": true, "from-ia.com": true, "from-id.com": true, "from-il.com": true, "from-in.com": true, "from-ks.com": true, "from-ky.com": true, "from-la.net": true, "from-ma.com": true, "from-md.com": true, "from-me.org": true, "from-mi.com": true, "from-mn.com": true, "from-mo.com": true, "from-ms.com": true, "from-mt.com": true, "from-nc.com": true, "from-nd.com": true, "from-ne.com": true, "from-nh.com": true, "from-nj.com": true, "from-nm.com": true, "from-nv.com": true, "from-ny.net": true, "from-oh.com": true, "from-ok.com": true, "from-or.com": true, "from-pa.com": true, "from-pr.com": true, "from-ri.com": true, "from-sc.com": true, "from-sd.com": true, "from-tn.com": true, "from-tx.com": true, "from-ut.com": true, "from-va.com": true, "from-vt.com": true, "from-wa.com": true, "from-wi.com": true, "from-wv.com": true, "from-wy.com": true, "ftpaccess.cc": true, "fuettertdasnetz.de": true, "game-host.org": true, "game-server.cc": true, "getmyip.com": true, "gets-it.net": true, "go.dyndns.org": true, "gotdns.com": true, "gotdns.org": true, "groks-the.info": true, "groks-this.info": true, "ham-radio-op.net": true, "here-for-more.info": true, "hobby-site.com": true, "hobby-site.org": true, "home.dyndns.org": true, "homedns.org": true, "homeftp.net": true, "homeftp.org": true, "homeip.net": true, "homelinux.com": true, "homelinux.net": true, "homelinux.org": true, "homeunix.com": true, "homeunix.net": true, "homeunix.org": true, "iamallama.com": true, "in-the-band.net": true, "is-a-anarchist.com": true, "is-a-blogger.com": true, "is-a-bookkeeper.com": true, "is-a-bruinsfan.org": true, "is-a-bulls-fan.com": true, "is-a-candidate.org": true, "is-a-caterer.com": true, "is-a-celticsfan.org": true, "is-a-chef.com": true, "is-a-chef.net": true, "is-a-chef.org": true, "is-a-conservative.com": true, "is-a-cpa.com": true, "is-a-cubicle-slave.com": true, "is-a-democrat.com": true, "is-a-designer.com": true, "is-a-doctor.com": true, "is-a-financialadvisor.com": true, "is-a-geek.com": true, "is-a-geek.net": true, "is-a-geek.org": true, "is-a-green.com": true, "is-a-guru.com": true, "is-a-hard-worker.com": true, "is-a-hunter.com": true, "is-a-knight.org": true, "is-a-landscaper.com": true, "is-a-lawyer.com": true, "is-a-liberal.com": true, "is-a-libertarian.com": true, "is-a-linux-user.org": true, "is-a-llama.com": true, "is-a-musician.com": true, "is-a-nascarfan.com": true, "is-a-nurse.com": true, "is-a-painter.com": true, "is-a-patsfan.org": true, "is-a-personaltrainer.com": true, "is-a-photographer.com": true, "is-a-player.com": true, "is-a-republican.com": true, "is-a-rockstar.com": true, "is-a-socialist.com": true, "is-a-soxfan.org": true, "is-a-student.com": true, "is-a-teacher.com": true, "is-a-techie.com": true, "is-a-therapist.com": true, "is-an-accountant.com": true, "is-an-actor.com": true, "is-an-actress.com": true, "is-an-anarchist.com": true, "is-an-artist.com": true, "is-an-engineer.com": true, "is-an-entertainer.com": true, "is-by.us": true, "is-certified.com": true, "is-found.org": true, "is-gone.com": true, "is-into-anime.com": true, "is-into-cars.com": true, "is-into-cartoons.com": true, "is-into-games.com": true, "is-leet.com": true, "is-lost.org": true, "is-not-certified.com": true, "is-saved.org": true, "is-slick.com": true, "is-uberleet.com": true, "is-very-bad.org": true, "is-very-evil.org": true, "is-very-good.org": true, "is-very-nice.org": true, "is-very-sweet.org": true, "is-with-theband.com": true, "isa-geek.com": true, "isa-geek.net": true, "isa-geek.org": true, "isa-hockeynut.com": true, "issmarterthanyou.com": true, "isteingeek.de": true, "istmein.de": true, "kicks-ass.net": true, "kicks-ass.org": true, "knowsitall.info": true, "land-4-sale.us": true, "lebtimnetz.de": true, "leitungsen.de": true, "likes-pie.com": true, "likescandy.com": true, "merseine.nu": true, "mine.nu": true, "misconfused.org": true, "mypets.ws": true, "myphotos.cc": true, "neat-url.com": true, "office-on-the.net": true, "on-the-web.tv": true, "podzone.net": true, "podzone.org": true, "readmyblog.org": true, "saves-the-whales.com": true, "scrapper-site.net": true, "scrapping.cc": true, "selfip.biz": true, "selfip.com": true, "selfip.info": true, "selfip.net": true, "selfip.org": true, "sells-for-less.com": true, "sells-for-u.com": true, "sells-it.net": true, "sellsyourhome.org": true, "servebbs.com": true, "servebbs.net": true, "servebbs.org": true, "serveftp.net": true, "serveftp.org": true, "servegame.org": true, "shacknet.nu": true, "simple-url.com": true, "space-to-rent.com": true, "stuff-4-sale.org": true, "stuff-4-sale.us": true, "teaches-yoga.com": true, "thruhere.net": true, "traeumtgerade.de": true, "webhop.biz": true, "webhop.info": true, "webhop.net": true, "webhop.org": true, "worse-than.tv": true, "writesthisblog.com": true, "eu.org": true, "al.eu.org": true, "asso.eu.org": true, "at.eu.org": true, "au.eu.org": true, "be.eu.org": true, "bg.eu.org": true, "ca.eu.org": true, "cd.eu.org": true, "ch.eu.org": true, "cn.eu.org": true, "cy.eu.org": true, "cz.eu.org": true, "de.eu.org": true, "dk.eu.org": true, "edu.eu.org": true, "ee.eu.org": true, "es.eu.org": true, "fi.eu.org": true, "fr.eu.org": true, "gr.eu.org": true, "hr.eu.org": true, "hu.eu.org": true, "ie.eu.org": true, "il.eu.org": true, "in.eu.org": true, "int.eu.org": true, "is.eu.org": true, "it.eu.org": true, "jp.eu.org": true, "kr.eu.org": true, "lt.eu.org": true, "lu.eu.org": true, "lv.eu.org": true, "mc.eu.org": true, "me.eu.org": true, "mk.eu.org": true, "mt.eu.org": true, "my.eu.org": true, "net.eu.org": true, "ng.eu.org": true, "nl.eu.org": true, "no.eu.org": true, "nz.eu.org": true, "paris.eu.org": true, "pl.eu.org": true, "pt.eu.org": true, "q-a.eu.org": true, "ro.eu.org": true, "ru.eu.org": true, "se.eu.org": true, "si.eu.org": true, "sk.eu.org": true, "tr.eu.org": true, "uk.eu.org": true, "us.eu.org": true, "a.ssl.fastly.net": true, "b.ssl.fastly.net": true, "global.ssl.fastly.net": true, "a.prod.fastly.net": true, "global.prod.fastly.net": true, "firebaseapp.com": true, "flynnhub.com": true, "service.gov.uk": true, "github.io": true, "githubusercontent.com": true, "ro.com": true, "appspot.com": true, "blogspot.ae": true, "blogspot.al": true, "blogspot.am": true, "blogspot.ba": true, "blogspot.be": true, "blogspot.bg": true, "blogspot.bj": true, "blogspot.ca": true, "blogspot.cf": true, "blogspot.ch": true, "blogspot.cl": true, "blogspot.co.at": true, "blogspot.co.id": true, "blogspot.co.il": true, "blogspot.co.ke": true, "blogspot.co.nz": true, "blogspot.co.uk": true, "blogspot.co.za": true, "blogspot.com": true, "blogspot.com.ar": true, "blogspot.com.au": true, "blogspot.com.br": true, "blogspot.com.by": true, "blogspot.com.co": true, "blogspot.com.cy": true, "blogspot.com.ee": true, "blogspot.com.eg": true, "blogspot.com.es": true, "blogspot.com.mt": true, "blogspot.com.ng": true, "blogspot.com.tr": true, "blogspot.com.uy": true, "blogspot.cv": true, "blogspot.cz": true, "blogspot.de": true, "blogspot.dk": true, "blogspot.fi": true, "blogspot.fr": true, "blogspot.gr": true, "blogspot.hk": true, "blogspot.hr": true, "blogspot.hu": true, "blogspot.ie": true, "blogspot.in": true, "blogspot.is": true, "blogspot.it": true, "blogspot.jp": true, "blogspot.kr": true, "blogspot.li": true, "blogspot.lt": true, "blogspot.lu": true, "blogspot.md": true, "blogspot.mk": true, "blogspot.mr": true, "blogspot.mx": true, "blogspot.my": true, "blogspot.nl": true, "blogspot.no": true, "blogspot.pe": true, "blogspot.pt": true, "blogspot.qa": true, "blogspot.re": true, "blogspot.ro": true, "blogspot.rs": true, "blogspot.ru": true, "blogspot.se": true, "blogspot.sg": true, "blogspot.si": true, "blogspot.sk": true, "blogspot.sn": true, "blogspot.td": true, "blogspot.tw": true, "blogspot.ug": true, "blogspot.vn": true, "codespot.com": true, "googleapis.com": true, "googlecode.com": true, "pagespeedmobilizer.com": true, "withgoogle.com": true, "withyoutube.com": true, "herokuapp.com": true, "herokussl.com": true, "iki.fi": true, "biz.at": true, "info.at": true, "co.pl": true, "azurewebsites.net": true, "azure-mobile.net": true, "cloudapp.net": true, "bmoattachments.org": true, "4u.com": true, "nfshost.com": true, "nyc.mn": true, "nid.io": true, "operaunite.com": true, "outsystemscloud.com": true, "art.pl": true, "gliwice.pl": true, "krakow.pl": true, "poznan.pl": true, "wroc.pl": true, "zakopane.pl": true, "pantheon.io": true, "gotpantheon.com": true, "priv.at": true, "qa2.com": true, "rhcloud.com": true, "sandcats.io": true, "biz.ua": true, "co.ua": true, "pp.ua": true, "sinaapp.com": true, "vipsinaapp.com": true, "1kapp.com": true, "gda.pl": true, "gdansk.pl": true, "gdynia.pl": true, "med.pl": true, "sopot.pl": true, "hk.com": true, "hk.org": true, "ltd.hk": true, "inc.hk": true, "yolasite.com": true, "za.net": true, "za.org": true });
	
	// END of automatically generated file

/***/ }),
/* 454 */
/***/ (function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/* WEBPACK VAR INJECTION */(function(module, global) {'use strict';
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
	
	/*! https://mths.be/punycode v1.4.1 by @mathias */
	;(function (root) {
	
		/** Detect free variables */
		var freeExports = ( false ? 'undefined' : _typeof(exports)) == 'object' && exports && !exports.nodeType && exports;
		var freeModule = ( false ? 'undefined' : _typeof(module)) == 'object' && module && !module.nodeType && module;
		var freeGlobal = (typeof global === 'undefined' ? 'undefined' : _typeof(global)) == 'object' && global;
		if (freeGlobal.global === freeGlobal || freeGlobal.window === freeGlobal || freeGlobal.self === freeGlobal) {
			root = freeGlobal;
		}
	
		/**
	  * The `punycode` object.
	  * @name punycode
	  * @type Object
	  */
		var punycode,
	
	
		/** Highest positive signed 32-bit float value */
		maxInt = 2147483647,
		    // aka. 0x7FFFFFFF or 2^31-1
	
		/** Bootstring parameters */
		base = 36,
		    tMin = 1,
		    tMax = 26,
		    skew = 38,
		    damp = 700,
		    initialBias = 72,
		    initialN = 128,
		    // 0x80
		delimiter = '-',
		    // '\x2D'
	
		/** Regular expressions */
		regexPunycode = /^xn--/,
		    regexNonASCII = /[^\x20-\x7E]/,
		    // unprintable ASCII chars + non-ASCII chars
		regexSeparators = /[\x2E\u3002\uFF0E\uFF61]/g,
		    // RFC 3490 separators
	
		/** Error messages */
		errors = {
			'overflow': 'Overflow: input needs wider integers to process',
			'not-basic': 'Illegal input >= 0x80 (not a basic code point)',
			'invalid-input': 'Invalid input'
		},
	
	
		/** Convenience shortcuts */
		baseMinusTMin = base - tMin,
		    floor = Math.floor,
		    stringFromCharCode = String.fromCharCode,
	
	
		/** Temporary variable */
		key;
	
		/*--------------------------------------------------------------------------*/
	
		/**
	  * A generic error utility function.
	  * @private
	  * @param {String} type The error type.
	  * @returns {Error} Throws a `RangeError` with the applicable error message.
	  */
		function error(type) {
			throw new RangeError(errors[type]);
		}
	
		/**
	  * A generic `Array#map` utility function.
	  * @private
	  * @param {Array} array The array to iterate over.
	  * @param {Function} callback The function that gets called for every array
	  * item.
	  * @returns {Array} A new array of values returned by the callback function.
	  */
		function map(array, fn) {
			var length = array.length;
			var result = [];
			while (length--) {
				result[length] = fn(array[length]);
			}
			return result;
		}
	
		/**
	  * A simple `Array#map`-like wrapper to work with domain name strings or email
	  * addresses.
	  * @private
	  * @param {String} domain The domain name or email address.
	  * @param {Function} callback The function that gets called for every
	  * character.
	  * @returns {Array} A new string of characters returned by the callback
	  * function.
	  */
		function mapDomain(string, fn) {
			var parts = string.split('@');
			var result = '';
			if (parts.length > 1) {
				// In email addresses, only the domain name should be punycoded. Leave
				// the local part (i.e. everything up to `@`) intact.
				result = parts[0] + '@';
				string = parts[1];
			}
			// Avoid `split(regex)` for IE8 compatibility. See #17.
			string = string.replace(regexSeparators, '\x2E');
			var labels = string.split('.');
			var encoded = map(labels, fn).join('.');
			return result + encoded;
		}
	
		/**
	  * Creates an array containing the numeric code points of each Unicode
	  * character in the string. While JavaScript uses UCS-2 internally,
	  * this function will convert a pair of surrogate halves (each of which
	  * UCS-2 exposes as separate characters) into a single code point,
	  * matching UTF-16.
	  * @see `punycode.ucs2.encode`
	  * @see <https://mathiasbynens.be/notes/javascript-encoding>
	  * @memberOf punycode.ucs2
	  * @name decode
	  * @param {String} string The Unicode input string (UCS-2).
	  * @returns {Array} The new array of code points.
	  */
		function ucs2decode(string) {
			var output = [],
			    counter = 0,
			    length = string.length,
			    value,
			    extra;
			while (counter < length) {
				value = string.charCodeAt(counter++);
				if (value >= 0xD800 && value <= 0xDBFF && counter < length) {
					// high surrogate, and there is a next character
					extra = string.charCodeAt(counter++);
					if ((extra & 0xFC00) == 0xDC00) {
						// low surrogate
						output.push(((value & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000);
					} else {
						// unmatched surrogate; only append this code unit, in case the next
						// code unit is the high surrogate of a surrogate pair
						output.push(value);
						counter--;
					}
				} else {
					output.push(value);
				}
			}
			return output;
		}
	
		/**
	  * Creates a string based on an array of numeric code points.
	  * @see `punycode.ucs2.decode`
	  * @memberOf punycode.ucs2
	  * @name encode
	  * @param {Array} codePoints The array of numeric code points.
	  * @returns {String} The new Unicode string (UCS-2).
	  */
		function ucs2encode(array) {
			return map(array, function (value) {
				var output = '';
				if (value > 0xFFFF) {
					value -= 0x10000;
					output += stringFromCharCode(value >>> 10 & 0x3FF | 0xD800);
					value = 0xDC00 | value & 0x3FF;
				}
				output += stringFromCharCode(value);
				return output;
			}).join('');
		}
	
		/**
	  * Converts a basic code point into a digit/integer.
	  * @see `digitToBasic()`
	  * @private
	  * @param {Number} codePoint The basic numeric code point value.
	  * @returns {Number} The numeric value of a basic code point (for use in
	  * representing integers) in the range `0` to `base - 1`, or `base` if
	  * the code point does not represent a value.
	  */
		function basicToDigit(codePoint) {
			if (codePoint - 48 < 10) {
				return codePoint - 22;
			}
			if (codePoint - 65 < 26) {
				return codePoint - 65;
			}
			if (codePoint - 97 < 26) {
				return codePoint - 97;
			}
			return base;
		}
	
		/**
	  * Converts a digit/integer into a basic code point.
	  * @see `basicToDigit()`
	  * @private
	  * @param {Number} digit The numeric value of a basic code point.
	  * @returns {Number} The basic code point whose value (when used for
	  * representing integers) is `digit`, which needs to be in the range
	  * `0` to `base - 1`. If `flag` is non-zero, the uppercase form is
	  * used; else, the lowercase form is used. The behavior is undefined
	  * if `flag` is non-zero and `digit` has no uppercase form.
	  */
		function digitToBasic(digit, flag) {
			//  0..25 map to ASCII a..z or A..Z
			// 26..35 map to ASCII 0..9
			return digit + 22 + 75 * (digit < 26) - ((flag != 0) << 5);
		}
	
		/**
	  * Bias adaptation function as per section 3.4 of RFC 3492.
	  * https://tools.ietf.org/html/rfc3492#section-3.4
	  * @private
	  */
		function adapt(delta, numPoints, firstTime) {
			var k = 0;
			delta = firstTime ? floor(delta / damp) : delta >> 1;
			delta += floor(delta / numPoints);
			for (; /* no initialization */delta > baseMinusTMin * tMax >> 1; k += base) {
				delta = floor(delta / baseMinusTMin);
			}
			return floor(k + (baseMinusTMin + 1) * delta / (delta + skew));
		}
	
		/**
	  * Converts a Punycode string of ASCII-only symbols to a string of Unicode
	  * symbols.
	  * @memberOf punycode
	  * @param {String} input The Punycode string of ASCII-only symbols.
	  * @returns {String} The resulting string of Unicode symbols.
	  */
		function decode(input) {
			// Don't use UCS-2
			var output = [],
			    inputLength = input.length,
			    out,
			    i = 0,
			    n = initialN,
			    bias = initialBias,
			    basic,
			    j,
			    index,
			    oldi,
			    w,
			    k,
			    digit,
			    t,
	
			/** Cached calculation results */
			baseMinusT;
	
			// Handle the basic code points: let `basic` be the number of input code
			// points before the last delimiter, or `0` if there is none, then copy
			// the first basic code points to the output.
	
			basic = input.lastIndexOf(delimiter);
			if (basic < 0) {
				basic = 0;
			}
	
			for (j = 0; j < basic; ++j) {
				// if it's not a basic code point
				if (input.charCodeAt(j) >= 0x80) {
					error('not-basic');
				}
				output.push(input.charCodeAt(j));
			}
	
			// Main decoding loop: start just after the last delimiter if any basic code
			// points were copied; start at the beginning otherwise.
	
			for (index = basic > 0 ? basic + 1 : 0; index < inputLength;) /* no final expression */{
	
				// `index` is the index of the next character to be consumed.
				// Decode a generalized variable-length integer into `delta`,
				// which gets added to `i`. The overflow checking is easier
				// if we increase `i` as we go, then subtract off its starting
				// value at the end to obtain `delta`.
				for (oldi = i, w = 1, k = base;; /* no condition */k += base) {
	
					if (index >= inputLength) {
						error('invalid-input');
					}
	
					digit = basicToDigit(input.charCodeAt(index++));
	
					if (digit >= base || digit > floor((maxInt - i) / w)) {
						error('overflow');
					}
	
					i += digit * w;
					t = k <= bias ? tMin : k >= bias + tMax ? tMax : k - bias;
	
					if (digit < t) {
						break;
					}
	
					baseMinusT = base - t;
					if (w > floor(maxInt / baseMinusT)) {
						error('overflow');
					}
	
					w *= baseMinusT;
				}
	
				out = output.length + 1;
				bias = adapt(i - oldi, out, oldi == 0);
	
				// `i` was supposed to wrap around from `out` to `0`,
				// incrementing `n` each time, so we'll fix that now:
				if (floor(i / out) > maxInt - n) {
					error('overflow');
				}
	
				n += floor(i / out);
				i %= out;
	
				// Insert `n` at position `i` of the output
				output.splice(i++, 0, n);
			}
	
			return ucs2encode(output);
		}
	
		/**
	  * Converts a string of Unicode symbols (e.g. a domain name label) to a
	  * Punycode string of ASCII-only symbols.
	  * @memberOf punycode
	  * @param {String} input The string of Unicode symbols.
	  * @returns {String} The resulting Punycode string of ASCII-only symbols.
	  */
		function encode(input) {
			var n,
			    delta,
			    handledCPCount,
			    basicLength,
			    bias,
			    j,
			    m,
			    q,
			    k,
			    t,
			    currentValue,
			    output = [],
	
			/** `inputLength` will hold the number of code points in `input`. */
			inputLength,
	
			/** Cached calculation results */
			handledCPCountPlusOne,
			    baseMinusT,
			    qMinusT;
	
			// Convert the input in UCS-2 to Unicode
			input = ucs2decode(input);
	
			// Cache the length
			inputLength = input.length;
	
			// Initialize the state
			n = initialN;
			delta = 0;
			bias = initialBias;
	
			// Handle the basic code points
			for (j = 0; j < inputLength; ++j) {
				currentValue = input[j];
				if (currentValue < 0x80) {
					output.push(stringFromCharCode(currentValue));
				}
			}
	
			handledCPCount = basicLength = output.length;
	
			// `handledCPCount` is the number of code points that have been handled;
			// `basicLength` is the number of basic code points.
	
			// Finish the basic string - if it is not empty - with a delimiter
			if (basicLength) {
				output.push(delimiter);
			}
	
			// Main encoding loop:
			while (handledCPCount < inputLength) {
	
				// All non-basic code points < n have been handled already. Find the next
				// larger one:
				for (m = maxInt, j = 0; j < inputLength; ++j) {
					currentValue = input[j];
					if (currentValue >= n && currentValue < m) {
						m = currentValue;
					}
				}
	
				// Increase `delta` enough to advance the decoder's <n,i> state to <m,0>,
				// but guard against overflow
				handledCPCountPlusOne = handledCPCount + 1;
				if (m - n > floor((maxInt - delta) / handledCPCountPlusOne)) {
					error('overflow');
				}
	
				delta += (m - n) * handledCPCountPlusOne;
				n = m;
	
				for (j = 0; j < inputLength; ++j) {
					currentValue = input[j];
	
					if (currentValue < n && ++delta > maxInt) {
						error('overflow');
					}
	
					if (currentValue == n) {
						// Represent delta as a generalized variable-length integer
						for (q = delta, k = base;; /* no condition */k += base) {
							t = k <= bias ? tMin : k >= bias + tMax ? tMax : k - bias;
							if (q < t) {
								break;
							}
							qMinusT = q - t;
							baseMinusT = base - t;
							output.push(stringFromCharCode(digitToBasic(t + qMinusT % baseMinusT, 0)));
							q = floor(qMinusT / baseMinusT);
						}
	
						output.push(stringFromCharCode(digitToBasic(q, 0)));
						bias = adapt(delta, handledCPCountPlusOne, handledCPCount == basicLength);
						delta = 0;
						++handledCPCount;
					}
				}
	
				++delta;
				++n;
			}
			return output.join('');
		}
	
		/**
	  * Converts a Punycode string representing a domain name or an email address
	  * to Unicode. Only the Punycoded parts of the input will be converted, i.e.
	  * it doesn't matter if you call it on a string that has already been
	  * converted to Unicode.
	  * @memberOf punycode
	  * @param {String} input The Punycoded domain name or email address to
	  * convert to Unicode.
	  * @returns {String} The Unicode representation of the given Punycode
	  * string.
	  */
		function toUnicode(input) {
			return mapDomain(input, function (string) {
				return regexPunycode.test(string) ? decode(string.slice(4).toLowerCase()) : string;
			});
		}
	
		/**
	  * Converts a Unicode string representing a domain name or an email address to
	  * Punycode. Only the non-ASCII parts of the domain name will be converted,
	  * i.e. it doesn't matter if you call it with a domain that's already in
	  * ASCII.
	  * @memberOf punycode
	  * @param {String} input The domain name or email address to convert, as a
	  * Unicode string.
	  * @returns {String} The Punycode representation of the given domain name or
	  * email address.
	  */
		function toASCII(input) {
			return mapDomain(input, function (string) {
				return regexNonASCII.test(string) ? 'xn--' + encode(string) : string;
			});
		}
	
		/*--------------------------------------------------------------------------*/
	
		/** Define the public API */
		punycode = {
			/**
	   * A string representing the current Punycode.js version number.
	   * @memberOf punycode
	   * @type String
	   */
			'version': '1.4.1',
			/**
	   * An object of methods to convert from JavaScript's internal character
	   * representation (UCS-2) to Unicode code points, and back.
	   * @see <https://mathiasbynens.be/notes/javascript-encoding>
	   * @memberOf punycode
	   * @type Object
	   */
			'ucs2': {
				'decode': ucs2decode,
				'encode': ucs2encode
			},
			'decode': decode,
			'encode': encode,
			'toASCII': toASCII,
			'toUnicode': toUnicode
		};
	
		/** Expose `punycode` */
		// Some AMD build optimizers, like r.js, check for specific condition patterns
		// like the following:
		if ("function" == 'function' && _typeof(__webpack_require__(277)) == 'object' && __webpack_require__(277)) {
			!(__WEBPACK_AMD_DEFINE_RESULT__ = function () {
				return punycode;
			}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
		} else if (freeExports && freeModule) {
			if (module.exports == freeExports) {
				// in Node.js, io.js, or RingoJS v0.8.0+
				freeModule.exports = punycode;
			} else {
				// in Narwhal or RingoJS v0.7.0-
				for (key in punycode) {
					punycode.hasOwnProperty(key) && (freeExports[key] = punycode[key]);
				}
			}
		} else {
			// in Rhino or a web browser
			root.punycode = punycode;
		}
	})(undefined);
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(205)(module), (function() { return this; }())))

/***/ }),
/* 455 */
/***/ (function(module, exports) {

	/*!
	 * Copyright (c) 2015, Salesforce.com, Inc.
	 * All rights reserved.
	 *
	 * Redistribution and use in source and binary forms, with or without
	 * modification, are permitted provided that the following conditions are met:
	 *
	 * 1. Redistributions of source code must retain the above copyright notice,
	 * this list of conditions and the following disclaimer.
	 *
	 * 2. Redistributions in binary form must reproduce the above copyright notice,
	 * this list of conditions and the following disclaimer in the documentation
	 * and/or other materials provided with the distribution.
	 *
	 * 3. Neither the name of Salesforce.com nor the names of its contributors may
	 * be used to endorse or promote products derived from this software without
	 * specific prior written permission.
	 *
	 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
	 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
	 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
	 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
	 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
	 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
	 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
	 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
	 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
	 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
	 * POSSIBILITY OF SUCH DAMAGE.
	 */
	'use strict';
	/*jshint unused:false */
	
	function Store() {}
	exports.Store = Store;
	
	// Stores may be synchronous, but are still required to use a
	// Continuation-Passing Style API.  The CookieJar itself will expose a "*Sync"
	// API that converts from synchronous-callbacks to imperative style.
	Store.prototype.synchronous = false;
	
	Store.prototype.findCookie = function (domain, path, key, cb) {
	  throw new Error('findCookie is not implemented');
	};
	
	Store.prototype.findCookies = function (domain, path, cb) {
	  throw new Error('findCookies is not implemented');
	};
	
	Store.prototype.putCookie = function (cookie, cb) {
	  throw new Error('putCookie is not implemented');
	};
	
	Store.prototype.updateCookie = function (oldCookie, newCookie, cb) {
	  // recommended default implementation:
	  // return this.putCookie(newCookie, cb);
	  throw new Error('updateCookie is not implemented');
	};
	
	Store.prototype.removeCookie = function (domain, path, key, cb) {
	  throw new Error('removeCookie is not implemented');
	};
	
	Store.prototype.removeCookies = function (domain, path, cb) {
	  throw new Error('removeCookies is not implemented');
	};
	
	Store.prototype.getAllCookies = function (cb) {
	  throw new Error('getAllCookies is not implemented (therefore jar cannot be serialized)');
	};

/***/ }),
/* 456 */
/***/ (function(module, exports, __webpack_require__) {

	/*!
	 * Copyright (c) 2015, Salesforce.com, Inc.
	 * All rights reserved.
	 *
	 * Redistribution and use in source and binary forms, with or without
	 * modification, are permitted provided that the following conditions are met:
	 *
	 * 1. Redistributions of source code must retain the above copyright notice,
	 * this list of conditions and the following disclaimer.
	 *
	 * 2. Redistributions in binary form must reproduce the above copyright notice,
	 * this list of conditions and the following disclaimer in the documentation
	 * and/or other materials provided with the distribution.
	 *
	 * 3. Neither the name of Salesforce.com nor the names of its contributors may
	 * be used to endorse or promote products derived from this software without
	 * specific prior written permission.
	 *
	 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
	 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
	 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
	 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
	 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
	 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
	 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
	 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
	 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
	 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
	 * POSSIBILITY OF SUCH DAMAGE.
	 */
	'use strict';
	
	var Store = __webpack_require__(455).Store;
	var permuteDomain = __webpack_require__(457).permuteDomain;
	var pathMatch = __webpack_require__(458).pathMatch;
	var util = __webpack_require__(271);
	
	function MemoryCookieStore() {
	  Store.call(this);
	  this.idx = {};
	}
	util.inherits(MemoryCookieStore, Store);
	exports.MemoryCookieStore = MemoryCookieStore;
	MemoryCookieStore.prototype.idx = null;
	
	// Since it's just a struct in RAM, this Store is synchronous
	MemoryCookieStore.prototype.synchronous = true;
	
	// force a default depth:
	MemoryCookieStore.prototype.inspect = function () {
	  return "{ idx: " + util.inspect(this.idx, false, 2) + ' }';
	};
	
	MemoryCookieStore.prototype.findCookie = function (domain, path, key, cb) {
	  if (!this.idx[domain]) {
	    return cb(null, undefined);
	  }
	  if (!this.idx[domain][path]) {
	    return cb(null, undefined);
	  }
	  return cb(null, this.idx[domain][path][key] || null);
	};
	
	MemoryCookieStore.prototype.findCookies = function (domain, path, cb) {
	  var results = [];
	  if (!domain) {
	    return cb(null, []);
	  }
	
	  var pathMatcher;
	  if (!path) {
	    // null means "all paths"
	    pathMatcher = function matchAll(domainIndex) {
	      for (var curPath in domainIndex) {
	        var pathIndex = domainIndex[curPath];
	        for (var key in pathIndex) {
	          results.push(pathIndex[key]);
	        }
	      }
	    };
	  } else {
	    pathMatcher = function matchRFC(domainIndex) {
	      //NOTE: we should use path-match algorithm from S5.1.4 here
	      //(see : https://github.com/ChromiumWebApps/chromium/blob/b3d3b4da8bb94c1b2e061600df106d590fda3620/net/cookies/canonical_cookie.cc#L299)
	      Object.keys(domainIndex).forEach(function (cookiePath) {
	        if (pathMatch(path, cookiePath)) {
	          var pathIndex = domainIndex[cookiePath];
	
	          for (var key in pathIndex) {
	            results.push(pathIndex[key]);
	          }
	        }
	      });
	    };
	  }
	
	  var domains = permuteDomain(domain) || [domain];
	  var idx = this.idx;
	  domains.forEach(function (curDomain) {
	    var domainIndex = idx[curDomain];
	    if (!domainIndex) {
	      return;
	    }
	    pathMatcher(domainIndex);
	  });
	
	  cb(null, results);
	};
	
	MemoryCookieStore.prototype.putCookie = function (cookie, cb) {
	  if (!this.idx[cookie.domain]) {
	    this.idx[cookie.domain] = {};
	  }
	  if (!this.idx[cookie.domain][cookie.path]) {
	    this.idx[cookie.domain][cookie.path] = {};
	  }
	  this.idx[cookie.domain][cookie.path][cookie.key] = cookie;
	  cb(null);
	};
	
	MemoryCookieStore.prototype.updateCookie = function (oldCookie, newCookie, cb) {
	  // updateCookie() may avoid updating cookies that are identical.  For example,
	  // lastAccessed may not be important to some stores and an equality
	  // comparison could exclude that field.
	  this.putCookie(newCookie, cb);
	};
	
	MemoryCookieStore.prototype.removeCookie = function (domain, path, key, cb) {
	  if (this.idx[domain] && this.idx[domain][path] && this.idx[domain][path][key]) {
	    delete this.idx[domain][path][key];
	  }
	  cb(null);
	};
	
	MemoryCookieStore.prototype.removeCookies = function (domain, path, cb) {
	  if (this.idx[domain]) {
	    if (path) {
	      delete this.idx[domain][path];
	    } else {
	      delete this.idx[domain];
	    }
	  }
	  return cb(null);
	};
	
	MemoryCookieStore.prototype.getAllCookies = function (cb) {
	  var cookies = [];
	  var idx = this.idx;
	
	  var domains = Object.keys(idx);
	  domains.forEach(function (domain) {
	    var paths = Object.keys(idx[domain]);
	    paths.forEach(function (path) {
	      var keys = Object.keys(idx[domain][path]);
	      keys.forEach(function (key) {
	        if (key !== null) {
	          cookies.push(idx[domain][path][key]);
	        }
	      });
	    });
	  });
	
	  // Sort by creationIndex so deserializing retains the creation order.
	  // When implementing your own store, this SHOULD retain the order too
	  cookies.sort(function (a, b) {
	    return (a.creationIndex || 0) - (b.creationIndex || 0);
	  });
	
	  cb(null, cookies);
	};

/***/ }),
/* 457 */
/***/ (function(module, exports, __webpack_require__) {

	/*!
	 * Copyright (c) 2015, Salesforce.com, Inc.
	 * All rights reserved.
	 *
	 * Redistribution and use in source and binary forms, with or without
	 * modification, are permitted provided that the following conditions are met:
	 *
	 * 1. Redistributions of source code must retain the above copyright notice,
	 * this list of conditions and the following disclaimer.
	 *
	 * 2. Redistributions in binary form must reproduce the above copyright notice,
	 * this list of conditions and the following disclaimer in the documentation
	 * and/or other materials provided with the distribution.
	 *
	 * 3. Neither the name of Salesforce.com nor the names of its contributors may
	 * be used to endorse or promote products derived from this software without
	 * specific prior written permission.
	 *
	 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
	 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
	 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
	 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
	 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
	 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
	 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
	 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
	 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
	 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
	 * POSSIBILITY OF SUCH DAMAGE.
	 */
	"use strict";
	
	var pubsuffix = __webpack_require__(453);
	
	// Gives the permutation of all possible domainMatch()es of a given domain. The
	// array is in shortest-to-longest order.  Handy for indexing.
	function permuteDomain(domain) {
	  var pubSuf = pubsuffix.getPublicSuffix(domain);
	  if (!pubSuf) {
	    return null;
	  }
	  if (pubSuf == domain) {
	    return [domain];
	  }
	
	  var prefix = domain.slice(0, -(pubSuf.length + 1)); // ".example.com"
	  var parts = prefix.split('.').reverse();
	  var cur = pubSuf;
	  var permutations = [cur];
	  while (parts.length) {
	    cur = parts.shift() + '.' + cur;
	    permutations.push(cur);
	  }
	  return permutations;
	}
	
	exports.permuteDomain = permuteDomain;

/***/ }),
/* 458 */
/***/ (function(module, exports) {

	/*!
	 * Copyright (c) 2015, Salesforce.com, Inc.
	 * All rights reserved.
	 *
	 * Redistribution and use in source and binary forms, with or without
	 * modification, are permitted provided that the following conditions are met:
	 *
	 * 1. Redistributions of source code must retain the above copyright notice,
	 * this list of conditions and the following disclaimer.
	 *
	 * 2. Redistributions in binary form must reproduce the above copyright notice,
	 * this list of conditions and the following disclaimer in the documentation
	 * and/or other materials provided with the distribution.
	 *
	 * 3. Neither the name of Salesforce.com nor the names of its contributors may
	 * be used to endorse or promote products derived from this software without
	 * specific prior written permission.
	 *
	 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
	 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
	 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
	 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
	 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
	 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
	 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
	 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
	 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
	 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
	 * POSSIBILITY OF SUCH DAMAGE.
	 */
	"use strict";
	/*
	 * "A request-path path-matches a given cookie-path if at least one of the
	 * following conditions holds:"
	 */
	
	function pathMatch(reqPath, cookiePath) {
	  // "o  The cookie-path and the request-path are identical."
	  if (cookiePath === reqPath) {
	    return true;
	  }
	
	  var idx = reqPath.indexOf(cookiePath);
	  if (idx === 0) {
	    // "o  The cookie-path is a prefix of the request-path, and the last
	    // character of the cookie-path is %x2F ("/")."
	    if (cookiePath.substr(-1) === "/") {
	      return true;
	    }
	
	    // " o  The cookie-path is a prefix of the request-path, and the first
	    // character of the request-path that is not included in the cookie- path
	    // is a %x2F ("/") character."
	    if (reqPath.substr(cookiePath.length, 1) === "/") {
	      return true;
	    }
	  }
	
	  return false;
	}
	
	exports.pathMatch = pathMatch;

/***/ }),
/* 459 */,
/* 460 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(setImmediate, process) {'use strict';
	
	var jsonSafeStringify = __webpack_require__(461),
	    crypto = __webpack_require__(392),
	    Buffer = __webpack_require__(462).Buffer;
	
	var defer = typeof setImmediate === 'undefined' ? process.nextTick : setImmediate;
	
	function paramsHaveRequestBody(params) {
	  return params.body || params.requestBodyStream || params.json && typeof params.json !== 'boolean' || params.multipart;
	}
	
	function safeStringify(obj, replacer) {
	  var ret;
	  try {
	    ret = JSON.stringify(obj, replacer);
	  } catch (e) {
	    ret = jsonSafeStringify(obj, replacer);
	  }
	  return ret;
	}
	
	function md5(str) {
	  return crypto.createHash('md5').update(str).digest('hex');
	}
	
	function isReadStream(rs) {
	  return rs.readable && rs.path && rs.mode;
	}
	
	function toBase64(str) {
	  return Buffer.from(str || '', 'utf8').toString('base64');
	}
	
	function copy(obj) {
	  var o = {};
	  Object.keys(obj).forEach(function (i) {
	    o[i] = obj[i];
	  });
	  return o;
	}
	
	function version() {
	  var numbers = process.version.replace('v', '').split('.');
	  return {
	    major: parseInt(numbers[0], 10),
	    minor: parseInt(numbers[1], 10),
	    patch: parseInt(numbers[2], 10)
	  };
	}
	
	exports.paramsHaveRequestBody = paramsHaveRequestBody;
	exports.safeStringify = safeStringify;
	exports.md5 = md5;
	exports.isReadStream = isReadStream;
	exports.toBase64 = toBase64;
	exports.copy = copy;
	exports.version = version;
	exports.defer = defer;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(299).setImmediate, __webpack_require__(3)))

/***/ }),
/* 461 */
/***/ (function(module, exports) {

	"use strict";
	
	exports = module.exports = stringify;
	exports.getSerialize = serializer;
	
	function stringify(obj, replacer, spaces, cycleReplacer) {
	  return JSON.stringify(obj, serializer(replacer, cycleReplacer), spaces);
	}
	
	function serializer(replacer, cycleReplacer) {
	  var stack = [],
	      keys = [];
	
	  if (cycleReplacer == null) cycleReplacer = function cycleReplacer(key, value) {
	    if (stack[0] === value) return "[Circular ~]";
	    return "[Circular ~." + keys.slice(0, stack.indexOf(value)).join(".") + "]";
	  };
	
	  return function (key, value) {
	    if (stack.length > 0) {
	      var thisPos = stack.indexOf(this);
	      ~thisPos ? stack.splice(thisPos + 1) : stack.push(this);
	      ~thisPos ? keys.splice(thisPos, Infinity, key) : keys.push(key);
	      if (~stack.indexOf(value)) value = cycleReplacer.call(this, key, value);
	    } else stack.push(value);
	
	    return replacer == null ? value : replacer.call(this, key, value);
	  };
	}

/***/ }),
/* 462 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports = __webpack_require__(290);

/***/ }),
/* 463 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';
	
	var http = __webpack_require__(464),
	    https = __webpack_require__(471),
	    url = __webpack_require__(275),
	    util = __webpack_require__(271),
	    stream = __webpack_require__(282),
	    zlib = __webpack_require__(421),
	    hawk = __webpack_require__(472),
	    aws2 = __webpack_require__(473),
	    aws4 = __webpack_require__(474),
	    httpSignature = __webpack_require__(476),
	    mime = __webpack_require__(530),
	    stringstream = __webpack_require__(533),
	    caseless = __webpack_require__(534),
	    ForeverAgent = __webpack_require__(535),
	    FormData = __webpack_require__(536),
	    extend = __webpack_require__(450),
	    isstream = __webpack_require__(537),
	    isTypedArray = __webpack_require__(538).strict,
	    helpers = __webpack_require__(460),
	    cookies = __webpack_require__(451),
	    getProxyFromURI = __webpack_require__(539),
	    Querystring = __webpack_require__(540).Querystring,
	    Har = __webpack_require__(546).Har,
	    Auth = __webpack_require__(569).Auth,
	    OAuth = __webpack_require__(575).OAuth,
	    Multipart = __webpack_require__(577).Multipart,
	    Redirect = __webpack_require__(580).Redirect,
	    Tunnel = __webpack_require__(581).Tunnel,
	    now = __webpack_require__(583),
	    Buffer = __webpack_require__(462).Buffer;
	
	var safeStringify = helpers.safeStringify,
	    isReadStream = helpers.isReadStream,
	    toBase64 = helpers.toBase64,
	    defer = helpers.defer,
	    copy = helpers.copy,
	    version = helpers.version,
	    globalCookieJar = cookies.jar();
	
	var globalPool = {};
	
	function filterForNonReserved(reserved, options) {
	  // Filter out properties that are not reserved.
	  // Reserved values are passed in at call site.
	
	  var object = {};
	  for (var i in options) {
	    var notReserved = reserved.indexOf(i) === -1;
	    if (notReserved) {
	      object[i] = options[i];
	    }
	  }
	  return object;
	}
	
	function filterOutReservedFunctions(reserved, options) {
	  // Filter out properties that are functions and are reserved.
	  // Reserved values are passed in at call site.
	
	  var object = {};
	  for (var i in options) {
	    var isReserved = !(reserved.indexOf(i) === -1);
	    var isFunction = typeof options[i] === 'function';
	    if (!(isReserved && isFunction)) {
	      object[i] = options[i];
	    }
	  }
	  return object;
	}
	
	// Return a simpler request object to allow serialization
	function requestToJSON() {
	  var self = this;
	  return {
	    uri: self.uri,
	    method: self.method,
	    headers: self.headers
	  };
	}
	
	// Return a simpler response object to allow serialization
	function responseToJSON() {
	  var self = this;
	  return {
	    statusCode: self.statusCode,
	    body: self.body,
	    headers: self.headers,
	    request: requestToJSON.call(self.request)
	  };
	}
	
	function Request(options) {
	  // if given the method property in options, set property explicitMethod to true
	
	  // extend the Request instance with any non-reserved properties
	  // remove any reserved functions from the options object
	  // set Request instance to be readable and writable
	  // call init
	
	  var self = this;
	
	  // start with HAR, then override with additional options
	  if (options.har) {
	    self._har = new Har(self);
	    options = self._har.options(options);
	  }
	
	  stream.Stream.call(self);
	  var reserved = Object.keys(Request.prototype);
	  var nonReserved = filterForNonReserved(reserved, options);
	
	  extend(self, nonReserved);
	  options = filterOutReservedFunctions(reserved, options);
	
	  self.readable = true;
	  self.writable = true;
	  if (options.method) {
	    self.explicitMethod = true;
	  }
	  self._qs = new Querystring(self);
	  self._auth = new Auth(self);
	  self._oauth = new OAuth(self);
	  self._multipart = new Multipart(self);
	  self._redirect = new Redirect(self);
	  self._tunnel = new Tunnel(self);
	  self.init(options);
	}
	
	util.inherits(Request, stream.Stream);
	
	// Debugging
	Request.debug = process.env.NODE_DEBUG && /\brequest\b/.test(process.env.NODE_DEBUG);
	function debug() {
	  if (Request.debug) {
	    console.error('REQUEST %s', util.format.apply(util, arguments));
	  }
	}
	Request.prototype.debug = debug;
	
	Request.prototype.init = function (options) {
	  // init() contains all the code to setup the request object.
	  // the actual outgoing request is not started until start() is called
	  // this function is called from both the constructor and on redirect.
	  var self = this;
	  if (!options) {
	    options = {};
	  }
	  self.headers = self.headers ? copy(self.headers) : {};
	
	  // Delete headers with value undefined since they break
	  // ClientRequest.OutgoingMessage.setHeader in node 0.12
	  for (var headerName in self.headers) {
	    if (typeof self.headers[headerName] === 'undefined') {
	      delete self.headers[headerName];
	    }
	  }
	
	  caseless.httpify(self, self.headers);
	
	  if (!self.method) {
	    self.method = options.method || 'GET';
	  }
	  if (!self.localAddress) {
	    self.localAddress = options.localAddress;
	  }
	
	  self._qs.init(options);
	
	  debug(options);
	  if (!self.pool && self.pool !== false) {
	    self.pool = globalPool;
	  }
	  self.dests = self.dests || [];
	  self.__isRequestRequest = true;
	
	  // Protect against double callback
	  if (!self._callback && self.callback) {
	    self._callback = self.callback;
	    self.callback = function () {
	      if (self._callbackCalled) {
	        return; // Print a warning maybe?
	      }
	      self._callbackCalled = true;
	      self._callback.apply(self, arguments);
	    };
	    self.on('error', self.callback.bind());
	    self.on('complete', self.callback.bind(self, null));
	  }
	
	  // People use this property instead all the time, so support it
	  if (!self.uri && self.url) {
	    self.uri = self.url;
	    delete self.url;
	  }
	
	  // If there's a baseUrl, then use it as the base URL (i.e. uri must be
	  // specified as a relative path and is appended to baseUrl).
	  if (self.baseUrl) {
	    if (typeof self.baseUrl !== 'string') {
	      return self.emit('error', new Error('options.baseUrl must be a string'));
	    }
	
	    if (typeof self.uri !== 'string') {
	      return self.emit('error', new Error('options.uri must be a string when using options.baseUrl'));
	    }
	
	    if (self.uri.indexOf('//') === 0 || self.uri.indexOf('://') !== -1) {
	      return self.emit('error', new Error('options.uri must be a path when using options.baseUrl'));
	    }
	
	    // Handle all cases to make sure that there's only one slash between
	    // baseUrl and uri.
	    var baseUrlEndsWithSlash = self.baseUrl.lastIndexOf('/') === self.baseUrl.length - 1;
	    var uriStartsWithSlash = self.uri.indexOf('/') === 0;
	
	    if (baseUrlEndsWithSlash && uriStartsWithSlash) {
	      self.uri = self.baseUrl + self.uri.slice(1);
	    } else if (baseUrlEndsWithSlash || uriStartsWithSlash) {
	      self.uri = self.baseUrl + self.uri;
	    } else if (self.uri === '') {
	      self.uri = self.baseUrl;
	    } else {
	      self.uri = self.baseUrl + '/' + self.uri;
	    }
	    delete self.baseUrl;
	  }
	
	  // A URI is needed by this point, emit error if we haven't been able to get one
	  if (!self.uri) {
	    return self.emit('error', new Error('options.uri is a required argument'));
	  }
	
	  // If a string URI/URL was given, parse it into a URL object
	  if (typeof self.uri === 'string') {
	    self.uri = url.parse(self.uri);
	  }
	
	  // Some URL objects are not from a URL parsed string and need href added
	  if (!self.uri.href) {
	    self.uri.href = url.format(self.uri);
	  }
	
	  // DEPRECATED: Warning for users of the old Unix Sockets URL Scheme
	  if (self.uri.protocol === 'unix:') {
	    return self.emit('error', new Error('`unix://` URL scheme is no longer supported. Please use the format `http://unix:SOCKET:PATH`'));
	  }
	
	  // Support Unix Sockets
	  if (self.uri.host === 'unix') {
	    self.enableUnixSocket();
	  }
	
	  if (self.strictSSL === false) {
	    self.rejectUnauthorized = false;
	  }
	
	  if (!self.uri.pathname) {
	    self.uri.pathname = '/';
	  }
	
	  if (!(self.uri.host || self.uri.hostname && self.uri.port) && !self.uri.isUnix) {
	    // Invalid URI: it may generate lot of bad errors, like 'TypeError: Cannot call method `indexOf` of undefined' in CookieJar
	    // Detect and reject it as soon as possible
	    var faultyUri = url.format(self.uri);
	    var message = 'Invalid URI "' + faultyUri + '"';
	    if (Object.keys(options).length === 0) {
	      // No option ? This can be the sign of a redirect
	      // As this is a case where the user cannot do anything (they didn't call request directly with this URL)
	      // they should be warned that it can be caused by a redirection (can save some hair)
	      message += '. This can be caused by a crappy redirection.';
	    }
	    // This error was fatal
	    self.abort();
	    return self.emit('error', new Error(message));
	  }
	
	  if (!self.hasOwnProperty('proxy')) {
	    self.proxy = getProxyFromURI(self.uri);
	  }
	
	  self.tunnel = self._tunnel.isEnabled();
	  if (self.proxy) {
	    self._tunnel.setup(options);
	  }
	
	  self._redirect.onRequest(options);
	
	  self.setHost = false;
	  if (!self.hasHeader('host')) {
	    var hostHeaderName = self.originalHostHeaderName || 'host';
	    // When used with an IPv6 address, `host` will provide
	    // the correct bracketed format, unlike using `hostname` and
	    // optionally adding the `port` when necessary.
	    self.setHeader(hostHeaderName, self.uri.host);
	    self.setHost = true;
	  }
	
	  self.jar(self._jar || options.jar);
	
	  if (!self.uri.port) {
	    if (self.uri.protocol === 'http:') {
	      self.uri.port = 80;
	    } else if (self.uri.protocol === 'https:') {
	      self.uri.port = 443;
	    }
	  }
	
	  if (self.proxy && !self.tunnel) {
	    self.port = self.proxy.port;
	    self.host = self.proxy.hostname;
	  } else {
	    self.port = self.uri.port;
	    self.host = self.uri.hostname;
	  }
	
	  if (options.form) {
	    self.form(options.form);
	  }
	
	  if (options.formData) {
	    var formData = options.formData;
	    var requestForm = self.form();
	    var appendFormValue = function appendFormValue(key, value) {
	      if (value && value.hasOwnProperty('value') && value.hasOwnProperty('options')) {
	        requestForm.append(key, value.value, value.options);
	      } else {
	        requestForm.append(key, value);
	      }
	    };
	    for (var formKey in formData) {
	      if (formData.hasOwnProperty(formKey)) {
	        var formValue = formData[formKey];
	        if (formValue instanceof Array) {
	          for (var j = 0; j < formValue.length; j++) {
	            appendFormValue(formKey, formValue[j]);
	          }
	        } else {
	          appendFormValue(formKey, formValue);
	        }
	      }
	    }
	  }
	
	  if (options.qs) {
	    self.qs(options.qs);
	  }
	
	  if (self.uri.path) {
	    self.path = self.uri.path;
	  } else {
	    self.path = self.uri.pathname + (self.uri.search || '');
	  }
	
	  if (self.path.length === 0) {
	    self.path = '/';
	  }
	
	  // Auth must happen last in case signing is dependent on other headers
	  if (options.aws) {
	    self.aws(options.aws);
	  }
	
	  if (options.hawk) {
	    self.hawk(options.hawk);
	  }
	
	  if (options.httpSignature) {
	    self.httpSignature(options.httpSignature);
	  }
	
	  if (options.auth) {
	    if (Object.prototype.hasOwnProperty.call(options.auth, 'username')) {
	      options.auth.user = options.auth.username;
	    }
	    if (Object.prototype.hasOwnProperty.call(options.auth, 'password')) {
	      options.auth.pass = options.auth.password;
	    }
	
	    self.auth(options.auth.user, options.auth.pass, options.auth.sendImmediately, options.auth.bearer);
	  }
	
	  if (self.gzip && !self.hasHeader('accept-encoding')) {
	    self.setHeader('accept-encoding', 'gzip, deflate');
	  }
	
	  if (self.uri.auth && !self.hasHeader('authorization')) {
	    var uriAuthPieces = self.uri.auth.split(':').map(function (item) {
	      return self._qs.unescape(item);
	    });
	    self.auth(uriAuthPieces[0], uriAuthPieces.slice(1).join(':'), true);
	  }
	
	  if (!self.tunnel && self.proxy && self.proxy.auth && !self.hasHeader('proxy-authorization')) {
	    var proxyAuthPieces = self.proxy.auth.split(':').map(function (item) {
	      return self._qs.unescape(item);
	    });
	    var authHeader = 'Basic ' + toBase64(proxyAuthPieces.join(':'));
	    self.setHeader('proxy-authorization', authHeader);
	  }
	
	  if (self.proxy && !self.tunnel) {
	    self.path = self.uri.protocol + '//' + self.uri.host + self.path;
	  }
	
	  if (options.json) {
	    self.json(options.json);
	  }
	  if (options.multipart) {
	    self.multipart(options.multipart);
	  }
	
	  if (options.time) {
	    self.timing = true;
	
	    // NOTE: elapsedTime is deprecated in favor of .timings
	    self.elapsedTime = self.elapsedTime || 0;
	  }
	
	  function setContentLength() {
	    if (isTypedArray(self.body)) {
	      self.body = Buffer.from(self.body);
	    }
	
	    if (!self.hasHeader('content-length')) {
	      var length;
	      if (typeof self.body === 'string') {
	        length = Buffer.byteLength(self.body);
	      } else if (Array.isArray(self.body)) {
	        length = self.body.reduce(function (a, b) {
	          return a + b.length;
	        }, 0);
	      } else {
	        length = self.body.length;
	      }
	
	      if (length) {
	        self.setHeader('content-length', length);
	      } else {
	        self.emit('error', new Error('Argument error, options.body.'));
	      }
	    }
	  }
	  if (self.body && !isstream(self.body)) {
	    setContentLength();
	  }
	
	  if (options.oauth) {
	    self.oauth(options.oauth);
	  } else if (self._oauth.params && self.hasHeader('authorization')) {
	    self.oauth(self._oauth.params);
	  }
	
	  var protocol = self.proxy && !self.tunnel ? self.proxy.protocol : self.uri.protocol,
	      defaultModules = { 'http:': http, 'https:': https },
	      httpModules = self.httpModules || {};
	
	  self.httpModule = httpModules[protocol] || defaultModules[protocol];
	
	  if (!self.httpModule) {
	    return self.emit('error', new Error('Invalid protocol: ' + protocol));
	  }
	
	  if (options.ca) {
	    self.ca = options.ca;
	  }
	
	  if (!self.agent) {
	    if (options.agentOptions) {
	      self.agentOptions = options.agentOptions;
	    }
	
	    if (options.agentClass) {
	      self.agentClass = options.agentClass;
	    } else if (options.forever) {
	      var v = version();
	      // use ForeverAgent in node 0.10- only
	      if (v.major === 0 && v.minor <= 10) {
	        self.agentClass = protocol === 'http:' ? ForeverAgent : ForeverAgent.SSL;
	      } else {
	        self.agentClass = self.httpModule.Agent;
	        self.agentOptions = self.agentOptions || {};
	        self.agentOptions.keepAlive = true;
	      }
	    } else {
	      self.agentClass = self.httpModule.Agent;
	    }
	  }
	
	  if (self.pool === false) {
	    self.agent = false;
	  } else {
	    self.agent = self.agent || self.getNewAgent();
	  }
	
	  self.on('pipe', function (src) {
	    if (self.ntick && self._started) {
	      self.emit('error', new Error('You cannot pipe to this stream after the outbound request has started.'));
	    }
	    self.src = src;
	    if (isReadStream(src)) {
	      if (!self.hasHeader('content-type')) {
	        self.setHeader('content-type', mime.lookup(src.path));
	      }
	    } else {
	      if (src.headers) {
	        for (var i in src.headers) {
	          if (!self.hasHeader(i)) {
	            self.setHeader(i, src.headers[i]);
	          }
	        }
	      }
	      if (self._json && !self.hasHeader('content-type')) {
	        self.setHeader('content-type', 'application/json');
	      }
	      if (src.method && !self.explicitMethod) {
	        self.method = src.method;
	      }
	    }
	
	    // self.on('pipe', function () {
	    //   console.error('You have already piped to this stream. Pipeing twice is likely to break the request.')
	    // })
	  });
	
	  defer(function () {
	    if (self._aborted) {
	      return;
	    }
	
	    var end = function end() {
	      if (self._form) {
	        if (!self._auth.hasAuth) {
	          self._form.pipe(self);
	        } else if (self._auth.hasAuth && self._auth.sentAuth) {
	          self._form.pipe(self);
	        }
	      }
	      if (self._multipart && self._multipart.chunked) {
	        self._multipart.body.pipe(self);
	      }
	      if (self.body) {
	        if (isstream(self.body)) {
	          self.body.pipe(self);
	        } else {
	          setContentLength();
	          if (Array.isArray(self.body)) {
	            self.body.forEach(function (part) {
	              self.write(part);
	            });
	          } else {
	            self.write(self.body);
	          }
	          self.end();
	        }
	      } else if (self.requestBodyStream) {
	        console.warn('options.requestBodyStream is deprecated, please pass the request object to stream.pipe.');
	        self.requestBodyStream.pipe(self);
	      } else if (!self.src) {
	        if (self._auth.hasAuth && !self._auth.sentAuth) {
	          self.end();
	          return;
	        }
	        if (self.method !== 'GET' && typeof self.method !== 'undefined') {
	          self.setHeader('content-length', 0);
	        }
	        self.end();
	      }
	    };
	
	    if (self._form && !self.hasHeader('content-length')) {
	      // Before ending the request, we had to compute the length of the whole form, asyncly
	      self.setHeader(self._form.getHeaders(), true);
	      self._form.getLength(function (err, length) {
	        if (!err && !isNaN(length)) {
	          self.setHeader('content-length', length);
	        }
	        end();
	      });
	    } else {
	      end();
	    }
	
	    self.ntick = true;
	  });
	};
	
	Request.prototype.getNewAgent = function () {
	  var self = this;
	  var Agent = self.agentClass;
	  var options = {};
	  if (self.agentOptions) {
	    for (var i in self.agentOptions) {
	      options[i] = self.agentOptions[i];
	    }
	  }
	  if (self.ca) {
	    options.ca = self.ca;
	  }
	  if (self.ciphers) {
	    options.ciphers = self.ciphers;
	  }
	  if (self.secureProtocol) {
	    options.secureProtocol = self.secureProtocol;
	  }
	  if (self.secureOptions) {
	    options.secureOptions = self.secureOptions;
	  }
	  if (typeof self.rejectUnauthorized !== 'undefined') {
	    options.rejectUnauthorized = self.rejectUnauthorized;
	  }
	
	  if (self.cert && self.key) {
	    options.key = self.key;
	    options.cert = self.cert;
	  }
	
	  if (self.pfx) {
	    options.pfx = self.pfx;
	  }
	
	  if (self.passphrase) {
	    options.passphrase = self.passphrase;
	  }
	
	  var poolKey = '';
	
	  // different types of agents are in different pools
	  if (Agent !== self.httpModule.Agent) {
	    poolKey += Agent.name;
	  }
	
	  // ca option is only relevant if proxy or destination are https
	  var proxy = self.proxy;
	  if (typeof proxy === 'string') {
	    proxy = url.parse(proxy);
	  }
	  var isHttps = proxy && proxy.protocol === 'https:' || this.uri.protocol === 'https:';
	
	  if (isHttps) {
	    if (options.ca) {
	      if (poolKey) {
	        poolKey += ':';
	      }
	      poolKey += options.ca;
	    }
	
	    if (typeof options.rejectUnauthorized !== 'undefined') {
	      if (poolKey) {
	        poolKey += ':';
	      }
	      poolKey += options.rejectUnauthorized;
	    }
	
	    if (options.cert) {
	      if (poolKey) {
	        poolKey += ':';
	      }
	      poolKey += options.cert.toString('ascii') + options.key.toString('ascii');
	    }
	
	    if (options.pfx) {
	      if (poolKey) {
	        poolKey += ':';
	      }
	      poolKey += options.pfx.toString('ascii');
	    }
	
	    if (options.ciphers) {
	      if (poolKey) {
	        poolKey += ':';
	      }
	      poolKey += options.ciphers;
	    }
	
	    if (options.secureProtocol) {
	      if (poolKey) {
	        poolKey += ':';
	      }
	      poolKey += options.secureProtocol;
	    }
	
	    if (options.secureOptions) {
	      if (poolKey) {
	        poolKey += ':';
	      }
	      poolKey += options.secureOptions;
	    }
	  }
	
	  if (self.pool === globalPool && !poolKey && Object.keys(options).length === 0 && self.httpModule.globalAgent) {
	    // not doing anything special.  Use the globalAgent
	    return self.httpModule.globalAgent;
	  }
	
	  // we're using a stored agent.  Make sure it's protocol-specific
	  poolKey = self.uri.protocol + poolKey;
	
	  // generate a new agent for this setting if none yet exists
	  if (!self.pool[poolKey]) {
	    self.pool[poolKey] = new Agent(options);
	    // properly set maxSockets on new agents
	    if (self.pool.maxSockets) {
	      self.pool[poolKey].maxSockets = self.pool.maxSockets;
	    }
	  }
	
	  return self.pool[poolKey];
	};
	
	Request.prototype.start = function () {
	  // start() is called once we are ready to send the outgoing HTTP request.
	  // this is usually called on the first write(), end() or on nextTick()
	  var self = this;
	
	  if (self.timing) {
	    // All timings will be relative to this request's startTime.  In order to do this,
	    // we need to capture the wall-clock start time (via Date), immediately followed
	    // by the high-resolution timer (via now()).  While these two won't be set
	    // at the _exact_ same time, they should be close enough to be able to calculate
	    // high-resolution, monotonically non-decreasing timestamps relative to startTime.
	    var startTime = new Date().getTime();
	    var startTimeNow = now();
	  }
	
	  if (self._aborted) {
	    return;
	  }
	
	  self._started = true;
	  self.method = self.method || 'GET';
	  self.href = self.uri.href;
	
	  if (self.src && self.src.stat && self.src.stat.size && !self.hasHeader('content-length')) {
	    self.setHeader('content-length', self.src.stat.size);
	  }
	  if (self._aws) {
	    self.aws(self._aws, true);
	  }
	
	  // We have a method named auth, which is completely different from the http.request
	  // auth option.  If we don't remove it, we're gonna have a bad time.
	  var reqOptions = copy(self);
	  delete reqOptions.auth;
	
	  debug('make request', self.uri.href);
	
	  // node v6.8.0 now supports a `timeout` value in `http.request()`, but we
	  // should delete it for now since we handle timeouts manually for better
	  // consistency with node versions before v6.8.0
	  delete reqOptions.timeout;
	
	  try {
	    self.req = self.httpModule.request(reqOptions);
	  } catch (err) {
	    self.emit('error', err);
	    return;
	  }
	
	  if (self.timing) {
	    self.startTime = startTime;
	    self.startTimeNow = startTimeNow;
	
	    // Timing values will all be relative to startTime (by comparing to startTimeNow
	    // so we have an accurate clock)
	    self.timings = {};
	  }
	
	  var timeout;
	  if (self.timeout && !self.timeoutTimer) {
	    if (self.timeout < 0) {
	      timeout = 0;
	    } else if (typeof self.timeout === 'number' && isFinite(self.timeout)) {
	      timeout = self.timeout;
	    }
	  }
	
	  self.req.on('response', self.onRequestResponse.bind(self));
	  self.req.on('error', self.onRequestError.bind(self));
	  self.req.on('drain', function () {
	    self.emit('drain');
	  });
	  self.req.on('socket', function (socket) {
	    // `._connecting` was the old property which was made public in node v6.1.0
	    var isConnecting = socket._connecting || socket.connecting;
	    if (self.timing) {
	      self.timings.socket = now() - self.startTimeNow;
	
	      if (isConnecting) {
	        var onLookupTiming = function onLookupTiming() {
	          self.timings.lookup = now() - self.startTimeNow;
	        };
	
	        var onConnectTiming = function onConnectTiming() {
	          self.timings.connect = now() - self.startTimeNow;
	        };
	
	        socket.once('lookup', onLookupTiming);
	        socket.once('connect', onConnectTiming);
	
	        // clean up timing event listeners if needed on error
	        self.req.once('error', function () {
	          socket.removeListener('lookup', onLookupTiming);
	          socket.removeListener('connect', onConnectTiming);
	        });
	      }
	    }
	
	    var setReqTimeout = function setReqTimeout() {
	      // This timeout sets the amount of time to wait *between* bytes sent
	      // from the server once connected.
	      //
	      // In particular, it's useful for erroring if the server fails to send
	      // data halfway through streaming a response.
	      self.req.setTimeout(timeout, function () {
	        if (self.req) {
	          self.abort();
	          var e = new Error('ESOCKETTIMEDOUT');
	          e.code = 'ESOCKETTIMEDOUT';
	          e.connect = false;
	          self.emit('error', e);
	        }
	      });
	    };
	    if (timeout !== undefined) {
	      // Only start the connection timer if we're actually connecting a new
	      // socket, otherwise if we're already connected (because this is a
	      // keep-alive connection) do not bother. This is important since we won't
	      // get a 'connect' event for an already connected socket.
	      if (isConnecting) {
	        var onReqSockConnect = function onReqSockConnect() {
	          socket.removeListener('connect', onReqSockConnect);
	          clearTimeout(self.timeoutTimer);
	          self.timeoutTimer = null;
	          setReqTimeout();
	        };
	
	        socket.on('connect', onReqSockConnect);
	
	        self.req.on('error', function (err) {
	          socket.removeListener('connect', onReqSockConnect);
	        });
	
	        // Set a timeout in memory - this block will throw if the server takes more
	        // than `timeout` to write the HTTP status and headers (corresponding to
	        // the on('response') event on the client). NB: this measures wall-clock
	        // time, not the time between bytes sent by the server.
	        self.timeoutTimer = setTimeout(function () {
	          socket.removeListener('connect', onReqSockConnect);
	          self.abort();
	          var e = new Error('ETIMEDOUT');
	          e.code = 'ETIMEDOUT';
	          e.connect = true;
	          self.emit('error', e);
	        }, timeout);
	      } else {
	        // We're already connected
	        setReqTimeout();
	      }
	    }
	    self.emit('socket', socket);
	  });
	
	  self.emit('request', self.req);
	};
	
	Request.prototype.onRequestError = function (error) {
	  var self = this;
	  if (self._aborted) {
	    return;
	  }
	  if (self.req && self.req._reusedSocket && error.code === 'ECONNRESET' && self.agent.addRequestNoreuse) {
	    self.agent = { addRequest: self.agent.addRequestNoreuse.bind(self.agent) };
	    self.start();
	    self.req.end();
	    return;
	  }
	  if (self.timeout && self.timeoutTimer) {
	    clearTimeout(self.timeoutTimer);
	    self.timeoutTimer = null;
	  }
	  self.emit('error', error);
	};
	
	Request.prototype.onRequestResponse = function (response) {
	  var self = this;
	
	  if (self.timing) {
	    self.timings.response = now() - self.startTimeNow;
	  }
	
	  debug('onRequestResponse', self.uri.href, response.statusCode, response.headers);
	  response.on('end', function () {
	    if (self.timing) {
	      self.timings.end = now() - self.startTimeNow;
	      response.timingStart = self.startTime;
	
	      // fill in the blanks for any periods that didn't trigger, such as
	      // no lookup or connect due to keep alive
	      if (!self.timings.socket) {
	        self.timings.socket = 0;
	      }
	      if (!self.timings.lookup) {
	        self.timings.lookup = self.timings.socket;
	      }
	      if (!self.timings.connect) {
	        self.timings.connect = self.timings.lookup;
	      }
	      if (!self.timings.response) {
	        self.timings.response = self.timings.connect;
	      }
	
	      debug('elapsed time', self.timings.end);
	
	      // elapsedTime includes all redirects
	      self.elapsedTime += Math.round(self.timings.end);
	
	      // NOTE: elapsedTime is deprecated in favor of .timings
	      response.elapsedTime = self.elapsedTime;
	
	      // timings is just for the final fetch
	      response.timings = self.timings;
	
	      // pre-calculate phase timings as well
	      response.timingPhases = {
	        wait: self.timings.socket,
	        dns: self.timings.lookup - self.timings.socket,
	        tcp: self.timings.connect - self.timings.lookup,
	        firstByte: self.timings.response - self.timings.connect,
	        download: self.timings.end - self.timings.response,
	        total: self.timings.end
	      };
	    }
	    debug('response end', self.uri.href, response.statusCode, response.headers);
	  });
	
	  if (self._aborted) {
	    debug('aborted', self.uri.href);
	    response.resume();
	    return;
	  }
	
	  self.response = response;
	  response.request = self;
	  response.toJSON = responseToJSON;
	
	  // XXX This is different on 0.10, because SSL is strict by default
	  if (self.httpModule === https && self.strictSSL && (!response.hasOwnProperty('socket') || !response.socket.authorized)) {
	    debug('strict ssl error', self.uri.href);
	    var sslErr = response.hasOwnProperty('socket') ? response.socket.authorizationError : self.uri.href + ' does not support SSL';
	    self.emit('error', new Error('SSL Error: ' + sslErr));
	    return;
	  }
	
	  // Save the original host before any redirect (if it changes, we need to
	  // remove any authorization headers).  Also remember the case of the header
	  // name because lots of broken servers expect Host instead of host and we
	  // want the caller to be able to specify this.
	  self.originalHost = self.getHeader('host');
	  if (!self.originalHostHeaderName) {
	    self.originalHostHeaderName = self.hasHeader('host');
	  }
	  if (self.setHost) {
	    self.removeHeader('host');
	  }
	  if (self.timeout && self.timeoutTimer) {
	    clearTimeout(self.timeoutTimer);
	    self.timeoutTimer = null;
	  }
	
	  var targetCookieJar = self._jar && self._jar.setCookie ? self._jar : globalCookieJar;
	  var addCookie = function addCookie(cookie) {
	    //set the cookie if it's domain in the href's domain.
	    try {
	      targetCookieJar.setCookie(cookie, self.uri.href, { ignoreError: true });
	    } catch (e) {
	      self.emit('error', e);
	    }
	  };
	
	  response.caseless = caseless(response.headers);
	
	  if (response.caseless.has('set-cookie') && !self._disableCookies) {
	    var headerName = response.caseless.has('set-cookie');
	    if (Array.isArray(response.headers[headerName])) {
	      response.headers[headerName].forEach(addCookie);
	    } else {
	      addCookie(response.headers[headerName]);
	    }
	  }
	
	  if (self._redirect.onResponse(response)) {
	    return; // Ignore the rest of the response
	  } else {
	    // Be a good stream and emit end when the response is finished.
	    // Hack to emit end on close because of a core bug that never fires end
	    response.on('close', function () {
	      if (!self._ended) {
	        self.response.emit('end');
	      }
	    });
	
	    response.once('end', function () {
	      self._ended = true;
	    });
	
	    var noBody = function noBody(code) {
	      return self.method === 'HEAD'
	      // Informational
	      || code >= 100 && code < 200
	      // No Content
	      || code === 204
	      // Not Modified
	      || code === 304;
	    };
	
	    var responseContent;
	    if (self.gzip && !noBody(response.statusCode)) {
	      var contentEncoding = response.headers['content-encoding'] || 'identity';
	      contentEncoding = contentEncoding.trim().toLowerCase();
	
	      // Be more lenient with decoding compressed responses, since (very rarely)
	      // servers send slightly invalid gzip responses that are still accepted
	      // by common browsers.
	      // Always using Z_SYNC_FLUSH is what cURL does.
	      var zlibOptions = {
	        flush: zlib.Z_SYNC_FLUSH,
	        finishFlush: zlib.Z_SYNC_FLUSH
	      };
	
	      if (contentEncoding === 'gzip') {
	        responseContent = zlib.createGunzip(zlibOptions);
	        response.pipe(responseContent);
	      } else if (contentEncoding === 'deflate') {
	        responseContent = zlib.createInflate(zlibOptions);
	        response.pipe(responseContent);
	      } else {
	        // Since previous versions didn't check for Content-Encoding header,
	        // ignore any invalid values to preserve backwards-compatibility
	        if (contentEncoding !== 'identity') {
	          debug('ignoring unrecognized Content-Encoding ' + contentEncoding);
	        }
	        responseContent = response;
	      }
	    } else {
	      responseContent = response;
	    }
	
	    if (self.encoding) {
	      if (self.dests.length !== 0) {
	        console.error('Ignoring encoding parameter as this stream is being piped to another stream which makes the encoding option invalid.');
	      } else if (responseContent.setEncoding) {
	        responseContent.setEncoding(self.encoding);
	      } else {
	        // Should only occur on node pre-v0.9.4 (joyent/node@9b5abe5) with
	        // zlib streams.
	        // If/When support for 0.9.4 is dropped, this should be unnecessary.
	        responseContent = responseContent.pipe(stringstream(self.encoding));
	      }
	    }
	
	    if (self._paused) {
	      responseContent.pause();
	    }
	
	    self.responseContent = responseContent;
	
	    self.emit('response', response);
	
	    self.dests.forEach(function (dest) {
	      self.pipeDest(dest);
	    });
	
	    responseContent.on('data', function (chunk) {
	      if (self.timing && !self.responseStarted) {
	        self.responseStartTime = new Date().getTime();
	
	        // NOTE: responseStartTime is deprecated in favor of .timings
	        response.responseStartTime = self.responseStartTime;
	      }
	      self._destdata = true;
	      self.emit('data', chunk);
	    });
	    responseContent.once('end', function (chunk) {
	      self.emit('end', chunk);
	    });
	    responseContent.on('error', function (error) {
	      self.emit('error', error);
	    });
	    responseContent.on('close', function () {
	      self.emit('close');
	    });
	
	    if (self.callback) {
	      self.readResponseBody(response);
	    }
	    //if no callback
	    else {
	        self.on('end', function () {
	          if (self._aborted) {
	            debug('aborted', self.uri.href);
	            return;
	          }
	          self.emit('complete', response);
	        });
	      }
	  }
	  debug('finish init function', self.uri.href);
	};
	
	Request.prototype.readResponseBody = function (response) {
	  var self = this;
	  debug('reading response\'s body');
	  var buffers = [],
	      bufferLength = 0,
	      strings = [];
	
	  self.on('data', function (chunk) {
	    if (!Buffer.isBuffer(chunk)) {
	      strings.push(chunk);
	    } else if (chunk.length) {
	      bufferLength += chunk.length;
	      buffers.push(chunk);
	    }
	  });
	  self.on('end', function () {
	    debug('end event', self.uri.href);
	    if (self._aborted) {
	      debug('aborted', self.uri.href);
	      // `buffer` is defined in the parent scope and used in a closure it exists for the life of the request.
	      // This can lead to leaky behavior if the user retains a reference to the request object.
	      buffers = [];
	      bufferLength = 0;
	      return;
	    }
	
	    if (bufferLength) {
	      debug('has body', self.uri.href, bufferLength);
	      response.body = Buffer.concat(buffers, bufferLength);
	      if (self.encoding !== null) {
	        response.body = response.body.toString(self.encoding);
	      }
	      // `buffer` is defined in the parent scope and used in a closure it exists for the life of the Request.
	      // This can lead to leaky behavior if the user retains a reference to the request object.
	      buffers = [];
	      bufferLength = 0;
	    } else if (strings.length) {
	      // The UTF8 BOM [0xEF,0xBB,0xBF] is converted to [0xFE,0xFF] in the JS UTC16/UCS2 representation.
	      // Strip this value out when the encoding is set to 'utf8', as upstream consumers won't expect it and it breaks JSON.parse().
	      if (self.encoding === 'utf8' && strings[0].length > 0 && strings[0][0] === '\uFEFF') {
	        strings[0] = strings[0].substring(1);
	      }
	      response.body = strings.join('');
	    }
	
	    if (self._json) {
	      try {
	        response.body = JSON.parse(response.body, self._jsonReviver);
	      } catch (e) {
	        debug('invalid JSON received', self.uri.href);
	      }
	    }
	    debug('emitting complete', self.uri.href);
	    if (typeof response.body === 'undefined' && !self._json) {
	      response.body = self.encoding === null ? Buffer.alloc(0) : '';
	    }
	    self.emit('complete', response, response.body);
	  });
	};
	
	Request.prototype.abort = function () {
	  var self = this;
	  self._aborted = true;
	
	  if (self.req) {
	    self.req.abort();
	  } else if (self.response) {
	    self.response.destroy();
	  }
	
	  self.emit('abort');
	};
	
	Request.prototype.pipeDest = function (dest) {
	  var self = this;
	  var response = self.response;
	  // Called after the response is received
	  if (dest.headers && !dest.headersSent) {
	    if (response.caseless.has('content-type')) {
	      var ctname = response.caseless.has('content-type');
	      if (dest.setHeader) {
	        dest.setHeader(ctname, response.headers[ctname]);
	      } else {
	        dest.headers[ctname] = response.headers[ctname];
	      }
	    }
	
	    if (response.caseless.has('content-length')) {
	      var clname = response.caseless.has('content-length');
	      if (dest.setHeader) {
	        dest.setHeader(clname, response.headers[clname]);
	      } else {
	        dest.headers[clname] = response.headers[clname];
	      }
	    }
	  }
	  if (dest.setHeader && !dest.headersSent) {
	    for (var i in response.headers) {
	      // If the response content is being decoded, the Content-Encoding header
	      // of the response doesn't represent the piped content, so don't pass it.
	      if (!self.gzip || i !== 'content-encoding') {
	        dest.setHeader(i, response.headers[i]);
	      }
	    }
	    dest.statusCode = response.statusCode;
	  }
	  if (self.pipefilter) {
	    self.pipefilter(response, dest);
	  }
	};
	
	Request.prototype.qs = function (q, clobber) {
	  var self = this;
	  var base;
	  if (!clobber && self.uri.query) {
	    base = self._qs.parse(self.uri.query);
	  } else {
	    base = {};
	  }
	
	  for (var i in q) {
	    base[i] = q[i];
	  }
	
	  var qs = self._qs.stringify(base);
	
	  if (qs === '') {
	    return self;
	  }
	
	  self.uri = url.parse(self.uri.href.split('?')[0] + '?' + qs);
	  self.url = self.uri;
	  self.path = self.uri.path;
	
	  if (self.uri.host === 'unix') {
	    self.enableUnixSocket();
	  }
	
	  return self;
	};
	Request.prototype.form = function (form) {
	  var self = this;
	  if (form) {
	    if (!/^application\/x-www-form-urlencoded\b/.test(self.getHeader('content-type'))) {
	      self.setHeader('content-type', 'application/x-www-form-urlencoded');
	    }
	    self.body = typeof form === 'string' ? self._qs.rfc3986(form.toString('utf8')) : self._qs.stringify(form).toString('utf8');
	    return self;
	  }
	  // create form-data object
	  self._form = new FormData();
	  self._form.on('error', function (err) {
	    err.message = 'form-data: ' + err.message;
	    self.emit('error', err);
	    self.abort();
	  });
	  return self._form;
	};
	Request.prototype.multipart = function (multipart) {
	  var self = this;
	
	  self._multipart.onRequest(multipart);
	
	  if (!self._multipart.chunked) {
	    self.body = self._multipart.body;
	  }
	
	  return self;
	};
	Request.prototype.json = function (val) {
	  var self = this;
	
	  if (!self.hasHeader('accept')) {
	    self.setHeader('accept', 'application/json');
	  }
	
	  if (typeof self.jsonReplacer === 'function') {
	    self._jsonReplacer = self.jsonReplacer;
	  }
	
	  self._json = true;
	  if (typeof val === 'boolean') {
	    if (self.body !== undefined) {
	      if (!/^application\/x-www-form-urlencoded\b/.test(self.getHeader('content-type'))) {
	        self.body = safeStringify(self.body, self._jsonReplacer);
	      } else {
	        self.body = self._qs.rfc3986(self.body);
	      }
	      if (!self.hasHeader('content-type')) {
	        self.setHeader('content-type', 'application/json');
	      }
	    }
	  } else {
	    self.body = safeStringify(val, self._jsonReplacer);
	    if (!self.hasHeader('content-type')) {
	      self.setHeader('content-type', 'application/json');
	    }
	  }
	
	  if (typeof self.jsonReviver === 'function') {
	    self._jsonReviver = self.jsonReviver;
	  }
	
	  return self;
	};
	Request.prototype.getHeader = function (name, headers) {
	  var self = this;
	  var result, re, match;
	  if (!headers) {
	    headers = self.headers;
	  }
	  Object.keys(headers).forEach(function (key) {
	    if (key.length !== name.length) {
	      return;
	    }
	    re = new RegExp(name, 'i');
	    match = key.match(re);
	    if (match) {
	      result = headers[key];
	    }
	  });
	  return result;
	};
	Request.prototype.enableUnixSocket = function () {
	  // Get the socket & request paths from the URL
	  var unixParts = this.uri.path.split(':'),
	      host = unixParts[0],
	      path = unixParts[1];
	  // Apply unix properties to request
	  this.socketPath = host;
	  this.uri.pathname = path;
	  this.uri.path = path;
	  this.uri.host = host;
	  this.uri.hostname = host;
	  this.uri.isUnix = true;
	};
	
	Request.prototype.auth = function (user, pass, sendImmediately, bearer) {
	  var self = this;
	
	  self._auth.onRequest(user, pass, sendImmediately, bearer);
	
	  return self;
	};
	Request.prototype.aws = function (opts, now) {
	  var self = this;
	
	  if (!now) {
	    self._aws = opts;
	    return self;
	  }
	
	  if (opts.sign_version == 4 || opts.sign_version == '4') {
	    // use aws4
	    var options = {
	      host: self.uri.host,
	      path: self.uri.path,
	      method: self.method,
	      headers: {
	        'content-type': self.getHeader('content-type') || ''
	      },
	      body: self.body
	    };
	    var signRes = aws4.sign(options, {
	      accessKeyId: opts.key,
	      secretAccessKey: opts.secret,
	      sessionToken: opts.session
	    });
	    self.setHeader('authorization', signRes.headers.Authorization);
	    self.setHeader('x-amz-date', signRes.headers['X-Amz-Date']);
	    if (signRes.headers['X-Amz-Security-Token']) {
	      self.setHeader('x-amz-security-token', signRes.headers['X-Amz-Security-Token']);
	    }
	  } else {
	    // default: use aws-sign2
	    var date = new Date();
	    self.setHeader('date', date.toUTCString());
	    var auth = { key: opts.key,
	      secret: opts.secret,
	      verb: self.method.toUpperCase(),
	      date: date,
	      contentType: self.getHeader('content-type') || '',
	      md5: self.getHeader('content-md5') || '',
	      amazonHeaders: aws2.canonicalizeHeaders(self.headers)
	    };
	    var path = self.uri.path;
	    if (opts.bucket && path) {
	      auth.resource = '/' + opts.bucket + path;
	    } else if (opts.bucket && !path) {
	      auth.resource = '/' + opts.bucket;
	    } else if (!opts.bucket && path) {
	      auth.resource = path;
	    } else if (!opts.bucket && !path) {
	      auth.resource = '/';
	    }
	    auth.resource = aws2.canonicalizeResource(auth.resource);
	    self.setHeader('authorization', aws2.authorization(auth));
	  }
	
	  return self;
	};
	Request.prototype.httpSignature = function (opts) {
	  var self = this;
	  httpSignature.signRequest({
	    getHeader: function getHeader(header) {
	      return self.getHeader(header, self.headers);
	    },
	    setHeader: function setHeader(header, value) {
	      self.setHeader(header, value);
	    },
	    method: self.method,
	    path: self.path
	  }, opts);
	  debug('httpSignature authorization', self.getHeader('authorization'));
	
	  return self;
	};
	Request.prototype.hawk = function (opts) {
	  var self = this;
	  self.setHeader('Authorization', hawk.client.header(self.uri, self.method, opts).field);
	};
	Request.prototype.oauth = function (_oauth) {
	  var self = this;
	
	  self._oauth.onRequest(_oauth);
	
	  return self;
	};
	
	Request.prototype.jar = function (jar) {
	  var self = this;
	  var cookies;
	
	  if (self._redirect.redirectsFollowed === 0) {
	    self.originalCookieHeader = self.getHeader('cookie');
	  }
	
	  if (!jar) {
	    // disable cookies
	    cookies = false;
	    self._disableCookies = true;
	  } else {
	    var targetCookieJar = jar && jar.getCookieString ? jar : globalCookieJar;
	    var urihref = self.uri.href;
	    //fetch cookie in the Specified host
	    if (targetCookieJar) {
	      cookies = targetCookieJar.getCookieString(urihref);
	    }
	  }
	
	  //if need cookie and cookie is not empty
	  if (cookies && cookies.length) {
	    if (self.originalCookieHeader) {
	      // Don't overwrite existing Cookie header
	      self.setHeader('cookie', self.originalCookieHeader + '; ' + cookies);
	    } else {
	      self.setHeader('cookie', cookies);
	    }
	  }
	  self._jar = jar;
	  return self;
	};
	
	// Stream API
	Request.prototype.pipe = function (dest, opts) {
	  var self = this;
	
	  if (self.response) {
	    if (self._destdata) {
	      self.emit('error', new Error('You cannot pipe after data has been emitted from the response.'));
	    } else if (self._ended) {
	      self.emit('error', new Error('You cannot pipe after the response has been ended.'));
	    } else {
	      stream.Stream.prototype.pipe.call(self, dest, opts);
	      self.pipeDest(dest);
	      return dest;
	    }
	  } else {
	    self.dests.push(dest);
	    stream.Stream.prototype.pipe.call(self, dest, opts);
	    return dest;
	  }
	};
	Request.prototype.write = function () {
	  var self = this;
	  if (self._aborted) {
	    return;
	  }
	
	  if (!self._started) {
	    self.start();
	  }
	  if (self.req) {
	    return self.req.write.apply(self.req, arguments);
	  }
	};
	Request.prototype.end = function (chunk) {
	  var self = this;
	  if (self._aborted) {
	    return;
	  }
	
	  if (chunk) {
	    self.write(chunk);
	  }
	  if (!self._started) {
	    self.start();
	  }
	  if (self.req) {
	    self.req.end();
	  }
	};
	Request.prototype.pause = function () {
	  var self = this;
	  if (!self.responseContent) {
	    self._paused = true;
	  } else {
	    self.responseContent.pause.apply(self.responseContent, arguments);
	  }
	};
	Request.prototype.resume = function () {
	  var self = this;
	  if (!self.responseContent) {
	    self._paused = false;
	  } else {
	    self.responseContent.resume.apply(self.responseContent, arguments);
	  }
	};
	Request.prototype.destroy = function () {
	  var self = this;
	  if (!self._ended) {
	    self.end();
	  } else if (self.response) {
	    self.response.destroy();
	  }
	};
	
	Request.defaultProxyHeaderWhiteList = Tunnel.defaultProxyHeaderWhiteList.slice();
	
	Request.defaultProxyHeaderExclusiveList = Tunnel.defaultProxyHeaderExclusiveList.slice();
	
	// Exports
	
	Request.prototype.toJSON = requestToJSON;
	module.exports = Request;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ }),
/* 464 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global) {'use strict';
	
	var ClientRequest = __webpack_require__(465);
	var extend = __webpack_require__(469);
	var statusCodes = __webpack_require__(470);
	var url = __webpack_require__(275);
	
	var http = exports;
	
	http.request = function (opts, cb) {
		if (typeof opts === 'string') opts = url.parse(opts);else opts = extend(opts);
	
		// Normally, the page is loaded from http or https, so not specifying a protocol
		// will result in a (valid) protocol-relative url. However, this won't work if
		// the protocol is something else, like 'file:'
		var defaultProtocol = global.location.protocol.search(/^https?:$/) === -1 ? 'http:' : '';
	
		var protocol = opts.protocol || defaultProtocol;
		var host = opts.hostname || opts.host;
		var port = opts.port;
		var path = opts.path || '/';
	
		// Necessary for IPv6 addresses
		if (host && host.indexOf(':') !== -1) host = '[' + host + ']';
	
		// This may be a relative url. The browser should always be able to interpret it correctly.
		opts.url = (host ? protocol + '//' + host : '') + (port ? ':' + port : '') + path;
		opts.method = (opts.method || 'GET').toUpperCase();
		opts.headers = opts.headers || {};
	
		// Also valid opts.auth, opts.mode
	
		var req = new ClientRequest(opts);
		if (cb) req.on('response', cb);
		return req;
	};
	
	http.get = function get(opts, cb) {
		var req = http.request(opts, cb);
		req.end();
		return req;
	};
	
	http.Agent = function () {};
	http.Agent.defaultMaxSockets = 4;
	
	http.STATUS_CODES = statusCodes;
	
	http.METHODS = ['CHECKOUT', 'CONNECT', 'COPY', 'DELETE', 'GET', 'HEAD', 'LOCK', 'M-SEARCH', 'MERGE', 'MKACTIVITY', 'MKCOL', 'MOVE', 'NOTIFY', 'OPTIONS', 'PATCH', 'POST', 'PROPFIND', 'PROPPATCH', 'PURGE', 'PUT', 'REPORT', 'SEARCH', 'SUBSCRIBE', 'TRACE', 'UNLOCK', 'UNSUBSCRIBE'];
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ }),
/* 465 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer, global, process) {'use strict';
	
	var capability = __webpack_require__(466);
	var inherits = __webpack_require__(284);
	var response = __webpack_require__(467);
	var stream = __webpack_require__(285);
	var toArrayBuffer = __webpack_require__(468);
	
	var IncomingMessage = response.IncomingMessage;
	var rStates = response.readyStates;
	
	function decideMode(preferBinary, useFetch) {
		if (capability.fetch && useFetch) {
			return 'fetch';
		} else if (capability.mozchunkedarraybuffer) {
			return 'moz-chunked-arraybuffer';
		} else if (capability.msstream) {
			return 'ms-stream';
		} else if (capability.arraybuffer && preferBinary) {
			return 'arraybuffer';
		} else if (capability.vbArray && preferBinary) {
			return 'text:vbarray';
		} else {
			return 'text';
		}
	}
	
	var ClientRequest = module.exports = function (opts) {
		var self = this;
		stream.Writable.call(self);
	
		self._opts = opts;
		self._body = [];
		self._headers = {};
		if (opts.auth) self.setHeader('Authorization', 'Basic ' + new Buffer(opts.auth).toString('base64'));
		Object.keys(opts.headers).forEach(function (name) {
			self.setHeader(name, opts.headers[name]);
		});
	
		var preferBinary;
		var useFetch = true;
		if (opts.mode === 'disable-fetch' || 'timeout' in opts) {
			// If the use of XHR should be preferred and includes preserving the 'content-type' header.
			// Force XHR to be used since the Fetch API does not yet support timeouts.
			useFetch = false;
			preferBinary = true;
		} else if (opts.mode === 'prefer-streaming') {
			// If streaming is a high priority but binary compatibility and
			// the accuracy of the 'content-type' header aren't
			preferBinary = false;
		} else if (opts.mode === 'allow-wrong-content-type') {
			// If streaming is more important than preserving the 'content-type' header
			preferBinary = !capability.overrideMimeType;
		} else if (!opts.mode || opts.mode === 'default' || opts.mode === 'prefer-fast') {
			// Use binary if text streaming may corrupt data or the content-type header, or for speed
			preferBinary = true;
		} else {
			throw new Error('Invalid value for opts.mode');
		}
		self._mode = decideMode(preferBinary, useFetch);
	
		self.on('finish', function () {
			self._onFinish();
		});
	};
	
	inherits(ClientRequest, stream.Writable);
	
	ClientRequest.prototype.setHeader = function (name, value) {
		var self = this;
		var lowerName = name.toLowerCase();
		// This check is not necessary, but it prevents warnings from browsers about setting unsafe
		// headers. To be honest I'm not entirely sure hiding these warnings is a good thing, but
		// http-browserify did it, so I will too.
		if (unsafeHeaders.indexOf(lowerName) !== -1) return;
	
		self._headers[lowerName] = {
			name: name,
			value: value
		};
	};
	
	ClientRequest.prototype.getHeader = function (name) {
		var self = this;
		return self._headers[name.toLowerCase()].value;
	};
	
	ClientRequest.prototype.removeHeader = function (name) {
		var self = this;
		delete self._headers[name.toLowerCase()];
	};
	
	ClientRequest.prototype._onFinish = function () {
		var self = this;
	
		if (self._destroyed) return;
		var opts = self._opts;
	
		var headersObj = self._headers;
		var body = null;
		if (opts.method !== 'GET' && opts.method !== 'HEAD') {
			if (capability.blobConstructor) {
				body = new global.Blob(self._body.map(function (buffer) {
					return toArrayBuffer(buffer);
				}), {
					type: (headersObj['content-type'] || {}).value || ''
				});
			} else {
				// get utf8 string
				body = Buffer.concat(self._body).toString();
			}
		}
	
		// create flattened list of headers
		var headersList = [];
		Object.keys(headersObj).forEach(function (keyName) {
			var name = headersObj[keyName].name;
			var value = headersObj[keyName].value;
			if (Array.isArray(value)) {
				value.forEach(function (v) {
					headersList.push([name, v]);
				});
			} else {
				headersList.push([name, value]);
			}
		});
	
		if (self._mode === 'fetch') {
			global.fetch(self._opts.url, {
				method: self._opts.method,
				headers: headersList,
				body: body || undefined,
				mode: 'cors',
				credentials: opts.withCredentials ? 'include' : 'same-origin'
			}).then(function (response) {
				self._fetchResponse = response;
				self._connect();
			}, function (reason) {
				self.emit('error', reason);
			});
		} else {
			var xhr = self._xhr = new global.XMLHttpRequest();
			try {
				xhr.open(self._opts.method, self._opts.url, true);
			} catch (err) {
				process.nextTick(function () {
					self.emit('error', err);
				});
				return;
			}
	
			// Can't set responseType on really old browsers
			if ('responseType' in xhr) xhr.responseType = self._mode.split(':')[0];
	
			if ('withCredentials' in xhr) xhr.withCredentials = !!opts.withCredentials;
	
			if (self._mode === 'text' && 'overrideMimeType' in xhr) xhr.overrideMimeType('text/plain; charset=x-user-defined');
	
			if ('timeout' in opts) {
				xhr.timeout = opts.timeout;
				xhr.ontimeout = function () {
					self.emit('timeout');
				};
			}
	
			headersList.forEach(function (header) {
				xhr.setRequestHeader(header[0], header[1]);
			});
	
			self._response = null;
			xhr.onreadystatechange = function () {
				switch (xhr.readyState) {
					case rStates.LOADING:
					case rStates.DONE:
						self._onXHRProgress();
						break;
				}
			};
			// Necessary for streaming in Firefox, since xhr.response is ONLY defined
			// in onprogress, not in onreadystatechange with xhr.readyState = 3
			if (self._mode === 'moz-chunked-arraybuffer') {
				xhr.onprogress = function () {
					self._onXHRProgress();
				};
			}
	
			xhr.onerror = function () {
				if (self._destroyed) return;
				self.emit('error', new Error('XHR error'));
			};
	
			try {
				xhr.send(body);
			} catch (err) {
				process.nextTick(function () {
					self.emit('error', err);
				});
				return;
			}
		}
	};
	
	/**
	 * Checks if xhr.status is readable and non-zero, indicating no error.
	 * Even though the spec says it should be available in readyState 3,
	 * accessing it throws an exception in IE8
	 */
	function statusValid(xhr) {
		try {
			var status = xhr.status;
			return status !== null && status !== 0;
		} catch (e) {
			return false;
		}
	}
	
	ClientRequest.prototype._onXHRProgress = function () {
		var self = this;
	
		if (!statusValid(self._xhr) || self._destroyed) return;
	
		if (!self._response) self._connect();
	
		self._response._onXHRProgress();
	};
	
	ClientRequest.prototype._connect = function () {
		var self = this;
	
		if (self._destroyed) return;
	
		self._response = new IncomingMessage(self._xhr, self._fetchResponse, self._mode);
		self._response.on('error', function (err) {
			self.emit('error', err);
		});
	
		self.emit('response', self._response);
	};
	
	ClientRequest.prototype._write = function (chunk, encoding, cb) {
		var self = this;
	
		self._body.push(chunk);
		cb();
	};
	
	ClientRequest.prototype.abort = ClientRequest.prototype.destroy = function () {
		var self = this;
		self._destroyed = true;
		if (self._response) self._response._destroyed = true;
		if (self._xhr) self._xhr.abort();
		// Currently, there isn't a way to truly abort a fetch.
		// If you like bikeshedding, see https://github.com/whatwg/fetch/issues/27
	};
	
	ClientRequest.prototype.end = function (data, encoding, cb) {
		var self = this;
		if (typeof data === 'function') {
			cb = data;
			data = undefined;
		}
	
		stream.Writable.prototype.end.call(self, data, encoding, cb);
	};
	
	ClientRequest.prototype.flushHeaders = function () {};
	ClientRequest.prototype.setTimeout = function () {};
	ClientRequest.prototype.setNoDelay = function () {};
	ClientRequest.prototype.setSocketKeepAlive = function () {};
	
	// Taken from http://www.w3.org/TR/XMLHttpRequest/#the-setrequestheader%28%29-method
	var unsafeHeaders = ['accept-charset', 'accept-encoding', 'access-control-request-headers', 'access-control-request-method', 'connection', 'content-length', 'cookie', 'cookie2', 'date', 'dnt', 'expect', 'host', 'keep-alive', 'origin', 'referer', 'te', 'trailer', 'transfer-encoding', 'upgrade', 'user-agent', 'via'];
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(290).Buffer, (function() { return this; }()), __webpack_require__(3)))

/***/ }),
/* 466 */
/***/ (function(module, exports) {

	/* WEBPACK VAR INJECTION */(function(global) {'use strict';
	
	exports.fetch = isFunction(global.fetch) && isFunction(global.ReadableStream);
	
	exports.blobConstructor = false;
	try {
		new Blob([new ArrayBuffer(1)]);
		exports.blobConstructor = true;
	} catch (e) {}
	
	// The xhr request to example.com may violate some restrictive CSP configurations,
	// so if we're running in a browser that supports `fetch`, avoid calling getXHR()
	// and assume support for certain features below.
	var xhr;
	function getXHR() {
		// Cache the xhr value
		if (xhr !== undefined) return xhr;
	
		if (global.XMLHttpRequest) {
			xhr = new global.XMLHttpRequest();
			// If XDomainRequest is available (ie only, where xhr might not work
			// cross domain), use the page location. Otherwise use example.com
			// Note: this doesn't actually make an http request.
			try {
				xhr.open('GET', global.XDomainRequest ? '/' : 'https://example.com');
			} catch (e) {
				xhr = null;
			}
		} else {
			// Service workers don't have XHR
			xhr = null;
		}
		return xhr;
	}
	
	function checkTypeSupport(type) {
		var xhr = getXHR();
		if (!xhr) return false;
		try {
			xhr.responseType = type;
			return xhr.responseType === type;
		} catch (e) {}
		return false;
	}
	
	// For some strange reason, Safari 7.0 reports typeof global.ArrayBuffer === 'object'.
	// Safari 7.1 appears to have fixed this bug.
	var haveArrayBuffer = typeof global.ArrayBuffer !== 'undefined';
	var haveSlice = haveArrayBuffer && isFunction(global.ArrayBuffer.prototype.slice);
	
	// If fetch is supported, then arraybuffer will be supported too. Skip calling
	// checkTypeSupport(), since that calls getXHR().
	exports.arraybuffer = exports.fetch || haveArrayBuffer && checkTypeSupport('arraybuffer');
	
	// These next two tests unavoidably show warnings in Chrome. Since fetch will always
	// be used if it's available, just return false for these to avoid the warnings.
	exports.msstream = !exports.fetch && haveSlice && checkTypeSupport('ms-stream');
	exports.mozchunkedarraybuffer = !exports.fetch && haveArrayBuffer && checkTypeSupport('moz-chunked-arraybuffer');
	
	// If fetch is supported, then overrideMimeType will be supported too. Skip calling
	// getXHR().
	exports.overrideMimeType = exports.fetch || (getXHR() ? isFunction(getXHR().overrideMimeType) : false);
	
	exports.vbArray = isFunction(global.VBArray);
	
	function isFunction(value) {
		return typeof value === 'function';
	}
	
	xhr = null; // Help gc
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ }),
/* 467 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process, Buffer, global) {'use strict';
	
	var capability = __webpack_require__(466);
	var inherits = __webpack_require__(284);
	var stream = __webpack_require__(285);
	
	var rStates = exports.readyStates = {
		UNSENT: 0,
		OPENED: 1,
		HEADERS_RECEIVED: 2,
		LOADING: 3,
		DONE: 4
	};
	
	var IncomingMessage = exports.IncomingMessage = function (xhr, response, mode) {
		var self = this;
		stream.Readable.call(self);
	
		self._mode = mode;
		self.headers = {};
		self.rawHeaders = [];
		self.trailers = {};
		self.rawTrailers = [];
	
		// Fake the 'close' event, but only once 'end' fires
		self.on('end', function () {
			// The nextTick is necessary to prevent the 'request' module from causing an infinite loop
			process.nextTick(function () {
				self.emit('close');
			});
		});
	
		if (mode === 'fetch') {
			var read = function read() {
				reader.read().then(function (result) {
					if (self._destroyed) return;
					if (result.done) {
						self.push(null);
						return;
					}
					self.push(new Buffer(result.value));
					read();
				}).catch(function (err) {
					self.emit('error', err);
				});
			};
	
			self._fetchResponse = response;
	
			self.url = response.url;
			self.statusCode = response.status;
			self.statusMessage = response.statusText;
	
			response.headers.forEach(function (header, key) {
				self.headers[key.toLowerCase()] = header;
				self.rawHeaders.push(key, header);
			});
	
			// TODO: this doesn't respect backpressure. Once WritableStream is available, this can be fixed
			var reader = response.body.getReader();
	
			read();
		} else {
			self._xhr = xhr;
			self._pos = 0;
	
			self.url = xhr.responseURL;
			self.statusCode = xhr.status;
			self.statusMessage = xhr.statusText;
			var headers = xhr.getAllResponseHeaders().split(/\r?\n/);
			headers.forEach(function (header) {
				var matches = header.match(/^([^:]+):\s*(.*)/);
				if (matches) {
					var key = matches[1].toLowerCase();
					if (key === 'set-cookie') {
						if (self.headers[key] === undefined) {
							self.headers[key] = [];
						}
						self.headers[key].push(matches[2]);
					} else if (self.headers[key] !== undefined) {
						self.headers[key] += ', ' + matches[2];
					} else {
						self.headers[key] = matches[2];
					}
					self.rawHeaders.push(matches[1], matches[2]);
				}
			});
	
			self._charset = 'x-user-defined';
			if (!capability.overrideMimeType) {
				var mimeType = self.rawHeaders['mime-type'];
				if (mimeType) {
					var charsetMatch = mimeType.match(/;\s*charset=([^;])(;|$)/);
					if (charsetMatch) {
						self._charset = charsetMatch[1].toLowerCase();
					}
				}
				if (!self._charset) self._charset = 'utf-8'; // best guess
			}
		}
	};
	
	inherits(IncomingMessage, stream.Readable);
	
	IncomingMessage.prototype._read = function () {};
	
	IncomingMessage.prototype._onXHRProgress = function () {
		var self = this;
	
		var xhr = self._xhr;
	
		var response = null;
		switch (self._mode) {
			case 'text:vbarray':
				// For IE9
				if (xhr.readyState !== rStates.DONE) break;
				try {
					// This fails in IE8
					response = new global.VBArray(xhr.responseBody).toArray();
				} catch (e) {}
				if (response !== null) {
					self.push(new Buffer(response));
					break;
				}
			// Falls through in IE8	
			case 'text':
				try {
					// This will fail when readyState = 3 in IE9. Switch mode and wait for readyState = 4
					response = xhr.responseText;
				} catch (e) {
					self._mode = 'text:vbarray';
					break;
				}
				if (response.length > self._pos) {
					var newData = response.substr(self._pos);
					if (self._charset === 'x-user-defined') {
						var buffer = new Buffer(newData.length);
						for (var i = 0; i < newData.length; i++) {
							buffer[i] = newData.charCodeAt(i) & 0xff;
						}self.push(buffer);
					} else {
						self.push(newData, self._charset);
					}
					self._pos = response.length;
				}
				break;
			case 'arraybuffer':
				if (xhr.readyState !== rStates.DONE || !xhr.response) break;
				response = xhr.response;
				self.push(new Buffer(new Uint8Array(response)));
				break;
			case 'moz-chunked-arraybuffer':
				// take whole
				response = xhr.response;
				if (xhr.readyState !== rStates.LOADING || !response) break;
				self.push(new Buffer(new Uint8Array(response)));
				break;
			case 'ms-stream':
				response = xhr.response;
				if (xhr.readyState !== rStates.LOADING) break;
				var reader = new global.MSStreamReader();
				reader.onprogress = function () {
					if (reader.result.byteLength > self._pos) {
						self.push(new Buffer(new Uint8Array(reader.result.slice(self._pos))));
						self._pos = reader.result.byteLength;
					}
				};
				reader.onload = function () {
					self.push(null);
				};
				// reader.onerror = ??? // TODO: this
				reader.readAsArrayBuffer(response);
				break;
		}
	
		// The ms-stream case handles end separately in reader.onload()
		if (self._xhr.readyState === rStates.DONE && self._mode !== 'ms-stream') {
			self.push(null);
		}
	};
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3), __webpack_require__(290).Buffer, (function() { return this; }())))

/***/ }),
/* 468 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var Buffer = __webpack_require__(290).Buffer;
	
	module.exports = function (buf) {
		// If the buffer is backed by a Uint8Array, a faster version will work
		if (buf instanceof Uint8Array) {
			// If the buffer isn't a subarray, return the underlying ArrayBuffer
			if (buf.byteOffset === 0 && buf.byteLength === buf.buffer.byteLength) {
				return buf.buffer;
			} else if (typeof buf.buffer.slice === 'function') {
				// Otherwise we need to get a proper copy
				return buf.buffer.slice(buf.byteOffset, buf.byteOffset + buf.byteLength);
			}
		}
	
		if (Buffer.isBuffer(buf)) {
			// This is the slow version that will work with any Buffer
			// implementation (even in old browsers)
			var arrayCopy = new Uint8Array(buf.length);
			var len = buf.length;
			for (var i = 0; i < len; i++) {
				arrayCopy[i] = buf[i];
			}
			return arrayCopy.buffer;
		} else {
			throw new Error('Argument must be a Buffer');
		}
	};

/***/ }),
/* 469 */
/***/ (function(module, exports) {

	"use strict";
	
	module.exports = extend;
	
	var hasOwnProperty = Object.prototype.hasOwnProperty;
	
	function extend() {
	    var target = {};
	
	    for (var i = 0; i < arguments.length; i++) {
	        var source = arguments[i];
	
	        for (var key in source) {
	            if (hasOwnProperty.call(source, key)) {
	                target[key] = source[key];
	            }
	        }
	    }
	
	    return target;
	}

/***/ }),
/* 470 */
/***/ (function(module, exports) {

	"use strict";
	
	module.exports = {
	  "100": "Continue",
	  "101": "Switching Protocols",
	  "102": "Processing",
	  "200": "OK",
	  "201": "Created",
	  "202": "Accepted",
	  "203": "Non-Authoritative Information",
	  "204": "No Content",
	  "205": "Reset Content",
	  "206": "Partial Content",
	  "207": "Multi-Status",
	  "208": "Already Reported",
	  "226": "IM Used",
	  "300": "Multiple Choices",
	  "301": "Moved Permanently",
	  "302": "Found",
	  "303": "See Other",
	  "304": "Not Modified",
	  "305": "Use Proxy",
	  "307": "Temporary Redirect",
	  "308": "Permanent Redirect",
	  "400": "Bad Request",
	  "401": "Unauthorized",
	  "402": "Payment Required",
	  "403": "Forbidden",
	  "404": "Not Found",
	  "405": "Method Not Allowed",
	  "406": "Not Acceptable",
	  "407": "Proxy Authentication Required",
	  "408": "Request Timeout",
	  "409": "Conflict",
	  "410": "Gone",
	  "411": "Length Required",
	  "412": "Precondition Failed",
	  "413": "Payload Too Large",
	  "414": "URI Too Long",
	  "415": "Unsupported Media Type",
	  "416": "Range Not Satisfiable",
	  "417": "Expectation Failed",
	  "418": "I'm a teapot",
	  "421": "Misdirected Request",
	  "422": "Unprocessable Entity",
	  "423": "Locked",
	  "424": "Failed Dependency",
	  "425": "Unordered Collection",
	  "426": "Upgrade Required",
	  "428": "Precondition Required",
	  "429": "Too Many Requests",
	  "431": "Request Header Fields Too Large",
	  "451": "Unavailable For Legal Reasons",
	  "500": "Internal Server Error",
	  "501": "Not Implemented",
	  "502": "Bad Gateway",
	  "503": "Service Unavailable",
	  "504": "Gateway Timeout",
	  "505": "HTTP Version Not Supported",
	  "506": "Variant Also Negotiates",
	  "507": "Insufficient Storage",
	  "508": "Loop Detected",
	  "509": "Bandwidth Limit Exceeded",
	  "510": "Not Extended",
	  "511": "Network Authentication Required"
	};

/***/ }),
/* 471 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var http = __webpack_require__(464);
	
	var https = module.exports;
	
	for (var key in http) {
	    if (http.hasOwnProperty(key)) https[key] = http[key];
	};
	
	https.request = function (params, cb) {
	    if (!params) params = {};
	    params.scheme = 'https';
	    params.protocol = 'https:';
	    return http.request.call(this, params, cb);
	};

/***/ }),
/* 472 */
/***/ (function(module, exports) {

	'use strict';
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
	
	/*
	    HTTP Hawk Authentication Scheme
	    Copyright (c) 2012-2014, Eran Hammer <eran@hammer.io>
	    BSD Licensed
	*/
	
	// Declare namespace
	
	var hawk = {
	    internals: {}
	};
	
	hawk.client = {
	
	    // Generate an Authorization header for a given request
	
	    /*
	        uri: 'http://example.com/resource?a=b' or object generated by hawk.utils.parseUri()
	        method: HTTP verb (e.g. 'GET', 'POST')
	        options: {
	              // Required
	              credentials: {
	                id: 'dh37fgj492je',
	                key: 'aoijedoaijsdlaksjdl',
	                algorithm: 'sha256'                                 // 'sha1', 'sha256'
	            },
	              // Optional
	              ext: 'application-specific',                        // Application specific data sent via the ext attribute
	            timestamp: Date.now() / 1000,                       // A pre-calculated timestamp in seconds
	            nonce: '2334f34f',                                  // A pre-generated nonce
	            localtimeOffsetMsec: 400,                           // Time offset to sync with server time (ignored if timestamp provided)
	            payload: '{"some":"payload"}',                      // UTF-8 encoded string for body hash generation (ignored if hash provided)
	            contentType: 'application/json',                    // Payload content-type (ignored if hash provided)
	            hash: 'U4MKKSmiVxk37JCCrAVIjV=',                    // Pre-calculated payload hash
	            app: '24s23423f34dx',                               // Oz application id
	            dlg: '234sz34tww3sd'                                // Oz delegated-by application id
	        }
	    */
	
	    header: function header(uri, method, options) {
	
	        var result = {
	            field: '',
	            artifacts: {}
	        };
	
	        // Validate inputs
	
	        if (!uri || typeof uri !== 'string' && (typeof uri === 'undefined' ? 'undefined' : _typeof(uri)) !== 'object' || !method || typeof method !== 'string' || !options || (typeof options === 'undefined' ? 'undefined' : _typeof(options)) !== 'object') {
	
	            result.err = 'Invalid argument type';
	            return result;
	        }
	
	        // Application time
	
	        var timestamp = options.timestamp || hawk.utils.now(options.localtimeOffsetMsec);
	
	        // Validate credentials
	
	        var credentials = options.credentials;
	        if (!credentials || !credentials.id || !credentials.key || !credentials.algorithm) {
	
	            result.err = 'Invalid credentials object';
	            return result;
	        }
	
	        if (hawk.crypto.algorithms.indexOf(credentials.algorithm) === -1) {
	            result.err = 'Unknown algorithm';
	            return result;
	        }
	
	        // Parse URI
	
	        if (typeof uri === 'string') {
	            uri = hawk.utils.parseUri(uri);
	        }
	
	        // Calculate signature
	
	        var artifacts = {
	            ts: timestamp,
	            nonce: options.nonce || hawk.utils.randomString(6),
	            method: method,
	            resource: uri.resource,
	            host: uri.host,
	            port: uri.port,
	            hash: options.hash,
	            ext: options.ext,
	            app: options.app,
	            dlg: options.dlg
	        };
	
	        result.artifacts = artifacts;
	
	        // Calculate payload hash
	
	        if (!artifacts.hash && (options.payload || options.payload === '')) {
	
	            artifacts.hash = hawk.crypto.calculatePayloadHash(options.payload, credentials.algorithm, options.contentType);
	        }
	
	        var mac = hawk.crypto.calculateMac('header', credentials, artifacts);
	
	        // Construct header
	
	        var hasExt = artifacts.ext !== null && artifacts.ext !== undefined && artifacts.ext !== ''; // Other falsey values allowed
	        var header = 'Hawk id="' + credentials.id + '", ts="' + artifacts.ts + '", nonce="' + artifacts.nonce + (artifacts.hash ? '", hash="' + artifacts.hash : '') + (hasExt ? '", ext="' + hawk.utils.escapeHeaderAttribute(artifacts.ext) : '') + '", mac="' + mac + '"';
	
	        if (artifacts.app) {
	            header += ', app="' + artifacts.app + (artifacts.dlg ? '", dlg="' + artifacts.dlg : '') + '"';
	        }
	
	        result.field = header;
	
	        return result;
	    },
	
	    // Generate a bewit value for a given URI
	
	    /*
	        uri: 'http://example.com/resource?a=b'
	        options: {
	              // Required
	              credentials: {
	            id: 'dh37fgj492je',
	            key: 'aoijedoaijsdlaksjdl',
	            algorithm: 'sha256'                             // 'sha1', 'sha256'
	            },
	            ttlSec: 60 * 60,                                    // TTL in seconds
	              // Optional
	              ext: 'application-specific',                        // Application specific data sent via the ext attribute
	            localtimeOffsetMsec: 400                            // Time offset to sync with server time
	         };
	    */
	
	    bewit: function bewit(uri, options) {
	
	        // Validate inputs
	
	        if (!uri || typeof uri !== 'string' || !options || (typeof options === 'undefined' ? 'undefined' : _typeof(options)) !== 'object' || !options.ttlSec) {
	
	            return '';
	        }
	
	        options.ext = options.ext === null || options.ext === undefined ? '' : options.ext; // Zero is valid value
	
	        // Application time
	
	        var now = hawk.utils.now(options.localtimeOffsetMsec);
	
	        // Validate credentials
	
	        var credentials = options.credentials;
	        if (!credentials || !credentials.id || !credentials.key || !credentials.algorithm) {
	
	            return '';
	        }
	
	        if (hawk.crypto.algorithms.indexOf(credentials.algorithm) === -1) {
	            return '';
	        }
	
	        // Parse URI
	
	        uri = hawk.utils.parseUri(uri);
	
	        // Calculate signature
	
	        var exp = now + options.ttlSec;
	        var mac = hawk.crypto.calculateMac('bewit', credentials, {
	            ts: exp,
	            nonce: '',
	            method: 'GET',
	            resource: uri.resource, // Maintain trailing '?' and query params
	            host: uri.host,
	            port: uri.port,
	            ext: options.ext
	        });
	
	        // Construct bewit: id\exp\mac\ext
	
	        var bewit = credentials.id + '\\' + exp + '\\' + mac + '\\' + options.ext;
	        return hawk.utils.base64urlEncode(bewit);
	    },
	
	    // Validate server response
	
	    /*
	        request:    object created via 'new XMLHttpRequest()' after response received
	        artifacts:  object received from header().artifacts
	        options: {
	            payload:    optional payload received
	            required:   specifies if a Server-Authorization header is required. Defaults to 'false'
	        }
	    */
	
	    authenticate: function authenticate(request, credentials, artifacts, options) {
	
	        options = options || {};
	
	        var getHeader = function getHeader(name) {
	
	            return request.getResponseHeader ? request.getResponseHeader(name) : request.getHeader(name);
	        };
	
	        var wwwAuthenticate = getHeader('www-authenticate');
	        if (wwwAuthenticate) {
	
	            // Parse HTTP WWW-Authenticate header
	
	            var wwwAttributes = hawk.utils.parseAuthorizationHeader(wwwAuthenticate, ['ts', 'tsm', 'error']);
	            if (!wwwAttributes) {
	                return false;
	            }
	
	            if (wwwAttributes.ts) {
	                var tsm = hawk.crypto.calculateTsMac(wwwAttributes.ts, credentials);
	                if (tsm !== wwwAttributes.tsm) {
	                    return false;
	                }
	
	                hawk.utils.setNtpOffset(wwwAttributes.ts - Math.floor(new Date().getTime() / 1000)); // Keep offset at 1 second precision
	            }
	        }
	
	        // Parse HTTP Server-Authorization header
	
	        var serverAuthorization = getHeader('server-authorization');
	        if (!serverAuthorization && !options.required) {
	
	            return true;
	        }
	
	        var attributes = hawk.utils.parseAuthorizationHeader(serverAuthorization, ['mac', 'ext', 'hash']);
	        if (!attributes) {
	            return false;
	        }
	
	        var modArtifacts = {
	            ts: artifacts.ts,
	            nonce: artifacts.nonce,
	            method: artifacts.method,
	            resource: artifacts.resource,
	            host: artifacts.host,
	            port: artifacts.port,
	            hash: attributes.hash,
	            ext: attributes.ext,
	            app: artifacts.app,
	            dlg: artifacts.dlg
	        };
	
	        var mac = hawk.crypto.calculateMac('response', credentials, modArtifacts);
	        if (mac !== attributes.mac) {
	            return false;
	        }
	
	        if (!options.payload && options.payload !== '') {
	
	            return true;
	        }
	
	        if (!attributes.hash) {
	            return false;
	        }
	
	        var calculatedHash = hawk.crypto.calculatePayloadHash(options.payload, credentials.algorithm, getHeader('content-type'));
	        return calculatedHash === attributes.hash;
	    },
	
	    message: function message(host, port, _message, options) {
	
	        // Validate inputs
	
	        if (!host || typeof host !== 'string' || !port || typeof port !== 'number' || _message === null || _message === undefined || typeof _message !== 'string' || !options || (typeof options === 'undefined' ? 'undefined' : _typeof(options)) !== 'object') {
	
	            return null;
	        }
	
	        // Application time
	
	        var timestamp = options.timestamp || hawk.utils.now(options.localtimeOffsetMsec);
	
	        // Validate credentials
	
	        var credentials = options.credentials;
	        if (!credentials || !credentials.id || !credentials.key || !credentials.algorithm) {
	
	            // Invalid credential object
	            return null;
	        }
	
	        if (hawk.crypto.algorithms.indexOf(credentials.algorithm) === -1) {
	            return null;
	        }
	
	        // Calculate signature
	
	        var artifacts = {
	            ts: timestamp,
	            nonce: options.nonce || hawk.utils.randomString(6),
	            host: host,
	            port: port,
	            hash: hawk.crypto.calculatePayloadHash(_message, credentials.algorithm)
	        };
	
	        // Construct authorization
	
	        var result = {
	            id: credentials.id,
	            ts: artifacts.ts,
	            nonce: artifacts.nonce,
	            hash: artifacts.hash,
	            mac: hawk.crypto.calculateMac('message', credentials, artifacts)
	        };
	
	        return result;
	    },
	
	    authenticateTimestamp: function authenticateTimestamp(message, credentials, updateClock) {
	        // updateClock defaults to true
	
	        var tsm = hawk.crypto.calculateTsMac(message.ts, credentials);
	        if (tsm !== message.tsm) {
	            return false;
	        }
	
	        if (updateClock !== false) {
	            hawk.utils.setNtpOffset(message.ts - Math.floor(new Date().getTime() / 1000)); // Keep offset at 1 second precision
	        }
	
	        return true;
	    }
	};
	
	hawk.crypto = {
	
	    headerVersion: '1',
	
	    algorithms: ['sha1', 'sha256'],
	
	    calculateMac: function calculateMac(type, credentials, options) {
	
	        var normalized = hawk.crypto.generateNormalizedString(type, options);
	
	        var hmac = CryptoJS['Hmac' + credentials.algorithm.toUpperCase()](normalized, credentials.key);
	        return hmac.toString(CryptoJS.enc.Base64);
	    },
	
	    generateNormalizedString: function generateNormalizedString(type, options) {
	
	        var normalized = 'hawk.' + hawk.crypto.headerVersion + '.' + type + '\n' + options.ts + '\n' + options.nonce + '\n' + (options.method || '').toUpperCase() + '\n' + (options.resource || '') + '\n' + options.host.toLowerCase() + '\n' + options.port + '\n' + (options.hash || '') + '\n';
	
	        if (options.ext) {
	            normalized += options.ext.replace('\\', '\\\\').replace('\n', '\\n');
	        }
	
	        normalized += '\n';
	
	        if (options.app) {
	            normalized += options.app + '\n' + (options.dlg || '') + '\n';
	        }
	
	        return normalized;
	    },
	
	    calculatePayloadHash: function calculatePayloadHash(payload, algorithm, contentType) {
	
	        var hash = CryptoJS.algo[algorithm.toUpperCase()].create();
	        hash.update('hawk.' + hawk.crypto.headerVersion + '.payload\n');
	        hash.update(hawk.utils.parseContentType(contentType) + '\n');
	        hash.update(payload);
	        hash.update('\n');
	        return hash.finalize().toString(CryptoJS.enc.Base64);
	    },
	
	    calculateTsMac: function calculateTsMac(ts, credentials) {
	
	        var hash = CryptoJS['Hmac' + credentials.algorithm.toUpperCase()]('hawk.' + hawk.crypto.headerVersion + '.ts\n' + ts + '\n', credentials.key);
	        return hash.toString(CryptoJS.enc.Base64);
	    }
	};
	
	// localStorage compatible interface
	
	hawk.internals.LocalStorage = function () {
	
	    this._cache = {};
	    this.length = 0;
	
	    this.getItem = function (key) {
	
	        return this._cache.hasOwnProperty(key) ? String(this._cache[key]) : null;
	    };
	
	    this.setItem = function (key, value) {
	
	        this._cache[key] = String(value);
	        this.length = Object.keys(this._cache).length;
	    };
	
	    this.removeItem = function (key) {
	
	        delete this._cache[key];
	        this.length = Object.keys(this._cache).length;
	    };
	
	    this.clear = function () {
	
	        this._cache = {};
	        this.length = 0;
	    };
	
	    this.key = function (i) {
	
	        return Object.keys(this._cache)[i || 0];
	    };
	};
	
	hawk.utils = {
	
	    storage: new hawk.internals.LocalStorage(),
	
	    setStorage: function setStorage(storage) {
	
	        var ntpOffset = hawk.utils.storage.getItem('hawk_ntp_offset');
	        hawk.utils.storage = storage;
	        if (ntpOffset) {
	            hawk.utils.setNtpOffset(ntpOffset);
	        }
	    },
	
	    setNtpOffset: function setNtpOffset(offset) {
	
	        try {
	            hawk.utils.storage.setItem('hawk_ntp_offset', offset);
	        } catch (err) {
	            console.error('[hawk] could not write to storage.');
	            console.error(err);
	        }
	    },
	
	    getNtpOffset: function getNtpOffset() {
	
	        var offset = hawk.utils.storage.getItem('hawk_ntp_offset');
	        if (!offset) {
	            return 0;
	        }
	
	        return parseInt(offset, 10);
	    },
	
	    now: function now(localtimeOffsetMsec) {
	
	        return Math.floor((new Date().getTime() + (localtimeOffsetMsec || 0)) / 1000) + hawk.utils.getNtpOffset();
	    },
	
	    escapeHeaderAttribute: function escapeHeaderAttribute(attribute) {
	
	        return attribute.replace(/\\/g, '\\\\').replace(/\"/g, '\\"');
	    },
	
	    parseContentType: function parseContentType(header) {
	
	        if (!header) {
	            return '';
	        }
	
	        return header.split(';')[0].replace(/^\s+|\s+$/g, '').toLowerCase();
	    },
	
	    parseAuthorizationHeader: function parseAuthorizationHeader(header, keys) {
	
	        if (!header) {
	            return null;
	        }
	
	        var headerParts = header.match(/^(\w+)(?:\s+(.*))?$/); // Header: scheme[ something]
	        if (!headerParts) {
	            return null;
	        }
	
	        var scheme = headerParts[1];
	        if (scheme.toLowerCase() !== 'hawk') {
	            return null;
	        }
	
	        var attributesString = headerParts[2];
	        if (!attributesString) {
	            return null;
	        }
	
	        var attributes = {};
	        var verify = attributesString.replace(/(\w+)="([^"\\]*)"\s*(?:,\s*|$)/g, function ($0, $1, $2) {
	
	            // Check valid attribute names
	
	            if (keys.indexOf($1) === -1) {
	                return;
	            }
	
	            // Allowed attribute value characters: !#$%&'()*+,-./:;<=>?@[]^_`{|}~ and space, a-z, A-Z, 0-9
	
	            if ($2.match(/^[ \w\!#\$%&'\(\)\*\+,\-\.\/\:;<\=>\?@\[\]\^`\{\|\}~]+$/) === null) {
	                return;
	            }
	
	            // Check for duplicates
	
	            if (attributes.hasOwnProperty($1)) {
	                return;
	            }
	
	            attributes[$1] = $2;
	            return '';
	        });
	
	        if (verify !== '') {
	            return null;
	        }
	
	        return attributes;
	    },
	
	    randomString: function randomString(size) {
	
	        var randomSource = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';
	        var len = randomSource.length;
	
	        var result = [];
	        for (var i = 0; i < size; ++i) {
	            result[i] = randomSource[Math.floor(Math.random() * len)];
	        }
	
	        return result.join('');
	    },
	
	    uriRegex: /^([^:]+)\:\/\/(?:[^@]*@)?([^\/:]+)(?:\:(\d+))?([^#]*)(?:#.*)?$/, // scheme://credentials@host:port/resource#fragment
	    parseUri: function parseUri(input) {
	
	        var parts = input.match(hawk.utils.uriRegex);
	        if (!parts) {
	            return { host: '', port: '', resource: '' };
	        }
	
	        var scheme = parts[1].toLowerCase();
	        var uri = {
	            host: parts[2],
	            port: parts[3] || (scheme === 'http' ? '80' : scheme === 'https' ? '443' : ''),
	            resource: parts[4]
	        };
	
	        return uri;
	    },
	
	    base64urlEncode: function base64urlEncode(value) {
	
	        var wordArray = CryptoJS.enc.Utf8.parse(value);
	        var encoded = CryptoJS.enc.Base64.stringify(wordArray);
	        return encoded.replace(/\+/g, '-').replace(/\//g, '_').replace(/\=/g, '');
	    }
	};
	
	// $lab:coverage:off$
	/* eslint-disable */
	
	// Based on: Crypto-JS v3.1.2
	// Copyright (c) 2009-2013, Jeff Mott. All rights reserved.
	// http://code.google.com/p/crypto-js/
	// http://code.google.com/p/crypto-js/wiki/License
	
	var CryptoJS = CryptoJS || function (h, r) {
	    var k = {},
	        l = k.lib = {},
	        n = function n() {},
	        f = l.Base = { extend: function extend(a) {
	            n.prototype = this;var b = new n();a && b.mixIn(a);b.hasOwnProperty("init") || (b.init = function () {
	                b.$super.init.apply(this, arguments);
	            });b.init.prototype = b;b.$super = this;return b;
	        }, create: function create() {
	            var a = this.extend();a.init.apply(a, arguments);return a;
	        }, init: function init() {}, mixIn: function mixIn(a) {
	            for (var b in a) {
	                a.hasOwnProperty(b) && (this[b] = a[b]);
	            }a.hasOwnProperty("toString") && (this.toString = a.toString);
	        }, clone: function clone() {
	            return this.init.prototype.extend(this);
	        } },
	        j = l.WordArray = f.extend({ init: function init(a, b) {
	            a = this.words = a || [];this.sigBytes = b != r ? b : 4 * a.length;
	        }, toString: function toString(a) {
	            return (a || s).stringify(this);
	        }, concat: function concat(a) {
	            var b = this.words,
	                d = a.words,
	                c = this.sigBytes;a = a.sigBytes;this.clamp();if (c % 4) for (var e = 0; e < a; e++) {
	                b[c + e >>> 2] |= (d[e >>> 2] >>> 24 - 8 * (e % 4) & 255) << 24 - 8 * ((c + e) % 4);
	            } else if (65535 < d.length) for (e = 0; e < a; e += 4) {
	                b[c + e >>> 2] = d[e >>> 2];
	            } else b.push.apply(b, d);this.sigBytes += a;return this;
	        }, clamp: function clamp() {
	            var a = this.words,
	                b = this.sigBytes;a[b >>> 2] &= 4294967295 << 32 - 8 * (b % 4);a.length = h.ceil(b / 4);
	        }, clone: function clone() {
	            var a = f.clone.call(this);a.words = this.words.slice(0);return a;
	        }, random: function random(a) {
	            for (var b = [], d = 0; d < a; d += 4) {
	                b.push(4294967296 * h.random() | 0);
	            }return new j.init(b, a);
	        } }),
	        m = k.enc = {},
	        s = m.Hex = { stringify: function stringify(a) {
	            var b = a.words;a = a.sigBytes;for (var d = [], c = 0; c < a; c++) {
	                var e = b[c >>> 2] >>> 24 - 8 * (c % 4) & 255;d.push((e >>> 4).toString(16));d.push((e & 15).toString(16));
	            }return d.join("");
	        }, parse: function parse(a) {
	            for (var b = a.length, d = [], c = 0; c < b; c += 2) {
	                d[c >>> 3] |= parseInt(a.substr(c, 2), 16) << 24 - 4 * (c % 8);
	            }return new j.init(d, b / 2);
	        } },
	        p = m.Latin1 = { stringify: function stringify(a) {
	            var b = a.words;a = a.sigBytes;for (var d = [], c = 0; c < a; c++) {
	                d.push(String.fromCharCode(b[c >>> 2] >>> 24 - 8 * (c % 4) & 255));
	            }return d.join("");
	        }, parse: function parse(a) {
	            for (var b = a.length, d = [], c = 0; c < b; c++) {
	                d[c >>> 2] |= (a.charCodeAt(c) & 255) << 24 - 8 * (c % 4);
	            }return new j.init(d, b);
	        } },
	        t = m.Utf8 = { stringify: function stringify(a) {
	            try {
	                return decodeURIComponent(escape(p.stringify(a)));
	            } catch (b) {
	                throw Error("Malformed UTF-8 data");
	            }
	        }, parse: function parse(a) {
	            return p.parse(unescape(encodeURIComponent(a)));
	        } },
	        q = l.BufferedBlockAlgorithm = f.extend({ reset: function reset() {
	            this._data = new j.init();this._nDataBytes = 0;
	        }, _append: function _append(a) {
	            "string" == typeof a && (a = t.parse(a));this._data.concat(a);this._nDataBytes += a.sigBytes;
	        }, _process: function _process(a) {
	            var b = this._data,
	                d = b.words,
	                c = b.sigBytes,
	                e = this.blockSize,
	                f = c / (4 * e),
	                f = a ? h.ceil(f) : h.max((f | 0) - this._minBufferSize, 0);a = f * e;c = h.min(4 * a, c);if (a) {
	                for (var g = 0; g < a; g += e) {
	                    this._doProcessBlock(d, g);
	                }g = d.splice(0, a);b.sigBytes -= c;
	            }return new j.init(g, c);
	        }, clone: function clone() {
	            var a = f.clone.call(this);a._data = this._data.clone();return a;
	        }, _minBufferSize: 0 });l.Hasher = q.extend({ cfg: f.extend(), init: function init(a) {
	            this.cfg = this.cfg.extend(a);this.reset();
	        }, reset: function reset() {
	            q.reset.call(this);this._doReset();
	        }, update: function update(a) {
	            this._append(a);this._process();return this;
	        }, finalize: function finalize(a) {
	            a && this._append(a);return this._doFinalize();
	        }, blockSize: 16, _createHelper: function _createHelper(a) {
	            return function (b, d) {
	                return new a.init(d).finalize(b);
	            };
	        }, _createHmacHelper: function _createHmacHelper(a) {
	            return function (b, d) {
	                return new u.HMAC.init(a, d).finalize(b);
	            };
	        } });var u = k.algo = {};return k;
	}(Math);
	(function () {
	    var k = CryptoJS,
	        b = k.lib,
	        m = b.WordArray,
	        l = b.Hasher,
	        d = [],
	        b = k.algo.SHA1 = l.extend({ _doReset: function _doReset() {
	            this._hash = new m.init([1732584193, 4023233417, 2562383102, 271733878, 3285377520]);
	        }, _doProcessBlock: function _doProcessBlock(n, p) {
	            for (var a = this._hash.words, e = a[0], f = a[1], h = a[2], j = a[3], b = a[4], c = 0; 80 > c; c++) {
	                if (16 > c) d[c] = n[p + c] | 0;else {
	                    var g = d[c - 3] ^ d[c - 8] ^ d[c - 14] ^ d[c - 16];d[c] = g << 1 | g >>> 31;
	                }g = (e << 5 | e >>> 27) + b + d[c];g = 20 > c ? g + ((f & h | ~f & j) + 1518500249) : 40 > c ? g + ((f ^ h ^ j) + 1859775393) : 60 > c ? g + ((f & h | f & j | h & j) - 1894007588) : g + ((f ^ h ^ j) - 899497514);b = j;j = h;h = f << 30 | f >>> 2;f = e;e = g;
	            }a[0] = a[0] + e | 0;a[1] = a[1] + f | 0;a[2] = a[2] + h | 0;a[3] = a[3] + j | 0;a[4] = a[4] + b | 0;
	        }, _doFinalize: function _doFinalize() {
	            var b = this._data,
	                d = b.words,
	                a = 8 * this._nDataBytes,
	                e = 8 * b.sigBytes;d[e >>> 5] |= 128 << 24 - e % 32;d[(e + 64 >>> 9 << 4) + 14] = Math.floor(a / 4294967296);d[(e + 64 >>> 9 << 4) + 15] = a;b.sigBytes = 4 * d.length;this._process();return this._hash;
	        }, clone: function clone() {
	            var b = l.clone.call(this);b._hash = this._hash.clone();return b;
	        } });k.SHA1 = l._createHelper(b);k.HmacSHA1 = l._createHmacHelper(b);
	})();
	(function (k) {
	    for (var g = CryptoJS, h = g.lib, v = h.WordArray, j = h.Hasher, h = g.algo, s = [], t = [], u = function u(q) {
	        return 4294967296 * (q - (q | 0)) | 0;
	    }, l = 2, b = 0; 64 > b;) {
	        var d;a: {
	            d = l;for (var w = k.sqrt(d), r = 2; r <= w; r++) {
	                if (!(d % r)) {
	                    d = !1;break a;
	                }
	            }d = !0;
	        }d && (8 > b && (s[b] = u(k.pow(l, 0.5))), t[b] = u(k.pow(l, 1 / 3)), b++);l++;
	    }var n = [],
	        h = h.SHA256 = j.extend({ _doReset: function _doReset() {
	            this._hash = new v.init(s.slice(0));
	        }, _doProcessBlock: function _doProcessBlock(q, h) {
	            for (var a = this._hash.words, c = a[0], d = a[1], b = a[2], k = a[3], f = a[4], g = a[5], j = a[6], l = a[7], e = 0; 64 > e; e++) {
	                if (16 > e) n[e] = q[h + e] | 0;else {
	                    var m = n[e - 15],
	                        p = n[e - 2];n[e] = ((m << 25 | m >>> 7) ^ (m << 14 | m >>> 18) ^ m >>> 3) + n[e - 7] + ((p << 15 | p >>> 17) ^ (p << 13 | p >>> 19) ^ p >>> 10) + n[e - 16];
	                }m = l + ((f << 26 | f >>> 6) ^ (f << 21 | f >>> 11) ^ (f << 7 | f >>> 25)) + (f & g ^ ~f & j) + t[e] + n[e];p = ((c << 30 | c >>> 2) ^ (c << 19 | c >>> 13) ^ (c << 10 | c >>> 22)) + (c & d ^ c & b ^ d & b);l = j;j = g;g = f;f = k + m | 0;k = b;b = d;d = c;c = m + p | 0;
	            }a[0] = a[0] + c | 0;a[1] = a[1] + d | 0;a[2] = a[2] + b | 0;a[3] = a[3] + k | 0;a[4] = a[4] + f | 0;a[5] = a[5] + g | 0;a[6] = a[6] + j | 0;a[7] = a[7] + l | 0;
	        }, _doFinalize: function _doFinalize() {
	            var d = this._data,
	                b = d.words,
	                a = 8 * this._nDataBytes,
	                c = 8 * d.sigBytes;b[c >>> 5] |= 128 << 24 - c % 32;b[(c + 64 >>> 9 << 4) + 14] = k.floor(a / 4294967296);b[(c + 64 >>> 9 << 4) + 15] = a;d.sigBytes = 4 * b.length;this._process();return this._hash;
	        }, clone: function clone() {
	            var b = j.clone.call(this);b._hash = this._hash.clone();return b;
	        } });g.SHA256 = j._createHelper(h);g.HmacSHA256 = j._createHmacHelper(h);
	})(Math);
	(function () {
	    var c = CryptoJS,
	        k = c.enc.Utf8;c.algo.HMAC = c.lib.Base.extend({ init: function init(a, b) {
	            a = this._hasher = new a.init();"string" == typeof b && (b = k.parse(b));var c = a.blockSize,
	                e = 4 * c;b.sigBytes > e && (b = a.finalize(b));b.clamp();for (var f = this._oKey = b.clone(), g = this._iKey = b.clone(), h = f.words, j = g.words, d = 0; d < c; d++) {
	                h[d] ^= 1549556828, j[d] ^= 909522486;
	            }f.sigBytes = g.sigBytes = e;this.reset();
	        }, reset: function reset() {
	            var a = this._hasher;a.reset();a.update(this._iKey);
	        }, update: function update(a) {
	            this._hasher.update(a);return this;
	        }, finalize: function finalize(a) {
	            var b = this._hasher;a = b.finalize(a);b.reset();return b.finalize(this._oKey.clone().concat(a));
	        } });
	})();
	(function () {
	    var h = CryptoJS,
	        j = h.lib.WordArray;h.enc.Base64 = { stringify: function stringify(b) {
	            var e = b.words,
	                f = b.sigBytes,
	                c = this._map;b.clamp();b = [];for (var a = 0; a < f; a += 3) {
	                for (var d = (e[a >>> 2] >>> 24 - 8 * (a % 4) & 255) << 16 | (e[a + 1 >>> 2] >>> 24 - 8 * ((a + 1) % 4) & 255) << 8 | e[a + 2 >>> 2] >>> 24 - 8 * ((a + 2) % 4) & 255, g = 0; 4 > g && a + 0.75 * g < f; g++) {
	                    b.push(c.charAt(d >>> 6 * (3 - g) & 63));
	                }
	            }if (e = c.charAt(64)) for (; b.length % 4;) {
	                b.push(e);
	            }return b.join("");
	        }, parse: function parse(b) {
	            var e = b.length,
	                f = this._map,
	                c = f.charAt(64);c && (c = b.indexOf(c), -1 != c && (e = c));for (var c = [], a = 0, d = 0; d < e; d++) {
	                if (d % 4) {
	                    var g = f.indexOf(b.charAt(d - 1)) << 2 * (d % 4),
	                        h = f.indexOf(b.charAt(d)) >>> 6 - 2 * (d % 4);c[a >>> 2] |= (g | h) << 24 - 8 * (a % 4);a++;
	                }
	            }return j.create(c, a);
	        }, _map: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=" };
	})();
	
	hawk.crypto.internals = CryptoJS;
	
	// Export if used as a module
	
	if (typeof module !== 'undefined' && module.exports) {
	    module.exports = hawk;
	}
	
	/* eslint-enable */
	// $lab:coverage:on$

/***/ }),
/* 473 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	/*!
	 *  Copyright 2010 LearnBoost <dev@learnboost.com>
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *     http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	
	/**
	 * Module dependencies.
	 */
	
	var crypto = __webpack_require__(392),
	    parse = __webpack_require__(275).parse;
	
	/**
	 * Valid keys.
	 */
	
	var keys = ['acl', 'location', 'logging', 'notification', 'partNumber', 'policy', 'requestPayment', 'torrent', 'uploadId', 'uploads', 'versionId', 'versioning', 'versions', 'website'];
	
	/**
	 * Return an "Authorization" header value with the given `options`
	 * in the form of "AWS <key>:<signature>"
	 *
	 * @param {Object} options
	 * @return {String}
	 * @api private
	 */
	
	function authorization(options) {
	  return 'AWS ' + options.key + ':' + sign(options);
	}
	
	module.exports = authorization;
	module.exports.authorization = authorization;
	
	/**
	 * Simple HMAC-SHA1 Wrapper
	 *
	 * @param {Object} options
	 * @return {String}
	 * @api private
	 */
	
	function hmacSha1(options) {
	  return crypto.createHmac('sha1', options.secret).update(options.message).digest('base64');
	}
	
	module.exports.hmacSha1 = hmacSha1;
	
	/**
	 * Create a base64 sha1 HMAC for `options`. 
	 * 
	 * @param {Object} options
	 * @return {String}
	 * @api private
	 */
	
	function sign(options) {
	  options.message = stringToSign(options);
	  return hmacSha1(options);
	}
	module.exports.sign = sign;
	
	/**
	 * Create a base64 sha1 HMAC for `options`. 
	 *
	 * Specifically to be used with S3 presigned URLs
	 * 
	 * @param {Object} options
	 * @return {String}
	 * @api private
	 */
	
	function signQuery(options) {
	  options.message = queryStringToSign(options);
	  return hmacSha1(options);
	}
	module.exports.signQuery = signQuery;
	
	/**
	 * Return a string for sign() with the given `options`.
	 *
	 * Spec:
	 * 
	 *    <verb>\n
	 *    <md5>\n
	 *    <content-type>\n
	 *    <date>\n
	 *    [headers\n]
	 *    <resource>
	 *
	 * @param {Object} options
	 * @return {String}
	 * @api private
	 */
	
	function stringToSign(options) {
	  var headers = options.amazonHeaders || '';
	  if (headers) headers += '\n';
	  var r = [options.verb, options.md5, options.contentType, options.date ? options.date.toUTCString() : '', headers + options.resource];
	  return r.join('\n');
	}
	module.exports.queryStringToSign = stringToSign;
	
	/**
	 * Return a string for sign() with the given `options`, but is meant exclusively
	 * for S3 presigned URLs
	 *
	 * Spec:
	 * 
	 *    <date>\n
	 *    <resource>
	 *
	 * @param {Object} options
	 * @return {String}
	 * @api private
	 */
	
	function queryStringToSign(options) {
	  return 'GET\n\n\n' + options.date + '\n' + options.resource;
	}
	module.exports.queryStringToSign = queryStringToSign;
	
	/**
	 * Perform the following:
	 *
	 *  - ignore non-amazon headers
	 *  - lowercase fields
	 *  - sort lexicographically
	 *  - trim whitespace between ":"
	 *  - join with newline
	 *
	 * @param {Object} headers
	 * @return {String}
	 * @api private
	 */
	
	function canonicalizeHeaders(headers) {
	  var buf = [],
	      fields = Object.keys(headers);
	  for (var i = 0, len = fields.length; i < len; ++i) {
	    var field = fields[i],
	        val = headers[field],
	        field = field.toLowerCase();
	    if (0 !== field.indexOf('x-amz')) continue;
	    buf.push(field + ':' + val);
	  }
	  return buf.sort().join('\n');
	}
	module.exports.canonicalizeHeaders = canonicalizeHeaders;
	
	/**
	 * Perform the following:
	 *
	 *  - ignore non sub-resources
	 *  - sort lexicographically
	 *
	 * @param {String} resource
	 * @return {String}
	 * @api private
	 */
	
	function canonicalizeResource(resource) {
	  var url = parse(resource, true),
	      path = url.pathname,
	      buf = [];
	
	  Object.keys(url.query).forEach(function (key) {
	    if (!~keys.indexOf(key)) return;
	    var val = '' == url.query[key] ? '' : '=' + encodeURIComponent(url.query[key]);
	    buf.push(key + val);
	  });
	
	  return path + (buf.length ? '?' + buf.sort().join('&') : '');
	}
	module.exports.canonicalizeResource = canonicalizeResource;

/***/ }),
/* 474 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer, process) {'use strict';
	
	var aws4 = exports,
	    url = __webpack_require__(275),
	    querystring = __webpack_require__(279),
	    crypto = __webpack_require__(392),
	    lru = __webpack_require__(475),
	    credentialsCache = lru(1000);
	
	// http://docs.amazonwebservices.com/general/latest/gr/signature-version-4.html
	
	function hmac(key, string, encoding) {
	  return crypto.createHmac('sha256', key).update(string, 'utf8').digest(encoding);
	}
	
	function hash(string, encoding) {
	  return crypto.createHash('sha256').update(string, 'utf8').digest(encoding);
	}
	
	// This function assumes the string has already been percent encoded
	function encodeRfc3986(urlEncodedString) {
	  return urlEncodedString.replace(/[!'()*]/g, function (c) {
	    return '%' + c.charCodeAt(0).toString(16).toUpperCase();
	  });
	}
	
	// request: { path | body, [host], [method], [headers], [service], [region] }
	// credentials: { accessKeyId, secretAccessKey, [sessionToken] }
	function RequestSigner(request, credentials) {
	
	  if (typeof request === 'string') request = url.parse(request);
	
	  var headers = request.headers = request.headers || {},
	      hostParts = this.matchHost(request.hostname || request.host || headers.Host || headers.host);
	
	  this.request = request;
	  this.credentials = credentials || this.defaultCredentials();
	
	  this.service = request.service || hostParts[0] || '';
	  this.region = request.region || hostParts[1] || 'us-east-1';
	
	  // SES uses a different domain from the service name
	  if (this.service === 'email') this.service = 'ses';
	
	  if (!request.method && request.body) request.method = 'POST';
	
	  if (!headers.Host && !headers.host) {
	    headers.Host = request.hostname || request.host || this.createHost();
	
	    // If a port is specified explicitly, use it as is
	    if (request.port) headers.Host += ':' + request.port;
	  }
	  if (!request.hostname && !request.host) request.hostname = headers.Host || headers.host;
	
	  this.isCodeCommitGit = this.service === 'codecommit' && request.method === 'GIT';
	}
	
	RequestSigner.prototype.matchHost = function (host) {
	  var match = (host || '').match(/([^\.]+)\.(?:([^\.]*)\.)?amazonaws\.com$/);
	  var hostParts = (match || []).slice(1, 3);
	
	  // ES's hostParts are sometimes the other way round, if the value that is expected
	  // to be region equals ‘es’ switch them back
	  // e.g. search-cluster-name-aaaa00aaaa0aaa0aaaaaaa0aaa.us-east-1.es.amazonaws.com
	  if (hostParts[1] === 'es') hostParts = hostParts.reverse();
	
	  return hostParts;
	};
	
	// http://docs.aws.amazon.com/general/latest/gr/rande.html
	RequestSigner.prototype.isSingleRegion = function () {
	  // Special case for S3 and SimpleDB in us-east-1
	  if (['s3', 'sdb'].indexOf(this.service) >= 0 && this.region === 'us-east-1') return true;
	
	  return ['cloudfront', 'ls', 'route53', 'iam', 'importexport', 'sts'].indexOf(this.service) >= 0;
	};
	
	RequestSigner.prototype.createHost = function () {
	  var region = this.isSingleRegion() ? '' : (this.service === 's3' && this.region !== 'us-east-1' ? '-' : '.') + this.region,
	      service = this.service === 'ses' ? 'email' : this.service;
	  return service + region + '.amazonaws.com';
	};
	
	RequestSigner.prototype.prepareRequest = function () {
	  this.parsePath();
	
	  var request = this.request,
	      headers = request.headers,
	      query;
	
	  if (request.signQuery) {
	
	    this.parsedPath.query = query = this.parsedPath.query || {};
	
	    if (this.credentials.sessionToken) query['X-Amz-Security-Token'] = this.credentials.sessionToken;
	
	    if (this.service === 's3' && !query['X-Amz-Expires']) query['X-Amz-Expires'] = 86400;
	
	    if (query['X-Amz-Date']) this.datetime = query['X-Amz-Date'];else query['X-Amz-Date'] = this.getDateTime();
	
	    query['X-Amz-Algorithm'] = 'AWS4-HMAC-SHA256';
	    query['X-Amz-Credential'] = this.credentials.accessKeyId + '/' + this.credentialString();
	    query['X-Amz-SignedHeaders'] = this.signedHeaders();
	  } else {
	
	    if (!request.doNotModifyHeaders && !this.isCodeCommitGit) {
	      if (request.body && !headers['Content-Type'] && !headers['content-type']) headers['Content-Type'] = 'application/x-www-form-urlencoded; charset=utf-8';
	
	      if (request.body && !headers['Content-Length'] && !headers['content-length']) headers['Content-Length'] = Buffer.byteLength(request.body);
	
	      if (this.credentials.sessionToken && !headers['X-Amz-Security-Token'] && !headers['x-amz-security-token']) headers['X-Amz-Security-Token'] = this.credentials.sessionToken;
	
	      if (this.service === 's3' && !headers['X-Amz-Content-Sha256'] && !headers['x-amz-content-sha256']) headers['X-Amz-Content-Sha256'] = hash(this.request.body || '', 'hex');
	
	      if (headers['X-Amz-Date'] || headers['x-amz-date']) this.datetime = headers['X-Amz-Date'] || headers['x-amz-date'];else headers['X-Amz-Date'] = this.getDateTime();
	    }
	
	    delete headers.Authorization;
	    delete headers.authorization;
	  }
	};
	
	RequestSigner.prototype.sign = function () {
	  if (!this.parsedPath) this.prepareRequest();
	
	  if (this.request.signQuery) {
	    this.parsedPath.query['X-Amz-Signature'] = this.signature();
	  } else {
	    this.request.headers.Authorization = this.authHeader();
	  }
	
	  this.request.path = this.formatPath();
	
	  return this.request;
	};
	
	RequestSigner.prototype.getDateTime = function () {
	  if (!this.datetime) {
	    var headers = this.request.headers,
	        date = new Date(headers.Date || headers.date || new Date());
	
	    this.datetime = date.toISOString().replace(/[:\-]|\.\d{3}/g, '');
	
	    // Remove the trailing 'Z' on the timestamp string for CodeCommit git access
	    if (this.isCodeCommitGit) this.datetime = this.datetime.slice(0, -1);
	  }
	  return this.datetime;
	};
	
	RequestSigner.prototype.getDate = function () {
	  return this.getDateTime().substr(0, 8);
	};
	
	RequestSigner.prototype.authHeader = function () {
	  return ['AWS4-HMAC-SHA256 Credential=' + this.credentials.accessKeyId + '/' + this.credentialString(), 'SignedHeaders=' + this.signedHeaders(), 'Signature=' + this.signature()].join(', ');
	};
	
	RequestSigner.prototype.signature = function () {
	  var date = this.getDate(),
	      cacheKey = [this.credentials.secretAccessKey, date, this.region, this.service].join(),
	      kDate,
	      kRegion,
	      kService,
	      kCredentials = credentialsCache.get(cacheKey);
	  if (!kCredentials) {
	    kDate = hmac('AWS4' + this.credentials.secretAccessKey, date);
	    kRegion = hmac(kDate, this.region);
	    kService = hmac(kRegion, this.service);
	    kCredentials = hmac(kService, 'aws4_request');
	    credentialsCache.set(cacheKey, kCredentials);
	  }
	  return hmac(kCredentials, this.stringToSign(), 'hex');
	};
	
	RequestSigner.prototype.stringToSign = function () {
	  return ['AWS4-HMAC-SHA256', this.getDateTime(), this.credentialString(), hash(this.canonicalString(), 'hex')].join('\n');
	};
	
	RequestSigner.prototype.canonicalString = function () {
	  if (!this.parsedPath) this.prepareRequest();
	
	  var pathStr = this.parsedPath.path,
	      query = this.parsedPath.query,
	      headers = this.request.headers,
	      queryStr = '',
	      normalizePath = this.service !== 's3',
	      decodePath = this.service === 's3' || this.request.doNotEncodePath,
	      decodeSlashesInPath = this.service === 's3',
	      firstValOnly = this.service === 's3',
	      bodyHash;
	
	  if (this.service === 's3' && this.request.signQuery) {
	    bodyHash = 'UNSIGNED-PAYLOAD';
	  } else if (this.isCodeCommitGit) {
	    bodyHash = '';
	  } else {
	    bodyHash = headers['X-Amz-Content-Sha256'] || headers['x-amz-content-sha256'] || hash(this.request.body || '', 'hex');
	  }
	
	  if (query) {
	    queryStr = encodeRfc3986(querystring.stringify(Object.keys(query).sort().reduce(function (obj, key) {
	      if (!key) return obj;
	      obj[key] = !Array.isArray(query[key]) ? query[key] : firstValOnly ? query[key][0] : query[key].slice().sort();
	      return obj;
	    }, {})));
	  }
	  if (pathStr !== '/') {
	    if (normalizePath) pathStr = pathStr.replace(/\/{2,}/g, '/');
	    pathStr = pathStr.split('/').reduce(function (path, piece) {
	      if (normalizePath && piece === '..') {
	        path.pop();
	      } else if (!normalizePath || piece !== '.') {
	        if (decodePath) piece = querystring.unescape(piece);
	        path.push(encodeRfc3986(querystring.escape(piece)));
	      }
	      return path;
	    }, []).join('/');
	    if (pathStr[0] !== '/') pathStr = '/' + pathStr;
	    if (decodeSlashesInPath) pathStr = pathStr.replace(/%2F/g, '/');
	  }
	
	  return [this.request.method || 'GET', pathStr, queryStr, this.canonicalHeaders() + '\n', this.signedHeaders(), bodyHash].join('\n');
	};
	
	RequestSigner.prototype.canonicalHeaders = function () {
	  var headers = this.request.headers;
	  function trimAll(header) {
	    return header.toString().trim().replace(/\s+/g, ' ');
	  }
	  return Object.keys(headers).sort(function (a, b) {
	    return a.toLowerCase() < b.toLowerCase() ? -1 : 1;
	  }).map(function (key) {
	    return key.toLowerCase() + ':' + trimAll(headers[key]);
	  }).join('\n');
	};
	
	RequestSigner.prototype.signedHeaders = function () {
	  return Object.keys(this.request.headers).map(function (key) {
	    return key.toLowerCase();
	  }).sort().join(';');
	};
	
	RequestSigner.prototype.credentialString = function () {
	  return [this.getDate(), this.region, this.service, 'aws4_request'].join('/');
	};
	
	RequestSigner.prototype.defaultCredentials = function () {
	  var env = process.env;
	  return {
	    accessKeyId: env.AWS_ACCESS_KEY_ID || env.AWS_ACCESS_KEY,
	    secretAccessKey: env.AWS_SECRET_ACCESS_KEY || env.AWS_SECRET_KEY,
	    sessionToken: env.AWS_SESSION_TOKEN
	  };
	};
	
	RequestSigner.prototype.parsePath = function () {
	  var path = this.request.path || '/',
	      queryIx = path.indexOf('?'),
	      query = null;
	
	  if (queryIx >= 0) {
	    query = querystring.parse(path.slice(queryIx + 1));
	    path = path.slice(0, queryIx);
	  }
	
	  // S3 doesn't always encode characters > 127 correctly and
	  // all services don't encode characters > 255 correctly
	  // So if there are non-reserved chars (and it's not already all % encoded), just encode them all
	  if (/[^0-9A-Za-z!'()*\-._~%/]/.test(path)) {
	    path = path.split('/').map(function (piece) {
	      return querystring.escape(querystring.unescape(piece));
	    }).join('/');
	  }
	
	  this.parsedPath = {
	    path: path,
	    query: query
	  };
	};
	
	RequestSigner.prototype.formatPath = function () {
	  var path = this.parsedPath.path,
	      query = this.parsedPath.query;
	
	  if (!query) return path;
	
	  // Services don't support empty query string keys
	  if (query[''] != null) delete query[''];
	
	  return path + '?' + encodeRfc3986(querystring.stringify(query));
	};
	
	aws4.RequestSigner = RequestSigner;
	
	aws4.sign = function (request, credentials) {
	  return new RequestSigner(request, credentials).sign();
	};
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(290).Buffer, __webpack_require__(3)))

/***/ }),
/* 475 */
/***/ (function(module, exports) {

	"use strict";
	
	module.exports = function (size) {
	  return new LruCache(size);
	};
	
	function LruCache(size) {
	  this.capacity = size | 0;
	  this.map = Object.create(null);
	  this.list = new DoublyLinkedList();
	}
	
	LruCache.prototype.get = function (key) {
	  var node = this.map[key];
	  if (node == null) return undefined;
	  this.used(node);
	  return node.val;
	};
	
	LruCache.prototype.set = function (key, val) {
	  var node = this.map[key];
	  if (node != null) {
	    node.val = val;
	  } else {
	    if (!this.capacity) this.prune();
	    if (!this.capacity) return false;
	    node = new DoublyLinkedNode(key, val);
	    this.map[key] = node;
	    this.capacity--;
	  }
	  this.used(node);
	  return true;
	};
	
	LruCache.prototype.used = function (node) {
	  this.list.moveToFront(node);
	};
	
	LruCache.prototype.prune = function () {
	  var node = this.list.pop();
	  if (node != null) {
	    delete this.map[node.key];
	    this.capacity++;
	  }
	};
	
	function DoublyLinkedList() {
	  this.firstNode = null;
	  this.lastNode = null;
	}
	
	DoublyLinkedList.prototype.moveToFront = function (node) {
	  if (this.firstNode == node) return;
	
	  this.remove(node);
	
	  if (this.firstNode == null) {
	    this.firstNode = node;
	    this.lastNode = node;
	    node.prev = null;
	    node.next = null;
	  } else {
	    node.prev = null;
	    node.next = this.firstNode;
	    node.next.prev = node;
	    this.firstNode = node;
	  }
	};
	
	DoublyLinkedList.prototype.pop = function () {
	  var lastNode = this.lastNode;
	  if (lastNode != null) {
	    this.remove(lastNode);
	  }
	  return lastNode;
	};
	
	DoublyLinkedList.prototype.remove = function (node) {
	  if (this.firstNode == node) {
	    this.firstNode = node.next;
	  } else if (node.prev != null) {
	    node.prev.next = node.next;
	  }
	  if (this.lastNode == node) {
	    this.lastNode = node.prev;
	  } else if (node.next != null) {
	    node.next.prev = node.prev;
	  }
	};
	
	function DoublyLinkedNode(key, val) {
	  this.key = key;
	  this.val = val;
	  this.prev = null;
	  this.next = null;
	}

/***/ }),
/* 476 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	// Copyright 2015 Joyent, Inc.
	
	var parser = __webpack_require__(477);
	var signer = __webpack_require__(523);
	var verify = __webpack_require__(529);
	var utils = __webpack_require__(479);
	
	///--- API
	
	module.exports = {
	
	  parse: parser.parseRequest,
	  parseRequest: parser.parseRequest,
	
	  sign: signer.signRequest,
	  signRequest: signer.signRequest,
	  createSigner: signer.createSigner,
	  isSigner: signer.isSigner,
	
	  sshKeyToPEM: utils.sshKeyToPEM,
	  sshKeyFingerprint: utils.fingerprint,
	  pemToRsaSSHKey: utils.pemToRsaSSHKey,
	
	  verify: verify.verifySignature,
	  verifySignature: verify.verifySignature,
	  verifyHMAC: verify.verifyHMAC
	};

/***/ }),
/* 477 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	// Copyright 2012 Joyent, Inc.  All rights reserved.
	
	var assert = __webpack_require__(478);
	var util = __webpack_require__(271);
	var utils = __webpack_require__(479);
	
	///--- Globals
	
	var HASH_ALGOS = utils.HASH_ALGOS;
	var PK_ALGOS = utils.PK_ALGOS;
	var HttpSignatureError = utils.HttpSignatureError;
	var InvalidAlgorithmError = utils.InvalidAlgorithmError;
	var validateAlgorithm = utils.validateAlgorithm;
	
	var State = {
	  New: 0,
	  Params: 1
	};
	
	var ParamsState = {
	  Name: 0,
	  Quote: 1,
	  Value: 2,
	  Comma: 3
	};
	
	///--- Specific Errors
	
	
	function ExpiredRequestError(message) {
	  HttpSignatureError.call(this, message, ExpiredRequestError);
	}
	util.inherits(ExpiredRequestError, HttpSignatureError);
	
	function InvalidHeaderError(message) {
	  HttpSignatureError.call(this, message, InvalidHeaderError);
	}
	util.inherits(InvalidHeaderError, HttpSignatureError);
	
	function InvalidParamsError(message) {
	  HttpSignatureError.call(this, message, InvalidParamsError);
	}
	util.inherits(InvalidParamsError, HttpSignatureError);
	
	function MissingHeaderError(message) {
	  HttpSignatureError.call(this, message, MissingHeaderError);
	}
	util.inherits(MissingHeaderError, HttpSignatureError);
	
	function StrictParsingError(message) {
	  HttpSignatureError.call(this, message, StrictParsingError);
	}
	util.inherits(StrictParsingError, HttpSignatureError);
	
	///--- Exported API
	
	module.exports = {
	
	  /**
	   * Parses the 'Authorization' header out of an http.ServerRequest object.
	   *
	   * Note that this API will fully validate the Authorization header, and throw
	   * on any error.  It will not however check the signature, or the keyId format
	   * as those are specific to your environment.  You can use the options object
	   * to pass in extra constraints.
	   *
	   * As a response object you can expect this:
	   *
	   *     {
	   *       "scheme": "Signature",
	   *       "params": {
	   *         "keyId": "foo",
	   *         "algorithm": "rsa-sha256",
	   *         "headers": [
	   *           "date" or "x-date",
	   *           "digest"
	   *         ],
	   *         "signature": "base64"
	   *       },
	   *       "signingString": "ready to be passed to crypto.verify()"
	   *     }
	   *
	   * @param {Object} request an http.ServerRequest.
	   * @param {Object} options an optional options object with:
	   *                   - clockSkew: allowed clock skew in seconds (default 300).
	   *                   - headers: required header names (def: date or x-date)
	   *                   - algorithms: algorithms to support (default: all).
	   *                   - strict: should enforce latest spec parsing
	   *                             (default: false).
	   * @return {Object} parsed out object (see above).
	   * @throws {TypeError} on invalid input.
	   * @throws {InvalidHeaderError} on an invalid Authorization header error.
	   * @throws {InvalidParamsError} if the params in the scheme are invalid.
	   * @throws {MissingHeaderError} if the params indicate a header not present,
	   *                              either in the request headers from the params,
	   *                              or not in the params from a required header
	   *                              in options.
	   * @throws {StrictParsingError} if old attributes are used in strict parsing
	   *                              mode.
	   * @throws {ExpiredRequestError} if the value of date or x-date exceeds skew.
	   */
	  parseRequest: function parseRequest(request, options) {
	    assert.object(request, 'request');
	    assert.object(request.headers, 'request.headers');
	    if (options === undefined) {
	      options = {};
	    }
	    if (options.headers === undefined) {
	      options.headers = [request.headers['x-date'] ? 'x-date' : 'date'];
	    }
	    assert.object(options, 'options');
	    assert.arrayOfString(options.headers, 'options.headers');
	    assert.optionalNumber(options.clockSkew, 'options.clockSkew');
	
	    if (!request.headers.authorization) throw new MissingHeaderError('no authorization header present in ' + 'the request');
	
	    options.clockSkew = options.clockSkew || 300;
	
	    var i = 0;
	    var state = State.New;
	    var substate = ParamsState.Name;
	    var tmpName = '';
	    var tmpValue = '';
	
	    var parsed = {
	      scheme: '',
	      params: {},
	      signingString: '',
	
	      get algorithm() {
	        return this.params.algorithm.toUpperCase();
	      },
	
	      get keyId() {
	        return this.params.keyId;
	      }
	    };
	
	    var authz = request.headers.authorization;
	    for (i = 0; i < authz.length; i++) {
	      var c = authz.charAt(i);
	
	      switch (Number(state)) {
	
	        case State.New:
	          if (c !== ' ') parsed.scheme += c;else state = State.Params;
	          break;
	
	        case State.Params:
	          switch (Number(substate)) {
	
	            case ParamsState.Name:
	              var code = c.charCodeAt(0);
	              // restricted name of A-Z / a-z
	              if (code >= 0x41 && code <= 0x5a || // A-Z
	              code >= 0x61 && code <= 0x7a) {
	                // a-z
	                tmpName += c;
	              } else if (c === '=') {
	                if (tmpName.length === 0) throw new InvalidHeaderError('bad param format');
	                substate = ParamsState.Quote;
	              } else {
	                throw new InvalidHeaderError('bad param format');
	              }
	              break;
	
	            case ParamsState.Quote:
	              if (c === '"') {
	                tmpValue = '';
	                substate = ParamsState.Value;
	              } else {
	                throw new InvalidHeaderError('bad param format');
	              }
	              break;
	
	            case ParamsState.Value:
	              if (c === '"') {
	                parsed.params[tmpName] = tmpValue;
	                substate = ParamsState.Comma;
	              } else {
	                tmpValue += c;
	              }
	              break;
	
	            case ParamsState.Comma:
	              if (c === ',') {
	                tmpName = '';
	                substate = ParamsState.Name;
	              } else {
	                throw new InvalidHeaderError('bad param format');
	              }
	              break;
	
	            default:
	              throw new Error('Invalid substate');
	          }
	          break;
	
	        default:
	          throw new Error('Invalid substate');
	      }
	    }
	
	    if (!parsed.params.headers || parsed.params.headers === '') {
	      if (request.headers['x-date']) {
	        parsed.params.headers = ['x-date'];
	      } else {
	        parsed.params.headers = ['date'];
	      }
	    } else {
	      parsed.params.headers = parsed.params.headers.split(' ');
	    }
	
	    // Minimally validate the parsed object
	    if (!parsed.scheme || parsed.scheme !== 'Signature') throw new InvalidHeaderError('scheme was not "Signature"');
	
	    if (!parsed.params.keyId) throw new InvalidHeaderError('keyId was not specified');
	
	    if (!parsed.params.algorithm) throw new InvalidHeaderError('algorithm was not specified');
	
	    if (!parsed.params.signature) throw new InvalidHeaderError('signature was not specified');
	
	    // Check the algorithm against the official list
	    parsed.params.algorithm = parsed.params.algorithm.toLowerCase();
	    try {
	      validateAlgorithm(parsed.params.algorithm);
	    } catch (e) {
	      if (e instanceof InvalidAlgorithmError) throw new InvalidParamsError(parsed.params.algorithm + ' is not ' + 'supported');else throw e;
	    }
	
	    // Build the signingString
	    for (i = 0; i < parsed.params.headers.length; i++) {
	      var h = parsed.params.headers[i].toLowerCase();
	      parsed.params.headers[i] = h;
	
	      if (h === 'request-line') {
	        if (!options.strict) {
	          /*
	           * We allow headers from the older spec drafts if strict parsing isn't
	           * specified in options.
	           */
	          parsed.signingString += request.method + ' ' + request.url + ' HTTP/' + request.httpVersion;
	        } else {
	          /* Strict parsing doesn't allow older draft headers. */
	          throw new StrictParsingError('request-line is not a valid header ' + 'with strict parsing enabled.');
	        }
	      } else if (h === '(request-target)') {
	        parsed.signingString += '(request-target): ' + request.method.toLowerCase() + ' ' + request.url;
	      } else {
	        var value = request.headers[h];
	        if (value === undefined) throw new MissingHeaderError(h + ' was not in the request');
	        parsed.signingString += h + ': ' + value;
	      }
	
	      if (i + 1 < parsed.params.headers.length) parsed.signingString += '\n';
	    }
	
	    // Check against the constraints
	    var date;
	    if (request.headers.date || request.headers['x-date']) {
	      if (request.headers['x-date']) {
	        date = new Date(request.headers['x-date']);
	      } else {
	        date = new Date(request.headers.date);
	      }
	      var now = new Date();
	      var skew = Math.abs(now.getTime() - date.getTime());
	
	      if (skew > options.clockSkew * 1000) {
	        throw new ExpiredRequestError('clock skew of ' + skew / 1000 + 's was greater than ' + options.clockSkew + 's');
	      }
	    }
	
	    options.headers.forEach(function (hdr) {
	      // Remember that we already checked any headers in the params
	      // were in the request, so if this passes we're good.
	      if (parsed.params.headers.indexOf(hdr) < 0) throw new MissingHeaderError(hdr + ' was not a signed header');
	    });
	
	    if (options.algorithms) {
	      if (options.algorithms.indexOf(parsed.params.algorithm) === -1) throw new InvalidParamsError(parsed.params.algorithm + ' is not a supported algorithm');
	    }
	
	    return parsed;
	  }
	
	};

/***/ }),
/* 478 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer, process) {'use strict';
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
	
	// Copyright (c) 2012, Mark Cavage. All rights reserved.
	// Copyright 2015 Joyent, Inc.
	
	var assert = __webpack_require__(336);
	var Stream = __webpack_require__(282).Stream;
	var util = __webpack_require__(271);
	
	///--- Globals
	
	/* JSSTYLED */
	var UUID_REGEXP = /^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/;
	
	///--- Internal
	
	function _capitalize(str) {
	    return str.charAt(0).toUpperCase() + str.slice(1);
	}
	
	function _toss(name, expected, oper, arg, actual) {
	    throw new assert.AssertionError({
	        message: util.format('%s (%s) is required', name, expected),
	        actual: actual === undefined ? typeof arg === 'undefined' ? 'undefined' : _typeof(arg) : actual(arg),
	        expected: expected,
	        operator: oper || '===',
	        stackStartFunction: _toss.caller
	    });
	}
	
	function _getClass(arg) {
	    return Object.prototype.toString.call(arg).slice(8, -1);
	}
	
	function noop() {}
	// Why even bother with asserts?
	
	
	///--- Exports
	
	var types = {
	    bool: {
	        check: function check(arg) {
	            return typeof arg === 'boolean';
	        }
	    },
	    func: {
	        check: function check(arg) {
	            return typeof arg === 'function';
	        }
	    },
	    string: {
	        check: function check(arg) {
	            return typeof arg === 'string';
	        }
	    },
	    object: {
	        check: function check(arg) {
	            return (typeof arg === 'undefined' ? 'undefined' : _typeof(arg)) === 'object' && arg !== null;
	        }
	    },
	    number: {
	        check: function check(arg) {
	            return typeof arg === 'number' && !isNaN(arg) && isFinite(arg);
	        }
	    },
	    buffer: {
	        check: function check(arg) {
	            return Buffer.isBuffer(arg);
	        },
	        operator: 'Buffer.isBuffer'
	    },
	    array: {
	        check: function check(arg) {
	            return Array.isArray(arg);
	        },
	        operator: 'Array.isArray'
	    },
	    stream: {
	        check: function check(arg) {
	            return arg instanceof Stream;
	        },
	        operator: 'instanceof',
	        actual: _getClass
	    },
	    date: {
	        check: function check(arg) {
	            return arg instanceof Date;
	        },
	        operator: 'instanceof',
	        actual: _getClass
	    },
	    regexp: {
	        check: function check(arg) {
	            return arg instanceof RegExp;
	        },
	        operator: 'instanceof',
	        actual: _getClass
	    },
	    uuid: {
	        check: function check(arg) {
	            return typeof arg === 'string' && UUID_REGEXP.test(arg);
	        },
	        operator: 'isUUID'
	    }
	};
	
	function _setExports(ndebug) {
	    var keys = Object.keys(types);
	    var out;
	
	    /* re-export standard assert */
	    if (process.env.NODE_NDEBUG) {
	        out = noop;
	    } else {
	        out = function out(arg, msg) {
	            if (!arg) {
	                _toss(msg, 'true', arg);
	            }
	        };
	    }
	
	    /* standard checks */
	    keys.forEach(function (k) {
	        if (ndebug) {
	            out[k] = noop;
	            return;
	        }
	        var type = types[k];
	        out[k] = function (arg, msg) {
	            if (!type.check(arg)) {
	                _toss(msg, k, type.operator, arg, type.actual);
	            }
	        };
	    });
	
	    /* optional checks */
	    keys.forEach(function (k) {
	        var name = 'optional' + _capitalize(k);
	        if (ndebug) {
	            out[name] = noop;
	            return;
	        }
	        var type = types[k];
	        out[name] = function (arg, msg) {
	            if (arg === undefined || arg === null) {
	                return;
	            }
	            if (!type.check(arg)) {
	                _toss(msg, k, type.operator, arg, type.actual);
	            }
	        };
	    });
	
	    /* arrayOf checks */
	    keys.forEach(function (k) {
	        var name = 'arrayOf' + _capitalize(k);
	        if (ndebug) {
	            out[name] = noop;
	            return;
	        }
	        var type = types[k];
	        var expected = '[' + k + ']';
	        out[name] = function (arg, msg) {
	            if (!Array.isArray(arg)) {
	                _toss(msg, expected, type.operator, arg, type.actual);
	            }
	            var i;
	            for (i = 0; i < arg.length; i++) {
	                if (!type.check(arg[i])) {
	                    _toss(msg, expected, type.operator, arg, type.actual);
	                }
	            }
	        };
	    });
	
	    /* optionalArrayOf checks */
	    keys.forEach(function (k) {
	        var name = 'optionalArrayOf' + _capitalize(k);
	        if (ndebug) {
	            out[name] = noop;
	            return;
	        }
	        var type = types[k];
	        var expected = '[' + k + ']';
	        out[name] = function (arg, msg) {
	            if (arg === undefined || arg === null) {
	                return;
	            }
	            if (!Array.isArray(arg)) {
	                _toss(msg, expected, type.operator, arg, type.actual);
	            }
	            var i;
	            for (i = 0; i < arg.length; i++) {
	                if (!type.check(arg[i])) {
	                    _toss(msg, expected, type.operator, arg, type.actual);
	                }
	            }
	        };
	    });
	
	    /* re-export built-in assertions */
	    Object.keys(assert).forEach(function (k) {
	        if (k === 'AssertionError') {
	            out[k] = assert[k];
	            return;
	        }
	        if (ndebug) {
	            out[k] = noop;
	            return;
	        }
	        out[k] = assert[k];
	    });
	
	    /* export ourselves (for unit tests _only_) */
	    out._setExports = _setExports;
	
	    return out;
	}
	
	module.exports = _setExports(process.env.NODE_NDEBUG);
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(290).Buffer, __webpack_require__(3)))

/***/ }),
/* 479 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
	
	// Copyright 2012 Joyent, Inc.  All rights reserved.
	
	var assert = __webpack_require__(478);
	var sshpk = __webpack_require__(480);
	var util = __webpack_require__(271);
	
	var HASH_ALGOS = {
	  'sha1': true,
	  'sha256': true,
	  'sha512': true
	};
	
	var PK_ALGOS = {
	  'rsa': true,
	  'dsa': true,
	  'ecdsa': true
	};
	
	function HttpSignatureError(message, caller) {
	  if (Error.captureStackTrace) Error.captureStackTrace(this, caller || HttpSignatureError);
	
	  this.message = message;
	  this.name = caller.name;
	}
	util.inherits(HttpSignatureError, Error);
	
	function InvalidAlgorithmError(message) {
	  HttpSignatureError.call(this, message, InvalidAlgorithmError);
	}
	util.inherits(InvalidAlgorithmError, HttpSignatureError);
	
	function validateAlgorithm(algorithm) {
	  var alg = algorithm.toLowerCase().split('-');
	
	  if (alg.length !== 2) {
	    throw new InvalidAlgorithmError(alg[0].toUpperCase() + ' is not a ' + 'valid algorithm');
	  }
	
	  if (alg[0] !== 'hmac' && !PK_ALGOS[alg[0]]) {
	    throw new InvalidAlgorithmError(alg[0].toUpperCase() + ' type keys ' + 'are not supported');
	  }
	
	  if (!HASH_ALGOS[alg[1]]) {
	    throw new InvalidAlgorithmError(alg[1].toUpperCase() + ' is not a ' + 'supported hash algorithm');
	  }
	
	  return alg;
	}
	
	///--- API
	
	module.exports = {
	
	  HASH_ALGOS: HASH_ALGOS,
	  PK_ALGOS: PK_ALGOS,
	
	  HttpSignatureError: HttpSignatureError,
	  InvalidAlgorithmError: InvalidAlgorithmError,
	
	  validateAlgorithm: validateAlgorithm,
	
	  /**
	   * Converts an OpenSSH public key (rsa only) to a PKCS#8 PEM file.
	   *
	   * The intent of this module is to interoperate with OpenSSL only,
	   * specifically the node crypto module's `verify` method.
	   *
	   * @param {String} key an OpenSSH public key.
	   * @return {String} PEM encoded form of the RSA public key.
	   * @throws {TypeError} on bad input.
	   * @throws {Error} on invalid ssh key formatted data.
	   */
	  sshKeyToPEM: function sshKeyToPEM(key) {
	    assert.string(key, 'ssh_key');
	
	    var k = sshpk.parseKey(key, 'ssh');
	    return k.toString('pem');
	  },
	
	  /**
	   * Generates an OpenSSH fingerprint from an ssh public key.
	   *
	   * @param {String} key an OpenSSH public key.
	   * @return {String} key fingerprint.
	   * @throws {TypeError} on bad input.
	   * @throws {Error} if what you passed doesn't look like an ssh public key.
	   */
	  fingerprint: function fingerprint(key) {
	    assert.string(key, 'ssh_key');
	
	    var k = sshpk.parseKey(key, 'ssh');
	    return k.fingerprint('md5').toString('hex');
	  },
	
	  /**
	   * Converts a PKGCS#8 PEM file to an OpenSSH public key (rsa)
	   *
	   * The reverse of the above function.
	   */
	  pemToRsaSSHKey: function pemToRsaSSHKey(pem, comment) {
	    assert.equal('string', typeof pem === 'undefined' ? 'undefined' : _typeof(pem), 'typeof pem');
	
	    var k = sshpk.parseKey(pem, 'pem');
	    k.comment = comment;
	    return k.toString('ssh');
	  }
	};

/***/ }),
/* 480 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	// Copyright 2015 Joyent, Inc.
	
	var Key = __webpack_require__(481);
	var Fingerprint = __webpack_require__(484);
	var Signature = __webpack_require__(487);
	var PrivateKey = __webpack_require__(489);
	var Certificate = __webpack_require__(486);
	var Identity = __webpack_require__(519);
	var errs = __webpack_require__(485);
	
	module.exports = {
		/* top-level classes */
		Key: Key,
		parseKey: Key.parse,
		Fingerprint: Fingerprint,
		parseFingerprint: Fingerprint.parse,
		Signature: Signature,
		parseSignature: Signature.parse,
		PrivateKey: PrivateKey,
		parsePrivateKey: PrivateKey.parse,
		generatePrivateKey: PrivateKey.generate,
		Certificate: Certificate,
		parseCertificate: Certificate.parse,
		createSelfSignedCertificate: Certificate.createSelfSigned,
		createCertificate: Certificate.create,
		Identity: Identity,
		identityFromDN: Identity.parseDN,
		identityForHost: Identity.forHost,
		identityForUser: Identity.forUser,
		identityForEmail: Identity.forEmail,
	
		/* errors */
		FingerprintFormatError: errs.FingerprintFormatError,
		InvalidAlgorithmError: errs.InvalidAlgorithmError,
		KeyParseError: errs.KeyParseError,
		SignatureParseError: errs.SignatureParseError,
		KeyEncryptedError: errs.KeyEncryptedError,
		CertificateParseError: errs.CertificateParseError
	};

/***/ }),
/* 481 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {'use strict';
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
	
	// Copyright 2017 Joyent, Inc.
	
	module.exports = Key;
	
	var assert = __webpack_require__(482);
	var algs = __webpack_require__(483);
	var crypto = __webpack_require__(392);
	var Fingerprint = __webpack_require__(484);
	var Signature = __webpack_require__(487);
	var DiffieHellman = __webpack_require__(490).DiffieHellman;
	var errs = __webpack_require__(485);
	var utils = __webpack_require__(488);
	var PrivateKey = __webpack_require__(489);
	var edCompat;
	
	try {
		edCompat = __webpack_require__(503);
	} catch (e) {
		/* Just continue through, and bail out if we try to use it. */
	}
	
	var InvalidAlgorithmError = errs.InvalidAlgorithmError;
	var KeyParseError = errs.KeyParseError;
	
	var formats = {};
	formats['auto'] = __webpack_require__(504);
	formats['pem'] = __webpack_require__(505);
	formats['pkcs1'] = __webpack_require__(512);
	formats['pkcs8'] = __webpack_require__(513);
	formats['rfc4253'] = __webpack_require__(515);
	formats['ssh'] = __webpack_require__(518);
	formats['ssh-private'] = __webpack_require__(514);
	formats['openssh'] = formats['ssh-private'];
	
	function Key(opts) {
		assert.object(opts, 'options');
		assert.arrayOfObject(opts.parts, 'options.parts');
		assert.string(opts.type, 'options.type');
		assert.optionalString(opts.comment, 'options.comment');
	
		var algInfo = algs.info[opts.type];
		if ((typeof algInfo === 'undefined' ? 'undefined' : _typeof(algInfo)) !== 'object') throw new InvalidAlgorithmError(opts.type);
	
		var partLookup = {};
		for (var i = 0; i < opts.parts.length; ++i) {
			var part = opts.parts[i];
			partLookup[part.name] = part;
		}
	
		this.type = opts.type;
		this.parts = opts.parts;
		this.part = partLookup;
		this.comment = undefined;
		this.source = opts.source;
	
		/* for speeding up hashing/fingerprint operations */
		this._rfc4253Cache = opts._rfc4253Cache;
		this._hashCache = {};
	
		var sz;
		this.curve = undefined;
		if (this.type === 'ecdsa') {
			var curve = this.part.curve.data.toString();
			this.curve = curve;
			sz = algs.curves[curve].size;
		} else if (this.type === 'ed25519') {
			sz = 256;
			this.curve = 'curve25519';
		} else {
			var szPart = this.part[algInfo.sizePart];
			sz = szPart.data.length;
			sz = sz * 8 - utils.countZeros(szPart.data);
		}
		this.size = sz;
	}
	
	Key.formats = formats;
	
	Key.prototype.toBuffer = function (format, options) {
		if (format === undefined) format = 'ssh';
		assert.string(format, 'format');
		assert.object(formats[format], 'formats[format]');
		assert.optionalObject(options, 'options');
	
		if (format === 'rfc4253') {
			if (this._rfc4253Cache === undefined) this._rfc4253Cache = formats['rfc4253'].write(this);
			return this._rfc4253Cache;
		}
	
		return formats[format].write(this, options);
	};
	
	Key.prototype.toString = function (format, options) {
		return this.toBuffer(format, options).toString();
	};
	
	Key.prototype.hash = function (algo) {
		assert.string(algo, 'algorithm');
		algo = algo.toLowerCase();
		if (algs.hashAlgs[algo] === undefined) throw new InvalidAlgorithmError(algo);
	
		if (this._hashCache[algo]) return this._hashCache[algo];
	
		var hash = crypto.createHash(algo).update(this.toBuffer('rfc4253')).digest();
		this._hashCache[algo] = hash;
		return hash;
	};
	
	Key.prototype.fingerprint = function (algo) {
		if (algo === undefined) algo = 'sha256';
		assert.string(algo, 'algorithm');
		var opts = {
			type: 'key',
			hash: this.hash(algo),
			algorithm: algo
		};
		return new Fingerprint(opts);
	};
	
	Key.prototype.defaultHashAlgorithm = function () {
		var hashAlgo = 'sha1';
		if (this.type === 'rsa') hashAlgo = 'sha256';
		if (this.type === 'dsa' && this.size > 1024) hashAlgo = 'sha256';
		if (this.type === 'ed25519') hashAlgo = 'sha512';
		if (this.type === 'ecdsa') {
			if (this.size <= 256) hashAlgo = 'sha256';else if (this.size <= 384) hashAlgo = 'sha384';else hashAlgo = 'sha512';
		}
		return hashAlgo;
	};
	
	Key.prototype.createVerify = function (hashAlgo) {
		if (hashAlgo === undefined) hashAlgo = this.defaultHashAlgorithm();
		assert.string(hashAlgo, 'hash algorithm');
	
		/* ED25519 is not supported by OpenSSL, use a javascript impl. */
		if (this.type === 'ed25519' && edCompat !== undefined) return new edCompat.Verifier(this, hashAlgo);
		if (this.type === 'curve25519') throw new Error('Curve25519 keys are not suitable for ' + 'signing or verification');
	
		var v, nm, err;
		try {
			nm = hashAlgo.toUpperCase();
			v = crypto.createVerify(nm);
		} catch (e) {
			err = e;
		}
		if (v === undefined || err instanceof Error && err.message.match(/Unknown message digest/)) {
			nm = 'RSA-';
			nm += hashAlgo.toUpperCase();
			v = crypto.createVerify(nm);
		}
		assert.ok(v, 'failed to create verifier');
		var oldVerify = v.verify.bind(v);
		var key = this.toBuffer('pkcs8');
		var curve = this.curve;
		var self = this;
		v.verify = function (signature, fmt) {
			if (Signature.isSignature(signature, [2, 0])) {
				if (signature.type !== self.type) return false;
				if (signature.hashAlgorithm && signature.hashAlgorithm !== hashAlgo) return false;
				if (signature.curve && self.type === 'ecdsa' && signature.curve !== curve) return false;
				return oldVerify(key, signature.toBuffer('asn1'));
			} else if (typeof signature === 'string' || Buffer.isBuffer(signature)) {
				return oldVerify(key, signature, fmt);
	
				/*
	    * Avoid doing this on valid arguments, walking the prototype
	    * chain can be quite slow.
	    */
			} else if (Signature.isSignature(signature, [1, 0])) {
				throw new Error('signature was created by too old ' + 'a version of sshpk and cannot be verified');
			} else {
				throw new TypeError('signature must be a string, ' + 'Buffer, or Signature object');
			}
		};
		return v;
	};
	
	Key.prototype.createDiffieHellman = function () {
		if (this.type === 'rsa') throw new Error('RSA keys do not support Diffie-Hellman');
	
		return new DiffieHellman(this);
	};
	Key.prototype.createDH = Key.prototype.createDiffieHellman;
	
	Key.parse = function (data, format, options) {
		if (typeof data !== 'string') assert.buffer(data, 'data');
		if (format === undefined) format = 'auto';
		assert.string(format, 'format');
		if (typeof options === 'string') options = { filename: options };
		assert.optionalObject(options, 'options');
		if (options === undefined) options = {};
		assert.optionalString(options.filename, 'options.filename');
		if (options.filename === undefined) options.filename = '(unnamed)';
	
		assert.object(formats[format], 'formats[format]');
	
		try {
			var k = formats[format].read(data, options);
			if (k instanceof PrivateKey) k = k.toPublic();
			if (!k.comment) k.comment = options.filename;
			return k;
		} catch (e) {
			if (e.name === 'KeyEncryptedError') throw e;
			throw new KeyParseError(options.filename, format, e);
		}
	};
	
	Key.isKey = function (obj, ver) {
		return utils.isCompatible(obj, Key, ver);
	};
	
	/*
	 * API versions for Key:
	 * [1,0] -- initial ver, may take Signature for createVerify or may not
	 * [1,1] -- added pkcs1, pkcs8 formats
	 * [1,2] -- added auto, ssh-private, openssh formats
	 * [1,3] -- added defaultHashAlgorithm
	 * [1,4] -- added ed support, createDH
	 * [1,5] -- first explicitly tagged version
	 */
	Key.prototype._sshpkApiVersion = [1, 5];
	
	Key._oldVersionDetect = function (obj) {
		assert.func(obj.toBuffer);
		assert.func(obj.fingerprint);
		if (obj.createDH) return [1, 4];
		if (obj.defaultHashAlgorithm) return [1, 3];
		if (obj.formats['auto']) return [1, 2];
		if (obj.formats['pkcs1']) return [1, 1];
		return [1, 0];
	};
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(290).Buffer))

/***/ }),
/* 482 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer, process) {'use strict';
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
	
	// Copyright (c) 2012, Mark Cavage. All rights reserved.
	// Copyright 2015 Joyent, Inc.
	
	var assert = __webpack_require__(336);
	var Stream = __webpack_require__(282).Stream;
	var util = __webpack_require__(271);
	
	///--- Globals
	
	/* JSSTYLED */
	var UUID_REGEXP = /^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/;
	
	///--- Internal
	
	function _capitalize(str) {
	    return str.charAt(0).toUpperCase() + str.slice(1);
	}
	
	function _toss(name, expected, oper, arg, actual) {
	    throw new assert.AssertionError({
	        message: util.format('%s (%s) is required', name, expected),
	        actual: actual === undefined ? typeof arg === 'undefined' ? 'undefined' : _typeof(arg) : actual(arg),
	        expected: expected,
	        operator: oper || '===',
	        stackStartFunction: _toss.caller
	    });
	}
	
	function _getClass(arg) {
	    return Object.prototype.toString.call(arg).slice(8, -1);
	}
	
	function noop() {}
	// Why even bother with asserts?
	
	
	///--- Exports
	
	var types = {
	    bool: {
	        check: function check(arg) {
	            return typeof arg === 'boolean';
	        }
	    },
	    func: {
	        check: function check(arg) {
	            return typeof arg === 'function';
	        }
	    },
	    string: {
	        check: function check(arg) {
	            return typeof arg === 'string';
	        }
	    },
	    object: {
	        check: function check(arg) {
	            return (typeof arg === 'undefined' ? 'undefined' : _typeof(arg)) === 'object' && arg !== null;
	        }
	    },
	    number: {
	        check: function check(arg) {
	            return typeof arg === 'number' && !isNaN(arg);
	        }
	    },
	    finite: {
	        check: function check(arg) {
	            return typeof arg === 'number' && !isNaN(arg) && isFinite(arg);
	        }
	    },
	    buffer: {
	        check: function check(arg) {
	            return Buffer.isBuffer(arg);
	        },
	        operator: 'Buffer.isBuffer'
	    },
	    array: {
	        check: function check(arg) {
	            return Array.isArray(arg);
	        },
	        operator: 'Array.isArray'
	    },
	    stream: {
	        check: function check(arg) {
	            return arg instanceof Stream;
	        },
	        operator: 'instanceof',
	        actual: _getClass
	    },
	    date: {
	        check: function check(arg) {
	            return arg instanceof Date;
	        },
	        operator: 'instanceof',
	        actual: _getClass
	    },
	    regexp: {
	        check: function check(arg) {
	            return arg instanceof RegExp;
	        },
	        operator: 'instanceof',
	        actual: _getClass
	    },
	    uuid: {
	        check: function check(arg) {
	            return typeof arg === 'string' && UUID_REGEXP.test(arg);
	        },
	        operator: 'isUUID'
	    }
	};
	
	function _setExports(ndebug) {
	    var keys = Object.keys(types);
	    var out;
	
	    /* re-export standard assert */
	    if (process.env.NODE_NDEBUG) {
	        out = noop;
	    } else {
	        out = function out(arg, msg) {
	            if (!arg) {
	                _toss(msg, 'true', arg);
	            }
	        };
	    }
	
	    /* standard checks */
	    keys.forEach(function (k) {
	        if (ndebug) {
	            out[k] = noop;
	            return;
	        }
	        var type = types[k];
	        out[k] = function (arg, msg) {
	            if (!type.check(arg)) {
	                _toss(msg, k, type.operator, arg, type.actual);
	            }
	        };
	    });
	
	    /* optional checks */
	    keys.forEach(function (k) {
	        var name = 'optional' + _capitalize(k);
	        if (ndebug) {
	            out[name] = noop;
	            return;
	        }
	        var type = types[k];
	        out[name] = function (arg, msg) {
	            if (arg === undefined || arg === null) {
	                return;
	            }
	            if (!type.check(arg)) {
	                _toss(msg, k, type.operator, arg, type.actual);
	            }
	        };
	    });
	
	    /* arrayOf checks */
	    keys.forEach(function (k) {
	        var name = 'arrayOf' + _capitalize(k);
	        if (ndebug) {
	            out[name] = noop;
	            return;
	        }
	        var type = types[k];
	        var expected = '[' + k + ']';
	        out[name] = function (arg, msg) {
	            if (!Array.isArray(arg)) {
	                _toss(msg, expected, type.operator, arg, type.actual);
	            }
	            var i;
	            for (i = 0; i < arg.length; i++) {
	                if (!type.check(arg[i])) {
	                    _toss(msg, expected, type.operator, arg, type.actual);
	                }
	            }
	        };
	    });
	
	    /* optionalArrayOf checks */
	    keys.forEach(function (k) {
	        var name = 'optionalArrayOf' + _capitalize(k);
	        if (ndebug) {
	            out[name] = noop;
	            return;
	        }
	        var type = types[k];
	        var expected = '[' + k + ']';
	        out[name] = function (arg, msg) {
	            if (arg === undefined || arg === null) {
	                return;
	            }
	            if (!Array.isArray(arg)) {
	                _toss(msg, expected, type.operator, arg, type.actual);
	            }
	            var i;
	            for (i = 0; i < arg.length; i++) {
	                if (!type.check(arg[i])) {
	                    _toss(msg, expected, type.operator, arg, type.actual);
	                }
	            }
	        };
	    });
	
	    /* re-export built-in assertions */
	    Object.keys(assert).forEach(function (k) {
	        if (k === 'AssertionError') {
	            out[k] = assert[k];
	            return;
	        }
	        if (ndebug) {
	            out[k] = noop;
	            return;
	        }
	        out[k] = assert[k];
	    });
	
	    /* export ourselves (for unit tests _only_) */
	    out._setExports = _setExports;
	
	    return out;
	}
	
	module.exports = _setExports(process.env.NODE_NDEBUG);
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(290).Buffer, __webpack_require__(3)))

/***/ }),
/* 483 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {'use strict';
	
	// Copyright 2015 Joyent, Inc.
	
	var algInfo = {
		'dsa': {
			parts: ['p', 'q', 'g', 'y'],
			sizePart: 'p'
		},
		'rsa': {
			parts: ['e', 'n'],
			sizePart: 'n'
		},
		'ecdsa': {
			parts: ['curve', 'Q'],
			sizePart: 'Q'
		},
		'ed25519': {
			parts: ['R'],
			normalize: false,
			sizePart: 'R'
		}
	};
	algInfo['curve25519'] = algInfo['ed25519'];
	
	var algPrivInfo = {
		'dsa': {
			parts: ['p', 'q', 'g', 'y', 'x']
		},
		'rsa': {
			parts: ['n', 'e', 'd', 'iqmp', 'p', 'q']
		},
		'ecdsa': {
			parts: ['curve', 'Q', 'd']
		},
		'ed25519': {
			parts: ['R', 'r'],
			normalize: false
		}
	};
	algPrivInfo['curve25519'] = algPrivInfo['ed25519'];
	
	var hashAlgs = {
		'md5': true,
		'sha1': true,
		'sha256': true,
		'sha384': true,
		'sha512': true
	};
	
	/*
	 * Taken from
	 * http://csrc.nist.gov/groups/ST/toolkit/documents/dss/NISTReCur.pdf
	 */
	var curves = {
		'nistp256': {
			size: 256,
			pkcs8oid: '1.2.840.10045.3.1.7',
			p: new Buffer(('00' + 'ffffffff 00000001 00000000 00000000' + '00000000 ffffffff ffffffff ffffffff').replace(/ /g, ''), 'hex'),
			a: new Buffer(('00' + 'FFFFFFFF 00000001 00000000 00000000' + '00000000 FFFFFFFF FFFFFFFF FFFFFFFC').replace(/ /g, ''), 'hex'),
			b: new Buffer(('5ac635d8 aa3a93e7 b3ebbd55 769886bc' + '651d06b0 cc53b0f6 3bce3c3e 27d2604b').replace(/ /g, ''), 'hex'),
			s: new Buffer(('00' + 'c49d3608 86e70493 6a6678e1 139d26b7' + '819f7e90').replace(/ /g, ''), 'hex'),
			n: new Buffer(('00' + 'ffffffff 00000000 ffffffff ffffffff' + 'bce6faad a7179e84 f3b9cac2 fc632551').replace(/ /g, ''), 'hex'),
			G: new Buffer(('04' + '6b17d1f2 e12c4247 f8bce6e5 63a440f2' + '77037d81 2deb33a0 f4a13945 d898c296' + '4fe342e2 fe1a7f9b 8ee7eb4a 7c0f9e16' + '2bce3357 6b315ece cbb64068 37bf51f5').replace(/ /g, ''), 'hex')
		},
		'nistp384': {
			size: 384,
			pkcs8oid: '1.3.132.0.34',
			p: new Buffer(('00' + 'ffffffff ffffffff ffffffff ffffffff' + 'ffffffff ffffffff ffffffff fffffffe' + 'ffffffff 00000000 00000000 ffffffff').replace(/ /g, ''), 'hex'),
			a: new Buffer(('00' + 'FFFFFFFF FFFFFFFF FFFFFFFF FFFFFFFF' + 'FFFFFFFF FFFFFFFF FFFFFFFF FFFFFFFE' + 'FFFFFFFF 00000000 00000000 FFFFFFFC').replace(/ /g, ''), 'hex'),
			b: new Buffer(('b3312fa7 e23ee7e4 988e056b e3f82d19' + '181d9c6e fe814112 0314088f 5013875a' + 'c656398d 8a2ed19d 2a85c8ed d3ec2aef').replace(/ /g, ''), 'hex'),
			s: new Buffer(('00' + 'a335926a a319a27a 1d00896a 6773a482' + '7acdac73').replace(/ /g, ''), 'hex'),
			n: new Buffer(('00' + 'ffffffff ffffffff ffffffff ffffffff' + 'ffffffff ffffffff c7634d81 f4372ddf' + '581a0db2 48b0a77a ecec196a ccc52973').replace(/ /g, ''), 'hex'),
			G: new Buffer(('04' + 'aa87ca22 be8b0537 8eb1c71e f320ad74' + '6e1d3b62 8ba79b98 59f741e0 82542a38' + '5502f25d bf55296c 3a545e38 72760ab7' + '3617de4a 96262c6f 5d9e98bf 9292dc29' + 'f8f41dbd 289a147c e9da3113 b5f0b8c0' + '0a60b1ce 1d7e819d 7a431d7c 90ea0e5f').replace(/ /g, ''), 'hex')
		},
		'nistp521': {
			size: 521,
			pkcs8oid: '1.3.132.0.35',
			p: new Buffer(('01ffffff ffffffff ffffffff ffffffff' + 'ffffffff ffffffff ffffffff ffffffff' + 'ffffffff ffffffff ffffffff ffffffff' + 'ffffffff ffffffff ffffffff ffffffff' + 'ffff').replace(/ /g, ''), 'hex'),
			a: new Buffer(('01FF' + 'FFFFFFFF FFFFFFFF FFFFFFFF FFFFFFFF' + 'FFFFFFFF FFFFFFFF FFFFFFFF FFFFFFFF' + 'FFFFFFFF FFFFFFFF FFFFFFFF FFFFFFFF' + 'FFFFFFFF FFFFFFFF FFFFFFFF FFFFFFFC').replace(/ /g, ''), 'hex'),
			b: new Buffer(('51' + '953eb961 8e1c9a1f 929a21a0 b68540ee' + 'a2da725b 99b315f3 b8b48991 8ef109e1' + '56193951 ec7e937b 1652c0bd 3bb1bf07' + '3573df88 3d2c34f1 ef451fd4 6b503f00').replace(/ /g, ''), 'hex'),
			s: new Buffer(('00' + 'd09e8800 291cb853 96cc6717 393284aa' + 'a0da64ba').replace(/ /g, ''), 'hex'),
			n: new Buffer(('01ff' + 'ffffffff ffffffff ffffffff ffffffff' + 'ffffffff ffffffff ffffffff fffffffa' + '51868783 bf2f966b 7fcc0148 f709a5d0' + '3bb5c9b8 899c47ae bb6fb71e 91386409').replace(/ /g, ''), 'hex'),
			G: new Buffer(('04' + '00c6 858e06b7 0404e9cd 9e3ecb66 2395b442' + '9c648139 053fb521 f828af60 6b4d3dba' + 'a14b5e77 efe75928 fe1dc127 a2ffa8de' + '3348b3c1 856a429b f97e7e31 c2e5bd66' + '0118 39296a78 9a3bc004 5c8a5fb4 2c7d1bd9' + '98f54449 579b4468 17afbd17 273e662c' + '97ee7299 5ef42640 c550b901 3fad0761' + '353c7086 a272c240 88be9476 9fd16650').replace(/ /g, ''), 'hex')
		}
	};
	
	module.exports = {
		info: algInfo,
		privInfo: algPrivInfo,
		hashAlgs: hashAlgs,
		curves: curves
	};
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(290).Buffer))

/***/ }),
/* 484 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {'use strict';
	
	// Copyright 2015 Joyent, Inc.
	
	module.exports = Fingerprint;
	
	var assert = __webpack_require__(482);
	var algs = __webpack_require__(483);
	var crypto = __webpack_require__(392);
	var errs = __webpack_require__(485);
	var Key = __webpack_require__(481);
	var Certificate = __webpack_require__(486);
	var utils = __webpack_require__(488);
	
	var FingerprintFormatError = errs.FingerprintFormatError;
	var InvalidAlgorithmError = errs.InvalidAlgorithmError;
	
	function Fingerprint(opts) {
		assert.object(opts, 'options');
		assert.string(opts.type, 'options.type');
		assert.buffer(opts.hash, 'options.hash');
		assert.string(opts.algorithm, 'options.algorithm');
	
		this.algorithm = opts.algorithm.toLowerCase();
		if (algs.hashAlgs[this.algorithm] !== true) throw new InvalidAlgorithmError(this.algorithm);
	
		this.hash = opts.hash;
		this.type = opts.type;
	}
	
	Fingerprint.prototype.toString = function (format) {
		if (format === undefined) {
			if (this.algorithm === 'md5') format = 'hex';else format = 'base64';
		}
		assert.string(format);
	
		switch (format) {
			case 'hex':
				return addColons(this.hash.toString('hex'));
			case 'base64':
				return sshBase64Format(this.algorithm, this.hash.toString('base64'));
			default:
				throw new FingerprintFormatError(undefined, format);
		}
	};
	
	Fingerprint.prototype.matches = function (other) {
		assert.object(other, 'key or certificate');
		if (this.type === 'key') {
			utils.assertCompatible(other, Key, [1, 0], 'key');
		} else {
			utils.assertCompatible(other, Certificate, [1, 0], 'certificate');
		}
	
		var theirHash = other.hash(this.algorithm);
		var theirHash2 = crypto.createHash(this.algorithm).update(theirHash).digest('base64');
	
		if (this.hash2 === undefined) this.hash2 = crypto.createHash(this.algorithm).update(this.hash).digest('base64');
	
		return this.hash2 === theirHash2;
	};
	
	Fingerprint.parse = function (fp, options) {
		assert.string(fp, 'fingerprint');
	
		var alg, hash, enAlgs;
		if (Array.isArray(options)) {
			enAlgs = options;
			options = {};
		}
		assert.optionalObject(options, 'options');
		if (options === undefined) options = {};
		if (options.enAlgs !== undefined) enAlgs = options.enAlgs;
		assert.optionalArrayOfString(enAlgs, 'algorithms');
	
		var parts = fp.split(':');
		if (parts.length == 2) {
			alg = parts[0].toLowerCase();
			/*JSSTYLED*/
			var base64RE = /^[A-Za-z0-9+\/=]+$/;
			if (!base64RE.test(parts[1])) throw new FingerprintFormatError(fp);
			try {
				hash = new Buffer(parts[1], 'base64');
			} catch (e) {
				throw new FingerprintFormatError(fp);
			}
		} else if (parts.length > 2) {
			alg = 'md5';
			if (parts[0].toLowerCase() === 'md5') parts = parts.slice(1);
			parts = parts.join('');
			/*JSSTYLED*/
			var md5RE = /^[a-fA-F0-9]+$/;
			if (!md5RE.test(parts)) throw new FingerprintFormatError(fp);
			try {
				hash = new Buffer(parts, 'hex');
			} catch (e) {
				throw new FingerprintFormatError(fp);
			}
		}
	
		if (alg === undefined) throw new FingerprintFormatError(fp);
	
		if (algs.hashAlgs[alg] === undefined) throw new InvalidAlgorithmError(alg);
	
		if (enAlgs !== undefined) {
			enAlgs = enAlgs.map(function (a) {
				return a.toLowerCase();
			});
			if (enAlgs.indexOf(alg) === -1) throw new InvalidAlgorithmError(alg);
		}
	
		return new Fingerprint({
			algorithm: alg,
			hash: hash,
			type: options.type || 'key'
		});
	};
	
	function addColons(s) {
		/*JSSTYLED*/
		return s.replace(/(.{2})(?=.)/g, '$1:');
	}
	
	function base64Strip(s) {
		/*JSSTYLED*/
		return s.replace(/=*$/, '');
	}
	
	function sshBase64Format(alg, h) {
		return alg.toUpperCase() + ':' + base64Strip(h);
	}
	
	Fingerprint.isFingerprint = function (obj, ver) {
		return utils.isCompatible(obj, Fingerprint, ver);
	};
	
	/*
	 * API versions for Fingerprint:
	 * [1,0] -- initial ver
	 * [1,1] -- first tagged ver
	 */
	Fingerprint.prototype._sshpkApiVersion = [1, 1];
	
	Fingerprint._oldVersionDetect = function (obj) {
		assert.func(obj.toString);
		assert.func(obj.matches);
		return [1, 0];
	};
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(290).Buffer))

/***/ }),
/* 485 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	// Copyright 2015 Joyent, Inc.
	
	var assert = __webpack_require__(482);
	var util = __webpack_require__(271);
	
	function FingerprintFormatError(fp, format) {
		if (Error.captureStackTrace) Error.captureStackTrace(this, FingerprintFormatError);
		this.name = 'FingerprintFormatError';
		this.fingerprint = fp;
		this.format = format;
		this.message = 'Fingerprint format is not supported, or is invalid: ';
		if (fp !== undefined) this.message += ' fingerprint = ' + fp;
		if (format !== undefined) this.message += ' format = ' + format;
	}
	util.inherits(FingerprintFormatError, Error);
	
	function InvalidAlgorithmError(alg) {
		if (Error.captureStackTrace) Error.captureStackTrace(this, InvalidAlgorithmError);
		this.name = 'InvalidAlgorithmError';
		this.algorithm = alg;
		this.message = 'Algorithm "' + alg + '" is not supported';
	}
	util.inherits(InvalidAlgorithmError, Error);
	
	function KeyParseError(name, format, innerErr) {
		if (Error.captureStackTrace) Error.captureStackTrace(this, KeyParseError);
		this.name = 'KeyParseError';
		this.format = format;
		this.keyName = name;
		this.innerErr = innerErr;
		this.message = 'Failed to parse ' + name + ' as a valid ' + format + ' format key: ' + innerErr.message;
	}
	util.inherits(KeyParseError, Error);
	
	function SignatureParseError(type, format, innerErr) {
		if (Error.captureStackTrace) Error.captureStackTrace(this, SignatureParseError);
		this.name = 'SignatureParseError';
		this.type = type;
		this.format = format;
		this.innerErr = innerErr;
		this.message = 'Failed to parse the given data as a ' + type + ' signature in ' + format + ' format: ' + innerErr.message;
	}
	util.inherits(SignatureParseError, Error);
	
	function CertificateParseError(name, format, innerErr) {
		if (Error.captureStackTrace) Error.captureStackTrace(this, CertificateParseError);
		this.name = 'CertificateParseError';
		this.format = format;
		this.certName = name;
		this.innerErr = innerErr;
		this.message = 'Failed to parse ' + name + ' as a valid ' + format + ' format certificate: ' + innerErr.message;
	}
	util.inherits(CertificateParseError, Error);
	
	function KeyEncryptedError(name, format) {
		if (Error.captureStackTrace) Error.captureStackTrace(this, KeyEncryptedError);
		this.name = 'KeyEncryptedError';
		this.format = format;
		this.keyName = name;
		this.message = 'The ' + format + ' format key ' + name + ' is ' + 'encrypted (password-protected), and no passphrase was ' + 'provided in `options`';
	}
	util.inherits(KeyEncryptedError, Error);
	
	module.exports = {
		FingerprintFormatError: FingerprintFormatError,
		InvalidAlgorithmError: InvalidAlgorithmError,
		KeyParseError: KeyParseError,
		SignatureParseError: SignatureParseError,
		KeyEncryptedError: KeyEncryptedError,
		CertificateParseError: CertificateParseError
	};

/***/ }),
/* 486 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {'use strict';
	
	// Copyright 2016 Joyent, Inc.
	
	module.exports = Certificate;
	
	var assert = __webpack_require__(482);
	var algs = __webpack_require__(483);
	var crypto = __webpack_require__(392);
	var Fingerprint = __webpack_require__(484);
	var Signature = __webpack_require__(487);
	var errs = __webpack_require__(485);
	var util = __webpack_require__(271);
	var utils = __webpack_require__(488);
	var Key = __webpack_require__(481);
	var PrivateKey = __webpack_require__(489);
	var Identity = __webpack_require__(519);
	
	var formats = {};
	formats['openssh'] = __webpack_require__(520);
	formats['x509'] = __webpack_require__(521);
	formats['pem'] = __webpack_require__(522);
	
	var CertificateParseError = errs.CertificateParseError;
	var InvalidAlgorithmError = errs.InvalidAlgorithmError;
	
	function Certificate(opts) {
		assert.object(opts, 'options');
		assert.arrayOfObject(opts.subjects, 'options.subjects');
		utils.assertCompatible(opts.subjects[0], Identity, [1, 0], 'options.subjects');
		utils.assertCompatible(opts.subjectKey, Key, [1, 0], 'options.subjectKey');
		utils.assertCompatible(opts.issuer, Identity, [1, 0], 'options.issuer');
		if (opts.issuerKey !== undefined) {
			utils.assertCompatible(opts.issuerKey, Key, [1, 0], 'options.issuerKey');
		}
		assert.object(opts.signatures, 'options.signatures');
		assert.buffer(opts.serial, 'options.serial');
		assert.date(opts.validFrom, 'options.validFrom');
		assert.date(opts.validUntil, 'optons.validUntil');
	
		assert.optionalArrayOfString(opts.purposes, 'options.purposes');
	
		this._hashCache = {};
	
		this.subjects = opts.subjects;
		this.issuer = opts.issuer;
		this.subjectKey = opts.subjectKey;
		this.issuerKey = opts.issuerKey;
		this.signatures = opts.signatures;
		this.serial = opts.serial;
		this.validFrom = opts.validFrom;
		this.validUntil = opts.validUntil;
		this.purposes = opts.purposes;
	}
	
	Certificate.formats = formats;
	
	Certificate.prototype.toBuffer = function (format, options) {
		if (format === undefined) format = 'x509';
		assert.string(format, 'format');
		assert.object(formats[format], 'formats[format]');
		assert.optionalObject(options, 'options');
	
		return formats[format].write(this, options);
	};
	
	Certificate.prototype.toString = function (format, options) {
		if (format === undefined) format = 'pem';
		return this.toBuffer(format, options).toString();
	};
	
	Certificate.prototype.fingerprint = function (algo) {
		if (algo === undefined) algo = 'sha256';
		assert.string(algo, 'algorithm');
		var opts = {
			type: 'certificate',
			hash: this.hash(algo),
			algorithm: algo
		};
		return new Fingerprint(opts);
	};
	
	Certificate.prototype.hash = function (algo) {
		assert.string(algo, 'algorithm');
		algo = algo.toLowerCase();
		if (algs.hashAlgs[algo] === undefined) throw new InvalidAlgorithmError(algo);
	
		if (this._hashCache[algo]) return this._hashCache[algo];
	
		var hash = crypto.createHash(algo).update(this.toBuffer('x509')).digest();
		this._hashCache[algo] = hash;
		return hash;
	};
	
	Certificate.prototype.isExpired = function (when) {
		if (when === undefined) when = new Date();
		return !(when.getTime() >= this.validFrom.getTime() && when.getTime() < this.validUntil.getTime());
	};
	
	Certificate.prototype.isSignedBy = function (issuerCert) {
		utils.assertCompatible(issuerCert, Certificate, [1, 0], 'issuer');
	
		if (!this.issuer.equals(issuerCert.subjects[0])) return false;
		if (this.issuer.purposes && this.issuer.purposes.length > 0 && this.issuer.purposes.indexOf('ca') === -1) {
			return false;
		}
	
		return this.isSignedByKey(issuerCert.subjectKey);
	};
	
	Certificate.prototype.isSignedByKey = function (issuerKey) {
		utils.assertCompatible(issuerKey, Key, [1, 2], 'issuerKey');
	
		if (this.issuerKey !== undefined) {
			return this.issuerKey.fingerprint('sha512').matches(issuerKey);
		}
	
		var fmt = Object.keys(this.signatures)[0];
		var valid = formats[fmt].verify(this, issuerKey);
		if (valid) this.issuerKey = issuerKey;
		return valid;
	};
	
	Certificate.prototype.signWith = function (key) {
		utils.assertCompatible(key, PrivateKey, [1, 2], 'key');
		var fmts = Object.keys(formats);
		var didOne = false;
		for (var i = 0; i < fmts.length; ++i) {
			if (fmts[i] !== 'pem') {
				var ret = formats[fmts[i]].sign(this, key);
				if (ret === true) didOne = true;
			}
		}
		if (!didOne) {
			throw new Error('Failed to sign the certificate for any ' + 'available certificate formats');
		}
	};
	
	Certificate.createSelfSigned = function (subjectOrSubjects, key, options) {
		var subjects;
		if (Array.isArray(subjectOrSubjects)) subjects = subjectOrSubjects;else subjects = [subjectOrSubjects];
	
		assert.arrayOfObject(subjects);
		subjects.forEach(function (subject) {
			utils.assertCompatible(subject, Identity, [1, 0], 'subject');
		});
	
		utils.assertCompatible(key, PrivateKey, [1, 2], 'private key');
	
		assert.optionalObject(options, 'options');
		if (options === undefined) options = {};
		assert.optionalObject(options.validFrom, 'options.validFrom');
		assert.optionalObject(options.validUntil, 'options.validUntil');
		var validFrom = options.validFrom;
		var validUntil = options.validUntil;
		if (validFrom === undefined) validFrom = new Date();
		if (validUntil === undefined) {
			assert.optionalNumber(options.lifetime, 'options.lifetime');
			var lifetime = options.lifetime;
			if (lifetime === undefined) lifetime = 10 * 365 * 24 * 3600;
			validUntil = new Date();
			validUntil.setTime(validUntil.getTime() + lifetime * 1000);
		}
		assert.optionalBuffer(options.serial, 'options.serial');
		var serial = options.serial;
		if (serial === undefined) serial = new Buffer('0000000000000001', 'hex');
	
		var purposes = options.purposes;
		if (purposes === undefined) purposes = [];
	
		if (purposes.indexOf('signature') === -1) purposes.push('signature');
	
		/* Self-signed certs are always CAs. */
		if (purposes.indexOf('ca') === -1) purposes.push('ca');
		if (purposes.indexOf('crl') === -1) purposes.push('crl');
	
		/*
	  * If we weren't explicitly given any other purposes, do the sensible
	  * thing and add some basic ones depending on the subject type.
	  */
		if (purposes.length <= 3) {
			var hostSubjects = subjects.filter(function (subject) {
				return subject.type === 'host';
			});
			var userSubjects = subjects.filter(function (subject) {
				return subject.type === 'user';
			});
			if (hostSubjects.length > 0) {
				if (purposes.indexOf('serverAuth') === -1) purposes.push('serverAuth');
			}
			if (userSubjects.length > 0) {
				if (purposes.indexOf('clientAuth') === -1) purposes.push('clientAuth');
			}
			if (userSubjects.length > 0 || hostSubjects.length > 0) {
				if (purposes.indexOf('keyAgreement') === -1) purposes.push('keyAgreement');
				if (key.type === 'rsa' && purposes.indexOf('encryption') === -1) purposes.push('encryption');
			}
		}
	
		var cert = new Certificate({
			subjects: subjects,
			issuer: subjects[0],
			subjectKey: key.toPublic(),
			issuerKey: key.toPublic(),
			signatures: {},
			serial: serial,
			validFrom: validFrom,
			validUntil: validUntil,
			purposes: purposes
		});
		cert.signWith(key);
	
		return cert;
	};
	
	Certificate.create = function (subjectOrSubjects, key, issuer, issuerKey, options) {
		var subjects;
		if (Array.isArray(subjectOrSubjects)) subjects = subjectOrSubjects;else subjects = [subjectOrSubjects];
	
		assert.arrayOfObject(subjects);
		subjects.forEach(function (subject) {
			utils.assertCompatible(subject, Identity, [1, 0], 'subject');
		});
	
		utils.assertCompatible(key, Key, [1, 0], 'key');
		if (PrivateKey.isPrivateKey(key)) key = key.toPublic();
		utils.assertCompatible(issuer, Identity, [1, 0], 'issuer');
		utils.assertCompatible(issuerKey, PrivateKey, [1, 2], 'issuer key');
	
		assert.optionalObject(options, 'options');
		if (options === undefined) options = {};
		assert.optionalObject(options.validFrom, 'options.validFrom');
		assert.optionalObject(options.validUntil, 'options.validUntil');
		var validFrom = options.validFrom;
		var validUntil = options.validUntil;
		if (validFrom === undefined) validFrom = new Date();
		if (validUntil === undefined) {
			assert.optionalNumber(options.lifetime, 'options.lifetime');
			var lifetime = options.lifetime;
			if (lifetime === undefined) lifetime = 10 * 365 * 24 * 3600;
			validUntil = new Date();
			validUntil.setTime(validUntil.getTime() + lifetime * 1000);
		}
		assert.optionalBuffer(options.serial, 'options.serial');
		var serial = options.serial;
		if (serial === undefined) serial = new Buffer('0000000000000001', 'hex');
	
		var purposes = options.purposes;
		if (purposes === undefined) purposes = [];
	
		if (purposes.indexOf('signature') === -1) purposes.push('signature');
	
		if (options.ca === true) {
			if (purposes.indexOf('ca') === -1) purposes.push('ca');
			if (purposes.indexOf('crl') === -1) purposes.push('crl');
		}
	
		var hostSubjects = subjects.filter(function (subject) {
			return subject.type === 'host';
		});
		var userSubjects = subjects.filter(function (subject) {
			return subject.type === 'user';
		});
		if (hostSubjects.length > 0) {
			if (purposes.indexOf('serverAuth') === -1) purposes.push('serverAuth');
		}
		if (userSubjects.length > 0) {
			if (purposes.indexOf('clientAuth') === -1) purposes.push('clientAuth');
		}
		if (userSubjects.length > 0 || hostSubjects.length > 0) {
			if (purposes.indexOf('keyAgreement') === -1) purposes.push('keyAgreement');
			if (key.type === 'rsa' && purposes.indexOf('encryption') === -1) purposes.push('encryption');
		}
	
		var cert = new Certificate({
			subjects: subjects,
			issuer: issuer,
			subjectKey: key,
			issuerKey: issuerKey.toPublic(),
			signatures: {},
			serial: serial,
			validFrom: validFrom,
			validUntil: validUntil,
			purposes: purposes
		});
		cert.signWith(issuerKey);
	
		return cert;
	};
	
	Certificate.parse = function (data, format, options) {
		if (typeof data !== 'string') assert.buffer(data, 'data');
		if (format === undefined) format = 'auto';
		assert.string(format, 'format');
		if (typeof options === 'string') options = { filename: options };
		assert.optionalObject(options, 'options');
		if (options === undefined) options = {};
		assert.optionalString(options.filename, 'options.filename');
		if (options.filename === undefined) options.filename = '(unnamed)';
	
		assert.object(formats[format], 'formats[format]');
	
		try {
			var k = formats[format].read(data, options);
			return k;
		} catch (e) {
			throw new CertificateParseError(options.filename, format, e);
		}
	};
	
	Certificate.isCertificate = function (obj, ver) {
		return utils.isCompatible(obj, Certificate, ver);
	};
	
	/*
	 * API versions for Certificate:
	 * [1,0] -- initial ver
	 */
	Certificate.prototype._sshpkApiVersion = [1, 0];
	
	Certificate._oldVersionDetect = function (obj) {
		return [1, 0];
	};
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(290).Buffer))

/***/ }),
/* 487 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {'use strict';
	
	// Copyright 2015 Joyent, Inc.
	
	module.exports = Signature;
	
	var assert = __webpack_require__(482);
	var algs = __webpack_require__(483);
	var crypto = __webpack_require__(392);
	var errs = __webpack_require__(485);
	var utils = __webpack_require__(488);
	var asn1 = __webpack_require__(506);
	var SSHBuffer = __webpack_require__(516);
	
	var InvalidAlgorithmError = errs.InvalidAlgorithmError;
	var SignatureParseError = errs.SignatureParseError;
	
	function Signature(opts) {
		assert.object(opts, 'options');
		assert.arrayOfObject(opts.parts, 'options.parts');
		assert.string(opts.type, 'options.type');
	
		var partLookup = {};
		for (var i = 0; i < opts.parts.length; ++i) {
			var part = opts.parts[i];
			partLookup[part.name] = part;
		}
	
		this.type = opts.type;
		this.hashAlgorithm = opts.hashAlgo;
		this.curve = opts.curve;
		this.parts = opts.parts;
		this.part = partLookup;
	}
	
	Signature.prototype.toBuffer = function (format) {
		if (format === undefined) format = 'asn1';
		assert.string(format, 'format');
	
		var buf;
		var stype = 'ssh-' + this.type;
	
		switch (this.type) {
			case 'rsa':
				switch (this.hashAlgorithm) {
					case 'sha256':
						stype = 'rsa-sha2-256';
						break;
					case 'sha512':
						stype = 'rsa-sha2-512';
						break;
					case 'sha1':
					case undefined:
						break;
					default:
						throw new Error('SSH signature ' + 'format does not support hash ' + 'algorithm ' + this.hashAlgorithm);
				}
				if (format === 'ssh') {
					buf = new SSHBuffer({});
					buf.writeString(stype);
					buf.writePart(this.part.sig);
					return buf.toBuffer();
				} else {
					return this.part.sig.data;
				}
				break;
	
			case 'ed25519':
				if (format === 'ssh') {
					buf = new SSHBuffer({});
					buf.writeString(stype);
					buf.writePart(this.part.sig);
					return buf.toBuffer();
				} else {
					return this.part.sig.data;
				}
				break;
	
			case 'dsa':
			case 'ecdsa':
				var r, s;
				if (format === 'asn1') {
					var der = new asn1.BerWriter();
					der.startSequence();
					r = utils.mpNormalize(this.part.r.data);
					s = utils.mpNormalize(this.part.s.data);
					der.writeBuffer(r, asn1.Ber.Integer);
					der.writeBuffer(s, asn1.Ber.Integer);
					der.endSequence();
					return der.buffer;
				} else if (format === 'ssh' && this.type === 'dsa') {
					buf = new SSHBuffer({});
					buf.writeString('ssh-dss');
					r = this.part.r.data;
					if (r.length > 20 && r[0] === 0x00) r = r.slice(1);
					s = this.part.s.data;
					if (s.length > 20 && s[0] === 0x00) s = s.slice(1);
					if (this.hashAlgorithm && this.hashAlgorithm !== 'sha1' || r.length + s.length !== 40) {
						throw new Error('OpenSSH only supports ' + 'DSA signatures with SHA1 hash');
					}
					buf.writeBuffer(Buffer.concat([r, s]));
					return buf.toBuffer();
				} else if (format === 'ssh' && this.type === 'ecdsa') {
					var inner = new SSHBuffer({});
					r = this.part.r.data;
					inner.writeBuffer(r);
					inner.writePart(this.part.s);
	
					buf = new SSHBuffer({});
					/* XXX: find a more proper way to do this? */
					var curve;
					if (r[0] === 0x00) r = r.slice(1);
					var sz = r.length * 8;
					if (sz === 256) curve = 'nistp256';else if (sz === 384) curve = 'nistp384';else if (sz === 528) curve = 'nistp521';
					buf.writeString('ecdsa-sha2-' + curve);
					buf.writeBuffer(inner.toBuffer());
					return buf.toBuffer();
				}
				throw new Error('Invalid signature format');
			default:
				throw new Error('Invalid signature data');
		}
	};
	
	Signature.prototype.toString = function (format) {
		assert.optionalString(format, 'format');
		return this.toBuffer(format).toString('base64');
	};
	
	Signature.parse = function (data, type, format) {
		if (typeof data === 'string') data = new Buffer(data, 'base64');
		assert.buffer(data, 'data');
		assert.string(format, 'format');
		assert.string(type, 'type');
	
		var opts = {};
		opts.type = type.toLowerCase();
		opts.parts = [];
	
		try {
			assert.ok(data.length > 0, 'signature must not be empty');
			switch (opts.type) {
				case 'rsa':
					return parseOneNum(data, type, format, opts);
				case 'ed25519':
					return parseOneNum(data, type, format, opts);
	
				case 'dsa':
				case 'ecdsa':
					if (format === 'asn1') return parseDSAasn1(data, type, format, opts);else if (opts.type === 'dsa') return parseDSA(data, type, format, opts);else return parseECDSA(data, type, format, opts);
	
				default:
					throw new InvalidAlgorithmError(type);
			}
		} catch (e) {
			if (e instanceof InvalidAlgorithmError) throw e;
			throw new SignatureParseError(type, format, e);
		}
	};
	
	function parseOneNum(data, type, format, opts) {
		if (format === 'ssh') {
			try {
				var buf = new SSHBuffer({ buffer: data });
				var head = buf.readString();
			} catch (e) {
				/* fall through */
			}
			if (buf !== undefined) {
				var msg = 'SSH signature does not match expected ' + 'type (expected ' + type + ', got ' + head + ')';
				switch (head) {
					case 'ssh-rsa':
						assert.strictEqual(type, 'rsa', msg);
						opts.hashAlgo = 'sha1';
						break;
					case 'rsa-sha2-256':
						assert.strictEqual(type, 'rsa', msg);
						opts.hashAlgo = 'sha256';
						break;
					case 'rsa-sha2-512':
						assert.strictEqual(type, 'rsa', msg);
						opts.hashAlgo = 'sha512';
						break;
					case 'ssh-ed25519':
						assert.strictEqual(type, 'ed25519', msg);
						opts.hashAlgo = 'sha512';
						break;
					default:
						throw new Error('Unknown SSH signature ' + 'type: ' + head);
				}
				var sig = buf.readPart();
				assert.ok(buf.atEnd(), 'extra trailing bytes');
				sig.name = 'sig';
				opts.parts.push(sig);
				return new Signature(opts);
			}
		}
		opts.parts.push({ name: 'sig', data: data });
		return new Signature(opts);
	}
	
	function parseDSAasn1(data, type, format, opts) {
		var der = new asn1.BerReader(data);
		der.readSequence();
		var r = der.readString(asn1.Ber.Integer, true);
		var s = der.readString(asn1.Ber.Integer, true);
	
		opts.parts.push({ name: 'r', data: utils.mpNormalize(r) });
		opts.parts.push({ name: 's', data: utils.mpNormalize(s) });
	
		return new Signature(opts);
	}
	
	function parseDSA(data, type, format, opts) {
		if (data.length != 40) {
			var buf = new SSHBuffer({ buffer: data });
			var d = buf.readBuffer();
			if (d.toString('ascii') === 'ssh-dss') d = buf.readBuffer();
			assert.ok(buf.atEnd(), 'extra trailing bytes');
			assert.strictEqual(d.length, 40, 'invalid inner length');
			data = d;
		}
		opts.parts.push({ name: 'r', data: data.slice(0, 20) });
		opts.parts.push({ name: 's', data: data.slice(20, 40) });
		return new Signature(opts);
	}
	
	function parseECDSA(data, type, format, opts) {
		var buf = new SSHBuffer({ buffer: data });
	
		var r, s;
		var inner = buf.readBuffer();
		var stype = inner.toString('ascii');
		if (stype.slice(0, 6) === 'ecdsa-') {
			var parts = stype.split('-');
			assert.strictEqual(parts[0], 'ecdsa');
			assert.strictEqual(parts[1], 'sha2');
			opts.curve = parts[2];
			switch (opts.curve) {
				case 'nistp256':
					opts.hashAlgo = 'sha256';
					break;
				case 'nistp384':
					opts.hashAlgo = 'sha384';
					break;
				case 'nistp521':
					opts.hashAlgo = 'sha512';
					break;
				default:
					throw new Error('Unsupported ECDSA curve: ' + opts.curve);
			}
			inner = buf.readBuffer();
			assert.ok(buf.atEnd(), 'extra trailing bytes on outer');
			buf = new SSHBuffer({ buffer: inner });
			r = buf.readPart();
		} else {
			r = { data: inner };
		}
	
		s = buf.readPart();
		assert.ok(buf.atEnd(), 'extra trailing bytes');
	
		r.name = 'r';
		s.name = 's';
	
		opts.parts.push(r);
		opts.parts.push(s);
		return new Signature(opts);
	}
	
	Signature.isSignature = function (obj, ver) {
		return utils.isCompatible(obj, Signature, ver);
	};
	
	/*
	 * API versions for Signature:
	 * [1,0] -- initial ver
	 * [2,0] -- support for rsa in full ssh format, compat with sshpk-agent
	 *          hashAlgorithm property
	 * [2,1] -- first tagged version
	 */
	Signature.prototype._sshpkApiVersion = [2, 1];
	
	Signature._oldVersionDetect = function (obj) {
		assert.func(obj.toBuffer);
		if (obj.hasOwnProperty('hashAlgorithm')) return [2, 0];
		return [1, 0];
	};
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(290).Buffer))

/***/ }),
/* 488 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {'use strict';
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
	
	// Copyright 2015 Joyent, Inc.
	
	module.exports = {
		bufferSplit: bufferSplit,
		addRSAMissing: addRSAMissing,
		calculateDSAPublic: calculateDSAPublic,
		mpNormalize: mpNormalize,
		ecNormalize: ecNormalize,
		countZeros: countZeros,
		assertCompatible: assertCompatible,
		isCompatible: isCompatible,
		opensslKeyDeriv: opensslKeyDeriv,
		opensshCipherInfo: opensshCipherInfo
	};
	
	var assert = __webpack_require__(482);
	var PrivateKey = __webpack_require__(489);
	var crypto = __webpack_require__(392);
	
	var MAX_CLASS_DEPTH = 3;
	
	function isCompatible(obj, klass, needVer) {
		if (obj === null || (typeof obj === 'undefined' ? 'undefined' : _typeof(obj)) !== 'object') return false;
		if (needVer === undefined) needVer = klass.prototype._sshpkApiVersion;
		if (obj instanceof klass && klass.prototype._sshpkApiVersion[0] == needVer[0]) return true;
		var proto = Object.getPrototypeOf(obj);
		var depth = 0;
		while (proto.constructor.name !== klass.name) {
			proto = Object.getPrototypeOf(proto);
			if (!proto || ++depth > MAX_CLASS_DEPTH) return false;
		}
		if (proto.constructor.name !== klass.name) return false;
		var ver = proto._sshpkApiVersion;
		if (ver === undefined) ver = klass._oldVersionDetect(obj);
		if (ver[0] != needVer[0] || ver[1] < needVer[1]) return false;
		return true;
	}
	
	function assertCompatible(obj, klass, needVer, name) {
		if (name === undefined) name = 'object';
		assert.ok(obj, name + ' must not be null');
		assert.object(obj, name + ' must be an object');
		if (needVer === undefined) needVer = klass.prototype._sshpkApiVersion;
		if (obj instanceof klass && klass.prototype._sshpkApiVersion[0] == needVer[0]) return;
		var proto = Object.getPrototypeOf(obj);
		var depth = 0;
		while (proto.constructor.name !== klass.name) {
			proto = Object.getPrototypeOf(proto);
			assert.ok(proto && ++depth <= MAX_CLASS_DEPTH, name + ' must be a ' + klass.name + ' instance');
		}
		assert.strictEqual(proto.constructor.name, klass.name, name + ' must be a ' + klass.name + ' instance');
		var ver = proto._sshpkApiVersion;
		if (ver === undefined) ver = klass._oldVersionDetect(obj);
		assert.ok(ver[0] == needVer[0] && ver[1] >= needVer[1], name + ' must be compatible with ' + klass.name + ' klass ' + 'version ' + needVer[0] + '.' + needVer[1]);
	}
	
	var CIPHER_LEN = {
		'des-ede3-cbc': { key: 7, iv: 8 },
		'aes-128-cbc': { key: 16, iv: 16 }
	};
	var PKCS5_SALT_LEN = 8;
	
	function opensslKeyDeriv(cipher, salt, passphrase, count) {
		assert.buffer(salt, 'salt');
		assert.buffer(passphrase, 'passphrase');
		assert.number(count, 'iteration count');
	
		var clen = CIPHER_LEN[cipher];
		assert.object(clen, 'supported cipher');
	
		salt = salt.slice(0, PKCS5_SALT_LEN);
	
		var D, D_prev, bufs;
		var material = new Buffer(0);
		while (material.length < clen.key + clen.iv) {
			bufs = [];
			if (D_prev) bufs.push(D_prev);
			bufs.push(passphrase);
			bufs.push(salt);
			D = Buffer.concat(bufs);
			for (var j = 0; j < count; ++j) {
				D = crypto.createHash('md5').update(D).digest();
			}material = Buffer.concat([material, D]);
			D_prev = D;
		}
	
		return {
			key: material.slice(0, clen.key),
			iv: material.slice(clen.key, clen.key + clen.iv)
		};
	}
	
	/* Count leading zero bits on a buffer */
	function countZeros(buf) {
		var o = 0,
		    obit = 8;
		while (o < buf.length) {
			var mask = 1 << obit;
			if ((buf[o] & mask) === mask) break;
			obit--;
			if (obit < 0) {
				o++;
				obit = 8;
			}
		}
		return o * 8 + (8 - obit) - 1;
	}
	
	function bufferSplit(buf, chr) {
		assert.buffer(buf);
		assert.string(chr);
	
		var parts = [];
		var lastPart = 0;
		var matches = 0;
		for (var i = 0; i < buf.length; ++i) {
			if (buf[i] === chr.charCodeAt(matches)) ++matches;else if (buf[i] === chr.charCodeAt(0)) matches = 1;else matches = 0;
	
			if (matches >= chr.length) {
				var newPart = i + 1;
				parts.push(buf.slice(lastPart, newPart - matches));
				lastPart = newPart;
				matches = 0;
			}
		}
		if (lastPart <= buf.length) parts.push(buf.slice(lastPart, buf.length));
	
		return parts;
	}
	
	function ecNormalize(buf, addZero) {
		assert.buffer(buf);
		if (buf[0] === 0x00 && buf[1] === 0x04) {
			if (addZero) return buf;
			return buf.slice(1);
		} else if (buf[0] === 0x04) {
			if (!addZero) return buf;
		} else {
			while (buf[0] === 0x00) {
				buf = buf.slice(1);
			}if (buf[0] === 0x02 || buf[0] === 0x03) throw new Error('Compressed elliptic curve points ' + 'are not supported');
			if (buf[0] !== 0x04) throw new Error('Not a valid elliptic curve point');
			if (!addZero) return buf;
		}
		var b = new Buffer(buf.length + 1);
		b[0] = 0x0;
		buf.copy(b, 1);
		return b;
	}
	
	function mpNormalize(buf) {
		assert.buffer(buf);
		while (buf.length > 1 && buf[0] === 0x00 && (buf[1] & 0x80) === 0x00) {
			buf = buf.slice(1);
		}if ((buf[0] & 0x80) === 0x80) {
			var b = new Buffer(buf.length + 1);
			b[0] = 0x00;
			buf.copy(b, 1);
			buf = b;
		}
		return buf;
	}
	
	function bigintToMpBuf(bigint) {
		var buf = new Buffer(bigint.toByteArray());
		buf = mpNormalize(buf);
		return buf;
	}
	
	function calculateDSAPublic(g, p, x) {
		assert.buffer(g);
		assert.buffer(p);
		assert.buffer(x);
		try {
			var bigInt = __webpack_require__(492).BigInteger;
		} catch (e) {
			throw new Error('To load a PKCS#8 format DSA private key, ' + 'the node jsbn library is required.');
		}
		g = new bigInt(g);
		p = new bigInt(p);
		x = new bigInt(x);
		var y = g.modPow(x, p);
		var ybuf = bigintToMpBuf(y);
		return ybuf;
	}
	
	function addRSAMissing(key) {
		assert.object(key);
		assertCompatible(key, PrivateKey, [1, 1]);
		try {
			var bigInt = __webpack_require__(492).BigInteger;
		} catch (e) {
			throw new Error('To write a PEM private key from ' + 'this source, the node jsbn lib is required.');
		}
	
		var d = new bigInt(key.part.d.data);
		var buf;
	
		if (!key.part.dmodp) {
			var p = new bigInt(key.part.p.data);
			var dmodp = d.mod(p.subtract(1));
	
			buf = bigintToMpBuf(dmodp);
			key.part.dmodp = { name: 'dmodp', data: buf };
			key.parts.push(key.part.dmodp);
		}
		if (!key.part.dmodq) {
			var q = new bigInt(key.part.q.data);
			var dmodq = d.mod(q.subtract(1));
	
			buf = bigintToMpBuf(dmodq);
			key.part.dmodq = { name: 'dmodq', data: buf };
			key.parts.push(key.part.dmodq);
		}
	}
	
	function opensshCipherInfo(cipher) {
		var inf = {};
		switch (cipher) {
			case '3des-cbc':
				inf.keySize = 24;
				inf.blockSize = 8;
				inf.opensslName = 'des-ede3-cbc';
				break;
			case 'blowfish-cbc':
				inf.keySize = 16;
				inf.blockSize = 8;
				inf.opensslName = 'bf-cbc';
				break;
			case 'aes128-cbc':
			case 'aes128-ctr':
			case 'aes128-gcm@openssh.com':
				inf.keySize = 16;
				inf.blockSize = 16;
				inf.opensslName = 'aes-128-' + cipher.slice(7, 10);
				break;
			case 'aes192-cbc':
			case 'aes192-ctr':
			case 'aes192-gcm@openssh.com':
				inf.keySize = 24;
				inf.blockSize = 16;
				inf.opensslName = 'aes-192-' + cipher.slice(7, 10);
				break;
			case 'aes256-cbc':
			case 'aes256-ctr':
			case 'aes256-gcm@openssh.com':
				inf.keySize = 32;
				inf.blockSize = 16;
				inf.opensslName = 'aes-256-' + cipher.slice(7, 10);
				break;
			default:
				throw new Error('Unsupported openssl cipher "' + cipher + '"');
		}
		return inf;
	}
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(290).Buffer))

/***/ }),
/* 489 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {'use strict';
	
	// Copyright 2017 Joyent, Inc.
	
	module.exports = PrivateKey;
	
	var assert = __webpack_require__(482);
	var algs = __webpack_require__(483);
	var crypto = __webpack_require__(392);
	var Fingerprint = __webpack_require__(484);
	var Signature = __webpack_require__(487);
	var errs = __webpack_require__(485);
	var util = __webpack_require__(271);
	var utils = __webpack_require__(488);
	var dhe = __webpack_require__(490);
	var generateECDSA = dhe.generateECDSA;
	var generateED25519 = dhe.generateED25519;
	var edCompat;
	var ed;
	
	try {
		edCompat = __webpack_require__(503);
	} catch (e) {
		/* Just continue through, and bail out if we try to use it. */
	}
	
	var Key = __webpack_require__(481);
	
	var InvalidAlgorithmError = errs.InvalidAlgorithmError;
	var KeyParseError = errs.KeyParseError;
	var KeyEncryptedError = errs.KeyEncryptedError;
	
	var formats = {};
	formats['auto'] = __webpack_require__(504);
	formats['pem'] = __webpack_require__(505);
	formats['pkcs1'] = __webpack_require__(512);
	formats['pkcs8'] = __webpack_require__(513);
	formats['rfc4253'] = __webpack_require__(515);
	formats['ssh-private'] = __webpack_require__(514);
	formats['openssh'] = formats['ssh-private'];
	formats['ssh'] = formats['ssh-private'];
	
	function PrivateKey(opts) {
		assert.object(opts, 'options');
		Key.call(this, opts);
	
		this._pubCache = undefined;
	}
	util.inherits(PrivateKey, Key);
	
	PrivateKey.formats = formats;
	
	PrivateKey.prototype.toBuffer = function (format, options) {
		if (format === undefined) format = 'pkcs1';
		assert.string(format, 'format');
		assert.object(formats[format], 'formats[format]');
		assert.optionalObject(options, 'options');
	
		return formats[format].write(this, options);
	};
	
	PrivateKey.prototype.hash = function (algo) {
		return this.toPublic().hash(algo);
	};
	
	PrivateKey.prototype.toPublic = function () {
		if (this._pubCache) return this._pubCache;
	
		var algInfo = algs.info[this.type];
		var pubParts = [];
		for (var i = 0; i < algInfo.parts.length; ++i) {
			var p = algInfo.parts[i];
			pubParts.push(this.part[p]);
		}
	
		this._pubCache = new Key({
			type: this.type,
			source: this,
			parts: pubParts
		});
		if (this.comment) this._pubCache.comment = this.comment;
		return this._pubCache;
	};
	
	PrivateKey.prototype.derive = function (newType, newSize) {
		assert.string(newType, 'type');
		assert.optionalNumber(newSize, 'size');
		var priv, pub;
	
		if (this.type === 'ed25519' && newType === 'curve25519') {
			if (ed === undefined) ed = __webpack_require__(495);
	
			priv = this.part.r.data;
			if (priv[0] === 0x00) priv = priv.slice(1);
			priv = priv.slice(0, 32);
	
			pub = ed.dh.publicKey(priv);
			priv = utils.mpNormalize(Buffer.concat([priv, pub]));
	
			return new PrivateKey({
				type: 'curve25519',
				parts: [{ name: 'R', data: utils.mpNormalize(pub) }, { name: 'r', data: priv }]
			});
		} else if (this.type === 'curve25519' && newType === 'ed25519') {
			if (ed === undefined) ed = __webpack_require__(495);
	
			priv = this.part.r.data;
			if (priv[0] === 0x00) priv = priv.slice(1);
			priv = priv.slice(0, 32);
	
			pub = ed.eddsa.publicKey(priv.toString('binary'));
			pub = new Buffer(pub, 'binary');
	
			priv = utils.mpNormalize(Buffer.concat([priv, pub]));
	
			return new PrivateKey({
				type: 'ed25519',
				parts: [{ name: 'R', data: utils.mpNormalize(pub) }, { name: 'r', data: priv }]
			});
		}
		throw new Error('Key derivation not supported from ' + this.type + ' to ' + newType);
	};
	
	PrivateKey.prototype.createVerify = function (hashAlgo) {
		return this.toPublic().createVerify(hashAlgo);
	};
	
	PrivateKey.prototype.createSign = function (hashAlgo) {
		if (hashAlgo === undefined) hashAlgo = this.defaultHashAlgorithm();
		assert.string(hashAlgo, 'hash algorithm');
	
		/* ED25519 is not supported by OpenSSL, use a javascript impl. */
		if (this.type === 'ed25519' && edCompat !== undefined) return new edCompat.Signer(this, hashAlgo);
		if (this.type === 'curve25519') throw new Error('Curve25519 keys are not suitable for ' + 'signing or verification');
	
		var v, nm, err;
		try {
			nm = hashAlgo.toUpperCase();
			v = crypto.createSign(nm);
		} catch (e) {
			err = e;
		}
		if (v === undefined || err instanceof Error && err.message.match(/Unknown message digest/)) {
			nm = 'RSA-';
			nm += hashAlgo.toUpperCase();
			v = crypto.createSign(nm);
		}
		assert.ok(v, 'failed to create verifier');
		var oldSign = v.sign.bind(v);
		var key = this.toBuffer('pkcs1');
		var type = this.type;
		var curve = this.curve;
		v.sign = function () {
			var sig = oldSign(key);
			if (typeof sig === 'string') sig = new Buffer(sig, 'binary');
			sig = Signature.parse(sig, type, 'asn1');
			sig.hashAlgorithm = hashAlgo;
			sig.curve = curve;
			return sig;
		};
		return v;
	};
	
	PrivateKey.parse = function (data, format, options) {
		if (typeof data !== 'string') assert.buffer(data, 'data');
		if (format === undefined) format = 'auto';
		assert.string(format, 'format');
		if (typeof options === 'string') options = { filename: options };
		assert.optionalObject(options, 'options');
		if (options === undefined) options = {};
		assert.optionalString(options.filename, 'options.filename');
		if (options.filename === undefined) options.filename = '(unnamed)';
	
		assert.object(formats[format], 'formats[format]');
	
		try {
			var k = formats[format].read(data, options);
			assert.ok(k instanceof PrivateKey, 'key is not a private key');
			if (!k.comment) k.comment = options.filename;
			return k;
		} catch (e) {
			if (e.name === 'KeyEncryptedError') throw e;
			throw new KeyParseError(options.filename, format, e);
		}
	};
	
	PrivateKey.isPrivateKey = function (obj, ver) {
		return utils.isCompatible(obj, PrivateKey, ver);
	};
	
	PrivateKey.generate = function (type, options) {
		if (options === undefined) options = {};
		assert.object(options, 'options');
	
		switch (type) {
			case 'ecdsa':
				if (options.curve === undefined) options.curve = 'nistp256';
				assert.string(options.curve, 'options.curve');
				return generateECDSA(options.curve);
			case 'ed25519':
				return generateED25519();
			default:
				throw new Error('Key generation not supported with key ' + 'type "' + type + '"');
		}
	};
	
	/*
	 * API versions for PrivateKey:
	 * [1,0] -- initial ver
	 * [1,1] -- added auto, pkcs[18], openssh/ssh-private formats
	 * [1,2] -- added defaultHashAlgorithm
	 * [1,3] -- added derive, ed, createDH
	 * [1,4] -- first tagged version
	 */
	PrivateKey.prototype._sshpkApiVersion = [1, 4];
	
	PrivateKey._oldVersionDetect = function (obj) {
		assert.func(obj.toPublic);
		assert.func(obj.createSign);
		if (obj.derive) return [1, 3];
		if (obj.defaultHashAlgorithm) return [1, 2];
		if (obj.formats['auto']) return [1, 1];
		return [1, 0];
	};
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(290).Buffer))

/***/ }),
/* 490 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {'use strict';
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
	
	// Copyright 2017 Joyent, Inc.
	
	module.exports = {
		DiffieHellman: DiffieHellman,
		generateECDSA: generateECDSA,
		generateED25519: generateED25519
	};
	
	var assert = __webpack_require__(482);
	var crypto = __webpack_require__(392);
	var algs = __webpack_require__(483);
	var utils = __webpack_require__(488);
	var ed;
	var nacl;
	
	var Key = __webpack_require__(481);
	var PrivateKey = __webpack_require__(489);
	
	var CRYPTO_HAVE_ECDH = crypto.createECDH !== undefined;
	
	var ecdh, ec, jsbn;
	
	function DiffieHellman(key) {
		utils.assertCompatible(key, Key, [1, 4], 'key');
		this._isPriv = PrivateKey.isPrivateKey(key, [1, 3]);
		this._algo = key.type;
		this._curve = key.curve;
		this._key = key;
		if (key.type === 'dsa') {
			if (!CRYPTO_HAVE_ECDH) {
				throw new Error('Due to bugs in the node 0.10 ' + 'crypto API, node 0.12.x or later is required ' + 'to use DH');
			}
			this._dh = crypto.createDiffieHellman(key.part.p.data, undefined, key.part.g.data, undefined);
			this._p = key.part.p;
			this._g = key.part.g;
			if (this._isPriv) this._dh.setPrivateKey(key.part.x.data);
			this._dh.setPublicKey(key.part.y.data);
		} else if (key.type === 'ecdsa') {
			if (!CRYPTO_HAVE_ECDH) {
				if (ecdh === undefined) ecdh = __webpack_require__(491);
				if (ec === undefined) ec = __webpack_require__(493);
				if (jsbn === undefined) jsbn = __webpack_require__(492).BigInteger;
	
				this._ecParams = new X9ECParameters(this._curve);
	
				if (this._isPriv) {
					this._priv = new ECPrivate(this._ecParams, key.part.d.data);
				}
				return;
			}
	
			var curve = {
				'nistp256': 'prime256v1',
				'nistp384': 'secp384r1',
				'nistp521': 'secp521r1'
			}[key.curve];
			this._dh = crypto.createECDH(curve);
			if (_typeof(this._dh) !== 'object' || typeof this._dh.setPrivateKey !== 'function') {
				CRYPTO_HAVE_ECDH = false;
				DiffieHellman.call(this, key);
				return;
			}
			if (this._isPriv) this._dh.setPrivateKey(key.part.d.data);
			this._dh.setPublicKey(key.part.Q.data);
		} else if (key.type === 'curve25519') {
			if (ed === undefined) ed = __webpack_require__(495);
	
			if (this._isPriv) {
				this._priv = key.part.r.data;
				if (this._priv[0] === 0x00) this._priv = this._priv.slice(1);
				this._priv = this._priv.slice(0, 32);
			}
		} else {
			throw new Error('DH not supported for ' + key.type + ' keys');
		}
	}
	
	DiffieHellman.prototype.getPublicKey = function () {
		if (this._isPriv) return this._key.toPublic();
		return this._key;
	};
	
	DiffieHellman.prototype.getPrivateKey = function () {
		if (this._isPriv) return this._key;else return undefined;
	};
	DiffieHellman.prototype.getKey = DiffieHellman.prototype.getPrivateKey;
	
	DiffieHellman.prototype._keyCheck = function (pk, isPub) {
		assert.object(pk, 'key');
		if (!isPub) utils.assertCompatible(pk, PrivateKey, [1, 3], 'key');
		utils.assertCompatible(pk, Key, [1, 4], 'key');
	
		if (pk.type !== this._algo) {
			throw new Error('A ' + pk.type + ' key cannot be used in ' + this._algo + ' Diffie-Hellman');
		}
	
		if (pk.curve !== this._curve) {
			throw new Error('A key from the ' + pk.curve + ' curve ' + 'cannot be used with a ' + this._curve + ' Diffie-Hellman');
		}
	
		if (pk.type === 'dsa') {
			assert.deepEqual(pk.part.p, this._p, 'DSA key prime does not match');
			assert.deepEqual(pk.part.g, this._g, 'DSA key generator does not match');
		}
	};
	
	DiffieHellman.prototype.setKey = function (pk) {
		this._keyCheck(pk);
	
		if (pk.type === 'dsa') {
			this._dh.setPrivateKey(pk.part.x.data);
			this._dh.setPublicKey(pk.part.y.data);
		} else if (pk.type === 'ecdsa') {
			if (CRYPTO_HAVE_ECDH) {
				this._dh.setPrivateKey(pk.part.d.data);
				this._dh.setPublicKey(pk.part.Q.data);
			} else {
				this._priv = new ECPrivate(this._ecParams, pk.part.d.data);
			}
		} else if (pk.type === 'curve25519') {
			this._priv = pk.part.r.data;
			if (this._priv[0] === 0x00) this._priv = this._priv.slice(1);
			this._priv = this._priv.slice(0, 32);
		}
		this._key = pk;
		this._isPriv = true;
	};
	DiffieHellman.prototype.setPrivateKey = DiffieHellman.prototype.setKey;
	
	DiffieHellman.prototype.computeSecret = function (otherpk) {
		this._keyCheck(otherpk, true);
		if (!this._isPriv) throw new Error('DH exchange has not been initialized with ' + 'a private key yet');
	
		var pub;
		if (this._algo === 'dsa') {
			return this._dh.computeSecret(otherpk.part.y.data);
		} else if (this._algo === 'ecdsa') {
			if (CRYPTO_HAVE_ECDH) {
				return this._dh.computeSecret(otherpk.part.Q.data);
			} else {
				pub = new ECPublic(this._ecParams, otherpk.part.Q.data);
				return this._priv.deriveSharedSecret(pub);
			}
		} else if (this._algo === 'curve25519') {
			pub = otherpk.part.R.data;
			if (pub[0] === 0x00) pub = pub.slice(1);
	
			var secret = ed.dh.computeKey(this._priv.toString('binary'), pub.toString('binary'));
	
			return new Buffer(secret, 'binary');
		}
	
		throw new Error('Invalid algorithm: ' + this._algo);
	};
	
	DiffieHellman.prototype.generateKey = function () {
		var parts = [];
		var priv, pub;
		if (this._algo === 'dsa') {
			this._dh.generateKeys();
	
			parts.push({ name: 'p', data: this._p.data });
			parts.push({ name: 'q', data: this._key.part.q.data });
			parts.push({ name: 'g', data: this._g.data });
			parts.push({ name: 'y', data: this._dh.getPublicKey() });
			parts.push({ name: 'x', data: this._dh.getPrivateKey() });
			this._key = new PrivateKey({
				type: 'dsa',
				parts: parts
			});
			this._isPriv = true;
			return this._key;
		} else if (this._algo === 'ecdsa') {
			if (CRYPTO_HAVE_ECDH) {
				this._dh.generateKeys();
	
				parts.push({ name: 'curve',
					data: new Buffer(this._curve) });
				parts.push({ name: 'Q', data: this._dh.getPublicKey() });
				parts.push({ name: 'd', data: this._dh.getPrivateKey() });
				this._key = new PrivateKey({
					type: 'ecdsa',
					curve: this._curve,
					parts: parts
				});
				this._isPriv = true;
				return this._key;
			} else {
				var n = this._ecParams.getN();
				var r = new jsbn(crypto.randomBytes(n.bitLength()));
				var n1 = n.subtract(jsbn.ONE);
				priv = r.mod(n1).add(jsbn.ONE);
				pub = this._ecParams.getG().multiply(priv);
	
				priv = new Buffer(priv.toByteArray());
				pub = new Buffer(this._ecParams.getCurve().encodePointHex(pub), 'hex');
	
				this._priv = new ECPrivate(this._ecParams, priv);
	
				parts.push({ name: 'curve',
					data: new Buffer(this._curve) });
				parts.push({ name: 'Q', data: pub });
				parts.push({ name: 'd', data: priv });
	
				this._key = new PrivateKey({
					type: 'ecdsa',
					curve: this._curve,
					parts: parts
				});
				this._isPriv = true;
				return this._key;
			}
		} else if (this._algo === 'curve25519') {
			priv = ed.dh.generateKey();
			pub = ed.dh.publicKey(priv);
			this._priv = priv = new Buffer(priv, 'binary');
			pub = new Buffer(pub, 'binary');
	
			parts.push({ name: 'R', data: pub });
			parts.push({ name: 'r', data: Buffer.concat([priv, pub]) });
			this._key = new PrivateKey({
				type: 'curve25519',
				parts: parts
			});
			this._isPriv = true;
			return this._key;
		}
	
		throw new Error('Invalid algorithm: ' + this._algo);
	};
	DiffieHellman.prototype.generateKeys = DiffieHellman.prototype.generateKey;
	
	/* These are helpers for using ecc-jsbn (for node 0.10 compatibility). */
	
	function X9ECParameters(name) {
		var params = algs.curves[name];
		assert.object(params);
	
		var p = new jsbn(params.p);
		var a = new jsbn(params.a);
		var b = new jsbn(params.b);
		var n = new jsbn(params.n);
		var h = jsbn.ONE;
		var curve = new ec.ECCurveFp(p, a, b);
		var G = curve.decodePointHex(params.G.toString('hex'));
	
		this.curve = curve;
		this.g = G;
		this.n = n;
		this.h = h;
	}
	X9ECParameters.prototype.getCurve = function () {
		return this.curve;
	};
	X9ECParameters.prototype.getG = function () {
		return this.g;
	};
	X9ECParameters.prototype.getN = function () {
		return this.n;
	};
	X9ECParameters.prototype.getH = function () {
		return this.h;
	};
	
	function ECPublic(params, buffer) {
		this._params = params;
		if (buffer[0] === 0x00) buffer = buffer.slice(1);
		this._pub = params.getCurve().decodePointHex(buffer.toString('hex'));
	}
	
	function ECPrivate(params, buffer) {
		this._params = params;
		this._priv = new jsbn(utils.mpNormalize(buffer));
	}
	ECPrivate.prototype.deriveSharedSecret = function (pubKey) {
		assert.ok(pubKey instanceof ECPublic);
		var S = pubKey._pub.multiply(this._priv);
		return new Buffer(S.getX().toBigInteger().toByteArray());
	};
	
	function generateED25519() {
		if (nacl === undefined) nacl = __webpack_require__(501);
	
		var pair = nacl.sign.keyPair();
		var priv = new Buffer(pair.secretKey);
		var pub = new Buffer(pair.publicKey);
		assert.strictEqual(priv.length, 64);
		assert.strictEqual(pub.length, 32);
	
		var parts = [];
		parts.push({ name: 'R', data: pub });
		parts.push({ name: 'r', data: priv });
		var key = new PrivateKey({
			type: 'ed25519',
			parts: parts
		});
		return key;
	}
	
	/* Generates a new ECDSA private key on a given curve. */
	function generateECDSA(curve) {
		var parts = [];
		var key;
	
		if (CRYPTO_HAVE_ECDH) {
			/*
	   * Node crypto doesn't expose key generation directly, but the
	   * ECDH instances can generate keys. It turns out this just
	   * calls into the OpenSSL generic key generator, and we can
	   * read its output happily without doing an actual DH. So we
	   * use that here.
	   */
			var osCurve = {
				'nistp256': 'prime256v1',
				'nistp384': 'secp384r1',
				'nistp521': 'secp521r1'
			}[curve];
	
			var dh = crypto.createECDH(osCurve);
			dh.generateKeys();
	
			parts.push({ name: 'curve',
				data: new Buffer(curve) });
			parts.push({ name: 'Q', data: dh.getPublicKey() });
			parts.push({ name: 'd', data: dh.getPrivateKey() });
	
			key = new PrivateKey({
				type: 'ecdsa',
				curve: curve,
				parts: parts
			});
			return key;
		} else {
			if (ecdh === undefined) ecdh = __webpack_require__(491);
			if (ec === undefined) ec = __webpack_require__(493);
			if (jsbn === undefined) jsbn = __webpack_require__(492).BigInteger;
	
			var ecParams = new X9ECParameters(curve);
	
			/* This algorithm taken from FIPS PUB 186-4 (section B.4.1) */
			var n = ecParams.getN();
			/*
	   * The crypto.randomBytes() function can only give us whole
	   * bytes, so taking a nod from X9.62, we round up.
	   */
			var cByteLen = Math.ceil((n.bitLength() + 64) / 8);
			var c = new jsbn(crypto.randomBytes(cByteLen));
	
			var n1 = n.subtract(jsbn.ONE);
			var priv = c.mod(n1).add(jsbn.ONE);
			var pub = ecParams.getG().multiply(priv);
	
			priv = new Buffer(priv.toByteArray());
			pub = new Buffer(ecParams.getCurve().encodePointHex(pub), 'hex');
	
			parts.push({ name: 'curve', data: new Buffer(curve) });
			parts.push({ name: 'Q', data: pub });
			parts.push({ name: 'd', data: priv });
	
			key = new PrivateKey({
				type: 'ecdsa',
				curve: curve,
				parts: parts
			});
			return key;
		}
	}
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(290).Buffer))

/***/ }),
/* 491 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {"use strict";
	
	var crypto = __webpack_require__(392);
	var BigInteger = __webpack_require__(492).BigInteger;
	var ECPointFp = __webpack_require__(493).ECPointFp;
	exports.ECCurves = __webpack_require__(494);
	
	// zero prepad
	function unstupid(hex, len) {
	  return hex.length >= len ? hex : unstupid("0" + hex, len);
	}
	
	exports.ECKey = function (curve, key, isPublic) {
	  var priv;
	  var c = curve();
	  var n = c.getN();
	  var bytes = Math.floor(n.bitLength() / 8);
	
	  if (key) {
	    if (isPublic) {
	      var curve = c.getCurve();
	      //      var x = key.slice(1,bytes+1); // skip the 04 for uncompressed format
	      //      var y = key.slice(bytes+1);
	      //      this.P = new ECPointFp(curve,
	      //        curve.fromBigInteger(new BigInteger(x.toString("hex"), 16)),
	      //        curve.fromBigInteger(new BigInteger(y.toString("hex"), 16)));      
	      this.P = curve.decodePointHex(key.toString("hex"));
	    } else {
	      if (key.length != bytes) return false;
	      priv = new BigInteger(key.toString("hex"), 16);
	    }
	  } else {
	    var n1 = n.subtract(BigInteger.ONE);
	    var r = new BigInteger(crypto.randomBytes(n.bitLength()));
	    priv = r.mod(n1).add(BigInteger.ONE);
	    this.P = c.getG().multiply(priv);
	  }
	  if (this.P) {
	    //  var pubhex = unstupid(this.P.getX().toBigInteger().toString(16),bytes*2)+unstupid(this.P.getY().toBigInteger().toString(16),bytes*2);
	    //  this.PublicKey = new Buffer("04"+pubhex,"hex");
	    this.PublicKey = new Buffer(c.getCurve().encodeCompressedPointHex(this.P), "hex");
	  }
	  if (priv) {
	    this.PrivateKey = new Buffer(unstupid(priv.toString(16), bytes * 2), "hex");
	    this.deriveSharedSecret = function (key) {
	      if (!key || !key.P) return false;
	      var S = key.P.multiply(priv);
	      return new Buffer(unstupid(S.getX().toBigInteger().toString(16), bytes * 2), "hex");
	    };
	  }
	};
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(290).Buffer))

/***/ }),
/* 492 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	
	(function () {
	
	  // Copyright (c) 2005  Tom Wu
	  // All Rights Reserved.
	  // See "LICENSE" for details.
	
	  // Basic JavaScript BN library - subset useful for RSA encryption.
	
	  // Bits per digit
	  var dbits;
	
	  // JavaScript engine analysis
	  var canary = 0xdeadbeefcafe;
	  var j_lm = (canary & 0xffffff) == 0xefcafe;
	
	  // (public) Constructor
	  function BigInteger(a, b, c) {
	    if (a != null) if ("number" == typeof a) this.fromNumber(a, b, c);else if (b == null && "string" != typeof a) this.fromString(a, 256);else this.fromString(a, b);
	  }
	
	  // return new, unset BigInteger
	  function nbi() {
	    return new BigInteger(null);
	  }
	
	  // am: Compute w_j += (x*this_i), propagate carries,
	  // c is initial carry, returns final carry.
	  // c < 3*dvalue, x < 2*dvalue, this_i < dvalue
	  // We need to select the fastest one that works in this environment.
	
	  // am1: use a single mult and divide to get the high bits,
	  // max digit bits should be 26 because
	  // max internal value = 2*dvalue^2-2*dvalue (< 2^53)
	  function am1(i, x, w, j, c, n) {
	    while (--n >= 0) {
	      var v = x * this[i++] + w[j] + c;
	      c = Math.floor(v / 0x4000000);
	      w[j++] = v & 0x3ffffff;
	    }
	    return c;
	  }
	  // am2 avoids a big mult-and-extract completely.
	  // Max digit bits should be <= 30 because we do bitwise ops
	  // on values up to 2*hdvalue^2-hdvalue-1 (< 2^31)
	  function am2(i, x, w, j, c, n) {
	    var xl = x & 0x7fff,
	        xh = x >> 15;
	    while (--n >= 0) {
	      var l = this[i] & 0x7fff;
	      var h = this[i++] >> 15;
	      var m = xh * l + h * xl;
	      l = xl * l + ((m & 0x7fff) << 15) + w[j] + (c & 0x3fffffff);
	      c = (l >>> 30) + (m >>> 15) + xh * h + (c >>> 30);
	      w[j++] = l & 0x3fffffff;
	    }
	    return c;
	  }
	  // Alternately, set max digit bits to 28 since some
	  // browsers slow down when dealing with 32-bit numbers.
	  function am3(i, x, w, j, c, n) {
	    var xl = x & 0x3fff,
	        xh = x >> 14;
	    while (--n >= 0) {
	      var l = this[i] & 0x3fff;
	      var h = this[i++] >> 14;
	      var m = xh * l + h * xl;
	      l = xl * l + ((m & 0x3fff) << 14) + w[j] + c;
	      c = (l >> 28) + (m >> 14) + xh * h;
	      w[j++] = l & 0xfffffff;
	    }
	    return c;
	  }
	  var inBrowser = typeof navigator !== "undefined";
	  if (inBrowser && j_lm && navigator.appName == "Microsoft Internet Explorer") {
	    BigInteger.prototype.am = am2;
	    dbits = 30;
	  } else if (inBrowser && j_lm && navigator.appName != "Netscape") {
	    BigInteger.prototype.am = am1;
	    dbits = 26;
	  } else {
	    // Mozilla/Netscape seems to prefer am3
	    BigInteger.prototype.am = am3;
	    dbits = 28;
	  }
	
	  BigInteger.prototype.DB = dbits;
	  BigInteger.prototype.DM = (1 << dbits) - 1;
	  BigInteger.prototype.DV = 1 << dbits;
	
	  var BI_FP = 52;
	  BigInteger.prototype.FV = Math.pow(2, BI_FP);
	  BigInteger.prototype.F1 = BI_FP - dbits;
	  BigInteger.prototype.F2 = 2 * dbits - BI_FP;
	
	  // Digit conversions
	  var BI_RM = "0123456789abcdefghijklmnopqrstuvwxyz";
	  var BI_RC = new Array();
	  var rr, vv;
	  rr = "0".charCodeAt(0);
	  for (vv = 0; vv <= 9; ++vv) {
	    BI_RC[rr++] = vv;
	  }rr = "a".charCodeAt(0);
	  for (vv = 10; vv < 36; ++vv) {
	    BI_RC[rr++] = vv;
	  }rr = "A".charCodeAt(0);
	  for (vv = 10; vv < 36; ++vv) {
	    BI_RC[rr++] = vv;
	  }function int2char(n) {
	    return BI_RM.charAt(n);
	  }
	  function intAt(s, i) {
	    var c = BI_RC[s.charCodeAt(i)];
	    return c == null ? -1 : c;
	  }
	
	  // (protected) copy this to r
	  function bnpCopyTo(r) {
	    for (var i = this.t - 1; i >= 0; --i) {
	      r[i] = this[i];
	    }r.t = this.t;
	    r.s = this.s;
	  }
	
	  // (protected) set from integer value x, -DV <= x < DV
	  function bnpFromInt(x) {
	    this.t = 1;
	    this.s = x < 0 ? -1 : 0;
	    if (x > 0) this[0] = x;else if (x < -1) this[0] = x + this.DV;else this.t = 0;
	  }
	
	  // return bigint initialized to value
	  function nbv(i) {
	    var r = nbi();r.fromInt(i);return r;
	  }
	
	  // (protected) set from string and radix
	  function bnpFromString(s, b) {
	    var k;
	    if (b == 16) k = 4;else if (b == 8) k = 3;else if (b == 256) k = 8; // byte array
	    else if (b == 2) k = 1;else if (b == 32) k = 5;else if (b == 4) k = 2;else {
	        this.fromRadix(s, b);return;
	      }
	    this.t = 0;
	    this.s = 0;
	    var i = s.length,
	        mi = false,
	        sh = 0;
	    while (--i >= 0) {
	      var x = k == 8 ? s[i] & 0xff : intAt(s, i);
	      if (x < 0) {
	        if (s.charAt(i) == "-") mi = true;
	        continue;
	      }
	      mi = false;
	      if (sh == 0) this[this.t++] = x;else if (sh + k > this.DB) {
	        this[this.t - 1] |= (x & (1 << this.DB - sh) - 1) << sh;
	        this[this.t++] = x >> this.DB - sh;
	      } else this[this.t - 1] |= x << sh;
	      sh += k;
	      if (sh >= this.DB) sh -= this.DB;
	    }
	    if (k == 8 && (s[0] & 0x80) != 0) {
	      this.s = -1;
	      if (sh > 0) this[this.t - 1] |= (1 << this.DB - sh) - 1 << sh;
	    }
	    this.clamp();
	    if (mi) BigInteger.ZERO.subTo(this, this);
	  }
	
	  // (protected) clamp off excess high words
	  function bnpClamp() {
	    var c = this.s & this.DM;
	    while (this.t > 0 && this[this.t - 1] == c) {
	      --this.t;
	    }
	  }
	
	  // (public) return string representation in given radix
	  function bnToString(b) {
	    if (this.s < 0) return "-" + this.negate().toString(b);
	    var k;
	    if (b == 16) k = 4;else if (b == 8) k = 3;else if (b == 2) k = 1;else if (b == 32) k = 5;else if (b == 4) k = 2;else return this.toRadix(b);
	    var km = (1 << k) - 1,
	        d,
	        m = false,
	        r = "",
	        i = this.t;
	    var p = this.DB - i * this.DB % k;
	    if (i-- > 0) {
	      if (p < this.DB && (d = this[i] >> p) > 0) {
	        m = true;r = int2char(d);
	      }
	      while (i >= 0) {
	        if (p < k) {
	          d = (this[i] & (1 << p) - 1) << k - p;
	          d |= this[--i] >> (p += this.DB - k);
	        } else {
	          d = this[i] >> (p -= k) & km;
	          if (p <= 0) {
	            p += this.DB;--i;
	          }
	        }
	        if (d > 0) m = true;
	        if (m) r += int2char(d);
	      }
	    }
	    return m ? r : "0";
	  }
	
	  // (public) -this
	  function bnNegate() {
	    var r = nbi();BigInteger.ZERO.subTo(this, r);return r;
	  }
	
	  // (public) |this|
	  function bnAbs() {
	    return this.s < 0 ? this.negate() : this;
	  }
	
	  // (public) return + if this > a, - if this < a, 0 if equal
	  function bnCompareTo(a) {
	    var r = this.s - a.s;
	    if (r != 0) return r;
	    var i = this.t;
	    r = i - a.t;
	    if (r != 0) return this.s < 0 ? -r : r;
	    while (--i >= 0) {
	      if ((r = this[i] - a[i]) != 0) return r;
	    }return 0;
	  }
	
	  // returns bit length of the integer x
	  function nbits(x) {
	    var r = 1,
	        t;
	    if ((t = x >>> 16) != 0) {
	      x = t;r += 16;
	    }
	    if ((t = x >> 8) != 0) {
	      x = t;r += 8;
	    }
	    if ((t = x >> 4) != 0) {
	      x = t;r += 4;
	    }
	    if ((t = x >> 2) != 0) {
	      x = t;r += 2;
	    }
	    if ((t = x >> 1) != 0) {
	      x = t;r += 1;
	    }
	    return r;
	  }
	
	  // (public) return the number of bits in "this"
	  function bnBitLength() {
	    if (this.t <= 0) return 0;
	    return this.DB * (this.t - 1) + nbits(this[this.t - 1] ^ this.s & this.DM);
	  }
	
	  // (protected) r = this << n*DB
	  function bnpDLShiftTo(n, r) {
	    var i;
	    for (i = this.t - 1; i >= 0; --i) {
	      r[i + n] = this[i];
	    }for (i = n - 1; i >= 0; --i) {
	      r[i] = 0;
	    }r.t = this.t + n;
	    r.s = this.s;
	  }
	
	  // (protected) r = this >> n*DB
	  function bnpDRShiftTo(n, r) {
	    for (var i = n; i < this.t; ++i) {
	      r[i - n] = this[i];
	    }r.t = Math.max(this.t - n, 0);
	    r.s = this.s;
	  }
	
	  // (protected) r = this << n
	  function bnpLShiftTo(n, r) {
	    var bs = n % this.DB;
	    var cbs = this.DB - bs;
	    var bm = (1 << cbs) - 1;
	    var ds = Math.floor(n / this.DB),
	        c = this.s << bs & this.DM,
	        i;
	    for (i = this.t - 1; i >= 0; --i) {
	      r[i + ds + 1] = this[i] >> cbs | c;
	      c = (this[i] & bm) << bs;
	    }
	    for (i = ds - 1; i >= 0; --i) {
	      r[i] = 0;
	    }r[ds] = c;
	    r.t = this.t + ds + 1;
	    r.s = this.s;
	    r.clamp();
	  }
	
	  // (protected) r = this >> n
	  function bnpRShiftTo(n, r) {
	    r.s = this.s;
	    var ds = Math.floor(n / this.DB);
	    if (ds >= this.t) {
	      r.t = 0;return;
	    }
	    var bs = n % this.DB;
	    var cbs = this.DB - bs;
	    var bm = (1 << bs) - 1;
	    r[0] = this[ds] >> bs;
	    for (var i = ds + 1; i < this.t; ++i) {
	      r[i - ds - 1] |= (this[i] & bm) << cbs;
	      r[i - ds] = this[i] >> bs;
	    }
	    if (bs > 0) r[this.t - ds - 1] |= (this.s & bm) << cbs;
	    r.t = this.t - ds;
	    r.clamp();
	  }
	
	  // (protected) r = this - a
	  function bnpSubTo(a, r) {
	    var i = 0,
	        c = 0,
	        m = Math.min(a.t, this.t);
	    while (i < m) {
	      c += this[i] - a[i];
	      r[i++] = c & this.DM;
	      c >>= this.DB;
	    }
	    if (a.t < this.t) {
	      c -= a.s;
	      while (i < this.t) {
	        c += this[i];
	        r[i++] = c & this.DM;
	        c >>= this.DB;
	      }
	      c += this.s;
	    } else {
	      c += this.s;
	      while (i < a.t) {
	        c -= a[i];
	        r[i++] = c & this.DM;
	        c >>= this.DB;
	      }
	      c -= a.s;
	    }
	    r.s = c < 0 ? -1 : 0;
	    if (c < -1) r[i++] = this.DV + c;else if (c > 0) r[i++] = c;
	    r.t = i;
	    r.clamp();
	  }
	
	  // (protected) r = this * a, r != this,a (HAC 14.12)
	  // "this" should be the larger one if appropriate.
	  function bnpMultiplyTo(a, r) {
	    var x = this.abs(),
	        y = a.abs();
	    var i = x.t;
	    r.t = i + y.t;
	    while (--i >= 0) {
	      r[i] = 0;
	    }for (i = 0; i < y.t; ++i) {
	      r[i + x.t] = x.am(0, y[i], r, i, 0, x.t);
	    }r.s = 0;
	    r.clamp();
	    if (this.s != a.s) BigInteger.ZERO.subTo(r, r);
	  }
	
	  // (protected) r = this^2, r != this (HAC 14.16)
	  function bnpSquareTo(r) {
	    var x = this.abs();
	    var i = r.t = 2 * x.t;
	    while (--i >= 0) {
	      r[i] = 0;
	    }for (i = 0; i < x.t - 1; ++i) {
	      var c = x.am(i, x[i], r, 2 * i, 0, 1);
	      if ((r[i + x.t] += x.am(i + 1, 2 * x[i], r, 2 * i + 1, c, x.t - i - 1)) >= x.DV) {
	        r[i + x.t] -= x.DV;
	        r[i + x.t + 1] = 1;
	      }
	    }
	    if (r.t > 0) r[r.t - 1] += x.am(i, x[i], r, 2 * i, 0, 1);
	    r.s = 0;
	    r.clamp();
	  }
	
	  // (protected) divide this by m, quotient and remainder to q, r (HAC 14.20)
	  // r != q, this != m.  q or r may be null.
	  function bnpDivRemTo(m, q, r) {
	    var pm = m.abs();
	    if (pm.t <= 0) return;
	    var pt = this.abs();
	    if (pt.t < pm.t) {
	      if (q != null) q.fromInt(0);
	      if (r != null) this.copyTo(r);
	      return;
	    }
	    if (r == null) r = nbi();
	    var y = nbi(),
	        ts = this.s,
	        ms = m.s;
	    var nsh = this.DB - nbits(pm[pm.t - 1]); // normalize modulus
	    if (nsh > 0) {
	      pm.lShiftTo(nsh, y);pt.lShiftTo(nsh, r);
	    } else {
	      pm.copyTo(y);pt.copyTo(r);
	    }
	    var ys = y.t;
	    var y0 = y[ys - 1];
	    if (y0 == 0) return;
	    var yt = y0 * (1 << this.F1) + (ys > 1 ? y[ys - 2] >> this.F2 : 0);
	    var d1 = this.FV / yt,
	        d2 = (1 << this.F1) / yt,
	        e = 1 << this.F2;
	    var i = r.t,
	        j = i - ys,
	        t = q == null ? nbi() : q;
	    y.dlShiftTo(j, t);
	    if (r.compareTo(t) >= 0) {
	      r[r.t++] = 1;
	      r.subTo(t, r);
	    }
	    BigInteger.ONE.dlShiftTo(ys, t);
	    t.subTo(y, y); // "negative" y so we can replace sub with am later
	    while (y.t < ys) {
	      y[y.t++] = 0;
	    }while (--j >= 0) {
	      // Estimate quotient digit
	      var qd = r[--i] == y0 ? this.DM : Math.floor(r[i] * d1 + (r[i - 1] + e) * d2);
	      if ((r[i] += y.am(0, qd, r, j, 0, ys)) < qd) {
	        // Try it out
	        y.dlShiftTo(j, t);
	        r.subTo(t, r);
	        while (r[i] < --qd) {
	          r.subTo(t, r);
	        }
	      }
	    }
	    if (q != null) {
	      r.drShiftTo(ys, q);
	      if (ts != ms) BigInteger.ZERO.subTo(q, q);
	    }
	    r.t = ys;
	    r.clamp();
	    if (nsh > 0) r.rShiftTo(nsh, r); // Denormalize remainder
	    if (ts < 0) BigInteger.ZERO.subTo(r, r);
	  }
	
	  // (public) this mod a
	  function bnMod(a) {
	    var r = nbi();
	    this.abs().divRemTo(a, null, r);
	    if (this.s < 0 && r.compareTo(BigInteger.ZERO) > 0) a.subTo(r, r);
	    return r;
	  }
	
	  // Modular reduction using "classic" algorithm
	  function Classic(m) {
	    this.m = m;
	  }
	  function cConvert(x) {
	    if (x.s < 0 || x.compareTo(this.m) >= 0) return x.mod(this.m);else return x;
	  }
	  function cRevert(x) {
	    return x;
	  }
	  function cReduce(x) {
	    x.divRemTo(this.m, null, x);
	  }
	  function cMulTo(x, y, r) {
	    x.multiplyTo(y, r);this.reduce(r);
	  }
	  function cSqrTo(x, r) {
	    x.squareTo(r);this.reduce(r);
	  }
	
	  Classic.prototype.convert = cConvert;
	  Classic.prototype.revert = cRevert;
	  Classic.prototype.reduce = cReduce;
	  Classic.prototype.mulTo = cMulTo;
	  Classic.prototype.sqrTo = cSqrTo;
	
	  // (protected) return "-1/this % 2^DB"; useful for Mont. reduction
	  // justification:
	  //         xy == 1 (mod m)
	  //         xy =  1+km
	  //   xy(2-xy) = (1+km)(1-km)
	  // x[y(2-xy)] = 1-k^2m^2
	  // x[y(2-xy)] == 1 (mod m^2)
	  // if y is 1/x mod m, then y(2-xy) is 1/x mod m^2
	  // should reduce x and y(2-xy) by m^2 at each step to keep size bounded.
	  // JS multiply "overflows" differently from C/C++, so care is needed here.
	  function bnpInvDigit() {
	    if (this.t < 1) return 0;
	    var x = this[0];
	    if ((x & 1) == 0) return 0;
	    var y = x & 3; // y == 1/x mod 2^2
	    y = y * (2 - (x & 0xf) * y) & 0xf; // y == 1/x mod 2^4
	    y = y * (2 - (x & 0xff) * y) & 0xff; // y == 1/x mod 2^8
	    y = y * (2 - ((x & 0xffff) * y & 0xffff)) & 0xffff; // y == 1/x mod 2^16
	    // last step - calculate inverse mod DV directly;
	    // assumes 16 < DB <= 32 and assumes ability to handle 48-bit ints
	    y = y * (2 - x * y % this.DV) % this.DV; // y == 1/x mod 2^dbits
	    // we really want the negative inverse, and -DV < y < DV
	    return y > 0 ? this.DV - y : -y;
	  }
	
	  // Montgomery reduction
	  function Montgomery(m) {
	    this.m = m;
	    this.mp = m.invDigit();
	    this.mpl = this.mp & 0x7fff;
	    this.mph = this.mp >> 15;
	    this.um = (1 << m.DB - 15) - 1;
	    this.mt2 = 2 * m.t;
	  }
	
	  // xR mod m
	  function montConvert(x) {
	    var r = nbi();
	    x.abs().dlShiftTo(this.m.t, r);
	    r.divRemTo(this.m, null, r);
	    if (x.s < 0 && r.compareTo(BigInteger.ZERO) > 0) this.m.subTo(r, r);
	    return r;
	  }
	
	  // x/R mod m
	  function montRevert(x) {
	    var r = nbi();
	    x.copyTo(r);
	    this.reduce(r);
	    return r;
	  }
	
	  // x = x/R mod m (HAC 14.32)
	  function montReduce(x) {
	    while (x.t <= this.mt2) {
	      // pad x so am has enough room later
	      x[x.t++] = 0;
	    }for (var i = 0; i < this.m.t; ++i) {
	      // faster way of calculating u0 = x[i]*mp mod DV
	      var j = x[i] & 0x7fff;
	      var u0 = j * this.mpl + ((j * this.mph + (x[i] >> 15) * this.mpl & this.um) << 15) & x.DM;
	      // use am to combine the multiply-shift-add into one call
	      j = i + this.m.t;
	      x[j] += this.m.am(0, u0, x, i, 0, this.m.t);
	      // propagate carry
	      while (x[j] >= x.DV) {
	        x[j] -= x.DV;x[++j]++;
	      }
	    }
	    x.clamp();
	    x.drShiftTo(this.m.t, x);
	    if (x.compareTo(this.m) >= 0) x.subTo(this.m, x);
	  }
	
	  // r = "x^2/R mod m"; x != r
	  function montSqrTo(x, r) {
	    x.squareTo(r);this.reduce(r);
	  }
	
	  // r = "xy/R mod m"; x,y != r
	  function montMulTo(x, y, r) {
	    x.multiplyTo(y, r);this.reduce(r);
	  }
	
	  Montgomery.prototype.convert = montConvert;
	  Montgomery.prototype.revert = montRevert;
	  Montgomery.prototype.reduce = montReduce;
	  Montgomery.prototype.mulTo = montMulTo;
	  Montgomery.prototype.sqrTo = montSqrTo;
	
	  // (protected) true iff this is even
	  function bnpIsEven() {
	    return (this.t > 0 ? this[0] & 1 : this.s) == 0;
	  }
	
	  // (protected) this^e, e < 2^32, doing sqr and mul with "r" (HAC 14.79)
	  function bnpExp(e, z) {
	    if (e > 0xffffffff || e < 1) return BigInteger.ONE;
	    var r = nbi(),
	        r2 = nbi(),
	        g = z.convert(this),
	        i = nbits(e) - 1;
	    g.copyTo(r);
	    while (--i >= 0) {
	      z.sqrTo(r, r2);
	      if ((e & 1 << i) > 0) z.mulTo(r2, g, r);else {
	        var t = r;r = r2;r2 = t;
	      }
	    }
	    return z.revert(r);
	  }
	
	  // (public) this^e % m, 0 <= e < 2^32
	  function bnModPowInt(e, m) {
	    var z;
	    if (e < 256 || m.isEven()) z = new Classic(m);else z = new Montgomery(m);
	    return this.exp(e, z);
	  }
	
	  // protected
	  BigInteger.prototype.copyTo = bnpCopyTo;
	  BigInteger.prototype.fromInt = bnpFromInt;
	  BigInteger.prototype.fromString = bnpFromString;
	  BigInteger.prototype.clamp = bnpClamp;
	  BigInteger.prototype.dlShiftTo = bnpDLShiftTo;
	  BigInteger.prototype.drShiftTo = bnpDRShiftTo;
	  BigInteger.prototype.lShiftTo = bnpLShiftTo;
	  BigInteger.prototype.rShiftTo = bnpRShiftTo;
	  BigInteger.prototype.subTo = bnpSubTo;
	  BigInteger.prototype.multiplyTo = bnpMultiplyTo;
	  BigInteger.prototype.squareTo = bnpSquareTo;
	  BigInteger.prototype.divRemTo = bnpDivRemTo;
	  BigInteger.prototype.invDigit = bnpInvDigit;
	  BigInteger.prototype.isEven = bnpIsEven;
	  BigInteger.prototype.exp = bnpExp;
	
	  // public
	  BigInteger.prototype.toString = bnToString;
	  BigInteger.prototype.negate = bnNegate;
	  BigInteger.prototype.abs = bnAbs;
	  BigInteger.prototype.compareTo = bnCompareTo;
	  BigInteger.prototype.bitLength = bnBitLength;
	  BigInteger.prototype.mod = bnMod;
	  BigInteger.prototype.modPowInt = bnModPowInt;
	
	  // "constants"
	  BigInteger.ZERO = nbv(0);
	  BigInteger.ONE = nbv(1);
	
	  // Copyright (c) 2005-2009  Tom Wu
	  // All Rights Reserved.
	  // See "LICENSE" for details.
	
	  // Extended JavaScript BN functions, required for RSA private ops.
	
	  // Version 1.1: new BigInteger("0", 10) returns "proper" zero
	  // Version 1.2: square() API, isProbablePrime fix
	
	  // (public)
	  function bnClone() {
	    var r = nbi();this.copyTo(r);return r;
	  }
	
	  // (public) return value as integer
	  function bnIntValue() {
	    if (this.s < 0) {
	      if (this.t == 1) return this[0] - this.DV;else if (this.t == 0) return -1;
	    } else if (this.t == 1) return this[0];else if (this.t == 0) return 0;
	    // assumes 16 < DB < 32
	    return (this[1] & (1 << 32 - this.DB) - 1) << this.DB | this[0];
	  }
	
	  // (public) return value as byte
	  function bnByteValue() {
	    return this.t == 0 ? this.s : this[0] << 24 >> 24;
	  }
	
	  // (public) return value as short (assumes DB>=16)
	  function bnShortValue() {
	    return this.t == 0 ? this.s : this[0] << 16 >> 16;
	  }
	
	  // (protected) return x s.t. r^x < DV
	  function bnpChunkSize(r) {
	    return Math.floor(Math.LN2 * this.DB / Math.log(r));
	  }
	
	  // (public) 0 if this == 0, 1 if this > 0
	  function bnSigNum() {
	    if (this.s < 0) return -1;else if (this.t <= 0 || this.t == 1 && this[0] <= 0) return 0;else return 1;
	  }
	
	  // (protected) convert to radix string
	  function bnpToRadix(b) {
	    if (b == null) b = 10;
	    if (this.signum() == 0 || b < 2 || b > 36) return "0";
	    var cs = this.chunkSize(b);
	    var a = Math.pow(b, cs);
	    var d = nbv(a),
	        y = nbi(),
	        z = nbi(),
	        r = "";
	    this.divRemTo(d, y, z);
	    while (y.signum() > 0) {
	      r = (a + z.intValue()).toString(b).substr(1) + r;
	      y.divRemTo(d, y, z);
	    }
	    return z.intValue().toString(b) + r;
	  }
	
	  // (protected) convert from radix string
	  function bnpFromRadix(s, b) {
	    this.fromInt(0);
	    if (b == null) b = 10;
	    var cs = this.chunkSize(b);
	    var d = Math.pow(b, cs),
	        mi = false,
	        j = 0,
	        w = 0;
	    for (var i = 0; i < s.length; ++i) {
	      var x = intAt(s, i);
	      if (x < 0) {
	        if (s.charAt(i) == "-" && this.signum() == 0) mi = true;
	        continue;
	      }
	      w = b * w + x;
	      if (++j >= cs) {
	        this.dMultiply(d);
	        this.dAddOffset(w, 0);
	        j = 0;
	        w = 0;
	      }
	    }
	    if (j > 0) {
	      this.dMultiply(Math.pow(b, j));
	      this.dAddOffset(w, 0);
	    }
	    if (mi) BigInteger.ZERO.subTo(this, this);
	  }
	
	  // (protected) alternate constructor
	  function bnpFromNumber(a, b, c) {
	    if ("number" == typeof b) {
	      // new BigInteger(int,int,RNG)
	      if (a < 2) this.fromInt(1);else {
	        this.fromNumber(a, c);
	        if (!this.testBit(a - 1)) // force MSB set
	          this.bitwiseTo(BigInteger.ONE.shiftLeft(a - 1), op_or, this);
	        if (this.isEven()) this.dAddOffset(1, 0); // force odd
	        while (!this.isProbablePrime(b)) {
	          this.dAddOffset(2, 0);
	          if (this.bitLength() > a) this.subTo(BigInteger.ONE.shiftLeft(a - 1), this);
	        }
	      }
	    } else {
	      // new BigInteger(int,RNG)
	      var x = new Array(),
	          t = a & 7;
	      x.length = (a >> 3) + 1;
	      b.nextBytes(x);
	      if (t > 0) x[0] &= (1 << t) - 1;else x[0] = 0;
	      this.fromString(x, 256);
	    }
	  }
	
	  // (public) convert to bigendian byte array
	  function bnToByteArray() {
	    var i = this.t,
	        r = new Array();
	    r[0] = this.s;
	    var p = this.DB - i * this.DB % 8,
	        d,
	        k = 0;
	    if (i-- > 0) {
	      if (p < this.DB && (d = this[i] >> p) != (this.s & this.DM) >> p) r[k++] = d | this.s << this.DB - p;
	      while (i >= 0) {
	        if (p < 8) {
	          d = (this[i] & (1 << p) - 1) << 8 - p;
	          d |= this[--i] >> (p += this.DB - 8);
	        } else {
	          d = this[i] >> (p -= 8) & 0xff;
	          if (p <= 0) {
	            p += this.DB;--i;
	          }
	        }
	        if ((d & 0x80) != 0) d |= -256;
	        if (k == 0 && (this.s & 0x80) != (d & 0x80)) ++k;
	        if (k > 0 || d != this.s) r[k++] = d;
	      }
	    }
	    return r;
	  }
	
	  function bnEquals(a) {
	    return this.compareTo(a) == 0;
	  }
	  function bnMin(a) {
	    return this.compareTo(a) < 0 ? this : a;
	  }
	  function bnMax(a) {
	    return this.compareTo(a) > 0 ? this : a;
	  }
	
	  // (protected) r = this op a (bitwise)
	  function bnpBitwiseTo(a, op, r) {
	    var i,
	        f,
	        m = Math.min(a.t, this.t);
	    for (i = 0; i < m; ++i) {
	      r[i] = op(this[i], a[i]);
	    }if (a.t < this.t) {
	      f = a.s & this.DM;
	      for (i = m; i < this.t; ++i) {
	        r[i] = op(this[i], f);
	      }r.t = this.t;
	    } else {
	      f = this.s & this.DM;
	      for (i = m; i < a.t; ++i) {
	        r[i] = op(f, a[i]);
	      }r.t = a.t;
	    }
	    r.s = op(this.s, a.s);
	    r.clamp();
	  }
	
	  // (public) this & a
	  function op_and(x, y) {
	    return x & y;
	  }
	  function bnAnd(a) {
	    var r = nbi();this.bitwiseTo(a, op_and, r);return r;
	  }
	
	  // (public) this | a
	  function op_or(x, y) {
	    return x | y;
	  }
	  function bnOr(a) {
	    var r = nbi();this.bitwiseTo(a, op_or, r);return r;
	  }
	
	  // (public) this ^ a
	  function op_xor(x, y) {
	    return x ^ y;
	  }
	  function bnXor(a) {
	    var r = nbi();this.bitwiseTo(a, op_xor, r);return r;
	  }
	
	  // (public) this & ~a
	  function op_andnot(x, y) {
	    return x & ~y;
	  }
	  function bnAndNot(a) {
	    var r = nbi();this.bitwiseTo(a, op_andnot, r);return r;
	  }
	
	  // (public) ~this
	  function bnNot() {
	    var r = nbi();
	    for (var i = 0; i < this.t; ++i) {
	      r[i] = this.DM & ~this[i];
	    }r.t = this.t;
	    r.s = ~this.s;
	    return r;
	  }
	
	  // (public) this << n
	  function bnShiftLeft(n) {
	    var r = nbi();
	    if (n < 0) this.rShiftTo(-n, r);else this.lShiftTo(n, r);
	    return r;
	  }
	
	  // (public) this >> n
	  function bnShiftRight(n) {
	    var r = nbi();
	    if (n < 0) this.lShiftTo(-n, r);else this.rShiftTo(n, r);
	    return r;
	  }
	
	  // return index of lowest 1-bit in x, x < 2^31
	  function lbit(x) {
	    if (x == 0) return -1;
	    var r = 0;
	    if ((x & 0xffff) == 0) {
	      x >>= 16;r += 16;
	    }
	    if ((x & 0xff) == 0) {
	      x >>= 8;r += 8;
	    }
	    if ((x & 0xf) == 0) {
	      x >>= 4;r += 4;
	    }
	    if ((x & 3) == 0) {
	      x >>= 2;r += 2;
	    }
	    if ((x & 1) == 0) ++r;
	    return r;
	  }
	
	  // (public) returns index of lowest 1-bit (or -1 if none)
	  function bnGetLowestSetBit() {
	    for (var i = 0; i < this.t; ++i) {
	      if (this[i] != 0) return i * this.DB + lbit(this[i]);
	    }if (this.s < 0) return this.t * this.DB;
	    return -1;
	  }
	
	  // return number of 1 bits in x
	  function cbit(x) {
	    var r = 0;
	    while (x != 0) {
	      x &= x - 1;++r;
	    }
	    return r;
	  }
	
	  // (public) return number of set bits
	  function bnBitCount() {
	    var r = 0,
	        x = this.s & this.DM;
	    for (var i = 0; i < this.t; ++i) {
	      r += cbit(this[i] ^ x);
	    }return r;
	  }
	
	  // (public) true iff nth bit is set
	  function bnTestBit(n) {
	    var j = Math.floor(n / this.DB);
	    if (j >= this.t) return this.s != 0;
	    return (this[j] & 1 << n % this.DB) != 0;
	  }
	
	  // (protected) this op (1<<n)
	  function bnpChangeBit(n, op) {
	    var r = BigInteger.ONE.shiftLeft(n);
	    this.bitwiseTo(r, op, r);
	    return r;
	  }
	
	  // (public) this | (1<<n)
	  function bnSetBit(n) {
	    return this.changeBit(n, op_or);
	  }
	
	  // (public) this & ~(1<<n)
	  function bnClearBit(n) {
	    return this.changeBit(n, op_andnot);
	  }
	
	  // (public) this ^ (1<<n)
	  function bnFlipBit(n) {
	    return this.changeBit(n, op_xor);
	  }
	
	  // (protected) r = this + a
	  function bnpAddTo(a, r) {
	    var i = 0,
	        c = 0,
	        m = Math.min(a.t, this.t);
	    while (i < m) {
	      c += this[i] + a[i];
	      r[i++] = c & this.DM;
	      c >>= this.DB;
	    }
	    if (a.t < this.t) {
	      c += a.s;
	      while (i < this.t) {
	        c += this[i];
	        r[i++] = c & this.DM;
	        c >>= this.DB;
	      }
	      c += this.s;
	    } else {
	      c += this.s;
	      while (i < a.t) {
	        c += a[i];
	        r[i++] = c & this.DM;
	        c >>= this.DB;
	      }
	      c += a.s;
	    }
	    r.s = c < 0 ? -1 : 0;
	    if (c > 0) r[i++] = c;else if (c < -1) r[i++] = this.DV + c;
	    r.t = i;
	    r.clamp();
	  }
	
	  // (public) this + a
	  function bnAdd(a) {
	    var r = nbi();this.addTo(a, r);return r;
	  }
	
	  // (public) this - a
	  function bnSubtract(a) {
	    var r = nbi();this.subTo(a, r);return r;
	  }
	
	  // (public) this * a
	  function bnMultiply(a) {
	    var r = nbi();this.multiplyTo(a, r);return r;
	  }
	
	  // (public) this^2
	  function bnSquare() {
	    var r = nbi();this.squareTo(r);return r;
	  }
	
	  // (public) this / a
	  function bnDivide(a) {
	    var r = nbi();this.divRemTo(a, r, null);return r;
	  }
	
	  // (public) this % a
	  function bnRemainder(a) {
	    var r = nbi();this.divRemTo(a, null, r);return r;
	  }
	
	  // (public) [this/a,this%a]
	  function bnDivideAndRemainder(a) {
	    var q = nbi(),
	        r = nbi();
	    this.divRemTo(a, q, r);
	    return new Array(q, r);
	  }
	
	  // (protected) this *= n, this >= 0, 1 < n < DV
	  function bnpDMultiply(n) {
	    this[this.t] = this.am(0, n - 1, this, 0, 0, this.t);
	    ++this.t;
	    this.clamp();
	  }
	
	  // (protected) this += n << w words, this >= 0
	  function bnpDAddOffset(n, w) {
	    if (n == 0) return;
	    while (this.t <= w) {
	      this[this.t++] = 0;
	    }this[w] += n;
	    while (this[w] >= this.DV) {
	      this[w] -= this.DV;
	      if (++w >= this.t) this[this.t++] = 0;
	      ++this[w];
	    }
	  }
	
	  // A "null" reducer
	  function NullExp() {}
	  function nNop(x) {
	    return x;
	  }
	  function nMulTo(x, y, r) {
	    x.multiplyTo(y, r);
	  }
	  function nSqrTo(x, r) {
	    x.squareTo(r);
	  }
	
	  NullExp.prototype.convert = nNop;
	  NullExp.prototype.revert = nNop;
	  NullExp.prototype.mulTo = nMulTo;
	  NullExp.prototype.sqrTo = nSqrTo;
	
	  // (public) this^e
	  function bnPow(e) {
	    return this.exp(e, new NullExp());
	  }
	
	  // (protected) r = lower n words of "this * a", a.t <= n
	  // "this" should be the larger one if appropriate.
	  function bnpMultiplyLowerTo(a, n, r) {
	    var i = Math.min(this.t + a.t, n);
	    r.s = 0; // assumes a,this >= 0
	    r.t = i;
	    while (i > 0) {
	      r[--i] = 0;
	    }var j;
	    for (j = r.t - this.t; i < j; ++i) {
	      r[i + this.t] = this.am(0, a[i], r, i, 0, this.t);
	    }for (j = Math.min(a.t, n); i < j; ++i) {
	      this.am(0, a[i], r, i, 0, n - i);
	    }r.clamp();
	  }
	
	  // (protected) r = "this * a" without lower n words, n > 0
	  // "this" should be the larger one if appropriate.
	  function bnpMultiplyUpperTo(a, n, r) {
	    --n;
	    var i = r.t = this.t + a.t - n;
	    r.s = 0; // assumes a,this >= 0
	    while (--i >= 0) {
	      r[i] = 0;
	    }for (i = Math.max(n - this.t, 0); i < a.t; ++i) {
	      r[this.t + i - n] = this.am(n - i, a[i], r, 0, 0, this.t + i - n);
	    }r.clamp();
	    r.drShiftTo(1, r);
	  }
	
	  // Barrett modular reduction
	  function Barrett(m) {
	    // setup Barrett
	    this.r2 = nbi();
	    this.q3 = nbi();
	    BigInteger.ONE.dlShiftTo(2 * m.t, this.r2);
	    this.mu = this.r2.divide(m);
	    this.m = m;
	  }
	
	  function barrettConvert(x) {
	    if (x.s < 0 || x.t > 2 * this.m.t) return x.mod(this.m);else if (x.compareTo(this.m) < 0) return x;else {
	      var r = nbi();x.copyTo(r);this.reduce(r);return r;
	    }
	  }
	
	  function barrettRevert(x) {
	    return x;
	  }
	
	  // x = x mod m (HAC 14.42)
	  function barrettReduce(x) {
	    x.drShiftTo(this.m.t - 1, this.r2);
	    if (x.t > this.m.t + 1) {
	      x.t = this.m.t + 1;x.clamp();
	    }
	    this.mu.multiplyUpperTo(this.r2, this.m.t + 1, this.q3);
	    this.m.multiplyLowerTo(this.q3, this.m.t + 1, this.r2);
	    while (x.compareTo(this.r2) < 0) {
	      x.dAddOffset(1, this.m.t + 1);
	    }x.subTo(this.r2, x);
	    while (x.compareTo(this.m) >= 0) {
	      x.subTo(this.m, x);
	    }
	  }
	
	  // r = x^2 mod m; x != r
	  function barrettSqrTo(x, r) {
	    x.squareTo(r);this.reduce(r);
	  }
	
	  // r = x*y mod m; x,y != r
	  function barrettMulTo(x, y, r) {
	    x.multiplyTo(y, r);this.reduce(r);
	  }
	
	  Barrett.prototype.convert = barrettConvert;
	  Barrett.prototype.revert = barrettRevert;
	  Barrett.prototype.reduce = barrettReduce;
	  Barrett.prototype.mulTo = barrettMulTo;
	  Barrett.prototype.sqrTo = barrettSqrTo;
	
	  // (public) this^e % m (HAC 14.85)
	  function bnModPow(e, m) {
	    var i = e.bitLength(),
	        k,
	        r = nbv(1),
	        z;
	    if (i <= 0) return r;else if (i < 18) k = 1;else if (i < 48) k = 3;else if (i < 144) k = 4;else if (i < 768) k = 5;else k = 6;
	    if (i < 8) z = new Classic(m);else if (m.isEven()) z = new Barrett(m);else z = new Montgomery(m);
	
	    // precomputation
	    var g = new Array(),
	        n = 3,
	        k1 = k - 1,
	        km = (1 << k) - 1;
	    g[1] = z.convert(this);
	    if (k > 1) {
	      var g2 = nbi();
	      z.sqrTo(g[1], g2);
	      while (n <= km) {
	        g[n] = nbi();
	        z.mulTo(g2, g[n - 2], g[n]);
	        n += 2;
	      }
	    }
	
	    var j = e.t - 1,
	        w,
	        is1 = true,
	        r2 = nbi(),
	        t;
	    i = nbits(e[j]) - 1;
	    while (j >= 0) {
	      if (i >= k1) w = e[j] >> i - k1 & km;else {
	        w = (e[j] & (1 << i + 1) - 1) << k1 - i;
	        if (j > 0) w |= e[j - 1] >> this.DB + i - k1;
	      }
	
	      n = k;
	      while ((w & 1) == 0) {
	        w >>= 1;--n;
	      }
	      if ((i -= n) < 0) {
	        i += this.DB;--j;
	      }
	      if (is1) {
	        // ret == 1, don't bother squaring or multiplying it
	        g[w].copyTo(r);
	        is1 = false;
	      } else {
	        while (n > 1) {
	          z.sqrTo(r, r2);z.sqrTo(r2, r);n -= 2;
	        }
	        if (n > 0) z.sqrTo(r, r2);else {
	          t = r;r = r2;r2 = t;
	        }
	        z.mulTo(r2, g[w], r);
	      }
	
	      while (j >= 0 && (e[j] & 1 << i) == 0) {
	        z.sqrTo(r, r2);t = r;r = r2;r2 = t;
	        if (--i < 0) {
	          i = this.DB - 1;--j;
	        }
	      }
	    }
	    return z.revert(r);
	  }
	
	  // (public) gcd(this,a) (HAC 14.54)
	  function bnGCD(a) {
	    var x = this.s < 0 ? this.negate() : this.clone();
	    var y = a.s < 0 ? a.negate() : a.clone();
	    if (x.compareTo(y) < 0) {
	      var t = x;x = y;y = t;
	    }
	    var i = x.getLowestSetBit(),
	        g = y.getLowestSetBit();
	    if (g < 0) return x;
	    if (i < g) g = i;
	    if (g > 0) {
	      x.rShiftTo(g, x);
	      y.rShiftTo(g, y);
	    }
	    while (x.signum() > 0) {
	      if ((i = x.getLowestSetBit()) > 0) x.rShiftTo(i, x);
	      if ((i = y.getLowestSetBit()) > 0) y.rShiftTo(i, y);
	      if (x.compareTo(y) >= 0) {
	        x.subTo(y, x);
	        x.rShiftTo(1, x);
	      } else {
	        y.subTo(x, y);
	        y.rShiftTo(1, y);
	      }
	    }
	    if (g > 0) y.lShiftTo(g, y);
	    return y;
	  }
	
	  // (protected) this % n, n < 2^26
	  function bnpModInt(n) {
	    if (n <= 0) return 0;
	    var d = this.DV % n,
	        r = this.s < 0 ? n - 1 : 0;
	    if (this.t > 0) if (d == 0) r = this[0] % n;else for (var i = this.t - 1; i >= 0; --i) {
	      r = (d * r + this[i]) % n;
	    }return r;
	  }
	
	  // (public) 1/this % m (HAC 14.61)
	  function bnModInverse(m) {
	    var ac = m.isEven();
	    if (this.isEven() && ac || m.signum() == 0) return BigInteger.ZERO;
	    var u = m.clone(),
	        v = this.clone();
	    var a = nbv(1),
	        b = nbv(0),
	        c = nbv(0),
	        d = nbv(1);
	    while (u.signum() != 0) {
	      while (u.isEven()) {
	        u.rShiftTo(1, u);
	        if (ac) {
	          if (!a.isEven() || !b.isEven()) {
	            a.addTo(this, a);b.subTo(m, b);
	          }
	          a.rShiftTo(1, a);
	        } else if (!b.isEven()) b.subTo(m, b);
	        b.rShiftTo(1, b);
	      }
	      while (v.isEven()) {
	        v.rShiftTo(1, v);
	        if (ac) {
	          if (!c.isEven() || !d.isEven()) {
	            c.addTo(this, c);d.subTo(m, d);
	          }
	          c.rShiftTo(1, c);
	        } else if (!d.isEven()) d.subTo(m, d);
	        d.rShiftTo(1, d);
	      }
	      if (u.compareTo(v) >= 0) {
	        u.subTo(v, u);
	        if (ac) a.subTo(c, a);
	        b.subTo(d, b);
	      } else {
	        v.subTo(u, v);
	        if (ac) c.subTo(a, c);
	        d.subTo(b, d);
	      }
	    }
	    if (v.compareTo(BigInteger.ONE) != 0) return BigInteger.ZERO;
	    if (d.compareTo(m) >= 0) return d.subtract(m);
	    if (d.signum() < 0) d.addTo(m, d);else return d;
	    if (d.signum() < 0) return d.add(m);else return d;
	  }
	
	  var lowprimes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997];
	  var lplim = (1 << 26) / lowprimes[lowprimes.length - 1];
	
	  // (public) test primality with certainty >= 1-.5^t
	  function bnIsProbablePrime(t) {
	    var i,
	        x = this.abs();
	    if (x.t == 1 && x[0] <= lowprimes[lowprimes.length - 1]) {
	      for (i = 0; i < lowprimes.length; ++i) {
	        if (x[0] == lowprimes[i]) return true;
	      }return false;
	    }
	    if (x.isEven()) return false;
	    i = 1;
	    while (i < lowprimes.length) {
	      var m = lowprimes[i],
	          j = i + 1;
	      while (j < lowprimes.length && m < lplim) {
	        m *= lowprimes[j++];
	      }m = x.modInt(m);
	      while (i < j) {
	        if (m % lowprimes[i++] == 0) return false;
	      }
	    }
	    return x.millerRabin(t);
	  }
	
	  // (protected) true if probably prime (HAC 4.24, Miller-Rabin)
	  function bnpMillerRabin(t) {
	    var n1 = this.subtract(BigInteger.ONE);
	    var k = n1.getLowestSetBit();
	    if (k <= 0) return false;
	    var r = n1.shiftRight(k);
	    t = t + 1 >> 1;
	    if (t > lowprimes.length) t = lowprimes.length;
	    var a = nbi();
	    for (var i = 0; i < t; ++i) {
	      //Pick bases at random, instead of starting at 2
	      a.fromInt(lowprimes[Math.floor(Math.random() * lowprimes.length)]);
	      var y = a.modPow(r, this);
	      if (y.compareTo(BigInteger.ONE) != 0 && y.compareTo(n1) != 0) {
	        var j = 1;
	        while (j++ < k && y.compareTo(n1) != 0) {
	          y = y.modPowInt(2, this);
	          if (y.compareTo(BigInteger.ONE) == 0) return false;
	        }
	        if (y.compareTo(n1) != 0) return false;
	      }
	    }
	    return true;
	  }
	
	  // protected
	  BigInteger.prototype.chunkSize = bnpChunkSize;
	  BigInteger.prototype.toRadix = bnpToRadix;
	  BigInteger.prototype.fromRadix = bnpFromRadix;
	  BigInteger.prototype.fromNumber = bnpFromNumber;
	  BigInteger.prototype.bitwiseTo = bnpBitwiseTo;
	  BigInteger.prototype.changeBit = bnpChangeBit;
	  BigInteger.prototype.addTo = bnpAddTo;
	  BigInteger.prototype.dMultiply = bnpDMultiply;
	  BigInteger.prototype.dAddOffset = bnpDAddOffset;
	  BigInteger.prototype.multiplyLowerTo = bnpMultiplyLowerTo;
	  BigInteger.prototype.multiplyUpperTo = bnpMultiplyUpperTo;
	  BigInteger.prototype.modInt = bnpModInt;
	  BigInteger.prototype.millerRabin = bnpMillerRabin;
	
	  // public
	  BigInteger.prototype.clone = bnClone;
	  BigInteger.prototype.intValue = bnIntValue;
	  BigInteger.prototype.byteValue = bnByteValue;
	  BigInteger.prototype.shortValue = bnShortValue;
	  BigInteger.prototype.signum = bnSigNum;
	  BigInteger.prototype.toByteArray = bnToByteArray;
	  BigInteger.prototype.equals = bnEquals;
	  BigInteger.prototype.min = bnMin;
	  BigInteger.prototype.max = bnMax;
	  BigInteger.prototype.and = bnAnd;
	  BigInteger.prototype.or = bnOr;
	  BigInteger.prototype.xor = bnXor;
	  BigInteger.prototype.andNot = bnAndNot;
	  BigInteger.prototype.not = bnNot;
	  BigInteger.prototype.shiftLeft = bnShiftLeft;
	  BigInteger.prototype.shiftRight = bnShiftRight;
	  BigInteger.prototype.getLowestSetBit = bnGetLowestSetBit;
	  BigInteger.prototype.bitCount = bnBitCount;
	  BigInteger.prototype.testBit = bnTestBit;
	  BigInteger.prototype.setBit = bnSetBit;
	  BigInteger.prototype.clearBit = bnClearBit;
	  BigInteger.prototype.flipBit = bnFlipBit;
	  BigInteger.prototype.add = bnAdd;
	  BigInteger.prototype.subtract = bnSubtract;
	  BigInteger.prototype.multiply = bnMultiply;
	  BigInteger.prototype.divide = bnDivide;
	  BigInteger.prototype.remainder = bnRemainder;
	  BigInteger.prototype.divideAndRemainder = bnDivideAndRemainder;
	  BigInteger.prototype.modPow = bnModPow;
	  BigInteger.prototype.modInverse = bnModInverse;
	  BigInteger.prototype.pow = bnPow;
	  BigInteger.prototype.gcd = bnGCD;
	  BigInteger.prototype.isProbablePrime = bnIsProbablePrime;
	
	  // JSBN-specific extension
	  BigInteger.prototype.square = bnSquare;
	
	  // Expose the Barrett function
	  BigInteger.prototype.Barrett = Barrett;
	
	  // BigInteger interfaces not implemented in jsbn:
	
	  // BigInteger(int signum, byte[] magnitude)
	  // double doubleValue()
	  // float floatValue()
	  // int hashCode()
	  // long longValue()
	  // static BigInteger valueOf(long val)
	
	  // Random number generator - requires a PRNG backend, e.g. prng4.js
	
	  // For best results, put code like
	  // <body onClick='rng_seed_time();' onKeyPress='rng_seed_time();'>
	  // in your main HTML document.
	
	  var rng_state;
	  var rng_pool;
	  var rng_pptr;
	
	  // Mix in a 32-bit integer into the pool
	  function rng_seed_int(x) {
	    rng_pool[rng_pptr++] ^= x & 255;
	    rng_pool[rng_pptr++] ^= x >> 8 & 255;
	    rng_pool[rng_pptr++] ^= x >> 16 & 255;
	    rng_pool[rng_pptr++] ^= x >> 24 & 255;
	    if (rng_pptr >= rng_psize) rng_pptr -= rng_psize;
	  }
	
	  // Mix in the current time (w/milliseconds) into the pool
	  function rng_seed_time() {
	    rng_seed_int(new Date().getTime());
	  }
	
	  // Initialize the pool with junk if needed.
	  if (rng_pool == null) {
	    rng_pool = new Array();
	    rng_pptr = 0;
	    var t;
	    if (typeof window !== "undefined" && window.crypto) {
	      if (window.crypto.getRandomValues) {
	        // Use webcrypto if available
	        var ua = new Uint8Array(32);
	        window.crypto.getRandomValues(ua);
	        for (t = 0; t < 32; ++t) {
	          rng_pool[rng_pptr++] = ua[t];
	        }
	      } else if (navigator.appName == "Netscape" && navigator.appVersion < "5") {
	        // Extract entropy (256 bits) from NS4 RNG if available
	        var z = window.crypto.random(32);
	        for (t = 0; t < z.length; ++t) {
	          rng_pool[rng_pptr++] = z.charCodeAt(t) & 255;
	        }
	      }
	    }
	    while (rng_pptr < rng_psize) {
	      // extract some randomness from Math.random()
	      t = Math.floor(65536 * Math.random());
	      rng_pool[rng_pptr++] = t >>> 8;
	      rng_pool[rng_pptr++] = t & 255;
	    }
	    rng_pptr = 0;
	    rng_seed_time();
	    //rng_seed_int(window.screenX);
	    //rng_seed_int(window.screenY);
	  }
	
	  function rng_get_byte() {
	    if (rng_state == null) {
	      rng_seed_time();
	      rng_state = prng_newstate();
	      rng_state.init(rng_pool);
	      for (rng_pptr = 0; rng_pptr < rng_pool.length; ++rng_pptr) {
	        rng_pool[rng_pptr] = 0;
	      }rng_pptr = 0;
	      //rng_pool = null;
	    }
	    // TODO: allow reseeding after first request
	    return rng_state.next();
	  }
	
	  function rng_get_bytes(ba) {
	    var i;
	    for (i = 0; i < ba.length; ++i) {
	      ba[i] = rng_get_byte();
	    }
	  }
	
	  function SecureRandom() {}
	
	  SecureRandom.prototype.nextBytes = rng_get_bytes;
	
	  // prng4.js - uses Arcfour as a PRNG
	
	  function Arcfour() {
	    this.i = 0;
	    this.j = 0;
	    this.S = new Array();
	  }
	
	  // Initialize arcfour context from key, an array of ints, each from [0..255]
	  function ARC4init(key) {
	    var i, j, t;
	    for (i = 0; i < 256; ++i) {
	      this.S[i] = i;
	    }j = 0;
	    for (i = 0; i < 256; ++i) {
	      j = j + this.S[i] + key[i % key.length] & 255;
	      t = this.S[i];
	      this.S[i] = this.S[j];
	      this.S[j] = t;
	    }
	    this.i = 0;
	    this.j = 0;
	  }
	
	  function ARC4next() {
	    var t;
	    this.i = this.i + 1 & 255;
	    this.j = this.j + this.S[this.i] & 255;
	    t = this.S[this.i];
	    this.S[this.i] = this.S[this.j];
	    this.S[this.j] = t;
	    return this.S[t + this.S[this.i] & 255];
	  }
	
	  Arcfour.prototype.init = ARC4init;
	  Arcfour.prototype.next = ARC4next;
	
	  // Plug in your RNG constructor here
	  function prng_newstate() {
	    return new Arcfour();
	  }
	
	  // Pool size must be a multiple of 4 and greater than 32.
	  // An array of bytes the size of the pool will be passed to init()
	  var rng_psize = 256;
	
	  BigInteger.SecureRandom = SecureRandom;
	  BigInteger.BigInteger = BigInteger;
	  if (true) {
	    exports = module.exports = BigInteger;
	  } else {
	    this.BigInteger = BigInteger;
	    this.SecureRandom = SecureRandom;
	  }
	}).call(undefined);

/***/ }),
/* 493 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	
	// Basic Javascript Elliptic Curve implementation
	// Ported loosely from BouncyCastle's Java EC code
	// Only Fp curves implemented for now
	
	// Requires jsbn.js and jsbn2.js
	var BigInteger = __webpack_require__(492).BigInteger;
	var Barrett = BigInteger.prototype.Barrett;
	
	// ----------------
	// ECFieldElementFp
	
	// constructor
	function ECFieldElementFp(q, x) {
	    this.x = x;
	    // TODO if(x.compareTo(q) >= 0) error
	    this.q = q;
	}
	
	function feFpEquals(other) {
	    if (other == this) return true;
	    return this.q.equals(other.q) && this.x.equals(other.x);
	}
	
	function feFpToBigInteger() {
	    return this.x;
	}
	
	function feFpNegate() {
	    return new ECFieldElementFp(this.q, this.x.negate().mod(this.q));
	}
	
	function feFpAdd(b) {
	    return new ECFieldElementFp(this.q, this.x.add(b.toBigInteger()).mod(this.q));
	}
	
	function feFpSubtract(b) {
	    return new ECFieldElementFp(this.q, this.x.subtract(b.toBigInteger()).mod(this.q));
	}
	
	function feFpMultiply(b) {
	    return new ECFieldElementFp(this.q, this.x.multiply(b.toBigInteger()).mod(this.q));
	}
	
	function feFpSquare() {
	    return new ECFieldElementFp(this.q, this.x.square().mod(this.q));
	}
	
	function feFpDivide(b) {
	    return new ECFieldElementFp(this.q, this.x.multiply(b.toBigInteger().modInverse(this.q)).mod(this.q));
	}
	
	ECFieldElementFp.prototype.equals = feFpEquals;
	ECFieldElementFp.prototype.toBigInteger = feFpToBigInteger;
	ECFieldElementFp.prototype.negate = feFpNegate;
	ECFieldElementFp.prototype.add = feFpAdd;
	ECFieldElementFp.prototype.subtract = feFpSubtract;
	ECFieldElementFp.prototype.multiply = feFpMultiply;
	ECFieldElementFp.prototype.square = feFpSquare;
	ECFieldElementFp.prototype.divide = feFpDivide;
	
	// ----------------
	// ECPointFp
	
	// constructor
	function ECPointFp(curve, x, y, z) {
	    this.curve = curve;
	    this.x = x;
	    this.y = y;
	    // Projective coordinates: either zinv == null or z * zinv == 1
	    // z and zinv are just BigIntegers, not fieldElements
	    if (z == null) {
	        this.z = BigInteger.ONE;
	    } else {
	        this.z = z;
	    }
	    this.zinv = null;
	    //TODO: compression flag
	}
	
	function pointFpGetX() {
	    if (this.zinv == null) {
	        this.zinv = this.z.modInverse(this.curve.q);
	    }
	    var r = this.x.toBigInteger().multiply(this.zinv);
	    this.curve.reduce(r);
	    return this.curve.fromBigInteger(r);
	}
	
	function pointFpGetY() {
	    if (this.zinv == null) {
	        this.zinv = this.z.modInverse(this.curve.q);
	    }
	    var r = this.y.toBigInteger().multiply(this.zinv);
	    this.curve.reduce(r);
	    return this.curve.fromBigInteger(r);
	}
	
	function pointFpEquals(other) {
	    if (other == this) return true;
	    if (this.isInfinity()) return other.isInfinity();
	    if (other.isInfinity()) return this.isInfinity();
	    var u, v;
	    // u = Y2 * Z1 - Y1 * Z2
	    u = other.y.toBigInteger().multiply(this.z).subtract(this.y.toBigInteger().multiply(other.z)).mod(this.curve.q);
	    if (!u.equals(BigInteger.ZERO)) return false;
	    // v = X2 * Z1 - X1 * Z2
	    v = other.x.toBigInteger().multiply(this.z).subtract(this.x.toBigInteger().multiply(other.z)).mod(this.curve.q);
	    return v.equals(BigInteger.ZERO);
	}
	
	function pointFpIsInfinity() {
	    if (this.x == null && this.y == null) return true;
	    return this.z.equals(BigInteger.ZERO) && !this.y.toBigInteger().equals(BigInteger.ZERO);
	}
	
	function pointFpNegate() {
	    return new ECPointFp(this.curve, this.x, this.y.negate(), this.z);
	}
	
	function pointFpAdd(b) {
	    if (this.isInfinity()) return b;
	    if (b.isInfinity()) return this;
	
	    // u = Y2 * Z1 - Y1 * Z2
	    var u = b.y.toBigInteger().multiply(this.z).subtract(this.y.toBigInteger().multiply(b.z)).mod(this.curve.q);
	    // v = X2 * Z1 - X1 * Z2
	    var v = b.x.toBigInteger().multiply(this.z).subtract(this.x.toBigInteger().multiply(b.z)).mod(this.curve.q);
	
	    if (BigInteger.ZERO.equals(v)) {
	        if (BigInteger.ZERO.equals(u)) {
	            return this.twice(); // this == b, so double
	        }
	        return this.curve.getInfinity(); // this = -b, so infinity
	    }
	
	    var THREE = new BigInteger("3");
	    var x1 = this.x.toBigInteger();
	    var y1 = this.y.toBigInteger();
	    var x2 = b.x.toBigInteger();
	    var y2 = b.y.toBigInteger();
	
	    var v2 = v.square();
	    var v3 = v2.multiply(v);
	    var x1v2 = x1.multiply(v2);
	    var zu2 = u.square().multiply(this.z);
	
	    // x3 = v * (z2 * (z1 * u^2 - 2 * x1 * v^2) - v^3)
	    var x3 = zu2.subtract(x1v2.shiftLeft(1)).multiply(b.z).subtract(v3).multiply(v).mod(this.curve.q);
	    // y3 = z2 * (3 * x1 * u * v^2 - y1 * v^3 - z1 * u^3) + u * v^3
	    var y3 = x1v2.multiply(THREE).multiply(u).subtract(y1.multiply(v3)).subtract(zu2.multiply(u)).multiply(b.z).add(u.multiply(v3)).mod(this.curve.q);
	    // z3 = v^3 * z1 * z2
	    var z3 = v3.multiply(this.z).multiply(b.z).mod(this.curve.q);
	
	    return new ECPointFp(this.curve, this.curve.fromBigInteger(x3), this.curve.fromBigInteger(y3), z3);
	}
	
	function pointFpTwice() {
	    if (this.isInfinity()) return this;
	    if (this.y.toBigInteger().signum() == 0) return this.curve.getInfinity();
	
	    // TODO: optimized handling of constants
	    var THREE = new BigInteger("3");
	    var x1 = this.x.toBigInteger();
	    var y1 = this.y.toBigInteger();
	
	    var y1z1 = y1.multiply(this.z);
	    var y1sqz1 = y1z1.multiply(y1).mod(this.curve.q);
	    var a = this.curve.a.toBigInteger();
	
	    // w = 3 * x1^2 + a * z1^2
	    var w = x1.square().multiply(THREE);
	    if (!BigInteger.ZERO.equals(a)) {
	        w = w.add(this.z.square().multiply(a));
	    }
	    w = w.mod(this.curve.q);
	    //this.curve.reduce(w);
	    // x3 = 2 * y1 * z1 * (w^2 - 8 * x1 * y1^2 * z1)
	    var x3 = w.square().subtract(x1.shiftLeft(3).multiply(y1sqz1)).shiftLeft(1).multiply(y1z1).mod(this.curve.q);
	    // y3 = 4 * y1^2 * z1 * (3 * w * x1 - 2 * y1^2 * z1) - w^3
	    var y3 = w.multiply(THREE).multiply(x1).subtract(y1sqz1.shiftLeft(1)).shiftLeft(2).multiply(y1sqz1).subtract(w.square().multiply(w)).mod(this.curve.q);
	    // z3 = 8 * (y1 * z1)^3
	    var z3 = y1z1.square().multiply(y1z1).shiftLeft(3).mod(this.curve.q);
	
	    return new ECPointFp(this.curve, this.curve.fromBigInteger(x3), this.curve.fromBigInteger(y3), z3);
	}
	
	// Simple NAF (Non-Adjacent Form) multiplication algorithm
	// TODO: modularize the multiplication algorithm
	function pointFpMultiply(k) {
	    if (this.isInfinity()) return this;
	    if (k.signum() == 0) return this.curve.getInfinity();
	
	    var e = k;
	    var h = e.multiply(new BigInteger("3"));
	
	    var neg = this.negate();
	    var R = this;
	
	    var i;
	    for (i = h.bitLength() - 2; i > 0; --i) {
	        R = R.twice();
	
	        var hBit = h.testBit(i);
	        var eBit = e.testBit(i);
	
	        if (hBit != eBit) {
	            R = R.add(hBit ? this : neg);
	        }
	    }
	
	    return R;
	}
	
	// Compute this*j + x*k (simultaneous multiplication)
	function pointFpMultiplyTwo(j, x, k) {
	    var i;
	    if (j.bitLength() > k.bitLength()) i = j.bitLength() - 1;else i = k.bitLength() - 1;
	
	    var R = this.curve.getInfinity();
	    var both = this.add(x);
	    while (i >= 0) {
	        R = R.twice();
	        if (j.testBit(i)) {
	            if (k.testBit(i)) {
	                R = R.add(both);
	            } else {
	                R = R.add(this);
	            }
	        } else {
	            if (k.testBit(i)) {
	                R = R.add(x);
	            }
	        }
	        --i;
	    }
	
	    return R;
	}
	
	ECPointFp.prototype.getX = pointFpGetX;
	ECPointFp.prototype.getY = pointFpGetY;
	ECPointFp.prototype.equals = pointFpEquals;
	ECPointFp.prototype.isInfinity = pointFpIsInfinity;
	ECPointFp.prototype.negate = pointFpNegate;
	ECPointFp.prototype.add = pointFpAdd;
	ECPointFp.prototype.twice = pointFpTwice;
	ECPointFp.prototype.multiply = pointFpMultiply;
	ECPointFp.prototype.multiplyTwo = pointFpMultiplyTwo;
	
	// ----------------
	// ECCurveFp
	
	// constructor
	function ECCurveFp(q, a, b) {
	    this.q = q;
	    this.a = this.fromBigInteger(a);
	    this.b = this.fromBigInteger(b);
	    this.infinity = new ECPointFp(this, null, null);
	    this.reducer = new Barrett(this.q);
	}
	
	function curveFpGetQ() {
	    return this.q;
	}
	
	function curveFpGetA() {
	    return this.a;
	}
	
	function curveFpGetB() {
	    return this.b;
	}
	
	function curveFpEquals(other) {
	    if (other == this) return true;
	    return this.q.equals(other.q) && this.a.equals(other.a) && this.b.equals(other.b);
	}
	
	function curveFpGetInfinity() {
	    return this.infinity;
	}
	
	function curveFpFromBigInteger(x) {
	    return new ECFieldElementFp(this.q, x);
	}
	
	function curveReduce(x) {
	    this.reducer.reduce(x);
	}
	
	// for now, work with hex strings because they're easier in JS
	function curveFpDecodePointHex(s) {
	    switch (parseInt(s.substr(0, 2), 16)) {// first byte
	        case 0:
	            return this.infinity;
	        case 2:
	        case 3:
	            // point compression not supported yet
	            return null;
	        case 4:
	        case 6:
	        case 7:
	            var len = (s.length - 2) / 2;
	            var xHex = s.substr(2, len);
	            var yHex = s.substr(len + 2, len);
	
	            return new ECPointFp(this, this.fromBigInteger(new BigInteger(xHex, 16)), this.fromBigInteger(new BigInteger(yHex, 16)));
	
	        default:
	            // unsupported
	            return null;
	    }
	}
	
	function curveFpEncodePointHex(p) {
	    if (p.isInfinity()) return "00";
	    var xHex = p.getX().toBigInteger().toString(16);
	    var yHex = p.getY().toBigInteger().toString(16);
	    var oLen = this.getQ().toString(16).length;
	    if (oLen % 2 != 0) oLen++;
	    while (xHex.length < oLen) {
	        xHex = "0" + xHex;
	    }
	    while (yHex.length < oLen) {
	        yHex = "0" + yHex;
	    }
	    return "04" + xHex + yHex;
	}
	
	ECCurveFp.prototype.getQ = curveFpGetQ;
	ECCurveFp.prototype.getA = curveFpGetA;
	ECCurveFp.prototype.getB = curveFpGetB;
	ECCurveFp.prototype.equals = curveFpEquals;
	ECCurveFp.prototype.getInfinity = curveFpGetInfinity;
	ECCurveFp.prototype.fromBigInteger = curveFpFromBigInteger;
	ECCurveFp.prototype.reduce = curveReduce;
	//ECCurveFp.prototype.decodePointHex = curveFpDecodePointHex;
	ECCurveFp.prototype.encodePointHex = curveFpEncodePointHex;
	
	// from: https://github.com/kaielvin/jsbn-ec-point-compression
	ECCurveFp.prototype.decodePointHex = function (s) {
	    var yIsEven;
	    switch (parseInt(s.substr(0, 2), 16)) {// first byte
	        case 0:
	            return this.infinity;
	        case 2:
	            yIsEven = false;
	        case 3:
	            if (yIsEven == undefined) yIsEven = true;
	            var len = s.length - 2;
	            var xHex = s.substr(2, len);
	            var x = this.fromBigInteger(new BigInteger(xHex, 16));
	            var alpha = x.multiply(x.square().add(this.getA())).add(this.getB());
	            var beta = alpha.sqrt();
	
	            if (beta == null) throw "Invalid point compression";
	
	            var betaValue = beta.toBigInteger();
	            if (betaValue.testBit(0) != yIsEven) {
	                // Use the other root
	                beta = this.fromBigInteger(this.getQ().subtract(betaValue));
	            }
	            return new ECPointFp(this, x, beta);
	        case 4:
	        case 6:
	        case 7:
	            var len = (s.length - 2) / 2;
	            var xHex = s.substr(2, len);
	            var yHex = s.substr(len + 2, len);
	
	            return new ECPointFp(this, this.fromBigInteger(new BigInteger(xHex, 16)), this.fromBigInteger(new BigInteger(yHex, 16)));
	
	        default:
	            // unsupported
	            return null;
	    }
	};
	ECCurveFp.prototype.encodeCompressedPointHex = function (p) {
	    if (p.isInfinity()) return "00";
	    var xHex = p.getX().toBigInteger().toString(16);
	    var oLen = this.getQ().toString(16).length;
	    if (oLen % 2 != 0) oLen++;
	    while (xHex.length < oLen) {
	        xHex = "0" + xHex;
	    }var yPrefix;
	    if (p.getY().toBigInteger().isEven()) yPrefix = "02";else yPrefix = "03";
	
	    return yPrefix + xHex;
	};
	
	ECFieldElementFp.prototype.getR = function () {
	    if (this.r != undefined) return this.r;
	
	    this.r = null;
	    var bitLength = this.q.bitLength();
	    if (bitLength > 128) {
	        var firstWord = this.q.shiftRight(bitLength - 64);
	        if (firstWord.intValue() == -1) {
	            this.r = BigInteger.ONE.shiftLeft(bitLength).subtract(this.q);
	        }
	    }
	    return this.r;
	};
	ECFieldElementFp.prototype.modMult = function (x1, x2) {
	    return this.modReduce(x1.multiply(x2));
	};
	ECFieldElementFp.prototype.modReduce = function (x) {
	    if (this.getR() != null) {
	        var qLen = q.bitLength();
	        while (x.bitLength() > qLen + 1) {
	            var u = x.shiftRight(qLen);
	            var v = x.subtract(u.shiftLeft(qLen));
	            if (!this.getR().equals(BigInteger.ONE)) {
	                u = u.multiply(this.getR());
	            }
	            x = u.add(v);
	        }
	        while (x.compareTo(q) >= 0) {
	            x = x.subtract(q);
	        }
	    } else {
	        x = x.mod(q);
	    }
	    return x;
	};
	ECFieldElementFp.prototype.sqrt = function () {
	    if (!this.q.testBit(0)) throw "unsupported";
	
	    // p mod 4 == 3
	    if (this.q.testBit(1)) {
	        var z = new ECFieldElementFp(this.q, this.x.modPow(this.q.shiftRight(2).add(BigInteger.ONE), this.q));
	        return z.square().equals(this) ? z : null;
	    }
	
	    // p mod 4 == 1
	    var qMinusOne = this.q.subtract(BigInteger.ONE);
	
	    var legendreExponent = qMinusOne.shiftRight(1);
	    if (!this.x.modPow(legendreExponent, this.q).equals(BigInteger.ONE)) {
	        return null;
	    }
	
	    var u = qMinusOne.shiftRight(2);
	    var k = u.shiftLeft(1).add(BigInteger.ONE);
	
	    var Q = this.x;
	    var fourQ = modDouble(modDouble(Q));
	
	    var U, V;
	    do {
	        var P;
	        do {
	            P = new BigInteger(this.q.bitLength(), new SecureRandom());
	        } while (P.compareTo(this.q) >= 0 || !P.multiply(P).subtract(fourQ).modPow(legendreExponent, this.q).equals(qMinusOne));
	
	        var result = this.lucasSequence(P, Q, k);
	        U = result[0];
	        V = result[1];
	
	        if (this.modMult(V, V).equals(fourQ)) {
	            // Integer division by 2, mod q
	            if (V.testBit(0)) {
	                V = V.add(q);
	            }
	
	            V = V.shiftRight(1);
	
	            return new ECFieldElementFp(q, V);
	        }
	    } while (U.equals(BigInteger.ONE) || U.equals(qMinusOne));
	
	    return null;
	};
	ECFieldElementFp.prototype.lucasSequence = function (P, Q, k) {
	    var n = k.bitLength();
	    var s = k.getLowestSetBit();
	
	    var Uh = BigInteger.ONE;
	    var Vl = BigInteger.TWO;
	    var Vh = P;
	    var Ql = BigInteger.ONE;
	    var Qh = BigInteger.ONE;
	
	    for (var j = n - 1; j >= s + 1; --j) {
	        Ql = this.modMult(Ql, Qh);
	
	        if (k.testBit(j)) {
	            Qh = this.modMult(Ql, Q);
	            Uh = this.modMult(Uh, Vh);
	            Vl = this.modReduce(Vh.multiply(Vl).subtract(P.multiply(Ql)));
	            Vh = this.modReduce(Vh.multiply(Vh).subtract(Qh.shiftLeft(1)));
	        } else {
	            Qh = Ql;
	            Uh = this.modReduce(Uh.multiply(Vl).subtract(Ql));
	            Vh = this.modReduce(Vh.multiply(Vl).subtract(P.multiply(Ql)));
	            Vl = this.modReduce(Vl.multiply(Vl).subtract(Ql.shiftLeft(1)));
	        }
	    }
	
	    Ql = this.modMult(Ql, Qh);
	    Qh = this.modMult(Ql, Q);
	    Uh = this.modReduce(Uh.multiply(Vl).subtract(Ql));
	    Vl = this.modReduce(Vh.multiply(Vl).subtract(P.multiply(Ql)));
	    Ql = this.modMult(Ql, Qh);
	
	    for (var j = 1; j <= s; ++j) {
	        Uh = this.modMult(Uh, Vl);
	        Vl = this.modReduce(Vl.multiply(Vl).subtract(Ql.shiftLeft(1)));
	        Ql = this.modMult(Ql, Ql);
	    }
	
	    return [Uh, Vl];
	};
	
	var _exports = {
	    ECCurveFp: ECCurveFp,
	    ECPointFp: ECPointFp,
	    ECFieldElementFp: ECFieldElementFp
	};
	
	module.exports = _exports;

/***/ }),
/* 494 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	// Named EC curves
	
	// Requires ec.js, jsbn.js, and jsbn2.js
	var BigInteger = __webpack_require__(492).BigInteger;
	var ECCurveFp = __webpack_require__(493).ECCurveFp;
	
	// ----------------
	// X9ECParameters
	
	// constructor
	function X9ECParameters(curve, g, n, h) {
	    this.curve = curve;
	    this.g = g;
	    this.n = n;
	    this.h = h;
	}
	
	function x9getCurve() {
	    return this.curve;
	}
	
	function x9getG() {
	    return this.g;
	}
	
	function x9getN() {
	    return this.n;
	}
	
	function x9getH() {
	    return this.h;
	}
	
	X9ECParameters.prototype.getCurve = x9getCurve;
	X9ECParameters.prototype.getG = x9getG;
	X9ECParameters.prototype.getN = x9getN;
	X9ECParameters.prototype.getH = x9getH;
	
	// ----------------
	// SECNamedCurves
	
	function fromHex(s) {
	    return new BigInteger(s, 16);
	}
	
	function secp128r1() {
	    // p = 2^128 - 2^97 - 1
	    var p = fromHex("FFFFFFFDFFFFFFFFFFFFFFFFFFFFFFFF");
	    var a = fromHex("FFFFFFFDFFFFFFFFFFFFFFFFFFFFFFFC");
	    var b = fromHex("E87579C11079F43DD824993C2CEE5ED3");
	    //byte[] S = Hex.decode("000E0D4D696E6768756151750CC03A4473D03679");
	    var n = fromHex("FFFFFFFE0000000075A30D1B9038A115");
	    var h = BigInteger.ONE;
	    var curve = new ECCurveFp(p, a, b);
	    var G = curve.decodePointHex("04" + "161FF7528B899B2D0C28607CA52C5B86" + "CF5AC8395BAFEB13C02DA292DDED7A83");
	    return new X9ECParameters(curve, G, n, h);
	}
	
	function secp160k1() {
	    // p = 2^160 - 2^32 - 2^14 - 2^12 - 2^9 - 2^8 - 2^7 - 2^3 - 2^2 - 1
	    var p = fromHex("FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFAC73");
	    var a = BigInteger.ZERO;
	    var b = fromHex("7");
	    //byte[] S = null;
	    var n = fromHex("0100000000000000000001B8FA16DFAB9ACA16B6B3");
	    var h = BigInteger.ONE;
	    var curve = new ECCurveFp(p, a, b);
	    var G = curve.decodePointHex("04" + "3B4C382CE37AA192A4019E763036F4F5DD4D7EBB" + "938CF935318FDCED6BC28286531733C3F03C4FEE");
	    return new X9ECParameters(curve, G, n, h);
	}
	
	function secp160r1() {
	    // p = 2^160 - 2^31 - 1
	    var p = fromHex("FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF7FFFFFFF");
	    var a = fromHex("FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF7FFFFFFC");
	    var b = fromHex("1C97BEFC54BD7A8B65ACF89F81D4D4ADC565FA45");
	    //byte[] S = Hex.decode("1053CDE42C14D696E67687561517533BF3F83345");
	    var n = fromHex("0100000000000000000001F4C8F927AED3CA752257");
	    var h = BigInteger.ONE;
	    var curve = new ECCurveFp(p, a, b);
	    var G = curve.decodePointHex("04" + "4A96B5688EF573284664698968C38BB913CBFC82" + "23A628553168947D59DCC912042351377AC5FB32");
	    return new X9ECParameters(curve, G, n, h);
	}
	
	function secp192k1() {
	    // p = 2^192 - 2^32 - 2^12 - 2^8 - 2^7 - 2^6 - 2^3 - 1
	    var p = fromHex("FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFEE37");
	    var a = BigInteger.ZERO;
	    var b = fromHex("3");
	    //byte[] S = null;
	    var n = fromHex("FFFFFFFFFFFFFFFFFFFFFFFE26F2FC170F69466A74DEFD8D");
	    var h = BigInteger.ONE;
	    var curve = new ECCurveFp(p, a, b);
	    var G = curve.decodePointHex("04" + "DB4FF10EC057E9AE26B07D0280B7F4341DA5D1B1EAE06C7D" + "9B2F2F6D9C5628A7844163D015BE86344082AA88D95E2F9D");
	    return new X9ECParameters(curve, G, n, h);
	}
	
	function secp192r1() {
	    // p = 2^192 - 2^64 - 1
	    var p = fromHex("FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFFFFFFFFFFFF");
	    var a = fromHex("FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFFFFFFFFFFFC");
	    var b = fromHex("64210519E59C80E70FA7E9AB72243049FEB8DEECC146B9B1");
	    //byte[] S = Hex.decode("3045AE6FC8422F64ED579528D38120EAE12196D5");
	    var n = fromHex("FFFFFFFFFFFFFFFFFFFFFFFF99DEF836146BC9B1B4D22831");
	    var h = BigInteger.ONE;
	    var curve = new ECCurveFp(p, a, b);
	    var G = curve.decodePointHex("04" + "188DA80EB03090F67CBF20EB43A18800F4FF0AFD82FF1012" + "07192B95FFC8DA78631011ED6B24CDD573F977A11E794811");
	    return new X9ECParameters(curve, G, n, h);
	}
	
	function secp224r1() {
	    // p = 2^224 - 2^96 + 1
	    var p = fromHex("FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000000000000000000001");
	    var a = fromHex("FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFFFFFFFFFFFFFFFFFFFE");
	    var b = fromHex("B4050A850C04B3ABF54132565044B0B7D7BFD8BA270B39432355FFB4");
	    //byte[] S = Hex.decode("BD71344799D5C7FCDC45B59FA3B9AB8F6A948BC5");
	    var n = fromHex("FFFFFFFFFFFFFFFFFFFFFFFFFFFF16A2E0B8F03E13DD29455C5C2A3D");
	    var h = BigInteger.ONE;
	    var curve = new ECCurveFp(p, a, b);
	    var G = curve.decodePointHex("04" + "B70E0CBD6BB4BF7F321390B94A03C1D356C21122343280D6115C1D21" + "BD376388B5F723FB4C22DFE6CD4375A05A07476444D5819985007E34");
	    return new X9ECParameters(curve, G, n, h);
	}
	
	function secp256r1() {
	    // p = 2^224 (2^32 - 1) + 2^192 + 2^96 - 1
	    var p = fromHex("FFFFFFFF00000001000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFF");
	    var a = fromHex("FFFFFFFF00000001000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFC");
	    var b = fromHex("5AC635D8AA3A93E7B3EBBD55769886BC651D06B0CC53B0F63BCE3C3E27D2604B");
	    //byte[] S = Hex.decode("C49D360886E704936A6678E1139D26B7819F7E90");
	    var n = fromHex("FFFFFFFF00000000FFFFFFFFFFFFFFFFBCE6FAADA7179E84F3B9CAC2FC632551");
	    var h = BigInteger.ONE;
	    var curve = new ECCurveFp(p, a, b);
	    var G = curve.decodePointHex("04" + "6B17D1F2E12C4247F8BCE6E563A440F277037D812DEB33A0F4A13945D898C296" + "4FE342E2FE1A7F9B8EE7EB4A7C0F9E162BCE33576B315ECECBB6406837BF51F5");
	    return new X9ECParameters(curve, G, n, h);
	}
	
	// TODO: make this into a proper hashtable
	function getSECCurveByName(name) {
	    if (name == "secp128r1") return secp128r1();
	    if (name == "secp160k1") return secp160k1();
	    if (name == "secp160r1") return secp160r1();
	    if (name == "secp192k1") return secp192k1();
	    if (name == "secp192r1") return secp192r1();
	    if (name == "secp224r1") return secp224r1();
	    if (name == "secp256r1") return secp256r1();
	    return null;
	}
	
	module.exports = {
	    "secp128r1": secp128r1,
	    "secp160k1": secp160k1,
	    "secp160r1": secp160r1,
	    "secp192k1": secp192k1,
	    "secp192r1": secp192r1,
	    "secp224r1": secp224r1,
	    "secp256r1": secp256r1
	};

/***/ }),
/* 495 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	
	/*
	 * Copyright (c) 2014 Mega Limited
	 * under the MIT License.
	 * 
	 * Authors: Guy K. Kloss
	 * 
	 * You should have received a copy of the license along with this program.
	 */
	
	var dh = __webpack_require__(496);
	var eddsa = __webpack_require__(500);
	var curve255 = __webpack_require__(499);
	var utils = __webpack_require__(498);
	
	/**
	 * @exports jodid25519
	 * Curve 25519-based cryptography collection.
	 *
	 * @description
	 * EC Diffie-Hellman (ECDH) based on Curve25519 and digital signatures
	 * (EdDSA) based on Ed25519.
	 */
	var ns = {};
	
	/** Module version indicator as string (format: [major.minor.patch]). */
	ns.VERSION = '0.7.1';
	
	ns.dh = dh;
	ns.eddsa = eddsa;
	ns.curve255 = curve255;
	ns.utils = utils;
	
	module.exports = ns;

/***/ }),
/* 496 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {"use strict";
	/**
	 * @fileOverview
	 * EC Diffie-Hellman operations on Curve25519.
	 */
	
	/*
	 * Copyright (c) 2014 Mega Limited
	 * under the MIT License.
	 *
	 * Authors: Guy K. Kloss
	 *
	 * You should have received a copy of the license along with this program.
	 */
	
	var core = __webpack_require__(497);
	var utils = __webpack_require__(498);
	var curve255 = __webpack_require__(499);
	
	/**
	 * @exports jodid25519/dh
	 * EC Diffie-Hellman operations on Curve25519.
	 *
	 * @description
	 * EC Diffie-Hellman operations on Curve25519.
	 */
	var ns = {};
	
	function _toString(vector) {
	    var u = new Uint16Array(vector);
	    return new Buffer(new Uint8Array(u.buffer));
	}
	
	function _fromString(vector) {
	    if (Buffer.isBuffer(vector)) {
	        var u = new Uint8Array(vector);
	        return new Uint16Array(u.buffer);
	    }
	
	    var result = new Array(16);
	    for (var i = 0, l = 0; i < vector.length; i += 2) {
	        result[l] = vector.charCodeAt(i + 1) << 8 | vector.charCodeAt(i);
	        l++;
	    }
	    return result;
	}
	
	/**
	 * Computes a key through scalar multiplication of a point on the curve 25519.
	 *
	 * This function is used for the DH key-exchange protocol. It computes a
	 * key based on a secret key with a public component (opponent's public key
	 * or curve base point if not given) by using scalar multiplication.
	 *
	 * Before multiplication, some bit operations are applied to the
	 * private key to ensure it is a valid Curve25519 secret key.
	 * It is the user's responsibility to make sure that the private
	 * key is a uniformly random, secret value.
	 *
	 * @function
	 * @param privateComponent {string}
	 *     Private point as byte string on the curve.
	 * @param publicComponent {string}
	 *     Public point as byte string on the curve. If not given, the curve's
	 *     base point is used.
	 * @returns {string}
	 *     Key point as byte string resulting from scalar product.
	 */
	ns.computeKey = function (privateComponent, publicComponent) {
	    if (publicComponent) {
	        return _toString(curve255.curve25519(_fromString(privateComponent), _fromString(publicComponent)));
	    } else {
	        return _toString(curve255.curve25519(_fromString(privateComponent)));
	    }
	};
	
	/**
	 * Computes the public key to a private key on the curve 25519.
	 *
	 * Before multiplication, some bit operations are applied to the
	 * private key to ensure it is a valid Curve25519 secret key.
	 * It is the user's responsibility to make sure that the private
	 * key is a uniformly random, secret value.
	 *
	 * @function
	 * @param privateKey {string}
	 *     Private point as byte string on the curve.
	 * @returns {string}
	 *     Public key point as byte string resulting from scalar product.
	 */
	ns.publicKey = function (privateKey) {
	    return _toString(curve255.curve25519(_fromString(privateKey)));
	};
	
	/**
	 * Generates a new random private key of 32 bytes length (256 bit).
	 *
	 * @function
	 * @returns {string}
	 *     Byte string containing a new random private key seed.
	 */
	ns.generateKey = function () {
	    return core.generateKey(true);
	};
	
	module.exports = ns;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(290).Buffer))

/***/ }),
/* 497 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	/**
	 * @fileOverview
	 * Core operations on curve 25519 required for the higher level modules.
	 */
	
	/*
	 * Copyright (c) 2007, 2013, 2014 Michele Bini
	 * Copyright (c) 2014 Mega Limited
	 * under the MIT License.
	 *
	 * Authors: Guy K. Kloss, Michele Bini
	 *
	 * You should have received a copy of the license along with this program.
	 */
	
	var crypto = __webpack_require__(392);
	
	/**
	 * @exports jodid25519/core
	 * Core operations on curve 25519 required for the higher level modules.
	 *
	 * @description
	 * Core operations on curve 25519 required for the higher level modules.
	 *
	 * <p>
	 * This core code is extracted from Michele Bini's curve255.js implementation,
	 * which is used as a base for Curve25519 ECDH and Ed25519 EdDSA operations.
	 * </p>
	 */
	var ns = {};
	
	function _setbit(n, c, v) {
	            var i = c >> 4;
	            var a = n[i];
	            a = a + (1 << (c & 0xf)) * v;
	            n[i] = a;
	}
	
	function _getbit(n, c) {
	            return n[c >> 4] >> (c & 0xf) & 1;
	}
	
	function _ZERO() {
	            return [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
	}
	
	function _ONE() {
	            return [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
	}
	
	// Basepoint.
	function _BASE() {
	            return [9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
	}
	
	// return -1, 0, +1 when a is less than, equal, or greater than b
	function _bigintcmp(a, b) {
	            // The following code is a bit tricky to avoid code branching
	            var c, abs_r, mask;
	            var r = 0;
	            for (c = 15; c >= 0; c--) {
	                        var x = a[c];
	                        var y = b[c];
	                        r = r + (x - y) * (1 - r * r);
	                        // http://graphics.stanford.edu/~seander/bithacks.html#IntegerAbs
	                        // correct for [-294967295, 294967295]
	                        mask = r >> 31;
	                        abs_r = r + mask ^ mask;
	                        // http://stackoverflow.com/questions/596467/how-do-i-convert-a-number-to-an-integer-in-javascript
	                        // this rounds towards zero
	                        r = ~~((r << 1) / (abs_r + 1));
	            }
	            return r;
	}
	
	function _bigintadd(a, b) {
	            var r = [];
	            var v;
	            r[0] = (v = a[0] + b[0]) & 0xffff;
	            r[1] = (v = (v >>> 16) + a[1] + b[1]) & 0xffff;
	            r[2] = (v = (v >>> 16) + a[2] + b[2]) & 0xffff;
	            r[3] = (v = (v >>> 16) + a[3] + b[3]) & 0xffff;
	            r[4] = (v = (v >>> 16) + a[4] + b[4]) & 0xffff;
	            r[5] = (v = (v >>> 16) + a[5] + b[5]) & 0xffff;
	            r[6] = (v = (v >>> 16) + a[6] + b[6]) & 0xffff;
	            r[7] = (v = (v >>> 16) + a[7] + b[7]) & 0xffff;
	            r[8] = (v = (v >>> 16) + a[8] + b[8]) & 0xffff;
	            r[9] = (v = (v >>> 16) + a[9] + b[9]) & 0xffff;
	            r[10] = (v = (v >>> 16) + a[10] + b[10]) & 0xffff;
	            r[11] = (v = (v >>> 16) + a[11] + b[11]) & 0xffff;
	            r[12] = (v = (v >>> 16) + a[12] + b[12]) & 0xffff;
	            r[13] = (v = (v >>> 16) + a[13] + b[13]) & 0xffff;
	            r[14] = (v = (v >>> 16) + a[14] + b[14]) & 0xffff;
	            r[15] = (v >>> 16) + a[15] + b[15];
	            return r;
	}
	
	function _bigintsub(a, b) {
	            var r = [];
	            var v;
	            r[0] = (v = 0x80000 + a[0] - b[0]) & 0xffff;
	            r[1] = (v = (v >>> 16) + 0x7fff8 + a[1] - b[1]) & 0xffff;
	            r[2] = (v = (v >>> 16) + 0x7fff8 + a[2] - b[2]) & 0xffff;
	            r[3] = (v = (v >>> 16) + 0x7fff8 + a[3] - b[3]) & 0xffff;
	            r[4] = (v = (v >>> 16) + 0x7fff8 + a[4] - b[4]) & 0xffff;
	            r[5] = (v = (v >>> 16) + 0x7fff8 + a[5] - b[5]) & 0xffff;
	            r[6] = (v = (v >>> 16) + 0x7fff8 + a[6] - b[6]) & 0xffff;
	            r[7] = (v = (v >>> 16) + 0x7fff8 + a[7] - b[7]) & 0xffff;
	            r[8] = (v = (v >>> 16) + 0x7fff8 + a[8] - b[8]) & 0xffff;
	            r[9] = (v = (v >>> 16) + 0x7fff8 + a[9] - b[9]) & 0xffff;
	            r[10] = (v = (v >>> 16) + 0x7fff8 + a[10] - b[10]) & 0xffff;
	            r[11] = (v = (v >>> 16) + 0x7fff8 + a[11] - b[11]) & 0xffff;
	            r[12] = (v = (v >>> 16) + 0x7fff8 + a[12] - b[12]) & 0xffff;
	            r[13] = (v = (v >>> 16) + 0x7fff8 + a[13] - b[13]) & 0xffff;
	            r[14] = (v = (v >>> 16) + 0x7fff8 + a[14] - b[14]) & 0xffff;
	            r[15] = (v >>> 16) - 8 + a[15] - b[15];
	            return r;
	}
	
	function _sqr8h(a7, a6, a5, a4, a3, a2, a1, a0) {
	            // 'division by 0x10000' can not be replaced by '>> 16' because
	            // more than 32 bits of precision are needed similarly
	            // 'multiplication by 2' cannot be replaced by '<< 1'
	            var r = [];
	            var v;
	            r[0] = (v = a0 * a0) & 0xffff;
	            r[1] = (v = (0 | v / 0x10000) + 2 * a0 * a1) & 0xffff;
	            r[2] = (v = (0 | v / 0x10000) + 2 * a0 * a2 + a1 * a1) & 0xffff;
	            r[3] = (v = (0 | v / 0x10000) + 2 * a0 * a3 + 2 * a1 * a2) & 0xffff;
	            r[4] = (v = (0 | v / 0x10000) + 2 * a0 * a4 + 2 * a1 * a3 + a2 * a2) & 0xffff;
	            r[5] = (v = (0 | v / 0x10000) + 2 * a0 * a5 + 2 * a1 * a4 + 2 * a2 * a3) & 0xffff;
	            r[6] = (v = (0 | v / 0x10000) + 2 * a0 * a6 + 2 * a1 * a5 + 2 * a2 * a4 + a3 * a3) & 0xffff;
	            r[7] = (v = (0 | v / 0x10000) + 2 * a0 * a7 + 2 * a1 * a6 + 2 * a2 * a5 + 2 * a3 * a4) & 0xffff;
	            r[8] = (v = (0 | v / 0x10000) + 2 * a1 * a7 + 2 * a2 * a6 + 2 * a3 * a5 + a4 * a4) & 0xffff;
	            r[9] = (v = (0 | v / 0x10000) + 2 * a2 * a7 + 2 * a3 * a6 + 2 * a4 * a5) & 0xffff;
	            r[10] = (v = (0 | v / 0x10000) + 2 * a3 * a7 + 2 * a4 * a6 + a5 * a5) & 0xffff;
	            r[11] = (v = (0 | v / 0x10000) + 2 * a4 * a7 + 2 * a5 * a6) & 0xffff;
	            r[12] = (v = (0 | v / 0x10000) + 2 * a5 * a7 + a6 * a6) & 0xffff;
	            r[13] = (v = (0 | v / 0x10000) + 2 * a6 * a7) & 0xffff;
	            r[14] = (v = (0 | v / 0x10000) + a7 * a7) & 0xffff;
	            r[15] = 0 | v / 0x10000;
	            return r;
	}
	
	function _sqrmodp(a) {
	            var x = _sqr8h(a[15], a[14], a[13], a[12], a[11], a[10], a[9], a[8]);
	            var z = _sqr8h(a[7], a[6], a[5], a[4], a[3], a[2], a[1], a[0]);
	            var y = _sqr8h(a[15] + a[7], a[14] + a[6], a[13] + a[5], a[12] + a[4], a[11] + a[3], a[10] + a[2], a[9] + a[1], a[8] + a[0]);
	            var r = [];
	            var v;
	            r[0] = (v = 0x800000 + z[0] + (y[8] - x[8] - z[8] + x[0] - 0x80) * 38) & 0xffff;
	            r[1] = (v = 0x7fff80 + (v >>> 16) + z[1] + (y[9] - x[9] - z[9] + x[1]) * 38) & 0xffff;
	            r[2] = (v = 0x7fff80 + (v >>> 16) + z[2] + (y[10] - x[10] - z[10] + x[2]) * 38) & 0xffff;
	            r[3] = (v = 0x7fff80 + (v >>> 16) + z[3] + (y[11] - x[11] - z[11] + x[3]) * 38) & 0xffff;
	            r[4] = (v = 0x7fff80 + (v >>> 16) + z[4] + (y[12] - x[12] - z[12] + x[4]) * 38) & 0xffff;
	            r[5] = (v = 0x7fff80 + (v >>> 16) + z[5] + (y[13] - x[13] - z[13] + x[5]) * 38) & 0xffff;
	            r[6] = (v = 0x7fff80 + (v >>> 16) + z[6] + (y[14] - x[14] - z[14] + x[6]) * 38) & 0xffff;
	            r[7] = (v = 0x7fff80 + (v >>> 16) + z[7] + (y[15] - x[15] - z[15] + x[7]) * 38) & 0xffff;
	            r[8] = (v = 0x7fff80 + (v >>> 16) + z[8] + y[0] - x[0] - z[0] + x[8] * 38) & 0xffff;
	            r[9] = (v = 0x7fff80 + (v >>> 16) + z[9] + y[1] - x[1] - z[1] + x[9] * 38) & 0xffff;
	            r[10] = (v = 0x7fff80 + (v >>> 16) + z[10] + y[2] - x[2] - z[2] + x[10] * 38) & 0xffff;
	            r[11] = (v = 0x7fff80 + (v >>> 16) + z[11] + y[3] - x[3] - z[3] + x[11] * 38) & 0xffff;
	            r[12] = (v = 0x7fff80 + (v >>> 16) + z[12] + y[4] - x[4] - z[4] + x[12] * 38) & 0xffff;
	            r[13] = (v = 0x7fff80 + (v >>> 16) + z[13] + y[5] - x[5] - z[5] + x[13] * 38) & 0xffff;
	            r[14] = (v = 0x7fff80 + (v >>> 16) + z[14] + y[6] - x[6] - z[6] + x[14] * 38) & 0xffff;
	            r[15] = 0x7fff80 + (v >>> 16) + z[15] + y[7] - x[7] - z[7] + x[15] * 38;
	            _reduce(r);
	            return r;
	}
	
	function _mul8h(a7, a6, a5, a4, a3, a2, a1, a0, b7, b6, b5, b4, b3, b2, b1, b0) {
	            // 'division by 0x10000' can not be replaced by '>> 16' because
	            // more than 32 bits of precision are needed
	            var r = [];
	            var v;
	            r[0] = (v = a0 * b0) & 0xffff;
	            r[1] = (v = (0 | v / 0x10000) + a0 * b1 + a1 * b0) & 0xffff;
	            r[2] = (v = (0 | v / 0x10000) + a0 * b2 + a1 * b1 + a2 * b0) & 0xffff;
	            r[3] = (v = (0 | v / 0x10000) + a0 * b3 + a1 * b2 + a2 * b1 + a3 * b0) & 0xffff;
	            r[4] = (v = (0 | v / 0x10000) + a0 * b4 + a1 * b3 + a2 * b2 + a3 * b1 + a4 * b0) & 0xffff;
	            r[5] = (v = (0 | v / 0x10000) + a0 * b5 + a1 * b4 + a2 * b3 + a3 * b2 + a4 * b1 + a5 * b0) & 0xffff;
	            r[6] = (v = (0 | v / 0x10000) + a0 * b6 + a1 * b5 + a2 * b4 + a3 * b3 + a4 * b2 + a5 * b1 + a6 * b0) & 0xffff;
	            r[7] = (v = (0 | v / 0x10000) + a0 * b7 + a1 * b6 + a2 * b5 + a3 * b4 + a4 * b3 + a5 * b2 + a6 * b1 + a7 * b0) & 0xffff;
	            r[8] = (v = (0 | v / 0x10000) + a1 * b7 + a2 * b6 + a3 * b5 + a4 * b4 + a5 * b3 + a6 * b2 + a7 * b1) & 0xffff;
	            r[9] = (v = (0 | v / 0x10000) + a2 * b7 + a3 * b6 + a4 * b5 + a5 * b4 + a6 * b3 + a7 * b2) & 0xffff;
	            r[10] = (v = (0 | v / 0x10000) + a3 * b7 + a4 * b6 + a5 * b5 + a6 * b4 + a7 * b3) & 0xffff;
	            r[11] = (v = (0 | v / 0x10000) + a4 * b7 + a5 * b6 + a6 * b5 + a7 * b4) & 0xffff;
	            r[12] = (v = (0 | v / 0x10000) + a5 * b7 + a6 * b6 + a7 * b5) & 0xffff;
	            r[13] = (v = (0 | v / 0x10000) + a6 * b7 + a7 * b6) & 0xffff;
	            r[14] = (v = (0 | v / 0x10000) + a7 * b7) & 0xffff;
	            r[15] = 0 | v / 0x10000;
	            return r;
	}
	
	function _mulmodp(a, b) {
	            // Karatsuba multiplication scheme: x*y = (b^2+b)*x1*y1 -
	            // b*(x1-x0)*(y1-y0) + (b+1)*x0*y0
	            var x = _mul8h(a[15], a[14], a[13], a[12], a[11], a[10], a[9], a[8], b[15], b[14], b[13], b[12], b[11], b[10], b[9], b[8]);
	            var z = _mul8h(a[7], a[6], a[5], a[4], a[3], a[2], a[1], a[0], b[7], b[6], b[5], b[4], b[3], b[2], b[1], b[0]);
	            var y = _mul8h(a[15] + a[7], a[14] + a[6], a[13] + a[5], a[12] + a[4], a[11] + a[3], a[10] + a[2], a[9] + a[1], a[8] + a[0], b[15] + b[7], b[14] + b[6], b[13] + b[5], b[12] + b[4], b[11] + b[3], b[10] + b[2], b[9] + b[1], b[8] + b[0]);
	            var r = [];
	            var v;
	            r[0] = (v = 0x800000 + z[0] + (y[8] - x[8] - z[8] + x[0] - 0x80) * 38) & 0xffff;
	            r[1] = (v = 0x7fff80 + (v >>> 16) + z[1] + (y[9] - x[9] - z[9] + x[1]) * 38) & 0xffff;
	            r[2] = (v = 0x7fff80 + (v >>> 16) + z[2] + (y[10] - x[10] - z[10] + x[2]) * 38) & 0xffff;
	            r[3] = (v = 0x7fff80 + (v >>> 16) + z[3] + (y[11] - x[11] - z[11] + x[3]) * 38) & 0xffff;
	            r[4] = (v = 0x7fff80 + (v >>> 16) + z[4] + (y[12] - x[12] - z[12] + x[4]) * 38) & 0xffff;
	            r[5] = (v = 0x7fff80 + (v >>> 16) + z[5] + (y[13] - x[13] - z[13] + x[5]) * 38) & 0xffff;
	            r[6] = (v = 0x7fff80 + (v >>> 16) + z[6] + (y[14] - x[14] - z[14] + x[6]) * 38) & 0xffff;
	            r[7] = (v = 0x7fff80 + (v >>> 16) + z[7] + (y[15] - x[15] - z[15] + x[7]) * 38) & 0xffff;
	            r[8] = (v = 0x7fff80 + (v >>> 16) + z[8] + y[0] - x[0] - z[0] + x[8] * 38) & 0xffff;
	            r[9] = (v = 0x7fff80 + (v >>> 16) + z[9] + y[1] - x[1] - z[1] + x[9] * 38) & 0xffff;
	            r[10] = (v = 0x7fff80 + (v >>> 16) + z[10] + y[2] - x[2] - z[2] + x[10] * 38) & 0xffff;
	            r[11] = (v = 0x7fff80 + (v >>> 16) + z[11] + y[3] - x[3] - z[3] + x[11] * 38) & 0xffff;
	            r[12] = (v = 0x7fff80 + (v >>> 16) + z[12] + y[4] - x[4] - z[4] + x[12] * 38) & 0xffff;
	            r[13] = (v = 0x7fff80 + (v >>> 16) + z[13] + y[5] - x[5] - z[5] + x[13] * 38) & 0xffff;
	            r[14] = (v = 0x7fff80 + (v >>> 16) + z[14] + y[6] - x[6] - z[6] + x[14] * 38) & 0xffff;
	            r[15] = 0x7fff80 + (v >>> 16) + z[15] + y[7] - x[7] - z[7] + x[15] * 38;
	            _reduce(r);
	            return r;
	}
	
	function _reduce(arr) {
	            var aCopy = arr.slice(0);
	            var choice = [arr, aCopy];
	            var v = arr[15];
	            // Use the dummy copy instead of just returning to be more constant time.
	            var a = choice[v < 0x8000 & 1];
	            a[15] = v & 0x7fff;
	            // >32-bits of precision are required here so '/ 0x8000' can not be
	            // replaced by the arithmetic equivalent '>>> 15'
	            v = (0 | v / 0x8000) * 19;
	            a[0] = (v += a[0]) & 0xffff;
	            v = v >>> 16;
	            a[1] = (v += a[1]) & 0xffff;
	            v = v >>> 16;
	            a[2] = (v += a[2]) & 0xffff;
	            v = v >>> 16;
	            a[3] = (v += a[3]) & 0xffff;
	            v = v >>> 16;
	            a[4] = (v += a[4]) & 0xffff;
	            v = v >>> 16;
	            a[5] = (v += a[5]) & 0xffff;
	            v = v >>> 16;
	            a[6] = (v += a[6]) & 0xffff;
	            v = v >>> 16;
	            a[7] = (v += a[7]) & 0xffff;
	            v = v >>> 16;
	            a[8] = (v += a[8]) & 0xffff;
	            v = v >>> 16;
	            a[9] = (v += a[9]) & 0xffff;
	            v = v >>> 16;
	            a[10] = (v += a[10]) & 0xffff;
	            v = v >>> 16;
	            a[11] = (v += a[11]) & 0xffff;
	            v = v >>> 16;
	            a[12] = (v += a[12]) & 0xffff;
	            v = v >>> 16;
	            a[13] = (v += a[13]) & 0xffff;
	            v = v >>> 16;
	            a[14] = (v += a[14]) & 0xffff;
	            v = v >>> 16;
	            a[15] += v;
	}
	
	function _addmodp(a, b) {
	            var r = [];
	            var v;
	            r[0] = (v = ((0 | a[15] >>> 15) + (0 | b[15] >>> 15)) * 19 + a[0] + b[0]) & 0xffff;
	            r[1] = (v = (v >>> 16) + a[1] + b[1]) & 0xffff;
	            r[2] = (v = (v >>> 16) + a[2] + b[2]) & 0xffff;
	            r[3] = (v = (v >>> 16) + a[3] + b[3]) & 0xffff;
	            r[4] = (v = (v >>> 16) + a[4] + b[4]) & 0xffff;
	            r[5] = (v = (v >>> 16) + a[5] + b[5]) & 0xffff;
	            r[6] = (v = (v >>> 16) + a[6] + b[6]) & 0xffff;
	            r[7] = (v = (v >>> 16) + a[7] + b[7]) & 0xffff;
	            r[8] = (v = (v >>> 16) + a[8] + b[8]) & 0xffff;
	            r[9] = (v = (v >>> 16) + a[9] + b[9]) & 0xffff;
	            r[10] = (v = (v >>> 16) + a[10] + b[10]) & 0xffff;
	            r[11] = (v = (v >>> 16) + a[11] + b[11]) & 0xffff;
	            r[12] = (v = (v >>> 16) + a[12] + b[12]) & 0xffff;
	            r[13] = (v = (v >>> 16) + a[13] + b[13]) & 0xffff;
	            r[14] = (v = (v >>> 16) + a[14] + b[14]) & 0xffff;
	            r[15] = (v >>> 16) + (a[15] & 0x7fff) + (b[15] & 0x7fff);
	            return r;
	}
	
	function _submodp(a, b) {
	            var r = [];
	            var v;
	            r[0] = (v = 0x80000 + ((0 | a[15] >>> 15) - (0 | b[15] >>> 15) - 1) * 19 + a[0] - b[0]) & 0xffff;
	            r[1] = (v = (v >>> 16) + 0x7fff8 + a[1] - b[1]) & 0xffff;
	            r[2] = (v = (v >>> 16) + 0x7fff8 + a[2] - b[2]) & 0xffff;
	            r[3] = (v = (v >>> 16) + 0x7fff8 + a[3] - b[3]) & 0xffff;
	            r[4] = (v = (v >>> 16) + 0x7fff8 + a[4] - b[4]) & 0xffff;
	            r[5] = (v = (v >>> 16) + 0x7fff8 + a[5] - b[5]) & 0xffff;
	            r[6] = (v = (v >>> 16) + 0x7fff8 + a[6] - b[6]) & 0xffff;
	            r[7] = (v = (v >>> 16) + 0x7fff8 + a[7] - b[7]) & 0xffff;
	            r[8] = (v = (v >>> 16) + 0x7fff8 + a[8] - b[8]) & 0xffff;
	            r[9] = (v = (v >>> 16) + 0x7fff8 + a[9] - b[9]) & 0xffff;
	            r[10] = (v = (v >>> 16) + 0x7fff8 + a[10] - b[10]) & 0xffff;
	            r[11] = (v = (v >>> 16) + 0x7fff8 + a[11] - b[11]) & 0xffff;
	            r[12] = (v = (v >>> 16) + 0x7fff8 + a[12] - b[12]) & 0xffff;
	            r[13] = (v = (v >>> 16) + 0x7fff8 + a[13] - b[13]) & 0xffff;
	            r[14] = (v = (v >>> 16) + 0x7fff8 + a[14] - b[14]) & 0xffff;
	            r[15] = (v >>> 16) + 0x7ff8 + (a[15] & 0x7fff) - (b[15] & 0x7fff);
	            return r;
	}
	
	function _invmodp(a) {
	            var c = a;
	            var i = 250;
	            while (--i) {
	                        a = _sqrmodp(a);
	                        a = _mulmodp(a, c);
	            }
	            a = _sqrmodp(a);
	            a = _sqrmodp(a);
	            a = _mulmodp(a, c);
	            a = _sqrmodp(a);
	            a = _sqrmodp(a);
	            a = _mulmodp(a, c);
	            a = _sqrmodp(a);
	            a = _mulmodp(a, c);
	            return a;
	}
	
	function _mulasmall(a) {
	            // 'division by 0x10000' can not be replaced by '>> 16' because
	            // more than 32 bits of precision are needed
	            var m = 121665;
	            var r = [];
	            var v;
	            r[0] = (v = a[0] * m) & 0xffff;
	            r[1] = (v = (0 | v / 0x10000) + a[1] * m) & 0xffff;
	            r[2] = (v = (0 | v / 0x10000) + a[2] * m) & 0xffff;
	            r[3] = (v = (0 | v / 0x10000) + a[3] * m) & 0xffff;
	            r[4] = (v = (0 | v / 0x10000) + a[4] * m) & 0xffff;
	            r[5] = (v = (0 | v / 0x10000) + a[5] * m) & 0xffff;
	            r[6] = (v = (0 | v / 0x10000) + a[6] * m) & 0xffff;
	            r[7] = (v = (0 | v / 0x10000) + a[7] * m) & 0xffff;
	            r[8] = (v = (0 | v / 0x10000) + a[8] * m) & 0xffff;
	            r[9] = (v = (0 | v / 0x10000) + a[9] * m) & 0xffff;
	            r[10] = (v = (0 | v / 0x10000) + a[10] * m) & 0xffff;
	            r[11] = (v = (0 | v / 0x10000) + a[11] * m) & 0xffff;
	            r[12] = (v = (0 | v / 0x10000) + a[12] * m) & 0xffff;
	            r[13] = (v = (0 | v / 0x10000) + a[13] * m) & 0xffff;
	            r[14] = (v = (0 | v / 0x10000) + a[14] * m) & 0xffff;
	            r[15] = (0 | v / 0x10000) + a[15] * m;
	            _reduce(r);
	            return r;
	}
	
	function _dbl(x, z) {
	            var x_2, z_2, m, n, o;
	            m = _sqrmodp(_addmodp(x, z));
	            n = _sqrmodp(_submodp(x, z));
	            o = _submodp(m, n);
	            x_2 = _mulmodp(n, m);
	            z_2 = _mulmodp(_addmodp(_mulasmall(o), m), o);
	            return [x_2, z_2];
	}
	
	function _sum(x, z, x_p, z_p, x_1) {
	            var x_3, z_3, p, q;
	            p = _mulmodp(_submodp(x, z), _addmodp(x_p, z_p));
	            q = _mulmodp(_addmodp(x, z), _submodp(x_p, z_p));
	            x_3 = _sqrmodp(_addmodp(p, q));
	            z_3 = _mulmodp(_sqrmodp(_submodp(p, q)), x_1);
	            return [x_3, z_3];
	}
	
	function _generateKey(curve25519) {
	            var buffer = crypto.randomBytes(32);
	
	            // For Curve25519 DH keys, we need to apply some bit mask on generated
	            // keys:
	            // * clear bit 0, 1, 2 of first byte
	            // * clear bit 7 of last byte
	            // * set bit 6 of last byte
	            if (curve25519 === true) {
	                        buffer[0] &= 0xf8;
	                        buffer[31] = buffer[31] & 0x7f | 0x40;
	            }
	            var result = [];
	            for (var i = 0; i < buffer.length; i++) {
	                        result.push(String.fromCharCode(buffer[i]));
	            }
	            return result.join('');
	}
	
	// Expose some functions to the outside through this name space.
	// Note: This is not part of the public API.
	ns.getbit = _getbit;
	ns.setbit = _setbit;
	ns.addmodp = _addmodp;
	ns.invmodp = _invmodp;
	ns.mulmodp = _mulmodp;
	ns.reduce = _reduce;
	ns.dbl = _dbl;
	ns.sum = _sum;
	ns.ZERO = _ZERO;
	ns.ONE = _ONE;
	ns.BASE = _BASE;
	ns.bigintadd = _bigintadd;
	ns.bigintsub = _bigintsub;
	ns.bigintcmp = _bigintcmp;
	ns.mulmodp = _mulmodp;
	ns.sqrmodp = _sqrmodp;
	ns.generateKey = _generateKey;
	
	module.exports = ns;

/***/ }),
/* 498 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	/**
	 * @fileOverview
	 * A collection of general utility functions..
	 */
	
	/*
	 * Copyright (c) 2011, 2012, 2014 Ron Garret
	 * Copyright (c) 2007, 2013, 2014 Michele Bini
	 * Copyright (c) 2014 Mega Limited
	 * under the MIT License.
	 *
	 * Authors: Guy K. Kloss, Michele Bini, Ron Garret
	 *
	 * You should have received a copy of the license along with this program.
	 */
	
	var core = __webpack_require__(497);
	
	/**
	 * @exports jodid25519/utils
	 * A collection of general utility functions..
	 *
	 * @description
	 * A collection of general utility functions..
	 */
	var ns = {};
	
	var _HEXCHARS = "0123456789abcdef";
	
	function _hexencode(vector) {
	    var result = [];
	    for (var i = vector.length - 1; i >= 0; i--) {
	        var value = vector[i];
	        result.push(_HEXCHARS.substr(value >>> 12 & 0x0f, 1));
	        result.push(_HEXCHARS.substr(value >>> 8 & 0x0f, 1));
	        result.push(_HEXCHARS.substr(value >>> 4 & 0x0f, 1));
	        result.push(_HEXCHARS.substr(value & 0x0f, 1));
	    }
	    return result.join('');
	}
	
	function _hexdecode(vector) {
	    var result = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
	    for (var i = vector.length - 1, l = 0; i >= 0; i -= 4) {
	        result[l] = _HEXCHARS.indexOf(vector.charAt(i)) | _HEXCHARS.indexOf(vector.charAt(i - 1)) << 4 | _HEXCHARS.indexOf(vector.charAt(i - 2)) << 8 | _HEXCHARS.indexOf(vector.charAt(i - 3)) << 12;
	        l++;
	    }
	    return result;
	}
	
	var _BASE32CHARS = "abcdefghijklmnopqrstuvwxyz234567";
	
	var _BASE32VALUES = function () {
	    var result = {};
	    for (var i = 0; i < _BASE32CHARS.length; i++) {
	        result[_BASE32CHARS.charAt(i)] = i;
	    }
	    return result;
	}();
	
	function _base32encode(n) {
	    var c;
	    var r = "";
	    for (c = 0; c < 255; c += 5) {
	        r = _BASE32CHARS.substr(core.getbit(n, c) + (core.getbit(n, c + 1) << 1) + (core.getbit(n, c + 2) << 2) + (core.getbit(n, c + 3) << 3) + (core.getbit(n, c + 4) << 4), 1) + r;
	    }
	    return r;
	}
	
	function _base32decode(n) {
	    var c = 0;
	    var r = core.ZERO();
	    var l = n.length;
	    for (c = 0; l > 0 && c < 255; c += 5) {
	        l--;
	        var v = _BASE32VALUES[n.substr(l, 1)];
	        core.setbit(r, c, v & 1);
	        v >>= 1;
	        core.setbit(r, c + 1, v & 1);
	        v >>= 1;
	        core.setbit(r, c + 2, v & 1);
	        v >>= 1;
	        core.setbit(r, c + 3, v & 1);
	        v >>= 1;
	        core.setbit(r, c + 4, v & 1);
	    }
	    return r;
	}
	
	function _map(f, l) {
	    var result = new Array(l.length);
	    for (var i = 0; i < l.length; i++) {
	        result[i] = f(l[i]);
	    }
	    return result;
	}
	
	function _chr(n) {
	    return String.fromCharCode(n);
	}
	
	function _ord(c) {
	    return c.charCodeAt(0);
	}
	
	function _bytes2string(bytes) {
	    return _map(_chr, bytes).join('');
	}
	
	function _string2bytes(s) {
	    return _map(_ord, s);
	}
	
	// Expose some functions to the outside through this name space.
	
	/**
	 * Encodes an array of unsigned 8-bit integers to a hex string.
	 *
	 * @function
	 * @param vector {array}
	 *     Array containing the byte values.
	 * @returns {string}
	 *     String containing vector in a hexadecimal representation.
	 */
	ns.hexEncode = _hexencode;
	
	/**
	 * Decodes a hex string to an array of unsigned 8-bit integers.
	 *
	 * @function
	 * @param vector {string}
	 *     String containing vector in a hexadecimal representation.
	 * @returns {array}
	 *     Array containing the byte values.
	 */
	ns.hexDecode = _hexdecode;
	
	/**
	 * Encodes an array of unsigned 8-bit integers using base32 encoding.
	 *
	 * @function
	 * @param vector {array}
	 *     Array containing the byte values.
	 * @returns {string}
	 *     String containing vector in a hexadecimal representation.
	 */
	ns.base32encode = _base32encode;
	
	/**
	 * Decodes a base32 encoded string to an array of unsigned 8-bit integers.
	 *
	 * @function
	 * @param vector {string}
	 *     String containing vector in a hexadecimal representation.
	 * @returns {array}
	 *     Array containing the byte values.
	 */
	ns.base32decode = _base32decode;
	
	/**
	 * Converts an unsigned 8-bit integer array representation to a byte string.
	 *
	 * @function
	 * @param vector {array}
	 *     Array containing the byte values.
	 * @returns {string}
	 *     Byte string representation of vector.
	 */
	ns.bytes2string = _bytes2string;
	
	/**
	 * Converts a byte string representation to an array of unsigned
	 * 8-bit integers.
	 *
	 * @function
	 * @param vector {array}
	 *     Array containing the byte values.
	 * @returns {string}
	 *     Byte string representation of vector.
	 */
	ns.string2bytes = _string2bytes;
	
	module.exports = ns;

/***/ }),
/* 499 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	/**
	 * @fileOverview
	 * Core operations on curve 25519 required for the higher level modules.
	 */
	
	/*
	 * Copyright (c) 2007, 2013, 2014 Michele Bini
	 * Copyright (c) 2014 Mega Limited
	 * under the MIT License.
	 *
	 * Authors: Guy K. Kloss, Michele Bini
	 *
	 * You should have received a copy of the license along with this program.
	 */
	
	var core = __webpack_require__(497);
	var utils = __webpack_require__(498);
	
	/**
	 * @exports jodid25519/curve255
	 * Legacy compatibility module for Michele Bini's previous curve255.js.
	 *
	 * @description
	 * Legacy compatibility module for Michele Bini's previous curve255.js.
	 *
	 * <p>
	 * This code presents an API with all key formats as previously available
	 * from Michele Bini's curve255.js implementation.
	 * </p>
	 */
	var ns = {};
	
	function curve25519_raw(f, c) {
	  var a, x_1, q;
	
	  x_1 = c;
	  a = core.dbl(x_1, core.ONE());
	  q = [x_1, core.ONE()];
	
	  var n = 255;
	
	  while (core.getbit(f, n) == 0) {
	    n--;
	    // For correct constant-time operation, bit 255 should always be
	    // set to 1 so the following 'while' loop is never entered.
	    if (n < 0) {
	      return core.ZERO();
	    }
	  }
	  n--;
	
	  var aq = [a, q];
	
	  while (n >= 0) {
	    var r, s;
	    var b = core.getbit(f, n);
	    r = core.sum(aq[0][0], aq[0][1], aq[1][0], aq[1][1], x_1);
	    s = core.dbl(aq[1 - b][0], aq[1 - b][1]);
	    aq[1 - b] = s;
	    aq[b] = r;
	    n--;
	  }
	  q = aq[1];
	
	  q[1] = core.invmodp(q[1]);
	  q[0] = core.mulmodp(q[0], q[1]);
	  core.reduce(q[0]);
	  return q[0];
	}
	
	function curve25519b32(a, b) {
	  return _base32encode(curve25519(_base32decode(a), _base32decode(b)));
	}
	
	function curve25519(f, c) {
	  if (!c) {
	    c = core.BASE();
	  }
	  f[0] &= 0xFFF8;
	  f[15] = f[15] & 0x7FFF | 0x4000;
	  return curve25519_raw(f, c);
	}
	
	function _hexEncodeVector(k) {
	  var hexKey = utils.hexEncode(k);
	  // Pad with '0' at the front.
	  hexKey = new Array(64 + 1 - hexKey.length).join('0') + hexKey;
	  // Invert bytes.
	  return hexKey.split(/(..)/).reverse().join('');
	}
	
	function _hexDecodeVector(v) {
	  // assert(length(x) == 64);
	  // Invert bytes.
	  var hexKey = v.split(/(..)/).reverse().join('');
	  return utils.hexDecode(hexKey);
	}
	
	// Expose some functions to the outside through this name space.
	
	/**
	 * Computes the scalar product of a point on the curve 25519.
	 *
	 * This function is used for the DH key-exchange protocol.
	 *
	 * Before multiplication, some bit operations are applied to the
	 * private key to ensure it is a valid Curve25519 secret key.
	 * It is the user's responsibility to make sure that the private
	 * key is a uniformly random, secret value.
	 *
	 * @function
	 * @param f {array}
	 *     Private key.
	 * @param c {array}
	 *     Public point on the curve. If not given, the curve's base point is used.
	 * @returns {array}
	 *     Key point resulting from scalar product.
	 */
	ns.curve25519 = curve25519;
	
	/**
	 * Computes the scalar product of a point on the curve 25519.
	 *
	 * This variant does not make sure that the private key is valid.
	 * The user has the responsibility to ensure the private key is
	 * valid or that this results in a safe protocol.  Unless you know
	 * exactly what you are doing, you should not use this variant,
	 * please use 'curve25519' instead.
	 *
	 * @function
	 * @param f {array}
	 *     Private key.
	 * @param c {array}
	 *     Public point on the curve. If not given, the curve's base point is used.
	 * @returns {array}
	 *     Key point resulting from scalar product.
	 */
	ns.curve25519_raw = curve25519_raw;
	
	/**
	 * Encodes the internal representation of a key to a canonical hex
	 * representation.
	 *
	 * This is the format commonly used in other libraries and for
	 * test vectors, and is equivalent to the hex dump of the key in
	 * little-endian binary format.
	 *
	 * @function
	 * @param n {array}
	 *     Array representation of key.
	 * @returns {string}
	 *     Hexadecimal string representation of key.
	 */
	ns.hexEncodeVector = _hexEncodeVector;
	
	/**
	 * Decodes a canonical hex representation of a key
	 * to an internally compatible array representation.
	 *
	 * @function
	 * @param n {string}
	 *     Hexadecimal string representation of key.
	 * @returns {array}
	 *     Array representation of key.
	 */
	ns.hexDecodeVector = _hexDecodeVector;
	
	/**
	 * Encodes the internal representation of a key into a
	 * hexadecimal representation.
	 *
	 * This is a strict positional notation, most significant digit first.
	 *
	 * @function
	 * @param n {array}
	 *     Array representation of key.
	 * @returns {string}
	 *     Hexadecimal string representation of key.
	 */
	ns.hexencode = utils.hexEncode;
	
	/**
	 * Decodes a hex representation of a key to an internally
	 * compatible array representation.
	 *
	 * @function
	 * @param n {string}
	 *     Hexadecimal string representation of key.
	 * @returns {array}
	 *     Array representation of key.
	 */
	ns.hexdecode = utils.hexDecode;
	
	/**
	 * Encodes the internal representation of a key to a base32
	 * representation.
	 *
	 * @function
	 * @param n {array}
	 *     Array representation of key.
	 * @returns {string}
	 *     Base32 string representation of key.
	 */
	ns.base32encode = utils.base32encode;
	
	/**
	 * Decodes a base32 representation of a key to an internally
	 * compatible array representation.
	 *
	 * @function
	 * @param n {string}
	 *     Base32 string representation of key.
	 * @returns {array}
	 *     Array representation of key.
	 */
	ns.base32decode = utils.base32decode;
	
	module.exports = ns;

/***/ }),
/* 500 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {"use strict";
	/**
	 * @fileOverview
	 * Digital signature scheme based on Curve25519 (Ed25519 or EdDSA).
	 */
	
	/*
	 * Copyright (c) 2011, 2012, 2014 Ron Garret
	 * Copyright (c) 2014 Mega Limited
	 * under the MIT License.
	 *
	 * Authors: Guy K. Kloss, Ron Garret
	 *
	 * You should have received a copy of the license along with this program.
	 */
	
	var core = __webpack_require__(497);
	var curve255 = __webpack_require__(499);
	var utils = __webpack_require__(498);
	var BigInteger = __webpack_require__(492).BigInteger;
	var crypto = __webpack_require__(392);
	
	/**
	 * @exports jodid25519/eddsa
	 * Digital signature scheme based on Curve25519 (Ed25519 or EdDSA).
	 *
	 * @description
	 * Digital signature scheme based on Curve25519 (Ed25519 or EdDSA).
	 *
	 * <p>
	 * This code is adapted from fast-djbec.js, a faster but more complicated
	 * version of the Ed25519 encryption scheme (as compared to djbec.js).
	 * It uses two different representations for big integers: The jsbn
	 * BigInteger class, which can represent arbitrary-length numbers, and a
	 * special fixed-length representation optimised for 256-bit integers.
	 * The reason both are needed is that the Ed25519 algorithm requires some
	 * 512-bit numbers.</p>
	*/
	var ns = {};
	
	function _bi255(value) {
	    if (!(this instanceof _bi255)) {
	        return new _bi255(value);
	    }
	    if (typeof value === 'undefined') {
	        return _ZERO;
	    }
	    var c = value.constructor;
	    if ((c === Array || c === Uint16Array || c === Uint32Array) && value.length === 16) {
	        this.n = value;
	    } else if (c === Array && value.length === 32) {
	        this.n = _bytes2bi255(value).n;
	    } else if (c === String) {
	        this.n = utils.hexDecode(value);
	    } else if (c === Number) {
	        this.n = [value & 0xffff, value >> 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
	    } else if (value instanceof _bi255) {
	        this.n = value.n.slice(0); // Copy constructor
	    } else {
	        throw "Bad argument for bignum: " + value;
	    }
	}
	
	_bi255.prototype = {
	    'toString': function toString() {
	        return utils.hexEncode(this.n);
	    },
	    'toSource': function toSource() {
	        return '_' + utils.hexEncode(this.n);
	    },
	    'plus': function plus(n1) {
	        return _bi255(core.bigintadd(this.n, n1.n));
	    },
	    'minus': function minus(n1) {
	        return _bi255(core.bigintsub(this.n, n1.n)).modq();
	    },
	    'times': function times(n1) {
	        return _bi255(core.mulmodp(this.n, n1.n));
	    },
	    'divide': function divide(n1) {
	        return this.times(n1.inv());
	    },
	    'sqr': function sqr() {
	        return _bi255(core.sqrmodp(this.n));
	    },
	    'cmp': function cmp(n1) {
	        return core.bigintcmp(this.n, n1.n);
	    },
	    'equals': function equals(n1) {
	        return this.cmp(n1) === 0;
	    },
	    'isOdd': function isOdd() {
	        return (this.n[0] & 1) === 1;
	    },
	    'shiftLeft': function shiftLeft(cnt) {
	        _shiftL(this.n, cnt);
	        return this;
	    },
	    'shiftRight': function shiftRight(cnt) {
	        _shiftR(this.n, cnt);
	        return this;
	    },
	    'inv': function inv() {
	        return _bi255(core.invmodp(this.n));
	    },
	    'pow': function pow(e) {
	        return _bi255(_pow(this.n, e.n));
	    },
	    'modq': function modq() {
	        return _modq(this);
	    },
	    'bytes': function bytes() {
	        return _bi255_bytes(this);
	    }
	};
	
	function _shiftL(n, cnt) {
	    var lastcarry = 0;
	    for (var i = 0; i < 16; i++) {
	        var carry = n[i] >> 16 - cnt;
	        n[i] = n[i] << cnt & 0xffff | lastcarry;
	        lastcarry = carry;
	    }
	    return n;
	}
	
	function _shiftR(n, cnt) {
	    var lastcarry = 0;
	    for (var i = 15; i >= 0; i--) {
	        var carry = n[i] << 16 - cnt & 0xffff;
	        n[i] = n[i] >> cnt | lastcarry;
	        lastcarry = carry;
	    }
	    return n;
	}
	
	function _bi255_bytes(n) {
	    n = _bi255(n); // Make a copy because shiftRight is destructive
	    var a = new Array(32);
	    for (var i = 31; i >= 0; i--) {
	        a[i] = n.n[0] & 0xff;
	        n.shiftRight(8);
	    }
	    return a;
	}
	
	function _bytes2bi255(a) {
	    var n = _ZERO;
	    for (var i = 0; i < 32; i++) {
	        n.shiftLeft(8);
	        n = n.plus(_bi255(a[i]));
	    }
	    return n;
	}
	
	function _pow(n, e) {
	    var result = core.ONE();
	    for (var i = 0; i < 256; i++) {
	        if (core.getbit(e, i) === 1) {
	            result = core.mulmodp(result, n);
	        }
	        n = core.sqrmodp(n);
	    }
	    return result;
	}
	
	var _ZERO = _bi255(0);
	var _ONE = _bi255(1);
	var _TWO = _bi255(2);
	// This is the core prime.
	var _Q = _bi255([0xffff - 18, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0x7fff]);
	
	function _modq(n) {
	    core.reduce(n.n);
	    if (n.cmp(_Q) >= 0) {
	        return _modq(n.minus(_Q));
	    }
	    if (n.cmp(_ZERO) === -1) {
	        return _modq(n.plus(_Q));
	    } else {
	        return n;
	    }
	}
	
	// _RECOVERY_EXPONENT = _Q.plus(_bi255(3)).divide(_bi255(8));
	var _RECOVERY_EXPONENT = _bi255('0ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe');
	// _D = _Q.minus(_bi255(121665)).divide(_bi255(121666));
	var _D = _bi255('52036cee2b6ffe738cc740797779e89800700a4d4141d8ab75eb4dca135978a3');
	// _I = _TWO.pow(_Q.minus(_ONE).divide(_bi255(4)));
	var _I = _bi255('2b8324804fc1df0b2b4d00993dfbd7a72f431806ad2fe478c4ee1b274a0ea0b0');
	// _L = _TWO.pow(_bi255(252)).plus(_bi255('14def9dea2f79cd65812631a5cf5d3ed'));
	var _L = _bi255('1000000000000000000000000000000014def9dea2f79cd65812631a5cf5d3ed');
	var _L_BI = _bi('1000000000000000000000000000000014def9dea2f79cd65812631a5cf5d3ed', 16);
	
	// ////////////////////////////////////////////////////////////
	
	function _isoncurve(p) {
	    var x = p[0];
	    var y = p[1];
	    var xsqr = x.sqr();
	    var ysqr = y.sqr();
	    var v = _D.times(xsqr).times(ysqr);
	    return ysqr.minus(xsqr).minus(_ONE).minus(v).modq().equals(_ZERO);
	}
	
	function _xrecover(y) {
	    var ysquared = y.sqr();
	    var xx = ysquared.minus(_ONE).divide(_ONE.plus(_D.times(ysquared)));
	    var x = xx.pow(_RECOVERY_EXPONENT);
	    if (!x.times(x).minus(xx).equals(_ZERO)) {
	        x = x.times(_I);
	    }
	    if (x.isOdd()) {
	        x = _Q.minus(x);
	    }
	    return x;
	}
	
	function _x_pt_add(pt1, pt2) {
	    var x1 = pt1[0];
	    var y1 = pt1[1];
	    var z1 = pt1[2];
	    var t1 = pt1[3];
	    var x2 = pt2[0];
	    var y2 = pt2[1];
	    var z2 = pt2[2];
	    var t2 = pt2[3];
	    var A = y1.minus(x1).times(y2.plus(x2));
	    var B = y1.plus(x1).times(y2.minus(x2));
	    var C = z1.times(_TWO).times(t2);
	    var D = t1.times(_TWO).times(z2);
	    var E = D.plus(C);
	    var F = B.minus(A);
	    var G = B.plus(A);
	    var H = D.minus(C);
	    return [E.times(F), G.times(H), F.times(G), E.times(H)];
	}
	
	function _xpt_double(pt1) {
	    var x1 = pt1[0];
	    var y1 = pt1[1];
	    var z1 = pt1[2];
	    var A = x1.times(x1);
	    var B = y1.times(y1);
	    var C = _TWO.times(z1).times(z1);
	    var D = _Q.minus(A);
	    var J = x1.plus(y1);
	    var E = J.times(J).minus(A).minus(B);
	    var G = D.plus(B);
	    var F = G.minus(C);
	    var H = D.minus(B);
	    return [E.times(F), G.times(H), F.times(G), E.times(H)];
	}
	
	function _xpt_mult(pt, n) {
	    if (n.equals(_ZERO)) {
	        return [_ZERO, _ONE, _ONE, _ZERO];
	    }
	    var odd = n.isOdd();
	    n.shiftRight(1);
	    var value = _xpt_double(_xpt_mult(pt, n));
	    return odd ? _x_pt_add(value, pt) : value;
	}
	
	function _pt_xform(pt) {
	    var x = pt[0];
	    var y = pt[1];
	    return [x, y, _ONE, x.times(y)];
	}
	
	function _pt_unxform(pt) {
	    var x = pt[0];
	    var y = pt[1];
	    var z = pt[2];
	    var invz = z.inv();
	    return [x.times(invz), y.times(invz)];
	}
	
	function _scalarmult(pt, n) {
	    return _pt_unxform(_xpt_mult(_pt_xform(pt), n));
	}
	
	function _bytesgetbit(bytes, n) {
	    return bytes[bytes.length - (n >>> 3) - 1] >> (n & 7) & 1;
	}
	
	function _xpt_mult_bytes(pt, bytes) {
	    var r = [_ZERO, _ONE, _ONE, _ZERO];
	    for (var i = (bytes.length << 3) - 1; i >= 0; i--) {
	        r = _xpt_double(r);
	        if (_bytesgetbit(bytes, i) === 1) {
	            r = _x_pt_add(r, pt);
	        }
	    }
	    return r;
	}
	
	function _scalarmultBytes(pt, bytes) {
	    return _pt_unxform(_xpt_mult_bytes(_pt_xform(pt), bytes));
	}
	
	var _by = _bi255(4).divide(_bi255(5));
	var _bx = _xrecover(_by);
	var _bp = [_bx, _by];
	
	function _encodeint(n) {
	    return n.bytes(32).reverse();
	}
	function _decodeint(b) {
	    return _bi255(b.slice(0).reverse());
	}
	
	function _encodepoint(p) {
	    var v = _encodeint(p[1]);
	    if (p[0].isOdd()) {
	        v[31] |= 0x80;
	    }
	    return v;
	}
	
	function _decodepoint(v) {
	    v = v.slice(0);
	    var signbit = v[31] >> 7;
	    v[31] &= 127;
	    var y = _decodeint(v);
	    var x = _xrecover(y);
	    if ((x.n[0] & 1) !== signbit) {
	        x = _Q.minus(x);
	    }
	    var p = [x, y];
	    if (!_isoncurve(p)) {
	        throw 'Point is not on curve';
	    }
	    return p;
	}
	
	// //////////////////////////////////////////////////
	
	/**
	 * Factory function to create a suitable BigInteger.
	 *
	 * @param value
	 *     The value for the big integer.
	 * @param base {integer}
	 *     Base of the conversion of elements in ``value``.
	 * @returns
	 *     A BigInteger object.
	 */
	function _bi(value, base) {
	    if (base !== undefined) {
	        if (base === 256) {
	            return _bi(utils.string2bytes(value));
	        }
	        return new BigInteger(value, base);
	    } else if (typeof value === 'string') {
	        return new BigInteger(value, 10);
	    } else if (value instanceof Array || value instanceof Uint8Array || Buffer.isBuffer(value)) {
	        return new BigInteger(value);
	    } else if (typeof value === 'number') {
	        return new BigInteger(value.toString(), 10);
	    } else {
	        throw "Can't convert " + value + " to BigInteger";
	    }
	}
	
	function _bi2bytes(n, cnt) {
	    if (cnt === undefined) {
	        cnt = n.bitLength() + 7 >>> 3;
	    }
	    var bytes = new Array(cnt);
	    for (var i = cnt - 1; i >= 0; i--) {
	        bytes[i] = n[0] & 255; // n.and(0xff);
	        n = n.shiftRight(8);
	    }
	    return bytes;
	}
	
	BigInteger.prototype.bytes = function (n) {
	    return _bi2bytes(this, n);
	};
	
	// /////////////////////////////////////////////////////////
	
	function _bytehash(s) {
	    var sha = crypto.createHash('sha512').update(s).digest();
	    return _bi2bytes(_bi(sha), 64).reverse();
	}
	
	function _stringhash(s) {
	    var sha = crypto.createHash('sha512').update(s).digest();
	    return _map(_chr, _bi2bytes(_bi(sha), 64)).join('');
	}
	
	function _inthash(s) {
	    // Need a leading 0 to prevent sign extension
	    return _bi([0].concat(_bytehash(s)));
	}
	
	function _inthash_lo(s) {
	    return _bi255(_bytehash(s).slice(32, 64));
	}
	
	function _inthash_mod_l(s) {
	    return _inthash(s).mod(_L_BI);
	}
	
	function _get_a(sk) {
	    var a = _inthash_lo(sk);
	    a.n[0] &= 0xfff8;
	    a.n[15] &= 0x3fff;
	    a.n[15] |= 0x4000;
	    return a;
	}
	
	function _publickey(sk) {
	    return _encodepoint(_scalarmult(_bp, _get_a(sk)));
	}
	
	function _map(f, l) {
	    var result = new Array(l.length);
	    for (var i = 0; i < l.length; i++) {
	        result[i] = f(l[i]);
	    }
	    return result;
	}
	
	function _chr(n) {
	    return String.fromCharCode(n);
	}
	
	function _ord(c) {
	    return c.charCodeAt(0);
	}
	
	function _pt_add(p1, p2) {
	    return _pt_unxform(_x_pt_add(_pt_xform(p1), _pt_xform(p2)));
	}
	
	// Exports for the API.
	
	/**
	 * Checks whether a point is on the curve.
	 *
	 * @function
	 * @param point {string}
	 *     The point to check for in a byte string representation.
	 * @returns {boolean}
	 *     true if the point is on the curve, false otherwise.
	 */
	ns.isOnCurve = function (point) {
	    try {
	        _isoncurve(_decodepoint(utils.string2bytes(point)));
	    } catch (e) {
	        if (e === 'Point is not on curve') {
	            return false;
	        } else {
	            throw e;
	        }
	    }
	    return true;
	};
	
	/**
	 * Computes the EdDSA public key.
	 *
	 * <p>Note: Seeds should be a byte string, not a unicode string containing
	 * multi-byte characters.</p>
	 *
	 * @function
	 * @param keySeed {string}
	 *     Private key seed in the form of a byte string.
	 * @returns {string}
	 *     Public key as byte string computed from the private key seed
	 *     (32 bytes).
	 */
	ns.publicKey = function (keySeed) {
	    return utils.bytes2string(_publickey(keySeed));
	};
	
	/**
	 * Computes an EdDSA signature of a message.
	 *
	 * <p>Notes:</p>
	 *
	 * <ul>
	 *   <li>Unicode messages need to be converted to a byte representation
	 *   (e. g. UTF-8).</li>
	 *   <li>If `publicKey` is given, and it is *not* a point of the curve,
	 *   the signature will be faulty, but no error will be thrown.</li>
	 * </ul>
	 *
	 * @function
	 * @param message {string}
	 *     Message in the form of a byte string.
	 * @param keySeed {string}
	 *     Private key seed in the form of a byte string.
	 * @param publicKey {string}
	 *     Public key as byte string (if not present, it will be computed from
	 *     the private key seed).
	 * @returns {string}
	 *     Detached message signature in the form of a byte string (64 bytes).
	 */
	ns.sign = function (message, keySeed, publicKey) {
	    if (publicKey === undefined) {
	        publicKey = _publickey(keySeed);
	    } else {
	        publicKey = utils.string2bytes(publicKey);
	    }
	    var a = _bi(_get_a(keySeed).toString(), 16);
	    var hs = _stringhash(keySeed);
	    var r = _bytehash(hs.slice(32, 64) + message);
	    var rp = _scalarmultBytes(_bp, r);
	    var erp = _encodepoint(rp);
	    r = _bi(r).mod(_bi(1, 10).shiftLeft(512));
	    var s = _map(_chr, erp).join('') + _map(_chr, publicKey).join('') + message;
	    s = _inthash_mod_l(s).multiply(a).add(r).mod(_L_BI);
	    return utils.bytes2string(erp.concat(_encodeint(s)));
	};
	
	/**
	 * Verifies an EdDSA signature of a message with the public key.
	 *
	 * <p>Note: Unicode messages need to be converted to a byte representation
	 * (e. g. UTF-8).</p>
	 *
	 * @function
	 * @param signature {string}
	 *     Message signature in the form of a byte string. Can be detached
	 *     (64 bytes), or attached to be sliced off.
	 * @param message {string}
	 *     Message in the form of a byte string.
	 * @param publicKey {string}
	 *     Public key as byte string (if not present, it will be computed from
	 *     the private key seed).
	 * @returns {boolean}
	 *     true, if the signature verifies.
	 */
	ns.verify = function (signature, message, publicKey) {
	    signature = utils.string2bytes(signature.slice(0, 64));
	    publicKey = utils.string2bytes(publicKey);
	    var rpe = signature.slice(0, 32);
	    var rp = _decodepoint(rpe);
	    var a = _decodepoint(publicKey);
	    var s = _decodeint(signature.slice(32, 64));
	    var h = _inthash(utils.bytes2string(rpe.concat(publicKey)) + message);
	    var v1 = _scalarmult(_bp, s);
	    var value = _scalarmultBytes(a, _bi2bytes(h));
	    var v2 = _pt_add(rp, value);
	    return v1[0].equals(v2[0]) && v1[1].equals(v2[1]);
	};
	
	/**
	 * Generates a new random private key seed of 32 bytes length (256 bit).
	 *
	 * @function
	 * @returns {string}
	 *     Byte string containing a new random private key seed.
	 */
	ns.generateKeySeed = function () {
	    return core.generateKey(false);
	};
	
	module.exports = ns;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(290).Buffer))

/***/ }),
/* 501 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	(function (nacl) {
	  'use strict';
	
	  // Ported in 2014 by Dmitry Chestnykh and Devi Mandiri.
	  // Public domain.
	  //
	  // Implementation derived from TweetNaCl version 20140427.
	  // See for details: http://tweetnacl.cr.yp.to/
	
	  var gf = function gf(init) {
	    var i,
	        r = new Float64Array(16);
	    if (init) for (i = 0; i < init.length; i++) {
	      r[i] = init[i];
	    }return r;
	  };
	
	  //  Pluggable, initialized in high-level API below.
	  var randombytes = function randombytes() /* x, n */{
	    throw new Error('no PRNG');
	  };
	
	  var _0 = new Uint8Array(16);
	  var _9 = new Uint8Array(32);_9[0] = 9;
	
	  var gf0 = gf(),
	      gf1 = gf([1]),
	      _121665 = gf([0xdb41, 1]),
	      D = gf([0x78a3, 0x1359, 0x4dca, 0x75eb, 0xd8ab, 0x4141, 0x0a4d, 0x0070, 0xe898, 0x7779, 0x4079, 0x8cc7, 0xfe73, 0x2b6f, 0x6cee, 0x5203]),
	      D2 = gf([0xf159, 0x26b2, 0x9b94, 0xebd6, 0xb156, 0x8283, 0x149a, 0x00e0, 0xd130, 0xeef3, 0x80f2, 0x198e, 0xfce7, 0x56df, 0xd9dc, 0x2406]),
	      X = gf([0xd51a, 0x8f25, 0x2d60, 0xc956, 0xa7b2, 0x9525, 0xc760, 0x692c, 0xdc5c, 0xfdd6, 0xe231, 0xc0a4, 0x53fe, 0xcd6e, 0x36d3, 0x2169]),
	      Y = gf([0x6658, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666]),
	      I = gf([0xa0b0, 0x4a0e, 0x1b27, 0xc4ee, 0xe478, 0xad2f, 0x1806, 0x2f43, 0xd7a7, 0x3dfb, 0x0099, 0x2b4d, 0xdf0b, 0x4fc1, 0x2480, 0x2b83]);
	
	  function ts64(x, i, h, l) {
	    x[i] = h >> 24 & 0xff;
	    x[i + 1] = h >> 16 & 0xff;
	    x[i + 2] = h >> 8 & 0xff;
	    x[i + 3] = h & 0xff;
	    x[i + 4] = l >> 24 & 0xff;
	    x[i + 5] = l >> 16 & 0xff;
	    x[i + 6] = l >> 8 & 0xff;
	    x[i + 7] = l & 0xff;
	  }
	
	  function vn(x, xi, y, yi, n) {
	    var i,
	        d = 0;
	    for (i = 0; i < n; i++) {
	      d |= x[xi + i] ^ y[yi + i];
	    }return (1 & d - 1 >>> 8) - 1;
	  }
	
	  function crypto_verify_16(x, xi, y, yi) {
	    return vn(x, xi, y, yi, 16);
	  }
	
	  function crypto_verify_32(x, xi, y, yi) {
	    return vn(x, xi, y, yi, 32);
	  }
	
	  function core_salsa20(o, p, k, c) {
	    var j0 = c[0] & 0xff | (c[1] & 0xff) << 8 | (c[2] & 0xff) << 16 | (c[3] & 0xff) << 24,
	        j1 = k[0] & 0xff | (k[1] & 0xff) << 8 | (k[2] & 0xff) << 16 | (k[3] & 0xff) << 24,
	        j2 = k[4] & 0xff | (k[5] & 0xff) << 8 | (k[6] & 0xff) << 16 | (k[7] & 0xff) << 24,
	        j3 = k[8] & 0xff | (k[9] & 0xff) << 8 | (k[10] & 0xff) << 16 | (k[11] & 0xff) << 24,
	        j4 = k[12] & 0xff | (k[13] & 0xff) << 8 | (k[14] & 0xff) << 16 | (k[15] & 0xff) << 24,
	        j5 = c[4] & 0xff | (c[5] & 0xff) << 8 | (c[6] & 0xff) << 16 | (c[7] & 0xff) << 24,
	        j6 = p[0] & 0xff | (p[1] & 0xff) << 8 | (p[2] & 0xff) << 16 | (p[3] & 0xff) << 24,
	        j7 = p[4] & 0xff | (p[5] & 0xff) << 8 | (p[6] & 0xff) << 16 | (p[7] & 0xff) << 24,
	        j8 = p[8] & 0xff | (p[9] & 0xff) << 8 | (p[10] & 0xff) << 16 | (p[11] & 0xff) << 24,
	        j9 = p[12] & 0xff | (p[13] & 0xff) << 8 | (p[14] & 0xff) << 16 | (p[15] & 0xff) << 24,
	        j10 = c[8] & 0xff | (c[9] & 0xff) << 8 | (c[10] & 0xff) << 16 | (c[11] & 0xff) << 24,
	        j11 = k[16] & 0xff | (k[17] & 0xff) << 8 | (k[18] & 0xff) << 16 | (k[19] & 0xff) << 24,
	        j12 = k[20] & 0xff | (k[21] & 0xff) << 8 | (k[22] & 0xff) << 16 | (k[23] & 0xff) << 24,
	        j13 = k[24] & 0xff | (k[25] & 0xff) << 8 | (k[26] & 0xff) << 16 | (k[27] & 0xff) << 24,
	        j14 = k[28] & 0xff | (k[29] & 0xff) << 8 | (k[30] & 0xff) << 16 | (k[31] & 0xff) << 24,
	        j15 = c[12] & 0xff | (c[13] & 0xff) << 8 | (c[14] & 0xff) << 16 | (c[15] & 0xff) << 24;
	
	    var x0 = j0,
	        x1 = j1,
	        x2 = j2,
	        x3 = j3,
	        x4 = j4,
	        x5 = j5,
	        x6 = j6,
	        x7 = j7,
	        x8 = j8,
	        x9 = j9,
	        x10 = j10,
	        x11 = j11,
	        x12 = j12,
	        x13 = j13,
	        x14 = j14,
	        x15 = j15,
	        u;
	
	    for (var i = 0; i < 20; i += 2) {
	      u = x0 + x12 | 0;
	      x4 ^= u << 7 | u >>> 32 - 7;
	      u = x4 + x0 | 0;
	      x8 ^= u << 9 | u >>> 32 - 9;
	      u = x8 + x4 | 0;
	      x12 ^= u << 13 | u >>> 32 - 13;
	      u = x12 + x8 | 0;
	      x0 ^= u << 18 | u >>> 32 - 18;
	
	      u = x5 + x1 | 0;
	      x9 ^= u << 7 | u >>> 32 - 7;
	      u = x9 + x5 | 0;
	      x13 ^= u << 9 | u >>> 32 - 9;
	      u = x13 + x9 | 0;
	      x1 ^= u << 13 | u >>> 32 - 13;
	      u = x1 + x13 | 0;
	      x5 ^= u << 18 | u >>> 32 - 18;
	
	      u = x10 + x6 | 0;
	      x14 ^= u << 7 | u >>> 32 - 7;
	      u = x14 + x10 | 0;
	      x2 ^= u << 9 | u >>> 32 - 9;
	      u = x2 + x14 | 0;
	      x6 ^= u << 13 | u >>> 32 - 13;
	      u = x6 + x2 | 0;
	      x10 ^= u << 18 | u >>> 32 - 18;
	
	      u = x15 + x11 | 0;
	      x3 ^= u << 7 | u >>> 32 - 7;
	      u = x3 + x15 | 0;
	      x7 ^= u << 9 | u >>> 32 - 9;
	      u = x7 + x3 | 0;
	      x11 ^= u << 13 | u >>> 32 - 13;
	      u = x11 + x7 | 0;
	      x15 ^= u << 18 | u >>> 32 - 18;
	
	      u = x0 + x3 | 0;
	      x1 ^= u << 7 | u >>> 32 - 7;
	      u = x1 + x0 | 0;
	      x2 ^= u << 9 | u >>> 32 - 9;
	      u = x2 + x1 | 0;
	      x3 ^= u << 13 | u >>> 32 - 13;
	      u = x3 + x2 | 0;
	      x0 ^= u << 18 | u >>> 32 - 18;
	
	      u = x5 + x4 | 0;
	      x6 ^= u << 7 | u >>> 32 - 7;
	      u = x6 + x5 | 0;
	      x7 ^= u << 9 | u >>> 32 - 9;
	      u = x7 + x6 | 0;
	      x4 ^= u << 13 | u >>> 32 - 13;
	      u = x4 + x7 | 0;
	      x5 ^= u << 18 | u >>> 32 - 18;
	
	      u = x10 + x9 | 0;
	      x11 ^= u << 7 | u >>> 32 - 7;
	      u = x11 + x10 | 0;
	      x8 ^= u << 9 | u >>> 32 - 9;
	      u = x8 + x11 | 0;
	      x9 ^= u << 13 | u >>> 32 - 13;
	      u = x9 + x8 | 0;
	      x10 ^= u << 18 | u >>> 32 - 18;
	
	      u = x15 + x14 | 0;
	      x12 ^= u << 7 | u >>> 32 - 7;
	      u = x12 + x15 | 0;
	      x13 ^= u << 9 | u >>> 32 - 9;
	      u = x13 + x12 | 0;
	      x14 ^= u << 13 | u >>> 32 - 13;
	      u = x14 + x13 | 0;
	      x15 ^= u << 18 | u >>> 32 - 18;
	    }
	    x0 = x0 + j0 | 0;
	    x1 = x1 + j1 | 0;
	    x2 = x2 + j2 | 0;
	    x3 = x3 + j3 | 0;
	    x4 = x4 + j4 | 0;
	    x5 = x5 + j5 | 0;
	    x6 = x6 + j6 | 0;
	    x7 = x7 + j7 | 0;
	    x8 = x8 + j8 | 0;
	    x9 = x9 + j9 | 0;
	    x10 = x10 + j10 | 0;
	    x11 = x11 + j11 | 0;
	    x12 = x12 + j12 | 0;
	    x13 = x13 + j13 | 0;
	    x14 = x14 + j14 | 0;
	    x15 = x15 + j15 | 0;
	
	    o[0] = x0 >>> 0 & 0xff;
	    o[1] = x0 >>> 8 & 0xff;
	    o[2] = x0 >>> 16 & 0xff;
	    o[3] = x0 >>> 24 & 0xff;
	
	    o[4] = x1 >>> 0 & 0xff;
	    o[5] = x1 >>> 8 & 0xff;
	    o[6] = x1 >>> 16 & 0xff;
	    o[7] = x1 >>> 24 & 0xff;
	
	    o[8] = x2 >>> 0 & 0xff;
	    o[9] = x2 >>> 8 & 0xff;
	    o[10] = x2 >>> 16 & 0xff;
	    o[11] = x2 >>> 24 & 0xff;
	
	    o[12] = x3 >>> 0 & 0xff;
	    o[13] = x3 >>> 8 & 0xff;
	    o[14] = x3 >>> 16 & 0xff;
	    o[15] = x3 >>> 24 & 0xff;
	
	    o[16] = x4 >>> 0 & 0xff;
	    o[17] = x4 >>> 8 & 0xff;
	    o[18] = x4 >>> 16 & 0xff;
	    o[19] = x4 >>> 24 & 0xff;
	
	    o[20] = x5 >>> 0 & 0xff;
	    o[21] = x5 >>> 8 & 0xff;
	    o[22] = x5 >>> 16 & 0xff;
	    o[23] = x5 >>> 24 & 0xff;
	
	    o[24] = x6 >>> 0 & 0xff;
	    o[25] = x6 >>> 8 & 0xff;
	    o[26] = x6 >>> 16 & 0xff;
	    o[27] = x6 >>> 24 & 0xff;
	
	    o[28] = x7 >>> 0 & 0xff;
	    o[29] = x7 >>> 8 & 0xff;
	    o[30] = x7 >>> 16 & 0xff;
	    o[31] = x7 >>> 24 & 0xff;
	
	    o[32] = x8 >>> 0 & 0xff;
	    o[33] = x8 >>> 8 & 0xff;
	    o[34] = x8 >>> 16 & 0xff;
	    o[35] = x8 >>> 24 & 0xff;
	
	    o[36] = x9 >>> 0 & 0xff;
	    o[37] = x9 >>> 8 & 0xff;
	    o[38] = x9 >>> 16 & 0xff;
	    o[39] = x9 >>> 24 & 0xff;
	
	    o[40] = x10 >>> 0 & 0xff;
	    o[41] = x10 >>> 8 & 0xff;
	    o[42] = x10 >>> 16 & 0xff;
	    o[43] = x10 >>> 24 & 0xff;
	
	    o[44] = x11 >>> 0 & 0xff;
	    o[45] = x11 >>> 8 & 0xff;
	    o[46] = x11 >>> 16 & 0xff;
	    o[47] = x11 >>> 24 & 0xff;
	
	    o[48] = x12 >>> 0 & 0xff;
	    o[49] = x12 >>> 8 & 0xff;
	    o[50] = x12 >>> 16 & 0xff;
	    o[51] = x12 >>> 24 & 0xff;
	
	    o[52] = x13 >>> 0 & 0xff;
	    o[53] = x13 >>> 8 & 0xff;
	    o[54] = x13 >>> 16 & 0xff;
	    o[55] = x13 >>> 24 & 0xff;
	
	    o[56] = x14 >>> 0 & 0xff;
	    o[57] = x14 >>> 8 & 0xff;
	    o[58] = x14 >>> 16 & 0xff;
	    o[59] = x14 >>> 24 & 0xff;
	
	    o[60] = x15 >>> 0 & 0xff;
	    o[61] = x15 >>> 8 & 0xff;
	    o[62] = x15 >>> 16 & 0xff;
	    o[63] = x15 >>> 24 & 0xff;
	  }
	
	  function core_hsalsa20(o, p, k, c) {
	    var j0 = c[0] & 0xff | (c[1] & 0xff) << 8 | (c[2] & 0xff) << 16 | (c[3] & 0xff) << 24,
	        j1 = k[0] & 0xff | (k[1] & 0xff) << 8 | (k[2] & 0xff) << 16 | (k[3] & 0xff) << 24,
	        j2 = k[4] & 0xff | (k[5] & 0xff) << 8 | (k[6] & 0xff) << 16 | (k[7] & 0xff) << 24,
	        j3 = k[8] & 0xff | (k[9] & 0xff) << 8 | (k[10] & 0xff) << 16 | (k[11] & 0xff) << 24,
	        j4 = k[12] & 0xff | (k[13] & 0xff) << 8 | (k[14] & 0xff) << 16 | (k[15] & 0xff) << 24,
	        j5 = c[4] & 0xff | (c[5] & 0xff) << 8 | (c[6] & 0xff) << 16 | (c[7] & 0xff) << 24,
	        j6 = p[0] & 0xff | (p[1] & 0xff) << 8 | (p[2] & 0xff) << 16 | (p[3] & 0xff) << 24,
	        j7 = p[4] & 0xff | (p[5] & 0xff) << 8 | (p[6] & 0xff) << 16 | (p[7] & 0xff) << 24,
	        j8 = p[8] & 0xff | (p[9] & 0xff) << 8 | (p[10] & 0xff) << 16 | (p[11] & 0xff) << 24,
	        j9 = p[12] & 0xff | (p[13] & 0xff) << 8 | (p[14] & 0xff) << 16 | (p[15] & 0xff) << 24,
	        j10 = c[8] & 0xff | (c[9] & 0xff) << 8 | (c[10] & 0xff) << 16 | (c[11] & 0xff) << 24,
	        j11 = k[16] & 0xff | (k[17] & 0xff) << 8 | (k[18] & 0xff) << 16 | (k[19] & 0xff) << 24,
	        j12 = k[20] & 0xff | (k[21] & 0xff) << 8 | (k[22] & 0xff) << 16 | (k[23] & 0xff) << 24,
	        j13 = k[24] & 0xff | (k[25] & 0xff) << 8 | (k[26] & 0xff) << 16 | (k[27] & 0xff) << 24,
	        j14 = k[28] & 0xff | (k[29] & 0xff) << 8 | (k[30] & 0xff) << 16 | (k[31] & 0xff) << 24,
	        j15 = c[12] & 0xff | (c[13] & 0xff) << 8 | (c[14] & 0xff) << 16 | (c[15] & 0xff) << 24;
	
	    var x0 = j0,
	        x1 = j1,
	        x2 = j2,
	        x3 = j3,
	        x4 = j4,
	        x5 = j5,
	        x6 = j6,
	        x7 = j7,
	        x8 = j8,
	        x9 = j9,
	        x10 = j10,
	        x11 = j11,
	        x12 = j12,
	        x13 = j13,
	        x14 = j14,
	        x15 = j15,
	        u;
	
	    for (var i = 0; i < 20; i += 2) {
	      u = x0 + x12 | 0;
	      x4 ^= u << 7 | u >>> 32 - 7;
	      u = x4 + x0 | 0;
	      x8 ^= u << 9 | u >>> 32 - 9;
	      u = x8 + x4 | 0;
	      x12 ^= u << 13 | u >>> 32 - 13;
	      u = x12 + x8 | 0;
	      x0 ^= u << 18 | u >>> 32 - 18;
	
	      u = x5 + x1 | 0;
	      x9 ^= u << 7 | u >>> 32 - 7;
	      u = x9 + x5 | 0;
	      x13 ^= u << 9 | u >>> 32 - 9;
	      u = x13 + x9 | 0;
	      x1 ^= u << 13 | u >>> 32 - 13;
	      u = x1 + x13 | 0;
	      x5 ^= u << 18 | u >>> 32 - 18;
	
	      u = x10 + x6 | 0;
	      x14 ^= u << 7 | u >>> 32 - 7;
	      u = x14 + x10 | 0;
	      x2 ^= u << 9 | u >>> 32 - 9;
	      u = x2 + x14 | 0;
	      x6 ^= u << 13 | u >>> 32 - 13;
	      u = x6 + x2 | 0;
	      x10 ^= u << 18 | u >>> 32 - 18;
	
	      u = x15 + x11 | 0;
	      x3 ^= u << 7 | u >>> 32 - 7;
	      u = x3 + x15 | 0;
	      x7 ^= u << 9 | u >>> 32 - 9;
	      u = x7 + x3 | 0;
	      x11 ^= u << 13 | u >>> 32 - 13;
	      u = x11 + x7 | 0;
	      x15 ^= u << 18 | u >>> 32 - 18;
	
	      u = x0 + x3 | 0;
	      x1 ^= u << 7 | u >>> 32 - 7;
	      u = x1 + x0 | 0;
	      x2 ^= u << 9 | u >>> 32 - 9;
	      u = x2 + x1 | 0;
	      x3 ^= u << 13 | u >>> 32 - 13;
	      u = x3 + x2 | 0;
	      x0 ^= u << 18 | u >>> 32 - 18;
	
	      u = x5 + x4 | 0;
	      x6 ^= u << 7 | u >>> 32 - 7;
	      u = x6 + x5 | 0;
	      x7 ^= u << 9 | u >>> 32 - 9;
	      u = x7 + x6 | 0;
	      x4 ^= u << 13 | u >>> 32 - 13;
	      u = x4 + x7 | 0;
	      x5 ^= u << 18 | u >>> 32 - 18;
	
	      u = x10 + x9 | 0;
	      x11 ^= u << 7 | u >>> 32 - 7;
	      u = x11 + x10 | 0;
	      x8 ^= u << 9 | u >>> 32 - 9;
	      u = x8 + x11 | 0;
	      x9 ^= u << 13 | u >>> 32 - 13;
	      u = x9 + x8 | 0;
	      x10 ^= u << 18 | u >>> 32 - 18;
	
	      u = x15 + x14 | 0;
	      x12 ^= u << 7 | u >>> 32 - 7;
	      u = x12 + x15 | 0;
	      x13 ^= u << 9 | u >>> 32 - 9;
	      u = x13 + x12 | 0;
	      x14 ^= u << 13 | u >>> 32 - 13;
	      u = x14 + x13 | 0;
	      x15 ^= u << 18 | u >>> 32 - 18;
	    }
	
	    o[0] = x0 >>> 0 & 0xff;
	    o[1] = x0 >>> 8 & 0xff;
	    o[2] = x0 >>> 16 & 0xff;
	    o[3] = x0 >>> 24 & 0xff;
	
	    o[4] = x5 >>> 0 & 0xff;
	    o[5] = x5 >>> 8 & 0xff;
	    o[6] = x5 >>> 16 & 0xff;
	    o[7] = x5 >>> 24 & 0xff;
	
	    o[8] = x10 >>> 0 & 0xff;
	    o[9] = x10 >>> 8 & 0xff;
	    o[10] = x10 >>> 16 & 0xff;
	    o[11] = x10 >>> 24 & 0xff;
	
	    o[12] = x15 >>> 0 & 0xff;
	    o[13] = x15 >>> 8 & 0xff;
	    o[14] = x15 >>> 16 & 0xff;
	    o[15] = x15 >>> 24 & 0xff;
	
	    o[16] = x6 >>> 0 & 0xff;
	    o[17] = x6 >>> 8 & 0xff;
	    o[18] = x6 >>> 16 & 0xff;
	    o[19] = x6 >>> 24 & 0xff;
	
	    o[20] = x7 >>> 0 & 0xff;
	    o[21] = x7 >>> 8 & 0xff;
	    o[22] = x7 >>> 16 & 0xff;
	    o[23] = x7 >>> 24 & 0xff;
	
	    o[24] = x8 >>> 0 & 0xff;
	    o[25] = x8 >>> 8 & 0xff;
	    o[26] = x8 >>> 16 & 0xff;
	    o[27] = x8 >>> 24 & 0xff;
	
	    o[28] = x9 >>> 0 & 0xff;
	    o[29] = x9 >>> 8 & 0xff;
	    o[30] = x9 >>> 16 & 0xff;
	    o[31] = x9 >>> 24 & 0xff;
	  }
	
	  function crypto_core_salsa20(out, inp, k, c) {
	    core_salsa20(out, inp, k, c);
	  }
	
	  function crypto_core_hsalsa20(out, inp, k, c) {
	    core_hsalsa20(out, inp, k, c);
	  }
	
	  var sigma = new Uint8Array([101, 120, 112, 97, 110, 100, 32, 51, 50, 45, 98, 121, 116, 101, 32, 107]);
	  // "expand 32-byte k"
	
	  function crypto_stream_salsa20_xor(c, cpos, m, mpos, b, n, k) {
	    var z = new Uint8Array(16),
	        x = new Uint8Array(64);
	    var u, i;
	    for (i = 0; i < 16; i++) {
	      z[i] = 0;
	    }for (i = 0; i < 8; i++) {
	      z[i] = n[i];
	    }while (b >= 64) {
	      crypto_core_salsa20(x, z, k, sigma);
	      for (i = 0; i < 64; i++) {
	        c[cpos + i] = m[mpos + i] ^ x[i];
	      }u = 1;
	      for (i = 8; i < 16; i++) {
	        u = u + (z[i] & 0xff) | 0;
	        z[i] = u & 0xff;
	        u >>>= 8;
	      }
	      b -= 64;
	      cpos += 64;
	      mpos += 64;
	    }
	    if (b > 0) {
	      crypto_core_salsa20(x, z, k, sigma);
	      for (i = 0; i < b; i++) {
	        c[cpos + i] = m[mpos + i] ^ x[i];
	      }
	    }
	    return 0;
	  }
	
	  function crypto_stream_salsa20(c, cpos, b, n, k) {
	    var z = new Uint8Array(16),
	        x = new Uint8Array(64);
	    var u, i;
	    for (i = 0; i < 16; i++) {
	      z[i] = 0;
	    }for (i = 0; i < 8; i++) {
	      z[i] = n[i];
	    }while (b >= 64) {
	      crypto_core_salsa20(x, z, k, sigma);
	      for (i = 0; i < 64; i++) {
	        c[cpos + i] = x[i];
	      }u = 1;
	      for (i = 8; i < 16; i++) {
	        u = u + (z[i] & 0xff) | 0;
	        z[i] = u & 0xff;
	        u >>>= 8;
	      }
	      b -= 64;
	      cpos += 64;
	    }
	    if (b > 0) {
	      crypto_core_salsa20(x, z, k, sigma);
	      for (i = 0; i < b; i++) {
	        c[cpos + i] = x[i];
	      }
	    }
	    return 0;
	  }
	
	  function crypto_stream(c, cpos, d, n, k) {
	    var s = new Uint8Array(32);
	    crypto_core_hsalsa20(s, n, k, sigma);
	    var sn = new Uint8Array(8);
	    for (var i = 0; i < 8; i++) {
	      sn[i] = n[i + 16];
	    }return crypto_stream_salsa20(c, cpos, d, sn, s);
	  }
	
	  function crypto_stream_xor(c, cpos, m, mpos, d, n, k) {
	    var s = new Uint8Array(32);
	    crypto_core_hsalsa20(s, n, k, sigma);
	    var sn = new Uint8Array(8);
	    for (var i = 0; i < 8; i++) {
	      sn[i] = n[i + 16];
	    }return crypto_stream_salsa20_xor(c, cpos, m, mpos, d, sn, s);
	  }
	
	  /*
	  * Port of Andrew Moon's Poly1305-donna-16. Public domain.
	  * https://github.com/floodyberry/poly1305-donna
	  */
	
	  var poly1305 = function poly1305(key) {
	    this.buffer = new Uint8Array(16);
	    this.r = new Uint16Array(10);
	    this.h = new Uint16Array(10);
	    this.pad = new Uint16Array(8);
	    this.leftover = 0;
	    this.fin = 0;
	
	    var t0, t1, t2, t3, t4, t5, t6, t7;
	
	    t0 = key[0] & 0xff | (key[1] & 0xff) << 8;this.r[0] = t0 & 0x1fff;
	    t1 = key[2] & 0xff | (key[3] & 0xff) << 8;this.r[1] = (t0 >>> 13 | t1 << 3) & 0x1fff;
	    t2 = key[4] & 0xff | (key[5] & 0xff) << 8;this.r[2] = (t1 >>> 10 | t2 << 6) & 0x1f03;
	    t3 = key[6] & 0xff | (key[7] & 0xff) << 8;this.r[3] = (t2 >>> 7 | t3 << 9) & 0x1fff;
	    t4 = key[8] & 0xff | (key[9] & 0xff) << 8;this.r[4] = (t3 >>> 4 | t4 << 12) & 0x00ff;
	    this.r[5] = t4 >>> 1 & 0x1ffe;
	    t5 = key[10] & 0xff | (key[11] & 0xff) << 8;this.r[6] = (t4 >>> 14 | t5 << 2) & 0x1fff;
	    t6 = key[12] & 0xff | (key[13] & 0xff) << 8;this.r[7] = (t5 >>> 11 | t6 << 5) & 0x1f81;
	    t7 = key[14] & 0xff | (key[15] & 0xff) << 8;this.r[8] = (t6 >>> 8 | t7 << 8) & 0x1fff;
	    this.r[9] = t7 >>> 5 & 0x007f;
	
	    this.pad[0] = key[16] & 0xff | (key[17] & 0xff) << 8;
	    this.pad[1] = key[18] & 0xff | (key[19] & 0xff) << 8;
	    this.pad[2] = key[20] & 0xff | (key[21] & 0xff) << 8;
	    this.pad[3] = key[22] & 0xff | (key[23] & 0xff) << 8;
	    this.pad[4] = key[24] & 0xff | (key[25] & 0xff) << 8;
	    this.pad[5] = key[26] & 0xff | (key[27] & 0xff) << 8;
	    this.pad[6] = key[28] & 0xff | (key[29] & 0xff) << 8;
	    this.pad[7] = key[30] & 0xff | (key[31] & 0xff) << 8;
	  };
	
	  poly1305.prototype.blocks = function (m, mpos, bytes) {
	    var hibit = this.fin ? 0 : 1 << 11;
	    var t0, t1, t2, t3, t4, t5, t6, t7, c;
	    var d0, d1, d2, d3, d4, d5, d6, d7, d8, d9;
	
	    var h0 = this.h[0],
	        h1 = this.h[1],
	        h2 = this.h[2],
	        h3 = this.h[3],
	        h4 = this.h[4],
	        h5 = this.h[5],
	        h6 = this.h[6],
	        h7 = this.h[7],
	        h8 = this.h[8],
	        h9 = this.h[9];
	
	    var r0 = this.r[0],
	        r1 = this.r[1],
	        r2 = this.r[2],
	        r3 = this.r[3],
	        r4 = this.r[4],
	        r5 = this.r[5],
	        r6 = this.r[6],
	        r7 = this.r[7],
	        r8 = this.r[8],
	        r9 = this.r[9];
	
	    while (bytes >= 16) {
	      t0 = m[mpos + 0] & 0xff | (m[mpos + 1] & 0xff) << 8;h0 += t0 & 0x1fff;
	      t1 = m[mpos + 2] & 0xff | (m[mpos + 3] & 0xff) << 8;h1 += (t0 >>> 13 | t1 << 3) & 0x1fff;
	      t2 = m[mpos + 4] & 0xff | (m[mpos + 5] & 0xff) << 8;h2 += (t1 >>> 10 | t2 << 6) & 0x1fff;
	      t3 = m[mpos + 6] & 0xff | (m[mpos + 7] & 0xff) << 8;h3 += (t2 >>> 7 | t3 << 9) & 0x1fff;
	      t4 = m[mpos + 8] & 0xff | (m[mpos + 9] & 0xff) << 8;h4 += (t3 >>> 4 | t4 << 12) & 0x1fff;
	      h5 += t4 >>> 1 & 0x1fff;
	      t5 = m[mpos + 10] & 0xff | (m[mpos + 11] & 0xff) << 8;h6 += (t4 >>> 14 | t5 << 2) & 0x1fff;
	      t6 = m[mpos + 12] & 0xff | (m[mpos + 13] & 0xff) << 8;h7 += (t5 >>> 11 | t6 << 5) & 0x1fff;
	      t7 = m[mpos + 14] & 0xff | (m[mpos + 15] & 0xff) << 8;h8 += (t6 >>> 8 | t7 << 8) & 0x1fff;
	      h9 += t7 >>> 5 | hibit;
	
	      c = 0;
	
	      d0 = c;
	      d0 += h0 * r0;
	      d0 += h1 * (5 * r9);
	      d0 += h2 * (5 * r8);
	      d0 += h3 * (5 * r7);
	      d0 += h4 * (5 * r6);
	      c = d0 >>> 13;d0 &= 0x1fff;
	      d0 += h5 * (5 * r5);
	      d0 += h6 * (5 * r4);
	      d0 += h7 * (5 * r3);
	      d0 += h8 * (5 * r2);
	      d0 += h9 * (5 * r1);
	      c += d0 >>> 13;d0 &= 0x1fff;
	
	      d1 = c;
	      d1 += h0 * r1;
	      d1 += h1 * r0;
	      d1 += h2 * (5 * r9);
	      d1 += h3 * (5 * r8);
	      d1 += h4 * (5 * r7);
	      c = d1 >>> 13;d1 &= 0x1fff;
	      d1 += h5 * (5 * r6);
	      d1 += h6 * (5 * r5);
	      d1 += h7 * (5 * r4);
	      d1 += h8 * (5 * r3);
	      d1 += h9 * (5 * r2);
	      c += d1 >>> 13;d1 &= 0x1fff;
	
	      d2 = c;
	      d2 += h0 * r2;
	      d2 += h1 * r1;
	      d2 += h2 * r0;
	      d2 += h3 * (5 * r9);
	      d2 += h4 * (5 * r8);
	      c = d2 >>> 13;d2 &= 0x1fff;
	      d2 += h5 * (5 * r7);
	      d2 += h6 * (5 * r6);
	      d2 += h7 * (5 * r5);
	      d2 += h8 * (5 * r4);
	      d2 += h9 * (5 * r3);
	      c += d2 >>> 13;d2 &= 0x1fff;
	
	      d3 = c;
	      d3 += h0 * r3;
	      d3 += h1 * r2;
	      d3 += h2 * r1;
	      d3 += h3 * r0;
	      d3 += h4 * (5 * r9);
	      c = d3 >>> 13;d3 &= 0x1fff;
	      d3 += h5 * (5 * r8);
	      d3 += h6 * (5 * r7);
	      d3 += h7 * (5 * r6);
	      d3 += h8 * (5 * r5);
	      d3 += h9 * (5 * r4);
	      c += d3 >>> 13;d3 &= 0x1fff;
	
	      d4 = c;
	      d4 += h0 * r4;
	      d4 += h1 * r3;
	      d4 += h2 * r2;
	      d4 += h3 * r1;
	      d4 += h4 * r0;
	      c = d4 >>> 13;d4 &= 0x1fff;
	      d4 += h5 * (5 * r9);
	      d4 += h6 * (5 * r8);
	      d4 += h7 * (5 * r7);
	      d4 += h8 * (5 * r6);
	      d4 += h9 * (5 * r5);
	      c += d4 >>> 13;d4 &= 0x1fff;
	
	      d5 = c;
	      d5 += h0 * r5;
	      d5 += h1 * r4;
	      d5 += h2 * r3;
	      d5 += h3 * r2;
	      d5 += h4 * r1;
	      c = d5 >>> 13;d5 &= 0x1fff;
	      d5 += h5 * r0;
	      d5 += h6 * (5 * r9);
	      d5 += h7 * (5 * r8);
	      d5 += h8 * (5 * r7);
	      d5 += h9 * (5 * r6);
	      c += d5 >>> 13;d5 &= 0x1fff;
	
	      d6 = c;
	      d6 += h0 * r6;
	      d6 += h1 * r5;
	      d6 += h2 * r4;
	      d6 += h3 * r3;
	      d6 += h4 * r2;
	      c = d6 >>> 13;d6 &= 0x1fff;
	      d6 += h5 * r1;
	      d6 += h6 * r0;
	      d6 += h7 * (5 * r9);
	      d6 += h8 * (5 * r8);
	      d6 += h9 * (5 * r7);
	      c += d6 >>> 13;d6 &= 0x1fff;
	
	      d7 = c;
	      d7 += h0 * r7;
	      d7 += h1 * r6;
	      d7 += h2 * r5;
	      d7 += h3 * r4;
	      d7 += h4 * r3;
	      c = d7 >>> 13;d7 &= 0x1fff;
	      d7 += h5 * r2;
	      d7 += h6 * r1;
	      d7 += h7 * r0;
	      d7 += h8 * (5 * r9);
	      d7 += h9 * (5 * r8);
	      c += d7 >>> 13;d7 &= 0x1fff;
	
	      d8 = c;
	      d8 += h0 * r8;
	      d8 += h1 * r7;
	      d8 += h2 * r6;
	      d8 += h3 * r5;
	      d8 += h4 * r4;
	      c = d8 >>> 13;d8 &= 0x1fff;
	      d8 += h5 * r3;
	      d8 += h6 * r2;
	      d8 += h7 * r1;
	      d8 += h8 * r0;
	      d8 += h9 * (5 * r9);
	      c += d8 >>> 13;d8 &= 0x1fff;
	
	      d9 = c;
	      d9 += h0 * r9;
	      d9 += h1 * r8;
	      d9 += h2 * r7;
	      d9 += h3 * r6;
	      d9 += h4 * r5;
	      c = d9 >>> 13;d9 &= 0x1fff;
	      d9 += h5 * r4;
	      d9 += h6 * r3;
	      d9 += h7 * r2;
	      d9 += h8 * r1;
	      d9 += h9 * r0;
	      c += d9 >>> 13;d9 &= 0x1fff;
	
	      c = (c << 2) + c | 0;
	      c = c + d0 | 0;
	      d0 = c & 0x1fff;
	      c = c >>> 13;
	      d1 += c;
	
	      h0 = d0;
	      h1 = d1;
	      h2 = d2;
	      h3 = d3;
	      h4 = d4;
	      h5 = d5;
	      h6 = d6;
	      h7 = d7;
	      h8 = d8;
	      h9 = d9;
	
	      mpos += 16;
	      bytes -= 16;
	    }
	    this.h[0] = h0;
	    this.h[1] = h1;
	    this.h[2] = h2;
	    this.h[3] = h3;
	    this.h[4] = h4;
	    this.h[5] = h5;
	    this.h[6] = h6;
	    this.h[7] = h7;
	    this.h[8] = h8;
	    this.h[9] = h9;
	  };
	
	  poly1305.prototype.finish = function (mac, macpos) {
	    var g = new Uint16Array(10);
	    var c, mask, f, i;
	
	    if (this.leftover) {
	      i = this.leftover;
	      this.buffer[i++] = 1;
	      for (; i < 16; i++) {
	        this.buffer[i] = 0;
	      }this.fin = 1;
	      this.blocks(this.buffer, 0, 16);
	    }
	
	    c = this.h[1] >>> 13;
	    this.h[1] &= 0x1fff;
	    for (i = 2; i < 10; i++) {
	      this.h[i] += c;
	      c = this.h[i] >>> 13;
	      this.h[i] &= 0x1fff;
	    }
	    this.h[0] += c * 5;
	    c = this.h[0] >>> 13;
	    this.h[0] &= 0x1fff;
	    this.h[1] += c;
	    c = this.h[1] >>> 13;
	    this.h[1] &= 0x1fff;
	    this.h[2] += c;
	
	    g[0] = this.h[0] + 5;
	    c = g[0] >>> 13;
	    g[0] &= 0x1fff;
	    for (i = 1; i < 10; i++) {
	      g[i] = this.h[i] + c;
	      c = g[i] >>> 13;
	      g[i] &= 0x1fff;
	    }
	    g[9] -= 1 << 13;
	
	    mask = (c ^ 1) - 1;
	    for (i = 0; i < 10; i++) {
	      g[i] &= mask;
	    }mask = ~mask;
	    for (i = 0; i < 10; i++) {
	      this.h[i] = this.h[i] & mask | g[i];
	    }this.h[0] = (this.h[0] | this.h[1] << 13) & 0xffff;
	    this.h[1] = (this.h[1] >>> 3 | this.h[2] << 10) & 0xffff;
	    this.h[2] = (this.h[2] >>> 6 | this.h[3] << 7) & 0xffff;
	    this.h[3] = (this.h[3] >>> 9 | this.h[4] << 4) & 0xffff;
	    this.h[4] = (this.h[4] >>> 12 | this.h[5] << 1 | this.h[6] << 14) & 0xffff;
	    this.h[5] = (this.h[6] >>> 2 | this.h[7] << 11) & 0xffff;
	    this.h[6] = (this.h[7] >>> 5 | this.h[8] << 8) & 0xffff;
	    this.h[7] = (this.h[8] >>> 8 | this.h[9] << 5) & 0xffff;
	
	    f = this.h[0] + this.pad[0];
	    this.h[0] = f & 0xffff;
	    for (i = 1; i < 8; i++) {
	      f = (this.h[i] + this.pad[i] | 0) + (f >>> 16) | 0;
	      this.h[i] = f & 0xffff;
	    }
	
	    mac[macpos + 0] = this.h[0] >>> 0 & 0xff;
	    mac[macpos + 1] = this.h[0] >>> 8 & 0xff;
	    mac[macpos + 2] = this.h[1] >>> 0 & 0xff;
	    mac[macpos + 3] = this.h[1] >>> 8 & 0xff;
	    mac[macpos + 4] = this.h[2] >>> 0 & 0xff;
	    mac[macpos + 5] = this.h[2] >>> 8 & 0xff;
	    mac[macpos + 6] = this.h[3] >>> 0 & 0xff;
	    mac[macpos + 7] = this.h[3] >>> 8 & 0xff;
	    mac[macpos + 8] = this.h[4] >>> 0 & 0xff;
	    mac[macpos + 9] = this.h[4] >>> 8 & 0xff;
	    mac[macpos + 10] = this.h[5] >>> 0 & 0xff;
	    mac[macpos + 11] = this.h[5] >>> 8 & 0xff;
	    mac[macpos + 12] = this.h[6] >>> 0 & 0xff;
	    mac[macpos + 13] = this.h[6] >>> 8 & 0xff;
	    mac[macpos + 14] = this.h[7] >>> 0 & 0xff;
	    mac[macpos + 15] = this.h[7] >>> 8 & 0xff;
	  };
	
	  poly1305.prototype.update = function (m, mpos, bytes) {
	    var i, want;
	
	    if (this.leftover) {
	      want = 16 - this.leftover;
	      if (want > bytes) want = bytes;
	      for (i = 0; i < want; i++) {
	        this.buffer[this.leftover + i] = m[mpos + i];
	      }bytes -= want;
	      mpos += want;
	      this.leftover += want;
	      if (this.leftover < 16) return;
	      this.blocks(this.buffer, 0, 16);
	      this.leftover = 0;
	    }
	
	    if (bytes >= 16) {
	      want = bytes - bytes % 16;
	      this.blocks(m, mpos, want);
	      mpos += want;
	      bytes -= want;
	    }
	
	    if (bytes) {
	      for (i = 0; i < bytes; i++) {
	        this.buffer[this.leftover + i] = m[mpos + i];
	      }this.leftover += bytes;
	    }
	  };
	
	  function crypto_onetimeauth(out, outpos, m, mpos, n, k) {
	    var s = new poly1305(k);
	    s.update(m, mpos, n);
	    s.finish(out, outpos);
	    return 0;
	  }
	
	  function crypto_onetimeauth_verify(h, hpos, m, mpos, n, k) {
	    var x = new Uint8Array(16);
	    crypto_onetimeauth(x, 0, m, mpos, n, k);
	    return crypto_verify_16(h, hpos, x, 0);
	  }
	
	  function crypto_secretbox(c, m, d, n, k) {
	    var i;
	    if (d < 32) return -1;
	    crypto_stream_xor(c, 0, m, 0, d, n, k);
	    crypto_onetimeauth(c, 16, c, 32, d - 32, c);
	    for (i = 0; i < 16; i++) {
	      c[i] = 0;
	    }return 0;
	  }
	
	  function crypto_secretbox_open(m, c, d, n, k) {
	    var i;
	    var x = new Uint8Array(32);
	    if (d < 32) return -1;
	    crypto_stream(x, 0, 32, n, k);
	    if (crypto_onetimeauth_verify(c, 16, c, 32, d - 32, x) !== 0) return -1;
	    crypto_stream_xor(m, 0, c, 0, d, n, k);
	    for (i = 0; i < 32; i++) {
	      m[i] = 0;
	    }return 0;
	  }
	
	  function set25519(r, a) {
	    var i;
	    for (i = 0; i < 16; i++) {
	      r[i] = a[i] | 0;
	    }
	  }
	
	  function car25519(o) {
	    var i,
	        v,
	        c = 1;
	    for (i = 0; i < 16; i++) {
	      v = o[i] + c + 65535;
	      c = Math.floor(v / 65536);
	      o[i] = v - c * 65536;
	    }
	    o[0] += c - 1 + 37 * (c - 1);
	  }
	
	  function sel25519(p, q, b) {
	    var t,
	        c = ~(b - 1);
	    for (var i = 0; i < 16; i++) {
	      t = c & (p[i] ^ q[i]);
	      p[i] ^= t;
	      q[i] ^= t;
	    }
	  }
	
	  function pack25519(o, n) {
	    var i, j, b;
	    var m = gf(),
	        t = gf();
	    for (i = 0; i < 16; i++) {
	      t[i] = n[i];
	    }car25519(t);
	    car25519(t);
	    car25519(t);
	    for (j = 0; j < 2; j++) {
	      m[0] = t[0] - 0xffed;
	      for (i = 1; i < 15; i++) {
	        m[i] = t[i] - 0xffff - (m[i - 1] >> 16 & 1);
	        m[i - 1] &= 0xffff;
	      }
	      m[15] = t[15] - 0x7fff - (m[14] >> 16 & 1);
	      b = m[15] >> 16 & 1;
	      m[14] &= 0xffff;
	      sel25519(t, m, 1 - b);
	    }
	    for (i = 0; i < 16; i++) {
	      o[2 * i] = t[i] & 0xff;
	      o[2 * i + 1] = t[i] >> 8;
	    }
	  }
	
	  function neq25519(a, b) {
	    var c = new Uint8Array(32),
	        d = new Uint8Array(32);
	    pack25519(c, a);
	    pack25519(d, b);
	    return crypto_verify_32(c, 0, d, 0);
	  }
	
	  function par25519(a) {
	    var d = new Uint8Array(32);
	    pack25519(d, a);
	    return d[0] & 1;
	  }
	
	  function unpack25519(o, n) {
	    var i;
	    for (i = 0; i < 16; i++) {
	      o[i] = n[2 * i] + (n[2 * i + 1] << 8);
	    }o[15] &= 0x7fff;
	  }
	
	  function A(o, a, b) {
	    for (var i = 0; i < 16; i++) {
	      o[i] = a[i] + b[i];
	    }
	  }
	
	  function Z(o, a, b) {
	    for (var i = 0; i < 16; i++) {
	      o[i] = a[i] - b[i];
	    }
	  }
	
	  function M(o, a, b) {
	    var v,
	        c,
	        t0 = 0,
	        t1 = 0,
	        t2 = 0,
	        t3 = 0,
	        t4 = 0,
	        t5 = 0,
	        t6 = 0,
	        t7 = 0,
	        t8 = 0,
	        t9 = 0,
	        t10 = 0,
	        t11 = 0,
	        t12 = 0,
	        t13 = 0,
	        t14 = 0,
	        t15 = 0,
	        t16 = 0,
	        t17 = 0,
	        t18 = 0,
	        t19 = 0,
	        t20 = 0,
	        t21 = 0,
	        t22 = 0,
	        t23 = 0,
	        t24 = 0,
	        t25 = 0,
	        t26 = 0,
	        t27 = 0,
	        t28 = 0,
	        t29 = 0,
	        t30 = 0,
	        b0 = b[0],
	        b1 = b[1],
	        b2 = b[2],
	        b3 = b[3],
	        b4 = b[4],
	        b5 = b[5],
	        b6 = b[6],
	        b7 = b[7],
	        b8 = b[8],
	        b9 = b[9],
	        b10 = b[10],
	        b11 = b[11],
	        b12 = b[12],
	        b13 = b[13],
	        b14 = b[14],
	        b15 = b[15];
	
	    v = a[0];
	    t0 += v * b0;
	    t1 += v * b1;
	    t2 += v * b2;
	    t3 += v * b3;
	    t4 += v * b4;
	    t5 += v * b5;
	    t6 += v * b6;
	    t7 += v * b7;
	    t8 += v * b8;
	    t9 += v * b9;
	    t10 += v * b10;
	    t11 += v * b11;
	    t12 += v * b12;
	    t13 += v * b13;
	    t14 += v * b14;
	    t15 += v * b15;
	    v = a[1];
	    t1 += v * b0;
	    t2 += v * b1;
	    t3 += v * b2;
	    t4 += v * b3;
	    t5 += v * b4;
	    t6 += v * b5;
	    t7 += v * b6;
	    t8 += v * b7;
	    t9 += v * b8;
	    t10 += v * b9;
	    t11 += v * b10;
	    t12 += v * b11;
	    t13 += v * b12;
	    t14 += v * b13;
	    t15 += v * b14;
	    t16 += v * b15;
	    v = a[2];
	    t2 += v * b0;
	    t3 += v * b1;
	    t4 += v * b2;
	    t5 += v * b3;
	    t6 += v * b4;
	    t7 += v * b5;
	    t8 += v * b6;
	    t9 += v * b7;
	    t10 += v * b8;
	    t11 += v * b9;
	    t12 += v * b10;
	    t13 += v * b11;
	    t14 += v * b12;
	    t15 += v * b13;
	    t16 += v * b14;
	    t17 += v * b15;
	    v = a[3];
	    t3 += v * b0;
	    t4 += v * b1;
	    t5 += v * b2;
	    t6 += v * b3;
	    t7 += v * b4;
	    t8 += v * b5;
	    t9 += v * b6;
	    t10 += v * b7;
	    t11 += v * b8;
	    t12 += v * b9;
	    t13 += v * b10;
	    t14 += v * b11;
	    t15 += v * b12;
	    t16 += v * b13;
	    t17 += v * b14;
	    t18 += v * b15;
	    v = a[4];
	    t4 += v * b0;
	    t5 += v * b1;
	    t6 += v * b2;
	    t7 += v * b3;
	    t8 += v * b4;
	    t9 += v * b5;
	    t10 += v * b6;
	    t11 += v * b7;
	    t12 += v * b8;
	    t13 += v * b9;
	    t14 += v * b10;
	    t15 += v * b11;
	    t16 += v * b12;
	    t17 += v * b13;
	    t18 += v * b14;
	    t19 += v * b15;
	    v = a[5];
	    t5 += v * b0;
	    t6 += v * b1;
	    t7 += v * b2;
	    t8 += v * b3;
	    t9 += v * b4;
	    t10 += v * b5;
	    t11 += v * b6;
	    t12 += v * b7;
	    t13 += v * b8;
	    t14 += v * b9;
	    t15 += v * b10;
	    t16 += v * b11;
	    t17 += v * b12;
	    t18 += v * b13;
	    t19 += v * b14;
	    t20 += v * b15;
	    v = a[6];
	    t6 += v * b0;
	    t7 += v * b1;
	    t8 += v * b2;
	    t9 += v * b3;
	    t10 += v * b4;
	    t11 += v * b5;
	    t12 += v * b6;
	    t13 += v * b7;
	    t14 += v * b8;
	    t15 += v * b9;
	    t16 += v * b10;
	    t17 += v * b11;
	    t18 += v * b12;
	    t19 += v * b13;
	    t20 += v * b14;
	    t21 += v * b15;
	    v = a[7];
	    t7 += v * b0;
	    t8 += v * b1;
	    t9 += v * b2;
	    t10 += v * b3;
	    t11 += v * b4;
	    t12 += v * b5;
	    t13 += v * b6;
	    t14 += v * b7;
	    t15 += v * b8;
	    t16 += v * b9;
	    t17 += v * b10;
	    t18 += v * b11;
	    t19 += v * b12;
	    t20 += v * b13;
	    t21 += v * b14;
	    t22 += v * b15;
	    v = a[8];
	    t8 += v * b0;
	    t9 += v * b1;
	    t10 += v * b2;
	    t11 += v * b3;
	    t12 += v * b4;
	    t13 += v * b5;
	    t14 += v * b6;
	    t15 += v * b7;
	    t16 += v * b8;
	    t17 += v * b9;
	    t18 += v * b10;
	    t19 += v * b11;
	    t20 += v * b12;
	    t21 += v * b13;
	    t22 += v * b14;
	    t23 += v * b15;
	    v = a[9];
	    t9 += v * b0;
	    t10 += v * b1;
	    t11 += v * b2;
	    t12 += v * b3;
	    t13 += v * b4;
	    t14 += v * b5;
	    t15 += v * b6;
	    t16 += v * b7;
	    t17 += v * b8;
	    t18 += v * b9;
	    t19 += v * b10;
	    t20 += v * b11;
	    t21 += v * b12;
	    t22 += v * b13;
	    t23 += v * b14;
	    t24 += v * b15;
	    v = a[10];
	    t10 += v * b0;
	    t11 += v * b1;
	    t12 += v * b2;
	    t13 += v * b3;
	    t14 += v * b4;
	    t15 += v * b5;
	    t16 += v * b6;
	    t17 += v * b7;
	    t18 += v * b8;
	    t19 += v * b9;
	    t20 += v * b10;
	    t21 += v * b11;
	    t22 += v * b12;
	    t23 += v * b13;
	    t24 += v * b14;
	    t25 += v * b15;
	    v = a[11];
	    t11 += v * b0;
	    t12 += v * b1;
	    t13 += v * b2;
	    t14 += v * b3;
	    t15 += v * b4;
	    t16 += v * b5;
	    t17 += v * b6;
	    t18 += v * b7;
	    t19 += v * b8;
	    t20 += v * b9;
	    t21 += v * b10;
	    t22 += v * b11;
	    t23 += v * b12;
	    t24 += v * b13;
	    t25 += v * b14;
	    t26 += v * b15;
	    v = a[12];
	    t12 += v * b0;
	    t13 += v * b1;
	    t14 += v * b2;
	    t15 += v * b3;
	    t16 += v * b4;
	    t17 += v * b5;
	    t18 += v * b6;
	    t19 += v * b7;
	    t20 += v * b8;
	    t21 += v * b9;
	    t22 += v * b10;
	    t23 += v * b11;
	    t24 += v * b12;
	    t25 += v * b13;
	    t26 += v * b14;
	    t27 += v * b15;
	    v = a[13];
	    t13 += v * b0;
	    t14 += v * b1;
	    t15 += v * b2;
	    t16 += v * b3;
	    t17 += v * b4;
	    t18 += v * b5;
	    t19 += v * b6;
	    t20 += v * b7;
	    t21 += v * b8;
	    t22 += v * b9;
	    t23 += v * b10;
	    t24 += v * b11;
	    t25 += v * b12;
	    t26 += v * b13;
	    t27 += v * b14;
	    t28 += v * b15;
	    v = a[14];
	    t14 += v * b0;
	    t15 += v * b1;
	    t16 += v * b2;
	    t17 += v * b3;
	    t18 += v * b4;
	    t19 += v * b5;
	    t20 += v * b6;
	    t21 += v * b7;
	    t22 += v * b8;
	    t23 += v * b9;
	    t24 += v * b10;
	    t25 += v * b11;
	    t26 += v * b12;
	    t27 += v * b13;
	    t28 += v * b14;
	    t29 += v * b15;
	    v = a[15];
	    t15 += v * b0;
	    t16 += v * b1;
	    t17 += v * b2;
	    t18 += v * b3;
	    t19 += v * b4;
	    t20 += v * b5;
	    t21 += v * b6;
	    t22 += v * b7;
	    t23 += v * b8;
	    t24 += v * b9;
	    t25 += v * b10;
	    t26 += v * b11;
	    t27 += v * b12;
	    t28 += v * b13;
	    t29 += v * b14;
	    t30 += v * b15;
	
	    t0 += 38 * t16;
	    t1 += 38 * t17;
	    t2 += 38 * t18;
	    t3 += 38 * t19;
	    t4 += 38 * t20;
	    t5 += 38 * t21;
	    t6 += 38 * t22;
	    t7 += 38 * t23;
	    t8 += 38 * t24;
	    t9 += 38 * t25;
	    t10 += 38 * t26;
	    t11 += 38 * t27;
	    t12 += 38 * t28;
	    t13 += 38 * t29;
	    t14 += 38 * t30;
	    // t15 left as is
	
	    // first car
	    c = 1;
	    v = t0 + c + 65535;c = Math.floor(v / 65536);t0 = v - c * 65536;
	    v = t1 + c + 65535;c = Math.floor(v / 65536);t1 = v - c * 65536;
	    v = t2 + c + 65535;c = Math.floor(v / 65536);t2 = v - c * 65536;
	    v = t3 + c + 65535;c = Math.floor(v / 65536);t3 = v - c * 65536;
	    v = t4 + c + 65535;c = Math.floor(v / 65536);t4 = v - c * 65536;
	    v = t5 + c + 65535;c = Math.floor(v / 65536);t5 = v - c * 65536;
	    v = t6 + c + 65535;c = Math.floor(v / 65536);t6 = v - c * 65536;
	    v = t7 + c + 65535;c = Math.floor(v / 65536);t7 = v - c * 65536;
	    v = t8 + c + 65535;c = Math.floor(v / 65536);t8 = v - c * 65536;
	    v = t9 + c + 65535;c = Math.floor(v / 65536);t9 = v - c * 65536;
	    v = t10 + c + 65535;c = Math.floor(v / 65536);t10 = v - c * 65536;
	    v = t11 + c + 65535;c = Math.floor(v / 65536);t11 = v - c * 65536;
	    v = t12 + c + 65535;c = Math.floor(v / 65536);t12 = v - c * 65536;
	    v = t13 + c + 65535;c = Math.floor(v / 65536);t13 = v - c * 65536;
	    v = t14 + c + 65535;c = Math.floor(v / 65536);t14 = v - c * 65536;
	    v = t15 + c + 65535;c = Math.floor(v / 65536);t15 = v - c * 65536;
	    t0 += c - 1 + 37 * (c - 1);
	
	    // second car
	    c = 1;
	    v = t0 + c + 65535;c = Math.floor(v / 65536);t0 = v - c * 65536;
	    v = t1 + c + 65535;c = Math.floor(v / 65536);t1 = v - c * 65536;
	    v = t2 + c + 65535;c = Math.floor(v / 65536);t2 = v - c * 65536;
	    v = t3 + c + 65535;c = Math.floor(v / 65536);t3 = v - c * 65536;
	    v = t4 + c + 65535;c = Math.floor(v / 65536);t4 = v - c * 65536;
	    v = t5 + c + 65535;c = Math.floor(v / 65536);t5 = v - c * 65536;
	    v = t6 + c + 65535;c = Math.floor(v / 65536);t6 = v - c * 65536;
	    v = t7 + c + 65535;c = Math.floor(v / 65536);t7 = v - c * 65536;
	    v = t8 + c + 65535;c = Math.floor(v / 65536);t8 = v - c * 65536;
	    v = t9 + c + 65535;c = Math.floor(v / 65536);t9 = v - c * 65536;
	    v = t10 + c + 65535;c = Math.floor(v / 65536);t10 = v - c * 65536;
	    v = t11 + c + 65535;c = Math.floor(v / 65536);t11 = v - c * 65536;
	    v = t12 + c + 65535;c = Math.floor(v / 65536);t12 = v - c * 65536;
	    v = t13 + c + 65535;c = Math.floor(v / 65536);t13 = v - c * 65536;
	    v = t14 + c + 65535;c = Math.floor(v / 65536);t14 = v - c * 65536;
	    v = t15 + c + 65535;c = Math.floor(v / 65536);t15 = v - c * 65536;
	    t0 += c - 1 + 37 * (c - 1);
	
	    o[0] = t0;
	    o[1] = t1;
	    o[2] = t2;
	    o[3] = t3;
	    o[4] = t4;
	    o[5] = t5;
	    o[6] = t6;
	    o[7] = t7;
	    o[8] = t8;
	    o[9] = t9;
	    o[10] = t10;
	    o[11] = t11;
	    o[12] = t12;
	    o[13] = t13;
	    o[14] = t14;
	    o[15] = t15;
	  }
	
	  function S(o, a) {
	    M(o, a, a);
	  }
	
	  function inv25519(o, i) {
	    var c = gf();
	    var a;
	    for (a = 0; a < 16; a++) {
	      c[a] = i[a];
	    }for (a = 253; a >= 0; a--) {
	      S(c, c);
	      if (a !== 2 && a !== 4) M(c, c, i);
	    }
	    for (a = 0; a < 16; a++) {
	      o[a] = c[a];
	    }
	  }
	
	  function pow2523(o, i) {
	    var c = gf();
	    var a;
	    for (a = 0; a < 16; a++) {
	      c[a] = i[a];
	    }for (a = 250; a >= 0; a--) {
	      S(c, c);
	      if (a !== 1) M(c, c, i);
	    }
	    for (a = 0; a < 16; a++) {
	      o[a] = c[a];
	    }
	  }
	
	  function crypto_scalarmult(q, n, p) {
	    var z = new Uint8Array(32);
	    var x = new Float64Array(80),
	        r,
	        i;
	    var a = gf(),
	        b = gf(),
	        c = gf(),
	        d = gf(),
	        e = gf(),
	        f = gf();
	    for (i = 0; i < 31; i++) {
	      z[i] = n[i];
	    }z[31] = n[31] & 127 | 64;
	    z[0] &= 248;
	    unpack25519(x, p);
	    for (i = 0; i < 16; i++) {
	      b[i] = x[i];
	      d[i] = a[i] = c[i] = 0;
	    }
	    a[0] = d[0] = 1;
	    for (i = 254; i >= 0; --i) {
	      r = z[i >>> 3] >>> (i & 7) & 1;
	      sel25519(a, b, r);
	      sel25519(c, d, r);
	      A(e, a, c);
	      Z(a, a, c);
	      A(c, b, d);
	      Z(b, b, d);
	      S(d, e);
	      S(f, a);
	      M(a, c, a);
	      M(c, b, e);
	      A(e, a, c);
	      Z(a, a, c);
	      S(b, a);
	      Z(c, d, f);
	      M(a, c, _121665);
	      A(a, a, d);
	      M(c, c, a);
	      M(a, d, f);
	      M(d, b, x);
	      S(b, e);
	      sel25519(a, b, r);
	      sel25519(c, d, r);
	    }
	    for (i = 0; i < 16; i++) {
	      x[i + 16] = a[i];
	      x[i + 32] = c[i];
	      x[i + 48] = b[i];
	      x[i + 64] = d[i];
	    }
	    var x32 = x.subarray(32);
	    var x16 = x.subarray(16);
	    inv25519(x32, x32);
	    M(x16, x16, x32);
	    pack25519(q, x16);
	    return 0;
	  }
	
	  function crypto_scalarmult_base(q, n) {
	    return crypto_scalarmult(q, n, _9);
	  }
	
	  function crypto_box_keypair(y, x) {
	    randombytes(x, 32);
	    return crypto_scalarmult_base(y, x);
	  }
	
	  function crypto_box_beforenm(k, y, x) {
	    var s = new Uint8Array(32);
	    crypto_scalarmult(s, x, y);
	    return crypto_core_hsalsa20(k, _0, s, sigma);
	  }
	
	  var crypto_box_afternm = crypto_secretbox;
	  var crypto_box_open_afternm = crypto_secretbox_open;
	
	  function crypto_box(c, m, d, n, y, x) {
	    var k = new Uint8Array(32);
	    crypto_box_beforenm(k, y, x);
	    return crypto_box_afternm(c, m, d, n, k);
	  }
	
	  function crypto_box_open(m, c, d, n, y, x) {
	    var k = new Uint8Array(32);
	    crypto_box_beforenm(k, y, x);
	    return crypto_box_open_afternm(m, c, d, n, k);
	  }
	
	  var K = [0x428a2f98, 0xd728ae22, 0x71374491, 0x23ef65cd, 0xb5c0fbcf, 0xec4d3b2f, 0xe9b5dba5, 0x8189dbbc, 0x3956c25b, 0xf348b538, 0x59f111f1, 0xb605d019, 0x923f82a4, 0xaf194f9b, 0xab1c5ed5, 0xda6d8118, 0xd807aa98, 0xa3030242, 0x12835b01, 0x45706fbe, 0x243185be, 0x4ee4b28c, 0x550c7dc3, 0xd5ffb4e2, 0x72be5d74, 0xf27b896f, 0x80deb1fe, 0x3b1696b1, 0x9bdc06a7, 0x25c71235, 0xc19bf174, 0xcf692694, 0xe49b69c1, 0x9ef14ad2, 0xefbe4786, 0x384f25e3, 0x0fc19dc6, 0x8b8cd5b5, 0x240ca1cc, 0x77ac9c65, 0x2de92c6f, 0x592b0275, 0x4a7484aa, 0x6ea6e483, 0x5cb0a9dc, 0xbd41fbd4, 0x76f988da, 0x831153b5, 0x983e5152, 0xee66dfab, 0xa831c66d, 0x2db43210, 0xb00327c8, 0x98fb213f, 0xbf597fc7, 0xbeef0ee4, 0xc6e00bf3, 0x3da88fc2, 0xd5a79147, 0x930aa725, 0x06ca6351, 0xe003826f, 0x14292967, 0x0a0e6e70, 0x27b70a85, 0x46d22ffc, 0x2e1b2138, 0x5c26c926, 0x4d2c6dfc, 0x5ac42aed, 0x53380d13, 0x9d95b3df, 0x650a7354, 0x8baf63de, 0x766a0abb, 0x3c77b2a8, 0x81c2c92e, 0x47edaee6, 0x92722c85, 0x1482353b, 0xa2bfe8a1, 0x4cf10364, 0xa81a664b, 0xbc423001, 0xc24b8b70, 0xd0f89791, 0xc76c51a3, 0x0654be30, 0xd192e819, 0xd6ef5218, 0xd6990624, 0x5565a910, 0xf40e3585, 0x5771202a, 0x106aa070, 0x32bbd1b8, 0x19a4c116, 0xb8d2d0c8, 0x1e376c08, 0x5141ab53, 0x2748774c, 0xdf8eeb99, 0x34b0bcb5, 0xe19b48a8, 0x391c0cb3, 0xc5c95a63, 0x4ed8aa4a, 0xe3418acb, 0x5b9cca4f, 0x7763e373, 0x682e6ff3, 0xd6b2b8a3, 0x748f82ee, 0x5defb2fc, 0x78a5636f, 0x43172f60, 0x84c87814, 0xa1f0ab72, 0x8cc70208, 0x1a6439ec, 0x90befffa, 0x23631e28, 0xa4506ceb, 0xde82bde9, 0xbef9a3f7, 0xb2c67915, 0xc67178f2, 0xe372532b, 0xca273ece, 0xea26619c, 0xd186b8c7, 0x21c0c207, 0xeada7dd6, 0xcde0eb1e, 0xf57d4f7f, 0xee6ed178, 0x06f067aa, 0x72176fba, 0x0a637dc5, 0xa2c898a6, 0x113f9804, 0xbef90dae, 0x1b710b35, 0x131c471b, 0x28db77f5, 0x23047d84, 0x32caab7b, 0x40c72493, 0x3c9ebe0a, 0x15c9bebc, 0x431d67c4, 0x9c100d4c, 0x4cc5d4be, 0xcb3e42b6, 0x597f299c, 0xfc657e2a, 0x5fcb6fab, 0x3ad6faec, 0x6c44198c, 0x4a475817];
	
	  function crypto_hashblocks_hl(hh, hl, m, n) {
	    var wh = new Int32Array(16),
	        wl = new Int32Array(16),
	        bh0,
	        bh1,
	        bh2,
	        bh3,
	        bh4,
	        bh5,
	        bh6,
	        bh7,
	        bl0,
	        bl1,
	        bl2,
	        bl3,
	        bl4,
	        bl5,
	        bl6,
	        bl7,
	        th,
	        tl,
	        i,
	        j,
	        h,
	        l,
	        a,
	        b,
	        c,
	        d;
	
	    var ah0 = hh[0],
	        ah1 = hh[1],
	        ah2 = hh[2],
	        ah3 = hh[3],
	        ah4 = hh[4],
	        ah5 = hh[5],
	        ah6 = hh[6],
	        ah7 = hh[7],
	        al0 = hl[0],
	        al1 = hl[1],
	        al2 = hl[2],
	        al3 = hl[3],
	        al4 = hl[4],
	        al5 = hl[5],
	        al6 = hl[6],
	        al7 = hl[7];
	
	    var pos = 0;
	    while (n >= 128) {
	      for (i = 0; i < 16; i++) {
	        j = 8 * i + pos;
	        wh[i] = m[j + 0] << 24 | m[j + 1] << 16 | m[j + 2] << 8 | m[j + 3];
	        wl[i] = m[j + 4] << 24 | m[j + 5] << 16 | m[j + 6] << 8 | m[j + 7];
	      }
	      for (i = 0; i < 80; i++) {
	        bh0 = ah0;
	        bh1 = ah1;
	        bh2 = ah2;
	        bh3 = ah3;
	        bh4 = ah4;
	        bh5 = ah5;
	        bh6 = ah6;
	        bh7 = ah7;
	
	        bl0 = al0;
	        bl1 = al1;
	        bl2 = al2;
	        bl3 = al3;
	        bl4 = al4;
	        bl5 = al5;
	        bl6 = al6;
	        bl7 = al7;
	
	        // add
	        h = ah7;
	        l = al7;
	
	        a = l & 0xffff;b = l >>> 16;
	        c = h & 0xffff;d = h >>> 16;
	
	        // Sigma1
	        h = (ah4 >>> 14 | al4 << 32 - 14) ^ (ah4 >>> 18 | al4 << 32 - 18) ^ (al4 >>> 41 - 32 | ah4 << 32 - (41 - 32));
	        l = (al4 >>> 14 | ah4 << 32 - 14) ^ (al4 >>> 18 | ah4 << 32 - 18) ^ (ah4 >>> 41 - 32 | al4 << 32 - (41 - 32));
	
	        a += l & 0xffff;b += l >>> 16;
	        c += h & 0xffff;d += h >>> 16;
	
	        // Ch
	        h = ah4 & ah5 ^ ~ah4 & ah6;
	        l = al4 & al5 ^ ~al4 & al6;
	
	        a += l & 0xffff;b += l >>> 16;
	        c += h & 0xffff;d += h >>> 16;
	
	        // K
	        h = K[i * 2];
	        l = K[i * 2 + 1];
	
	        a += l & 0xffff;b += l >>> 16;
	        c += h & 0xffff;d += h >>> 16;
	
	        // w
	        h = wh[i % 16];
	        l = wl[i % 16];
	
	        a += l & 0xffff;b += l >>> 16;
	        c += h & 0xffff;d += h >>> 16;
	
	        b += a >>> 16;
	        c += b >>> 16;
	        d += c >>> 16;
	
	        th = c & 0xffff | d << 16;
	        tl = a & 0xffff | b << 16;
	
	        // add
	        h = th;
	        l = tl;
	
	        a = l & 0xffff;b = l >>> 16;
	        c = h & 0xffff;d = h >>> 16;
	
	        // Sigma0
	        h = (ah0 >>> 28 | al0 << 32 - 28) ^ (al0 >>> 34 - 32 | ah0 << 32 - (34 - 32)) ^ (al0 >>> 39 - 32 | ah0 << 32 - (39 - 32));
	        l = (al0 >>> 28 | ah0 << 32 - 28) ^ (ah0 >>> 34 - 32 | al0 << 32 - (34 - 32)) ^ (ah0 >>> 39 - 32 | al0 << 32 - (39 - 32));
	
	        a += l & 0xffff;b += l >>> 16;
	        c += h & 0xffff;d += h >>> 16;
	
	        // Maj
	        h = ah0 & ah1 ^ ah0 & ah2 ^ ah1 & ah2;
	        l = al0 & al1 ^ al0 & al2 ^ al1 & al2;
	
	        a += l & 0xffff;b += l >>> 16;
	        c += h & 0xffff;d += h >>> 16;
	
	        b += a >>> 16;
	        c += b >>> 16;
	        d += c >>> 16;
	
	        bh7 = c & 0xffff | d << 16;
	        bl7 = a & 0xffff | b << 16;
	
	        // add
	        h = bh3;
	        l = bl3;
	
	        a = l & 0xffff;b = l >>> 16;
	        c = h & 0xffff;d = h >>> 16;
	
	        h = th;
	        l = tl;
	
	        a += l & 0xffff;b += l >>> 16;
	        c += h & 0xffff;d += h >>> 16;
	
	        b += a >>> 16;
	        c += b >>> 16;
	        d += c >>> 16;
	
	        bh3 = c & 0xffff | d << 16;
	        bl3 = a & 0xffff | b << 16;
	
	        ah1 = bh0;
	        ah2 = bh1;
	        ah3 = bh2;
	        ah4 = bh3;
	        ah5 = bh4;
	        ah6 = bh5;
	        ah7 = bh6;
	        ah0 = bh7;
	
	        al1 = bl0;
	        al2 = bl1;
	        al3 = bl2;
	        al4 = bl3;
	        al5 = bl4;
	        al6 = bl5;
	        al7 = bl6;
	        al0 = bl7;
	
	        if (i % 16 === 15) {
	          for (j = 0; j < 16; j++) {
	            // add
	            h = wh[j];
	            l = wl[j];
	
	            a = l & 0xffff;b = l >>> 16;
	            c = h & 0xffff;d = h >>> 16;
	
	            h = wh[(j + 9) % 16];
	            l = wl[(j + 9) % 16];
	
	            a += l & 0xffff;b += l >>> 16;
	            c += h & 0xffff;d += h >>> 16;
	
	            // sigma0
	            th = wh[(j + 1) % 16];
	            tl = wl[(j + 1) % 16];
	            h = (th >>> 1 | tl << 32 - 1) ^ (th >>> 8 | tl << 32 - 8) ^ th >>> 7;
	            l = (tl >>> 1 | th << 32 - 1) ^ (tl >>> 8 | th << 32 - 8) ^ (tl >>> 7 | th << 32 - 7);
	
	            a += l & 0xffff;b += l >>> 16;
	            c += h & 0xffff;d += h >>> 16;
	
	            // sigma1
	            th = wh[(j + 14) % 16];
	            tl = wl[(j + 14) % 16];
	            h = (th >>> 19 | tl << 32 - 19) ^ (tl >>> 61 - 32 | th << 32 - (61 - 32)) ^ th >>> 6;
	            l = (tl >>> 19 | th << 32 - 19) ^ (th >>> 61 - 32 | tl << 32 - (61 - 32)) ^ (tl >>> 6 | th << 32 - 6);
	
	            a += l & 0xffff;b += l >>> 16;
	            c += h & 0xffff;d += h >>> 16;
	
	            b += a >>> 16;
	            c += b >>> 16;
	            d += c >>> 16;
	
	            wh[j] = c & 0xffff | d << 16;
	            wl[j] = a & 0xffff | b << 16;
	          }
	        }
	      }
	
	      // add
	      h = ah0;
	      l = al0;
	
	      a = l & 0xffff;b = l >>> 16;
	      c = h & 0xffff;d = h >>> 16;
	
	      h = hh[0];
	      l = hl[0];
	
	      a += l & 0xffff;b += l >>> 16;
	      c += h & 0xffff;d += h >>> 16;
	
	      b += a >>> 16;
	      c += b >>> 16;
	      d += c >>> 16;
	
	      hh[0] = ah0 = c & 0xffff | d << 16;
	      hl[0] = al0 = a & 0xffff | b << 16;
	
	      h = ah1;
	      l = al1;
	
	      a = l & 0xffff;b = l >>> 16;
	      c = h & 0xffff;d = h >>> 16;
	
	      h = hh[1];
	      l = hl[1];
	
	      a += l & 0xffff;b += l >>> 16;
	      c += h & 0xffff;d += h >>> 16;
	
	      b += a >>> 16;
	      c += b >>> 16;
	      d += c >>> 16;
	
	      hh[1] = ah1 = c & 0xffff | d << 16;
	      hl[1] = al1 = a & 0xffff | b << 16;
	
	      h = ah2;
	      l = al2;
	
	      a = l & 0xffff;b = l >>> 16;
	      c = h & 0xffff;d = h >>> 16;
	
	      h = hh[2];
	      l = hl[2];
	
	      a += l & 0xffff;b += l >>> 16;
	      c += h & 0xffff;d += h >>> 16;
	
	      b += a >>> 16;
	      c += b >>> 16;
	      d += c >>> 16;
	
	      hh[2] = ah2 = c & 0xffff | d << 16;
	      hl[2] = al2 = a & 0xffff | b << 16;
	
	      h = ah3;
	      l = al3;
	
	      a = l & 0xffff;b = l >>> 16;
	      c = h & 0xffff;d = h >>> 16;
	
	      h = hh[3];
	      l = hl[3];
	
	      a += l & 0xffff;b += l >>> 16;
	      c += h & 0xffff;d += h >>> 16;
	
	      b += a >>> 16;
	      c += b >>> 16;
	      d += c >>> 16;
	
	      hh[3] = ah3 = c & 0xffff | d << 16;
	      hl[3] = al3 = a & 0xffff | b << 16;
	
	      h = ah4;
	      l = al4;
	
	      a = l & 0xffff;b = l >>> 16;
	      c = h & 0xffff;d = h >>> 16;
	
	      h = hh[4];
	      l = hl[4];
	
	      a += l & 0xffff;b += l >>> 16;
	      c += h & 0xffff;d += h >>> 16;
	
	      b += a >>> 16;
	      c += b >>> 16;
	      d += c >>> 16;
	
	      hh[4] = ah4 = c & 0xffff | d << 16;
	      hl[4] = al4 = a & 0xffff | b << 16;
	
	      h = ah5;
	      l = al5;
	
	      a = l & 0xffff;b = l >>> 16;
	      c = h & 0xffff;d = h >>> 16;
	
	      h = hh[5];
	      l = hl[5];
	
	      a += l & 0xffff;b += l >>> 16;
	      c += h & 0xffff;d += h >>> 16;
	
	      b += a >>> 16;
	      c += b >>> 16;
	      d += c >>> 16;
	
	      hh[5] = ah5 = c & 0xffff | d << 16;
	      hl[5] = al5 = a & 0xffff | b << 16;
	
	      h = ah6;
	      l = al6;
	
	      a = l & 0xffff;b = l >>> 16;
	      c = h & 0xffff;d = h >>> 16;
	
	      h = hh[6];
	      l = hl[6];
	
	      a += l & 0xffff;b += l >>> 16;
	      c += h & 0xffff;d += h >>> 16;
	
	      b += a >>> 16;
	      c += b >>> 16;
	      d += c >>> 16;
	
	      hh[6] = ah6 = c & 0xffff | d << 16;
	      hl[6] = al6 = a & 0xffff | b << 16;
	
	      h = ah7;
	      l = al7;
	
	      a = l & 0xffff;b = l >>> 16;
	      c = h & 0xffff;d = h >>> 16;
	
	      h = hh[7];
	      l = hl[7];
	
	      a += l & 0xffff;b += l >>> 16;
	      c += h & 0xffff;d += h >>> 16;
	
	      b += a >>> 16;
	      c += b >>> 16;
	      d += c >>> 16;
	
	      hh[7] = ah7 = c & 0xffff | d << 16;
	      hl[7] = al7 = a & 0xffff | b << 16;
	
	      pos += 128;
	      n -= 128;
	    }
	
	    return n;
	  }
	
	  function crypto_hash(out, m, n) {
	    var hh = new Int32Array(8),
	        hl = new Int32Array(8),
	        x = new Uint8Array(256),
	        i,
	        b = n;
	
	    hh[0] = 0x6a09e667;
	    hh[1] = 0xbb67ae85;
	    hh[2] = 0x3c6ef372;
	    hh[3] = 0xa54ff53a;
	    hh[4] = 0x510e527f;
	    hh[5] = 0x9b05688c;
	    hh[6] = 0x1f83d9ab;
	    hh[7] = 0x5be0cd19;
	
	    hl[0] = 0xf3bcc908;
	    hl[1] = 0x84caa73b;
	    hl[2] = 0xfe94f82b;
	    hl[3] = 0x5f1d36f1;
	    hl[4] = 0xade682d1;
	    hl[5] = 0x2b3e6c1f;
	    hl[6] = 0xfb41bd6b;
	    hl[7] = 0x137e2179;
	
	    crypto_hashblocks_hl(hh, hl, m, n);
	    n %= 128;
	
	    for (i = 0; i < n; i++) {
	      x[i] = m[b - n + i];
	    }x[n] = 128;
	
	    n = 256 - 128 * (n < 112 ? 1 : 0);
	    x[n - 9] = 0;
	    ts64(x, n - 8, b / 0x20000000 | 0, b << 3);
	    crypto_hashblocks_hl(hh, hl, x, n);
	
	    for (i = 0; i < 8; i++) {
	      ts64(out, 8 * i, hh[i], hl[i]);
	    }return 0;
	  }
	
	  function add(p, q) {
	    var a = gf(),
	        b = gf(),
	        c = gf(),
	        d = gf(),
	        e = gf(),
	        f = gf(),
	        g = gf(),
	        h = gf(),
	        t = gf();
	
	    Z(a, p[1], p[0]);
	    Z(t, q[1], q[0]);
	    M(a, a, t);
	    A(b, p[0], p[1]);
	    A(t, q[0], q[1]);
	    M(b, b, t);
	    M(c, p[3], q[3]);
	    M(c, c, D2);
	    M(d, p[2], q[2]);
	    A(d, d, d);
	    Z(e, b, a);
	    Z(f, d, c);
	    A(g, d, c);
	    A(h, b, a);
	
	    M(p[0], e, f);
	    M(p[1], h, g);
	    M(p[2], g, f);
	    M(p[3], e, h);
	  }
	
	  function cswap(p, q, b) {
	    var i;
	    for (i = 0; i < 4; i++) {
	      sel25519(p[i], q[i], b);
	    }
	  }
	
	  function pack(r, p) {
	    var tx = gf(),
	        ty = gf(),
	        zi = gf();
	    inv25519(zi, p[2]);
	    M(tx, p[0], zi);
	    M(ty, p[1], zi);
	    pack25519(r, ty);
	    r[31] ^= par25519(tx) << 7;
	  }
	
	  function scalarmult(p, q, s) {
	    var b, i;
	    set25519(p[0], gf0);
	    set25519(p[1], gf1);
	    set25519(p[2], gf1);
	    set25519(p[3], gf0);
	    for (i = 255; i >= 0; --i) {
	      b = s[i / 8 | 0] >> (i & 7) & 1;
	      cswap(p, q, b);
	      add(q, p);
	      add(p, p);
	      cswap(p, q, b);
	    }
	  }
	
	  function scalarbase(p, s) {
	    var q = [gf(), gf(), gf(), gf()];
	    set25519(q[0], X);
	    set25519(q[1], Y);
	    set25519(q[2], gf1);
	    M(q[3], X, Y);
	    scalarmult(p, q, s);
	  }
	
	  function crypto_sign_keypair(pk, sk, seeded) {
	    var d = new Uint8Array(64);
	    var p = [gf(), gf(), gf(), gf()];
	    var i;
	
	    if (!seeded) randombytes(sk, 32);
	    crypto_hash(d, sk, 32);
	    d[0] &= 248;
	    d[31] &= 127;
	    d[31] |= 64;
	
	    scalarbase(p, d);
	    pack(pk, p);
	
	    for (i = 0; i < 32; i++) {
	      sk[i + 32] = pk[i];
	    }return 0;
	  }
	
	  var L = new Float64Array([0xed, 0xd3, 0xf5, 0x5c, 0x1a, 0x63, 0x12, 0x58, 0xd6, 0x9c, 0xf7, 0xa2, 0xde, 0xf9, 0xde, 0x14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0x10]);
	
	  function modL(r, x) {
	    var carry, i, j, k;
	    for (i = 63; i >= 32; --i) {
	      carry = 0;
	      for (j = i - 32, k = i - 12; j < k; ++j) {
	        x[j] += carry - 16 * x[i] * L[j - (i - 32)];
	        carry = x[j] + 128 >> 8;
	        x[j] -= carry * 256;
	      }
	      x[j] += carry;
	      x[i] = 0;
	    }
	    carry = 0;
	    for (j = 0; j < 32; j++) {
	      x[j] += carry - (x[31] >> 4) * L[j];
	      carry = x[j] >> 8;
	      x[j] &= 255;
	    }
	    for (j = 0; j < 32; j++) {
	      x[j] -= carry * L[j];
	    }for (i = 0; i < 32; i++) {
	      x[i + 1] += x[i] >> 8;
	      r[i] = x[i] & 255;
	    }
	  }
	
	  function reduce(r) {
	    var x = new Float64Array(64),
	        i;
	    for (i = 0; i < 64; i++) {
	      x[i] = r[i];
	    }for (i = 0; i < 64; i++) {
	      r[i] = 0;
	    }modL(r, x);
	  }
	
	  // Note: difference from C - smlen returned, not passed as argument.
	  function crypto_sign(sm, m, n, sk) {
	    var d = new Uint8Array(64),
	        h = new Uint8Array(64),
	        r = new Uint8Array(64);
	    var i,
	        j,
	        x = new Float64Array(64);
	    var p = [gf(), gf(), gf(), gf()];
	
	    crypto_hash(d, sk, 32);
	    d[0] &= 248;
	    d[31] &= 127;
	    d[31] |= 64;
	
	    var smlen = n + 64;
	    for (i = 0; i < n; i++) {
	      sm[64 + i] = m[i];
	    }for (i = 0; i < 32; i++) {
	      sm[32 + i] = d[32 + i];
	    }crypto_hash(r, sm.subarray(32), n + 32);
	    reduce(r);
	    scalarbase(p, r);
	    pack(sm, p);
	
	    for (i = 32; i < 64; i++) {
	      sm[i] = sk[i];
	    }crypto_hash(h, sm, n + 64);
	    reduce(h);
	
	    for (i = 0; i < 64; i++) {
	      x[i] = 0;
	    }for (i = 0; i < 32; i++) {
	      x[i] = r[i];
	    }for (i = 0; i < 32; i++) {
	      for (j = 0; j < 32; j++) {
	        x[i + j] += h[i] * d[j];
	      }
	    }
	
	    modL(sm.subarray(32), x);
	    return smlen;
	  }
	
	  function unpackneg(r, p) {
	    var t = gf(),
	        chk = gf(),
	        num = gf(),
	        den = gf(),
	        den2 = gf(),
	        den4 = gf(),
	        den6 = gf();
	
	    set25519(r[2], gf1);
	    unpack25519(r[1], p);
	    S(num, r[1]);
	    M(den, num, D);
	    Z(num, num, r[2]);
	    A(den, r[2], den);
	
	    S(den2, den);
	    S(den4, den2);
	    M(den6, den4, den2);
	    M(t, den6, num);
	    M(t, t, den);
	
	    pow2523(t, t);
	    M(t, t, num);
	    M(t, t, den);
	    M(t, t, den);
	    M(r[0], t, den);
	
	    S(chk, r[0]);
	    M(chk, chk, den);
	    if (neq25519(chk, num)) M(r[0], r[0], I);
	
	    S(chk, r[0]);
	    M(chk, chk, den);
	    if (neq25519(chk, num)) return -1;
	
	    if (par25519(r[0]) === p[31] >> 7) Z(r[0], gf0, r[0]);
	
	    M(r[3], r[0], r[1]);
	    return 0;
	  }
	
	  function crypto_sign_open(m, sm, n, pk) {
	    var i, mlen;
	    var t = new Uint8Array(32),
	        h = new Uint8Array(64);
	    var p = [gf(), gf(), gf(), gf()],
	        q = [gf(), gf(), gf(), gf()];
	
	    mlen = -1;
	    if (n < 64) return -1;
	
	    if (unpackneg(q, pk)) return -1;
	
	    for (i = 0; i < n; i++) {
	      m[i] = sm[i];
	    }for (i = 0; i < 32; i++) {
	      m[i + 32] = pk[i];
	    }crypto_hash(h, m, n);
	    reduce(h);
	    scalarmult(p, q, h);
	
	    scalarbase(q, sm.subarray(32));
	    add(p, q);
	    pack(t, p);
	
	    n -= 64;
	    if (crypto_verify_32(sm, 0, t, 0)) {
	      for (i = 0; i < n; i++) {
	        m[i] = 0;
	      }return -1;
	    }
	
	    for (i = 0; i < n; i++) {
	      m[i] = sm[i + 64];
	    }mlen = n;
	    return mlen;
	  }
	
	  var crypto_secretbox_KEYBYTES = 32,
	      crypto_secretbox_NONCEBYTES = 24,
	      crypto_secretbox_ZEROBYTES = 32,
	      crypto_secretbox_BOXZEROBYTES = 16,
	      crypto_scalarmult_BYTES = 32,
	      crypto_scalarmult_SCALARBYTES = 32,
	      crypto_box_PUBLICKEYBYTES = 32,
	      crypto_box_SECRETKEYBYTES = 32,
	      crypto_box_BEFORENMBYTES = 32,
	      crypto_box_NONCEBYTES = crypto_secretbox_NONCEBYTES,
	      crypto_box_ZEROBYTES = crypto_secretbox_ZEROBYTES,
	      crypto_box_BOXZEROBYTES = crypto_secretbox_BOXZEROBYTES,
	      crypto_sign_BYTES = 64,
	      crypto_sign_PUBLICKEYBYTES = 32,
	      crypto_sign_SECRETKEYBYTES = 64,
	      crypto_sign_SEEDBYTES = 32,
	      crypto_hash_BYTES = 64;
	
	  nacl.lowlevel = {
	    crypto_core_hsalsa20: crypto_core_hsalsa20,
	    crypto_stream_xor: crypto_stream_xor,
	    crypto_stream: crypto_stream,
	    crypto_stream_salsa20_xor: crypto_stream_salsa20_xor,
	    crypto_stream_salsa20: crypto_stream_salsa20,
	    crypto_onetimeauth: crypto_onetimeauth,
	    crypto_onetimeauth_verify: crypto_onetimeauth_verify,
	    crypto_verify_16: crypto_verify_16,
	    crypto_verify_32: crypto_verify_32,
	    crypto_secretbox: crypto_secretbox,
	    crypto_secretbox_open: crypto_secretbox_open,
	    crypto_scalarmult: crypto_scalarmult,
	    crypto_scalarmult_base: crypto_scalarmult_base,
	    crypto_box_beforenm: crypto_box_beforenm,
	    crypto_box_afternm: crypto_box_afternm,
	    crypto_box: crypto_box,
	    crypto_box_open: crypto_box_open,
	    crypto_box_keypair: crypto_box_keypair,
	    crypto_hash: crypto_hash,
	    crypto_sign: crypto_sign,
	    crypto_sign_keypair: crypto_sign_keypair,
	    crypto_sign_open: crypto_sign_open,
	
	    crypto_secretbox_KEYBYTES: crypto_secretbox_KEYBYTES,
	    crypto_secretbox_NONCEBYTES: crypto_secretbox_NONCEBYTES,
	    crypto_secretbox_ZEROBYTES: crypto_secretbox_ZEROBYTES,
	    crypto_secretbox_BOXZEROBYTES: crypto_secretbox_BOXZEROBYTES,
	    crypto_scalarmult_BYTES: crypto_scalarmult_BYTES,
	    crypto_scalarmult_SCALARBYTES: crypto_scalarmult_SCALARBYTES,
	    crypto_box_PUBLICKEYBYTES: crypto_box_PUBLICKEYBYTES,
	    crypto_box_SECRETKEYBYTES: crypto_box_SECRETKEYBYTES,
	    crypto_box_BEFORENMBYTES: crypto_box_BEFORENMBYTES,
	    crypto_box_NONCEBYTES: crypto_box_NONCEBYTES,
	    crypto_box_ZEROBYTES: crypto_box_ZEROBYTES,
	    crypto_box_BOXZEROBYTES: crypto_box_BOXZEROBYTES,
	    crypto_sign_BYTES: crypto_sign_BYTES,
	    crypto_sign_PUBLICKEYBYTES: crypto_sign_PUBLICKEYBYTES,
	    crypto_sign_SECRETKEYBYTES: crypto_sign_SECRETKEYBYTES,
	    crypto_sign_SEEDBYTES: crypto_sign_SEEDBYTES,
	    crypto_hash_BYTES: crypto_hash_BYTES
	  };
	
	  /* High-level API */
	
	  function checkLengths(k, n) {
	    if (k.length !== crypto_secretbox_KEYBYTES) throw new Error('bad key size');
	    if (n.length !== crypto_secretbox_NONCEBYTES) throw new Error('bad nonce size');
	  }
	
	  function checkBoxLengths(pk, sk) {
	    if (pk.length !== crypto_box_PUBLICKEYBYTES) throw new Error('bad public key size');
	    if (sk.length !== crypto_box_SECRETKEYBYTES) throw new Error('bad secret key size');
	  }
	
	  function checkArrayTypes() {
	    var t, i;
	    for (i = 0; i < arguments.length; i++) {
	      if ((t = Object.prototype.toString.call(arguments[i])) !== '[object Uint8Array]') throw new TypeError('unexpected type ' + t + ', use Uint8Array');
	    }
	  }
	
	  function cleanup(arr) {
	    for (var i = 0; i < arr.length; i++) {
	      arr[i] = 0;
	    }
	  }
	
	  // TODO: Completely remove this in v0.15.
	  if (!nacl.util) {
	    nacl.util = {};
	    nacl.util.decodeUTF8 = nacl.util.encodeUTF8 = nacl.util.encodeBase64 = nacl.util.decodeBase64 = function () {
	      throw new Error('nacl.util moved into separate package: https://github.com/dchest/tweetnacl-util-js');
	    };
	  }
	
	  nacl.randomBytes = function (n) {
	    var b = new Uint8Array(n);
	    randombytes(b, n);
	    return b;
	  };
	
	  nacl.secretbox = function (msg, nonce, key) {
	    checkArrayTypes(msg, nonce, key);
	    checkLengths(key, nonce);
	    var m = new Uint8Array(crypto_secretbox_ZEROBYTES + msg.length);
	    var c = new Uint8Array(m.length);
	    for (var i = 0; i < msg.length; i++) {
	      m[i + crypto_secretbox_ZEROBYTES] = msg[i];
	    }crypto_secretbox(c, m, m.length, nonce, key);
	    return c.subarray(crypto_secretbox_BOXZEROBYTES);
	  };
	
	  nacl.secretbox.open = function (box, nonce, key) {
	    checkArrayTypes(box, nonce, key);
	    checkLengths(key, nonce);
	    var c = new Uint8Array(crypto_secretbox_BOXZEROBYTES + box.length);
	    var m = new Uint8Array(c.length);
	    for (var i = 0; i < box.length; i++) {
	      c[i + crypto_secretbox_BOXZEROBYTES] = box[i];
	    }if (c.length < 32) return false;
	    if (crypto_secretbox_open(m, c, c.length, nonce, key) !== 0) return false;
	    return m.subarray(crypto_secretbox_ZEROBYTES);
	  };
	
	  nacl.secretbox.keyLength = crypto_secretbox_KEYBYTES;
	  nacl.secretbox.nonceLength = crypto_secretbox_NONCEBYTES;
	  nacl.secretbox.overheadLength = crypto_secretbox_BOXZEROBYTES;
	
	  nacl.scalarMult = function (n, p) {
	    checkArrayTypes(n, p);
	    if (n.length !== crypto_scalarmult_SCALARBYTES) throw new Error('bad n size');
	    if (p.length !== crypto_scalarmult_BYTES) throw new Error('bad p size');
	    var q = new Uint8Array(crypto_scalarmult_BYTES);
	    crypto_scalarmult(q, n, p);
	    return q;
	  };
	
	  nacl.scalarMult.base = function (n) {
	    checkArrayTypes(n);
	    if (n.length !== crypto_scalarmult_SCALARBYTES) throw new Error('bad n size');
	    var q = new Uint8Array(crypto_scalarmult_BYTES);
	    crypto_scalarmult_base(q, n);
	    return q;
	  };
	
	  nacl.scalarMult.scalarLength = crypto_scalarmult_SCALARBYTES;
	  nacl.scalarMult.groupElementLength = crypto_scalarmult_BYTES;
	
	  nacl.box = function (msg, nonce, publicKey, secretKey) {
	    var k = nacl.box.before(publicKey, secretKey);
	    return nacl.secretbox(msg, nonce, k);
	  };
	
	  nacl.box.before = function (publicKey, secretKey) {
	    checkArrayTypes(publicKey, secretKey);
	    checkBoxLengths(publicKey, secretKey);
	    var k = new Uint8Array(crypto_box_BEFORENMBYTES);
	    crypto_box_beforenm(k, publicKey, secretKey);
	    return k;
	  };
	
	  nacl.box.after = nacl.secretbox;
	
	  nacl.box.open = function (msg, nonce, publicKey, secretKey) {
	    var k = nacl.box.before(publicKey, secretKey);
	    return nacl.secretbox.open(msg, nonce, k);
	  };
	
	  nacl.box.open.after = nacl.secretbox.open;
	
	  nacl.box.keyPair = function () {
	    var pk = new Uint8Array(crypto_box_PUBLICKEYBYTES);
	    var sk = new Uint8Array(crypto_box_SECRETKEYBYTES);
	    crypto_box_keypair(pk, sk);
	    return { publicKey: pk, secretKey: sk };
	  };
	
	  nacl.box.keyPair.fromSecretKey = function (secretKey) {
	    checkArrayTypes(secretKey);
	    if (secretKey.length !== crypto_box_SECRETKEYBYTES) throw new Error('bad secret key size');
	    var pk = new Uint8Array(crypto_box_PUBLICKEYBYTES);
	    crypto_scalarmult_base(pk, secretKey);
	    return { publicKey: pk, secretKey: new Uint8Array(secretKey) };
	  };
	
	  nacl.box.publicKeyLength = crypto_box_PUBLICKEYBYTES;
	  nacl.box.secretKeyLength = crypto_box_SECRETKEYBYTES;
	  nacl.box.sharedKeyLength = crypto_box_BEFORENMBYTES;
	  nacl.box.nonceLength = crypto_box_NONCEBYTES;
	  nacl.box.overheadLength = nacl.secretbox.overheadLength;
	
	  nacl.sign = function (msg, secretKey) {
	    checkArrayTypes(msg, secretKey);
	    if (secretKey.length !== crypto_sign_SECRETKEYBYTES) throw new Error('bad secret key size');
	    var signedMsg = new Uint8Array(crypto_sign_BYTES + msg.length);
	    crypto_sign(signedMsg, msg, msg.length, secretKey);
	    return signedMsg;
	  };
	
	  nacl.sign.open = function (signedMsg, publicKey) {
	    if (arguments.length !== 2) throw new Error('nacl.sign.open accepts 2 arguments; did you mean to use nacl.sign.detached.verify?');
	    checkArrayTypes(signedMsg, publicKey);
	    if (publicKey.length !== crypto_sign_PUBLICKEYBYTES) throw new Error('bad public key size');
	    var tmp = new Uint8Array(signedMsg.length);
	    var mlen = crypto_sign_open(tmp, signedMsg, signedMsg.length, publicKey);
	    if (mlen < 0) return null;
	    var m = new Uint8Array(mlen);
	    for (var i = 0; i < m.length; i++) {
	      m[i] = tmp[i];
	    }return m;
	  };
	
	  nacl.sign.detached = function (msg, secretKey) {
	    var signedMsg = nacl.sign(msg, secretKey);
	    var sig = new Uint8Array(crypto_sign_BYTES);
	    for (var i = 0; i < sig.length; i++) {
	      sig[i] = signedMsg[i];
	    }return sig;
	  };
	
	  nacl.sign.detached.verify = function (msg, sig, publicKey) {
	    checkArrayTypes(msg, sig, publicKey);
	    if (sig.length !== crypto_sign_BYTES) throw new Error('bad signature size');
	    if (publicKey.length !== crypto_sign_PUBLICKEYBYTES) throw new Error('bad public key size');
	    var sm = new Uint8Array(crypto_sign_BYTES + msg.length);
	    var m = new Uint8Array(crypto_sign_BYTES + msg.length);
	    var i;
	    for (i = 0; i < crypto_sign_BYTES; i++) {
	      sm[i] = sig[i];
	    }for (i = 0; i < msg.length; i++) {
	      sm[i + crypto_sign_BYTES] = msg[i];
	    }return crypto_sign_open(m, sm, sm.length, publicKey) >= 0;
	  };
	
	  nacl.sign.keyPair = function () {
	    var pk = new Uint8Array(crypto_sign_PUBLICKEYBYTES);
	    var sk = new Uint8Array(crypto_sign_SECRETKEYBYTES);
	    crypto_sign_keypair(pk, sk);
	    return { publicKey: pk, secretKey: sk };
	  };
	
	  nacl.sign.keyPair.fromSecretKey = function (secretKey) {
	    checkArrayTypes(secretKey);
	    if (secretKey.length !== crypto_sign_SECRETKEYBYTES) throw new Error('bad secret key size');
	    var pk = new Uint8Array(crypto_sign_PUBLICKEYBYTES);
	    for (var i = 0; i < pk.length; i++) {
	      pk[i] = secretKey[32 + i];
	    }return { publicKey: pk, secretKey: new Uint8Array(secretKey) };
	  };
	
	  nacl.sign.keyPair.fromSeed = function (seed) {
	    checkArrayTypes(seed);
	    if (seed.length !== crypto_sign_SEEDBYTES) throw new Error('bad seed size');
	    var pk = new Uint8Array(crypto_sign_PUBLICKEYBYTES);
	    var sk = new Uint8Array(crypto_sign_SECRETKEYBYTES);
	    for (var i = 0; i < 32; i++) {
	      sk[i] = seed[i];
	    }crypto_sign_keypair(pk, sk, true);
	    return { publicKey: pk, secretKey: sk };
	  };
	
	  nacl.sign.publicKeyLength = crypto_sign_PUBLICKEYBYTES;
	  nacl.sign.secretKeyLength = crypto_sign_SECRETKEYBYTES;
	  nacl.sign.seedLength = crypto_sign_SEEDBYTES;
	  nacl.sign.signatureLength = crypto_sign_BYTES;
	
	  nacl.hash = function (msg) {
	    checkArrayTypes(msg);
	    var h = new Uint8Array(crypto_hash_BYTES);
	    crypto_hash(h, msg, msg.length);
	    return h;
	  };
	
	  nacl.hash.hashLength = crypto_hash_BYTES;
	
	  nacl.verify = function (x, y) {
	    checkArrayTypes(x, y);
	    // Zero length arguments are considered not equal.
	    if (x.length === 0 || y.length === 0) return false;
	    if (x.length !== y.length) return false;
	    return vn(x, 0, y, 0, x.length) === 0 ? true : false;
	  };
	
	  nacl.setPRNG = function (fn) {
	    randombytes = fn;
	  };
	
	  (function () {
	    // Initialize PRNG if environment provides CSPRNG.
	    // If not, methods calling randombytes will throw.
	    var crypto = typeof self !== 'undefined' ? self.crypto || self.msCrypto : null;
	    if (crypto && crypto.getRandomValues) {
	      // Browsers.
	      var QUOTA = 65536;
	      nacl.setPRNG(function (x, n) {
	        var i,
	            v = new Uint8Array(n);
	        for (i = 0; i < n; i += QUOTA) {
	          crypto.getRandomValues(v.subarray(i, i + Math.min(n - i, QUOTA)));
	        }
	        for (i = 0; i < n; i++) {
	          x[i] = v[i];
	        }cleanup(v);
	      });
	    } else if (true) {
	      // Node.js.
	      crypto = __webpack_require__(502);
	      if (crypto && crypto.randomBytes) {
	        nacl.setPRNG(function (x, n) {
	          var i,
	              v = crypto.randomBytes(n);
	          for (i = 0; i < n; i++) {
	            x[i] = v[i];
	          }cleanup(v);
	        });
	      }
	    }
	  })();
	})(typeof module !== 'undefined' && module.exports ? module.exports : self.nacl = self.nacl || {});

/***/ }),
/* 502 */
/***/ (function(module, exports) {

	/* (ignored) */

/***/ }),
/* 503 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {'use strict';
	
	// Copyright 2015 Joyent, Inc.
	
	module.exports = {
		Verifier: Verifier,
		Signer: Signer
	};
	
	var nacl;
	var stream = __webpack_require__(282);
	var util = __webpack_require__(271);
	var assert = __webpack_require__(482);
	var Signature = __webpack_require__(487);
	
	function Verifier(key, hashAlgo) {
		if (nacl === undefined) nacl = __webpack_require__(501);
	
		if (hashAlgo.toLowerCase() !== 'sha512') throw new Error('ED25519 only supports the use of ' + 'SHA-512 hashes');
	
		this.key = key;
		this.chunks = [];
	
		stream.Writable.call(this, {});
	}
	util.inherits(Verifier, stream.Writable);
	
	Verifier.prototype._write = function (chunk, enc, cb) {
		this.chunks.push(chunk);
		cb();
	};
	
	Verifier.prototype.update = function (chunk) {
		if (typeof chunk === 'string') chunk = new Buffer(chunk, 'binary');
		this.chunks.push(chunk);
	};
	
	Verifier.prototype.verify = function (signature, fmt) {
		var sig;
		if (Signature.isSignature(signature, [2, 0])) {
			if (signature.type !== 'ed25519') return false;
			sig = signature.toBuffer('raw');
		} else if (typeof signature === 'string') {
			sig = new Buffer(signature, 'base64');
		} else if (Signature.isSignature(signature, [1, 0])) {
			throw new Error('signature was created by too old ' + 'a version of sshpk and cannot be verified');
		}
	
		assert.buffer(sig);
		return nacl.sign.detached.verify(new Uint8Array(Buffer.concat(this.chunks)), new Uint8Array(sig), new Uint8Array(this.key.part.R.data));
	};
	
	function Signer(key, hashAlgo) {
		if (nacl === undefined) nacl = __webpack_require__(501);
	
		if (hashAlgo.toLowerCase() !== 'sha512') throw new Error('ED25519 only supports the use of ' + 'SHA-512 hashes');
	
		this.key = key;
		this.chunks = [];
	
		stream.Writable.call(this, {});
	}
	util.inherits(Signer, stream.Writable);
	
	Signer.prototype._write = function (chunk, enc, cb) {
		this.chunks.push(chunk);
		cb();
	};
	
	Signer.prototype.update = function (chunk) {
		if (typeof chunk === 'string') chunk = new Buffer(chunk, 'binary');
		this.chunks.push(chunk);
	};
	
	Signer.prototype.sign = function () {
		var sig = nacl.sign.detached(new Uint8Array(Buffer.concat(this.chunks)), new Uint8Array(this.key.part.r.data));
		var sigBuf = new Buffer(sig);
		var sigObj = Signature.parse(sigBuf, 'ed25519', 'raw');
		sigObj.hashAlgorithm = 'sha512';
		return sigObj;
	};
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(290).Buffer))

/***/ }),
/* 504 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {'use strict';
	
	// Copyright 2015 Joyent, Inc.
	
	module.exports = {
		read: read,
		write: write
	};
	
	var assert = __webpack_require__(482);
	var utils = __webpack_require__(488);
	var Key = __webpack_require__(481);
	var PrivateKey = __webpack_require__(489);
	
	var pem = __webpack_require__(505);
	var ssh = __webpack_require__(518);
	var rfc4253 = __webpack_require__(515);
	
	function read(buf, options) {
		if (typeof buf === 'string') {
			if (buf.trim().match(/^[-]+[ ]*BEGIN/)) return pem.read(buf, options);
			if (buf.match(/^\s*ssh-[a-z]/)) return ssh.read(buf, options);
			if (buf.match(/^\s*ecdsa-/)) return ssh.read(buf, options);
			buf = new Buffer(buf, 'binary');
		} else {
			assert.buffer(buf);
			if (findPEMHeader(buf)) return pem.read(buf, options);
			if (findSSHHeader(buf)) return ssh.read(buf, options);
		}
		if (buf.readUInt32BE(0) < buf.length) return rfc4253.read(buf, options);
		throw new Error('Failed to auto-detect format of key');
	}
	
	function findSSHHeader(buf) {
		var offset = 0;
		while (offset < buf.length && (buf[offset] === 32 || buf[offset] === 10 || buf[offset] === 9)) {
			++offset;
		}if (offset + 4 <= buf.length && buf.slice(offset, offset + 4).toString('ascii') === 'ssh-') return true;
		if (offset + 6 <= buf.length && buf.slice(offset, offset + 6).toString('ascii') === 'ecdsa-') return true;
		return false;
	}
	
	function findPEMHeader(buf) {
		var offset = 0;
		while (offset < buf.length && (buf[offset] === 32 || buf[offset] === 10)) {
			++offset;
		}if (buf[offset] !== 45) return false;
		while (offset < buf.length && buf[offset] === 45) {
			++offset;
		}while (offset < buf.length && buf[offset] === 32) {
			++offset;
		}if (offset + 5 > buf.length || buf.slice(offset, offset + 5).toString('ascii') !== 'BEGIN') return false;
		return true;
	}
	
	function write(key, options) {
		throw new Error('"auto" format cannot be used for writing');
	}
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(290).Buffer))

/***/ }),
/* 505 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {'use strict';
	
	// Copyright 2015 Joyent, Inc.
	
	module.exports = {
		read: read,
		write: write
	};
	
	var assert = __webpack_require__(482);
	var asn1 = __webpack_require__(506);
	var crypto = __webpack_require__(392);
	var algs = __webpack_require__(483);
	var utils = __webpack_require__(488);
	var Key = __webpack_require__(481);
	var PrivateKey = __webpack_require__(489);
	
	var pkcs1 = __webpack_require__(512);
	var pkcs8 = __webpack_require__(513);
	var sshpriv = __webpack_require__(514);
	var rfc4253 = __webpack_require__(515);
	
	var errors = __webpack_require__(485);
	
	/*
	 * For reading we support both PKCS#1 and PKCS#8. If we find a private key,
	 * we just take the public component of it and use that.
	 */
	function read(buf, options, forceType) {
		var input = buf;
		if (typeof buf !== 'string') {
			assert.buffer(buf, 'buf');
			buf = buf.toString('ascii');
		}
	
		var lines = buf.trim().split('\n');
	
		var m = lines[0].match( /*JSSTYLED*/
		/[-]+[ ]*BEGIN ([A-Z0-9]+ )?(PUBLIC|PRIVATE) KEY[ ]*[-]+/);
		assert.ok(m, 'invalid PEM header');
	
		var m2 = lines[lines.length - 1].match( /*JSSTYLED*/
		/[-]+[ ]*END ([A-Z0-9]+ )?(PUBLIC|PRIVATE) KEY[ ]*[-]+/);
		assert.ok(m2, 'invalid PEM footer');
	
		/* Begin and end banners must match key type */
		assert.equal(m[2], m2[2]);
		var type = m[2].toLowerCase();
	
		var alg;
		if (m[1]) {
			/* They also must match algorithms, if given */
			assert.equal(m[1], m2[1], 'PEM header and footer mismatch');
			alg = m[1].trim();
		}
	
		var headers = {};
		while (true) {
			lines = lines.slice(1);
			m = lines[0].match( /*JSSTYLED*/
			/^([A-Za-z0-9-]+): (.+)$/);
			if (!m) break;
			headers[m[1].toLowerCase()] = m[2];
		}
	
		var cipher, key, iv;
		if (headers['proc-type']) {
			var parts = headers['proc-type'].split(',');
			if (parts[0] === '4' && parts[1] === 'ENCRYPTED') {
				if (typeof options.passphrase === 'string') {
					options.passphrase = new Buffer(options.passphrase, 'utf-8');
				}
				if (!Buffer.isBuffer(options.passphrase)) {
					throw new errors.KeyEncryptedError(options.filename, 'PEM');
				} else {
					parts = headers['dek-info'].split(',');
					assert.ok(parts.length === 2);
					cipher = parts[0].toLowerCase();
					iv = new Buffer(parts[1], 'hex');
					key = utils.opensslKeyDeriv(cipher, iv, options.passphrase, 1).key;
				}
			}
		}
	
		/* Chop off the first and last lines */
		lines = lines.slice(0, -1).join('');
		buf = new Buffer(lines, 'base64');
	
		if (cipher && key && iv) {
			var cipherStream = crypto.createDecipheriv(cipher, key, iv);
			var chunk,
			    chunks = [];
			cipherStream.once('error', function (e) {
				if (e.toString().indexOf('bad decrypt') !== -1) {
					throw new Error('Incorrect passphrase ' + 'supplied, could not decrypt key');
				}
				throw e;
			});
			cipherStream.write(buf);
			cipherStream.end();
			while ((chunk = cipherStream.read()) !== null) {
				chunks.push(chunk);
			}buf = Buffer.concat(chunks);
		}
	
		/* The new OpenSSH internal format abuses PEM headers */
		if (alg && alg.toLowerCase() === 'openssh') return sshpriv.readSSHPrivate(type, buf, options);
		if (alg && alg.toLowerCase() === 'ssh2') return rfc4253.readType(type, buf, options);
	
		var der = new asn1.BerReader(buf);
		der.originalInput = input;
	
		/*
	  * All of the PEM file types start with a sequence tag, so chop it
	  * off here
	  */
		der.readSequence();
	
		/* PKCS#1 type keys name an algorithm in the banner explicitly */
		if (alg) {
			if (forceType) assert.strictEqual(forceType, 'pkcs1');
			return pkcs1.readPkcs1(alg, type, der);
		} else {
			if (forceType) assert.strictEqual(forceType, 'pkcs8');
			return pkcs8.readPkcs8(alg, type, der);
		}
	}
	
	function write(key, options, type) {
		assert.object(key);
	
		var alg = { 'ecdsa': 'EC', 'rsa': 'RSA', 'dsa': 'DSA' }[key.type];
		var header;
	
		var der = new asn1.BerWriter();
	
		if (PrivateKey.isPrivateKey(key)) {
			if (type && type === 'pkcs8') {
				header = 'PRIVATE KEY';
				pkcs8.writePkcs8(der, key);
			} else {
				if (type) assert.strictEqual(type, 'pkcs1');
				header = alg + ' PRIVATE KEY';
				pkcs1.writePkcs1(der, key);
			}
		} else if (Key.isKey(key)) {
			if (type && type === 'pkcs1') {
				header = alg + ' PUBLIC KEY';
				pkcs1.writePkcs1(der, key);
			} else {
				if (type) assert.strictEqual(type, 'pkcs8');
				header = 'PUBLIC KEY';
				pkcs8.writePkcs8(der, key);
			}
		} else {
			throw new Error('key is not a Key or PrivateKey');
		}
	
		var tmp = der.buffer.toString('base64');
		var len = tmp.length + tmp.length / 64 + 18 + 16 + header.length * 2 + 10;
		var buf = new Buffer(len);
		var o = 0;
		o += buf.write('-----BEGIN ' + header + '-----\n', o);
		for (var i = 0; i < tmp.length;) {
			var limit = i + 64;
			if (limit > tmp.length) limit = tmp.length;
			o += buf.write(tmp.slice(i, limit), o);
			buf[o++] = 10;
			i = limit;
		}
		o += buf.write('-----END ' + header + '-----\n', o);
	
		return buf.slice(0, o);
	}
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(290).Buffer))

/***/ }),
/* 506 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	// Copyright 2011 Mark Cavage <mcavage@gmail.com> All rights reserved.
	
	// If you have no idea what ASN.1 or BER is, see this:
	// ftp://ftp.rsa.com/pub/pkcs/ascii/layman.asc
	
	var Ber = __webpack_require__(507);
	
	///--- Exported API
	
	module.exports = {
	
	  Ber: Ber,
	
	  BerReader: Ber.Reader,
	
	  BerWriter: Ber.Writer
	
	};

/***/ }),
/* 507 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	// Copyright 2011 Mark Cavage <mcavage@gmail.com> All rights reserved.
	
	var errors = __webpack_require__(508);
	var types = __webpack_require__(509);
	
	var Reader = __webpack_require__(510);
	var Writer = __webpack_require__(511);
	
	///--- Exports
	
	module.exports = {
	
	  Reader: Reader,
	
	  Writer: Writer
	
	};
	
	for (var t in types) {
	  if (types.hasOwnProperty(t)) module.exports[t] = types[t];
	}
	for (var e in errors) {
	  if (errors.hasOwnProperty(e)) module.exports[e] = errors[e];
	}

/***/ }),
/* 508 */
/***/ (function(module, exports) {

	'use strict';
	
	// Copyright 2011 Mark Cavage <mcavage@gmail.com> All rights reserved.
	
	
	module.exports = {
	
	  newInvalidAsn1Error: function newInvalidAsn1Error(msg) {
	    var e = new Error();
	    e.name = 'InvalidAsn1Error';
	    e.message = msg || '';
	    return e;
	  }
	
	};

/***/ }),
/* 509 */
/***/ (function(module, exports) {

	"use strict";
	
	// Copyright 2011 Mark Cavage <mcavage@gmail.com> All rights reserved.
	
	
	module.exports = {
	  EOC: 0,
	  Boolean: 1,
	  Integer: 2,
	  BitString: 3,
	  OctetString: 4,
	  Null: 5,
	  OID: 6,
	  ObjectDescriptor: 7,
	  External: 8,
	  Real: 9, // float
	  Enumeration: 10,
	  PDV: 11,
	  Utf8String: 12,
	  RelativeOID: 13,
	  Sequence: 16,
	  Set: 17,
	  NumericString: 18,
	  PrintableString: 19,
	  T61String: 20,
	  VideotexString: 21,
	  IA5String: 22,
	  UTCTime: 23,
	  GeneralizedTime: 24,
	  GraphicString: 25,
	  VisibleString: 26,
	  GeneralString: 28,
	  UniversalString: 29,
	  CharacterString: 30,
	  BMPString: 31,
	  Constructor: 32,
	  Context: 128
	};

/***/ }),
/* 510 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {'use strict';
	
	// Copyright 2011 Mark Cavage <mcavage@gmail.com> All rights reserved.
	
	var assert = __webpack_require__(336);
	
	var ASN1 = __webpack_require__(509);
	var errors = __webpack_require__(508);
	
	///--- Globals
	
	var newInvalidAsn1Error = errors.newInvalidAsn1Error;
	
	///--- API
	
	function Reader(data) {
	  if (!data || !Buffer.isBuffer(data)) throw new TypeError('data must be a node Buffer');
	
	  this._buf = data;
	  this._size = data.length;
	
	  // These hold the "current" state
	  this._len = 0;
	  this._offset = 0;
	}
	
	Object.defineProperty(Reader.prototype, 'length', {
	  enumerable: true,
	  get: function get() {
	    return this._len;
	  }
	});
	
	Object.defineProperty(Reader.prototype, 'offset', {
	  enumerable: true,
	  get: function get() {
	    return this._offset;
	  }
	});
	
	Object.defineProperty(Reader.prototype, 'remain', {
	  get: function get() {
	    return this._size - this._offset;
	  }
	});
	
	Object.defineProperty(Reader.prototype, 'buffer', {
	  get: function get() {
	    return this._buf.slice(this._offset);
	  }
	});
	
	/**
	 * Reads a single byte and advances offset; you can pass in `true` to make this
	 * a "peek" operation (i.e., get the byte, but don't advance the offset).
	 *
	 * @param {Boolean} peek true means don't move offset.
	 * @return {Number} the next byte, null if not enough data.
	 */
	Reader.prototype.readByte = function (peek) {
	  if (this._size - this._offset < 1) return null;
	
	  var b = this._buf[this._offset] & 0xff;
	
	  if (!peek) this._offset += 1;
	
	  return b;
	};
	
	Reader.prototype.peek = function () {
	  return this.readByte(true);
	};
	
	/**
	 * Reads a (potentially) variable length off the BER buffer.  This call is
	 * not really meant to be called directly, as callers have to manipulate
	 * the internal buffer afterwards.
	 *
	 * As a result of this call, you can call `Reader.length`, until the
	 * next thing called that does a readLength.
	 *
	 * @return {Number} the amount of offset to advance the buffer.
	 * @throws {InvalidAsn1Error} on bad ASN.1
	 */
	Reader.prototype.readLength = function (offset) {
	  if (offset === undefined) offset = this._offset;
	
	  if (offset >= this._size) return null;
	
	  var lenB = this._buf[offset++] & 0xff;
	  if (lenB === null) return null;
	
	  if ((lenB & 0x80) == 0x80) {
	    lenB &= 0x7f;
	
	    if (lenB == 0) throw newInvalidAsn1Error('Indefinite length not supported');
	
	    if (lenB > 4) throw newInvalidAsn1Error('encoding too long');
	
	    if (this._size - offset < lenB) return null;
	
	    this._len = 0;
	    for (var i = 0; i < lenB; i++) {
	      this._len = (this._len << 8) + (this._buf[offset++] & 0xff);
	    }
	  } else {
	    // Wasn't a variable length
	    this._len = lenB;
	  }
	
	  return offset;
	};
	
	/**
	 * Parses the next sequence in this BER buffer.
	 *
	 * To get the length of the sequence, call `Reader.length`.
	 *
	 * @return {Number} the sequence's tag.
	 */
	Reader.prototype.readSequence = function (tag) {
	  var seq = this.peek();
	  if (seq === null) return null;
	  if (tag !== undefined && tag !== seq) throw newInvalidAsn1Error('Expected 0x' + tag.toString(16) + ': got 0x' + seq.toString(16));
	
	  var o = this.readLength(this._offset + 1); // stored in `length`
	  if (o === null) return null;
	
	  this._offset = o;
	  return seq;
	};
	
	Reader.prototype.readInt = function () {
	  return this._readTag(ASN1.Integer);
	};
	
	Reader.prototype.readBoolean = function () {
	  return this._readTag(ASN1.Boolean) === 0 ? false : true;
	};
	
	Reader.prototype.readEnumeration = function () {
	  return this._readTag(ASN1.Enumeration);
	};
	
	Reader.prototype.readString = function (tag, retbuf) {
	  if (!tag) tag = ASN1.OctetString;
	
	  var b = this.peek();
	  if (b === null) return null;
	
	  if (b !== tag) throw newInvalidAsn1Error('Expected 0x' + tag.toString(16) + ': got 0x' + b.toString(16));
	
	  var o = this.readLength(this._offset + 1); // stored in `length`
	
	  if (o === null) return null;
	
	  if (this.length > this._size - o) return null;
	
	  this._offset = o;
	
	  if (this.length === 0) return retbuf ? new Buffer(0) : '';
	
	  var str = this._buf.slice(this._offset, this._offset + this.length);
	  this._offset += this.length;
	
	  return retbuf ? str : str.toString('utf8');
	};
	
	Reader.prototype.readOID = function (tag) {
	  if (!tag) tag = ASN1.OID;
	
	  var b = this.readString(tag, true);
	  if (b === null) return null;
	
	  var values = [];
	  var value = 0;
	
	  for (var i = 0; i < b.length; i++) {
	    var byte = b[i] & 0xff;
	
	    value <<= 7;
	    value += byte & 0x7f;
	    if ((byte & 0x80) == 0) {
	      values.push(value);
	      value = 0;
	    }
	  }
	
	  value = values.shift();
	  values.unshift(value % 40);
	  values.unshift(value / 40 >> 0);
	
	  return values.join('.');
	};
	
	Reader.prototype._readTag = function (tag) {
	  assert.ok(tag !== undefined);
	
	  var b = this.peek();
	
	  if (b === null) return null;
	
	  if (b !== tag) throw newInvalidAsn1Error('Expected 0x' + tag.toString(16) + ': got 0x' + b.toString(16));
	
	  var o = this.readLength(this._offset + 1); // stored in `length`
	  if (o === null) return null;
	
	  if (this.length > 4) throw newInvalidAsn1Error('Integer too long: ' + this.length);
	
	  if (this.length > this._size - o) return null;
	  this._offset = o;
	
	  var fb = this._buf[this._offset];
	  var value = 0;
	
	  for (var i = 0; i < this.length; i++) {
	    value <<= 8;
	    value |= this._buf[this._offset++] & 0xff;
	  }
	
	  if ((fb & 0x80) == 0x80 && i !== 4) value -= 1 << i * 8;
	
	  return value >> 0;
	};
	
	///--- Exported API
	
	module.exports = Reader;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(290).Buffer))

/***/ }),
/* 511 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {'use strict';
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
	
	// Copyright 2011 Mark Cavage <mcavage@gmail.com> All rights reserved.
	
	var assert = __webpack_require__(336);
	var ASN1 = __webpack_require__(509);
	var errors = __webpack_require__(508);
	
	///--- Globals
	
	var newInvalidAsn1Error = errors.newInvalidAsn1Error;
	
	var DEFAULT_OPTS = {
	  size: 1024,
	  growthFactor: 8
	};
	
	///--- Helpers
	
	function merge(from, to) {
	  assert.ok(from);
	  assert.equal(typeof from === 'undefined' ? 'undefined' : _typeof(from), 'object');
	  assert.ok(to);
	  assert.equal(typeof to === 'undefined' ? 'undefined' : _typeof(to), 'object');
	
	  var keys = Object.getOwnPropertyNames(from);
	  keys.forEach(function (key) {
	    if (to[key]) return;
	
	    var value = Object.getOwnPropertyDescriptor(from, key);
	    Object.defineProperty(to, key, value);
	  });
	
	  return to;
	}
	
	///--- API
	
	function Writer(options) {
	  options = merge(DEFAULT_OPTS, options || {});
	
	  this._buf = new Buffer(options.size || 1024);
	  this._size = this._buf.length;
	  this._offset = 0;
	  this._options = options;
	
	  // A list of offsets in the buffer where we need to insert
	  // sequence tag/len pairs.
	  this._seq = [];
	}
	
	Object.defineProperty(Writer.prototype, 'buffer', {
	  get: function get() {
	    if (this._seq.length) throw new InvalidAsn1Error(this._seq.length + ' unended sequence(s)');
	
	    return this._buf.slice(0, this._offset);
	  }
	});
	
	Writer.prototype.writeByte = function (b) {
	  if (typeof b !== 'number') throw new TypeError('argument must be a Number');
	
	  this._ensure(1);
	  this._buf[this._offset++] = b;
	};
	
	Writer.prototype.writeInt = function (i, tag) {
	  if (typeof i !== 'number') throw new TypeError('argument must be a Number');
	  if (typeof tag !== 'number') tag = ASN1.Integer;
	
	  var sz = 4;
	
	  while (((i & 0xff800000) === 0 || (i & 0xff800000) === 0xff800000 >> 0) && sz > 1) {
	    sz--;
	    i <<= 8;
	  }
	
	  if (sz > 4) throw new InvalidAsn1Error('BER ints cannot be > 0xffffffff');
	
	  this._ensure(2 + sz);
	  this._buf[this._offset++] = tag;
	  this._buf[this._offset++] = sz;
	
	  while (sz-- > 0) {
	    this._buf[this._offset++] = (i & 0xff000000) >>> 24;
	    i <<= 8;
	  }
	};
	
	Writer.prototype.writeNull = function () {
	  this.writeByte(ASN1.Null);
	  this.writeByte(0x00);
	};
	
	Writer.prototype.writeEnumeration = function (i, tag) {
	  if (typeof i !== 'number') throw new TypeError('argument must be a Number');
	  if (typeof tag !== 'number') tag = ASN1.Enumeration;
	
	  return this.writeInt(i, tag);
	};
	
	Writer.prototype.writeBoolean = function (b, tag) {
	  if (typeof b !== 'boolean') throw new TypeError('argument must be a Boolean');
	  if (typeof tag !== 'number') tag = ASN1.Boolean;
	
	  this._ensure(3);
	  this._buf[this._offset++] = tag;
	  this._buf[this._offset++] = 0x01;
	  this._buf[this._offset++] = b ? 0xff : 0x00;
	};
	
	Writer.prototype.writeString = function (s, tag) {
	  if (typeof s !== 'string') throw new TypeError('argument must be a string (was: ' + (typeof s === 'undefined' ? 'undefined' : _typeof(s)) + ')');
	  if (typeof tag !== 'number') tag = ASN1.OctetString;
	
	  var len = Buffer.byteLength(s);
	  this.writeByte(tag);
	  this.writeLength(len);
	  if (len) {
	    this._ensure(len);
	    this._buf.write(s, this._offset);
	    this._offset += len;
	  }
	};
	
	Writer.prototype.writeBuffer = function (buf, tag) {
	  if (typeof tag !== 'number') throw new TypeError('tag must be a number');
	  if (!Buffer.isBuffer(buf)) throw new TypeError('argument must be a buffer');
	
	  this.writeByte(tag);
	  this.writeLength(buf.length);
	  this._ensure(buf.length);
	  buf.copy(this._buf, this._offset, 0, buf.length);
	  this._offset += buf.length;
	};
	
	Writer.prototype.writeStringArray = function (strings) {
	  if (!strings instanceof Array) throw new TypeError('argument must be an Array[String]');
	
	  var self = this;
	  strings.forEach(function (s) {
	    self.writeString(s);
	  });
	};
	
	// This is really to solve DER cases, but whatever for now
	Writer.prototype.writeOID = function (s, tag) {
	  if (typeof s !== 'string') throw new TypeError('argument must be a string');
	  if (typeof tag !== 'number') tag = ASN1.OID;
	
	  if (!/^([0-9]+\.){3,}[0-9]+$/.test(s)) throw new Error('argument is not a valid OID string');
	
	  function encodeOctet(bytes, octet) {
	    if (octet < 128) {
	      bytes.push(octet);
	    } else if (octet < 16384) {
	      bytes.push(octet >>> 7 | 0x80);
	      bytes.push(octet & 0x7F);
	    } else if (octet < 2097152) {
	      bytes.push(octet >>> 14 | 0x80);
	      bytes.push((octet >>> 7 | 0x80) & 0xFF);
	      bytes.push(octet & 0x7F);
	    } else if (octet < 268435456) {
	      bytes.push(octet >>> 21 | 0x80);
	      bytes.push((octet >>> 14 | 0x80) & 0xFF);
	      bytes.push((octet >>> 7 | 0x80) & 0xFF);
	      bytes.push(octet & 0x7F);
	    } else {
	      bytes.push((octet >>> 28 | 0x80) & 0xFF);
	      bytes.push((octet >>> 21 | 0x80) & 0xFF);
	      bytes.push((octet >>> 14 | 0x80) & 0xFF);
	      bytes.push((octet >>> 7 | 0x80) & 0xFF);
	      bytes.push(octet & 0x7F);
	    }
	  }
	
	  var tmp = s.split('.');
	  var bytes = [];
	  bytes.push(parseInt(tmp[0], 10) * 40 + parseInt(tmp[1], 10));
	  tmp.slice(2).forEach(function (b) {
	    encodeOctet(bytes, parseInt(b, 10));
	  });
	
	  var self = this;
	  this._ensure(2 + bytes.length);
	  this.writeByte(tag);
	  this.writeLength(bytes.length);
	  bytes.forEach(function (b) {
	    self.writeByte(b);
	  });
	};
	
	Writer.prototype.writeLength = function (len) {
	  if (typeof len !== 'number') throw new TypeError('argument must be a Number');
	
	  this._ensure(4);
	
	  if (len <= 0x7f) {
	    this._buf[this._offset++] = len;
	  } else if (len <= 0xff) {
	    this._buf[this._offset++] = 0x81;
	    this._buf[this._offset++] = len;
	  } else if (len <= 0xffff) {
	    this._buf[this._offset++] = 0x82;
	    this._buf[this._offset++] = len >> 8;
	    this._buf[this._offset++] = len;
	  } else if (len <= 0xffffff) {
	    this._buf[this._offset++] = 0x83;
	    this._buf[this._offset++] = len >> 16;
	    this._buf[this._offset++] = len >> 8;
	    this._buf[this._offset++] = len;
	  } else {
	    throw new InvalidAsn1ERror('Length too long (> 4 bytes)');
	  }
	};
	
	Writer.prototype.startSequence = function (tag) {
	  if (typeof tag !== 'number') tag = ASN1.Sequence | ASN1.Constructor;
	
	  this.writeByte(tag);
	  this._seq.push(this._offset);
	  this._ensure(3);
	  this._offset += 3;
	};
	
	Writer.prototype.endSequence = function () {
	  var seq = this._seq.pop();
	  var start = seq + 3;
	  var len = this._offset - start;
	
	  if (len <= 0x7f) {
	    this._shift(start, len, -2);
	    this._buf[seq] = len;
	  } else if (len <= 0xff) {
	    this._shift(start, len, -1);
	    this._buf[seq] = 0x81;
	    this._buf[seq + 1] = len;
	  } else if (len <= 0xffff) {
	    this._buf[seq] = 0x82;
	    this._buf[seq + 1] = len >> 8;
	    this._buf[seq + 2] = len;
	  } else if (len <= 0xffffff) {
	    this._shift(start, len, 1);
	    this._buf[seq] = 0x83;
	    this._buf[seq + 1] = len >> 16;
	    this._buf[seq + 2] = len >> 8;
	    this._buf[seq + 3] = len;
	  } else {
	    throw new InvalidAsn1Error('Sequence too long');
	  }
	};
	
	Writer.prototype._shift = function (start, len, shift) {
	  assert.ok(start !== undefined);
	  assert.ok(len !== undefined);
	  assert.ok(shift);
	
	  this._buf.copy(this._buf, start + shift, start, start + len);
	  this._offset += shift;
	};
	
	Writer.prototype._ensure = function (len) {
	  assert.ok(len);
	
	  if (this._size - this._offset < len) {
	    var sz = this._size * this._options.growthFactor;
	    if (sz - this._offset < len) sz += len;
	
	    var buf = new Buffer(sz);
	
	    this._buf.copy(buf, 0, 0, this._offset);
	    this._buf = buf;
	    this._size = sz;
	  }
	};
	
	///--- Exported API
	
	module.exports = Writer;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(290).Buffer))

/***/ }),
/* 512 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {'use strict';
	
	// Copyright 2015 Joyent, Inc.
	
	module.exports = {
		read: read,
		readPkcs1: readPkcs1,
		write: write,
		writePkcs1: writePkcs1
	};
	
	var assert = __webpack_require__(482);
	var asn1 = __webpack_require__(506);
	var algs = __webpack_require__(483);
	var utils = __webpack_require__(488);
	
	var Key = __webpack_require__(481);
	var PrivateKey = __webpack_require__(489);
	var pem = __webpack_require__(505);
	
	var pkcs8 = __webpack_require__(513);
	var readECDSACurve = pkcs8.readECDSACurve;
	
	function read(buf, options) {
		return pem.read(buf, options, 'pkcs1');
	}
	
	function write(key, options) {
		return pem.write(key, options, 'pkcs1');
	}
	
	/* Helper to read in a single mpint */
	function readMPInt(der, nm) {
		assert.strictEqual(der.peek(), asn1.Ber.Integer, nm + ' is not an Integer');
		return utils.mpNormalize(der.readString(asn1.Ber.Integer, true));
	}
	
	function readPkcs1(alg, type, der) {
		switch (alg) {
			case 'RSA':
				if (type === 'public') return readPkcs1RSAPublic(der);else if (type === 'private') return readPkcs1RSAPrivate(der);
				throw new Error('Unknown key type: ' + type);
			case 'DSA':
				if (type === 'public') return readPkcs1DSAPublic(der);else if (type === 'private') return readPkcs1DSAPrivate(der);
				throw new Error('Unknown key type: ' + type);
			case 'EC':
			case 'ECDSA':
				if (type === 'private') return readPkcs1ECDSAPrivate(der);else if (type === 'public') return readPkcs1ECDSAPublic(der);
				throw new Error('Unknown key type: ' + type);
			default:
				throw new Error('Unknown key algo: ' + alg);
		}
	}
	
	function readPkcs1RSAPublic(der) {
		// modulus and exponent
		var n = readMPInt(der, 'modulus');
		var e = readMPInt(der, 'exponent');
	
		// now, make the key
		var key = {
			type: 'rsa',
			parts: [{ name: 'e', data: e }, { name: 'n', data: n }]
		};
	
		return new Key(key);
	}
	
	function readPkcs1RSAPrivate(der) {
		var version = readMPInt(der, 'version');
		assert.strictEqual(version[0], 0);
	
		// modulus then public exponent
		var n = readMPInt(der, 'modulus');
		var e = readMPInt(der, 'public exponent');
		var d = readMPInt(der, 'private exponent');
		var p = readMPInt(der, 'prime1');
		var q = readMPInt(der, 'prime2');
		var dmodp = readMPInt(der, 'exponent1');
		var dmodq = readMPInt(der, 'exponent2');
		var iqmp = readMPInt(der, 'iqmp');
	
		// now, make the key
		var key = {
			type: 'rsa',
			parts: [{ name: 'n', data: n }, { name: 'e', data: e }, { name: 'd', data: d }, { name: 'iqmp', data: iqmp }, { name: 'p', data: p }, { name: 'q', data: q }, { name: 'dmodp', data: dmodp }, { name: 'dmodq', data: dmodq }]
		};
	
		return new PrivateKey(key);
	}
	
	function readPkcs1DSAPrivate(der) {
		var version = readMPInt(der, 'version');
		assert.strictEqual(version.readUInt8(0), 0);
	
		var p = readMPInt(der, 'p');
		var q = readMPInt(der, 'q');
		var g = readMPInt(der, 'g');
		var y = readMPInt(der, 'y');
		var x = readMPInt(der, 'x');
	
		// now, make the key
		var key = {
			type: 'dsa',
			parts: [{ name: 'p', data: p }, { name: 'q', data: q }, { name: 'g', data: g }, { name: 'y', data: y }, { name: 'x', data: x }]
		};
	
		return new PrivateKey(key);
	}
	
	function readPkcs1DSAPublic(der) {
		var y = readMPInt(der, 'y');
		var p = readMPInt(der, 'p');
		var q = readMPInt(der, 'q');
		var g = readMPInt(der, 'g');
	
		var key = {
			type: 'dsa',
			parts: [{ name: 'y', data: y }, { name: 'p', data: p }, { name: 'q', data: q }, { name: 'g', data: g }]
		};
	
		return new Key(key);
	}
	
	function readPkcs1ECDSAPublic(der) {
		der.readSequence();
	
		var oid = der.readOID();
		assert.strictEqual(oid, '1.2.840.10045.2.1', 'must be ecPublicKey');
	
		var curveOid = der.readOID();
	
		var curve;
		var curves = Object.keys(algs.curves);
		for (var j = 0; j < curves.length; ++j) {
			var c = curves[j];
			var cd = algs.curves[c];
			if (cd.pkcs8oid === curveOid) {
				curve = c;
				break;
			}
		}
		assert.string(curve, 'a known ECDSA named curve');
	
		var Q = der.readString(asn1.Ber.BitString, true);
		Q = utils.ecNormalize(Q);
	
		var key = {
			type: 'ecdsa',
			parts: [{ name: 'curve', data: new Buffer(curve) }, { name: 'Q', data: Q }]
		};
	
		return new Key(key);
	}
	
	function readPkcs1ECDSAPrivate(der) {
		var version = readMPInt(der, 'version');
		assert.strictEqual(version.readUInt8(0), 1);
	
		// private key
		var d = der.readString(asn1.Ber.OctetString, true);
	
		der.readSequence(0xa0);
		var curve = readECDSACurve(der);
		assert.string(curve, 'a known elliptic curve');
	
		der.readSequence(0xa1);
		var Q = der.readString(asn1.Ber.BitString, true);
		Q = utils.ecNormalize(Q);
	
		var key = {
			type: 'ecdsa',
			parts: [{ name: 'curve', data: new Buffer(curve) }, { name: 'Q', data: Q }, { name: 'd', data: d }]
		};
	
		return new PrivateKey(key);
	}
	
	function writePkcs1(der, key) {
		der.startSequence();
	
		switch (key.type) {
			case 'rsa':
				if (PrivateKey.isPrivateKey(key)) writePkcs1RSAPrivate(der, key);else writePkcs1RSAPublic(der, key);
				break;
			case 'dsa':
				if (PrivateKey.isPrivateKey(key)) writePkcs1DSAPrivate(der, key);else writePkcs1DSAPublic(der, key);
				break;
			case 'ecdsa':
				if (PrivateKey.isPrivateKey(key)) writePkcs1ECDSAPrivate(der, key);else writePkcs1ECDSAPublic(der, key);
				break;
			default:
				throw new Error('Unknown key algo: ' + key.type);
		}
	
		der.endSequence();
	}
	
	function writePkcs1RSAPublic(der, key) {
		der.writeBuffer(key.part.n.data, asn1.Ber.Integer);
		der.writeBuffer(key.part.e.data, asn1.Ber.Integer);
	}
	
	function writePkcs1RSAPrivate(der, key) {
		var ver = new Buffer(1);
		ver[0] = 0;
		der.writeBuffer(ver, asn1.Ber.Integer);
	
		der.writeBuffer(key.part.n.data, asn1.Ber.Integer);
		der.writeBuffer(key.part.e.data, asn1.Ber.Integer);
		der.writeBuffer(key.part.d.data, asn1.Ber.Integer);
		der.writeBuffer(key.part.p.data, asn1.Ber.Integer);
		der.writeBuffer(key.part.q.data, asn1.Ber.Integer);
		if (!key.part.dmodp || !key.part.dmodq) utils.addRSAMissing(key);
		der.writeBuffer(key.part.dmodp.data, asn1.Ber.Integer);
		der.writeBuffer(key.part.dmodq.data, asn1.Ber.Integer);
		der.writeBuffer(key.part.iqmp.data, asn1.Ber.Integer);
	}
	
	function writePkcs1DSAPrivate(der, key) {
		var ver = new Buffer(1);
		ver[0] = 0;
		der.writeBuffer(ver, asn1.Ber.Integer);
	
		der.writeBuffer(key.part.p.data, asn1.Ber.Integer);
		der.writeBuffer(key.part.q.data, asn1.Ber.Integer);
		der.writeBuffer(key.part.g.data, asn1.Ber.Integer);
		der.writeBuffer(key.part.y.data, asn1.Ber.Integer);
		der.writeBuffer(key.part.x.data, asn1.Ber.Integer);
	}
	
	function writePkcs1DSAPublic(der, key) {
		der.writeBuffer(key.part.y.data, asn1.Ber.Integer);
		der.writeBuffer(key.part.p.data, asn1.Ber.Integer);
		der.writeBuffer(key.part.q.data, asn1.Ber.Integer);
		der.writeBuffer(key.part.g.data, asn1.Ber.Integer);
	}
	
	function writePkcs1ECDSAPublic(der, key) {
		der.startSequence();
	
		der.writeOID('1.2.840.10045.2.1'); /* ecPublicKey */
		var curve = key.part.curve.data.toString();
		var curveOid = algs.curves[curve].pkcs8oid;
		assert.string(curveOid, 'a known ECDSA named curve');
		der.writeOID(curveOid);
	
		der.endSequence();
	
		var Q = utils.ecNormalize(key.part.Q.data, true);
		der.writeBuffer(Q, asn1.Ber.BitString);
	}
	
	function writePkcs1ECDSAPrivate(der, key) {
		var ver = new Buffer(1);
		ver[0] = 1;
		der.writeBuffer(ver, asn1.Ber.Integer);
	
		der.writeBuffer(key.part.d.data, asn1.Ber.OctetString);
	
		der.startSequence(0xa0);
		var curve = key.part.curve.data.toString();
		var curveOid = algs.curves[curve].pkcs8oid;
		assert.string(curveOid, 'a known ECDSA named curve');
		der.writeOID(curveOid);
		der.endSequence();
	
		der.startSequence(0xa1);
		var Q = utils.ecNormalize(key.part.Q.data, true);
		der.writeBuffer(Q, asn1.Ber.BitString);
		der.endSequence();
	}
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(290).Buffer))

/***/ }),
/* 513 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {'use strict';
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
	
	// Copyright 2015 Joyent, Inc.
	
	module.exports = {
		read: read,
		readPkcs8: readPkcs8,
		write: write,
		writePkcs8: writePkcs8,
	
		readECDSACurve: readECDSACurve,
		writeECDSACurve: writeECDSACurve
	};
	
	var assert = __webpack_require__(482);
	var asn1 = __webpack_require__(506);
	var algs = __webpack_require__(483);
	var utils = __webpack_require__(488);
	var Key = __webpack_require__(481);
	var PrivateKey = __webpack_require__(489);
	var pem = __webpack_require__(505);
	
	function read(buf, options) {
		return pem.read(buf, options, 'pkcs8');
	}
	
	function write(key, options) {
		return pem.write(key, options, 'pkcs8');
	}
	
	/* Helper to read in a single mpint */
	function readMPInt(der, nm) {
		assert.strictEqual(der.peek(), asn1.Ber.Integer, nm + ' is not an Integer');
		return utils.mpNormalize(der.readString(asn1.Ber.Integer, true));
	}
	
	function readPkcs8(alg, type, der) {
		/* Private keys in pkcs#8 format have a weird extra int */
		if (der.peek() === asn1.Ber.Integer) {
			assert.strictEqual(type, 'private', 'unexpected Integer at start of public key');
			der.readString(asn1.Ber.Integer, true);
		}
	
		der.readSequence();
		var next = der.offset + der.length;
	
		var oid = der.readOID();
		switch (oid) {
			case '1.2.840.113549.1.1.1':
				der._offset = next;
				if (type === 'public') return readPkcs8RSAPublic(der);else return readPkcs8RSAPrivate(der);
			case '1.2.840.10040.4.1':
				if (type === 'public') return readPkcs8DSAPublic(der);else return readPkcs8DSAPrivate(der);
			case '1.2.840.10045.2.1':
				if (type === 'public') return readPkcs8ECDSAPublic(der);else return readPkcs8ECDSAPrivate(der);
			default:
				throw new Error('Unknown key type OID ' + oid);
		}
	}
	
	function readPkcs8RSAPublic(der) {
		// bit string sequence
		der.readSequence(asn1.Ber.BitString);
		der.readByte();
		der.readSequence();
	
		// modulus
		var n = readMPInt(der, 'modulus');
		var e = readMPInt(der, 'exponent');
	
		// now, make the key
		var key = {
			type: 'rsa',
			source: der.originalInput,
			parts: [{ name: 'e', data: e }, { name: 'n', data: n }]
		};
	
		return new Key(key);
	}
	
	function readPkcs8RSAPrivate(der) {
		der.readSequence(asn1.Ber.OctetString);
		der.readSequence();
	
		var ver = readMPInt(der, 'version');
		assert.equal(ver[0], 0x0, 'unknown RSA private key version');
	
		// modulus then public exponent
		var n = readMPInt(der, 'modulus');
		var e = readMPInt(der, 'public exponent');
		var d = readMPInt(der, 'private exponent');
		var p = readMPInt(der, 'prime1');
		var q = readMPInt(der, 'prime2');
		var dmodp = readMPInt(der, 'exponent1');
		var dmodq = readMPInt(der, 'exponent2');
		var iqmp = readMPInt(der, 'iqmp');
	
		// now, make the key
		var key = {
			type: 'rsa',
			parts: [{ name: 'n', data: n }, { name: 'e', data: e }, { name: 'd', data: d }, { name: 'iqmp', data: iqmp }, { name: 'p', data: p }, { name: 'q', data: q }, { name: 'dmodp', data: dmodp }, { name: 'dmodq', data: dmodq }]
		};
	
		return new PrivateKey(key);
	}
	
	function readPkcs8DSAPublic(der) {
		der.readSequence();
	
		var p = readMPInt(der, 'p');
		var q = readMPInt(der, 'q');
		var g = readMPInt(der, 'g');
	
		// bit string sequence
		der.readSequence(asn1.Ber.BitString);
		der.readByte();
	
		var y = readMPInt(der, 'y');
	
		// now, make the key
		var key = {
			type: 'dsa',
			parts: [{ name: 'p', data: p }, { name: 'q', data: q }, { name: 'g', data: g }, { name: 'y', data: y }]
		};
	
		return new Key(key);
	}
	
	function readPkcs8DSAPrivate(der) {
		der.readSequence();
	
		var p = readMPInt(der, 'p');
		var q = readMPInt(der, 'q');
		var g = readMPInt(der, 'g');
	
		der.readSequence(asn1.Ber.OctetString);
		var x = readMPInt(der, 'x');
	
		/* The pkcs#8 format does not include the public key */
		var y = utils.calculateDSAPublic(g, p, x);
	
		var key = {
			type: 'dsa',
			parts: [{ name: 'p', data: p }, { name: 'q', data: q }, { name: 'g', data: g }, { name: 'y', data: y }, { name: 'x', data: x }]
		};
	
		return new PrivateKey(key);
	}
	
	function readECDSACurve(der) {
		var curveName, curveNames;
		var j, c, cd;
	
		if (der.peek() === asn1.Ber.OID) {
			var oid = der.readOID();
	
			curveNames = Object.keys(algs.curves);
			for (j = 0; j < curveNames.length; ++j) {
				c = curveNames[j];
				cd = algs.curves[c];
				if (cd.pkcs8oid === oid) {
					curveName = c;
					break;
				}
			}
		} else {
			// ECParameters sequence
			der.readSequence();
			var version = der.readString(asn1.Ber.Integer, true);
			assert.strictEqual(version[0], 1, 'ECDSA key not version 1');
	
			var curve = {};
	
			// FieldID sequence
			der.readSequence();
			var fieldTypeOid = der.readOID();
			assert.strictEqual(fieldTypeOid, '1.2.840.10045.1.1', 'ECDSA key is not from a prime-field');
			var p = curve.p = utils.mpNormalize(der.readString(asn1.Ber.Integer, true));
			/*
	   * p always starts with a 1 bit, so count the zeros to get its
	   * real size.
	   */
			curve.size = p.length * 8 - utils.countZeros(p);
	
			// Curve sequence
			der.readSequence();
			curve.a = utils.mpNormalize(der.readString(asn1.Ber.OctetString, true));
			curve.b = utils.mpNormalize(der.readString(asn1.Ber.OctetString, true));
			if (der.peek() === asn1.Ber.BitString) curve.s = der.readString(asn1.Ber.BitString, true);
	
			// Combined Gx and Gy
			curve.G = der.readString(asn1.Ber.OctetString, true);
			assert.strictEqual(curve.G[0], 0x4, 'uncompressed G is required');
	
			curve.n = utils.mpNormalize(der.readString(asn1.Ber.Integer, true));
			curve.h = utils.mpNormalize(der.readString(asn1.Ber.Integer, true));
			assert.strictEqual(curve.h[0], 0x1, 'a cofactor=1 curve is ' + 'required');
	
			curveNames = Object.keys(algs.curves);
			var ks = Object.keys(curve);
			for (j = 0; j < curveNames.length; ++j) {
				c = curveNames[j];
				cd = algs.curves[c];
				var equal = true;
				for (var i = 0; i < ks.length; ++i) {
					var k = ks[i];
					if (cd[k] === undefined) continue;
					if (_typeof(cd[k]) === 'object' && cd[k].equals !== undefined) {
						if (!cd[k].equals(curve[k])) {
							equal = false;
							break;
						}
					} else if (Buffer.isBuffer(cd[k])) {
						if (cd[k].toString('binary') !== curve[k].toString('binary')) {
							equal = false;
							break;
						}
					} else {
						if (cd[k] !== curve[k]) {
							equal = false;
							break;
						}
					}
				}
				if (equal) {
					curveName = c;
					break;
				}
			}
		}
		return curveName;
	}
	
	function readPkcs8ECDSAPrivate(der) {
		var curveName = readECDSACurve(der);
		assert.string(curveName, 'a known elliptic curve');
	
		der.readSequence(asn1.Ber.OctetString);
		der.readSequence();
	
		var version = readMPInt(der, 'version');
		assert.equal(version[0], 1, 'unknown version of ECDSA key');
	
		var d = der.readString(asn1.Ber.OctetString, true);
		der.readSequence(0xa1);
	
		var Q = der.readString(asn1.Ber.BitString, true);
		Q = utils.ecNormalize(Q);
	
		var key = {
			type: 'ecdsa',
			parts: [{ name: 'curve', data: new Buffer(curveName) }, { name: 'Q', data: Q }, { name: 'd', data: d }]
		};
	
		return new PrivateKey(key);
	}
	
	function readPkcs8ECDSAPublic(der) {
		var curveName = readECDSACurve(der);
		assert.string(curveName, 'a known elliptic curve');
	
		var Q = der.readString(asn1.Ber.BitString, true);
		Q = utils.ecNormalize(Q);
	
		var key = {
			type: 'ecdsa',
			parts: [{ name: 'curve', data: new Buffer(curveName) }, { name: 'Q', data: Q }]
		};
	
		return new Key(key);
	}
	
	function writePkcs8(der, key) {
		der.startSequence();
	
		if (PrivateKey.isPrivateKey(key)) {
			var sillyInt = new Buffer(1);
			sillyInt[0] = 0x0;
			der.writeBuffer(sillyInt, asn1.Ber.Integer);
		}
	
		der.startSequence();
		switch (key.type) {
			case 'rsa':
				der.writeOID('1.2.840.113549.1.1.1');
				if (PrivateKey.isPrivateKey(key)) writePkcs8RSAPrivate(key, der);else writePkcs8RSAPublic(key, der);
				break;
			case 'dsa':
				der.writeOID('1.2.840.10040.4.1');
				if (PrivateKey.isPrivateKey(key)) writePkcs8DSAPrivate(key, der);else writePkcs8DSAPublic(key, der);
				break;
			case 'ecdsa':
				der.writeOID('1.2.840.10045.2.1');
				if (PrivateKey.isPrivateKey(key)) writePkcs8ECDSAPrivate(key, der);else writePkcs8ECDSAPublic(key, der);
				break;
			default:
				throw new Error('Unsupported key type: ' + key.type);
		}
	
		der.endSequence();
	}
	
	function writePkcs8RSAPrivate(key, der) {
		der.writeNull();
		der.endSequence();
	
		der.startSequence(asn1.Ber.OctetString);
		der.startSequence();
	
		var version = new Buffer(1);
		version[0] = 0;
		der.writeBuffer(version, asn1.Ber.Integer);
	
		der.writeBuffer(key.part.n.data, asn1.Ber.Integer);
		der.writeBuffer(key.part.e.data, asn1.Ber.Integer);
		der.writeBuffer(key.part.d.data, asn1.Ber.Integer);
		der.writeBuffer(key.part.p.data, asn1.Ber.Integer);
		der.writeBuffer(key.part.q.data, asn1.Ber.Integer);
		if (!key.part.dmodp || !key.part.dmodq) utils.addRSAMissing(key);
		der.writeBuffer(key.part.dmodp.data, asn1.Ber.Integer);
		der.writeBuffer(key.part.dmodq.data, asn1.Ber.Integer);
		der.writeBuffer(key.part.iqmp.data, asn1.Ber.Integer);
	
		der.endSequence();
		der.endSequence();
	}
	
	function writePkcs8RSAPublic(key, der) {
		der.writeNull();
		der.endSequence();
	
		der.startSequence(asn1.Ber.BitString);
		der.writeByte(0x00);
	
		der.startSequence();
		der.writeBuffer(key.part.n.data, asn1.Ber.Integer);
		der.writeBuffer(key.part.e.data, asn1.Ber.Integer);
		der.endSequence();
	
		der.endSequence();
	}
	
	function writePkcs8DSAPrivate(key, der) {
		der.startSequence();
		der.writeBuffer(key.part.p.data, asn1.Ber.Integer);
		der.writeBuffer(key.part.q.data, asn1.Ber.Integer);
		der.writeBuffer(key.part.g.data, asn1.Ber.Integer);
		der.endSequence();
	
		der.endSequence();
	
		der.startSequence(asn1.Ber.OctetString);
		der.writeBuffer(key.part.x.data, asn1.Ber.Integer);
		der.endSequence();
	}
	
	function writePkcs8DSAPublic(key, der) {
		der.startSequence();
		der.writeBuffer(key.part.p.data, asn1.Ber.Integer);
		der.writeBuffer(key.part.q.data, asn1.Ber.Integer);
		der.writeBuffer(key.part.g.data, asn1.Ber.Integer);
		der.endSequence();
		der.endSequence();
	
		der.startSequence(asn1.Ber.BitString);
		der.writeByte(0x00);
		der.writeBuffer(key.part.y.data, asn1.Ber.Integer);
		der.endSequence();
	}
	
	function writeECDSACurve(key, der) {
		var curve = algs.curves[key.curve];
		if (curve.pkcs8oid) {
			/* This one has a name in pkcs#8, so just write the oid */
			der.writeOID(curve.pkcs8oid);
		} else {
			// ECParameters sequence
			der.startSequence();
	
			var version = new Buffer(1);
			version.writeUInt8(1, 0);
			der.writeBuffer(version, asn1.Ber.Integer);
	
			// FieldID sequence
			der.startSequence();
			der.writeOID('1.2.840.10045.1.1'); // prime-field
			der.writeBuffer(curve.p, asn1.Ber.Integer);
			der.endSequence();
	
			// Curve sequence
			der.startSequence();
			var a = curve.p;
			if (a[0] === 0x0) a = a.slice(1);
			der.writeBuffer(a, asn1.Ber.OctetString);
			der.writeBuffer(curve.b, asn1.Ber.OctetString);
			der.writeBuffer(curve.s, asn1.Ber.BitString);
			der.endSequence();
	
			der.writeBuffer(curve.G, asn1.Ber.OctetString);
			der.writeBuffer(curve.n, asn1.Ber.Integer);
			var h = curve.h;
			if (!h) {
				h = new Buffer(1);
				h[0] = 1;
			}
			der.writeBuffer(h, asn1.Ber.Integer);
	
			// ECParameters
			der.endSequence();
		}
	}
	
	function writePkcs8ECDSAPublic(key, der) {
		writeECDSACurve(key, der);
		der.endSequence();
	
		var Q = utils.ecNormalize(key.part.Q.data, true);
		der.writeBuffer(Q, asn1.Ber.BitString);
	}
	
	function writePkcs8ECDSAPrivate(key, der) {
		writeECDSACurve(key, der);
		der.endSequence();
	
		der.startSequence(asn1.Ber.OctetString);
		der.startSequence();
	
		var version = new Buffer(1);
		version[0] = 1;
		der.writeBuffer(version, asn1.Ber.Integer);
	
		der.writeBuffer(key.part.d.data, asn1.Ber.OctetString);
	
		der.startSequence(0xa1);
		var Q = utils.ecNormalize(key.part.Q.data, true);
		der.writeBuffer(Q, asn1.Ber.BitString);
		der.endSequence();
	
		der.endSequence();
		der.endSequence();
	}
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(290).Buffer))

/***/ }),
/* 514 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {'use strict';
	
	// Copyright 2015 Joyent, Inc.
	
	module.exports = {
		read: read,
		readSSHPrivate: readSSHPrivate,
		write: write
	};
	
	var assert = __webpack_require__(482);
	var asn1 = __webpack_require__(506);
	var algs = __webpack_require__(483);
	var utils = __webpack_require__(488);
	var crypto = __webpack_require__(392);
	
	var Key = __webpack_require__(481);
	var PrivateKey = __webpack_require__(489);
	var pem = __webpack_require__(505);
	var rfc4253 = __webpack_require__(515);
	var SSHBuffer = __webpack_require__(516);
	var errors = __webpack_require__(485);
	
	var bcrypt;
	
	function read(buf, options) {
		return pem.read(buf, options);
	}
	
	var MAGIC = 'openssh-key-v1';
	
	function readSSHPrivate(type, buf, options) {
		buf = new SSHBuffer({ buffer: buf });
	
		var magic = buf.readCString();
		assert.strictEqual(magic, MAGIC, 'bad magic string');
	
		var cipher = buf.readString();
		var kdf = buf.readString();
		var kdfOpts = buf.readBuffer();
	
		var nkeys = buf.readInt();
		if (nkeys !== 1) {
			throw new Error('OpenSSH-format key file contains ' + 'multiple keys: this is unsupported.');
		}
	
		var pubKey = buf.readBuffer();
	
		if (type === 'public') {
			assert.ok(buf.atEnd(), 'excess bytes left after key');
			return rfc4253.read(pubKey);
		}
	
		var privKeyBlob = buf.readBuffer();
		assert.ok(buf.atEnd(), 'excess bytes left after key');
	
		var kdfOptsBuf = new SSHBuffer({ buffer: kdfOpts });
		switch (kdf) {
			case 'none':
				if (cipher !== 'none') {
					throw new Error('OpenSSH-format key uses KDF "none" ' + 'but specifies a cipher other than "none"');
				}
				break;
			case 'bcrypt':
				var salt = kdfOptsBuf.readBuffer();
				var rounds = kdfOptsBuf.readInt();
				var cinf = utils.opensshCipherInfo(cipher);
				if (bcrypt === undefined) {
					bcrypt = __webpack_require__(517);
				}
	
				if (typeof options.passphrase === 'string') {
					options.passphrase = new Buffer(options.passphrase, 'utf-8');
				}
				if (!Buffer.isBuffer(options.passphrase)) {
					throw new errors.KeyEncryptedError(options.filename, 'OpenSSH');
				}
	
				var pass = new Uint8Array(options.passphrase);
				var salti = new Uint8Array(salt);
				/* Use the pbkdf to derive both the key and the IV. */
				var out = new Uint8Array(cinf.keySize + cinf.blockSize);
				var res = bcrypt.pbkdf(pass, pass.length, salti, salti.length, out, out.length, rounds);
				if (res !== 0) {
					throw new Error('bcrypt_pbkdf function returned ' + 'failure, parameters invalid');
				}
				out = new Buffer(out);
				var ckey = out.slice(0, cinf.keySize);
				var iv = out.slice(cinf.keySize, cinf.keySize + cinf.blockSize);
				var cipherStream = crypto.createDecipheriv(cinf.opensslName, ckey, iv);
				cipherStream.setAutoPadding(false);
				var chunk,
				    chunks = [];
				cipherStream.once('error', function (e) {
					if (e.toString().indexOf('bad decrypt') !== -1) {
						throw new Error('Incorrect passphrase ' + 'supplied, could not decrypt key');
					}
					throw e;
				});
				cipherStream.write(privKeyBlob);
				cipherStream.end();
				while ((chunk = cipherStream.read()) !== null) {
					chunks.push(chunk);
				}privKeyBlob = Buffer.concat(chunks);
				break;
			default:
				throw new Error('OpenSSH-format key uses unknown KDF "' + kdf + '"');
		}
	
		buf = new SSHBuffer({ buffer: privKeyBlob });
	
		var checkInt1 = buf.readInt();
		var checkInt2 = buf.readInt();
		if (checkInt1 !== checkInt2) {
			throw new Error('Incorrect passphrase supplied, could not ' + 'decrypt key');
		}
	
		var ret = {};
		var key = rfc4253.readInternal(ret, 'private', buf.remainder());
	
		buf.skip(ret.consumed);
	
		var comment = buf.readString();
		key.comment = comment;
	
		return key;
	}
	
	function write(key, options) {
		var pubKey;
		if (PrivateKey.isPrivateKey(key)) pubKey = key.toPublic();else pubKey = key;
	
		var cipher = 'none';
		var kdf = 'none';
		var kdfopts = new Buffer(0);
		var cinf = { blockSize: 8 };
		var passphrase;
		if (options !== undefined) {
			passphrase = options.passphrase;
			if (typeof passphrase === 'string') passphrase = new Buffer(passphrase, 'utf-8');
			if (passphrase !== undefined) {
				assert.buffer(passphrase, 'options.passphrase');
				assert.optionalString(options.cipher, 'options.cipher');
				cipher = options.cipher;
				if (cipher === undefined) cipher = 'aes128-ctr';
				cinf = utils.opensshCipherInfo(cipher);
				kdf = 'bcrypt';
			}
		}
	
		var privBuf;
		if (PrivateKey.isPrivateKey(key)) {
			privBuf = new SSHBuffer({});
			var checkInt = crypto.randomBytes(4).readUInt32BE(0);
			privBuf.writeInt(checkInt);
			privBuf.writeInt(checkInt);
			privBuf.write(key.toBuffer('rfc4253'));
			privBuf.writeString(key.comment || '');
	
			var n = 1;
			while (privBuf._offset % cinf.blockSize !== 0) {
				privBuf.writeChar(n++);
			}privBuf = privBuf.toBuffer();
		}
	
		switch (kdf) {
			case 'none':
				break;
			case 'bcrypt':
				var salt = crypto.randomBytes(16);
				var rounds = 16;
				var kdfssh = new SSHBuffer({});
				kdfssh.writeBuffer(salt);
				kdfssh.writeInt(rounds);
				kdfopts = kdfssh.toBuffer();
	
				if (bcrypt === undefined) {
					bcrypt = __webpack_require__(517);
				}
				var pass = new Uint8Array(passphrase);
				var salti = new Uint8Array(salt);
				/* Use the pbkdf to derive both the key and the IV. */
				var out = new Uint8Array(cinf.keySize + cinf.blockSize);
				var res = bcrypt.pbkdf(pass, pass.length, salti, salti.length, out, out.length, rounds);
				if (res !== 0) {
					throw new Error('bcrypt_pbkdf function returned ' + 'failure, parameters invalid');
				}
				out = new Buffer(out);
				var ckey = out.slice(0, cinf.keySize);
				var iv = out.slice(cinf.keySize, cinf.keySize + cinf.blockSize);
	
				var cipherStream = crypto.createCipheriv(cinf.opensslName, ckey, iv);
				cipherStream.setAutoPadding(false);
				var chunk,
				    chunks = [];
				cipherStream.once('error', function (e) {
					throw e;
				});
				cipherStream.write(privBuf);
				cipherStream.end();
				while ((chunk = cipherStream.read()) !== null) {
					chunks.push(chunk);
				}privBuf = Buffer.concat(chunks);
				break;
			default:
				throw new Error('Unsupported kdf ' + kdf);
		}
	
		var buf = new SSHBuffer({});
	
		buf.writeCString(MAGIC);
		buf.writeString(cipher); /* cipher */
		buf.writeString(kdf); /* kdf */
		buf.writeBuffer(kdfopts); /* kdfoptions */
	
		buf.writeInt(1); /* nkeys */
		buf.writeBuffer(pubKey.toBuffer('rfc4253'));
	
		if (privBuf) buf.writeBuffer(privBuf);
	
		buf = buf.toBuffer();
	
		var header;
		if (PrivateKey.isPrivateKey(key)) header = 'OPENSSH PRIVATE KEY';else header = 'OPENSSH PUBLIC KEY';
	
		var tmp = buf.toString('base64');
		var len = tmp.length + tmp.length / 70 + 18 + 16 + header.length * 2 + 10;
		buf = new Buffer(len);
		var o = 0;
		o += buf.write('-----BEGIN ' + header + '-----\n', o);
		for (var i = 0; i < tmp.length;) {
			var limit = i + 70;
			if (limit > tmp.length) limit = tmp.length;
			o += buf.write(tmp.slice(i, limit), o);
			buf[o++] = 10;
			i = limit;
		}
		o += buf.write('-----END ' + header + '-----\n', o);
	
		return buf.slice(0, o);
	}
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(290).Buffer))

/***/ }),
/* 515 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {'use strict';
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
	
	// Copyright 2015 Joyent, Inc.
	
	module.exports = {
		read: read.bind(undefined, false, undefined),
		readType: read.bind(undefined, false),
		write: write,
		/* semi-private api, used by sshpk-agent */
		readPartial: read.bind(undefined, true),
	
		/* shared with ssh format */
		readInternal: read,
		keyTypeToAlg: keyTypeToAlg,
		algToKeyType: algToKeyType
	};
	
	var assert = __webpack_require__(482);
	var algs = __webpack_require__(483);
	var utils = __webpack_require__(488);
	var Key = __webpack_require__(481);
	var PrivateKey = __webpack_require__(489);
	var SSHBuffer = __webpack_require__(516);
	
	function algToKeyType(alg) {
		assert.string(alg);
		if (alg === 'ssh-dss') return 'dsa';else if (alg === 'ssh-rsa') return 'rsa';else if (alg === 'ssh-ed25519') return 'ed25519';else if (alg === 'ssh-curve25519') return 'curve25519';else if (alg.match(/^ecdsa-sha2-/)) return 'ecdsa';else throw new Error('Unknown algorithm ' + alg);
	}
	
	function keyTypeToAlg(key) {
		assert.object(key);
		if (key.type === 'dsa') return 'ssh-dss';else if (key.type === 'rsa') return 'ssh-rsa';else if (key.type === 'ed25519') return 'ssh-ed25519';else if (key.type === 'curve25519') return 'ssh-curve25519';else if (key.type === 'ecdsa') return 'ecdsa-sha2-' + key.part.curve.data.toString();else throw new Error('Unknown key type ' + key.type);
	}
	
	function read(partial, type, buf, options) {
		if (typeof buf === 'string') buf = new Buffer(buf);
		assert.buffer(buf, 'buf');
	
		var key = {};
	
		var parts = key.parts = [];
		var sshbuf = new SSHBuffer({ buffer: buf });
	
		var alg = sshbuf.readString();
		assert.ok(!sshbuf.atEnd(), 'key must have at least one part');
	
		key.type = algToKeyType(alg);
	
		var partCount = algs.info[key.type].parts.length;
		if (type && type === 'private') partCount = algs.privInfo[key.type].parts.length;
	
		while (!sshbuf.atEnd() && parts.length < partCount) {
			parts.push(sshbuf.readPart());
		}while (!partial && !sshbuf.atEnd()) {
			parts.push(sshbuf.readPart());
		}assert.ok(parts.length >= 1, 'key must have at least one part');
		assert.ok(partial || sshbuf.atEnd(), 'leftover bytes at end of key');
	
		var Constructor = Key;
		var algInfo = algs.info[key.type];
		if (type === 'private' || algInfo.parts.length !== parts.length) {
			algInfo = algs.privInfo[key.type];
			Constructor = PrivateKey;
		}
		assert.strictEqual(algInfo.parts.length, parts.length);
	
		if (key.type === 'ecdsa') {
			var res = /^ecdsa-sha2-(.+)$/.exec(alg);
			assert.ok(res !== null);
			assert.strictEqual(res[1], parts[0].data.toString());
		}
	
		var normalized = true;
		for (var i = 0; i < algInfo.parts.length; ++i) {
			parts[i].name = algInfo.parts[i];
			if (parts[i].name !== 'curve' && algInfo.normalize !== false) {
				var p = parts[i];
				var nd = utils.mpNormalize(p.data);
				if (nd !== p.data) {
					p.data = nd;
					normalized = false;
				}
			}
		}
	
		if (normalized) key._rfc4253Cache = sshbuf.toBuffer();
	
		if (partial && (typeof partial === 'undefined' ? 'undefined' : _typeof(partial)) === 'object') {
			partial.remainder = sshbuf.remainder();
			partial.consumed = sshbuf._offset;
		}
	
		return new Constructor(key);
	}
	
	function write(key, options) {
		assert.object(key);
	
		var alg = keyTypeToAlg(key);
		var i;
	
		var algInfo = algs.info[key.type];
		if (PrivateKey.isPrivateKey(key)) algInfo = algs.privInfo[key.type];
		var parts = algInfo.parts;
	
		var buf = new SSHBuffer({});
	
		buf.writeString(alg);
	
		for (i = 0; i < parts.length; ++i) {
			var data = key.part[parts[i]].data;
			if (algInfo.normalize !== false) data = utils.mpNormalize(data);
			buf.writeBuffer(data);
		}
	
		return buf.toBuffer();
	}
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(290).Buffer))

/***/ }),
/* 516 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {'use strict';
	
	// Copyright 2015 Joyent, Inc.
	
	module.exports = SSHBuffer;
	
	var assert = __webpack_require__(482);
	
	function SSHBuffer(opts) {
		assert.object(opts, 'options');
		if (opts.buffer !== undefined) assert.buffer(opts.buffer, 'options.buffer');
	
		this._size = opts.buffer ? opts.buffer.length : 1024;
		this._buffer = opts.buffer || new Buffer(this._size);
		this._offset = 0;
	}
	
	SSHBuffer.prototype.toBuffer = function () {
		return this._buffer.slice(0, this._offset);
	};
	
	SSHBuffer.prototype.atEnd = function () {
		return this._offset >= this._buffer.length;
	};
	
	SSHBuffer.prototype.remainder = function () {
		return this._buffer.slice(this._offset);
	};
	
	SSHBuffer.prototype.skip = function (n) {
		this._offset += n;
	};
	
	SSHBuffer.prototype.expand = function () {
		this._size *= 2;
		var buf = new Buffer(this._size);
		this._buffer.copy(buf, 0);
		this._buffer = buf;
	};
	
	SSHBuffer.prototype.readPart = function () {
		return { data: this.readBuffer() };
	};
	
	SSHBuffer.prototype.readBuffer = function () {
		var len = this._buffer.readUInt32BE(this._offset);
		this._offset += 4;
		assert.ok(this._offset + len <= this._buffer.length, 'length out of bounds at +0x' + this._offset.toString(16) + ' (data truncated?)');
		var buf = this._buffer.slice(this._offset, this._offset + len);
		this._offset += len;
		return buf;
	};
	
	SSHBuffer.prototype.readString = function () {
		return this.readBuffer().toString();
	};
	
	SSHBuffer.prototype.readCString = function () {
		var offset = this._offset;
		while (offset < this._buffer.length && this._buffer[offset] !== 0x00) {
			offset++;
		}assert.ok(offset < this._buffer.length, 'c string does not terminate');
		var str = this._buffer.slice(this._offset, offset).toString();
		this._offset = offset + 1;
		return str;
	};
	
	SSHBuffer.prototype.readInt = function () {
		var v = this._buffer.readUInt32BE(this._offset);
		this._offset += 4;
		return v;
	};
	
	SSHBuffer.prototype.readInt64 = function () {
		assert.ok(this._offset + 8 < this._buffer.length, 'buffer not long enough to read Int64');
		var v = this._buffer.slice(this._offset, this._offset + 8);
		this._offset += 8;
		return v;
	};
	
	SSHBuffer.prototype.readChar = function () {
		var v = this._buffer[this._offset++];
		return v;
	};
	
	SSHBuffer.prototype.writeBuffer = function (buf) {
		while (this._offset + 4 + buf.length > this._size) {
			this.expand();
		}this._buffer.writeUInt32BE(buf.length, this._offset);
		this._offset += 4;
		buf.copy(this._buffer, this._offset);
		this._offset += buf.length;
	};
	
	SSHBuffer.prototype.writeString = function (str) {
		this.writeBuffer(new Buffer(str, 'utf8'));
	};
	
	SSHBuffer.prototype.writeCString = function (str) {
		while (this._offset + 1 + str.length > this._size) {
			this.expand();
		}this._buffer.write(str, this._offset);
		this._offset += str.length;
		this._buffer[this._offset++] = 0;
	};
	
	SSHBuffer.prototype.writeInt = function (v) {
		while (this._offset + 4 > this._size) {
			this.expand();
		}this._buffer.writeUInt32BE(v, this._offset);
		this._offset += 4;
	};
	
	SSHBuffer.prototype.writeInt64 = function (v) {
		assert.buffer(v, 'value');
		if (v.length > 8) {
			var lead = v.slice(0, v.length - 8);
			for (var i = 0; i < lead.length; ++i) {
				assert.strictEqual(lead[i], 0, 'must fit in 64 bits of precision');
			}
			v = v.slice(v.length - 8, v.length);
		}
		while (this._offset + 8 > this._size) {
			this.expand();
		}v.copy(this._buffer, this._offset);
		this._offset += 8;
	};
	
	SSHBuffer.prototype.writeChar = function (v) {
		while (this._offset + 1 > this._size) {
			this.expand();
		}this._buffer[this._offset++] = v;
	};
	
	SSHBuffer.prototype.writePart = function (p) {
		this.writeBuffer(p.data);
	};
	
	SSHBuffer.prototype.write = function (buf) {
		while (this._offset + buf.length > this._size) {
			this.expand();
		}buf.copy(this._buffer, this._offset);
		this._offset += buf.length;
	};
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(290).Buffer))

/***/ }),
/* 517 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var crypto_hash_sha512 = __webpack_require__(501).lowlevel.crypto_hash;
	
	/*
	 * This file is a 1:1 port from the OpenBSD blowfish.c and bcrypt_pbkdf.c. As a
	 * result, it retains the original copyright and license. The two files are
	 * under slightly different (but compatible) licenses, and are here combined in
	 * one file.
	 *
	 * Credit for the actual porting work goes to:
	 *  Devi Mandiri <me@devi.web.id>
	 */
	
	/*
	 * The Blowfish portions are under the following license:
	 *
	 * Blowfish block cipher for OpenBSD
	 * Copyright 1997 Niels Provos <provos@physnet.uni-hamburg.de>
	 * All rights reserved.
	 *
	 * Implementation advice by David Mazieres <dm@lcs.mit.edu>.
	 *
	 * Redistribution and use in source and binary forms, with or without
	 * modification, are permitted provided that the following conditions
	 * are met:
	 * 1. Redistributions of source code must retain the above copyright
	 *    notice, this list of conditions and the following disclaimer.
	 * 2. Redistributions in binary form must reproduce the above copyright
	 *    notice, this list of conditions and the following disclaimer in the
	 *    documentation and/or other materials provided with the distribution.
	 * 3. The name of the author may not be used to endorse or promote products
	 *    derived from this software without specific prior written permission.
	 *
	 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
	 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
	 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
	 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
	 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
	 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
	 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
	 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
	 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	 */
	
	/*
	 * The bcrypt_pbkdf portions are under the following license:
	 *
	 * Copyright (c) 2013 Ted Unangst <tedu@openbsd.org>
	 *
	 * Permission to use, copy, modify, and distribute this software for any
	 * purpose with or without fee is hereby granted, provided that the above
	 * copyright notice and this permission notice appear in all copies.
	 *
	 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
	 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
	 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
	 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
	 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
	 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
	 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
	 */
	
	/*
	 * Performance improvements (Javascript-specific):
	 *
	 * Copyright 2016, Joyent Inc
	 * Author: Alex Wilson <alex.wilson@joyent.com>
	 *
	 * Permission to use, copy, modify, and distribute this software for any
	 * purpose with or without fee is hereby granted, provided that the above
	 * copyright notice and this permission notice appear in all copies.
	 *
	 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
	 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
	 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
	 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
	 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
	 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
	 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
	 */
	
	// Ported from OpenBSD bcrypt_pbkdf.c v1.9
	
	var BLF_J = 0;
	
	var Blowfish = function Blowfish() {
	  this.S = [new Uint32Array([0xd1310ba6, 0x98dfb5ac, 0x2ffd72db, 0xd01adfb7, 0xb8e1afed, 0x6a267e96, 0xba7c9045, 0xf12c7f99, 0x24a19947, 0xb3916cf7, 0x0801f2e2, 0x858efc16, 0x636920d8, 0x71574e69, 0xa458fea3, 0xf4933d7e, 0x0d95748f, 0x728eb658, 0x718bcd58, 0x82154aee, 0x7b54a41d, 0xc25a59b5, 0x9c30d539, 0x2af26013, 0xc5d1b023, 0x286085f0, 0xca417918, 0xb8db38ef, 0x8e79dcb0, 0x603a180e, 0x6c9e0e8b, 0xb01e8a3e, 0xd71577c1, 0xbd314b27, 0x78af2fda, 0x55605c60, 0xe65525f3, 0xaa55ab94, 0x57489862, 0x63e81440, 0x55ca396a, 0x2aab10b6, 0xb4cc5c34, 0x1141e8ce, 0xa15486af, 0x7c72e993, 0xb3ee1411, 0x636fbc2a, 0x2ba9c55d, 0x741831f6, 0xce5c3e16, 0x9b87931e, 0xafd6ba33, 0x6c24cf5c, 0x7a325381, 0x28958677, 0x3b8f4898, 0x6b4bb9af, 0xc4bfe81b, 0x66282193, 0x61d809cc, 0xfb21a991, 0x487cac60, 0x5dec8032, 0xef845d5d, 0xe98575b1, 0xdc262302, 0xeb651b88, 0x23893e81, 0xd396acc5, 0x0f6d6ff3, 0x83f44239, 0x2e0b4482, 0xa4842004, 0x69c8f04a, 0x9e1f9b5e, 0x21c66842, 0xf6e96c9a, 0x670c9c61, 0xabd388f0, 0x6a51a0d2, 0xd8542f68, 0x960fa728, 0xab5133a3, 0x6eef0b6c, 0x137a3be4, 0xba3bf050, 0x7efb2a98, 0xa1f1651d, 0x39af0176, 0x66ca593e, 0x82430e88, 0x8cee8619, 0x456f9fb4, 0x7d84a5c3, 0x3b8b5ebe, 0xe06f75d8, 0x85c12073, 0x401a449f, 0x56c16aa6, 0x4ed3aa62, 0x363f7706, 0x1bfedf72, 0x429b023d, 0x37d0d724, 0xd00a1248, 0xdb0fead3, 0x49f1c09b, 0x075372c9, 0x80991b7b, 0x25d479d8, 0xf6e8def7, 0xe3fe501a, 0xb6794c3b, 0x976ce0bd, 0x04c006ba, 0xc1a94fb6, 0x409f60c4, 0x5e5c9ec2, 0x196a2463, 0x68fb6faf, 0x3e6c53b5, 0x1339b2eb, 0x3b52ec6f, 0x6dfc511f, 0x9b30952c, 0xcc814544, 0xaf5ebd09, 0xbee3d004, 0xde334afd, 0x660f2807, 0x192e4bb3, 0xc0cba857, 0x45c8740f, 0xd20b5f39, 0xb9d3fbdb, 0x5579c0bd, 0x1a60320a, 0xd6a100c6, 0x402c7279, 0x679f25fe, 0xfb1fa3cc, 0x8ea5e9f8, 0xdb3222f8, 0x3c7516df, 0xfd616b15, 0x2f501ec8, 0xad0552ab, 0x323db5fa, 0xfd238760, 0x53317b48, 0x3e00df82, 0x9e5c57bb, 0xca6f8ca0, 0x1a87562e, 0xdf1769db, 0xd542a8f6, 0x287effc3, 0xac6732c6, 0x8c4f5573, 0x695b27b0, 0xbbca58c8, 0xe1ffa35d, 0xb8f011a0, 0x10fa3d98, 0xfd2183b8, 0x4afcb56c, 0x2dd1d35b, 0x9a53e479, 0xb6f84565, 0xd28e49bc, 0x4bfb9790, 0xe1ddf2da, 0xa4cb7e33, 0x62fb1341, 0xcee4c6e8, 0xef20cada, 0x36774c01, 0xd07e9efe, 0x2bf11fb4, 0x95dbda4d, 0xae909198, 0xeaad8e71, 0x6b93d5a0, 0xd08ed1d0, 0xafc725e0, 0x8e3c5b2f, 0x8e7594b7, 0x8ff6e2fb, 0xf2122b64, 0x8888b812, 0x900df01c, 0x4fad5ea0, 0x688fc31c, 0xd1cff191, 0xb3a8c1ad, 0x2f2f2218, 0xbe0e1777, 0xea752dfe, 0x8b021fa1, 0xe5a0cc0f, 0xb56f74e8, 0x18acf3d6, 0xce89e299, 0xb4a84fe0, 0xfd13e0b7, 0x7cc43b81, 0xd2ada8d9, 0x165fa266, 0x80957705, 0x93cc7314, 0x211a1477, 0xe6ad2065, 0x77b5fa86, 0xc75442f5, 0xfb9d35cf, 0xebcdaf0c, 0x7b3e89a0, 0xd6411bd3, 0xae1e7e49, 0x00250e2d, 0x2071b35e, 0x226800bb, 0x57b8e0af, 0x2464369b, 0xf009b91e, 0x5563911d, 0x59dfa6aa, 0x78c14389, 0xd95a537f, 0x207d5ba2, 0x02e5b9c5, 0x83260376, 0x6295cfa9, 0x11c81968, 0x4e734a41, 0xb3472dca, 0x7b14a94a, 0x1b510052, 0x9a532915, 0xd60f573f, 0xbc9bc6e4, 0x2b60a476, 0x81e67400, 0x08ba6fb5, 0x571be91f, 0xf296ec6b, 0x2a0dd915, 0xb6636521, 0xe7b9f9b6, 0xff34052e, 0xc5855664, 0x53b02d5d, 0xa99f8fa1, 0x08ba4799, 0x6e85076a]), new Uint32Array([0x4b7a70e9, 0xb5b32944, 0xdb75092e, 0xc4192623, 0xad6ea6b0, 0x49a7df7d, 0x9cee60b8, 0x8fedb266, 0xecaa8c71, 0x699a17ff, 0x5664526c, 0xc2b19ee1, 0x193602a5, 0x75094c29, 0xa0591340, 0xe4183a3e, 0x3f54989a, 0x5b429d65, 0x6b8fe4d6, 0x99f73fd6, 0xa1d29c07, 0xefe830f5, 0x4d2d38e6, 0xf0255dc1, 0x4cdd2086, 0x8470eb26, 0x6382e9c6, 0x021ecc5e, 0x09686b3f, 0x3ebaefc9, 0x3c971814, 0x6b6a70a1, 0x687f3584, 0x52a0e286, 0xb79c5305, 0xaa500737, 0x3e07841c, 0x7fdeae5c, 0x8e7d44ec, 0x5716f2b8, 0xb03ada37, 0xf0500c0d, 0xf01c1f04, 0x0200b3ff, 0xae0cf51a, 0x3cb574b2, 0x25837a58, 0xdc0921bd, 0xd19113f9, 0x7ca92ff6, 0x94324773, 0x22f54701, 0x3ae5e581, 0x37c2dadc, 0xc8b57634, 0x9af3dda7, 0xa9446146, 0x0fd0030e, 0xecc8c73e, 0xa4751e41, 0xe238cd99, 0x3bea0e2f, 0x3280bba1, 0x183eb331, 0x4e548b38, 0x4f6db908, 0x6f420d03, 0xf60a04bf, 0x2cb81290, 0x24977c79, 0x5679b072, 0xbcaf89af, 0xde9a771f, 0xd9930810, 0xb38bae12, 0xdccf3f2e, 0x5512721f, 0x2e6b7124, 0x501adde6, 0x9f84cd87, 0x7a584718, 0x7408da17, 0xbc9f9abc, 0xe94b7d8c, 0xec7aec3a, 0xdb851dfa, 0x63094366, 0xc464c3d2, 0xef1c1847, 0x3215d908, 0xdd433b37, 0x24c2ba16, 0x12a14d43, 0x2a65c451, 0x50940002, 0x133ae4dd, 0x71dff89e, 0x10314e55, 0x81ac77d6, 0x5f11199b, 0x043556f1, 0xd7a3c76b, 0x3c11183b, 0x5924a509, 0xf28fe6ed, 0x97f1fbfa, 0x9ebabf2c, 0x1e153c6e, 0x86e34570, 0xeae96fb1, 0x860e5e0a, 0x5a3e2ab3, 0x771fe71c, 0x4e3d06fa, 0x2965dcb9, 0x99e71d0f, 0x803e89d6, 0x5266c825, 0x2e4cc978, 0x9c10b36a, 0xc6150eba, 0x94e2ea78, 0xa5fc3c53, 0x1e0a2df4, 0xf2f74ea7, 0x361d2b3d, 0x1939260f, 0x19c27960, 0x5223a708, 0xf71312b6, 0xebadfe6e, 0xeac31f66, 0xe3bc4595, 0xa67bc883, 0xb17f37d1, 0x018cff28, 0xc332ddef, 0xbe6c5aa5, 0x65582185, 0x68ab9802, 0xeecea50f, 0xdb2f953b, 0x2aef7dad, 0x5b6e2f84, 0x1521b628, 0x29076170, 0xecdd4775, 0x619f1510, 0x13cca830, 0xeb61bd96, 0x0334fe1e, 0xaa0363cf, 0xb5735c90, 0x4c70a239, 0xd59e9e0b, 0xcbaade14, 0xeecc86bc, 0x60622ca7, 0x9cab5cab, 0xb2f3846e, 0x648b1eaf, 0x19bdf0ca, 0xa02369b9, 0x655abb50, 0x40685a32, 0x3c2ab4b3, 0x319ee9d5, 0xc021b8f7, 0x9b540b19, 0x875fa099, 0x95f7997e, 0x623d7da8, 0xf837889a, 0x97e32d77, 0x11ed935f, 0x16681281, 0x0e358829, 0xc7e61fd6, 0x96dedfa1, 0x7858ba99, 0x57f584a5, 0x1b227263, 0x9b83c3ff, 0x1ac24696, 0xcdb30aeb, 0x532e3054, 0x8fd948e4, 0x6dbc3128, 0x58ebf2ef, 0x34c6ffea, 0xfe28ed61, 0xee7c3c73, 0x5d4a14d9, 0xe864b7e3, 0x42105d14, 0x203e13e0, 0x45eee2b6, 0xa3aaabea, 0xdb6c4f15, 0xfacb4fd0, 0xc742f442, 0xef6abbb5, 0x654f3b1d, 0x41cd2105, 0xd81e799e, 0x86854dc7, 0xe44b476a, 0x3d816250, 0xcf62a1f2, 0x5b8d2646, 0xfc8883a0, 0xc1c7b6a3, 0x7f1524c3, 0x69cb7492, 0x47848a0b, 0x5692b285, 0x095bbf00, 0xad19489d, 0x1462b174, 0x23820e00, 0x58428d2a, 0x0c55f5ea, 0x1dadf43e, 0x233f7061, 0x3372f092, 0x8d937e41, 0xd65fecf1, 0x6c223bdb, 0x7cde3759, 0xcbee7460, 0x4085f2a7, 0xce77326e, 0xa6078084, 0x19f8509e, 0xe8efd855, 0x61d99735, 0xa969a7aa, 0xc50c06c2, 0x5a04abfc, 0x800bcadc, 0x9e447a2e, 0xc3453484, 0xfdd56705, 0x0e1e9ec9, 0xdb73dbd3, 0x105588cd, 0x675fda79, 0xe3674340, 0xc5c43465, 0x713e38d8, 0x3d28f89e, 0xf16dff20, 0x153e21e7, 0x8fb03d4a, 0xe6e39f2b, 0xdb83adf7]), new Uint32Array([0xe93d5a68, 0x948140f7, 0xf64c261c, 0x94692934, 0x411520f7, 0x7602d4f7, 0xbcf46b2e, 0xd4a20068, 0xd4082471, 0x3320f46a, 0x43b7d4b7, 0x500061af, 0x1e39f62e, 0x97244546, 0x14214f74, 0xbf8b8840, 0x4d95fc1d, 0x96b591af, 0x70f4ddd3, 0x66a02f45, 0xbfbc09ec, 0x03bd9785, 0x7fac6dd0, 0x31cb8504, 0x96eb27b3, 0x55fd3941, 0xda2547e6, 0xabca0a9a, 0x28507825, 0x530429f4, 0x0a2c86da, 0xe9b66dfb, 0x68dc1462, 0xd7486900, 0x680ec0a4, 0x27a18dee, 0x4f3ffea2, 0xe887ad8c, 0xb58ce006, 0x7af4d6b6, 0xaace1e7c, 0xd3375fec, 0xce78a399, 0x406b2a42, 0x20fe9e35, 0xd9f385b9, 0xee39d7ab, 0x3b124e8b, 0x1dc9faf7, 0x4b6d1856, 0x26a36631, 0xeae397b2, 0x3a6efa74, 0xdd5b4332, 0x6841e7f7, 0xca7820fb, 0xfb0af54e, 0xd8feb397, 0x454056ac, 0xba489527, 0x55533a3a, 0x20838d87, 0xfe6ba9b7, 0xd096954b, 0x55a867bc, 0xa1159a58, 0xcca92963, 0x99e1db33, 0xa62a4a56, 0x3f3125f9, 0x5ef47e1c, 0x9029317c, 0xfdf8e802, 0x04272f70, 0x80bb155c, 0x05282ce3, 0x95c11548, 0xe4c66d22, 0x48c1133f, 0xc70f86dc, 0x07f9c9ee, 0x41041f0f, 0x404779a4, 0x5d886e17, 0x325f51eb, 0xd59bc0d1, 0xf2bcc18f, 0x41113564, 0x257b7834, 0x602a9c60, 0xdff8e8a3, 0x1f636c1b, 0x0e12b4c2, 0x02e1329e, 0xaf664fd1, 0xcad18115, 0x6b2395e0, 0x333e92e1, 0x3b240b62, 0xeebeb922, 0x85b2a20e, 0xe6ba0d99, 0xde720c8c, 0x2da2f728, 0xd0127845, 0x95b794fd, 0x647d0862, 0xe7ccf5f0, 0x5449a36f, 0x877d48fa, 0xc39dfd27, 0xf33e8d1e, 0x0a476341, 0x992eff74, 0x3a6f6eab, 0xf4f8fd37, 0xa812dc60, 0xa1ebddf8, 0x991be14c, 0xdb6e6b0d, 0xc67b5510, 0x6d672c37, 0x2765d43b, 0xdcd0e804, 0xf1290dc7, 0xcc00ffa3, 0xb5390f92, 0x690fed0b, 0x667b9ffb, 0xcedb7d9c, 0xa091cf0b, 0xd9155ea3, 0xbb132f88, 0x515bad24, 0x7b9479bf, 0x763bd6eb, 0x37392eb3, 0xcc115979, 0x8026e297, 0xf42e312d, 0x6842ada7, 0xc66a2b3b, 0x12754ccc, 0x782ef11c, 0x6a124237, 0xb79251e7, 0x06a1bbe6, 0x4bfb6350, 0x1a6b1018, 0x11caedfa, 0x3d25bdd8, 0xe2e1c3c9, 0x44421659, 0x0a121386, 0xd90cec6e, 0xd5abea2a, 0x64af674e, 0xda86a85f, 0xbebfe988, 0x64e4c3fe, 0x9dbc8057, 0xf0f7c086, 0x60787bf8, 0x6003604d, 0xd1fd8346, 0xf6381fb0, 0x7745ae04, 0xd736fccc, 0x83426b33, 0xf01eab71, 0xb0804187, 0x3c005e5f, 0x77a057be, 0xbde8ae24, 0x55464299, 0xbf582e61, 0x4e58f48f, 0xf2ddfda2, 0xf474ef38, 0x8789bdc2, 0x5366f9c3, 0xc8b38e74, 0xb475f255, 0x46fcd9b9, 0x7aeb2661, 0x8b1ddf84, 0x846a0e79, 0x915f95e2, 0x466e598e, 0x20b45770, 0x8cd55591, 0xc902de4c, 0xb90bace1, 0xbb8205d0, 0x11a86248, 0x7574a99e, 0xb77f19b6, 0xe0a9dc09, 0x662d09a1, 0xc4324633, 0xe85a1f02, 0x09f0be8c, 0x4a99a025, 0x1d6efe10, 0x1ab93d1d, 0x0ba5a4df, 0xa186f20f, 0x2868f169, 0xdcb7da83, 0x573906fe, 0xa1e2ce9b, 0x4fcd7f52, 0x50115e01, 0xa70683fa, 0xa002b5c4, 0x0de6d027, 0x9af88c27, 0x773f8641, 0xc3604c06, 0x61a806b5, 0xf0177a28, 0xc0f586e0, 0x006058aa, 0x30dc7d62, 0x11e69ed7, 0x2338ea63, 0x53c2dd94, 0xc2c21634, 0xbbcbee56, 0x90bcb6de, 0xebfc7da1, 0xce591d76, 0x6f05e409, 0x4b7c0188, 0x39720a3d, 0x7c927c24, 0x86e3725f, 0x724d9db9, 0x1ac15bb4, 0xd39eb8fc, 0xed545578, 0x08fca5b5, 0xd83d7cd3, 0x4dad0fc4, 0x1e50ef5e, 0xb161e6f8, 0xa28514d9, 0x6c51133c, 0x6fd5c7e7, 0x56e14ec4, 0x362abfce, 0xddc6c837, 0xd79a3234, 0x92638212, 0x670efa8e, 0x406000e0]), new Uint32Array([0x3a39ce37, 0xd3faf5cf, 0xabc27737, 0x5ac52d1b, 0x5cb0679e, 0x4fa33742, 0xd3822740, 0x99bc9bbe, 0xd5118e9d, 0xbf0f7315, 0xd62d1c7e, 0xc700c47b, 0xb78c1b6b, 0x21a19045, 0xb26eb1be, 0x6a366eb4, 0x5748ab2f, 0xbc946e79, 0xc6a376d2, 0x6549c2c8, 0x530ff8ee, 0x468dde7d, 0xd5730a1d, 0x4cd04dc6, 0x2939bbdb, 0xa9ba4650, 0xac9526e8, 0xbe5ee304, 0xa1fad5f0, 0x6a2d519a, 0x63ef8ce2, 0x9a86ee22, 0xc089c2b8, 0x43242ef6, 0xa51e03aa, 0x9cf2d0a4, 0x83c061ba, 0x9be96a4d, 0x8fe51550, 0xba645bd6, 0x2826a2f9, 0xa73a3ae1, 0x4ba99586, 0xef5562e9, 0xc72fefd3, 0xf752f7da, 0x3f046f69, 0x77fa0a59, 0x80e4a915, 0x87b08601, 0x9b09e6ad, 0x3b3ee593, 0xe990fd5a, 0x9e34d797, 0x2cf0b7d9, 0x022b8b51, 0x96d5ac3a, 0x017da67d, 0xd1cf3ed6, 0x7c7d2d28, 0x1f9f25cf, 0xadf2b89b, 0x5ad6b472, 0x5a88f54c, 0xe029ac71, 0xe019a5e6, 0x47b0acfd, 0xed93fa9b, 0xe8d3c48d, 0x283b57cc, 0xf8d56629, 0x79132e28, 0x785f0191, 0xed756055, 0xf7960e44, 0xe3d35e8c, 0x15056dd4, 0x88f46dba, 0x03a16125, 0x0564f0bd, 0xc3eb9e15, 0x3c9057a2, 0x97271aec, 0xa93a072a, 0x1b3f6d9b, 0x1e6321f5, 0xf59c66fb, 0x26dcf319, 0x7533d928, 0xb155fdf5, 0x03563482, 0x8aba3cbb, 0x28517711, 0xc20ad9f8, 0xabcc5167, 0xccad925f, 0x4de81751, 0x3830dc8e, 0x379d5862, 0x9320f991, 0xea7a90c2, 0xfb3e7bce, 0x5121ce64, 0x774fbe32, 0xa8b6e37e, 0xc3293d46, 0x48de5369, 0x6413e680, 0xa2ae0810, 0xdd6db224, 0x69852dfd, 0x09072166, 0xb39a460a, 0x6445c0dd, 0x586cdecf, 0x1c20c8ae, 0x5bbef7dd, 0x1b588d40, 0xccd2017f, 0x6bb4e3bb, 0xdda26a7e, 0x3a59ff45, 0x3e350a44, 0xbcb4cdd5, 0x72eacea8, 0xfa6484bb, 0x8d6612ae, 0xbf3c6f47, 0xd29be463, 0x542f5d9e, 0xaec2771b, 0xf64e6370, 0x740e0d8d, 0xe75b1357, 0xf8721671, 0xaf537d5d, 0x4040cb08, 0x4eb4e2cc, 0x34d2466a, 0x0115af84, 0xe1b00428, 0x95983a1d, 0x06b89fb4, 0xce6ea048, 0x6f3f3b82, 0x3520ab82, 0x011a1d4b, 0x277227f8, 0x611560b1, 0xe7933fdc, 0xbb3a792b, 0x344525bd, 0xa08839e1, 0x51ce794b, 0x2f32c9b7, 0xa01fbac9, 0xe01cc87e, 0xbcc7d1f6, 0xcf0111c3, 0xa1e8aac7, 0x1a908749, 0xd44fbd9a, 0xd0dadecb, 0xd50ada38, 0x0339c32a, 0xc6913667, 0x8df9317c, 0xe0b12b4f, 0xf79e59b7, 0x43f5bb3a, 0xf2d519ff, 0x27d9459c, 0xbf97222c, 0x15e6fc2a, 0x0f91fc71, 0x9b941525, 0xfae59361, 0xceb69ceb, 0xc2a86459, 0x12baa8d1, 0xb6c1075e, 0xe3056a0c, 0x10d25065, 0xcb03a442, 0xe0ec6e0e, 0x1698db3b, 0x4c98a0be, 0x3278e964, 0x9f1f9532, 0xe0d392df, 0xd3a0342b, 0x8971f21e, 0x1b0a7441, 0x4ba3348c, 0xc5be7120, 0xc37632d8, 0xdf359f8d, 0x9b992f2e, 0xe60b6f47, 0x0fe3f11d, 0xe54cda54, 0x1edad891, 0xce6279cf, 0xcd3e7e6f, 0x1618b166, 0xfd2c1d05, 0x848fd2c5, 0xf6fb2299, 0xf523f357, 0xa6327623, 0x93a83531, 0x56cccd02, 0xacf08162, 0x5a75ebb5, 0x6e163697, 0x88d273cc, 0xde966292, 0x81b949d0, 0x4c50901b, 0x71c65614, 0xe6c6c7bd, 0x327a140a, 0x45e1d006, 0xc3f27b9a, 0xc9aa53fd, 0x62a80f00, 0xbb25bfe2, 0x35bdd2f6, 0x71126905, 0xb2040222, 0xb6cbcf7c, 0xcd769c2b, 0x53113ec0, 0x1640e3d3, 0x38abbd60, 0x2547adf0, 0xba38209c, 0xf746ce76, 0x77afa1c5, 0x20756060, 0x85cbfe4e, 0x8ae88dd8, 0x7aaaf9b0, 0x4cf9aa7e, 0x1948c25c, 0x02fb8a8c, 0x01c36ae4, 0xd6ebe1f9, 0x90d4f869, 0xa65cdea0, 0x3f09252d, 0xc208e69f, 0xb74e6132, 0xce77e25b, 0x578fdfe3, 0x3ac372e6])];
	  this.P = new Uint32Array([0x243f6a88, 0x85a308d3, 0x13198a2e, 0x03707344, 0xa4093822, 0x299f31d0, 0x082efa98, 0xec4e6c89, 0x452821e6, 0x38d01377, 0xbe5466cf, 0x34e90c6c, 0xc0ac29b7, 0xc97c50dd, 0x3f84d5b5, 0xb5470917, 0x9216d5d9, 0x8979fb1b]);
	};
	
	function F(S, x8, i) {
	  return (S[0][x8[i + 3]] + S[1][x8[i + 2]] ^ S[2][x8[i + 1]]) + S[3][x8[i]];
	};
	
	Blowfish.prototype.encipher = function (x, x8) {
	  if (x8 === undefined) {
	    x8 = new Uint8Array(x.buffer);
	    if (x.byteOffset !== 0) x8 = x8.subarray(x.byteOffset);
	  }
	  x[0] ^= this.P[0];
	  for (var i = 1; i < 16; i += 2) {
	    x[1] ^= F(this.S, x8, 0) ^ this.P[i];
	    x[0] ^= F(this.S, x8, 4) ^ this.P[i + 1];
	  }
	  var t = x[0];
	  x[0] = x[1] ^ this.P[17];
	  x[1] = t;
	};
	
	Blowfish.prototype.decipher = function (x) {
	  var x8 = new Uint8Array(x.buffer);
	  if (x.byteOffset !== 0) x8 = x8.subarray(x.byteOffset);
	  x[0] ^= this.P[17];
	  for (var i = 16; i > 0; i -= 2) {
	    x[1] ^= F(this.S, x8, 0) ^ this.P[i];
	    x[0] ^= F(this.S, x8, 4) ^ this.P[i - 1];
	  }
	  var t = x[0];
	  x[0] = x[1] ^ this.P[0];
	  x[1] = t;
	};
	
	function stream2word(data, databytes) {
	  var i,
	      temp = 0;
	  for (i = 0; i < 4; i++, BLF_J++) {
	    if (BLF_J >= databytes) BLF_J = 0;
	    temp = temp << 8 | data[BLF_J];
	  }
	  return temp;
	};
	
	Blowfish.prototype.expand0state = function (key, keybytes) {
	  var d = new Uint32Array(2),
	      i,
	      k;
	  var d8 = new Uint8Array(d.buffer);
	
	  for (i = 0, BLF_J = 0; i < 18; i++) {
	    this.P[i] ^= stream2word(key, keybytes);
	  }
	  BLF_J = 0;
	
	  for (i = 0; i < 18; i += 2) {
	    this.encipher(d, d8);
	    this.P[i] = d[0];
	    this.P[i + 1] = d[1];
	  }
	
	  for (i = 0; i < 4; i++) {
	    for (k = 0; k < 256; k += 2) {
	      this.encipher(d, d8);
	      this.S[i][k] = d[0];
	      this.S[i][k + 1] = d[1];
	    }
	  }
	};
	
	Blowfish.prototype.expandstate = function (data, databytes, key, keybytes) {
	  var d = new Uint32Array(2),
	      i,
	      k;
	
	  for (i = 0, BLF_J = 0; i < 18; i++) {
	    this.P[i] ^= stream2word(key, keybytes);
	  }
	
	  for (i = 0, BLF_J = 0; i < 18; i += 2) {
	    d[0] ^= stream2word(data, databytes);
	    d[1] ^= stream2word(data, databytes);
	    this.encipher(d);
	    this.P[i] = d[0];
	    this.P[i + 1] = d[1];
	  }
	
	  for (i = 0; i < 4; i++) {
	    for (k = 0; k < 256; k += 2) {
	      d[0] ^= stream2word(data, databytes);
	      d[1] ^= stream2word(data, databytes);
	      this.encipher(d);
	      this.S[i][k] = d[0];
	      this.S[i][k + 1] = d[1];
	    }
	  }
	  BLF_J = 0;
	};
	
	Blowfish.prototype.enc = function (data, blocks) {
	  for (var i = 0; i < blocks; i++) {
	    this.encipher(data.subarray(i * 2));
	  }
	};
	
	Blowfish.prototype.dec = function (data, blocks) {
	  for (var i = 0; i < blocks; i++) {
	    this.decipher(data.subarray(i * 2));
	  }
	};
	
	var BCRYPT_BLOCKS = 8,
	    BCRYPT_HASHSIZE = 32;
	
	function bcrypt_hash(sha2pass, sha2salt, out) {
	  var state = new Blowfish(),
	      cdata = new Uint32Array(BCRYPT_BLOCKS),
	      i,
	      ciphertext = new Uint8Array([79, 120, 121, 99, 104, 114, 111, 109, 97, 116, 105, 99, 66, 108, 111, 119, 102, 105, 115, 104, 83, 119, 97, 116, 68, 121, 110, 97, 109, 105, 116, 101]); //"OxychromaticBlowfishSwatDynamite"
	
	  state.expandstate(sha2salt, 64, sha2pass, 64);
	  for (i = 0; i < 64; i++) {
	    state.expand0state(sha2salt, 64);
	    state.expand0state(sha2pass, 64);
	  }
	
	  for (i = 0; i < BCRYPT_BLOCKS; i++) {
	    cdata[i] = stream2word(ciphertext, ciphertext.byteLength);
	  }for (i = 0; i < 64; i++) {
	    state.enc(cdata, cdata.byteLength / 8);
	  }for (i = 0; i < BCRYPT_BLOCKS; i++) {
	    out[4 * i + 3] = cdata[i] >>> 24;
	    out[4 * i + 2] = cdata[i] >>> 16;
	    out[4 * i + 1] = cdata[i] >>> 8;
	    out[4 * i + 0] = cdata[i];
	  }
	};
	
	function bcrypt_pbkdf(pass, passlen, salt, saltlen, key, keylen, rounds) {
	  var sha2pass = new Uint8Array(64),
	      sha2salt = new Uint8Array(64),
	      out = new Uint8Array(BCRYPT_HASHSIZE),
	      tmpout = new Uint8Array(BCRYPT_HASHSIZE),
	      countsalt = new Uint8Array(saltlen + 4),
	      i,
	      j,
	      amt,
	      stride,
	      dest,
	      count,
	      origkeylen = keylen;
	
	  if (rounds < 1) return -1;
	  if (passlen === 0 || saltlen === 0 || keylen === 0 || keylen > out.byteLength * out.byteLength || saltlen > 1 << 20) return -1;
	
	  stride = Math.floor((keylen + out.byteLength - 1) / out.byteLength);
	  amt = Math.floor((keylen + stride - 1) / stride);
	
	  for (i = 0; i < saltlen; i++) {
	    countsalt[i] = salt[i];
	  }crypto_hash_sha512(sha2pass, pass, passlen);
	
	  for (count = 1; keylen > 0; count++) {
	    countsalt[saltlen + 0] = count >>> 24;
	    countsalt[saltlen + 1] = count >>> 16;
	    countsalt[saltlen + 2] = count >>> 8;
	    countsalt[saltlen + 3] = count;
	
	    crypto_hash_sha512(sha2salt, countsalt, saltlen + 4);
	    bcrypt_hash(sha2pass, sha2salt, tmpout);
	    for (i = out.byteLength; i--;) {
	      out[i] = tmpout[i];
	    }for (i = 1; i < rounds; i++) {
	      crypto_hash_sha512(sha2salt, tmpout, tmpout.byteLength);
	      bcrypt_hash(sha2pass, sha2salt, tmpout);
	      for (j = 0; j < out.byteLength; j++) {
	        out[j] ^= tmpout[j];
	      }
	    }
	
	    amt = Math.min(amt, keylen);
	    for (i = 0; i < amt; i++) {
	      dest = i * stride + (count - 1);
	      if (dest >= origkeylen) break;
	      key[dest] = out[i];
	    }
	    keylen -= i;
	  }
	
	  return 0;
	};
	
	module.exports = {
	  BLOCKS: BCRYPT_BLOCKS,
	  HASHSIZE: BCRYPT_HASHSIZE,
	  hash: bcrypt_hash,
	  pbkdf: bcrypt_pbkdf
	};

/***/ }),
/* 518 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {'use strict';
	
	// Copyright 2015 Joyent, Inc.
	
	module.exports = {
		read: read,
		write: write
	};
	
	var assert = __webpack_require__(482);
	var rfc4253 = __webpack_require__(515);
	var utils = __webpack_require__(488);
	var Key = __webpack_require__(481);
	var PrivateKey = __webpack_require__(489);
	
	var sshpriv = __webpack_require__(514);
	
	/*JSSTYLED*/
	var SSHKEY_RE = /^([a-z0-9-]+)[ \t]+([a-zA-Z0-9+\/]+[=]*)([\n \t]+([^\n]+))?$/;
	/*JSSTYLED*/
	var SSHKEY_RE2 = /^([a-z0-9-]+)[ \t]+([a-zA-Z0-9+\/ \t\n]+[=]*)(.*)$/;
	
	function read(buf, options) {
		if (typeof buf !== 'string') {
			assert.buffer(buf, 'buf');
			buf = buf.toString('ascii');
		}
	
		var trimmed = buf.trim().replace(/[\\\r]/g, '');
		var m = trimmed.match(SSHKEY_RE);
		if (!m) m = trimmed.match(SSHKEY_RE2);
		assert.ok(m, 'key must match regex');
	
		var type = rfc4253.algToKeyType(m[1]);
		var kbuf = new Buffer(m[2], 'base64');
	
		/*
	  * This is a bit tricky. If we managed to parse the key and locate the
	  * key comment with the regex, then do a non-partial read and assert
	  * that we have consumed all bytes. If we couldn't locate the key
	  * comment, though, there may be whitespace shenanigans going on that
	  * have conjoined the comment to the rest of the key. We do a partial
	  * read in this case to try to make the best out of a sorry situation.
	  */
		var key;
		var ret = {};
		if (m[4]) {
			try {
				key = rfc4253.read(kbuf);
			} catch (e) {
				m = trimmed.match(SSHKEY_RE2);
				assert.ok(m, 'key must match regex');
				kbuf = new Buffer(m[2], 'base64');
				key = rfc4253.readInternal(ret, 'public', kbuf);
			}
		} else {
			key = rfc4253.readInternal(ret, 'public', kbuf);
		}
	
		assert.strictEqual(type, key.type);
	
		if (m[4] && m[4].length > 0) {
			key.comment = m[4];
		} else if (ret.consumed) {
			/*
	   * Now the magic: trying to recover the key comment when it's
	   * gotten conjoined to the key or otherwise shenanigan'd.
	   *
	   * Work out how much base64 we used, then drop all non-base64
	   * chars from the beginning up to this point in the the string.
	   * Then offset in this and try to make up for missing = chars.
	   */
			var data = m[2] + m[3];
			var realOffset = Math.ceil(ret.consumed / 3) * 4;
			data = data.slice(0, realOffset - 2). /*JSSTYLED*/
			replace(/[^a-zA-Z0-9+\/=]/g, '') + data.slice(realOffset - 2);
	
			var padding = ret.consumed % 3;
			if (padding > 0 && data.slice(realOffset - 1, realOffset) !== '=') realOffset--;
			while (data.slice(realOffset, realOffset + 1) === '=') {
				realOffset++;
			} /* Finally, grab what we think is the comment & clean it up. */
			var trailer = data.slice(realOffset);
			trailer = trailer.replace(/[\r\n]/g, ' ').replace(/^\s+/, '');
			if (trailer.match(/^[a-zA-Z0-9]/)) key.comment = trailer;
		}
	
		return key;
	}
	
	function write(key, options) {
		assert.object(key);
		if (!Key.isKey(key)) throw new Error('Must be a public key');
	
		var parts = [];
		var alg = rfc4253.keyTypeToAlg(key);
		parts.push(alg);
	
		var buf = rfc4253.write(key);
		parts.push(buf.toString('base64'));
	
		if (key.comment) parts.push(key.comment);
	
		return new Buffer(parts.join(' '));
	}
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(290).Buffer))

/***/ }),
/* 519 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {'use strict';
	
	// Copyright 2017 Joyent, Inc.
	
	module.exports = Identity;
	
	var assert = __webpack_require__(482);
	var algs = __webpack_require__(483);
	var crypto = __webpack_require__(392);
	var Fingerprint = __webpack_require__(484);
	var Signature = __webpack_require__(487);
	var errs = __webpack_require__(485);
	var util = __webpack_require__(271);
	var utils = __webpack_require__(488);
	var asn1 = __webpack_require__(506);
	
	/*JSSTYLED*/
	var DNS_NAME_RE = /^([*]|[a-z0-9][a-z0-9\-]{0,62})(?:\.([*]|[a-z0-9][a-z0-9\-]{0,62}))*$/i;
	
	var oids = {};
	oids.cn = '2.5.4.3';
	oids.o = '2.5.4.10';
	oids.ou = '2.5.4.11';
	oids.l = '2.5.4.7';
	oids.s = '2.5.4.8';
	oids.c = '2.5.4.6';
	oids.sn = '2.5.4.4';
	oids.dc = '0.9.2342.19200300.100.1.25';
	oids.uid = '0.9.2342.19200300.100.1.1';
	oids.mail = '0.9.2342.19200300.100.1.3';
	
	var unoids = {};
	Object.keys(oids).forEach(function (k) {
		unoids[oids[k]] = k;
	});
	
	function Identity(opts) {
		var self = this;
		assert.object(opts, 'options');
		assert.arrayOfObject(opts.components, 'options.components');
		this.components = opts.components;
		this.componentLookup = {};
		this.components.forEach(function (c) {
			if (c.name && !c.oid) c.oid = oids[c.name];
			if (c.oid && !c.name) c.name = unoids[c.oid];
			if (self.componentLookup[c.name] === undefined) self.componentLookup[c.name] = [];
			self.componentLookup[c.name].push(c);
		});
		if (this.componentLookup.cn && this.componentLookup.cn.length > 0) {
			this.cn = this.componentLookup.cn[0].value;
		}
		assert.optionalString(opts.type, 'options.type');
		if (opts.type === undefined) {
			if (this.components.length === 1 && this.componentLookup.cn && this.componentLookup.cn.length === 1 && this.componentLookup.cn[0].value.match(DNS_NAME_RE)) {
				this.type = 'host';
				this.hostname = this.componentLookup.cn[0].value;
			} else if (this.componentLookup.dc && this.components.length === this.componentLookup.dc.length) {
				this.type = 'host';
				this.hostname = this.componentLookup.dc.map(function (c) {
					return c.value;
				}).join('.');
			} else if (this.componentLookup.uid && this.components.length === this.componentLookup.uid.length) {
				this.type = 'user';
				this.uid = this.componentLookup.uid[0].value;
			} else if (this.componentLookup.cn && this.componentLookup.cn.length === 1 && this.componentLookup.cn[0].value.match(DNS_NAME_RE)) {
				this.type = 'host';
				this.hostname = this.componentLookup.cn[0].value;
			} else if (this.componentLookup.uid && this.componentLookup.uid.length === 1) {
				this.type = 'user';
				this.uid = this.componentLookup.uid[0].value;
			} else if (this.componentLookup.mail && this.componentLookup.mail.length === 1) {
				this.type = 'email';
				this.email = this.componentLookup.mail[0].value;
			} else if (this.componentLookup.cn && this.componentLookup.cn.length === 1) {
				this.type = 'user';
				this.uid = this.componentLookup.cn[0].value;
			} else {
				this.type = 'unknown';
			}
		} else {
			this.type = opts.type;
			if (this.type === 'host') this.hostname = opts.hostname;else if (this.type === 'user') this.uid = opts.uid;else if (this.type === 'email') this.email = opts.email;else throw new Error('Unknown type ' + this.type);
		}
	}
	
	Identity.prototype.toString = function () {
		return this.components.map(function (c) {
			return c.name.toUpperCase() + '=' + c.value;
		}).join(', ');
	};
	
	/*
	 * These are from X.680 -- PrintableString allowed chars are in section 37.4
	 * table 8. Spec for IA5Strings is "1,6 + SPACE + DEL" where 1 refers to
	 * ISO IR #001 (standard ASCII control characters) and 6 refers to ISO IR #006
	 * (the basic ASCII character set).
	 */
	/* JSSTYLED */
	var NOT_PRINTABLE = /[^a-zA-Z0-9 '(),+.\/:=?-]/;
	/* JSSTYLED */
	var NOT_IA5 = /[^\x00-\x7f]/;
	
	Identity.prototype.toAsn1 = function (der, tag) {
		der.startSequence(tag);
		this.components.forEach(function (c) {
			der.startSequence(asn1.Ber.Constructor | asn1.Ber.Set);
			der.startSequence();
			der.writeOID(c.oid);
			/*
	   * If we fit in a PrintableString, use that. Otherwise use an
	   * IA5String or UTF8String.
	   */
			if (c.value.match(NOT_IA5)) {
				var v = new Buffer(c.value, 'utf8');
				der.writeBuffer(v, asn1.Ber.Utf8String);
			} else if (c.value.match(NOT_PRINTABLE)) {
				der.writeString(c.value, asn1.Ber.IA5String);
			} else {
				der.writeString(c.value, asn1.Ber.PrintableString);
			}
			der.endSequence();
			der.endSequence();
		});
		der.endSequence();
	};
	
	function globMatch(a, b) {
		if (a === '**' || b === '**') return true;
		var aParts = a.split('.');
		var bParts = b.split('.');
		if (aParts.length !== bParts.length) return false;
		for (var i = 0; i < aParts.length; ++i) {
			if (aParts[i] === '*' || bParts[i] === '*') continue;
			if (aParts[i] !== bParts[i]) return false;
		}
		return true;
	}
	
	Identity.prototype.equals = function (other) {
		if (!Identity.isIdentity(other, [1, 0])) return false;
		if (other.components.length !== this.components.length) return false;
		for (var i = 0; i < this.components.length; ++i) {
			if (this.components[i].oid !== other.components[i].oid) return false;
			if (!globMatch(this.components[i].value, other.components[i].value)) {
				return false;
			}
		}
		return true;
	};
	
	Identity.forHost = function (hostname) {
		assert.string(hostname, 'hostname');
		return new Identity({
			type: 'host',
			hostname: hostname,
			components: [{ name: 'cn', value: hostname }]
		});
	};
	
	Identity.forUser = function (uid) {
		assert.string(uid, 'uid');
		return new Identity({
			type: 'user',
			uid: uid,
			components: [{ name: 'uid', value: uid }]
		});
	};
	
	Identity.forEmail = function (email) {
		assert.string(email, 'email');
		return new Identity({
			type: 'email',
			email: email,
			components: [{ name: 'mail', value: email }]
		});
	};
	
	Identity.parseDN = function (dn) {
		assert.string(dn, 'dn');
		var parts = dn.split(',');
		var cmps = parts.map(function (c) {
			c = c.trim();
			var eqPos = c.indexOf('=');
			var name = c.slice(0, eqPos).toLowerCase();
			var value = c.slice(eqPos + 1);
			return { name: name, value: value };
		});
		return new Identity({ components: cmps });
	};
	
	Identity.parseAsn1 = function (der, top) {
		var components = [];
		der.readSequence(top);
		var end = der.offset + der.length;
		while (der.offset < end) {
			der.readSequence(asn1.Ber.Constructor | asn1.Ber.Set);
			var after = der.offset + der.length;
			der.readSequence();
			var oid = der.readOID();
			var type = der.peek();
			var value;
			switch (type) {
				case asn1.Ber.PrintableString:
				case asn1.Ber.IA5String:
				case asn1.Ber.OctetString:
				case asn1.Ber.T61String:
					value = der.readString(type);
					break;
				case asn1.Ber.Utf8String:
					value = der.readString(type, true);
					value = value.toString('utf8');
					break;
				case asn1.Ber.CharacterString:
				case asn1.Ber.BMPString:
					value = der.readString(type, true);
					value = value.toString('utf16le');
					break;
				default:
					throw new Error('Unknown asn1 type ' + type);
			}
			components.push({ oid: oid, value: value });
			der._offset = after;
		}
		der._offset = end;
		return new Identity({
			components: components
		});
	};
	
	Identity.isIdentity = function (obj, ver) {
		return utils.isCompatible(obj, Identity, ver);
	};
	
	/*
	 * API versions for Identity:
	 * [1,0] -- initial ver
	 */
	Identity.prototype._sshpkApiVersion = [1, 0];
	
	Identity._oldVersionDetect = function (obj) {
		return [1, 0];
	};
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(290).Buffer))

/***/ }),
/* 520 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {'use strict';
	
	// Copyright 2017 Joyent, Inc.
	
	module.exports = {
		read: read,
		verify: verify,
		sign: sign,
		signAsync: signAsync,
		write: write,
	
		/* Internal private API */
		fromBuffer: fromBuffer,
		toBuffer: toBuffer
	};
	
	var assert = __webpack_require__(482);
	var SSHBuffer = __webpack_require__(516);
	var crypto = __webpack_require__(392);
	var algs = __webpack_require__(483);
	var Key = __webpack_require__(481);
	var PrivateKey = __webpack_require__(489);
	var Identity = __webpack_require__(519);
	var rfc4253 = __webpack_require__(515);
	var Signature = __webpack_require__(487);
	var utils = __webpack_require__(488);
	var Certificate = __webpack_require__(486);
	
	function verify(cert, key) {
		/*
	  * We always give an issuerKey, so if our verify() is being called then
	  * there was no signature. Return false.
	  */
		return false;
	}
	
	var TYPES = {
		'user': 1,
		'host': 2
	};
	Object.keys(TYPES).forEach(function (k) {
		TYPES[TYPES[k]] = k;
	});
	
	var ECDSA_ALGO = /^ecdsa-sha2-([^@-]+)-cert-v01@openssh.com$/;
	
	function read(buf, options) {
		if (Buffer.isBuffer(buf)) buf = buf.toString('ascii');
		var parts = buf.trim().split(/[ \t\n]+/g);
		if (parts.length < 2 || parts.length > 3) throw new Error('Not a valid SSH certificate line');
	
		var algo = parts[0];
		var data = parts[1];
	
		data = new Buffer(data, 'base64');
		return fromBuffer(data, algo);
	}
	
	function fromBuffer(data, algo, partial) {
		var sshbuf = new SSHBuffer({ buffer: data });
		var innerAlgo = sshbuf.readString();
		if (algo !== undefined && innerAlgo !== algo) throw new Error('SSH certificate algorithm mismatch');
		if (algo === undefined) algo = innerAlgo;
	
		var cert = {};
		cert.signatures = {};
		cert.signatures.openssh = {};
	
		cert.signatures.openssh.nonce = sshbuf.readBuffer();
	
		var key = {};
		var parts = key.parts = [];
		key.type = getAlg(algo);
	
		var partCount = algs.info[key.type].parts.length;
		while (parts.length < partCount) {
			parts.push(sshbuf.readPart());
		}assert.ok(parts.length >= 1, 'key must have at least one part');
	
		var algInfo = algs.info[key.type];
		if (key.type === 'ecdsa') {
			var res = ECDSA_ALGO.exec(algo);
			assert.ok(res !== null);
			assert.strictEqual(res[1], parts[0].data.toString());
		}
	
		for (var i = 0; i < algInfo.parts.length; ++i) {
			parts[i].name = algInfo.parts[i];
			if (parts[i].name !== 'curve' && algInfo.normalize !== false) {
				var p = parts[i];
				p.data = utils.mpNormalize(p.data);
			}
		}
	
		cert.subjectKey = new Key(key);
	
		cert.serial = sshbuf.readInt64();
	
		var type = TYPES[sshbuf.readInt()];
		assert.string(type, 'valid cert type');
	
		cert.signatures.openssh.keyId = sshbuf.readString();
	
		var principals = [];
		var pbuf = sshbuf.readBuffer();
		var psshbuf = new SSHBuffer({ buffer: pbuf });
		while (!psshbuf.atEnd()) {
			principals.push(psshbuf.readString());
		}if (principals.length === 0) principals = ['*'];
	
		cert.subjects = principals.map(function (pr) {
			if (type === 'user') return Identity.forUser(pr);else if (type === 'host') return Identity.forHost(pr);
			throw new Error('Unknown identity type ' + type);
		});
	
		cert.validFrom = int64ToDate(sshbuf.readInt64());
		cert.validUntil = int64ToDate(sshbuf.readInt64());
	
		cert.signatures.openssh.critical = sshbuf.readBuffer();
		cert.signatures.openssh.exts = sshbuf.readBuffer();
	
		/* reserved */
		sshbuf.readBuffer();
	
		var signingKeyBuf = sshbuf.readBuffer();
		cert.issuerKey = rfc4253.read(signingKeyBuf);
	
		/*
	  * OpenSSH certs don't give the identity of the issuer, just their
	  * public key. So, we use an Identity that matches anything. The
	  * isSignedBy() function will later tell you if the key matches.
	  */
		cert.issuer = Identity.forHost('**');
	
		var sigBuf = sshbuf.readBuffer();
		cert.signatures.openssh.signature = Signature.parse(sigBuf, cert.issuerKey.type, 'ssh');
	
		if (partial !== undefined) {
			partial.remainder = sshbuf.remainder();
			partial.consumed = sshbuf._offset;
		}
	
		return new Certificate(cert);
	}
	
	function int64ToDate(buf) {
		var i = buf.readUInt32BE(0) * 4294967296;
		i += buf.readUInt32BE(4);
		var d = new Date();
		d.setTime(i * 1000);
		d.sourceInt64 = buf;
		return d;
	}
	
	function dateToInt64(date) {
		if (date.sourceInt64 !== undefined) return date.sourceInt64;
		var i = Math.round(date.getTime() / 1000);
		var upper = Math.floor(i / 4294967296);
		var lower = Math.floor(i % 4294967296);
		var buf = new Buffer(8);
		buf.writeUInt32BE(upper, 0);
		buf.writeUInt32BE(lower, 4);
		return buf;
	}
	
	function sign(cert, key) {
		if (cert.signatures.openssh === undefined) cert.signatures.openssh = {};
		try {
			var blob = toBuffer(cert, true);
		} catch (e) {
			delete cert.signatures.openssh;
			return false;
		}
		var sig = cert.signatures.openssh;
		var hashAlgo = undefined;
		if (key.type === 'rsa' || key.type === 'dsa') hashAlgo = 'sha1';
		var signer = key.createSign(hashAlgo);
		signer.write(blob);
		sig.signature = signer.sign();
		return true;
	}
	
	function signAsync(cert, signer, done) {
		if (cert.signatures.openssh === undefined) cert.signatures.openssh = {};
		try {
			var blob = toBuffer(cert, true);
		} catch (e) {
			delete cert.signatures.openssh;
			done(e);
			return;
		}
		var sig = cert.signatures.openssh;
	
		signer(blob, function (err, signature) {
			if (err) {
				done(err);
				return;
			}
			try {
				/*
	    * This will throw if the signature isn't of a
	    * type/algo that can be used for SSH.
	    */
				signature.toBuffer('ssh');
			} catch (e) {
				done(e);
				return;
			}
			sig.signature = signature;
			done();
		});
	}
	
	function write(cert, options) {
		if (options === undefined) options = {};
	
		var blob = toBuffer(cert);
		var out = getCertType(cert.subjectKey) + ' ' + blob.toString('base64');
		if (options.comment) out = out + ' ' + options.comment;
		return out;
	}
	
	function toBuffer(cert, noSig) {
		assert.object(cert.signatures.openssh, 'signature for openssh format');
		var sig = cert.signatures.openssh;
	
		if (sig.nonce === undefined) sig.nonce = crypto.randomBytes(16);
		var buf = new SSHBuffer({});
		buf.writeString(getCertType(cert.subjectKey));
		buf.writeBuffer(sig.nonce);
	
		var key = cert.subjectKey;
		var algInfo = algs.info[key.type];
		algInfo.parts.forEach(function (part) {
			buf.writePart(key.part[part]);
		});
	
		buf.writeInt64(cert.serial);
	
		var type = cert.subjects[0].type;
		assert.notStrictEqual(type, 'unknown');
		cert.subjects.forEach(function (id) {
			assert.strictEqual(id.type, type);
		});
		type = TYPES[type];
		buf.writeInt(type);
	
		if (sig.keyId === undefined) {
			sig.keyId = cert.subjects[0].type + '_' + (cert.subjects[0].uid || cert.subjects[0].hostname);
		}
		buf.writeString(sig.keyId);
	
		var sub = new SSHBuffer({});
		cert.subjects.forEach(function (id) {
			if (type === TYPES.host) sub.writeString(id.hostname);else if (type === TYPES.user) sub.writeString(id.uid);
		});
		buf.writeBuffer(sub.toBuffer());
	
		buf.writeInt64(dateToInt64(cert.validFrom));
		buf.writeInt64(dateToInt64(cert.validUntil));
	
		if (sig.critical === undefined) sig.critical = new Buffer(0);
		buf.writeBuffer(sig.critical);
	
		if (sig.exts === undefined) sig.exts = new Buffer(0);
		buf.writeBuffer(sig.exts);
	
		/* reserved */
		buf.writeBuffer(new Buffer(0));
	
		sub = rfc4253.write(cert.issuerKey);
		buf.writeBuffer(sub);
	
		if (!noSig) buf.writeBuffer(sig.signature.toBuffer('ssh'));
	
		return buf.toBuffer();
	}
	
	function getAlg(certType) {
		if (certType === 'ssh-rsa-cert-v01@openssh.com') return 'rsa';
		if (certType === 'ssh-dss-cert-v01@openssh.com') return 'dsa';
		if (certType.match(ECDSA_ALGO)) return 'ecdsa';
		if (certType === 'ssh-ed25519-cert-v01@openssh.com') return 'ed25519';
		throw new Error('Unsupported cert type ' + certType);
	}
	
	function getCertType(key) {
		if (key.type === 'rsa') return 'ssh-rsa-cert-v01@openssh.com';
		if (key.type === 'dsa') return 'ssh-dss-cert-v01@openssh.com';
		if (key.type === 'ecdsa') return 'ecdsa-sha2-' + key.curve + '-cert-v01@openssh.com';
		if (key.type === 'ed25519') return 'ssh-ed25519-cert-v01@openssh.com';
		throw new Error('Unsupported key type ' + key.type);
	}
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(290).Buffer))

/***/ }),
/* 521 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {'use strict';
	
	// Copyright 2017 Joyent, Inc.
	
	module.exports = {
		read: read,
		verify: verify,
		sign: sign,
		signAsync: signAsync,
		write: write
	};
	
	var assert = __webpack_require__(482);
	var asn1 = __webpack_require__(506);
	var algs = __webpack_require__(483);
	var utils = __webpack_require__(488);
	var Key = __webpack_require__(481);
	var PrivateKey = __webpack_require__(489);
	var pem = __webpack_require__(505);
	var Identity = __webpack_require__(519);
	var Signature = __webpack_require__(487);
	var Certificate = __webpack_require__(486);
	var pkcs8 = __webpack_require__(513);
	
	/*
	 * This file is based on RFC5280 (X.509).
	 */
	
	/* Helper to read in a single mpint */
	function readMPInt(der, nm) {
		assert.strictEqual(der.peek(), asn1.Ber.Integer, nm + ' is not an Integer');
		return utils.mpNormalize(der.readString(asn1.Ber.Integer, true));
	}
	
	function verify(cert, key) {
		var sig = cert.signatures.x509;
		assert.object(sig, 'x509 signature');
	
		var algParts = sig.algo.split('-');
		if (algParts[0] !== key.type) return false;
	
		var blob = sig.cache;
		if (blob === undefined) {
			var der = new asn1.BerWriter();
			writeTBSCert(cert, der);
			blob = der.buffer;
		}
	
		var verifier = key.createVerify(algParts[1]);
		verifier.write(blob);
		return verifier.verify(sig.signature);
	}
	
	function Local(i) {
		return asn1.Ber.Context | asn1.Ber.Constructor | i;
	}
	
	function Context(i) {
		return asn1.Ber.Context | i;
	}
	
	var SIGN_ALGS = {
		'rsa-md5': '1.2.840.113549.1.1.4',
		'rsa-sha1': '1.2.840.113549.1.1.5',
		'rsa-sha256': '1.2.840.113549.1.1.11',
		'rsa-sha384': '1.2.840.113549.1.1.12',
		'rsa-sha512': '1.2.840.113549.1.1.13',
		'dsa-sha1': '1.2.840.10040.4.3',
		'dsa-sha256': '2.16.840.1.101.3.4.3.2',
		'ecdsa-sha1': '1.2.840.10045.4.1',
		'ecdsa-sha256': '1.2.840.10045.4.3.2',
		'ecdsa-sha384': '1.2.840.10045.4.3.3',
		'ecdsa-sha512': '1.2.840.10045.4.3.4'
	};
	Object.keys(SIGN_ALGS).forEach(function (k) {
		SIGN_ALGS[SIGN_ALGS[k]] = k;
	});
	SIGN_ALGS['1.3.14.3.2.3'] = 'rsa-md5';
	SIGN_ALGS['1.3.14.3.2.29'] = 'rsa-sha1';
	
	var EXTS = {
		'issuerKeyId': '2.5.29.35',
		'altName': '2.5.29.17',
		'basicConstraints': '2.5.29.19',
		'keyUsage': '2.5.29.15',
		'extKeyUsage': '2.5.29.37'
	};
	
	function read(buf, options) {
		if (typeof buf === 'string') {
			buf = new Buffer(buf, 'binary');
		}
		assert.buffer(buf, 'buf');
	
		var der = new asn1.BerReader(buf);
	
		der.readSequence();
		if (Math.abs(der.length - der.remain) > 1) {
			throw new Error('DER sequence does not contain whole byte ' + 'stream');
		}
	
		var tbsStart = der.offset;
		der.readSequence();
		var sigOffset = der.offset + der.length;
		var tbsEnd = sigOffset;
	
		if (der.peek() === Local(0)) {
			der.readSequence(Local(0));
			var version = der.readInt();
			assert.ok(version <= 3, 'only x.509 versions up to v3 supported');
		}
	
		var cert = {};
		cert.signatures = {};
		var sig = cert.signatures.x509 = {};
		sig.extras = {};
	
		cert.serial = readMPInt(der, 'serial');
	
		der.readSequence();
		var after = der.offset + der.length;
		var certAlgOid = der.readOID();
		var certAlg = SIGN_ALGS[certAlgOid];
		if (certAlg === undefined) throw new Error('unknown signature algorithm ' + certAlgOid);
	
		der._offset = after;
		cert.issuer = Identity.parseAsn1(der);
	
		der.readSequence();
		cert.validFrom = readDate(der);
		cert.validUntil = readDate(der);
	
		cert.subjects = [Identity.parseAsn1(der)];
	
		der.readSequence();
		after = der.offset + der.length;
		cert.subjectKey = pkcs8.readPkcs8(undefined, 'public', der);
		der._offset = after;
	
		/* issuerUniqueID */
		if (der.peek() === Local(1)) {
			der.readSequence(Local(1));
			sig.extras.issuerUniqueID = buf.slice(der.offset, der.offset + der.length);
			der._offset += der.length;
		}
	
		/* subjectUniqueID */
		if (der.peek() === Local(2)) {
			der.readSequence(Local(2));
			sig.extras.subjectUniqueID = buf.slice(der.offset, der.offset + der.length);
			der._offset += der.length;
		}
	
		/* extensions */
		if (der.peek() === Local(3)) {
			der.readSequence(Local(3));
			var extEnd = der.offset + der.length;
			der.readSequence();
	
			while (der.offset < extEnd) {
				readExtension(cert, buf, der);
			}assert.strictEqual(der.offset, extEnd);
		}
	
		assert.strictEqual(der.offset, sigOffset);
	
		der.readSequence();
		after = der.offset + der.length;
		var sigAlgOid = der.readOID();
		var sigAlg = SIGN_ALGS[sigAlgOid];
		if (sigAlg === undefined) throw new Error('unknown signature algorithm ' + sigAlgOid);
		der._offset = after;
	
		var sigData = der.readString(asn1.Ber.BitString, true);
		if (sigData[0] === 0) sigData = sigData.slice(1);
		var algParts = sigAlg.split('-');
	
		sig.signature = Signature.parse(sigData, algParts[0], 'asn1');
		sig.signature.hashAlgorithm = algParts[1];
		sig.algo = sigAlg;
		sig.cache = buf.slice(tbsStart, tbsEnd);
	
		return new Certificate(cert);
	}
	
	function readDate(der) {
		if (der.peek() === asn1.Ber.UTCTime) {
			return utcTimeToDate(der.readString(asn1.Ber.UTCTime));
		} else if (der.peek() === asn1.Ber.GeneralizedTime) {
			return gTimeToDate(der.readString(asn1.Ber.GeneralizedTime));
		} else {
			throw new Error('Unsupported date format');
		}
	}
	
	/* RFC5280, section 4.2.1.6 (GeneralName type) */
	var ALTNAME = {
		OtherName: Local(0),
		RFC822Name: Context(1),
		DNSName: Context(2),
		X400Address: Local(3),
		DirectoryName: Local(4),
		EDIPartyName: Local(5),
		URI: Context(6),
		IPAddress: Context(7),
		OID: Context(8)
	};
	
	/* RFC5280, section 4.2.1.12 (KeyPurposeId) */
	var EXTPURPOSE = {
		'serverAuth': '1.3.6.1.5.5.7.3.1',
		'clientAuth': '1.3.6.1.5.5.7.3.2',
		'codeSigning': '1.3.6.1.5.5.7.3.3',
	
		/* See https://github.com/joyent/oid-docs/blob/master/root.md */
		'joyentDocker': '1.3.6.1.4.1.38678.1.4.1',
		'joyentCmon': '1.3.6.1.4.1.38678.1.4.2'
	};
	var EXTPURPOSE_REV = {};
	Object.keys(EXTPURPOSE).forEach(function (k) {
		EXTPURPOSE_REV[EXTPURPOSE[k]] = k;
	});
	
	var KEYUSEBITS = ['signature', 'identity', 'keyEncryption', 'encryption', 'keyAgreement', 'ca', 'crl'];
	
	function readExtension(cert, buf, der) {
		der.readSequence();
		var after = der.offset + der.length;
		var extId = der.readOID();
		var id;
		var sig = cert.signatures.x509;
		sig.extras.exts = [];
	
		var critical;
		if (der.peek() === asn1.Ber.Boolean) critical = der.readBoolean();
	
		switch (extId) {
			case EXTS.basicConstraints:
				der.readSequence(asn1.Ber.OctetString);
				der.readSequence();
				var bcEnd = der.offset + der.length;
				var ca = false;
				if (der.peek() === asn1.Ber.Boolean) ca = der.readBoolean();
				if (cert.purposes === undefined) cert.purposes = [];
				if (ca === true) cert.purposes.push('ca');
				var bc = { oid: extId, critical: critical };
				if (der.offset < bcEnd && der.peek() === asn1.Ber.Integer) bc.pathLen = der.readInt();
				sig.extras.exts.push(bc);
				break;
			case EXTS.extKeyUsage:
				der.readSequence(asn1.Ber.OctetString);
				der.readSequence();
				if (cert.purposes === undefined) cert.purposes = [];
				var ekEnd = der.offset + der.length;
				while (der.offset < ekEnd) {
					var oid = der.readOID();
					cert.purposes.push(EXTPURPOSE_REV[oid] || oid);
				}
				/*
	    * This is a bit of a hack: in the case where we have a cert
	    * that's only allowed to do serverAuth or clientAuth (and not
	    * the other), we want to make sure all our Subjects are of
	    * the right type. But we already parsed our Subjects and
	    * decided if they were hosts or users earlier (since it appears
	    * first in the cert).
	    *
	    * So we go through and mutate them into the right kind here if
	    * it doesn't match. This might not be hugely beneficial, as it
	    * seems that single-purpose certs are not often seen in the
	    * wild.
	    */
				if (cert.purposes.indexOf('serverAuth') !== -1 && cert.purposes.indexOf('clientAuth') === -1) {
					cert.subjects.forEach(function (ide) {
						if (ide.type !== 'host') {
							ide.type = 'host';
							ide.hostname = ide.uid || ide.email || ide.components[0].value;
						}
					});
				} else if (cert.purposes.indexOf('clientAuth') !== -1 && cert.purposes.indexOf('serverAuth') === -1) {
					cert.subjects.forEach(function (ide) {
						if (ide.type !== 'user') {
							ide.type = 'user';
							ide.uid = ide.hostname || ide.email || ide.components[0].value;
						}
					});
				}
				sig.extras.exts.push({ oid: extId, critical: critical });
				break;
			case EXTS.keyUsage:
				der.readSequence(asn1.Ber.OctetString);
				var bits = der.readString(asn1.Ber.BitString, true);
				var setBits = readBitField(bits, KEYUSEBITS);
				setBits.forEach(function (bit) {
					if (cert.purposes === undefined) cert.purposes = [];
					if (cert.purposes.indexOf(bit) === -1) cert.purposes.push(bit);
				});
				sig.extras.exts.push({ oid: extId, critical: critical,
					bits: bits });
				break;
			case EXTS.altName:
				der.readSequence(asn1.Ber.OctetString);
				der.readSequence();
				var aeEnd = der.offset + der.length;
				while (der.offset < aeEnd) {
					switch (der.peek()) {
						case ALTNAME.OtherName:
						case ALTNAME.EDIPartyName:
							der.readSequence();
							der._offset += der.length;
							break;
						case ALTNAME.OID:
							der.readOID(ALTNAME.OID);
							break;
						case ALTNAME.RFC822Name:
							/* RFC822 specifies email addresses */
							var email = der.readString(ALTNAME.RFC822Name);
							id = Identity.forEmail(email);
							if (!cert.subjects[0].equals(id)) cert.subjects.push(id);
							break;
						case ALTNAME.DirectoryName:
							der.readSequence(ALTNAME.DirectoryName);
							id = Identity.parseAsn1(der);
							if (!cert.subjects[0].equals(id)) cert.subjects.push(id);
							break;
						case ALTNAME.DNSName:
							var host = der.readString(ALTNAME.DNSName);
							id = Identity.forHost(host);
							if (!cert.subjects[0].equals(id)) cert.subjects.push(id);
							break;
						default:
							der.readString(der.peek());
							break;
					}
				}
				sig.extras.exts.push({ oid: extId, critical: critical });
				break;
			default:
				sig.extras.exts.push({
					oid: extId,
					critical: critical,
					data: der.readString(asn1.Ber.OctetString, true)
				});
				break;
		}
	
		der._offset = after;
	}
	
	var UTCTIME_RE = /^([0-9]{2})([0-9]{2})([0-9]{2})([0-9]{2})([0-9]{2})([0-9]{2})?Z$/;
	function utcTimeToDate(t) {
		var m = t.match(UTCTIME_RE);
		assert.ok(m, 'timestamps must be in UTC');
		var d = new Date();
	
		var thisYear = d.getUTCFullYear();
		var century = Math.floor(thisYear / 100) * 100;
	
		var year = parseInt(m[1], 10);
		if (thisYear % 100 < 50 && year >= 60) year += century - 1;else year += century;
		d.setUTCFullYear(year, parseInt(m[2], 10) - 1, parseInt(m[3], 10));
		d.setUTCHours(parseInt(m[4], 10), parseInt(m[5], 10));
		if (m[6] && m[6].length > 0) d.setUTCSeconds(parseInt(m[6], 10));
		return d;
	}
	
	var GTIME_RE = /^([0-9]{4})([0-9]{2})([0-9]{2})([0-9]{2})([0-9]{2})([0-9]{2})?Z$/;
	function gTimeToDate(t) {
		var m = t.match(GTIME_RE);
		assert.ok(m);
		var d = new Date();
	
		d.setUTCFullYear(parseInt(m[1], 10), parseInt(m[2], 10) - 1, parseInt(m[3], 10));
		d.setUTCHours(parseInt(m[4], 10), parseInt(m[5], 10));
		if (m[6] && m[6].length > 0) d.setUTCSeconds(parseInt(m[6], 10));
		return d;
	}
	
	function zeroPad(n) {
		var s = '' + n;
		while (s.length < 2) {
			s = '0' + s;
		}return s;
	}
	
	function dateToUTCTime(d) {
		var s = '';
		s += zeroPad(d.getUTCFullYear() % 100);
		s += zeroPad(d.getUTCMonth() + 1);
		s += zeroPad(d.getUTCDate());
		s += zeroPad(d.getUTCHours());
		s += zeroPad(d.getUTCMinutes());
		s += zeroPad(d.getUTCSeconds());
		s += 'Z';
		return s;
	}
	
	function sign(cert, key) {
		if (cert.signatures.x509 === undefined) cert.signatures.x509 = {};
		var sig = cert.signatures.x509;
	
		sig.algo = key.type + '-' + key.defaultHashAlgorithm();
		if (SIGN_ALGS[sig.algo] === undefined) return false;
	
		var der = new asn1.BerWriter();
		writeTBSCert(cert, der);
		var blob = der.buffer;
		sig.cache = blob;
	
		var signer = key.createSign();
		signer.write(blob);
		cert.signatures.x509.signature = signer.sign();
	
		return true;
	}
	
	function signAsync(cert, signer, done) {
		if (cert.signatures.x509 === undefined) cert.signatures.x509 = {};
		var sig = cert.signatures.x509;
	
		var der = new asn1.BerWriter();
		writeTBSCert(cert, der);
		var blob = der.buffer;
		sig.cache = blob;
	
		signer(blob, function (err, signature) {
			if (err) {
				done(err);
				return;
			}
			sig.algo = signature.type + '-' + signature.hashAlgorithm;
			if (SIGN_ALGS[sig.algo] === undefined) {
				done(new Error('Invalid signing algorithm "' + sig.algo + '"'));
				return;
			}
			sig.signature = signature;
			done();
		});
	}
	
	function write(cert, options) {
		var sig = cert.signatures.x509;
		assert.object(sig, 'x509 signature');
	
		var der = new asn1.BerWriter();
		der.startSequence();
		if (sig.cache) {
			der._ensure(sig.cache.length);
			sig.cache.copy(der._buf, der._offset);
			der._offset += sig.cache.length;
		} else {
			writeTBSCert(cert, der);
		}
	
		der.startSequence();
		der.writeOID(SIGN_ALGS[sig.algo]);
		if (sig.algo.match(/^rsa-/)) der.writeNull();
		der.endSequence();
	
		var sigData = sig.signature.toBuffer('asn1');
		var data = new Buffer(sigData.length + 1);
		data[0] = 0;
		sigData.copy(data, 1);
		der.writeBuffer(data, asn1.Ber.BitString);
		der.endSequence();
	
		return der.buffer;
	}
	
	function writeTBSCert(cert, der) {
		var sig = cert.signatures.x509;
		assert.object(sig, 'x509 signature');
	
		der.startSequence();
	
		der.startSequence(Local(0));
		der.writeInt(2);
		der.endSequence();
	
		der.writeBuffer(utils.mpNormalize(cert.serial), asn1.Ber.Integer);
	
		der.startSequence();
		der.writeOID(SIGN_ALGS[sig.algo]);
		der.endSequence();
	
		cert.issuer.toAsn1(der);
	
		der.startSequence();
		der.writeString(dateToUTCTime(cert.validFrom), asn1.Ber.UTCTime);
		der.writeString(dateToUTCTime(cert.validUntil), asn1.Ber.UTCTime);
		der.endSequence();
	
		var subject = cert.subjects[0];
		var altNames = cert.subjects.slice(1);
		subject.toAsn1(der);
	
		pkcs8.writePkcs8(der, cert.subjectKey);
	
		if (sig.extras && sig.extras.issuerUniqueID) {
			der.writeBuffer(sig.extras.issuerUniqueID, Local(1));
		}
	
		if (sig.extras && sig.extras.subjectUniqueID) {
			der.writeBuffer(sig.extras.subjectUniqueID, Local(2));
		}
	
		if (altNames.length > 0 || subject.type === 'host' || cert.purposes !== undefined && cert.purposes.length > 0 || sig.extras && sig.extras.exts) {
			der.startSequence(Local(3));
			der.startSequence();
	
			var exts = [];
			if (cert.purposes !== undefined && cert.purposes.length > 0) {
				exts.push({
					oid: EXTS.basicConstraints,
					critical: true
				});
				exts.push({
					oid: EXTS.keyUsage,
					critical: true
				});
				exts.push({
					oid: EXTS.extKeyUsage,
					critical: true
				});
			}
			exts.push({ oid: EXTS.altName });
			if (sig.extras && sig.extras.exts) exts = sig.extras.exts;
	
			for (var i = 0; i < exts.length; ++i) {
				der.startSequence();
				der.writeOID(exts[i].oid);
	
				if (exts[i].critical !== undefined) der.writeBoolean(exts[i].critical);
	
				if (exts[i].oid === EXTS.altName) {
					der.startSequence(asn1.Ber.OctetString);
					der.startSequence();
					if (subject.type === 'host') {
						der.writeString(subject.hostname, Context(2));
					}
					for (var j = 0; j < altNames.length; ++j) {
						if (altNames[j].type === 'host') {
							der.writeString(altNames[j].hostname, ALTNAME.DNSName);
						} else if (altNames[j].type === 'email') {
							der.writeString(altNames[j].email, ALTNAME.RFC822Name);
						} else {
							/*
	       * Encode anything else as a
	       * DN style name for now.
	       */
							der.startSequence(ALTNAME.DirectoryName);
							altNames[j].toAsn1(der);
							der.endSequence();
						}
					}
					der.endSequence();
					der.endSequence();
				} else if (exts[i].oid === EXTS.basicConstraints) {
					der.startSequence(asn1.Ber.OctetString);
					der.startSequence();
					var ca = cert.purposes.indexOf('ca') !== -1;
					var pathLen = exts[i].pathLen;
					der.writeBoolean(ca);
					if (pathLen !== undefined) der.writeInt(pathLen);
					der.endSequence();
					der.endSequence();
				} else if (exts[i].oid === EXTS.extKeyUsage) {
					der.startSequence(asn1.Ber.OctetString);
					der.startSequence();
					cert.purposes.forEach(function (purpose) {
						if (purpose === 'ca') return;
						if (KEYUSEBITS.indexOf(purpose) !== -1) return;
						var oid = purpose;
						if (EXTPURPOSE[purpose] !== undefined) oid = EXTPURPOSE[purpose];
						der.writeOID(oid);
					});
					der.endSequence();
					der.endSequence();
				} else if (exts[i].oid === EXTS.keyUsage) {
					der.startSequence(asn1.Ber.OctetString);
					/*
	     * If we parsed this certificate from a byte
	     * stream (i.e. we didn't generate it in sshpk)
	     * then we'll have a ".bits" property on the
	     * ext with the original raw byte contents.
	     *
	     * If we have this, use it here instead of
	     * regenerating it. This guarantees we output
	     * the same data we parsed, so signatures still
	     * validate.
	     */
					if (exts[i].bits !== undefined) {
						der.writeBuffer(exts[i].bits, asn1.Ber.BitString);
					} else {
						var bits = writeBitField(cert.purposes, KEYUSEBITS);
						der.writeBuffer(bits, asn1.Ber.BitString);
					}
					der.endSequence();
				} else {
					der.writeBuffer(exts[i].data, asn1.Ber.OctetString);
				}
	
				der.endSequence();
			}
	
			der.endSequence();
			der.endSequence();
		}
	
		der.endSequence();
	}
	
	/*
	 * Reads an ASN.1 BER bitfield out of the Buffer produced by doing
	 * `BerReader#readString(asn1.Ber.BitString)`. That function gives us the raw
	 * contents of the BitString tag, which is a count of unused bits followed by
	 * the bits as a right-padded byte string.
	 *
	 * `bits` is the Buffer, `bitIndex` should contain an array of string names
	 * for the bits in the string, ordered starting with bit #0 in the ASN.1 spec.
	 *
	 * Returns an array of Strings, the names of the bits that were set to 1.
	 */
	function readBitField(bits, bitIndex) {
		var bitLen = 8 * (bits.length - 1) - bits[0];
		var setBits = {};
		for (var i = 0; i < bitLen; ++i) {
			var byteN = 1 + Math.floor(i / 8);
			var bit = 7 - i % 8;
			var mask = 1 << bit;
			var bitVal = (bits[byteN] & mask) !== 0;
			var name = bitIndex[i];
			if (bitVal && typeof name === 'string') {
				setBits[name] = true;
			}
		}
		return Object.keys(setBits);
	}
	
	/*
	 * `setBits` is an array of strings, containing the names for each bit that
	 * sould be set to 1. `bitIndex` is same as in `readBitField()`.
	 *
	 * Returns a Buffer, ready to be written out with `BerWriter#writeString()`.
	 */
	function writeBitField(setBits, bitIndex) {
		var bitLen = bitIndex.length;
		var blen = Math.ceil(bitLen / 8);
		var unused = blen * 8 - bitLen;
		var bits = new Buffer(1 + blen);
		bits.fill(0);
		bits[0] = unused;
		for (var i = 0; i < bitLen; ++i) {
			var byteN = 1 + Math.floor(i / 8);
			var bit = 7 - i % 8;
			var mask = 1 << bit;
			var name = bitIndex[i];
			if (name === undefined) continue;
			var bitVal = setBits.indexOf(name) !== -1;
			if (bitVal) {
				bits[byteN] |= mask;
			}
		}
		return bits;
	}
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(290).Buffer))

/***/ }),
/* 522 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {'use strict';
	
	// Copyright 2016 Joyent, Inc.
	
	var x509 = __webpack_require__(521);
	
	module.exports = {
		read: read,
		verify: x509.verify,
		sign: x509.sign,
		write: write
	};
	
	var assert = __webpack_require__(482);
	var asn1 = __webpack_require__(506);
	var algs = __webpack_require__(483);
	var utils = __webpack_require__(488);
	var Key = __webpack_require__(481);
	var PrivateKey = __webpack_require__(489);
	var pem = __webpack_require__(505);
	var Identity = __webpack_require__(519);
	var Signature = __webpack_require__(487);
	var Certificate = __webpack_require__(486);
	
	function read(buf, options) {
		if (typeof buf !== 'string') {
			assert.buffer(buf, 'buf');
			buf = buf.toString('ascii');
		}
	
		var lines = buf.trim().split(/[\r\n]+/g);
	
		var m = lines[0].match( /*JSSTYLED*/
		/[-]+[ ]*BEGIN CERTIFICATE[ ]*[-]+/);
		assert.ok(m, 'invalid PEM header');
	
		var m2 = lines[lines.length - 1].match( /*JSSTYLED*/
		/[-]+[ ]*END CERTIFICATE[ ]*[-]+/);
		assert.ok(m2, 'invalid PEM footer');
	
		var headers = {};
		while (true) {
			lines = lines.slice(1);
			m = lines[0].match( /*JSSTYLED*/
			/^([A-Za-z0-9-]+): (.+)$/);
			if (!m) break;
			headers[m[1].toLowerCase()] = m[2];
		}
	
		/* Chop off the first and last lines */
		lines = lines.slice(0, -1).join('');
		buf = new Buffer(lines, 'base64');
	
		return x509.read(buf, options);
	}
	
	function write(cert, options) {
		var dbuf = x509.write(cert, options);
	
		var header = 'CERTIFICATE';
		var tmp = dbuf.toString('base64');
		var len = tmp.length + tmp.length / 64 + 18 + 16 + header.length * 2 + 10;
		var buf = new Buffer(len);
		var o = 0;
		o += buf.write('-----BEGIN ' + header + '-----\n', o);
		for (var i = 0; i < tmp.length;) {
			var limit = i + 64;
			if (limit > tmp.length) limit = tmp.length;
			o += buf.write(tmp.slice(i, limit), o);
			buf[o++] = 10;
			i = limit;
		}
		o += buf.write('-----END ' + header + '-----\n', o);
	
		return buf.slice(0, o);
	}
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(290).Buffer))

/***/ }),
/* 523 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {'use strict';
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
	
	// Copyright 2012 Joyent, Inc.  All rights reserved.
	
	var assert = __webpack_require__(478);
	var crypto = __webpack_require__(392);
	var http = __webpack_require__(464);
	var util = __webpack_require__(271);
	var sshpk = __webpack_require__(480);
	var jsprim = __webpack_require__(524);
	var utils = __webpack_require__(479);
	
	var sprintf = __webpack_require__(271).format;
	
	var HASH_ALGOS = utils.HASH_ALGOS;
	var PK_ALGOS = utils.PK_ALGOS;
	var InvalidAlgorithmError = utils.InvalidAlgorithmError;
	var HttpSignatureError = utils.HttpSignatureError;
	var validateAlgorithm = utils.validateAlgorithm;
	
	///--- Globals
	
	var AUTHZ_FMT = 'Signature keyId="%s",algorithm="%s",headers="%s",signature="%s"';
	
	///--- Specific Errors
	
	function MissingHeaderError(message) {
	  HttpSignatureError.call(this, message, MissingHeaderError);
	}
	util.inherits(MissingHeaderError, HttpSignatureError);
	
	function StrictParsingError(message) {
	  HttpSignatureError.call(this, message, StrictParsingError);
	}
	util.inherits(StrictParsingError, HttpSignatureError);
	
	/* See createSigner() */
	function RequestSigner(options) {
	  assert.object(options, 'options');
	
	  var alg = [];
	  if (options.algorithm !== undefined) {
	    assert.string(options.algorithm, 'options.algorithm');
	    alg = validateAlgorithm(options.algorithm);
	  }
	  this.rs_alg = alg;
	
	  /*
	   * RequestSigners come in two varieties: ones with an rs_signFunc, and ones
	   * with an rs_signer.
	   *
	   * rs_signFunc-based RequestSigners have to build up their entire signing
	   * string within the rs_lines array and give it to rs_signFunc as a single
	   * concat'd blob. rs_signer-based RequestSigners can add a line at a time to
	   * their signing state by using rs_signer.update(), thus only needing to
	   * buffer the hash function state and one line at a time.
	   */
	  if (options.sign !== undefined) {
	    assert.func(options.sign, 'options.sign');
	    this.rs_signFunc = options.sign;
	  } else if (alg[0] === 'hmac' && options.key !== undefined) {
	    assert.string(options.keyId, 'options.keyId');
	    this.rs_keyId = options.keyId;
	
	    if (typeof options.key !== 'string' && !Buffer.isBuffer(options.key)) throw new TypeError('options.key for HMAC must be a string or Buffer');
	
	    /*
	     * Make an rs_signer for HMACs, not a rs_signFunc -- HMACs digest their
	     * data in chunks rather than requiring it all to be given in one go
	     * at the end, so they are more similar to signers than signFuncs.
	     */
	    this.rs_signer = crypto.createHmac(alg[1].toUpperCase(), options.key);
	    this.rs_signer.sign = function () {
	      var digest = this.digest('base64');
	      return {
	        hashAlgorithm: alg[1],
	        toString: function toString() {
	          return digest;
	        }
	      };
	    };
	  } else if (options.key !== undefined) {
	    var key = options.key;
	    if (typeof key === 'string' || Buffer.isBuffer(key)) key = sshpk.parsePrivateKey(key);
	
	    assert.ok(sshpk.PrivateKey.isPrivateKey(key, [1, 2]), 'options.key must be a sshpk.PrivateKey');
	    this.rs_key = key;
	
	    assert.string(options.keyId, 'options.keyId');
	    this.rs_keyId = options.keyId;
	
	    if (!PK_ALGOS[key.type]) {
	      throw new InvalidAlgorithmError(key.type.toUpperCase() + ' type ' + 'keys are not supported');
	    }
	
	    if (alg[0] !== undefined && key.type !== alg[0]) {
	      throw new InvalidAlgorithmError('options.key must be a ' + alg[0].toUpperCase() + ' key, was given a ' + key.type.toUpperCase() + ' key instead');
	    }
	
	    this.rs_signer = key.createSign(alg[1]);
	  } else {
	    throw new TypeError('options.sign (func) or options.key is required');
	  }
	
	  this.rs_headers = [];
	  this.rs_lines = [];
	}
	
	/**
	 * Adds a header to be signed, with its value, into this signer.
	 *
	 * @param {String} header
	 * @param {String} value
	 * @return {String} value written
	 */
	RequestSigner.prototype.writeHeader = function (header, value) {
	  assert.string(header, 'header');
	  header = header.toLowerCase();
	  assert.string(value, 'value');
	
	  this.rs_headers.push(header);
	
	  if (this.rs_signFunc) {
	    this.rs_lines.push(header + ': ' + value);
	  } else {
	    var line = header + ': ' + value;
	    if (this.rs_headers.length > 0) line = '\n' + line;
	    this.rs_signer.update(line);
	  }
	
	  return value;
	};
	
	/**
	 * Adds a default Date header, returning its value.
	 *
	 * @return {String}
	 */
	RequestSigner.prototype.writeDateHeader = function () {
	  return this.writeHeader('date', jsprim.rfc1123(new Date()));
	};
	
	/**
	 * Adds the request target line to be signed.
	 *
	 * @param {String} method, HTTP method (e.g. 'get', 'post', 'put')
	 * @param {String} path
	 */
	RequestSigner.prototype.writeTarget = function (method, path) {
	  assert.string(method, 'method');
	  assert.string(path, 'path');
	  method = method.toLowerCase();
	  this.writeHeader('(request-target)', method + ' ' + path);
	};
	
	/**
	 * Calculate the value for the Authorization header on this request
	 * asynchronously.
	 *
	 * @param {Func} callback (err, authz)
	 */
	RequestSigner.prototype.sign = function (cb) {
	  assert.func(cb, 'callback');
	
	  if (this.rs_headers.length < 1) throw new Error('At least one header must be signed');
	
	  var alg, authz;
	  if (this.rs_signFunc) {
	    var data = this.rs_lines.join('\n');
	    var self = this;
	    this.rs_signFunc(data, function (err, sig) {
	      if (err) {
	        cb(err);
	        return;
	      }
	      try {
	        assert.object(sig, 'signature');
	        assert.string(sig.keyId, 'signature.keyId');
	        assert.string(sig.algorithm, 'signature.algorithm');
	        assert.string(sig.signature, 'signature.signature');
	        alg = validateAlgorithm(sig.algorithm);
	
	        authz = sprintf(AUTHZ_FMT, sig.keyId, sig.algorithm, self.rs_headers.join(' '), sig.signature);
	      } catch (e) {
	        cb(e);
	        return;
	      }
	      cb(null, authz);
	    });
	  } else {
	    try {
	      var sigObj = this.rs_signer.sign();
	    } catch (e) {
	      cb(e);
	      return;
	    }
	    alg = (this.rs_alg[0] || this.rs_key.type) + '-' + sigObj.hashAlgorithm;
	    var signature = sigObj.toString();
	    authz = sprintf(AUTHZ_FMT, this.rs_keyId, alg, this.rs_headers.join(' '), signature);
	    cb(null, authz);
	  }
	};
	
	///--- Exported API
	
	module.exports = {
	  /**
	   * Identifies whether a given object is a request signer or not.
	   *
	   * @param {Object} object, the object to identify
	   * @returns {Boolean}
	   */
	  isSigner: function isSigner(obj) {
	    if ((typeof obj === 'undefined' ? 'undefined' : _typeof(obj)) === 'object' && obj instanceof RequestSigner) return true;
	    return false;
	  },
	
	  /**
	   * Creates a request signer, used to asynchronously build a signature
	   * for a request (does not have to be an http.ClientRequest).
	   *
	   * @param {Object} options, either:
	   *                   - {String} keyId
	   *                   - {String|Buffer} key
	   *                   - {String} algorithm (optional, required for HMAC)
	   *                 or:
	   *                   - {Func} sign (data, cb)
	   * @return {RequestSigner}
	   */
	  createSigner: function createSigner(options) {
	    return new RequestSigner(options);
	  },
	
	  /**
	   * Adds an 'Authorization' header to an http.ClientRequest object.
	   *
	   * Note that this API will add a Date header if it's not already set. Any
	   * other headers in the options.headers array MUST be present, or this
	   * will throw.
	   *
	   * You shouldn't need to check the return type; it's just there if you want
	   * to be pedantic.
	   *
	   * The optional flag indicates whether parsing should use strict enforcement
	   * of the version draft-cavage-http-signatures-04 of the spec or beyond.
	   * The default is to be loose and support
	   * older versions for compatibility.
	   *
	   * @param {Object} request an instance of http.ClientRequest.
	   * @param {Object} options signing parameters object:
	   *                   - {String} keyId required.
	   *                   - {String} key required (either a PEM or HMAC key).
	   *                   - {Array} headers optional; defaults to ['date'].
	   *                   - {String} algorithm optional (unless key is HMAC);
	   *                              default is the same as the sshpk default
	   *                              signing algorithm for the type of key given
	   *                   - {String} httpVersion optional; defaults to '1.1'.
	   *                   - {Boolean} strict optional; defaults to 'false'.
	   * @return {Boolean} true if Authorization (and optionally Date) were added.
	   * @throws {TypeError} on bad parameter types (input).
	   * @throws {InvalidAlgorithmError} if algorithm was bad or incompatible with
	   *                                 the given key.
	   * @throws {sshpk.KeyParseError} if key was bad.
	   * @throws {MissingHeaderError} if a header to be signed was specified but
	   *                              was not present.
	   */
	  signRequest: function signRequest(request, options) {
	    assert.object(request, 'request');
	    assert.object(options, 'options');
	    assert.optionalString(options.algorithm, 'options.algorithm');
	    assert.string(options.keyId, 'options.keyId');
	    assert.optionalArrayOfString(options.headers, 'options.headers');
	    assert.optionalString(options.httpVersion, 'options.httpVersion');
	
	    if (!request.getHeader('Date')) request.setHeader('Date', jsprim.rfc1123(new Date()));
	    if (!options.headers) options.headers = ['date'];
	    if (!options.httpVersion) options.httpVersion = '1.1';
	
	    var alg = [];
	    if (options.algorithm) {
	      options.algorithm = options.algorithm.toLowerCase();
	      alg = validateAlgorithm(options.algorithm);
	    }
	
	    var i;
	    var stringToSign = '';
	    for (i = 0; i < options.headers.length; i++) {
	      if (typeof options.headers[i] !== 'string') throw new TypeError('options.headers must be an array of Strings');
	
	      var h = options.headers[i].toLowerCase();
	
	      if (h === 'request-line') {
	        if (!options.strict) {
	          /**
	           * We allow headers from the older spec drafts if strict parsing isn't
	           * specified in options.
	           */
	          stringToSign += request.method + ' ' + request.path + ' HTTP/' + options.httpVersion;
	        } else {
	          /* Strict parsing doesn't allow older draft headers. */
	          throw new StrictParsingError('request-line is not a valid header ' + 'with strict parsing enabled.');
	        }
	      } else if (h === '(request-target)') {
	        stringToSign += '(request-target): ' + request.method.toLowerCase() + ' ' + request.path;
	      } else {
	        var value = request.getHeader(h);
	        if (value === undefined || value === '') {
	          throw new MissingHeaderError(h + ' was not in the request');
	        }
	        stringToSign += h + ': ' + value;
	      }
	
	      if (i + 1 < options.headers.length) stringToSign += '\n';
	    }
	
	    /* This is just for unit tests. */
	    if (request.hasOwnProperty('_stringToSign')) {
	      request._stringToSign = stringToSign;
	    }
	
	    var signature;
	    if (alg[0] === 'hmac') {
	      if (typeof options.key !== 'string' && !Buffer.isBuffer(options.key)) throw new TypeError('options.key must be a string or Buffer');
	
	      var hmac = crypto.createHmac(alg[1].toUpperCase(), options.key);
	      hmac.update(stringToSign);
	      signature = hmac.digest('base64');
	    } else {
	      var key = options.key;
	      if (typeof key === 'string' || Buffer.isBuffer(key)) key = sshpk.parsePrivateKey(options.key);
	
	      assert.ok(sshpk.PrivateKey.isPrivateKey(key, [1, 2]), 'options.key must be a sshpk.PrivateKey');
	
	      if (!PK_ALGOS[key.type]) {
	        throw new InvalidAlgorithmError(key.type.toUpperCase() + ' type ' + 'keys are not supported');
	      }
	
	      if (alg[0] !== undefined && key.type !== alg[0]) {
	        throw new InvalidAlgorithmError('options.key must be a ' + alg[0].toUpperCase() + ' key, was given a ' + key.type.toUpperCase() + ' key instead');
	      }
	
	      var signer = key.createSign(alg[1]);
	      signer.update(stringToSign);
	      var sigObj = signer.sign();
	      if (!HASH_ALGOS[sigObj.hashAlgorithm]) {
	        throw new InvalidAlgorithmError(sigObj.hashAlgorithm.toUpperCase() + ' is not a supported hash algorithm');
	      }
	      options.algorithm = key.type + '-' + sigObj.hashAlgorithm;
	      signature = sigObj.toString();
	      assert.notStrictEqual(signature, '', 'empty signature produced');
	    }
	
	    request.setHeader('Authorization', sprintf(AUTHZ_FMT, options.keyId, options.algorithm, options.headers.join(' '), signature));
	
	    return true;
	  }
	
	};
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(290).Buffer))

/***/ }),
/* 524 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
	
	/*
	 * lib/jsprim.js: utilities for primitive JavaScript types
	 */
	
	var mod_assert = __webpack_require__(525);
	var mod_util = __webpack_require__(271);
	
	var mod_extsprintf = __webpack_require__(526);
	var mod_verror = __webpack_require__(527);
	var mod_jsonschema = __webpack_require__(528);
	
	/*
	 * Public interface
	 */
	exports.deepCopy = deepCopy;
	exports.deepEqual = deepEqual;
	exports.isEmpty = isEmpty;
	exports.hasKey = hasKey;
	exports.forEachKey = forEachKey;
	exports.pluck = pluck;
	exports.flattenObject = flattenObject;
	exports.flattenIter = flattenIter;
	exports.validateJsonObject = validateJsonObjectJS;
	exports.validateJsonObjectJS = validateJsonObjectJS;
	exports.randElt = randElt;
	exports.extraProperties = extraProperties;
	exports.mergeObjects = mergeObjects;
	
	exports.startsWith = startsWith;
	exports.endsWith = endsWith;
	
	exports.parseInteger = parseInteger;
	
	exports.iso8601 = iso8601;
	exports.rfc1123 = rfc1123;
	exports.parseDateTime = parseDateTime;
	
	exports.hrtimediff = hrtimeDiff;
	exports.hrtimeDiff = hrtimeDiff;
	exports.hrtimeAccum = hrtimeAccum;
	exports.hrtimeAdd = hrtimeAdd;
	exports.hrtimeNanosec = hrtimeNanosec;
	exports.hrtimeMicrosec = hrtimeMicrosec;
	exports.hrtimeMillisec = hrtimeMillisec;
	
	/*
	 * Deep copy an acyclic *basic* Javascript object.  This only handles basic
	 * scalars (strings, numbers, booleans) and arbitrarily deep arrays and objects
	 * containing these.  This does *not* handle instances of other classes.
	 */
	function deepCopy(obj) {
		var ret, key;
		var marker = '__deepCopy';
	
		if (obj && obj[marker]) throw new Error('attempted deep copy of cyclic object');
	
		if (obj && obj.constructor == Object) {
			ret = {};
			obj[marker] = true;
	
			for (key in obj) {
				if (key == marker) continue;
	
				ret[key] = deepCopy(obj[key]);
			}
	
			delete obj[marker];
			return ret;
		}
	
		if (obj && obj.constructor == Array) {
			ret = [];
			obj[marker] = true;
	
			for (key = 0; key < obj.length; key++) {
				ret.push(deepCopy(obj[key]));
			}delete obj[marker];
			return ret;
		}
	
		/*
	  * It must be a primitive type -- just return it.
	  */
		return obj;
	}
	
	function deepEqual(obj1, obj2) {
		if ((typeof obj1 === 'undefined' ? 'undefined' : _typeof(obj1)) != (typeof obj2 === 'undefined' ? 'undefined' : _typeof(obj2))) return false;
	
		if (obj1 === null || obj2 === null || (typeof obj1 === 'undefined' ? 'undefined' : _typeof(obj1)) != 'object') return obj1 === obj2;
	
		if (obj1.constructor != obj2.constructor) return false;
	
		var k;
		for (k in obj1) {
			if (!obj2.hasOwnProperty(k)) return false;
	
			if (!deepEqual(obj1[k], obj2[k])) return false;
		}
	
		for (k in obj2) {
			if (!obj1.hasOwnProperty(k)) return false;
		}
	
		return true;
	}
	
	function isEmpty(obj) {
		var key;
		for (key in obj) {
			return false;
		}return true;
	}
	
	function hasKey(obj, key) {
		mod_assert.equal(typeof key === 'undefined' ? 'undefined' : _typeof(key), 'string');
		return Object.prototype.hasOwnProperty.call(obj, key);
	}
	
	function forEachKey(obj, callback) {
		for (var key in obj) {
			if (hasKey(obj, key)) {
				callback(key, obj[key]);
			}
		}
	}
	
	function pluck(obj, key) {
		mod_assert.equal(typeof key === 'undefined' ? 'undefined' : _typeof(key), 'string');
		return pluckv(obj, key);
	}
	
	function pluckv(obj, key) {
		if (obj === null || (typeof obj === 'undefined' ? 'undefined' : _typeof(obj)) !== 'object') return undefined;
	
		if (obj.hasOwnProperty(key)) return obj[key];
	
		var i = key.indexOf('.');
		if (i == -1) return undefined;
	
		var key1 = key.substr(0, i);
		if (!obj.hasOwnProperty(key1)) return undefined;
	
		return pluckv(obj[key1], key.substr(i + 1));
	}
	
	/*
	 * Invoke callback(row) for each entry in the array that would be returned by
	 * flattenObject(data, depth).  This is just like flattenObject(data,
	 * depth).forEach(callback), except that the intermediate array is never
	 * created.
	 */
	function flattenIter(data, depth, callback) {
		doFlattenIter(data, depth, [], callback);
	}
	
	function doFlattenIter(data, depth, accum, callback) {
		var each;
		var key;
	
		if (depth === 0) {
			each = accum.slice(0);
			each.push(data);
			callback(each);
			return;
		}
	
		mod_assert.ok(data !== null);
		mod_assert.equal(typeof data === 'undefined' ? 'undefined' : _typeof(data), 'object');
		mod_assert.equal(typeof depth === 'undefined' ? 'undefined' : _typeof(depth), 'number');
		mod_assert.ok(depth >= 0);
	
		for (key in data) {
			each = accum.slice(0);
			each.push(key);
			doFlattenIter(data[key], depth - 1, each, callback);
		}
	}
	
	function flattenObject(data, depth) {
		if (depth === 0) return [data];
	
		mod_assert.ok(data !== null);
		mod_assert.equal(typeof data === 'undefined' ? 'undefined' : _typeof(data), 'object');
		mod_assert.equal(typeof depth === 'undefined' ? 'undefined' : _typeof(depth), 'number');
		mod_assert.ok(depth >= 0);
	
		var rv = [];
		var key;
	
		for (key in data) {
			flattenObject(data[key], depth - 1).forEach(function (p) {
				rv.push([key].concat(p));
			});
		}
	
		return rv;
	}
	
	function startsWith(str, prefix) {
		return str.substr(0, prefix.length) == prefix;
	}
	
	function endsWith(str, suffix) {
		return str.substr(str.length - suffix.length, suffix.length) == suffix;
	}
	
	function iso8601(d) {
		if (typeof d == 'number') d = new Date(d);
		mod_assert.ok(d.constructor === Date);
		return mod_extsprintf.sprintf('%4d-%02d-%02dT%02d:%02d:%02d.%03dZ', d.getUTCFullYear(), d.getUTCMonth() + 1, d.getUTCDate(), d.getUTCHours(), d.getUTCMinutes(), d.getUTCSeconds(), d.getUTCMilliseconds());
	}
	
	var RFC1123_MONTHS = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
	var RFC1123_DAYS = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];
	
	function rfc1123(date) {
		return mod_extsprintf.sprintf('%s, %02d %s %04d %02d:%02d:%02d GMT', RFC1123_DAYS[date.getUTCDay()], date.getUTCDate(), RFC1123_MONTHS[date.getUTCMonth()], date.getUTCFullYear(), date.getUTCHours(), date.getUTCMinutes(), date.getUTCSeconds());
	}
	
	/*
	 * Parses a date expressed as a string, as either a number of milliseconds since
	 * the epoch or any string format that Date accepts, giving preference to the
	 * former where these two sets overlap (e.g., small numbers).
	 */
	function parseDateTime(str) {
		/*
	  * This is irritatingly implicit, but significantly more concise than
	  * alternatives.  The "+str" will convert a string containing only a
	  * number directly to a Number, or NaN for other strings.  Thus, if the
	  * conversion succeeds, we use it (this is the milliseconds-since-epoch
	  * case).  Otherwise, we pass the string directly to the Date
	  * constructor to parse.
	  */
		var numeric = +str;
		if (!isNaN(numeric)) {
			return new Date(numeric);
		} else {
			return new Date(str);
		}
	}
	
	/*
	 * Number.*_SAFE_INTEGER isn't present before node v0.12, so we hardcode
	 * the ES6 definitions here, while allowing for them to someday be higher.
	 */
	var MAX_SAFE_INTEGER = Number.MAX_SAFE_INTEGER || 9007199254740991;
	var MIN_SAFE_INTEGER = Number.MIN_SAFE_INTEGER || -9007199254740991;
	
	/*
	 * Default options for parseInteger().
	 */
	var PI_DEFAULTS = {
		base: 10,
		allowSign: true,
		allowPrefix: false,
		allowTrailing: false,
		allowImprecise: false,
		trimWhitespace: false,
		leadingZeroIsOctal: false
	};
	
	var CP_0 = 0x30;
	var CP_9 = 0x39;
	
	var CP_A = 0x41;
	var CP_B = 0x42;
	var CP_O = 0x4f;
	var CP_T = 0x54;
	var CP_X = 0x58;
	var CP_Z = 0x5a;
	
	var CP_a = 0x61;
	var CP_b = 0x62;
	var CP_o = 0x6f;
	var CP_t = 0x74;
	var CP_x = 0x78;
	var CP_z = 0x7a;
	
	var PI_CONV_DEC = 0x30;
	var PI_CONV_UC = 0x37;
	var PI_CONV_LC = 0x57;
	
	/*
	 * A stricter version of parseInt() that provides options for changing what
	 * is an acceptable string (for example, disallowing trailing characters).
	 */
	function parseInteger(str, uopts) {
		mod_assert.string(str, 'str');
		mod_assert.optionalObject(uopts, 'options');
	
		var baseOverride = false;
		var options = PI_DEFAULTS;
	
		if (uopts) {
			baseOverride = hasKey(uopts, 'base');
			options = mergeObjects(options, uopts);
			mod_assert.number(options.base, 'options.base');
			mod_assert.ok(options.base >= 2, 'options.base >= 2');
			mod_assert.ok(options.base <= 36, 'options.base <= 36');
			mod_assert.bool(options.allowSign, 'options.allowSign');
			mod_assert.bool(options.allowPrefix, 'options.allowPrefix');
			mod_assert.bool(options.allowTrailing, 'options.allowTrailing');
			mod_assert.bool(options.allowImprecise, 'options.allowImprecise');
			mod_assert.bool(options.trimWhitespace, 'options.trimWhitespace');
			mod_assert.bool(options.leadingZeroIsOctal, 'options.leadingZeroIsOctal');
	
			if (options.leadingZeroIsOctal) {
				mod_assert.ok(!baseOverride, '"base" and "leadingZeroIsOctal" are ' + 'mutually exclusive');
			}
		}
	
		var c;
		var pbase = -1;
		var base = options.base;
		var start;
		var mult = 1;
		var value = 0;
		var idx = 0;
		var len = str.length;
	
		/* Trim any whitespace on the left side. */
		if (options.trimWhitespace) {
			while (idx < len && isSpace(str.charCodeAt(idx))) {
				++idx;
			}
		}
	
		/* Check the number for a leading sign. */
		if (options.allowSign) {
			if (str[idx] === '-') {
				idx += 1;
				mult = -1;
			} else if (str[idx] === '+') {
				idx += 1;
			}
		}
	
		/* Parse the base-indicating prefix if there is one. */
		if (str[idx] === '0') {
			if (options.allowPrefix) {
				pbase = prefixToBase(str.charCodeAt(idx + 1));
				if (pbase !== -1 && (!baseOverride || pbase === base)) {
					base = pbase;
					idx += 2;
				}
			}
	
			if (pbase === -1 && options.leadingZeroIsOctal) {
				base = 8;
			}
		}
	
		/* Parse the actual digits. */
		for (start = idx; idx < len; ++idx) {
			c = translateDigit(str.charCodeAt(idx));
			if (c !== -1 && c < base) {
				value *= base;
				value += c;
			} else {
				break;
			}
		}
	
		/* If we didn't parse any digits, we have an invalid number. */
		if (start === idx) {
			return new Error('invalid number: ' + JSON.stringify(str));
		}
	
		/* Trim any whitespace on the right side. */
		if (options.trimWhitespace) {
			while (idx < len && isSpace(str.charCodeAt(idx))) {
				++idx;
			}
		}
	
		/* Check for trailing characters. */
		if (idx < len && !options.allowTrailing) {
			return new Error('trailing characters after number: ' + JSON.stringify(str.slice(idx)));
		}
	
		/* If our value is 0, we return now, to avoid returning -0. */
		if (value === 0) {
			return 0;
		}
	
		/* Calculate our final value. */
		var result = value * mult;
	
		/*
	  * If the string represents a value that cannot be precisely represented
	  * by JavaScript, then we want to check that:
	  *
	  * - We never increased the value past MAX_SAFE_INTEGER
	  * - We don't make the result negative and below MIN_SAFE_INTEGER
	  *
	  * Because we only ever increment the value during parsing, there's no
	  * chance of moving past MAX_SAFE_INTEGER and then dropping below it
	  * again, losing precision in the process. This means that we only need
	  * to do our checks here, at the end.
	  */
		if (!options.allowImprecise && (value > MAX_SAFE_INTEGER || result < MIN_SAFE_INTEGER)) {
			return new Error('number is outside of the supported range: ' + JSON.stringify(str.slice(start, idx)));
		}
	
		return result;
	}
	
	/*
	 * Interpret a character code as a base-36 digit.
	 */
	function translateDigit(d) {
		if (d >= CP_0 && d <= CP_9) {
			/* '0' to '9' -> 0 to 9 */
			return d - PI_CONV_DEC;
		} else if (d >= CP_A && d <= CP_Z) {
			/* 'A' - 'Z' -> 10 to 35 */
			return d - PI_CONV_UC;
		} else if (d >= CP_a && d <= CP_z) {
			/* 'a' - 'z' -> 10 to 35 */
			return d - PI_CONV_LC;
		} else {
			/* Invalid character code */
			return -1;
		}
	}
	
	/*
	 * Test if a value matches the ECMAScript definition of trimmable whitespace.
	 */
	function isSpace(c) {
		return c === 0x20 || c >= 0x0009 && c <= 0x000d || c === 0x00a0 || c === 0x1680 || c === 0x180e || c >= 0x2000 && c <= 0x200a || c === 0x2028 || c === 0x2029 || c === 0x202f || c === 0x205f || c === 0x3000 || c === 0xfeff;
	}
	
	/*
	 * Determine which base a character indicates (e.g., 'x' indicates hex).
	 */
	function prefixToBase(c) {
		if (c === CP_b || c === CP_B) {
			/* 0b/0B (binary) */
			return 2;
		} else if (c === CP_o || c === CP_O) {
			/* 0o/0O (octal) */
			return 8;
		} else if (c === CP_t || c === CP_T) {
			/* 0t/0T (decimal) */
			return 10;
		} else if (c === CP_x || c === CP_X) {
			/* 0x/0X (hexadecimal) */
			return 16;
		} else {
			/* Not a meaningful character */
			return -1;
		}
	}
	
	function validateJsonObjectJS(schema, input) {
		var report = mod_jsonschema.validate(input, schema);
	
		if (report.errors.length === 0) return null;
	
		/* Currently, we only do anything useful with the first error. */
		var error = report.errors[0];
	
		/* The failed property is given by a URI with an irrelevant prefix. */
		var propname = error['property'];
		var reason = error['message'].toLowerCase();
		var i, j;
	
		/*
	  * There's at least one case where the property error message is
	  * confusing at best.  We work around this here.
	  */
		if ((i = reason.indexOf('the property ')) != -1 && (j = reason.indexOf(' is not defined in the schema and the ' + 'schema does not allow additional properties')) != -1) {
			i += 'the property '.length;
			if (propname === '') propname = reason.substr(i, j - i);else propname = propname + '.' + reason.substr(i, j - i);
	
			reason = 'unsupported property';
		}
	
		var rv = new mod_verror.VError('property "%s": %s', propname, reason);
		rv.jsv_details = error;
		return rv;
	}
	
	function randElt(arr) {
		mod_assert.ok(Array.isArray(arr) && arr.length > 0, 'randElt argument must be a non-empty array');
	
		return arr[Math.floor(Math.random() * arr.length)];
	}
	
	function assertHrtime(a) {
		mod_assert.ok(a[0] >= 0 && a[1] >= 0, 'negative numbers not allowed in hrtimes');
		mod_assert.ok(a[1] < 1e9, 'nanoseconds column overflow');
	}
	
	/*
	 * Compute the time elapsed between hrtime readings A and B, where A is later
	 * than B.  hrtime readings come from Node's process.hrtime().  There is no
	 * defined way to represent negative deltas, so it's illegal to diff B from A
	 * where the time denoted by B is later than the time denoted by A.  If this
	 * becomes valuable, we can define a representation and extend the
	 * implementation to support it.
	 */
	function hrtimeDiff(a, b) {
		assertHrtime(a);
		assertHrtime(b);
		mod_assert.ok(a[0] > b[0] || a[0] == b[0] && a[1] >= b[1], 'negative differences not allowed');
	
		var rv = [a[0] - b[0], 0];
	
		if (a[1] >= b[1]) {
			rv[1] = a[1] - b[1];
		} else {
			rv[0]--;
			rv[1] = 1e9 - (b[1] - a[1]);
		}
	
		return rv;
	}
	
	/*
	 * Convert a hrtime reading from the array format returned by Node's
	 * process.hrtime() into a scalar number of nanoseconds.
	 */
	function hrtimeNanosec(a) {
		assertHrtime(a);
	
		return Math.floor(a[0] * 1e9 + a[1]);
	}
	
	/*
	 * Convert a hrtime reading from the array format returned by Node's
	 * process.hrtime() into a scalar number of microseconds.
	 */
	function hrtimeMicrosec(a) {
		assertHrtime(a);
	
		return Math.floor(a[0] * 1e6 + a[1] / 1e3);
	}
	
	/*
	 * Convert a hrtime reading from the array format returned by Node's
	 * process.hrtime() into a scalar number of milliseconds.
	 */
	function hrtimeMillisec(a) {
		assertHrtime(a);
	
		return Math.floor(a[0] * 1e3 + a[1] / 1e6);
	}
	
	/*
	 * Add two hrtime readings A and B, overwriting A with the result of the
	 * addition.  This function is useful for accumulating several hrtime intervals
	 * into a counter.  Returns A.
	 */
	function hrtimeAccum(a, b) {
		assertHrtime(a);
		assertHrtime(b);
	
		/*
	  * Accumulate the nanosecond component.
	  */
		a[1] += b[1];
		if (a[1] >= 1e9) {
			/*
	   * The nanosecond component overflowed, so carry to the seconds
	   * field.
	   */
			a[0]++;
			a[1] -= 1e9;
		}
	
		/*
	  * Accumulate the seconds component.
	  */
		a[0] += b[0];
	
		return a;
	}
	
	/*
	 * Add two hrtime readings A and B, returning the result as a new hrtime array.
	 * Does not modify either input argument.
	 */
	function hrtimeAdd(a, b) {
		assertHrtime(a);
	
		var rv = [a[0], a[1]];
	
		return hrtimeAccum(rv, b);
	}
	
	/*
	 * Check an object for unexpected properties.  Accepts the object to check, and
	 * an array of allowed property names (strings).  Returns an array of key names
	 * that were found on the object, but did not appear in the list of allowed
	 * properties.  If no properties were found, the returned array will be of
	 * zero length.
	 */
	function extraProperties(obj, allowed) {
		mod_assert.ok((typeof obj === 'undefined' ? 'undefined' : _typeof(obj)) === 'object' && obj !== null, 'obj argument must be a non-null object');
		mod_assert.ok(Array.isArray(allowed), 'allowed argument must be an array of strings');
		for (var i = 0; i < allowed.length; i++) {
			mod_assert.ok(typeof allowed[i] === 'string', 'allowed argument must be an array of strings');
		}
	
		return Object.keys(obj).filter(function (key) {
			return allowed.indexOf(key) === -1;
		});
	}
	
	/*
	 * Given three sets of properties "provided" (may be undefined), "overrides"
	 * (required), and "defaults" (may be undefined), construct an object containing
	 * the union of these sets with "overrides" overriding "provided", and
	 * "provided" overriding "defaults".  None of the input objects are modified.
	 */
	function mergeObjects(provided, overrides, defaults) {
		var rv, k;
	
		rv = {};
		if (defaults) {
			for (k in defaults) {
				rv[k] = defaults[k];
			}
		}
	
		if (provided) {
			for (k in provided) {
				rv[k] = provided[k];
			}
		}
	
		if (overrides) {
			for (k in overrides) {
				rv[k] = overrides[k];
			}
		}
	
		return rv;
	}

/***/ }),
/* 525 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer, process) {'use strict';
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
	
	// Copyright (c) 2012, Mark Cavage. All rights reserved.
	// Copyright 2015 Joyent, Inc.
	
	var assert = __webpack_require__(336);
	var Stream = __webpack_require__(282).Stream;
	var util = __webpack_require__(271);
	
	///--- Globals
	
	/* JSSTYLED */
	var UUID_REGEXP = /^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/;
	
	///--- Internal
	
	function _capitalize(str) {
	    return str.charAt(0).toUpperCase() + str.slice(1);
	}
	
	function _toss(name, expected, oper, arg, actual) {
	    throw new assert.AssertionError({
	        message: util.format('%s (%s) is required', name, expected),
	        actual: actual === undefined ? typeof arg === 'undefined' ? 'undefined' : _typeof(arg) : actual(arg),
	        expected: expected,
	        operator: oper || '===',
	        stackStartFunction: _toss.caller
	    });
	}
	
	function _getClass(arg) {
	    return Object.prototype.toString.call(arg).slice(8, -1);
	}
	
	function noop() {}
	// Why even bother with asserts?
	
	
	///--- Exports
	
	var types = {
	    bool: {
	        check: function check(arg) {
	            return typeof arg === 'boolean';
	        }
	    },
	    func: {
	        check: function check(arg) {
	            return typeof arg === 'function';
	        }
	    },
	    string: {
	        check: function check(arg) {
	            return typeof arg === 'string';
	        }
	    },
	    object: {
	        check: function check(arg) {
	            return (typeof arg === 'undefined' ? 'undefined' : _typeof(arg)) === 'object' && arg !== null;
	        }
	    },
	    number: {
	        check: function check(arg) {
	            return typeof arg === 'number' && !isNaN(arg);
	        }
	    },
	    finite: {
	        check: function check(arg) {
	            return typeof arg === 'number' && !isNaN(arg) && isFinite(arg);
	        }
	    },
	    buffer: {
	        check: function check(arg) {
	            return Buffer.isBuffer(arg);
	        },
	        operator: 'Buffer.isBuffer'
	    },
	    array: {
	        check: function check(arg) {
	            return Array.isArray(arg);
	        },
	        operator: 'Array.isArray'
	    },
	    stream: {
	        check: function check(arg) {
	            return arg instanceof Stream;
	        },
	        operator: 'instanceof',
	        actual: _getClass
	    },
	    date: {
	        check: function check(arg) {
	            return arg instanceof Date;
	        },
	        operator: 'instanceof',
	        actual: _getClass
	    },
	    regexp: {
	        check: function check(arg) {
	            return arg instanceof RegExp;
	        },
	        operator: 'instanceof',
	        actual: _getClass
	    },
	    uuid: {
	        check: function check(arg) {
	            return typeof arg === 'string' && UUID_REGEXP.test(arg);
	        },
	        operator: 'isUUID'
	    }
	};
	
	function _setExports(ndebug) {
	    var keys = Object.keys(types);
	    var out;
	
	    /* re-export standard assert */
	    if (process.env.NODE_NDEBUG) {
	        out = noop;
	    } else {
	        out = function out(arg, msg) {
	            if (!arg) {
	                _toss(msg, 'true', arg);
	            }
	        };
	    }
	
	    /* standard checks */
	    keys.forEach(function (k) {
	        if (ndebug) {
	            out[k] = noop;
	            return;
	        }
	        var type = types[k];
	        out[k] = function (arg, msg) {
	            if (!type.check(arg)) {
	                _toss(msg, k, type.operator, arg, type.actual);
	            }
	        };
	    });
	
	    /* optional checks */
	    keys.forEach(function (k) {
	        var name = 'optional' + _capitalize(k);
	        if (ndebug) {
	            out[name] = noop;
	            return;
	        }
	        var type = types[k];
	        out[name] = function (arg, msg) {
	            if (arg === undefined || arg === null) {
	                return;
	            }
	            if (!type.check(arg)) {
	                _toss(msg, k, type.operator, arg, type.actual);
	            }
	        };
	    });
	
	    /* arrayOf checks */
	    keys.forEach(function (k) {
	        var name = 'arrayOf' + _capitalize(k);
	        if (ndebug) {
	            out[name] = noop;
	            return;
	        }
	        var type = types[k];
	        var expected = '[' + k + ']';
	        out[name] = function (arg, msg) {
	            if (!Array.isArray(arg)) {
	                _toss(msg, expected, type.operator, arg, type.actual);
	            }
	            var i;
	            for (i = 0; i < arg.length; i++) {
	                if (!type.check(arg[i])) {
	                    _toss(msg, expected, type.operator, arg, type.actual);
	                }
	            }
	        };
	    });
	
	    /* optionalArrayOf checks */
	    keys.forEach(function (k) {
	        var name = 'optionalArrayOf' + _capitalize(k);
	        if (ndebug) {
	            out[name] = noop;
	            return;
	        }
	        var type = types[k];
	        var expected = '[' + k + ']';
	        out[name] = function (arg, msg) {
	            if (arg === undefined || arg === null) {
	                return;
	            }
	            if (!Array.isArray(arg)) {
	                _toss(msg, expected, type.operator, arg, type.actual);
	            }
	            var i;
	            for (i = 0; i < arg.length; i++) {
	                if (!type.check(arg[i])) {
	                    _toss(msg, expected, type.operator, arg, type.actual);
	                }
	            }
	        };
	    });
	
	    /* re-export built-in assertions */
	    Object.keys(assert).forEach(function (k) {
	        if (k === 'AssertionError') {
	            out[k] = assert[k];
	            return;
	        }
	        if (ndebug) {
	            out[k] = noop;
	            return;
	        }
	        out[k] = assert[k];
	    });
	
	    /* export ourselves (for unit tests _only_) */
	    out._setExports = _setExports;
	
	    return out;
	}
	
	module.exports = _setExports(process.env.NODE_NDEBUG);
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(290).Buffer, __webpack_require__(3)))

/***/ }),
/* 526 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
	
	/*
	 * extsprintf.js: extended POSIX-style sprintf
	 */
	
	var mod_assert = __webpack_require__(336);
	var mod_util = __webpack_require__(271);
	
	/*
	 * Public interface
	 */
	exports.sprintf = jsSprintf;
	
	/*
	 * Stripped down version of s[n]printf(3c).  We make a best effort to throw an
	 * exception when given a format string we don't understand, rather than
	 * ignoring it, so that we won't break existing programs if/when we go implement
	 * the rest of this.
	 *
	 * This implementation currently supports specifying
	 *	- field alignment ('-' flag),
	 * 	- zero-pad ('0' flag)
	 *	- always show numeric sign ('+' flag),
	 *	- field width
	 *	- conversions for strings, decimal integers, and floats (numbers).
	 *	- argument size specifiers.  These are all accepted but ignored, since
	 *	  Javascript has no notion of the physical size of an argument.
	 *
	 * Everything else is currently unsupported, most notably precision, unsigned
	 * numbers, non-decimal numbers, and characters.
	 */
	function jsSprintf(fmt) {
		var regex = ['([^%]*)', /* normal text */
		'%', /* start of format */
		'([\'\\-+ #0]*?)', /* flags (optional) */
		'([1-9]\\d*)?', /* width (optional) */
		'(\\.([1-9]\\d*))?', /* precision (optional) */
		'[lhjztL]*?', /* length mods (ignored) */
		'([diouxXfFeEgGaAcCsSp%jr])' /* conversion */
		].join('');
	
		var re = new RegExp(regex);
		var args = Array.prototype.slice.call(arguments, 1);
		var flags, width, precision, conversion;
		var left, pad, sign, arg, match;
		var ret = '';
		var argn = 1;
	
		mod_assert.equal('string', typeof fmt === 'undefined' ? 'undefined' : _typeof(fmt));
	
		while ((match = re.exec(fmt)) !== null) {
			ret += match[1];
			fmt = fmt.substring(match[0].length);
	
			flags = match[2] || '';
			width = match[3] || 0;
			precision = match[4] || '';
			conversion = match[6];
			left = false;
			sign = false;
			pad = ' ';
	
			if (conversion == '%') {
				ret += '%';
				continue;
			}
	
			if (args.length === 0) throw new Error('too few args to sprintf');
	
			arg = args.shift();
			argn++;
	
			if (flags.match(/[\' #]/)) throw new Error('unsupported flags: ' + flags);
	
			if (precision.length > 0) throw new Error('non-zero precision not supported');
	
			if (flags.match(/-/)) left = true;
	
			if (flags.match(/0/)) pad = '0';
	
			if (flags.match(/\+/)) sign = true;
	
			switch (conversion) {
				case 's':
					if (arg === undefined || arg === null) throw new Error('argument ' + argn + ': attempted to print undefined or null ' + 'as a string');
					ret += doPad(pad, width, left, arg.toString());
					break;
	
				case 'd':
					arg = Math.floor(arg);
				/*jsl:fallthru*/
				case 'f':
					sign = sign && arg > 0 ? '+' : '';
					ret += sign + doPad(pad, width, left, arg.toString());
					break;
	
				case 'j':
					/* non-standard */
					if (width === 0) width = 10;
					ret += mod_util.inspect(arg, false, width);
					break;
	
				case 'r':
					/* non-standard */
					ret += dumpException(arg);
					break;
	
				default:
					throw new Error('unsupported conversion: ' + conversion);
			}
		}
	
		ret += fmt;
		return ret;
	}
	
	function doPad(chr, width, left, str) {
		var ret = str;
	
		while (ret.length < width) {
			if (left) ret += chr;else ret = chr + ret;
		}
	
		return ret;
	}
	
	/*
	 * This function dumps long stack traces for exceptions having a cause() method.
	 * See node-verror for an example.
	 */
	function dumpException(ex) {
		var ret;
	
		if (!(ex instanceof Error)) throw new Error(jsSprintf('invalid type for %%r: %j', ex));
	
		/* Note that V8 prepends "ex.stack" with ex.toString(). */
		ret = 'EXCEPTION: ' + ex.constructor.name + ': ' + ex.stack;
	
		if (ex.cause && typeof ex.cause === 'function') {
			var cex = ex.cause();
			if (cex) {
				ret += '\nCaused by: ' + dumpException(cex);
			}
		}
	
		return ret;
	}

/***/ }),
/* 527 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
	
	/*
	 * verror.js: richer JavaScript errors
	 */
	
	var mod_assert = __webpack_require__(336);
	var mod_util = __webpack_require__(271);
	
	var mod_extsprintf = __webpack_require__(526);
	
	/*
	 * Public interface
	 */
	exports.VError = VError;
	exports.WError = WError;
	exports.MultiError = MultiError;
	
	/*
	 * Like JavaScript's built-in Error class, but supports a "cause" argument and a
	 * printf-style message.  The cause argument can be null.
	 */
	function VError(options) {
		var args, causedBy, ctor, tailmsg;
	
		if (options instanceof Error || (typeof options === 'undefined' ? 'undefined' : _typeof(options)) === 'object') {
			args = Array.prototype.slice.call(arguments, 1);
		} else {
			args = Array.prototype.slice.call(arguments, 0);
			options = undefined;
		}
	
		tailmsg = args.length > 0 ? mod_extsprintf.sprintf.apply(null, args) : '';
		this.jse_shortmsg = tailmsg;
		this.jse_summary = tailmsg;
	
		if (options) {
			causedBy = options.cause;
	
			if (!causedBy || !(options.cause instanceof Error)) causedBy = options;
	
			if (causedBy && causedBy instanceof Error) {
				this.jse_cause = causedBy;
				this.jse_summary += ': ' + causedBy.message;
			}
		}
	
		this.message = this.jse_summary;
		Error.call(this, this.jse_summary);
	
		if (Error.captureStackTrace) {
			ctor = options ? options.constructorOpt : undefined;
			ctor = ctor || arguments.callee;
			Error.captureStackTrace(this, ctor);
		}
	}
	
	mod_util.inherits(VError, Error);
	VError.prototype.name = 'VError';
	
	VError.prototype.toString = function ve_toString() {
		var str = this.hasOwnProperty('name') && this.name || this.constructor.name || this.constructor.prototype.name;
		if (this.message) str += ': ' + this.message;
	
		return str;
	};
	
	VError.prototype.cause = function ve_cause() {
		return this.jse_cause;
	};
	
	/*
	 * Represents a collection of errors for the purpose of consumers that generally
	 * only deal with one error.  Callers can extract the individual errors
	 * contained in this object, but may also just treat it as a normal single
	 * error, in which case a summary message will be printed.
	 */
	function MultiError(errors) {
		mod_assert.ok(errors.length > 0);
		this.ase_errors = errors;
	
		VError.call(this, errors[0], 'first of %d error%s', errors.length, errors.length == 1 ? '' : 's');
	}
	
	mod_util.inherits(MultiError, VError);
	
	/*
	 * Like JavaScript's built-in Error class, but supports a "cause" argument which
	 * is wrapped, not "folded in" as with VError.	Accepts a printf-style message.
	 * The cause argument can be null.
	 */
	function WError(options) {
		Error.call(this);
	
		var args, cause, ctor;
		if ((typeof options === 'undefined' ? 'undefined' : _typeof(options)) === 'object') {
			args = Array.prototype.slice.call(arguments, 1);
		} else {
			args = Array.prototype.slice.call(arguments, 0);
			options = undefined;
		}
	
		if (args.length > 0) {
			this.message = mod_extsprintf.sprintf.apply(null, args);
		} else {
			this.message = '';
		}
	
		if (options) {
			if (options instanceof Error) {
				cause = options;
			} else {
				cause = options.cause;
				ctor = options.constructorOpt;
			}
		}
	
		Error.captureStackTrace(this, ctor || this.constructor);
		if (cause) this.cause(cause);
	}
	
	mod_util.inherits(WError, Error);
	WError.prototype.name = 'WError';
	
	WError.prototype.toString = function we_toString() {
		var str = this.hasOwnProperty('name') && this.name || this.constructor.name || this.constructor.prototype.name;
		if (this.message) str += ': ' + this.message;
		if (this.we_cause && this.we_cause.message) str += '; caused by ' + this.we_cause.toString();
	
		return str;
	};
	
	WError.prototype.cause = function we_cause(c) {
		if (c instanceof Error) this.we_cause = c;
	
		return this.we_cause;
	};

/***/ }),
/* 528 */
/***/ (function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;'use strict';
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
	
	/**
	 * JSONSchema Validator - Validates JavaScript objects using JSON Schemas
	 *	(http://www.json.com/json-schema-proposal/)
	 *
	 * Copyright (c) 2007 Kris Zyp SitePen (www.sitepen.com)
	 * Licensed under the MIT (MIT-LICENSE.txt) license.
	To use the validator call the validate function with an instance object and an optional schema object.
	If a schema is provided, it will be used to validate. If the instance object refers to a schema (self-validating),
	that schema will be used to validate and the schema parameter is not necessary (if both exist,
	both validations will occur).
	The validate method will return an array of validation errors. If there are no errors, then an
	empty list will be returned. A validation error will have two properties:
	"property" which indicates which property had the error
	"message" which indicates what the error was
	 */
	(function (root, factory) {
		if (true) {
			// AMD. Register as an anonymous module.
			!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function () {
				return factory();
			}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
		} else if ((typeof module === 'undefined' ? 'undefined' : _typeof(module)) === 'object' && module.exports) {
			// Node. Does not work with strict CommonJS, but
			// only CommonJS-like environments that support module.exports,
			// like Node.
			module.exports = factory();
		} else {
			// Browser globals
			root.jsonSchema = factory();
		}
	})(undefined, function () {
		// setup primitive classes to be JSON Schema types
		var exports = validate;
		exports.Integer = { type: "integer" };
		var primitiveConstructors = {
			String: String,
			Boolean: Boolean,
			Number: Number,
			Object: Object,
			Array: Array,
			Date: Date
		};
		exports.validate = validate;
		function validate( /*Any*/instance, /*Object*/schema) {
			// Summary:
			//  	To use the validator call JSONSchema.validate with an instance object and an optional schema object.
			// 		If a schema is provided, it will be used to validate. If the instance object refers to a schema (self-validating),
			// 		that schema will be used to validate and the schema parameter is not necessary (if both exist,
			// 		both validations will occur).
			// 		The validate method will return an object with two properties:
			// 			valid: A boolean indicating if the instance is valid by the schema
			// 			errors: An array of validation errors. If there are no errors, then an
			// 					empty list will be returned. A validation error will have two properties:
			// 						property: which indicates which property had the error
			// 						message: which indicates what the error was
			//
			return validate(instance, schema, { changing: false }); //, coerce: false, existingOnly: false});
		};
		exports.checkPropertyChange = function ( /*Any*/value, /*Object*/schema, /*String*/property) {
			// Summary:
			// 		The checkPropertyChange method will check to see if an value can legally be in property with the given schema
			// 		This is slightly different than the validate method in that it will fail if the schema is readonly and it will
			// 		not check for self-validation, it is assumed that the passed in value is already internally valid.
			// 		The checkPropertyChange method will return the same object type as validate, see JSONSchema.validate for
			// 		information.
			//
			return validate(value, schema, { changing: property || "property" });
		};
		var validate = exports._validate = function ( /*Any*/instance, /*Object*/schema, /*Object*/options) {
	
			if (!options) options = {};
			var _changing = options.changing;
	
			function getType(schema) {
				return schema.type || primitiveConstructors[schema.name] == schema && schema.name.toLowerCase();
			}
			var errors = [];
			// validate a value against a property definition
			function checkProp(value, schema, path, i) {
	
				var l;
				path += path ? typeof i == 'number' ? '[' + i + ']' : typeof i == 'undefined' ? '' : '.' + i : i;
				function addError(message) {
					errors.push({ property: path, message: message });
				}
	
				if (((typeof schema === 'undefined' ? 'undefined' : _typeof(schema)) != 'object' || schema instanceof Array) && (path || typeof schema != 'function') && !(schema && getType(schema))) {
					if (typeof schema == 'function') {
						if (!(value instanceof schema)) {
							addError("is not an instance of the class/constructor " + schema.name);
						}
					} else if (schema) {
						addError("Invalid schema/property definition " + schema);
					}
					return null;
				}
				if (_changing && schema.readonly) {
					addError("is a readonly field, it can not be changed");
				}
				if (schema['extends']) {
					// if it extends another schema, it must pass that schema as well
					checkProp(value, schema['extends'], path, i);
				}
				// validate a value against a type definition
				function checkType(type, value) {
					if (type) {
						if (typeof type == 'string' && type != 'any' && (type == 'null' ? value !== null : (typeof value === 'undefined' ? 'undefined' : _typeof(value)) != type) && !(value instanceof Array && type == 'array') && !(value instanceof Date && type == 'date') && !(type == 'integer' && value % 1 === 0)) {
							return [{ property: path, message: (typeof value === 'undefined' ? 'undefined' : _typeof(value)) + " value found, but a " + type + " is required" }];
						}
						if (type instanceof Array) {
							var unionErrors = [];
							for (var j = 0; j < type.length; j++) {
								// a union type
								if (!(unionErrors = checkType(type[j], value)).length) {
									break;
								}
							}
							if (unionErrors.length) {
								return unionErrors;
							}
						} else if ((typeof type === 'undefined' ? 'undefined' : _typeof(type)) == 'object') {
							var priorErrors = errors;
							errors = [];
							checkProp(value, type, path);
							var theseErrors = errors;
							errors = priorErrors;
							return theseErrors;
						}
					}
					return [];
				}
				if (value === undefined) {
					if (schema.required) {
						addError("is missing and it is required");
					}
				} else {
					errors = errors.concat(checkType(getType(schema), value));
					if (schema.disallow && !checkType(schema.disallow, value).length) {
						addError(" disallowed value was matched");
					}
					if (value !== null) {
						if (value instanceof Array) {
							if (schema.items) {
								var itemsIsArray = schema.items instanceof Array;
								var propDef = schema.items;
								for (i = 0, l = value.length; i < l; i += 1) {
									if (itemsIsArray) propDef = schema.items[i];
									if (options.coerce) value[i] = options.coerce(value[i], propDef);
									errors.concat(checkProp(value[i], propDef, path, i));
								}
							}
							if (schema.minItems && value.length < schema.minItems) {
								addError("There must be a minimum of " + schema.minItems + " in the array");
							}
							if (schema.maxItems && value.length > schema.maxItems) {
								addError("There must be a maximum of " + schema.maxItems + " in the array");
							}
						} else if (schema.properties || schema.additionalProperties) {
							errors.concat(checkObj(value, schema.properties, path, schema.additionalProperties));
						}
						if (schema.pattern && typeof value == 'string' && !value.match(schema.pattern)) {
							addError("does not match the regex pattern " + schema.pattern);
						}
						if (schema.maxLength && typeof value == 'string' && value.length > schema.maxLength) {
							addError("may only be " + schema.maxLength + " characters long");
						}
						if (schema.minLength && typeof value == 'string' && value.length < schema.minLength) {
							addError("must be at least " + schema.minLength + " characters long");
						}
						if (_typeof(schema.minimum) !== undefined && (typeof value === 'undefined' ? 'undefined' : _typeof(value)) == _typeof(schema.minimum) && schema.minimum > value) {
							addError("must have a minimum value of " + schema.minimum);
						}
						if (_typeof(schema.maximum) !== undefined && (typeof value === 'undefined' ? 'undefined' : _typeof(value)) == _typeof(schema.maximum) && schema.maximum < value) {
							addError("must have a maximum value of " + schema.maximum);
						}
						if (schema['enum']) {
							var enumer = schema['enum'];
							l = enumer.length;
							var found;
							for (var j = 0; j < l; j++) {
								if (enumer[j] === value) {
									found = 1;
									break;
								}
							}
							if (!found) {
								addError("does not have a value in the enumeration " + enumer.join(", "));
							}
						}
						if (typeof schema.maxDecimal == 'number' && value.toString().match(new RegExp("\\.[0-9]{" + (schema.maxDecimal + 1) + ",}"))) {
							addError("may only have " + schema.maxDecimal + " digits of decimal places");
						}
					}
				}
				return null;
			}
			// validate an object against a schema
			function checkObj(instance, objTypeDef, path, additionalProp) {
	
				if ((typeof objTypeDef === 'undefined' ? 'undefined' : _typeof(objTypeDef)) == 'object') {
					if ((typeof instance === 'undefined' ? 'undefined' : _typeof(instance)) != 'object' || instance instanceof Array) {
						errors.push({ property: path, message: "an object is required" });
					}
	
					for (var i in objTypeDef) {
						if (objTypeDef.hasOwnProperty(i)) {
							var value = instance[i];
							// skip _not_ specified properties
							if (value === undefined && options.existingOnly) continue;
							var propDef = objTypeDef[i];
							// set default
							if (value === undefined && propDef["default"]) {
								value = instance[i] = propDef["default"];
							}
							if (options.coerce && i in instance) {
								value = instance[i] = options.coerce(value, propDef);
							}
							checkProp(value, propDef, path, i);
						}
					}
				}
				for (i in instance) {
					if (instance.hasOwnProperty(i) && !(i.charAt(0) == '_' && i.charAt(1) == '_') && objTypeDef && !objTypeDef[i] && additionalProp === false) {
						if (options.filter) {
							delete instance[i];
							continue;
						} else {
							errors.push({ property: path, message: (typeof value === 'undefined' ? 'undefined' : _typeof(value)) + "The property " + i + " is not defined in the schema and the schema does not allow additional properties" });
						}
					}
					var requires = objTypeDef && objTypeDef[i] && objTypeDef[i].requires;
					if (requires && !(requires in instance)) {
						errors.push({ property: path, message: "the presence of the property " + i + " requires that " + requires + " also be present" });
					}
					value = instance[i];
					if (additionalProp && (!(objTypeDef && (typeof objTypeDef === 'undefined' ? 'undefined' : _typeof(objTypeDef)) == 'object') || !(i in objTypeDef))) {
						if (options.coerce) {
							value = instance[i] = options.coerce(value, additionalProp);
						}
						checkProp(value, additionalProp, path, i);
					}
					if (!_changing && value && value.$schema) {
						errors = errors.concat(checkProp(value, value.$schema, path, i));
					}
				}
				return errors;
			}
			if (schema) {
				checkProp(instance, schema, '', _changing || '');
			}
			if (!_changing && instance && instance.$schema) {
				checkProp(instance, instance.$schema, '', '');
			}
			return { valid: !errors.length, errors: errors };
		};
		exports.mustBeValid = function (result) {
			//	summary:
			//		This checks to ensure that the result is valid and will throw an appropriate error message if it is not
			// result: the result returned from checkPropertyChange or validate
			if (!result.valid) {
				throw new TypeError(result.errors.map(function (error) {
					return "for property " + error.property + ': ' + error.message;
				}).join(", \n"));
			}
		};
	
		return exports;
	});

/***/ }),
/* 529 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {'use strict';
	
	// Copyright 2015 Joyent, Inc.
	
	var assert = __webpack_require__(478);
	var crypto = __webpack_require__(392);
	var sshpk = __webpack_require__(480);
	var utils = __webpack_require__(479);
	
	var HASH_ALGOS = utils.HASH_ALGOS;
	var PK_ALGOS = utils.PK_ALGOS;
	var InvalidAlgorithmError = utils.InvalidAlgorithmError;
	var HttpSignatureError = utils.HttpSignatureError;
	var validateAlgorithm = utils.validateAlgorithm;
	
	///--- Exported API
	
	module.exports = {
	  /**
	   * Verify RSA/DSA signature against public key.  You are expected to pass in
	   * an object that was returned from `parse()`.
	   *
	   * @param {Object} parsedSignature the object you got from `parse`.
	   * @param {String} pubkey RSA/DSA private key PEM.
	   * @return {Boolean} true if valid, false otherwise.
	   * @throws {TypeError} if you pass in bad arguments.
	   * @throws {InvalidAlgorithmError}
	   */
	  verifySignature: function verifySignature(parsedSignature, pubkey) {
	    assert.object(parsedSignature, 'parsedSignature');
	    if (typeof pubkey === 'string' || Buffer.isBuffer(pubkey)) pubkey = sshpk.parseKey(pubkey);
	    assert.ok(sshpk.Key.isKey(pubkey, [1, 1]), 'pubkey must be a sshpk.Key');
	
	    var alg = validateAlgorithm(parsedSignature.algorithm);
	    if (alg[0] === 'hmac' || alg[0] !== pubkey.type) return false;
	
	    var v = pubkey.createVerify(alg[1]);
	    v.update(parsedSignature.signingString);
	    return v.verify(parsedSignature.params.signature, 'base64');
	  },
	
	  /**
	   * Verify HMAC against shared secret.  You are expected to pass in an object
	   * that was returned from `parse()`.
	   *
	   * @param {Object} parsedSignature the object you got from `parse`.
	   * @param {String} secret HMAC shared secret.
	   * @return {Boolean} true if valid, false otherwise.
	   * @throws {TypeError} if you pass in bad arguments.
	   * @throws {InvalidAlgorithmError}
	   */
	  verifyHMAC: function verifyHMAC(parsedSignature, secret) {
	    assert.object(parsedSignature, 'parsedHMAC');
	    assert.string(secret, 'secret');
	
	    var alg = validateAlgorithm(parsedSignature.algorithm);
	    if (alg[0] !== 'hmac') return false;
	
	    var hashAlg = alg[1].toUpperCase();
	
	    var hmac = crypto.createHmac(hashAlg, secret);
	    hmac.update(parsedSignature.signingString);
	
	    /*
	     * Now double-hash to avoid leaking timing information - there's
	     * no easy constant-time compare in JS, so we use this approach
	     * instead. See for more info:
	     * https://www.isecpartners.com/blog/2011/february/double-hmac-
	     * verification.aspx
	     */
	    var h1 = crypto.createHmac(hashAlg, secret);
	    h1.update(hmac.digest());
	    h1 = h1.digest();
	    var h2 = crypto.createHmac(hashAlg, secret);
	    h2.update(new Buffer(parsedSignature.params.signature, 'base64'));
	    h2 = h2.digest();
	
	    /* Node 0.8 returns strings from .digest(). */
	    if (typeof h1 === 'string') return h1 === h2;
	    /* And node 0.10 lacks the .equals() method on Buffers. */
	    if (Buffer.isBuffer(h1) && !h1.equals) return h1.toString('binary') === h2.toString('binary');
	
	    return h1.equals(h2);
	  }
	};
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(290).Buffer))

/***/ }),
/* 530 */
/***/ (function(module, exports, __webpack_require__) {

	/*!
	 * mime-types
	 * Copyright(c) 2014 Jonathan Ong
	 * Copyright(c) 2015 Douglas Christopher Wilson
	 * MIT Licensed
	 */
	
	'use strict';
	
	/**
	 * Module dependencies.
	 * @private
	 */
	
	var db = __webpack_require__(531);
	var extname = __webpack_require__(270).extname;
	
	/**
	 * Module variables.
	 * @private
	 */
	
	var extractTypeRegExp = /^\s*([^;\s]*)(?:;|\s|$)/;
	var textTypeRegExp = /^text\//i;
	
	/**
	 * Module exports.
	 * @public
	 */
	
	exports.charset = charset;
	exports.charsets = { lookup: charset };
	exports.contentType = contentType;
	exports.extension = extension;
	exports.extensions = Object.create(null);
	exports.lookup = lookup;
	exports.types = Object.create(null);
	
	// Populate the extensions/types maps
	populateMaps(exports.extensions, exports.types);
	
	/**
	 * Get the default charset for a MIME type.
	 *
	 * @param {string} type
	 * @return {boolean|string}
	 */
	
	function charset(type) {
	  if (!type || typeof type !== 'string') {
	    return false;
	  }
	
	  // TODO: use media-typer
	  var match = extractTypeRegExp.exec(type);
	  var mime = match && db[match[1].toLowerCase()];
	
	  if (mime && mime.charset) {
	    return mime.charset;
	  }
	
	  // default text/* to utf-8
	  if (match && textTypeRegExp.test(match[1])) {
	    return 'UTF-8';
	  }
	
	  return false;
	}
	
	/**
	 * Create a full Content-Type header given a MIME type or extension.
	 *
	 * @param {string} str
	 * @return {boolean|string}
	 */
	
	function contentType(str) {
	  // TODO: should this even be in this module?
	  if (!str || typeof str !== 'string') {
	    return false;
	  }
	
	  var mime = str.indexOf('/') === -1 ? exports.lookup(str) : str;
	
	  if (!mime) {
	    return false;
	  }
	
	  // TODO: use content-type or other module
	  if (mime.indexOf('charset') === -1) {
	    var charset = exports.charset(mime);
	    if (charset) mime += '; charset=' + charset.toLowerCase();
	  }
	
	  return mime;
	}
	
	/**
	 * Get the default extension for a MIME type.
	 *
	 * @param {string} type
	 * @return {boolean|string}
	 */
	
	function extension(type) {
	  if (!type || typeof type !== 'string') {
	    return false;
	  }
	
	  // TODO: use media-typer
	  var match = extractTypeRegExp.exec(type);
	
	  // get extensions
	  var exts = match && exports.extensions[match[1].toLowerCase()];
	
	  if (!exts || !exts.length) {
	    return false;
	  }
	
	  return exts[0];
	}
	
	/**
	 * Lookup the MIME type for a file path/extension.
	 *
	 * @param {string} path
	 * @return {boolean|string}
	 */
	
	function lookup(path) {
	  if (!path || typeof path !== 'string') {
	    return false;
	  }
	
	  // get the extension ("ext" or ".ext" or full path)
	  var extension = extname('x.' + path).toLowerCase().substr(1);
	
	  if (!extension) {
	    return false;
	  }
	
	  return exports.types[extension] || false;
	}
	
	/**
	 * Populate the extensions and types maps.
	 * @private
	 */
	
	function populateMaps(extensions, types) {
	  // source preference (least -> most)
	  var preference = ['nginx', 'apache', undefined, 'iana'];
	
	  Object.keys(db).forEach(function forEachMimeType(type) {
	    var mime = db[type];
	    var exts = mime.extensions;
	
	    if (!exts || !exts.length) {
	      return;
	    }
	
	    // mime -> extensions
	    extensions[type] = exts;
	
	    // extension -> mime
	    for (var i = 0; i < exts.length; i++) {
	      var extension = exts[i];
	
	      if (types[extension]) {
	        var from = preference.indexOf(db[types[extension]].source);
	        var to = preference.indexOf(mime.source);
	
	        if (types[extension] !== 'application/octet-stream' && (from > to || from === to && types[extension].substr(0, 12) === 'application/')) {
	          // skip the remapping
	          continue;
	        }
	      }
	
	      // set the extension -> mime
	      types[extension] = type;
	    }
	  });
	}

/***/ }),
/* 531 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	/*!
	 * mime-db
	 * Copyright(c) 2014 Jonathan Ong
	 * MIT Licensed
	 */
	
	/**
	 * Module exports.
	 */
	
	module.exports = __webpack_require__(!(function webpackMissingModule() { var e = new Error("Cannot find module \"./db.json\""); e.code = 'MODULE_NOT_FOUND'; throw e; }()));

/***/ }),
/* 532 */,
/* 533 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {'use strict';
	
	var util = __webpack_require__(271);
	var Stream = __webpack_require__(282);
	var StringDecoder = __webpack_require__(302).StringDecoder;
	
	module.exports = StringStream;
	module.exports.AlignedStringDecoder = AlignedStringDecoder;
	
	function StringStream(from, to) {
	  if (!(this instanceof StringStream)) return new StringStream(from, to);
	
	  Stream.call(this);
	
	  if (from == null) from = 'utf8';
	
	  this.readable = this.writable = true;
	  this.paused = false;
	  this.toEncoding = to == null ? from : to;
	  this.fromEncoding = to == null ? '' : from;
	  this.decoder = new AlignedStringDecoder(this.toEncoding);
	}
	util.inherits(StringStream, Stream);
	
	StringStream.prototype.write = function (data) {
	  if (!this.writable) {
	    var err = new Error('stream not writable');
	    err.code = 'EPIPE';
	    this.emit('error', err);
	    return false;
	  }
	  if (this.fromEncoding) {
	    if (Buffer.isBuffer(data)) data = data.toString();
	    data = new Buffer(data, this.fromEncoding);
	  }
	  var string = this.decoder.write(data);
	  if (string.length) this.emit('data', string);
	  return !this.paused;
	};
	
	StringStream.prototype.flush = function () {
	  if (this.decoder.flush) {
	    var string = this.decoder.flush();
	    if (string.length) this.emit('data', string);
	  }
	};
	
	StringStream.prototype.end = function () {
	  if (!this.writable && !this.readable) return;
	  this.flush();
	  this.emit('end');
	  this.writable = this.readable = false;
	  this.destroy();
	};
	
	StringStream.prototype.destroy = function () {
	  this.decoder = null;
	  this.writable = this.readable = false;
	  this.emit('close');
	};
	
	StringStream.prototype.pause = function () {
	  this.paused = true;
	};
	
	StringStream.prototype.resume = function () {
	  if (this.paused) this.emit('drain');
	  this.paused = false;
	};
	
	function AlignedStringDecoder(encoding) {
	  StringDecoder.call(this, encoding);
	
	  switch (this.encoding) {
	    case 'base64':
	      this.write = alignedWrite;
	      this.alignedBuffer = new Buffer(3);
	      this.alignedBytes = 0;
	      break;
	  }
	}
	util.inherits(AlignedStringDecoder, StringDecoder);
	
	AlignedStringDecoder.prototype.flush = function () {
	  if (!this.alignedBuffer || !this.alignedBytes) return '';
	  var leftover = this.alignedBuffer.toString(this.encoding, 0, this.alignedBytes);
	  this.alignedBytes = 0;
	  return leftover;
	};
	
	function alignedWrite(buffer) {
	  var rem = (this.alignedBytes + buffer.length) % this.alignedBuffer.length;
	  if (!rem && !this.alignedBytes) return buffer.toString(this.encoding);
	
	  var returnBuffer = new Buffer(this.alignedBytes + buffer.length - rem);
	
	  this.alignedBuffer.copy(returnBuffer, 0, 0, this.alignedBytes);
	  buffer.copy(returnBuffer, this.alignedBytes, 0, buffer.length - rem);
	
	  buffer.copy(this.alignedBuffer, 0, buffer.length - rem, buffer.length);
	  this.alignedBytes = rem;
	
	  return returnBuffer.toString(this.encoding);
	}
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(290).Buffer))

/***/ }),
/* 534 */
/***/ (function(module, exports) {

	'use strict';
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
	
	function Caseless(dict) {
	  this.dict = dict || {};
	}
	Caseless.prototype.set = function (name, value, clobber) {
	  if ((typeof name === 'undefined' ? 'undefined' : _typeof(name)) === 'object') {
	    for (var i in name) {
	      this.set(i, name[i], value);
	    }
	  } else {
	    if (typeof clobber === 'undefined') clobber = true;
	    var has = this.has(name);
	
	    if (!clobber && has) this.dict[has] = this.dict[has] + ',' + value;else this.dict[has || name] = value;
	    return has;
	  }
	};
	Caseless.prototype.has = function (name) {
	  var keys = Object.keys(this.dict),
	      name = name.toLowerCase();
	  for (var i = 0; i < keys.length; i++) {
	    if (keys[i].toLowerCase() === name) return keys[i];
	  }
	  return false;
	};
	Caseless.prototype.get = function (name) {
	  name = name.toLowerCase();
	  var result, _key;
	  var headers = this.dict;
	  Object.keys(headers).forEach(function (key) {
	    _key = key.toLowerCase();
	    if (name === _key) result = headers[key];
	  });
	  return result;
	};
	Caseless.prototype.swap = function (name) {
	  var has = this.has(name);
	  if (has === name) return;
	  if (!has) throw new Error('There is no header than matches "' + name + '"');
	  this.dict[name] = this.dict[has];
	  delete this.dict[has];
	};
	Caseless.prototype.del = function (name) {
	  var has = this.has(name);
	  return delete this.dict[has || name];
	};
	
	module.exports = function (dict) {
	  return new Caseless(dict);
	};
	module.exports.httpify = function (resp, headers) {
	  var c = new Caseless(headers);
	  resp.setHeader = function (key, value, clobber) {
	    if (typeof value === 'undefined') return;
	    return c.set(key, value, clobber);
	  };
	  resp.hasHeader = function (key) {
	    return c.has(key);
	  };
	  resp.getHeader = function (key) {
	    return c.get(key);
	  };
	  resp.removeHeader = function (key) {
	    return c.del(key);
	  };
	  resp.headers = c.dict;
	  return c;
	};

/***/ }),
/* 535 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
	
	module.exports = ForeverAgent;
	ForeverAgent.SSL = ForeverAgentSSL;
	
	var util = __webpack_require__(271),
	    Agent = __webpack_require__(464).Agent,
	    net = __webpack_require__(!(function webpackMissingModule() { var e = new Error("Cannot find module \"net\""); e.code = 'MODULE_NOT_FOUND'; throw e; }())),
	    tls = __webpack_require__(!(function webpackMissingModule() { var e = new Error("Cannot find module \"tls\""); e.code = 'MODULE_NOT_FOUND'; throw e; }())),
	    AgentSSL = __webpack_require__(471).Agent;
	
	function getConnectionName(host, port) {
	  var name = '';
	  if (typeof host === 'string') {
	    name = host + ':' + port;
	  } else {
	    // For node.js v012.0 and iojs-v1.5.1, host is an object. And any existing localAddress is part of the connection name.
	    name = host.host + ':' + host.port + ':' + (host.localAddress ? host.localAddress + ':' : ':');
	  }
	  return name;
	}
	
	function ForeverAgent(options) {
	  var self = this;
	  self.options = options || {};
	  self.requests = {};
	  self.sockets = {};
	  self.freeSockets = {};
	  self.maxSockets = self.options.maxSockets || Agent.defaultMaxSockets;
	  self.minSockets = self.options.minSockets || ForeverAgent.defaultMinSockets;
	  self.on('free', function (socket, host, port) {
	    var name = getConnectionName(host, port);
	
	    if (self.requests[name] && self.requests[name].length) {
	      self.requests[name].shift().onSocket(socket);
	    } else if (self.sockets[name].length < self.minSockets) {
	      if (!self.freeSockets[name]) self.freeSockets[name] = [];
	      self.freeSockets[name].push(socket);
	
	      // if an error happens while we don't use the socket anyway, meh, throw the socket away
	      var onIdleError = function onIdleError() {
	        socket.destroy();
	      };
	      socket._onIdleError = onIdleError;
	      socket.on('error', onIdleError);
	    } else {
	      // If there are no pending requests just destroy the
	      // socket and it will get removed from the pool. This
	      // gets us out of timeout issues and allows us to
	      // default to Connection:keep-alive.
	      socket.destroy();
	    }
	  });
	}
	util.inherits(ForeverAgent, Agent);
	
	ForeverAgent.defaultMinSockets = 5;
	
	ForeverAgent.prototype.createConnection = net.createConnection;
	ForeverAgent.prototype.addRequestNoreuse = Agent.prototype.addRequest;
	ForeverAgent.prototype.addRequest = function (req, host, port) {
	  var name = getConnectionName(host, port);
	
	  if (typeof host !== 'string') {
	    var options = host;
	    port = options.port;
	    host = options.host;
	  }
	
	  if (this.freeSockets[name] && this.freeSockets[name].length > 0 && !req.useChunkedEncodingByDefault) {
	    var idleSocket = this.freeSockets[name].pop();
	    idleSocket.removeListener('error', idleSocket._onIdleError);
	    delete idleSocket._onIdleError;
	    req._reusedSocket = true;
	    req.onSocket(idleSocket);
	  } else {
	    this.addRequestNoreuse(req, host, port);
	  }
	};
	
	ForeverAgent.prototype.removeSocket = function (s, name, host, port) {
	  if (this.sockets[name]) {
	    var index = this.sockets[name].indexOf(s);
	    if (index !== -1) {
	      this.sockets[name].splice(index, 1);
	    }
	  } else if (this.sockets[name] && this.sockets[name].length === 0) {
	    // don't leak
	    delete this.sockets[name];
	    delete this.requests[name];
	  }
	
	  if (this.freeSockets[name]) {
	    var index = this.freeSockets[name].indexOf(s);
	    if (index !== -1) {
	      this.freeSockets[name].splice(index, 1);
	      if (this.freeSockets[name].length === 0) {
	        delete this.freeSockets[name];
	      }
	    }
	  }
	
	  if (this.requests[name] && this.requests[name].length) {
	    // If we have pending requests and a socket gets closed a new one
	    // needs to be created to take over in the pool for the one that closed.
	    this.createSocket(name, host, port).emit('free');
	  }
	};
	
	function ForeverAgentSSL(options) {
	  ForeverAgent.call(this, options);
	}
	util.inherits(ForeverAgentSSL, ForeverAgent);
	
	ForeverAgentSSL.prototype.createConnection = createConnectionSSL;
	ForeverAgentSSL.prototype.addRequestNoreuse = AgentSSL.prototype.addRequest;
	
	function createConnectionSSL(port, host, options) {
	  if ((typeof port === 'undefined' ? 'undefined' : _typeof(port)) === 'object') {
	    options = port;
	  } else if ((typeof host === 'undefined' ? 'undefined' : _typeof(host)) === 'object') {
	    options = host;
	  } else if ((typeof options === 'undefined' ? 'undefined' : _typeof(options)) === 'object') {
	    options = options;
	  } else {
	    options = {};
	  }
	
	  if (typeof port === 'number') {
	    options.port = port;
	  }
	
	  if (typeof host === 'string') {
	    options.host = host;
	  }
	
	  return tls.connect(options);
	}

/***/ }),
/* 536 */
/***/ (function(module, exports) {

	'use strict';
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
	
	/* eslint-env browser */
	module.exports = (typeof self === 'undefined' ? 'undefined' : _typeof(self)) == 'object' ? self.FormData : window.FormData;

/***/ }),
/* 537 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
	
	var stream = __webpack_require__(282);
	
	function isStream(obj) {
	  return obj instanceof stream.Stream;
	}
	
	function isReadable(obj) {
	  return isStream(obj) && typeof obj._read == 'function' && _typeof(obj._readableState) == 'object';
	}
	
	function isWritable(obj) {
	  return isStream(obj) && typeof obj._write == 'function' && _typeof(obj._writableState) == 'object';
	}
	
	function isDuplex(obj) {
	  return isReadable(obj) && isWritable(obj);
	}
	
	module.exports = isStream;
	module.exports.isReadable = isReadable;
	module.exports.isWritable = isWritable;
	module.exports.isDuplex = isDuplex;

/***/ }),
/* 538 */
/***/ (function(module, exports) {

	'use strict';
	
	module.exports = isTypedArray;
	isTypedArray.strict = isStrictTypedArray;
	isTypedArray.loose = isLooseTypedArray;
	
	var toString = Object.prototype.toString;
	var names = {
	  '[object Int8Array]': true,
	  '[object Int16Array]': true,
	  '[object Int32Array]': true,
	  '[object Uint8Array]': true,
	  '[object Uint8ClampedArray]': true,
	  '[object Uint16Array]': true,
	  '[object Uint32Array]': true,
	  '[object Float32Array]': true,
	  '[object Float64Array]': true
	};
	
	function isTypedArray(arr) {
	  return isStrictTypedArray(arr) || isLooseTypedArray(arr);
	}
	
	function isStrictTypedArray(arr) {
	  return arr instanceof Int8Array || arr instanceof Int16Array || arr instanceof Int32Array || arr instanceof Uint8Array || arr instanceof Uint8ClampedArray || arr instanceof Uint16Array || arr instanceof Uint32Array || arr instanceof Float32Array || arr instanceof Float64Array;
	}
	
	function isLooseTypedArray(arr) {
	  return names[toString.call(arr)];
	}

/***/ }),
/* 539 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';
	
	function formatHostname(hostname) {
	  // canonicalize the hostname, so that 'oogle.com' won't match 'google.com'
	  return hostname.replace(/^\.*/, '.').toLowerCase();
	}
	
	function parseNoProxyZone(zone) {
	  zone = zone.trim().toLowerCase();
	
	  var zoneParts = zone.split(':', 2),
	      zoneHost = formatHostname(zoneParts[0]),
	      zonePort = zoneParts[1],
	      hasPort = zone.indexOf(':') > -1;
	
	  return { hostname: zoneHost, port: zonePort, hasPort: hasPort };
	}
	
	function uriInNoProxy(uri, noProxy) {
	  var port = uri.port || (uri.protocol === 'https:' ? '443' : '80'),
	      hostname = formatHostname(uri.hostname),
	      noProxyList = noProxy.split(',');
	
	  // iterate through the noProxyList until it finds a match.
	  return noProxyList.map(parseNoProxyZone).some(function (noProxyZone) {
	    var isMatchedAt = hostname.indexOf(noProxyZone.hostname),
	        hostnameMatched = isMatchedAt > -1 && isMatchedAt === hostname.length - noProxyZone.hostname.length;
	
	    if (noProxyZone.hasPort) {
	      return port === noProxyZone.port && hostnameMatched;
	    }
	
	    return hostnameMatched;
	  });
	}
	
	function getProxyFromURI(uri) {
	  // Decide the proper request proxy to use based on the request URI object and the
	  // environmental variables (NO_PROXY, HTTP_PROXY, etc.)
	  // respect NO_PROXY environment variables (see: http://lynx.isc.org/current/breakout/lynx_help/keystrokes/environments.html)
	
	  var noProxy = process.env.NO_PROXY || process.env.no_proxy || '';
	
	  // if the noProxy is a wildcard then return null
	
	  if (noProxy === '*') {
	    return null;
	  }
	
	  // if the noProxy is not empty and the uri is found return null
	
	  if (noProxy !== '' && uriInNoProxy(uri, noProxy)) {
	    return null;
	  }
	
	  // Check for HTTP or HTTPS Proxy in environment Else default to null
	
	  if (uri.protocol === 'http:') {
	    return process.env.HTTP_PROXY || process.env.http_proxy || null;
	  }
	
	  if (uri.protocol === 'https:') {
	    return process.env.HTTPS_PROXY || process.env.https_proxy || process.env.HTTP_PROXY || process.env.http_proxy || null;
	  }
	
	  // if none of that works, return null
	  // (What uri protocol are you using then?)
	
	  return null;
	}
	
	module.exports = getProxyFromURI;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ }),
/* 540 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var qs = __webpack_require__(541),
	    querystring = __webpack_require__(279);
	
	function Querystring(request) {
	  this.request = request;
	  this.lib = null;
	  this.useQuerystring = null;
	  this.parseOptions = null;
	  this.stringifyOptions = null;
	}
	
	Querystring.prototype.init = function (options) {
	  if (this.lib) {
	    return;
	  }
	
	  this.useQuerystring = options.useQuerystring;
	  this.lib = this.useQuerystring ? querystring : qs;
	
	  this.parseOptions = options.qsParseOptions || {};
	  this.stringifyOptions = options.qsStringifyOptions || {};
	};
	
	Querystring.prototype.stringify = function (obj) {
	  return this.useQuerystring ? this.rfc3986(this.lib.stringify(obj, this.stringifyOptions.sep || null, this.stringifyOptions.eq || null, this.stringifyOptions)) : this.lib.stringify(obj, this.stringifyOptions);
	};
	
	Querystring.prototype.parse = function (str) {
	  return this.useQuerystring ? this.lib.parse(str, this.parseOptions.sep || null, this.parseOptions.eq || null, this.parseOptions) : this.lib.parse(str, this.parseOptions);
	};
	
	Querystring.prototype.rfc3986 = function (str) {
	  return str.replace(/[!'()*]/g, function (c) {
	    return '%' + c.charCodeAt(0).toString(16).toUpperCase();
	  });
	};
	
	Querystring.prototype.unescape = querystring.unescape;
	
	exports.Querystring = Querystring;

/***/ }),
/* 541 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var stringify = __webpack_require__(542);
	var parse = __webpack_require__(545);
	var formats = __webpack_require__(544);
	
	module.exports = {
	    formats: formats,
	    parse: parse,
	    stringify: stringify
	};

/***/ }),
/* 542 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
	
	var utils = __webpack_require__(543);
	var formats = __webpack_require__(544);
	
	var arrayPrefixGenerators = {
	    brackets: function brackets(prefix) {
	        // eslint-disable-line func-name-matching
	        return prefix + '[]';
	    },
	    indices: function indices(prefix, key) {
	        // eslint-disable-line func-name-matching
	        return prefix + '[' + key + ']';
	    },
	    repeat: function repeat(prefix) {
	        // eslint-disable-line func-name-matching
	        return prefix;
	    }
	};
	
	var toISO = Date.prototype.toISOString;
	
	var defaults = {
	    delimiter: '&',
	    encode: true,
	    encoder: utils.encode,
	    encodeValuesOnly: false,
	    serializeDate: function serializeDate(date) {
	        // eslint-disable-line func-name-matching
	        return toISO.call(date);
	    },
	    skipNulls: false,
	    strictNullHandling: false
	};
	
	var stringify = function stringify( // eslint-disable-line func-name-matching
	object, prefix, generateArrayPrefix, strictNullHandling, skipNulls, encoder, filter, sort, allowDots, serializeDate, formatter, encodeValuesOnly) {
	    var obj = object;
	    if (typeof filter === 'function') {
	        obj = filter(prefix, obj);
	    } else if (obj instanceof Date) {
	        obj = serializeDate(obj);
	    } else if (obj === null) {
	        if (strictNullHandling) {
	            return encoder && !encodeValuesOnly ? encoder(prefix) : prefix;
	        }
	
	        obj = '';
	    }
	
	    if (typeof obj === 'string' || typeof obj === 'number' || typeof obj === 'boolean' || utils.isBuffer(obj)) {
	        if (encoder) {
	            var keyValue = encodeValuesOnly ? prefix : encoder(prefix);
	            return [formatter(keyValue) + '=' + formatter(encoder(obj))];
	        }
	        return [formatter(prefix) + '=' + formatter(String(obj))];
	    }
	
	    var values = [];
	
	    if (typeof obj === 'undefined') {
	        return values;
	    }
	
	    var objKeys;
	    if (Array.isArray(filter)) {
	        objKeys = filter;
	    } else {
	        var keys = Object.keys(obj);
	        objKeys = sort ? keys.sort(sort) : keys;
	    }
	
	    for (var i = 0; i < objKeys.length; ++i) {
	        var key = objKeys[i];
	
	        if (skipNulls && obj[key] === null) {
	            continue;
	        }
	
	        if (Array.isArray(obj)) {
	            values = values.concat(stringify(obj[key], generateArrayPrefix(prefix, key), generateArrayPrefix, strictNullHandling, skipNulls, encoder, filter, sort, allowDots, serializeDate, formatter, encodeValuesOnly));
	        } else {
	            values = values.concat(stringify(obj[key], prefix + (allowDots ? '.' + key : '[' + key + ']'), generateArrayPrefix, strictNullHandling, skipNulls, encoder, filter, sort, allowDots, serializeDate, formatter, encodeValuesOnly));
	        }
	    }
	
	    return values;
	};
	
	module.exports = function (object, opts) {
	    var obj = object;
	    var options = opts || {};
	
	    if (options.encoder !== null && options.encoder !== undefined && typeof options.encoder !== 'function') {
	        throw new TypeError('Encoder has to be a function.');
	    }
	
	    var delimiter = typeof options.delimiter === 'undefined' ? defaults.delimiter : options.delimiter;
	    var strictNullHandling = typeof options.strictNullHandling === 'boolean' ? options.strictNullHandling : defaults.strictNullHandling;
	    var skipNulls = typeof options.skipNulls === 'boolean' ? options.skipNulls : defaults.skipNulls;
	    var encode = typeof options.encode === 'boolean' ? options.encode : defaults.encode;
	    var encoder = typeof options.encoder === 'function' ? options.encoder : defaults.encoder;
	    var sort = typeof options.sort === 'function' ? options.sort : null;
	    var allowDots = typeof options.allowDots === 'undefined' ? false : options.allowDots;
	    var serializeDate = typeof options.serializeDate === 'function' ? options.serializeDate : defaults.serializeDate;
	    var encodeValuesOnly = typeof options.encodeValuesOnly === 'boolean' ? options.encodeValuesOnly : defaults.encodeValuesOnly;
	    if (typeof options.format === 'undefined') {
	        options.format = formats.default;
	    } else if (!Object.prototype.hasOwnProperty.call(formats.formatters, options.format)) {
	        throw new TypeError('Unknown format option provided.');
	    }
	    var formatter = formats.formatters[options.format];
	    var objKeys;
	    var filter;
	
	    if (typeof options.filter === 'function') {
	        filter = options.filter;
	        obj = filter('', obj);
	    } else if (Array.isArray(options.filter)) {
	        filter = options.filter;
	        objKeys = filter;
	    }
	
	    var keys = [];
	
	    if ((typeof obj === 'undefined' ? 'undefined' : _typeof(obj)) !== 'object' || obj === null) {
	        return '';
	    }
	
	    var arrayFormat;
	    if (options.arrayFormat in arrayPrefixGenerators) {
	        arrayFormat = options.arrayFormat;
	    } else if ('indices' in options) {
	        arrayFormat = options.indices ? 'indices' : 'repeat';
	    } else {
	        arrayFormat = 'indices';
	    }
	
	    var generateArrayPrefix = arrayPrefixGenerators[arrayFormat];
	
	    if (!objKeys) {
	        objKeys = Object.keys(obj);
	    }
	
	    if (sort) {
	        objKeys.sort(sort);
	    }
	
	    for (var i = 0; i < objKeys.length; ++i) {
	        var key = objKeys[i];
	
	        if (skipNulls && obj[key] === null) {
	            continue;
	        }
	
	        keys = keys.concat(stringify(obj[key], key, generateArrayPrefix, strictNullHandling, skipNulls, encode ? encoder : null, filter, sort, allowDots, serializeDate, formatter, encodeValuesOnly));
	    }
	
	    return keys.join(delimiter);
	};

/***/ }),
/* 543 */
/***/ (function(module, exports) {

	'use strict';
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
	
	var has = Object.prototype.hasOwnProperty;
	
	var hexTable = function () {
	    var array = [];
	    for (var i = 0; i < 256; ++i) {
	        array.push('%' + ((i < 16 ? '0' : '') + i.toString(16)).toUpperCase());
	    }
	
	    return array;
	}();
	
	exports.arrayToObject = function (source, options) {
	    var obj = options && options.plainObjects ? Object.create(null) : {};
	    for (var i = 0; i < source.length; ++i) {
	        if (typeof source[i] !== 'undefined') {
	            obj[i] = source[i];
	        }
	    }
	
	    return obj;
	};
	
	exports.merge = function (target, source, options) {
	    if (!source) {
	        return target;
	    }
	
	    if ((typeof source === 'undefined' ? 'undefined' : _typeof(source)) !== 'object') {
	        if (Array.isArray(target)) {
	            target.push(source);
	        } else if ((typeof target === 'undefined' ? 'undefined' : _typeof(target)) === 'object') {
	            if (options.plainObjects || options.allowPrototypes || !has.call(Object.prototype, source)) {
	                target[source] = true;
	            }
	        } else {
	            return [target, source];
	        }
	
	        return target;
	    }
	
	    if ((typeof target === 'undefined' ? 'undefined' : _typeof(target)) !== 'object') {
	        return [target].concat(source);
	    }
	
	    var mergeTarget = target;
	    if (Array.isArray(target) && !Array.isArray(source)) {
	        mergeTarget = exports.arrayToObject(target, options);
	    }
	
	    if (Array.isArray(target) && Array.isArray(source)) {
	        source.forEach(function (item, i) {
	            if (has.call(target, i)) {
	                if (target[i] && _typeof(target[i]) === 'object') {
	                    target[i] = exports.merge(target[i], item, options);
	                } else {
	                    target.push(item);
	                }
	            } else {
	                target[i] = item;
	            }
	        });
	        return target;
	    }
	
	    return Object.keys(source).reduce(function (acc, key) {
	        var value = source[key];
	
	        if (Object.prototype.hasOwnProperty.call(acc, key)) {
	            acc[key] = exports.merge(acc[key], value, options);
	        } else {
	            acc[key] = value;
	        }
	        return acc;
	    }, mergeTarget);
	};
	
	exports.decode = function (str) {
	    try {
	        return decodeURIComponent(str.replace(/\+/g, ' '));
	    } catch (e) {
	        return str;
	    }
	};
	
	exports.encode = function (str) {
	    // This code was originally written by Brian White (mscdex) for the io.js core querystring library.
	    // It has been adapted here for stricter adherence to RFC 3986
	    if (str.length === 0) {
	        return str;
	    }
	
	    var string = typeof str === 'string' ? str : String(str);
	
	    var out = '';
	    for (var i = 0; i < string.length; ++i) {
	        var c = string.charCodeAt(i);
	
	        if (c === 0x2D || // -
	        c === 0x2E || // .
	        c === 0x5F || // _
	        c === 0x7E || // ~
	        c >= 0x30 && c <= 0x39 || // 0-9
	        c >= 0x41 && c <= 0x5A || // a-z
	        c >= 0x61 && c <= 0x7A // A-Z
	        ) {
	                out += string.charAt(i);
	                continue;
	            }
	
	        if (c < 0x80) {
	            out = out + hexTable[c];
	            continue;
	        }
	
	        if (c < 0x800) {
	            out = out + (hexTable[0xC0 | c >> 6] + hexTable[0x80 | c & 0x3F]);
	            continue;
	        }
	
	        if (c < 0xD800 || c >= 0xE000) {
	            out = out + (hexTable[0xE0 | c >> 12] + hexTable[0x80 | c >> 6 & 0x3F] + hexTable[0x80 | c & 0x3F]);
	            continue;
	        }
	
	        i += 1;
	        c = 0x10000 + ((c & 0x3FF) << 10 | string.charCodeAt(i) & 0x3FF);
	        out += hexTable[0xF0 | c >> 18] + hexTable[0x80 | c >> 12 & 0x3F] + hexTable[0x80 | c >> 6 & 0x3F] + hexTable[0x80 | c & 0x3F]; // eslint-disable-line max-len
	    }
	
	    return out;
	};
	
	exports.compact = function (obj, references) {
	    if ((typeof obj === 'undefined' ? 'undefined' : _typeof(obj)) !== 'object' || obj === null) {
	        return obj;
	    }
	
	    var refs = references || [];
	    var lookup = refs.indexOf(obj);
	    if (lookup !== -1) {
	        return refs[lookup];
	    }
	
	    refs.push(obj);
	
	    if (Array.isArray(obj)) {
	        var compacted = [];
	
	        for (var i = 0; i < obj.length; ++i) {
	            if (obj[i] && _typeof(obj[i]) === 'object') {
	                compacted.push(exports.compact(obj[i], refs));
	            } else if (typeof obj[i] !== 'undefined') {
	                compacted.push(obj[i]);
	            }
	        }
	
	        return compacted;
	    }
	
	    var keys = Object.keys(obj);
	    keys.forEach(function (key) {
	        obj[key] = exports.compact(obj[key], refs);
	    });
	
	    return obj;
	};
	
	exports.isRegExp = function (obj) {
	    return Object.prototype.toString.call(obj) === '[object RegExp]';
	};
	
	exports.isBuffer = function (obj) {
	    if (obj === null || typeof obj === 'undefined') {
	        return false;
	    }
	
	    return !!(obj.constructor && obj.constructor.isBuffer && obj.constructor.isBuffer(obj));
	};

/***/ }),
/* 544 */
/***/ (function(module, exports) {

	'use strict';
	
	var replace = String.prototype.replace;
	var percentTwenties = /%20/g;
	
	module.exports = {
	    'default': 'RFC3986',
	    formatters: {
	        RFC1738: function RFC1738(value) {
	            return replace.call(value, percentTwenties, '+');
	        },
	        RFC3986: function RFC3986(value) {
	            return value;
	        }
	    },
	    RFC1738: 'RFC1738',
	    RFC3986: 'RFC3986'
	};

/***/ }),
/* 545 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var utils = __webpack_require__(543);
	
	var has = Object.prototype.hasOwnProperty;
	
	var defaults = {
	    allowDots: false,
	    allowPrototypes: false,
	    arrayLimit: 20,
	    decoder: utils.decode,
	    delimiter: '&',
	    depth: 5,
	    parameterLimit: 1000,
	    plainObjects: false,
	    strictNullHandling: false
	};
	
	var parseValues = function parseQueryStringValues(str, options) {
	    var obj = {};
	    var parts = str.split(options.delimiter, options.parameterLimit === Infinity ? undefined : options.parameterLimit);
	
	    for (var i = 0; i < parts.length; ++i) {
	        var part = parts[i];
	        var pos = part.indexOf(']=') === -1 ? part.indexOf('=') : part.indexOf(']=') + 1;
	
	        var key, val;
	        if (pos === -1) {
	            key = options.decoder(part);
	            val = options.strictNullHandling ? null : '';
	        } else {
	            key = options.decoder(part.slice(0, pos));
	            val = options.decoder(part.slice(pos + 1));
	        }
	        if (has.call(obj, key)) {
	            obj[key] = [].concat(obj[key]).concat(val);
	        } else {
	            obj[key] = val;
	        }
	    }
	
	    return obj;
	};
	
	var parseObject = function parseObjectRecursive(chain, val, options) {
	    if (!chain.length) {
	        return val;
	    }
	
	    var root = chain.shift();
	
	    var obj;
	    if (root === '[]') {
	        obj = [];
	        obj = obj.concat(parseObject(chain, val, options));
	    } else {
	        obj = options.plainObjects ? Object.create(null) : {};
	        var cleanRoot = root.charAt(0) === '[' && root.charAt(root.length - 1) === ']' ? root.slice(1, -1) : root;
	        var index = parseInt(cleanRoot, 10);
	        if (!isNaN(index) && root !== cleanRoot && String(index) === cleanRoot && index >= 0 && options.parseArrays && index <= options.arrayLimit) {
	            obj = [];
	            obj[index] = parseObject(chain, val, options);
	        } else {
	            obj[cleanRoot] = parseObject(chain, val, options);
	        }
	    }
	
	    return obj;
	};
	
	var parseKeys = function parseQueryStringKeys(givenKey, val, options) {
	    if (!givenKey) {
	        return;
	    }
	
	    // Transform dot notation to bracket notation
	    var key = options.allowDots ? givenKey.replace(/\.([^.[]+)/g, '[$1]') : givenKey;
	
	    // The regex chunks
	
	    var brackets = /(\[[^[\]]*])/;
	    var child = /(\[[^[\]]*])/g;
	
	    // Get the parent
	
	    var segment = brackets.exec(key);
	    var parent = segment ? key.slice(0, segment.index) : key;
	
	    // Stash the parent if it exists
	
	    var keys = [];
	    if (parent) {
	        // If we aren't using plain objects, optionally prefix keys
	        // that would overwrite object prototype properties
	        if (!options.plainObjects && has.call(Object.prototype, parent)) {
	            if (!options.allowPrototypes) {
	                return;
	            }
	        }
	
	        keys.push(parent);
	    }
	
	    // Loop through children appending to the array until we hit depth
	
	    var i = 0;
	    while ((segment = child.exec(key)) !== null && i < options.depth) {
	        i += 1;
	        if (!options.plainObjects && has.call(Object.prototype, segment[1].slice(1, -1))) {
	            if (!options.allowPrototypes) {
	                return;
	            }
	        }
	        keys.push(segment[1]);
	    }
	
	    // If there's a remainder, just add whatever is left
	
	    if (segment) {
	        keys.push('[' + key.slice(segment.index) + ']');
	    }
	
	    return parseObject(keys, val, options);
	};
	
	module.exports = function (str, opts) {
	    var options = opts || {};
	
	    if (options.decoder !== null && options.decoder !== undefined && typeof options.decoder !== 'function') {
	        throw new TypeError('Decoder has to be a function.');
	    }
	
	    options.delimiter = typeof options.delimiter === 'string' || utils.isRegExp(options.delimiter) ? options.delimiter : defaults.delimiter;
	    options.depth = typeof options.depth === 'number' ? options.depth : defaults.depth;
	    options.arrayLimit = typeof options.arrayLimit === 'number' ? options.arrayLimit : defaults.arrayLimit;
	    options.parseArrays = options.parseArrays !== false;
	    options.decoder = typeof options.decoder === 'function' ? options.decoder : defaults.decoder;
	    options.allowDots = typeof options.allowDots === 'boolean' ? options.allowDots : defaults.allowDots;
	    options.plainObjects = typeof options.plainObjects === 'boolean' ? options.plainObjects : defaults.plainObjects;
	    options.allowPrototypes = typeof options.allowPrototypes === 'boolean' ? options.allowPrototypes : defaults.allowPrototypes;
	    options.parameterLimit = typeof options.parameterLimit === 'number' ? options.parameterLimit : defaults.parameterLimit;
	    options.strictNullHandling = typeof options.strictNullHandling === 'boolean' ? options.strictNullHandling : defaults.strictNullHandling;
	
	    if (str === '' || str === null || typeof str === 'undefined') {
	        return options.plainObjects ? Object.create(null) : {};
	    }
	
	    var tempObj = typeof str === 'string' ? parseValues(str, options) : str;
	    var obj = options.plainObjects ? Object.create(null) : {};
	
	    // Iterate over the keys and setup the new object
	
	    var keys = Object.keys(tempObj);
	    for (var i = 0; i < keys.length; ++i) {
	        var key = keys[i];
	        var newObj = parseKeys(key, tempObj[key], options);
	        obj = utils.merge(obj, newObj, options);
	    }
	
	    return utils.compact(obj);
	};

/***/ }),
/* 546 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var fs = __webpack_require__(!(function webpackMissingModule() { var e = new Error("Cannot find module \"fs\""); e.code = 'MODULE_NOT_FOUND'; throw e; }()));
	var qs = __webpack_require__(279);
	var validate = __webpack_require__(547);
	var extend = __webpack_require__(450);
	
	function Har(request) {
	  this.request = request;
	}
	
	Har.prototype.reducer = function (obj, pair) {
	  // new property ?
	  if (obj[pair.name] === undefined) {
	    obj[pair.name] = pair.value;
	    return obj;
	  }
	
	  // existing? convert to array
	  var arr = [obj[pair.name], pair.value];
	
	  obj[pair.name] = arr;
	
	  return obj;
	};
	
	Har.prototype.prep = function (data) {
	  // construct utility properties
	  data.queryObj = {};
	  data.headersObj = {};
	  data.postData.jsonObj = false;
	  data.postData.paramsObj = false;
	
	  // construct query objects
	  if (data.queryString && data.queryString.length) {
	    data.queryObj = data.queryString.reduce(this.reducer, {});
	  }
	
	  // construct headers objects
	  if (data.headers && data.headers.length) {
	    // loweCase header keys
	    data.headersObj = data.headers.reduceRight(function (headers, header) {
	      headers[header.name] = header.value;
	      return headers;
	    }, {});
	  }
	
	  // construct Cookie header
	  if (data.cookies && data.cookies.length) {
	    var cookies = data.cookies.map(function (cookie) {
	      return cookie.name + '=' + cookie.value;
	    });
	
	    if (cookies.length) {
	      data.headersObj.cookie = cookies.join('; ');
	    }
	  }
	
	  // prep body
	  function some(arr) {
	    return arr.some(function (type) {
	      return data.postData.mimeType.indexOf(type) === 0;
	    });
	  }
	
	  if (some(['multipart/mixed', 'multipart/related', 'multipart/form-data', 'multipart/alternative'])) {
	
	    // reset values
	    data.postData.mimeType = 'multipart/form-data';
	  } else if (some(['application/x-www-form-urlencoded'])) {
	
	    if (!data.postData.params) {
	      data.postData.text = '';
	    } else {
	      data.postData.paramsObj = data.postData.params.reduce(this.reducer, {});
	
	      // always overwrite
	      data.postData.text = qs.stringify(data.postData.paramsObj);
	    }
	  } else if (some(['text/json', 'text/x-json', 'application/json', 'application/x-json'])) {
	
	    data.postData.mimeType = 'application/json';
	
	    if (data.postData.text) {
	      try {
	        data.postData.jsonObj = JSON.parse(data.postData.text);
	      } catch (e) {
	        this.request.debug(e);
	
	        // force back to text/plain
	        data.postData.mimeType = 'text/plain';
	      }
	    }
	  }
	
	  return data;
	};
	
	Har.prototype.options = function (options) {
	  // skip if no har property defined
	  if (!options.har) {
	    return options;
	  }
	
	  var har = {};
	  extend(har, options.har);
	
	  // only process the first entry
	  if (har.log && har.log.entries) {
	    har = har.log.entries[0];
	  }
	
	  // add optional properties to make validation successful
	  har.url = har.url || options.url || options.uri || options.baseUrl || '/';
	  har.httpVersion = har.httpVersion || 'HTTP/1.1';
	  har.queryString = har.queryString || [];
	  har.headers = har.headers || [];
	  har.cookies = har.cookies || [];
	  har.postData = har.postData || {};
	  har.postData.mimeType = har.postData.mimeType || 'application/octet-stream';
	
	  har.bodySize = 0;
	  har.headersSize = 0;
	  har.postData.size = 0;
	
	  if (!validate.request(har)) {
	    return options;
	  }
	
	  // clean up and get some utility properties
	  var req = this.prep(har);
	
	  // construct new options
	  if (req.url) {
	    options.url = req.url;
	  }
	
	  if (req.method) {
	    options.method = req.method;
	  }
	
	  if (Object.keys(req.queryObj).length) {
	    options.qs = req.queryObj;
	  }
	
	  if (Object.keys(req.headersObj).length) {
	    options.headers = req.headersObj;
	  }
	
	  function test(type) {
	    return req.postData.mimeType.indexOf(type) === 0;
	  }
	  if (test('application/x-www-form-urlencoded')) {
	    options.form = req.postData.paramsObj;
	  } else if (test('application/json')) {
	    if (req.postData.jsonObj) {
	      options.body = req.postData.jsonObj;
	      options.json = true;
	    }
	  } else if (test('multipart/form-data')) {
	    options.formData = {};
	
	    req.postData.params.forEach(function (param) {
	      var attachment = {};
	
	      if (!param.fileName && !param.fileName && !param.contentType) {
	        options.formData[param.name] = param.value;
	        return;
	      }
	
	      // attempt to read from disk!
	      if (param.fileName && !param.value) {
	        attachment.value = fs.createReadStream(param.fileName);
	      } else if (param.value) {
	        attachment.value = param.value;
	      }
	
	      if (param.fileName) {
	        attachment.options = {
	          filename: param.fileName,
	          contentType: param.contentType ? param.contentType : null
	        };
	      }
	
	      options.formData[param.name] = attachment;
	    });
	  } else {
	    if (req.postData.text) {
	      options.body = req.postData.text;
	    }
	  }
	
	  return options;
	};
	
	exports.Har = Har;

/***/ }),
/* 547 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.validate = validate;
	exports.afterRequest = afterRequest;
	exports.beforeRequest = beforeRequest;
	exports.browser = browser;
	exports.cache = cache;
	exports.content = content;
	exports.cookie = cookie;
	exports.creator = creator;
	exports.entry = entry;
	exports.har = har;
	exports.header = header;
	exports.log = log;
	exports.page = page;
	exports.pageTimings = pageTimings;
	exports.postData = postData;
	exports.query = query;
	exports.request = request;
	exports.response = response;
	exports.timings = timings;
	
	var _harSchema = __webpack_require__(548);
	
	var schemas = _interopRequireWildcard(_harSchema);
	
	var _ajv = __webpack_require__(567);
	
	var _ajv2 = _interopRequireDefault(_ajv);
	
	var _error = __webpack_require__(568);
	
	var _error2 = _interopRequireDefault(_error);
	
	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { default: obj };
	}
	
	function _interopRequireWildcard(obj) {
	  if (obj && obj.__esModule) {
	    return obj;
	  } else {
	    var newObj = {};if (obj != null) {
	      for (var key in obj) {
	        if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
	      }
	    }newObj.default = obj;return newObj;
	  }
	}
	
	var ajv = void 0;
	
	function validate(name) {
	  var data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
	
	  // validator config
	  ajv = ajv || new _ajv2.default({
	    allErrors: true,
	    schemas: schemas
	  });
	
	  var validate = ajv.getSchema(name + '.json');
	
	  return new Promise(function (resolve, reject) {
	    var valid = validate(data);
	
	    !valid ? reject(new _error2.default(validate.errors)) : resolve(data);
	  });
	}
	
	function afterRequest(data) {
	  return validate('afterRequest', data);
	}
	
	function beforeRequest(data) {
	  return validate('beforeRequest', data);
	}
	
	function browser(data) {
	  return validate('browser', data);
	}
	
	function cache(data) {
	  return validate('cache', data);
	}
	
	function content(data) {
	  return validate('content', data);
	}
	
	function cookie(data) {
	  return validate('cookie', data);
	}
	
	function creator(data) {
	  return validate('creator', data);
	}
	
	function entry(data) {
	  return validate('entry', data);
	}
	
	function har(data) {
	  return validate('har', data);
	}
	
	function header(data) {
	  return validate('header', data);
	}
	
	function log(data) {
	  return validate('log', data);
	}
	
	function page(data) {
	  return validate('page', data);
	}
	
	function pageTimings(data) {
	  return validate('pageTimings', data);
	}
	
	function postData(data) {
	  return validate('postData', data);
	}
	
	function query(data) {
	  return validate('query', data);
	}
	
	function request(data) {
	  return validate('request', data);
	}
	
	function response(data) {
	  return validate('response', data);
	}
	
	function timings(data) {
	  return validate('timings', data);
	}

/***/ }),
/* 548 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports = {
	  afterRequest: __webpack_require__(!(function webpackMissingModule() { var e = new Error("Cannot find module \"./afterRequest.json\""); e.code = 'MODULE_NOT_FOUND'; throw e; }())),
	  beforeRequest: __webpack_require__(!(function webpackMissingModule() { var e = new Error("Cannot find module \"./beforeRequest.json\""); e.code = 'MODULE_NOT_FOUND'; throw e; }())),
	  browser: __webpack_require__(!(function webpackMissingModule() { var e = new Error("Cannot find module \"./browser.json\""); e.code = 'MODULE_NOT_FOUND'; throw e; }())),
	  cache: __webpack_require__(!(function webpackMissingModule() { var e = new Error("Cannot find module \"./cache.json\""); e.code = 'MODULE_NOT_FOUND'; throw e; }())),
	  content: __webpack_require__(!(function webpackMissingModule() { var e = new Error("Cannot find module \"./content.json\""); e.code = 'MODULE_NOT_FOUND'; throw e; }())),
	  cookie: __webpack_require__(!(function webpackMissingModule() { var e = new Error("Cannot find module \"./cookie.json\""); e.code = 'MODULE_NOT_FOUND'; throw e; }())),
	  creator: __webpack_require__(!(function webpackMissingModule() { var e = new Error("Cannot find module \"./creator.json\""); e.code = 'MODULE_NOT_FOUND'; throw e; }())),
	  entry: __webpack_require__(!(function webpackMissingModule() { var e = new Error("Cannot find module \"./entry.json\""); e.code = 'MODULE_NOT_FOUND'; throw e; }())),
	  har: __webpack_require__(!(function webpackMissingModule() { var e = new Error("Cannot find module \"./har.json\""); e.code = 'MODULE_NOT_FOUND'; throw e; }())),
	  header: __webpack_require__(!(function webpackMissingModule() { var e = new Error("Cannot find module \"./header.json\""); e.code = 'MODULE_NOT_FOUND'; throw e; }())),
	  log: __webpack_require__(!(function webpackMissingModule() { var e = new Error("Cannot find module \"./log.json\""); e.code = 'MODULE_NOT_FOUND'; throw e; }())),
	  page: __webpack_require__(!(function webpackMissingModule() { var e = new Error("Cannot find module \"./page.json\""); e.code = 'MODULE_NOT_FOUND'; throw e; }())),
	  pageTimings: __webpack_require__(!(function webpackMissingModule() { var e = new Error("Cannot find module \"./pageTimings.json\""); e.code = 'MODULE_NOT_FOUND'; throw e; }())),
	  postData: __webpack_require__(!(function webpackMissingModule() { var e = new Error("Cannot find module \"./postData.json\""); e.code = 'MODULE_NOT_FOUND'; throw e; }())),
	  query: __webpack_require__(!(function webpackMissingModule() { var e = new Error("Cannot find module \"./query.json\""); e.code = 'MODULE_NOT_FOUND'; throw e; }())),
	  request: __webpack_require__(!(function webpackMissingModule() { var e = new Error("Cannot find module \"./request.json\""); e.code = 'MODULE_NOT_FOUND'; throw e; }())),
	  response: __webpack_require__(!(function webpackMissingModule() { var e = new Error("Cannot find module \"./response.json\""); e.code = 'MODULE_NOT_FOUND'; throw e; }())),
	  timings: __webpack_require__(!(function webpackMissingModule() { var e = new Error("Cannot find module \"./timings.json\""); e.code = 'MODULE_NOT_FOUND'; throw e; }()))
	};

/***/ }),
/* 549 */,
/* 550 */,
/* 551 */,
/* 552 */,
/* 553 */,
/* 554 */,
/* 555 */,
/* 556 */,
/* 557 */,
/* 558 */,
/* 559 */,
/* 560 */,
/* 561 */,
/* 562 */,
/* 563 */,
/* 564 */,
/* 565 */,
/* 566 */,
/* 567 */
/***/ (function(module, exports, __webpack_require__) {

	var require;var require;var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/* WEBPACK VAR INJECTION */(function(global) {"use strict";
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
	
	(function (f) {
	  if (( false ? "undefined" : _typeof(exports)) === "object" && typeof module !== "undefined") {
	    module.exports = f();
	  } else if (true) {
	    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_FACTORY__ = (f), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	  } else {
	    var g;if (typeof window !== "undefined") {
	      g = window;
	    } else if (typeof global !== "undefined") {
	      g = global;
	    } else if (typeof self !== "undefined") {
	      g = self;
	    } else {
	      g = this;
	    }g.Ajv = f();
	  }
	})(function () {
	  var define, module, exports;return function e(t, n, r) {
	    function s(o, u) {
	      if (!n[o]) {
	        if (!t[o]) {
	          var a = typeof require == "function" && require;if (!u && a) return require(o, !0);if (i) return i(o, !0);var f = new Error("Cannot find module '" + o + "'");throw f.code = "MODULE_NOT_FOUND", f;
	        }var l = n[o] = { exports: {} };t[o][0].call(l.exports, function (e) {
	          var n = t[o][1][e];return s(n ? n : e);
	        }, l, l.exports, e, t, n, r);
	      }return n[o].exports;
	    }var i = typeof require == "function" && require;for (var o = 0; o < r.length; o++) {
	      s(r[o]);
	    }return s;
	  }({ 1: [function (require, module, exports) {
	      'use strict';
	
	      module.exports = {
	        setup: setupAsync,
	        compile: compileAsync
	      };
	
	      var util = require('./compile/util');
	
	      var ASYNC = {
	        '*': checkGenerators,
	        'co*': checkGenerators,
	        'es7': checkAsyncFunction
	      };
	
	      var TRANSPILE = {
	        'nodent': getNodent,
	        'regenerator': getRegenerator
	      };
	
	      var MODES = [{ async: 'co*' }, { async: 'es7', transpile: 'nodent' }, { async: 'co*', transpile: 'regenerator' }];
	
	      var regenerator, nodent;
	
	      function setupAsync(opts, required) {
	        if (required !== false) required = true;
	        var async = opts.async,
	            transpile = opts.transpile,
	            check;
	
	        switch (typeof transpile === "undefined" ? "undefined" : _typeof(transpile)) {
	          case 'string':
	            var get = TRANSPILE[transpile];
	            if (!get) throw new Error('bad transpiler: ' + transpile);
	            return opts._transpileFunc = get(opts, required);
	          case 'undefined':
	          case 'boolean':
	            if (typeof async == 'string') {
	              check = ASYNC[async];
	              if (!check) throw new Error('bad async mode: ' + async);
	              return opts.transpile = check(opts, required);
	            }
	
	            for (var i = 0; i < MODES.length; i++) {
	              var _opts = MODES[i];
	              if (setupAsync(_opts, false)) {
	                util.copy(_opts, opts);
	                return opts.transpile;
	              }
	            }
	            /* istanbul ignore next */
	            throw new Error('generators, nodent and regenerator are not available');
	          case 'function':
	            return opts._transpileFunc = opts.transpile;
	          default:
	            throw new Error('bad transpiler: ' + transpile);
	        }
	      }
	
	      function checkGenerators(opts, required) {
	        /* jshint evil: true */
	        try {
	          new Function('(function*(){})()')();
	          return true;
	        } catch (e) {
	          /* istanbul ignore next */
	          if (required) throw new Error('generators not supported');
	        }
	      }
	
	      function checkAsyncFunction(opts, required) {
	        /* jshint evil: true */
	        try {
	          new Function('(async function(){})()')();
	          /* istanbul ignore next */
	          return true;
	        } catch (e) {
	          if (required) throw new Error('es7 async functions not supported');
	        }
	      }
	
	      function getRegenerator(opts, required) {
	        try {
	          if (!regenerator) {
	            var name = 'regenerator';
	            regenerator = require(name);
	            regenerator.runtime();
	          }
	          if (!opts.async || opts.async === true) opts.async = 'es7';
	          return regeneratorTranspile;
	        } catch (e) {
	          /* istanbul ignore next */
	          if (required) throw new Error('regenerator not available');
	        }
	      }
	
	      function regeneratorTranspile(code) {
	        return regenerator.compile(code).code;
	      }
	
	      function getNodent(opts, required) {
	        /* jshint evil: true */
	        try {
	          if (!nodent) {
	            var name = 'nodent';
	            nodent = require(name)({ log: false, dontInstallRequireHook: true });
	          }
	          if (opts.async != 'es7') {
	            if (opts.async && opts.async !== true) console.warn('nodent transpiles only es7 async functions');
	            opts.async = 'es7';
	          }
	          return nodentTranspile;
	        } catch (e) {
	          /* istanbul ignore next */
	          if (required) throw new Error('nodent not available');
	        }
	      }
	
	      function nodentTranspile(code) {
	        return nodent.compile(code, '', { promises: true, sourcemap: false }).code;
	      }
	
	      /**
	       * Creates validating function for passed schema with asynchronous loading of missing schemas.
	       * `loadSchema` option should be a function that accepts schema uri and node-style callback.
	       * @this  Ajv
	       * @param {Object}   schema schema object
	       * @param {Function} callback node-style callback, it is always called with 2 parameters: error (or null) and validating function.
	       */
	      function compileAsync(schema, callback) {
	        /* eslint no-shadow: 0 */
	        /* jshint validthis: true */
	        var schemaObj;
	        var self = this;
	        try {
	          schemaObj = this._addSchema(schema);
	        } catch (e) {
	          setTimeout(function () {
	            callback(e);
	          });
	          return;
	        }
	        if (schemaObj.validate) {
	          setTimeout(function () {
	            callback(null, schemaObj.validate);
	          });
	        } else {
	          if (typeof this._opts.loadSchema != 'function') throw new Error('options.loadSchema should be a function');
	          _compileAsync(schema, callback, true);
	        }
	
	        function _compileAsync(schema, callback, firstCall) {
	          var validate;
	          try {
	            validate = self.compile(schema);
	          } catch (e) {
	            if (e.missingSchema) loadMissingSchema(e);else deferCallback(e);
	            return;
	          }
	          deferCallback(null, validate);
	
	          function loadMissingSchema(e) {
	            var ref = e.missingSchema;
	            if (self._refs[ref] || self._schemas[ref]) return callback(new Error('Schema ' + ref + ' is loaded but ' + e.missingRef + ' cannot be resolved'));
	            var _callbacks = self._loadingSchemas[ref];
	            if (_callbacks) {
	              if (typeof _callbacks == 'function') self._loadingSchemas[ref] = [_callbacks, schemaLoaded];else _callbacks[_callbacks.length] = schemaLoaded;
	            } else {
	              self._loadingSchemas[ref] = schemaLoaded;
	              self._opts.loadSchema(ref, function (err, sch) {
	                var _callbacks = self._loadingSchemas[ref];
	                delete self._loadingSchemas[ref];
	                if (typeof _callbacks == 'function') {
	                  _callbacks(err, sch);
	                } else {
	                  for (var i = 0; i < _callbacks.length; i++) {
	                    _callbacks[i](err, sch);
	                  }
	                }
	              });
	            }
	
	            function schemaLoaded(err, sch) {
	              if (err) return callback(err);
	              if (!(self._refs[ref] || self._schemas[ref])) {
	                try {
	                  self.addSchema(sch, ref);
	                } catch (e) {
	                  callback(e);
	                  return;
	                }
	              }
	              _compileAsync(schema, callback);
	            }
	          }
	
	          function deferCallback(err, validate) {
	            if (firstCall) setTimeout(function () {
	              callback(err, validate);
	            });else return callback(err, validate);
	          }
	        }
	      }
	    }, { "./compile/util": 11 }], 2: [function (require, module, exports) {
	      'use strict';
	
	      var Cache = module.exports = function Cache() {
	        this._cache = {};
	      };
	
	      Cache.prototype.put = function Cache_put(key, value) {
	        this._cache[key] = value;
	      };
	
	      Cache.prototype.get = function Cache_get(key) {
	        return this._cache[key];
	      };
	
	      Cache.prototype.del = function Cache_del(key) {
	        delete this._cache[key];
	      };
	
	      Cache.prototype.clear = function Cache_clear() {
	        this._cache = {};
	      };
	    }, {}], 3: [function (require, module, exports) {
	      'use strict';
	
	      //all requires must be explicit because browserify won't work with dynamic requires
	
	      module.exports = {
	        '$ref': require('../dotjs/ref'),
	        allOf: require('../dotjs/allOf'),
	        anyOf: require('../dotjs/anyOf'),
	        dependencies: require('../dotjs/dependencies'),
	        'enum': require('../dotjs/enum'),
	        format: require('../dotjs/format'),
	        items: require('../dotjs/items'),
	        maximum: require('../dotjs/_limit'),
	        minimum: require('../dotjs/_limit'),
	        maxItems: require('../dotjs/_limitItems'),
	        minItems: require('../dotjs/_limitItems'),
	        maxLength: require('../dotjs/_limitLength'),
	        minLength: require('../dotjs/_limitLength'),
	        maxProperties: require('../dotjs/_limitProperties'),
	        minProperties: require('../dotjs/_limitProperties'),
	        multipleOf: require('../dotjs/multipleOf'),
	        not: require('../dotjs/not'),
	        oneOf: require('../dotjs/oneOf'),
	        pattern: require('../dotjs/pattern'),
	        properties: require('../dotjs/properties'),
	        required: require('../dotjs/required'),
	        uniqueItems: require('../dotjs/uniqueItems'),
	        validate: require('../dotjs/validate')
	      };
	    }, { "../dotjs/_limit": 14, "../dotjs/_limitItems": 15, "../dotjs/_limitLength": 16, "../dotjs/_limitProperties": 17, "../dotjs/allOf": 18, "../dotjs/anyOf": 19, "../dotjs/dependencies": 22, "../dotjs/enum": 23, "../dotjs/format": 24, "../dotjs/items": 25, "../dotjs/multipleOf": 26, "../dotjs/not": 27, "../dotjs/oneOf": 28, "../dotjs/pattern": 29, "../dotjs/properties": 31, "../dotjs/ref": 32, "../dotjs/required": 33, "../dotjs/uniqueItems": 35, "../dotjs/validate": 36 }], 4: [function (require, module, exports) {
	      'use strict';
	
	      /*eslint complexity: 0*/
	
	      module.exports = function equal(a, b) {
	        if (a === b) return true;
	
	        var arrA = Array.isArray(a),
	            arrB = Array.isArray(b),
	            i;
	
	        if (arrA && arrB) {
	          if (a.length != b.length) return false;
	          for (i = 0; i < a.length; i++) {
	            if (!equal(a[i], b[i])) return false;
	          }return true;
	        }
	
	        if (arrA != arrB) return false;
	
	        if (a && b && (typeof a === "undefined" ? "undefined" : _typeof(a)) === 'object' && (typeof b === "undefined" ? "undefined" : _typeof(b)) === 'object') {
	          var keys = Object.keys(a);
	          if (keys.length !== Object.keys(b).length) return false;
	
	          var dateA = a instanceof Date,
	              dateB = b instanceof Date;
	          if (dateA && dateB) return a.getTime() == b.getTime();
	          if (dateA != dateB) return false;
	
	          var regexpA = a instanceof RegExp,
	              regexpB = b instanceof RegExp;
	          if (regexpA && regexpB) return a.toString() == b.toString();
	          if (regexpA != regexpB) return false;
	
	          for (i = 0; i < keys.length; i++) {
	            if (!Object.prototype.hasOwnProperty.call(b, keys[i])) return false;
	          }for (i = 0; i < keys.length; i++) {
	            if (!equal(a[keys[i]], b[keys[i]])) return false;
	          }return true;
	        }
	
	        return false;
	      };
	    }, {}], 5: [function (require, module, exports) {
	      'use strict';
	
	      var util = require('./util');
	
	      var DATE = /^\d\d\d\d-(\d\d)-(\d\d)$/;
	      var DAYS = [0, 31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];
	      var TIME = /^(\d\d):(\d\d):(\d\d)(\.\d+)?(z|[+-]\d\d:\d\d)?$/i;
	      var HOSTNAME = /^[a-z0-9](?:[a-z0-9-]{0,61}[a-z0-9])?(?:\.[a-z0-9](?:[-0-9a-z]{0,61}[0-9a-z])?)*$/i;
	      var URI = /^(?:[a-z][a-z0-9+\-.]*:)?(?:\/?\/(?:(?:[a-z0-9\-._~!$&'()*+,;=:]|%[0-9a-f]{2})*@)?(?:\[(?:(?:(?:(?:[0-9a-f]{1,4}:){6}|::(?:[0-9a-f]{1,4}:){5}|(?:[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:){4}|(?:(?:[0-9a-f]{1,4}:){0,1}[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:){3}|(?:(?:[0-9a-f]{1,4}:){0,2}[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:){2}|(?:(?:[0-9a-f]{1,4}:){0,3}[0-9a-f]{1,4})?::[0-9a-f]{1,4}:|(?:(?:[0-9a-f]{1,4}:){0,4}[0-9a-f]{1,4})?::)(?:[0-9a-f]{1,4}:[0-9a-f]{1,4}|(?:(?:25[0-5]|2[0-4]\d|[01]?\d\d?)\.){3}(?:25[0-5]|2[0-4]\d|[01]?\d\d?))|(?:(?:[0-9a-f]{1,4}:){0,5}[0-9a-f]{1,4})?::[0-9a-f]{1,4}|(?:(?:[0-9a-f]{1,4}:){0,6}[0-9a-f]{1,4})?::)|[Vv][0-9a-f]+\.[a-z0-9\-._~!$&'()*+,;=:]+)\]|(?:(?:25[0-5]|2[0-4]\d|[01]?\d\d?)\.){3}(?:25[0-5]|2[0-4]\d|[01]?\d\d?)|(?:[a-z0-9\-._~!$&'()*+,;=]|%[0-9a-f]{2})*)(?::\d*)?(?:\/(?:[a-z0-9\-._~!$&'()*+,;=:@]|%[0-9a-f]{2})*)*|\/(?:(?:[a-z0-9\-._~!$&'()*+,;=:@]|%[0-9a-f]{2})+(?:\/(?:[a-z0-9\-._~!$&'()*+,;=:@]|%[0-9a-f]{2})*)*)?|(?:[a-z0-9\-._~!$&'()*+,;=:@]|%[0-9a-f]{2})+(?:\/(?:[a-z0-9\-._~!$&'()*+,;=:@]|%[0-9a-f]{2})*)*)(?:\?(?:[a-z0-9\-._~!$&'()*+,;=:@\/?]|%[0-9a-f]{2})*)?(?:\#(?:[a-z0-9\-._~!$&'()*+,;=:@\/?]|%[0-9a-f]{2})*)?$/i;
	      var UUID = /^(?:urn\:uuid\:)?[0-9a-f]{8}-(?:[0-9a-f]{4}-){3}[0-9a-f]{12}$/i;
	      var JSON_POINTER = /^(?:\/(?:[^~\/]|~0|~1)*)*$|^\#(?:\/(?:[a-z0-9_\-\.!$&'()*+,;:=@]|%[0-9a-f]{2}|~0|~1)*)*$/i;
	      var RELATIVE_JSON_POINTER = /^(?:0|[1-9][0-9]*)(?:\#|(?:\/(?:[^~\/]|~0|~1)*)*)$/;
	
	      module.exports = formats;
	
	      function formats(mode) {
	        mode = mode == 'full' ? 'full' : 'fast';
	        var formatDefs = util.copy(formats[mode]);
	        for (var fName in formats.compare) {
	          formatDefs[fName] = {
	            validate: formatDefs[fName],
	            compare: formats.compare[fName]
	          };
	        }
	        return formatDefs;
	      }
	
	      formats.fast = {
	        // date: http://tools.ietf.org/html/rfc3339#section-5.6
	        date: /^\d\d\d\d-[0-1]\d-[0-3]\d$/,
	        // date-time: http://tools.ietf.org/html/rfc3339#section-5.6
	        time: /^[0-2]\d:[0-5]\d:[0-5]\d(?:\.\d+)?(?:z|[+-]\d\d:\d\d)?$/i,
	        'date-time': /^\d\d\d\d-[0-1]\d-[0-3]\d[t\s][0-2]\d:[0-5]\d:[0-5]\d(?:\.\d+)?(?:z|[+-]\d\d:\d\d)$/i,
	        // uri: https://github.com/mafintosh/is-my-json-valid/blob/master/formats.js
	        uri: /^(?:[a-z][a-z0-9+-.]*)?(?:\:|\/)\/?[^\s]*$/i,
	        // email (sources from jsen validator):
	        // http://stackoverflow.com/questions/201323/using-a-regular-expression-to-validate-an-email-address#answer-8829363
	        // http://www.w3.org/TR/html5/forms.html#valid-e-mail-address (search for 'willful violation')
	        email: /^[a-z0-9.!#$%&'*+\/=?^_`{|}~-]+@[a-z0-9](?:[a-z0-9-]{0,61}[a-z0-9])?(?:\.[a-z0-9](?:[a-z0-9-]{0,61}[a-z0-9])?)*$/i,
	        hostname: HOSTNAME,
	        // optimized https://www.safaribooksonline.com/library/view/regular-expressions-cookbook/9780596802837/ch07s16.html
	        ipv4: /^(?:(?:25[0-5]|2[0-4]\d|[01]?\d\d?)\.){3}(?:25[0-5]|2[0-4]\d|[01]?\d\d?)$/,
	        // optimized http://stackoverflow.com/questions/53497/regular-expression-that-matches-valid-ipv6-addresses
	        ipv6: /^\s*(?:(?:(?:[0-9a-f]{1,4}:){7}(?:[0-9a-f]{1,4}|:))|(?:(?:[0-9a-f]{1,4}:){6}(?::[0-9a-f]{1,4}|(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3})|:))|(?:(?:[0-9a-f]{1,4}:){5}(?:(?:(?::[0-9a-f]{1,4}){1,2})|:(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3})|:))|(?:(?:[0-9a-f]{1,4}:){4}(?:(?:(?::[0-9a-f]{1,4}){1,3})|(?:(?::[0-9a-f]{1,4})?:(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(?:(?:[0-9a-f]{1,4}:){3}(?:(?:(?::[0-9a-f]{1,4}){1,4})|(?:(?::[0-9a-f]{1,4}){0,2}:(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(?:(?:[0-9a-f]{1,4}:){2}(?:(?:(?::[0-9a-f]{1,4}){1,5})|(?:(?::[0-9a-f]{1,4}){0,3}:(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(?:(?:[0-9a-f]{1,4}:){1}(?:(?:(?::[0-9a-f]{1,4}){1,6})|(?:(?::[0-9a-f]{1,4}){0,4}:(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(?::(?:(?:(?::[0-9a-f]{1,4}){1,7})|(?:(?::[0-9a-f]{1,4}){0,5}:(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:)))(?:%.+)?\s*$/i,
	        regex: regex,
	        // uuid: http://tools.ietf.org/html/rfc4122
	        uuid: UUID,
	        // JSON-pointer: https://tools.ietf.org/html/rfc6901
	        // uri fragment: https://tools.ietf.org/html/rfc3986#appendix-A
	        'json-pointer': JSON_POINTER,
	        // relative JSON-pointer: http://tools.ietf.org/html/draft-luff-relative-json-pointer-00
	        'relative-json-pointer': RELATIVE_JSON_POINTER
	      };
	
	      formats.full = {
	        date: date,
	        time: time,
	        'date-time': date_time,
	        uri: uri,
	        email: /^[a-z0-9!#$%&'*+\/=?^_`{|}~-]+(?:\.[a-z0-9!#$%&''*+\/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?$/i,
	        hostname: hostname,
	        ipv4: /^(?:(?:25[0-5]|2[0-4]\d|[01]?\d\d?)\.){3}(?:25[0-5]|2[0-4]\d|[01]?\d\d?)$/,
	        ipv6: /^\s*(?:(?:(?:[0-9a-f]{1,4}:){7}(?:[0-9a-f]{1,4}|:))|(?:(?:[0-9a-f]{1,4}:){6}(?::[0-9a-f]{1,4}|(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3})|:))|(?:(?:[0-9a-f]{1,4}:){5}(?:(?:(?::[0-9a-f]{1,4}){1,2})|:(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3})|:))|(?:(?:[0-9a-f]{1,4}:){4}(?:(?:(?::[0-9a-f]{1,4}){1,3})|(?:(?::[0-9a-f]{1,4})?:(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(?:(?:[0-9a-f]{1,4}:){3}(?:(?:(?::[0-9a-f]{1,4}){1,4})|(?:(?::[0-9a-f]{1,4}){0,2}:(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(?:(?:[0-9a-f]{1,4}:){2}(?:(?:(?::[0-9a-f]{1,4}){1,5})|(?:(?::[0-9a-f]{1,4}){0,3}:(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(?:(?:[0-9a-f]{1,4}:){1}(?:(?:(?::[0-9a-f]{1,4}){1,6})|(?:(?::[0-9a-f]{1,4}){0,4}:(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(?::(?:(?:(?::[0-9a-f]{1,4}){1,7})|(?:(?::[0-9a-f]{1,4}){0,5}:(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:)))(?:%.+)?\s*$/i,
	        regex: regex,
	        uuid: UUID,
	        'json-pointer': JSON_POINTER,
	        'relative-json-pointer': RELATIVE_JSON_POINTER
	      };
	
	      formats.compare = {
	        date: compareDate,
	        time: compareTime,
	        'date-time': compareDateTime
	      };
	
	      function date(str) {
	        // full-date from http://tools.ietf.org/html/rfc3339#section-5.6
	        var matches = str.match(DATE);
	        if (!matches) return false;
	
	        var month = +matches[1];
	        var day = +matches[2];
	        return month >= 1 && month <= 12 && day >= 1 && day <= DAYS[month];
	      }
	
	      function time(str, full) {
	        var matches = str.match(TIME);
	        if (!matches) return false;
	
	        var hour = matches[1];
	        var minute = matches[2];
	        var second = matches[3];
	        var timeZone = matches[5];
	        return hour <= 23 && minute <= 59 && second <= 59 && (!full || timeZone);
	      }
	
	      var DATE_TIME_SEPARATOR = /t|\s/i;
	      function date_time(str) {
	        // http://tools.ietf.org/html/rfc3339#section-5.6
	        var dateTime = str.split(DATE_TIME_SEPARATOR);
	        return dateTime.length == 2 && date(dateTime[0]) && time(dateTime[1], true);
	      }
	
	      function hostname(str) {
	        // https://tools.ietf.org/html/rfc1034#section-3.5
	        // https://tools.ietf.org/html/rfc1123#section-2
	        return str.length <= 255 && HOSTNAME.test(str);
	      }
	
	      var NOT_URI_FRAGMENT = /\/|\:/;
	      function uri(str) {
	        // http://jmrware.com/articles/2009/uri_regexp/URI_regex.html + optional protocol + required "."
	        return NOT_URI_FRAGMENT.test(str) && URI.test(str);
	      }
	
	      function regex(str) {
	        try {
	          new RegExp(str);
	          return true;
	        } catch (e) {
	          return false;
	        }
	      }
	
	      function compareDate(d1, d2) {
	        if (!(d1 && d2)) return;
	        if (d1 > d2) return 1;
	        if (d1 < d2) return -1;
	        if (d1 === d2) return 0;
	      }
	
	      function compareTime(t1, t2) {
	        if (!(t1 && t2)) return;
	        t1 = t1.match(TIME);
	        t2 = t2.match(TIME);
	        if (!(t1 && t2)) return;
	        t1 = t1[1] + t1[2] + t1[3] + (t1[4] || '');
	        t2 = t2[1] + t2[2] + t2[3] + (t2[4] || '');
	        if (t1 > t2) return 1;
	        if (t1 < t2) return -1;
	        if (t1 === t2) return 0;
	      }
	
	      function compareDateTime(dt1, dt2) {
	        if (!(dt1 && dt2)) return;
	        dt1 = dt1.split(DATE_TIME_SEPARATOR);
	        dt2 = dt2.split(DATE_TIME_SEPARATOR);
	        var res = compareDate(dt1[0], dt2[0]);
	        if (res === undefined) return;
	        return res || compareTime(dt1[1], dt2[1]);
	      }
	    }, { "./util": 11 }], 6: [function (require, module, exports) {
	      'use strict';
	
	      var resolve = require('./resolve'),
	          util = require('./util'),
	          stableStringify = require('json-stable-stringify'),
	          async = require('../async');
	
	      var beautify;
	
	      function loadBeautify() {
	        if (beautify === undefined) {
	          var name = 'js-beautify';
	          try {
	            beautify = require(name).js_beautify;
	          } catch (e) {
	            beautify = false;
	          }
	        }
	      }
	
	      var validateGenerator = require('../dotjs/validate');
	
	      /**
	       * Functions below are used inside compiled validations function
	       */
	
	      var co = require('co');
	      var ucs2length = util.ucs2length;
	      var equal = require('./equal');
	
	      // this error is thrown by async schemas to return validation errors via exception
	      var ValidationError = require('./validation_error');
	
	      module.exports = compile;
	
	      /**
	       * Compiles schema to validation function
	       * @this   Ajv
	       * @param  {Object} schema schema object
	       * @param  {Object} root object with information about the root schema for this schema
	       * @param  {Object} localRefs the hash of local references inside the schema (created by resolve.id), used for inline resolution
	       * @param  {String} baseId base ID for IDs in the schema
	       * @return {Function} validation function
	       */
	      function compile(schema, root, localRefs, baseId) {
	        /* jshint validthis: true, evil: true */
	        /* eslint no-shadow: 0 */
	        var self = this,
	            opts = this._opts,
	            refVal = [undefined],
	            refs = {},
	            patterns = [],
	            patternsHash = {},
	            defaults = [],
	            defaultsHash = {},
	            customRules = [],
	            keepSourceCode = opts.sourceCode !== false;
	
	        root = root || { schema: schema, refVal: refVal, refs: refs };
	
	        var c = checkCompiling.call(this, schema, root, baseId);
	        var compilation = this._compilations[c.index];
	        if (c.compiling) return compilation.callValidate = callValidate;
	
	        var formats = this._formats;
	        var RULES = this.RULES;
	
	        try {
	          var v = localCompile(schema, root, localRefs, baseId);
	          compilation.validate = v;
	          var cv = compilation.callValidate;
	          if (cv) {
	            cv.schema = v.schema;
	            cv.errors = null;
	            cv.refs = v.refs;
	            cv.refVal = v.refVal;
	            cv.root = v.root;
	            cv.$async = v.$async;
	            if (keepSourceCode) cv.sourceCode = v.sourceCode;
	          }
	          return v;
	        } finally {
	          endCompiling.call(this, schema, root, baseId);
	        }
	
	        function callValidate() {
	          var validate = compilation.validate;
	          var result = validate.apply(null, arguments);
	          callValidate.errors = validate.errors;
	          return result;
	        }
	
	        function localCompile(_schema, _root, localRefs, baseId) {
	          var isRoot = !_root || _root && _root.schema == _schema;
	          if (_root.schema != root.schema) return compile.call(self, _schema, _root, localRefs, baseId);
	
	          var $async = _schema.$async === true;
	          if ($async && !opts.transpile) async.setup(opts);
	
	          var sourceCode = validateGenerator({
	            isTop: true,
	            schema: _schema,
	            isRoot: isRoot,
	            baseId: baseId,
	            root: _root,
	            schemaPath: '',
	            errSchemaPath: '#',
	            errorPath: '""',
	            RULES: RULES,
	            validate: validateGenerator,
	            util: util,
	            resolve: resolve,
	            resolveRef: resolveRef,
	            usePattern: usePattern,
	            useDefault: useDefault,
	            useCustomRule: useCustomRule,
	            opts: opts,
	            formats: formats,
	            self: self
	          });
	
	          sourceCode = vars(refVal, refValCode) + vars(patterns, patternCode) + vars(defaults, defaultCode) + vars(customRules, customRuleCode) + sourceCode;
	
	          if (opts.beautify) {
	            loadBeautify();
	            /* istanbul ignore else */
	            if (beautify) sourceCode = beautify(sourceCode, opts.beautify);else console.error('"npm install js-beautify" to use beautify option');
	          }
	          // console.log('\n\n\n *** \n', sourceCode);
	          var validate,
	              validateCode,
	              transpile = opts._transpileFunc;
	          try {
	            validateCode = $async && transpile ? transpile(sourceCode) : sourceCode;
	
	            var makeValidate = new Function('self', 'RULES', 'formats', 'root', 'refVal', 'defaults', 'customRules', 'co', 'equal', 'ucs2length', 'ValidationError', validateCode);
	
	            validate = makeValidate(self, RULES, formats, root, refVal, defaults, customRules, co, equal, ucs2length, ValidationError);
	
	            refVal[0] = validate;
	          } catch (e) {
	            console.error('Error compiling schema, function code:', validateCode);
	            throw e;
	          }
	
	          validate.schema = _schema;
	          validate.errors = null;
	          validate.refs = refs;
	          validate.refVal = refVal;
	          validate.root = isRoot ? validate : _root;
	          if ($async) validate.$async = true;
	          if (keepSourceCode) validate.sourceCode = sourceCode;
	          if (opts.sourceCode === true) {
	            validate.source = {
	              patterns: patterns,
	              defaults: defaults
	            };
	          }
	
	          return validate;
	        }
	
	        function resolveRef(baseId, ref, isRoot) {
	          ref = resolve.url(baseId, ref);
	          var refIndex = refs[ref];
	          var _refVal, refCode;
	          if (refIndex !== undefined) {
	            _refVal = refVal[refIndex];
	            refCode = 'refVal[' + refIndex + ']';
	            return resolvedRef(_refVal, refCode);
	          }
	          if (!isRoot && root.refs) {
	            var rootRefId = root.refs[ref];
	            if (rootRefId !== undefined) {
	              _refVal = root.refVal[rootRefId];
	              refCode = addLocalRef(ref, _refVal);
	              return resolvedRef(_refVal, refCode);
	            }
	          }
	
	          refCode = addLocalRef(ref);
	          var v = resolve.call(self, localCompile, root, ref);
	          if (!v) {
	            var localSchema = localRefs && localRefs[ref];
	            if (localSchema) {
	              v = resolve.inlineRef(localSchema, opts.inlineRefs) ? localSchema : compile.call(self, localSchema, root, localRefs, baseId);
	            }
	          }
	
	          if (v) {
	            replaceLocalRef(ref, v);
	            return resolvedRef(v, refCode);
	          }
	        }
	
	        function addLocalRef(ref, v) {
	          var refId = refVal.length;
	          refVal[refId] = v;
	          refs[ref] = refId;
	          return 'refVal' + refId;
	        }
	
	        function replaceLocalRef(ref, v) {
	          var refId = refs[ref];
	          refVal[refId] = v;
	        }
	
	        function resolvedRef(refVal, code) {
	          return (typeof refVal === "undefined" ? "undefined" : _typeof(refVal)) == 'object' ? { code: code, schema: refVal, inline: true } : { code: code, $async: refVal && refVal.$async };
	        }
	
	        function usePattern(regexStr) {
	          var index = patternsHash[regexStr];
	          if (index === undefined) {
	            index = patternsHash[regexStr] = patterns.length;
	            patterns[index] = regexStr;
	          }
	          return 'pattern' + index;
	        }
	
	        function useDefault(value) {
	          switch (typeof value === "undefined" ? "undefined" : _typeof(value)) {
	            case 'boolean':
	            case 'number':
	              return '' + value;
	            case 'string':
	              return util.toQuotedString(value);
	            case 'object':
	              if (value === null) return 'null';
	              var valueStr = stableStringify(value);
	              var index = defaultsHash[valueStr];
	              if (index === undefined) {
	                index = defaultsHash[valueStr] = defaults.length;
	                defaults[index] = value;
	              }
	              return 'default' + index;
	          }
	        }
	
	        function useCustomRule(rule, schema, parentSchema, it) {
	          var validateSchema = rule.definition.validateSchema;
	          if (validateSchema && self._opts.validateSchema !== false) {
	            var valid = validateSchema(schema);
	            if (!valid) {
	              var message = 'keyword schema is invalid: ' + self.errorsText(validateSchema.errors);
	              if (self._opts.validateSchema == 'log') console.error(message);else throw new Error(message);
	            }
	          }
	
	          var compile = rule.definition.compile,
	              inline = rule.definition.inline,
	              macro = rule.definition.macro;
	
	          var validate;
	          if (compile) {
	            validate = compile.call(self, schema, parentSchema, it);
	          } else if (macro) {
	            validate = macro.call(self, schema, parentSchema, it);
	            if (opts.validateSchema !== false) self.validateSchema(validate, true);
	          } else if (inline) {
	            validate = inline.call(self, it, rule.keyword, schema, parentSchema);
	          } else {
	            validate = rule.definition.validate;
	          }
	
	          var index = customRules.length;
	          customRules[index] = validate;
	
	          return {
	            code: 'customRule' + index,
	            validate: validate
	          };
	        }
	      }
	
	      /**
	       * Checks if the schema is currently compiled
	       * @this   Ajv
	       * @param  {Object} schema schema to compile
	       * @param  {Object} root root object
	       * @param  {String} baseId base schema ID
	       * @return {Object} object with properties "index" (compilation index) and "compiling" (boolean)
	       */
	      function checkCompiling(schema, root, baseId) {
	        /* jshint validthis: true */
	        var index = compIndex.call(this, schema, root, baseId);
	        if (index >= 0) return { index: index, compiling: true };
	        index = this._compilations.length;
	        this._compilations[index] = {
	          schema: schema,
	          root: root,
	          baseId: baseId
	        };
	        return { index: index, compiling: false };
	      }
	
	      /**
	       * Removes the schema from the currently compiled list
	       * @this   Ajv
	       * @param  {Object} schema schema to compile
	       * @param  {Object} root root object
	       * @param  {String} baseId base schema ID
	       */
	      function endCompiling(schema, root, baseId) {
	        /* jshint validthis: true */
	        var i = compIndex.call(this, schema, root, baseId);
	        if (i >= 0) this._compilations.splice(i, 1);
	      }
	
	      /**
	       * Index of schema compilation in the currently compiled list
	       * @this   Ajv
	       * @param  {Object} schema schema to compile
	       * @param  {Object} root root object
	       * @param  {String} baseId base schema ID
	       * @return {Integer} compilation index
	       */
	      function compIndex(schema, root, baseId) {
	        /* jshint validthis: true */
	        for (var i = 0; i < this._compilations.length; i++) {
	          var c = this._compilations[i];
	          if (c.schema == schema && c.root == root && c.baseId == baseId) return i;
	        }
	        return -1;
	      }
	
	      function patternCode(i, patterns) {
	        return 'var pattern' + i + ' = new RegExp(' + util.toQuotedString(patterns[i]) + ');';
	      }
	
	      function defaultCode(i) {
	        return 'var default' + i + ' = defaults[' + i + '];';
	      }
	
	      function refValCode(i, refVal) {
	        return refVal[i] ? 'var refVal' + i + ' = refVal[' + i + '];' : '';
	      }
	
	      function customRuleCode(i) {
	        return 'var customRule' + i + ' = customRules[' + i + '];';
	      }
	
	      function vars(arr, statement) {
	        if (!arr.length) return '';
	        var code = '';
	        for (var i = 0; i < arr.length; i++) {
	          code += statement(i, arr);
	        }return code;
	      }
	    }, { "../async": 1, "../dotjs/validate": 36, "./equal": 4, "./resolve": 7, "./util": 11, "./validation_error": 12, "co": 41, "json-stable-stringify": 42 }], 7: [function (require, module, exports) {
	      'use strict';
	
	      var url = require('url'),
	          equal = require('./equal'),
	          util = require('./util'),
	          SchemaObject = require('./schema_obj');
	
	      module.exports = resolve;
	
	      resolve.normalizeId = normalizeId;
	      resolve.fullPath = getFullPath;
	      resolve.url = resolveUrl;
	      resolve.ids = resolveIds;
	      resolve.inlineRef = inlineRef;
	      resolve.schema = resolveSchema;
	
	      /**
	       * [resolve and compile the references ($ref)]
	       * @this   Ajv
	       * @param  {Function} compile reference to schema compilation funciton (localCompile)
	       * @param  {Object} root object with information about the root schema for the current schema
	       * @param  {String} ref reference to resolve
	       * @return {Object|Function} schema object (if the schema can be inlined) or validation function
	       */
	      function resolve(compile, root, ref) {
	        /* jshint validthis: true */
	        var refVal = this._refs[ref];
	        if (typeof refVal == 'string') {
	          if (this._refs[refVal]) refVal = this._refs[refVal];else return resolve.call(this, compile, root, refVal);
	        }
	
	        refVal = refVal || this._schemas[ref];
	        if (refVal instanceof SchemaObject) {
	          return inlineRef(refVal.schema, this._opts.inlineRefs) ? refVal.schema : refVal.validate || this._compile(refVal);
	        }
	
	        var res = resolveSchema.call(this, root, ref);
	        var schema, v, baseId;
	        if (res) {
	          schema = res.schema;
	          root = res.root;
	          baseId = res.baseId;
	        }
	
	        if (schema instanceof SchemaObject) {
	          v = schema.validate || compile.call(this, schema.schema, root, undefined, baseId);
	        } else if (schema) {
	          v = inlineRef(schema, this._opts.inlineRefs) ? schema : compile.call(this, schema, root, undefined, baseId);
	        }
	
	        return v;
	      }
	
	      /**
	       * Resolve schema, its root and baseId
	       * @this Ajv
	       * @param  {Object} root root object with properties schema, refVal, refs
	       * @param  {String} ref  reference to resolve
	       * @return {Object} object with properties schema, root, baseId
	       */
	      function resolveSchema(root, ref) {
	        /* jshint validthis: true */
	        var p = url.parse(ref, false, true),
	            refPath = _getFullPath(p),
	            baseId = getFullPath(root.schema.id);
	        if (refPath !== baseId) {
	          var id = normalizeId(refPath);
	          var refVal = this._refs[id];
	          if (typeof refVal == 'string') {
	            return resolveRecursive.call(this, root, refVal, p);
	          } else if (refVal instanceof SchemaObject) {
	            if (!refVal.validate) this._compile(refVal);
	            root = refVal;
	          } else {
	            refVal = this._schemas[id];
	            if (refVal instanceof SchemaObject) {
	              if (!refVal.validate) this._compile(refVal);
	              if (id == normalizeId(ref)) return { schema: refVal, root: root, baseId: baseId };
	              root = refVal;
	            } else {
	              return;
	            }
	          }
	          if (!root.schema) return;
	          baseId = getFullPath(root.schema.id);
	        }
	        return getJsonPointer.call(this, p, baseId, root.schema, root);
	      }
	
	      /* @this Ajv */
	      function resolveRecursive(root, ref, parsedRef) {
	        /* jshint validthis: true */
	        var res = resolveSchema.call(this, root, ref);
	        if (res) {
	          var schema = res.schema;
	          var baseId = res.baseId;
	          root = res.root;
	          if (schema.id) baseId = resolveUrl(baseId, schema.id);
	          return getJsonPointer.call(this, parsedRef, baseId, schema, root);
	        }
	      }
	
	      var PREVENT_SCOPE_CHANGE = util.toHash(['properties', 'patternProperties', 'enum', 'dependencies', 'definitions']);
	      /* @this Ajv */
	      function getJsonPointer(parsedRef, baseId, schema, root) {
	        /* jshint validthis: true */
	        parsedRef.hash = parsedRef.hash || '';
	        if (parsedRef.hash.slice(0, 2) != '#/') return;
	        var parts = parsedRef.hash.split('/');
	
	        for (var i = 1; i < parts.length; i++) {
	          var part = parts[i];
	          if (part) {
	            part = util.unescapeFragment(part);
	            schema = schema[part];
	            if (!schema) break;
	            if (schema.id && !PREVENT_SCOPE_CHANGE[part]) baseId = resolveUrl(baseId, schema.id);
	            if (schema.$ref) {
	              var $ref = resolveUrl(baseId, schema.$ref);
	              var res = resolveSchema.call(this, root, $ref);
	              if (res) {
	                schema = res.schema;
	                root = res.root;
	                baseId = res.baseId;
	              }
	            }
	          }
	        }
	        if (schema && schema != root.schema) return { schema: schema, root: root, baseId: baseId };
	      }
	
	      var SIMPLE_INLINED = util.toHash(['type', 'format', 'pattern', 'maxLength', 'minLength', 'maxProperties', 'minProperties', 'maxItems', 'minItems', 'maximum', 'minimum', 'uniqueItems', 'multipleOf', 'required', 'enum']);
	      function inlineRef(schema, limit) {
	        if (limit === false) return false;
	        if (limit === undefined || limit === true) return checkNoRef(schema);else if (limit) return countKeys(schema) <= limit;
	      }
	
	      function checkNoRef(schema) {
	        var item;
	        if (Array.isArray(schema)) {
	          for (var i = 0; i < schema.length; i++) {
	            item = schema[i];
	            if ((typeof item === "undefined" ? "undefined" : _typeof(item)) == 'object' && !checkNoRef(item)) return false;
	          }
	        } else {
	          for (var key in schema) {
	            if (key == '$ref') return false;
	            item = schema[key];
	            if ((typeof item === "undefined" ? "undefined" : _typeof(item)) == 'object' && !checkNoRef(item)) return false;
	          }
	        }
	        return true;
	      }
	
	      function countKeys(schema) {
	        var count = 0,
	            item;
	        if (Array.isArray(schema)) {
	          for (var i = 0; i < schema.length; i++) {
	            item = schema[i];
	            if ((typeof item === "undefined" ? "undefined" : _typeof(item)) == 'object') count += countKeys(item);
	            if (count == Infinity) return Infinity;
	          }
	        } else {
	          for (var key in schema) {
	            if (key == '$ref') return Infinity;
	            if (SIMPLE_INLINED[key]) {
	              count++;
	            } else {
	              item = schema[key];
	              if ((typeof item === "undefined" ? "undefined" : _typeof(item)) == 'object') count += countKeys(item) + 1;
	              if (count == Infinity) return Infinity;
	            }
	          }
	        }
	        return count;
	      }
	
	      function getFullPath(id, normalize) {
	        if (normalize !== false) id = normalizeId(id);
	        var p = url.parse(id, false, true);
	        return _getFullPath(p);
	      }
	
	      function _getFullPath(p) {
	        var protocolSeparator = p.protocol || p.href.slice(0, 2) == '//' ? '//' : '';
	        return (p.protocol || '') + protocolSeparator + (p.host || '') + (p.path || '') + '#';
	      }
	
	      var TRAILING_SLASH_HASH = /#\/?$/;
	      function normalizeId(id) {
	        return id ? id.replace(TRAILING_SLASH_HASH, '') : '';
	      }
	
	      function resolveUrl(baseId, id) {
	        id = normalizeId(id);
	        return url.resolve(baseId, id);
	      }
	
	      /* @this Ajv */
	      function resolveIds(schema) {
	        /* eslint no-shadow: 0 */
	        /* jshint validthis: true */
	        var id = normalizeId(schema.id);
	        var localRefs = {};
	        _resolveIds.call(this, schema, getFullPath(id, false), id);
	        return localRefs;
	
	        /* @this Ajv */
	        function _resolveIds(schema, fullPath, baseId) {
	          /* jshint validthis: true */
	          if (Array.isArray(schema)) {
	            for (var i = 0; i < schema.length; i++) {
	              _resolveIds.call(this, schema[i], fullPath + '/' + i, baseId);
	            }
	          } else if (schema && (typeof schema === "undefined" ? "undefined" : _typeof(schema)) == 'object') {
	            if (typeof schema.id == 'string') {
	              var id = baseId = baseId ? url.resolve(baseId, schema.id) : schema.id;
	              id = normalizeId(id);
	
	              var refVal = this._refs[id];
	              if (typeof refVal == 'string') refVal = this._refs[refVal];
	              if (refVal && refVal.schema) {
	                if (!equal(schema, refVal.schema)) throw new Error('id "' + id + '" resolves to more than one schema');
	              } else if (id != normalizeId(fullPath)) {
	                if (id[0] == '#') {
	                  if (localRefs[id] && !equal(schema, localRefs[id])) throw new Error('id "' + id + '" resolves to more than one schema');
	                  localRefs[id] = schema;
	                } else {
	                  this._refs[id] = fullPath;
	                }
	              }
	            }
	            for (var key in schema) {
	              _resolveIds.call(this, schema[key], fullPath + '/' + util.escapeFragment(key), baseId);
	            }
	          }
	        }
	      }
	    }, { "./equal": 4, "./schema_obj": 9, "./util": 11, "url": 50 }], 8: [function (require, module, exports) {
	      'use strict';
	
	      var ruleModules = require('./_rules'),
	          toHash = require('./util').toHash;
	
	      module.exports = function rules() {
	        var RULES = [{ type: 'number',
	          rules: ['maximum', 'minimum', 'multipleOf'] }, { type: 'string',
	          rules: ['maxLength', 'minLength', 'pattern', 'format'] }, { type: 'array',
	          rules: ['maxItems', 'minItems', 'uniqueItems', 'items'] }, { type: 'object',
	          rules: ['maxProperties', 'minProperties', 'required', 'dependencies', 'properties'] }, { rules: ['$ref', 'enum', 'not', 'anyOf', 'oneOf', 'allOf'] }];
	
	        var ALL = ['type', 'additionalProperties', 'patternProperties'];
	        var KEYWORDS = ['additionalItems', '$schema', 'id', 'title', 'description', 'default'];
	        var TYPES = ['number', 'integer', 'string', 'array', 'object', 'boolean', 'null'];
	        RULES.all = toHash(ALL);
	
	        RULES.forEach(function (group) {
	          group.rules = group.rules.map(function (keyword) {
	            ALL.push(keyword);
	            var rule = RULES.all[keyword] = {
	              keyword: keyword,
	              code: ruleModules[keyword]
	            };
	            return rule;
	          });
	        });
	
	        RULES.keywords = toHash(ALL.concat(KEYWORDS));
	        RULES.types = toHash(TYPES);
	        RULES.custom = {};
	
	        return RULES;
	      };
	    }, { "./_rules": 3, "./util": 11 }], 9: [function (require, module, exports) {
	      'use strict';
	
	      var util = require('./util');
	
	      module.exports = SchemaObject;
	
	      function SchemaObject(obj) {
	        util.copy(obj, this);
	      }
	    }, { "./util": 11 }], 10: [function (require, module, exports) {
	      'use strict';
	
	      // https://mathiasbynens.be/notes/javascript-encoding
	      // https://github.com/bestiejs/punycode.js - punycode.ucs2.decode
	
	      module.exports = function ucs2length(str) {
	        var length = 0,
	            len = str.length,
	            pos = 0,
	            value;
	        while (pos < len) {
	          length++;
	          value = str.charCodeAt(pos++);
	          if (value >= 0xD800 && value <= 0xDBFF && pos < len) {
	            // high surrogate, and there is a next character
	            value = str.charCodeAt(pos);
	            if ((value & 0xFC00) == 0xDC00) pos++; // low surrogate
	          }
	        }
	        return length;
	      };
	    }, {}], 11: [function (require, module, exports) {
	      'use strict';
	
	      module.exports = {
	        copy: copy,
	        checkDataType: checkDataType,
	        checkDataTypes: checkDataTypes,
	        coerceToTypes: coerceToTypes,
	        toHash: toHash,
	        getProperty: getProperty,
	        escapeQuotes: escapeQuotes,
	        ucs2length: require('./ucs2length'),
	        varOccurences: varOccurences,
	        varReplace: varReplace,
	        cleanUpCode: cleanUpCode,
	        cleanUpVarErrors: cleanUpVarErrors,
	        schemaHasRules: schemaHasRules,
	        schemaHasRulesExcept: schemaHasRulesExcept,
	        stableStringify: require('json-stable-stringify'),
	        toQuotedString: toQuotedString,
	        getPathExpr: getPathExpr,
	        getPath: getPath,
	        getData: getData,
	        unescapeFragment: unescapeFragment,
	        escapeFragment: escapeFragment,
	        escapeJsonPointer: escapeJsonPointer
	      };
	
	      function copy(o, to) {
	        to = to || {};
	        for (var key in o) {
	          to[key] = o[key];
	        }return to;
	      }
	
	      function checkDataType(dataType, data, negate) {
	        var EQUAL = negate ? ' !== ' : ' === ',
	            AND = negate ? ' || ' : ' && ',
	            OK = negate ? '!' : '',
	            NOT = negate ? '' : '!';
	        switch (dataType) {
	          case 'null':
	            return data + EQUAL + 'null';
	          case 'array':
	            return OK + 'Array.isArray(' + data + ')';
	          case 'object':
	            return '(' + OK + data + AND + 'typeof ' + data + EQUAL + '"object"' + AND + NOT + 'Array.isArray(' + data + '))';
	          case 'integer':
	            return '(typeof ' + data + EQUAL + '"number"' + AND + NOT + '(' + data + ' % 1)' + AND + data + EQUAL + data + ')';
	          default:
	            return 'typeof ' + data + EQUAL + '"' + dataType + '"';
	        }
	      }
	
	      function checkDataTypes(dataTypes, data) {
	        switch (dataTypes.length) {
	          case 1:
	            return checkDataType(dataTypes[0], data, true);
	          default:
	            var code = '';
	            var types = toHash(dataTypes);
	            if (types.array && types.object) {
	              code = types.null ? '(' : '(!' + data + ' || ';
	              code += 'typeof ' + data + ' !== "object")';
	              delete types.null;
	              delete types.array;
	              delete types.object;
	            }
	            if (types.number) delete types.integer;
	            for (var t in types) {
	              code += (code ? ' && ' : '') + checkDataType(t, data, true);
	            }return code;
	        }
	      }
	
	      var COERCE_TO_TYPES = toHash(['string', 'number', 'integer', 'boolean', 'null']);
	      function coerceToTypes(optionCoerceTypes, dataTypes) {
	        if (Array.isArray(dataTypes)) {
	          var types = [];
	          for (var i = 0; i < dataTypes.length; i++) {
	            var t = dataTypes[i];
	            if (COERCE_TO_TYPES[t]) types[types.length] = t;else if (optionCoerceTypes === 'array' && t === 'array') types[types.length] = t;
	          }
	          if (types.length) return types;
	        } else if (COERCE_TO_TYPES[dataTypes]) {
	          return [dataTypes];
	        } else if (optionCoerceTypes === 'array' && dataTypes === 'array') {
	          return ['array'];
	        }
	      }
	
	      function toHash(arr) {
	        var hash = {};
	        for (var i = 0; i < arr.length; i++) {
	          hash[arr[i]] = true;
	        }return hash;
	      }
	
	      var IDENTIFIER = /^[a-z$_][a-z$_0-9]*$/i;
	      var SINGLE_QUOTE = /'|\\/g;
	      function getProperty(key) {
	        return typeof key == 'number' ? '[' + key + ']' : IDENTIFIER.test(key) ? '.' + key : "['" + escapeQuotes(key) + "']";
	      }
	
	      function escapeQuotes(str) {
	        return str.replace(SINGLE_QUOTE, '\\$&').replace(/\n/g, '\\n').replace(/\r/g, '\\r').replace(/\f/g, '\\f').replace(/\t/g, '\\t');
	      }
	
	      function varOccurences(str, dataVar) {
	        dataVar += '[^0-9]';
	        var matches = str.match(new RegExp(dataVar, 'g'));
	        return matches ? matches.length : 0;
	      }
	
	      function varReplace(str, dataVar, expr) {
	        dataVar += '([^0-9])';
	        expr = expr.replace(/\$/g, '$$$$');
	        return str.replace(new RegExp(dataVar, 'g'), expr + '$1');
	      }
	
	      var EMPTY_ELSE = /else\s*{\s*}/g,
	          EMPTY_IF_NO_ELSE = /if\s*\([^)]+\)\s*\{\s*\}(?!\s*else)/g,
	          EMPTY_IF_WITH_ELSE = /if\s*\(([^)]+)\)\s*\{\s*\}\s*else(?!\s*if)/g;
	      function cleanUpCode(out) {
	        return out.replace(EMPTY_ELSE, '').replace(EMPTY_IF_NO_ELSE, '').replace(EMPTY_IF_WITH_ELSE, 'if (!($1))');
	      }
	
	      var ERRORS_REGEXP = /[^v\.]errors/g,
	          REMOVE_ERRORS = /var errors = 0;|var vErrors = null;|validate.errors = vErrors;/g,
	          REMOVE_ERRORS_ASYNC = /var errors = 0;|var vErrors = null;/g,
	          RETURN_VALID = 'return errors === 0;',
	          RETURN_TRUE = 'validate.errors = null; return true;',
	          RETURN_ASYNC = /if \(errors === 0\) return true;\s*else throw new ValidationError\(vErrors\);/,
	          RETURN_TRUE_ASYNC = 'return true;';
	
	      function cleanUpVarErrors(out, async) {
	        var matches = out.match(ERRORS_REGEXP);
	        if (!matches || matches.length !== 2) return out;
	        return async ? out.replace(REMOVE_ERRORS_ASYNC, '').replace(RETURN_ASYNC, RETURN_TRUE_ASYNC) : out.replace(REMOVE_ERRORS, '').replace(RETURN_VALID, RETURN_TRUE);
	      }
	
	      function schemaHasRules(schema, rules) {
	        for (var key in schema) {
	          if (rules[key]) return true;
	        }
	      }
	
	      function schemaHasRulesExcept(schema, rules, exceptKeyword) {
	        for (var key in schema) {
	          if (key != exceptKeyword && rules[key]) return true;
	        }
	      }
	
	      function toQuotedString(str) {
	        return '\'' + escapeQuotes(str) + '\'';
	      }
	
	      function getPathExpr(currentPath, expr, jsonPointers, isNumber) {
	        var path = jsonPointers // false by default
	        ? '\'/\' + ' + expr + (isNumber ? '' : '.replace(/~/g, \'~0\').replace(/\\//g, \'~1\')') : isNumber ? '\'[\' + ' + expr + ' + \']\'' : '\'[\\\'\' + ' + expr + ' + \'\\\']\'';
	        return joinPaths(currentPath, path);
	      }
	
	      function getPath(currentPath, prop, jsonPointers) {
	        var path = jsonPointers // false by default
	        ? toQuotedString('/' + escapeJsonPointer(prop)) : toQuotedString(getProperty(prop));
	        return joinPaths(currentPath, path);
	      }
	
	      var JSON_POINTER = /^\/(?:[^~]|~0|~1)*$/;
	      var RELATIVE_JSON_POINTER = /^([0-9]+)(#|\/(?:[^~]|~0|~1)*)?$/;
	      function getData($data, lvl, paths) {
	        var up, jsonPointer, data, matches;
	        if ($data === '') return 'rootData';
	        if ($data[0] == '/') {
	          if (!JSON_POINTER.test($data)) throw new Error('Invalid JSON-pointer: ' + $data);
	          jsonPointer = $data;
	          data = 'rootData';
	        } else {
	          matches = $data.match(RELATIVE_JSON_POINTER);
	          if (!matches) throw new Error('Invalid JSON-pointer: ' + $data);
	          up = +matches[1];
	          jsonPointer = matches[2];
	          if (jsonPointer == '#') {
	            if (up >= lvl) throw new Error('Cannot access property/index ' + up + ' levels up, current level is ' + lvl);
	            return paths[lvl - up];
	          }
	
	          if (up > lvl) throw new Error('Cannot access data ' + up + ' levels up, current level is ' + lvl);
	          data = 'data' + (lvl - up || '');
	          if (!jsonPointer) return data;
	        }
	
	        var expr = data;
	        var segments = jsonPointer.split('/');
	        for (var i = 0; i < segments.length; i++) {
	          var segment = segments[i];
	          if (segment) {
	            data += getProperty(unescapeJsonPointer(segment));
	            expr += ' && ' + data;
	          }
	        }
	        return expr;
	      }
	
	      function joinPaths(a, b) {
	        if (a == '""') return b;
	        return (a + ' + ' + b).replace(/' \+ '/g, '');
	      }
	
	      function unescapeFragment(str) {
	        return unescapeJsonPointer(decodeURIComponent(str));
	      }
	
	      function escapeFragment(str) {
	        return encodeURIComponent(escapeJsonPointer(str));
	      }
	
	      function escapeJsonPointer(str) {
	        return str.replace(/~/g, '~0').replace(/\//g, '~1');
	      }
	
	      function unescapeJsonPointer(str) {
	        return str.replace(/~1/g, '/').replace(/~0/g, '~');
	      }
	    }, { "./ucs2length": 10, "json-stable-stringify": 42 }], 12: [function (require, module, exports) {
	      'use strict';
	
	      module.exports = ValidationError;
	
	      function ValidationError(errors) {
	        this.message = 'validation failed';
	        this.errors = errors;
	        this.ajv = this.validation = true;
	      }
	
	      ValidationError.prototype = Object.create(Error.prototype);
	      ValidationError.prototype.constructor = ValidationError;
	    }, {}], 13: [function (require, module, exports) {
	      'use strict';
	
	      module.exports = function generate__formatLimit(it, $keyword) {
	        var out = ' ';
	        var $lvl = it.level;
	        var $dataLvl = it.dataLevel;
	        var $schema = it.schema[$keyword];
	        var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
	        var $errSchemaPath = it.errSchemaPath + '/' + $keyword;
	        var $breakOnError = !it.opts.allErrors;
	        var $errorKeyword;
	        var $data = 'data' + ($dataLvl || '');
	        var $valid = 'valid' + $lvl;
	        out += 'var ' + $valid + ' = undefined;';
	        if (it.opts.format === false) {
	          out += ' ' + $valid + ' = true; ';
	          return out;
	        }
	        var $schemaFormat = it.schema.format,
	            $isDataFormat = it.opts.v5 && $schemaFormat.$data,
	            $closingBraces = '';
	        if ($isDataFormat) {
	          var $schemaValueFormat = it.util.getData($schemaFormat.$data, $dataLvl, it.dataPathArr),
	              $format = 'format' + $lvl,
	              $compare = 'compare' + $lvl;
	          out += ' var ' + $format + ' = formats[' + $schemaValueFormat + '] , ' + $compare + ' = ' + $format + ' && ' + $format + '.compare;';
	        } else {
	          var $format = it.formats[$schemaFormat];
	          if (!($format && $format.compare)) {
	            out += '  ' + $valid + ' = true; ';
	            return out;
	          }
	          var $compare = 'formats' + it.util.getProperty($schemaFormat) + '.compare';
	        }
	        var $isMax = $keyword == 'formatMaximum',
	            $exclusiveKeyword = 'formatExclusive' + ($isMax ? 'Maximum' : 'Minimum'),
	            $schemaExcl = it.schema[$exclusiveKeyword],
	            $isDataExcl = it.opts.v5 && $schemaExcl && $schemaExcl.$data,
	            $op = $isMax ? '<' : '>',
	            $result = 'result' + $lvl;
	        var $isData = it.opts.v5 && $schema && $schema.$data,
	            $schemaValue;
	        if ($isData) {
	          out += ' var schema' + $lvl + ' = ' + it.util.getData($schema.$data, $dataLvl, it.dataPathArr) + '; ';
	          $schemaValue = 'schema' + $lvl;
	        } else {
	          $schemaValue = $schema;
	        }
	        if ($isDataExcl) {
	          var $schemaValueExcl = it.util.getData($schemaExcl.$data, $dataLvl, it.dataPathArr),
	              $exclusive = 'exclusive' + $lvl,
	              $opExpr = 'op' + $lvl,
	              $opStr = '\' + ' + $opExpr + ' + \'';
	          out += ' var schemaExcl' + $lvl + ' = ' + $schemaValueExcl + '; ';
	          $schemaValueExcl = 'schemaExcl' + $lvl;
	          out += ' if (typeof ' + $schemaValueExcl + ' != \'boolean\' && ' + $schemaValueExcl + ' !== undefined) { ' + $valid + ' = false; ';
	          var $errorKeyword = $exclusiveKeyword;
	          var $$outStack = $$outStack || [];
	          $$outStack.push(out);
	          out = ''; /* istanbul ignore else */
	          if (it.createErrors !== false) {
	            out += ' { keyword: \'' + ($errorKeyword || '_formatExclusiveLimit') + '\' , dataPath: (dataPath || \'\') + ' + it.errorPath + ' , schemaPath: ' + it.util.toQuotedString($errSchemaPath) + ' , params: {} ';
	            if (it.opts.messages !== false) {
	              out += ' , message: \'' + $exclusiveKeyword + ' should be boolean\' ';
	            }
	            if (it.opts.verbose) {
	              out += ' , schema: validate.schema' + $schemaPath + ' , parentSchema: validate.schema' + it.schemaPath + ' , data: ' + $data + ' ';
	            }
	            out += ' } ';
	          } else {
	            out += ' {} ';
	          }
	          var __err = out;
	          out = $$outStack.pop();
	          if (!it.compositeRule && $breakOnError) {
	            /* istanbul ignore if */
	            if (it.async) {
	              out += ' throw new ValidationError([' + __err + ']); ';
	            } else {
	              out += ' validate.errors = [' + __err + ']; return false; ';
	            }
	          } else {
	            out += ' var err = ' + __err + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
	          }
	          out += ' }  ';
	          if ($breakOnError) {
	            $closingBraces += '}';
	            out += ' else { ';
	          }
	          if ($isData) {
	            out += ' if (' + $schemaValue + ' === undefined) ' + $valid + ' = true; else if (typeof ' + $schemaValue + ' != \'string\') ' + $valid + ' = false; else { ';
	            $closingBraces += '}';
	          }
	          if ($isDataFormat) {
	            out += ' if (!' + $compare + ') ' + $valid + ' = true; else { ';
	            $closingBraces += '}';
	          }
	          out += ' var ' + $result + ' = ' + $compare + '(' + $data + ',  ';
	          if ($isData) {
	            out += '' + $schemaValue;
	          } else {
	            out += '' + it.util.toQuotedString($schema);
	          }
	          out += ' ); if (' + $result + ' === undefined) ' + $valid + ' = false; var ' + $exclusive + ' = ' + $schemaValueExcl + ' === true; if (' + $valid + ' === undefined) { ' + $valid + ' = ' + $exclusive + ' ? ' + $result + ' ' + $op + ' 0 : ' + $result + ' ' + $op + '= 0; } if (!' + $valid + ') var op' + $lvl + ' = ' + $exclusive + ' ? \'' + $op + '\' : \'' + $op + '=\';';
	        } else {
	          var $exclusive = $schemaExcl === true,
	              $opStr = $op;
	          if (!$exclusive) $opStr += '=';
	          var $opExpr = '\'' + $opStr + '\'';
	          if ($isData) {
	            out += ' if (' + $schemaValue + ' === undefined) ' + $valid + ' = true; else if (typeof ' + $schemaValue + ' != \'string\') ' + $valid + ' = false; else { ';
	            $closingBraces += '}';
	          }
	          if ($isDataFormat) {
	            out += ' if (!' + $compare + ') ' + $valid + ' = true; else { ';
	            $closingBraces += '}';
	          }
	          out += ' var ' + $result + ' = ' + $compare + '(' + $data + ',  ';
	          if ($isData) {
	            out += '' + $schemaValue;
	          } else {
	            out += '' + it.util.toQuotedString($schema);
	          }
	          out += ' ); if (' + $result + ' === undefined) ' + $valid + ' = false; if (' + $valid + ' === undefined) ' + $valid + ' = ' + $result + ' ' + $op;
	          if (!$exclusive) {
	            out += '=';
	          }
	          out += ' 0;';
	        }
	        out += '' + $closingBraces + 'if (!' + $valid + ') { ';
	        var $errorKeyword = $keyword;
	        var $$outStack = $$outStack || [];
	        $$outStack.push(out);
	        out = ''; /* istanbul ignore else */
	        if (it.createErrors !== false) {
	          out += ' { keyword: \'' + ($errorKeyword || '_formatLimit') + '\' , dataPath: (dataPath || \'\') + ' + it.errorPath + ' , schemaPath: ' + it.util.toQuotedString($errSchemaPath) + ' , params: { comparison: ' + $opExpr + ', limit:  ';
	          if ($isData) {
	            out += '' + $schemaValue;
	          } else {
	            out += '' + it.util.toQuotedString($schema);
	          }
	          out += ' , exclusive: ' + $exclusive + ' } ';
	          if (it.opts.messages !== false) {
	            out += ' , message: \'should be ' + $opStr + ' "';
	            if ($isData) {
	              out += '\' + ' + $schemaValue + ' + \'';
	            } else {
	              out += '' + it.util.escapeQuotes($schema);
	            }
	            out += '"\' ';
	          }
	          if (it.opts.verbose) {
	            out += ' , schema:  ';
	            if ($isData) {
	              out += 'validate.schema' + $schemaPath;
	            } else {
	              out += '' + it.util.toQuotedString($schema);
	            }
	            out += '         , parentSchema: validate.schema' + it.schemaPath + ' , data: ' + $data + ' ';
	          }
	          out += ' } ';
	        } else {
	          out += ' {} ';
	        }
	        var __err = out;
	        out = $$outStack.pop();
	        if (!it.compositeRule && $breakOnError) {
	          /* istanbul ignore if */
	          if (it.async) {
	            out += ' throw new ValidationError([' + __err + ']); ';
	          } else {
	            out += ' validate.errors = [' + __err + ']; return false; ';
	          }
	        } else {
	          out += ' var err = ' + __err + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
	        }
	        out += '}';
	        return out;
	      };
	    }, {}], 14: [function (require, module, exports) {
	      'use strict';
	
	      module.exports = function generate__limit(it, $keyword) {
	        var out = ' ';
	        var $lvl = it.level;
	        var $dataLvl = it.dataLevel;
	        var $schema = it.schema[$keyword];
	        var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
	        var $errSchemaPath = it.errSchemaPath + '/' + $keyword;
	        var $breakOnError = !it.opts.allErrors;
	        var $errorKeyword;
	        var $data = 'data' + ($dataLvl || '');
	        var $isData = it.opts.v5 && $schema && $schema.$data,
	            $schemaValue;
	        if ($isData) {
	          out += ' var schema' + $lvl + ' = ' + it.util.getData($schema.$data, $dataLvl, it.dataPathArr) + '; ';
	          $schemaValue = 'schema' + $lvl;
	        } else {
	          $schemaValue = $schema;
	        }
	        var $isMax = $keyword == 'maximum',
	            $exclusiveKeyword = $isMax ? 'exclusiveMaximum' : 'exclusiveMinimum',
	            $schemaExcl = it.schema[$exclusiveKeyword],
	            $isDataExcl = it.opts.v5 && $schemaExcl && $schemaExcl.$data,
	            $op = $isMax ? '<' : '>',
	            $notOp = $isMax ? '>' : '<';
	        if ($isDataExcl) {
	          var $schemaValueExcl = it.util.getData($schemaExcl.$data, $dataLvl, it.dataPathArr),
	              $exclusive = 'exclusive' + $lvl,
	              $opExpr = 'op' + $lvl,
	              $opStr = '\' + ' + $opExpr + ' + \'';
	          out += ' var schemaExcl' + $lvl + ' = ' + $schemaValueExcl + '; ';
	          $schemaValueExcl = 'schemaExcl' + $lvl;
	          out += ' var exclusive' + $lvl + '; if (typeof ' + $schemaValueExcl + ' != \'boolean\' && typeof ' + $schemaValueExcl + ' != \'undefined\') { ';
	          var $errorKeyword = $exclusiveKeyword;
	          var $$outStack = $$outStack || [];
	          $$outStack.push(out);
	          out = ''; /* istanbul ignore else */
	          if (it.createErrors !== false) {
	            out += ' { keyword: \'' + ($errorKeyword || '_exclusiveLimit') + '\' , dataPath: (dataPath || \'\') + ' + it.errorPath + ' , schemaPath: ' + it.util.toQuotedString($errSchemaPath) + ' , params: {} ';
	            if (it.opts.messages !== false) {
	              out += ' , message: \'' + $exclusiveKeyword + ' should be boolean\' ';
	            }
	            if (it.opts.verbose) {
	              out += ' , schema: validate.schema' + $schemaPath + ' , parentSchema: validate.schema' + it.schemaPath + ' , data: ' + $data + ' ';
	            }
	            out += ' } ';
	          } else {
	            out += ' {} ';
	          }
	          var __err = out;
	          out = $$outStack.pop();
	          if (!it.compositeRule && $breakOnError) {
	            /* istanbul ignore if */
	            if (it.async) {
	              out += ' throw new ValidationError([' + __err + ']); ';
	            } else {
	              out += ' validate.errors = [' + __err + ']; return false; ';
	            }
	          } else {
	            out += ' var err = ' + __err + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
	          }
	          out += ' } else if( ';
	          if ($isData) {
	            out += ' (' + $schemaValue + ' !== undefined && typeof ' + $schemaValue + ' != \'number\') || ';
	          }
	          out += ' ((exclusive' + $lvl + ' = ' + $schemaValueExcl + ' === true) ? ' + $data + ' ' + $notOp + '= ' + $schemaValue + ' : ' + $data + ' ' + $notOp + ' ' + $schemaValue + ') || ' + $data + ' !== ' + $data + ') { var op' + $lvl + ' = exclusive' + $lvl + ' ? \'' + $op + '\' : \'' + $op + '=\';';
	        } else {
	          var $exclusive = $schemaExcl === true,
	              $opStr = $op;
	          if (!$exclusive) $opStr += '=';
	          var $opExpr = '\'' + $opStr + '\'';
	          out += ' if ( ';
	          if ($isData) {
	            out += ' (' + $schemaValue + ' !== undefined && typeof ' + $schemaValue + ' != \'number\') || ';
	          }
	          out += ' ' + $data + ' ' + $notOp;
	          if ($exclusive) {
	            out += '=';
	          }
	          out += ' ' + $schemaValue + ' || ' + $data + ' !== ' + $data + ') {';
	        }
	        var $errorKeyword = $keyword;
	        var $$outStack = $$outStack || [];
	        $$outStack.push(out);
	        out = ''; /* istanbul ignore else */
	        if (it.createErrors !== false) {
	          out += ' { keyword: \'' + ($errorKeyword || '_limit') + '\' , dataPath: (dataPath || \'\') + ' + it.errorPath + ' , schemaPath: ' + it.util.toQuotedString($errSchemaPath) + ' , params: { comparison: ' + $opExpr + ', limit: ' + $schemaValue + ', exclusive: ' + $exclusive + ' } ';
	          if (it.opts.messages !== false) {
	            out += ' , message: \'should be ' + $opStr + ' ';
	            if ($isData) {
	              out += '\' + ' + $schemaValue;
	            } else {
	              out += '' + $schema + '\'';
	            }
	          }
	          if (it.opts.verbose) {
	            out += ' , schema:  ';
	            if ($isData) {
	              out += 'validate.schema' + $schemaPath;
	            } else {
	              out += '' + $schema;
	            }
	            out += '         , parentSchema: validate.schema' + it.schemaPath + ' , data: ' + $data + ' ';
	          }
	          out += ' } ';
	        } else {
	          out += ' {} ';
	        }
	        var __err = out;
	        out = $$outStack.pop();
	        if (!it.compositeRule && $breakOnError) {
	          /* istanbul ignore if */
	          if (it.async) {
	            out += ' throw new ValidationError([' + __err + ']); ';
	          } else {
	            out += ' validate.errors = [' + __err + ']; return false; ';
	          }
	        } else {
	          out += ' var err = ' + __err + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
	        }
	        out += ' } ';
	        if ($breakOnError) {
	          out += ' else { ';
	        }
	        return out;
	      };
	    }, {}], 15: [function (require, module, exports) {
	      'use strict';
	
	      module.exports = function generate__limitItems(it, $keyword) {
	        var out = ' ';
	        var $lvl = it.level;
	        var $dataLvl = it.dataLevel;
	        var $schema = it.schema[$keyword];
	        var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
	        var $errSchemaPath = it.errSchemaPath + '/' + $keyword;
	        var $breakOnError = !it.opts.allErrors;
	        var $errorKeyword;
	        var $data = 'data' + ($dataLvl || '');
	        var $isData = it.opts.v5 && $schema && $schema.$data,
	            $schemaValue;
	        if ($isData) {
	          out += ' var schema' + $lvl + ' = ' + it.util.getData($schema.$data, $dataLvl, it.dataPathArr) + '; ';
	          $schemaValue = 'schema' + $lvl;
	        } else {
	          $schemaValue = $schema;
	        }
	        var $op = $keyword == 'maxItems' ? '>' : '<';
	        out += 'if ( ';
	        if ($isData) {
	          out += ' (' + $schemaValue + ' !== undefined && typeof ' + $schemaValue + ' != \'number\') || ';
	        }
	        out += ' ' + $data + '.length ' + $op + ' ' + $schemaValue + ') { ';
	        var $errorKeyword = $keyword;
	        var $$outStack = $$outStack || [];
	        $$outStack.push(out);
	        out = ''; /* istanbul ignore else */
	        if (it.createErrors !== false) {
	          out += ' { keyword: \'' + ($errorKeyword || '_limitItems') + '\' , dataPath: (dataPath || \'\') + ' + it.errorPath + ' , schemaPath: ' + it.util.toQuotedString($errSchemaPath) + ' , params: { limit: ' + $schemaValue + ' } ';
	          if (it.opts.messages !== false) {
	            out += ' , message: \'should NOT have ';
	            if ($keyword == 'maxItems') {
	              out += 'more';
	            } else {
	              out += 'less';
	            }
	            out += ' than ';
	            if ($isData) {
	              out += '\' + ' + $schemaValue + ' + \'';
	            } else {
	              out += '' + $schema;
	            }
	            out += ' items\' ';
	          }
	          if (it.opts.verbose) {
	            out += ' , schema:  ';
	            if ($isData) {
	              out += 'validate.schema' + $schemaPath;
	            } else {
	              out += '' + $schema;
	            }
	            out += '         , parentSchema: validate.schema' + it.schemaPath + ' , data: ' + $data + ' ';
	          }
	          out += ' } ';
	        } else {
	          out += ' {} ';
	        }
	        var __err = out;
	        out = $$outStack.pop();
	        if (!it.compositeRule && $breakOnError) {
	          /* istanbul ignore if */
	          if (it.async) {
	            out += ' throw new ValidationError([' + __err + ']); ';
	          } else {
	            out += ' validate.errors = [' + __err + ']; return false; ';
	          }
	        } else {
	          out += ' var err = ' + __err + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
	        }
	        out += '} ';
	        if ($breakOnError) {
	          out += ' else { ';
	        }
	        return out;
	      };
	    }, {}], 16: [function (require, module, exports) {
	      'use strict';
	
	      module.exports = function generate__limitLength(it, $keyword) {
	        var out = ' ';
	        var $lvl = it.level;
	        var $dataLvl = it.dataLevel;
	        var $schema = it.schema[$keyword];
	        var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
	        var $errSchemaPath = it.errSchemaPath + '/' + $keyword;
	        var $breakOnError = !it.opts.allErrors;
	        var $errorKeyword;
	        var $data = 'data' + ($dataLvl || '');
	        var $isData = it.opts.v5 && $schema && $schema.$data,
	            $schemaValue;
	        if ($isData) {
	          out += ' var schema' + $lvl + ' = ' + it.util.getData($schema.$data, $dataLvl, it.dataPathArr) + '; ';
	          $schemaValue = 'schema' + $lvl;
	        } else {
	          $schemaValue = $schema;
	        }
	        var $op = $keyword == 'maxLength' ? '>' : '<';
	        out += 'if ( ';
	        if ($isData) {
	          out += ' (' + $schemaValue + ' !== undefined && typeof ' + $schemaValue + ' != \'number\') || ';
	        }
	        if (it.opts.unicode === false) {
	          out += ' ' + $data + '.length ';
	        } else {
	          out += ' ucs2length(' + $data + ') ';
	        }
	        out += ' ' + $op + ' ' + $schemaValue + ') { ';
	        var $errorKeyword = $keyword;
	        var $$outStack = $$outStack || [];
	        $$outStack.push(out);
	        out = ''; /* istanbul ignore else */
	        if (it.createErrors !== false) {
	          out += ' { keyword: \'' + ($errorKeyword || '_limitLength') + '\' , dataPath: (dataPath || \'\') + ' + it.errorPath + ' , schemaPath: ' + it.util.toQuotedString($errSchemaPath) + ' , params: { limit: ' + $schemaValue + ' } ';
	          if (it.opts.messages !== false) {
	            out += ' , message: \'should NOT be ';
	            if ($keyword == 'maxLength') {
	              out += 'longer';
	            } else {
	              out += 'shorter';
	            }
	            out += ' than ';
	            if ($isData) {
	              out += '\' + ' + $schemaValue + ' + \'';
	            } else {
	              out += '' + $schema;
	            }
	            out += ' characters\' ';
	          }
	          if (it.opts.verbose) {
	            out += ' , schema:  ';
	            if ($isData) {
	              out += 'validate.schema' + $schemaPath;
	            } else {
	              out += '' + $schema;
	            }
	            out += '         , parentSchema: validate.schema' + it.schemaPath + ' , data: ' + $data + ' ';
	          }
	          out += ' } ';
	        } else {
	          out += ' {} ';
	        }
	        var __err = out;
	        out = $$outStack.pop();
	        if (!it.compositeRule && $breakOnError) {
	          /* istanbul ignore if */
	          if (it.async) {
	            out += ' throw new ValidationError([' + __err + ']); ';
	          } else {
	            out += ' validate.errors = [' + __err + ']; return false; ';
	          }
	        } else {
	          out += ' var err = ' + __err + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
	        }
	        out += '} ';
	        if ($breakOnError) {
	          out += ' else { ';
	        }
	        return out;
	      };
	    }, {}], 17: [function (require, module, exports) {
	      'use strict';
	
	      module.exports = function generate__limitProperties(it, $keyword) {
	        var out = ' ';
	        var $lvl = it.level;
	        var $dataLvl = it.dataLevel;
	        var $schema = it.schema[$keyword];
	        var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
	        var $errSchemaPath = it.errSchemaPath + '/' + $keyword;
	        var $breakOnError = !it.opts.allErrors;
	        var $errorKeyword;
	        var $data = 'data' + ($dataLvl || '');
	        var $isData = it.opts.v5 && $schema && $schema.$data,
	            $schemaValue;
	        if ($isData) {
	          out += ' var schema' + $lvl + ' = ' + it.util.getData($schema.$data, $dataLvl, it.dataPathArr) + '; ';
	          $schemaValue = 'schema' + $lvl;
	        } else {
	          $schemaValue = $schema;
	        }
	        var $op = $keyword == 'maxProperties' ? '>' : '<';
	        out += 'if ( ';
	        if ($isData) {
	          out += ' (' + $schemaValue + ' !== undefined && typeof ' + $schemaValue + ' != \'number\') || ';
	        }
	        out += ' Object.keys(' + $data + ').length ' + $op + ' ' + $schemaValue + ') { ';
	        var $errorKeyword = $keyword;
	        var $$outStack = $$outStack || [];
	        $$outStack.push(out);
	        out = ''; /* istanbul ignore else */
	        if (it.createErrors !== false) {
	          out += ' { keyword: \'' + ($errorKeyword || '_limitProperties') + '\' , dataPath: (dataPath || \'\') + ' + it.errorPath + ' , schemaPath: ' + it.util.toQuotedString($errSchemaPath) + ' , params: { limit: ' + $schemaValue + ' } ';
	          if (it.opts.messages !== false) {
	            out += ' , message: \'should NOT have ';
	            if ($keyword == 'maxProperties') {
	              out += 'more';
	            } else {
	              out += 'less';
	            }
	            out += ' than ';
	            if ($isData) {
	              out += '\' + ' + $schemaValue + ' + \'';
	            } else {
	              out += '' + $schema;
	            }
	            out += ' properties\' ';
	          }
	          if (it.opts.verbose) {
	            out += ' , schema:  ';
	            if ($isData) {
	              out += 'validate.schema' + $schemaPath;
	            } else {
	              out += '' + $schema;
	            }
	            out += '         , parentSchema: validate.schema' + it.schemaPath + ' , data: ' + $data + ' ';
	          }
	          out += ' } ';
	        } else {
	          out += ' {} ';
	        }
	        var __err = out;
	        out = $$outStack.pop();
	        if (!it.compositeRule && $breakOnError) {
	          /* istanbul ignore if */
	          if (it.async) {
	            out += ' throw new ValidationError([' + __err + ']); ';
	          } else {
	            out += ' validate.errors = [' + __err + ']; return false; ';
	          }
	        } else {
	          out += ' var err = ' + __err + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
	        }
	        out += '} ';
	        if ($breakOnError) {
	          out += ' else { ';
	        }
	        return out;
	      };
	    }, {}], 18: [function (require, module, exports) {
	      'use strict';
	
	      module.exports = function generate_allOf(it, $keyword) {
	        var out = ' ';
	        var $schema = it.schema[$keyword];
	        var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
	        var $errSchemaPath = it.errSchemaPath + '/' + $keyword;
	        var $breakOnError = !it.opts.allErrors;
	        var $it = it.util.copy(it);
	        var $closingBraces = '';
	        $it.level++;
	        var $nextValid = 'valid' + $it.level;
	        var $currentBaseId = $it.baseId,
	            $allSchemasEmpty = true;
	        var arr1 = $schema;
	        if (arr1) {
	          var $sch,
	              $i = -1,
	              l1 = arr1.length - 1;
	          while ($i < l1) {
	            $sch = arr1[$i += 1];
	            if (it.util.schemaHasRules($sch, it.RULES.all)) {
	              $allSchemasEmpty = false;
	              $it.schema = $sch;
	              $it.schemaPath = $schemaPath + '[' + $i + ']';
	              $it.errSchemaPath = $errSchemaPath + '/' + $i;
	              out += '  ' + it.validate($it) + ' ';
	              $it.baseId = $currentBaseId;
	              if ($breakOnError) {
	                out += ' if (' + $nextValid + ') { ';
	                $closingBraces += '}';
	              }
	            }
	          }
	        }
	        if ($breakOnError) {
	          if ($allSchemasEmpty) {
	            out += ' if (true) { ';
	          } else {
	            out += ' ' + $closingBraces.slice(0, -1) + ' ';
	          }
	        }
	        out = it.util.cleanUpCode(out);
	        return out;
	      };
	    }, {}], 19: [function (require, module, exports) {
	      'use strict';
	
	      module.exports = function generate_anyOf(it, $keyword) {
	        var out = ' ';
	        var $lvl = it.level;
	        var $dataLvl = it.dataLevel;
	        var $schema = it.schema[$keyword];
	        var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
	        var $errSchemaPath = it.errSchemaPath + '/' + $keyword;
	        var $breakOnError = !it.opts.allErrors;
	        var $data = 'data' + ($dataLvl || '');
	        var $valid = 'valid' + $lvl;
	        var $errs = 'errs__' + $lvl;
	        var $it = it.util.copy(it);
	        var $closingBraces = '';
	        $it.level++;
	        var $nextValid = 'valid' + $it.level;
	        var $noEmptySchema = $schema.every(function ($sch) {
	          return it.util.schemaHasRules($sch, it.RULES.all);
	        });
	        if ($noEmptySchema) {
	          var $currentBaseId = $it.baseId;
	          out += ' var ' + $errs + ' = errors; var ' + $valid + ' = false;  ';
	          var $wasComposite = it.compositeRule;
	          it.compositeRule = $it.compositeRule = true;
	          var arr1 = $schema;
	          if (arr1) {
	            var $sch,
	                $i = -1,
	                l1 = arr1.length - 1;
	            while ($i < l1) {
	              $sch = arr1[$i += 1];
	              $it.schema = $sch;
	              $it.schemaPath = $schemaPath + '[' + $i + ']';
	              $it.errSchemaPath = $errSchemaPath + '/' + $i;
	              out += '  ' + it.validate($it) + ' ';
	              $it.baseId = $currentBaseId;
	              out += ' ' + $valid + ' = ' + $valid + ' || ' + $nextValid + '; if (!' + $valid + ') { ';
	              $closingBraces += '}';
	            }
	          }
	          it.compositeRule = $it.compositeRule = $wasComposite;
	          out += ' ' + $closingBraces + ' if (!' + $valid + ') {  var err =   '; /* istanbul ignore else */
	          if (it.createErrors !== false) {
	            out += ' { keyword: \'' + 'anyOf' + '\' , dataPath: (dataPath || \'\') + ' + it.errorPath + ' , schemaPath: ' + it.util.toQuotedString($errSchemaPath) + ' , params: {} ';
	            if (it.opts.messages !== false) {
	              out += ' , message: \'should match some schema in anyOf\' ';
	            }
	            if (it.opts.verbose) {
	              out += ' , schema: validate.schema' + $schemaPath + ' , parentSchema: validate.schema' + it.schemaPath + ' , data: ' + $data + ' ';
	            }
	            out += ' } ';
	          } else {
	            out += ' {} ';
	          }
	          out += ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; } else {  errors = ' + $errs + '; if (vErrors !== null) { if (' + $errs + ') vErrors.length = ' + $errs + '; else vErrors = null; } ';
	          if (it.opts.allErrors) {
	            out += ' } ';
	          }
	          out = it.util.cleanUpCode(out);
	        } else {
	          if ($breakOnError) {
	            out += ' if (true) { ';
	          }
	        }
	        return out;
	      };
	    }, {}], 20: [function (require, module, exports) {
	      'use strict';
	
	      module.exports = function generate_constant(it, $keyword) {
	        var out = ' ';
	        var $lvl = it.level;
	        var $dataLvl = it.dataLevel;
	        var $schema = it.schema[$keyword];
	        var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
	        var $errSchemaPath = it.errSchemaPath + '/' + $keyword;
	        var $breakOnError = !it.opts.allErrors;
	        var $data = 'data' + ($dataLvl || '');
	        var $valid = 'valid' + $lvl;
	        var $isData = it.opts.v5 && $schema && $schema.$data,
	            $schemaValue;
	        if ($isData) {
	          out += ' var schema' + $lvl + ' = ' + it.util.getData($schema.$data, $dataLvl, it.dataPathArr) + '; ';
	          $schemaValue = 'schema' + $lvl;
	        } else {
	          $schemaValue = $schema;
	        }
	        if (!$isData) {
	          out += ' var schema' + $lvl + ' = validate.schema' + $schemaPath + ';';
	        }
	        out += 'var ' + $valid + ' = equal(' + $data + ', schema' + $lvl + '); if (!' + $valid + ') {   ';
	        var $$outStack = $$outStack || [];
	        $$outStack.push(out);
	        out = ''; /* istanbul ignore else */
	        if (it.createErrors !== false) {
	          out += ' { keyword: \'' + 'constant' + '\' , dataPath: (dataPath || \'\') + ' + it.errorPath + ' , schemaPath: ' + it.util.toQuotedString($errSchemaPath) + ' , params: {} ';
	          if (it.opts.messages !== false) {
	            out += ' , message: \'should be equal to constant\' ';
	          }
	          if (it.opts.verbose) {
	            out += ' , schema: validate.schema' + $schemaPath + ' , parentSchema: validate.schema' + it.schemaPath + ' , data: ' + $data + ' ';
	          }
	          out += ' } ';
	        } else {
	          out += ' {} ';
	        }
	        var __err = out;
	        out = $$outStack.pop();
	        if (!it.compositeRule && $breakOnError) {
	          /* istanbul ignore if */
	          if (it.async) {
	            out += ' throw new ValidationError([' + __err + ']); ';
	          } else {
	            out += ' validate.errors = [' + __err + ']; return false; ';
	          }
	        } else {
	          out += ' var err = ' + __err + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
	        }
	        out += ' }';
	        return out;
	      };
	    }, {}], 21: [function (require, module, exports) {
	      'use strict';
	
	      module.exports = function generate_custom(it, $keyword) {
	        var out = ' ';
	        var $lvl = it.level;
	        var $dataLvl = it.dataLevel;
	        var $schema = it.schema[$keyword];
	        var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
	        var $errSchemaPath = it.errSchemaPath + '/' + $keyword;
	        var $breakOnError = !it.opts.allErrors;
	        var $errorKeyword;
	        var $data = 'data' + ($dataLvl || '');
	        var $valid = 'valid' + $lvl;
	        var $errs = 'errs__' + $lvl;
	        var $isData = it.opts.v5 && $schema && $schema.$data,
	            $schemaValue;
	        if ($isData) {
	          out += ' var schema' + $lvl + ' = ' + it.util.getData($schema.$data, $dataLvl, it.dataPathArr) + '; ';
	          $schemaValue = 'schema' + $lvl;
	        } else {
	          $schemaValue = $schema;
	        }
	        var $rule = this,
	            $definition = 'definition' + $lvl,
	            $rDef = $rule.definition;
	        var $compile, $inline, $macro, $ruleValidate, $validateCode;
	        if ($isData && $rDef.$data) {
	          $validateCode = 'keywordValidate' + $lvl;
	          var $validateSchema = $rDef.validateSchema;
	          out += ' var ' + $definition + ' = RULES.custom[\'' + $keyword + '\'].definition; var ' + $validateCode + ' = ' + $definition + '.validate;';
	        } else {
	          $ruleValidate = it.useCustomRule($rule, $schema, it.schema, it);
	          $schemaValue = 'validate.schema' + $schemaPath;
	          $validateCode = $ruleValidate.code;
	          $compile = $rDef.compile;
	          $inline = $rDef.inline;
	          $macro = $rDef.macro;
	        }
	        var $ruleErrs = $validateCode + '.errors',
	            $i = 'i' + $lvl,
	            $ruleErr = 'ruleErr' + $lvl,
	            $asyncKeyword = $rDef.async;
	        if ($asyncKeyword && !it.async) throw new Error('async keyword in sync schema');
	        if (!($inline || $macro)) {
	          out += '' + $ruleErrs + ' = null;';
	        }
	        out += 'var ' + $errs + ' = errors;var ' + $valid + ';';
	        if ($validateSchema) {
	          out += ' ' + $valid + ' = ' + $definition + '.validateSchema(' + $schemaValue + '); if (' + $valid + ') {';
	        }
	        if ($inline) {
	          if ($rDef.statements) {
	            out += ' ' + $ruleValidate.validate + ' ';
	          } else {
	            out += ' ' + $valid + ' = ' + $ruleValidate.validate + '; ';
	          }
	        } else if ($macro) {
	          var $it = it.util.copy(it);
	          $it.level++;
	          var $nextValid = 'valid' + $it.level;
	          $it.schema = $ruleValidate.validate;
	          $it.schemaPath = '';
	          var $wasComposite = it.compositeRule;
	          it.compositeRule = $it.compositeRule = true;
	          var $code = it.validate($it).replace(/validate\.schema/g, $validateCode);
	          it.compositeRule = $it.compositeRule = $wasComposite;
	          out += ' ' + $code;
	        } else {
	          var $$outStack = $$outStack || [];
	          $$outStack.push(out);
	          out = '';
	          out += '  ' + $validateCode + '.call( ';
	          if (it.opts.passContext) {
	            out += 'this';
	          } else {
	            out += 'self';
	          }
	          if ($compile || $rDef.schema === false) {
	            out += ' , ' + $data + ' ';
	          } else {
	            out += ' , ' + $schemaValue + ' , ' + $data + ' , validate.schema' + it.schemaPath + ' ';
	          }
	          out += ' , (dataPath || \'\')';
	          if (it.errorPath != '""') {
	            out += ' + ' + it.errorPath;
	          }
	          var $parentData = $dataLvl ? 'data' + ($dataLvl - 1 || '') : 'parentData',
	              $parentDataProperty = $dataLvl ? it.dataPathArr[$dataLvl] : 'parentDataProperty';
	          out += ' , ' + $parentData + ' , ' + $parentDataProperty + ' , rootData )  ';
	          var def_callRuleValidate = out;
	          out = $$outStack.pop();
	          if ($rDef.errors === false) {
	            out += ' ' + $valid + ' = ';
	            if ($asyncKeyword) {
	              out += '' + it.yieldAwait;
	            }
	            out += '' + def_callRuleValidate + '; ';
	          } else {
	            if ($asyncKeyword) {
	              $ruleErrs = 'customErrors' + $lvl;
	              out += ' var ' + $ruleErrs + ' = null; try { ' + $valid + ' = ' + it.yieldAwait + def_callRuleValidate + '; } catch (e) { ' + $valid + ' = false; if (e instanceof ValidationError) ' + $ruleErrs + ' = e.errors; else throw e; } ';
	            } else {
	              out += ' ' + $ruleErrs + ' = null; ' + $valid + ' = ' + def_callRuleValidate + '; ';
	            }
	          }
	        }
	        if ($rDef.modifying) {
	          out += ' ' + $data + ' = ' + $parentData + '[' + $parentDataProperty + '];';
	        }
	        if ($validateSchema) {
	          out += ' }';
	        }
	        if ($rDef.valid) {
	          if ($breakOnError) {
	            out += ' if (true) { ';
	          }
	        } else {
	          out += ' if ( ';
	          if ($rDef.valid === undefined) {
	            out += ' !';
	            if ($macro) {
	              out += '' + $nextValid;
	            } else {
	              out += '' + $valid;
	            }
	          } else {
	            out += ' ' + !$rDef.valid + ' ';
	          }
	          out += ') { ';
	          $errorKeyword = $rule.keyword;
	          var $$outStack = $$outStack || [];
	          $$outStack.push(out);
	          out = '';
	          var $$outStack = $$outStack || [];
	          $$outStack.push(out);
	          out = ''; /* istanbul ignore else */
	          if (it.createErrors !== false) {
	            out += ' { keyword: \'' + ($errorKeyword || 'custom') + '\' , dataPath: (dataPath || \'\') + ' + it.errorPath + ' , schemaPath: ' + it.util.toQuotedString($errSchemaPath) + ' , params: { keyword: \'' + $rule.keyword + '\' } ';
	            if (it.opts.messages !== false) {
	              out += ' , message: \'should pass "' + $rule.keyword + '" keyword validation\' ';
	            }
	            if (it.opts.verbose) {
	              out += ' , schema: validate.schema' + $schemaPath + ' , parentSchema: validate.schema' + it.schemaPath + ' , data: ' + $data + ' ';
	            }
	            out += ' } ';
	          } else {
	            out += ' {} ';
	          }
	          var __err = out;
	          out = $$outStack.pop();
	          if (!it.compositeRule && $breakOnError) {
	            /* istanbul ignore if */
	            if (it.async) {
	              out += ' throw new ValidationError([' + __err + ']); ';
	            } else {
	              out += ' validate.errors = [' + __err + ']; return false; ';
	            }
	          } else {
	            out += ' var err = ' + __err + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
	          }
	          var def_customError = out;
	          out = $$outStack.pop();
	          if ($inline) {
	            if ($rDef.errors) {
	              if ($rDef.errors != 'full') {
	                out += '  for (var ' + $i + '=' + $errs + '; ' + $i + '<errors; ' + $i + '++) { var ' + $ruleErr + ' = vErrors[' + $i + ']; if (' + $ruleErr + '.dataPath === undefined) ' + $ruleErr + '.dataPath = (dataPath || \'\') + ' + it.errorPath + '; if (' + $ruleErr + '.schemaPath === undefined) { ' + $ruleErr + '.schemaPath = "' + $errSchemaPath + '"; } ';
	                if (it.opts.verbose) {
	                  out += ' ' + $ruleErr + '.schema = ' + $schemaValue + '; ' + $ruleErr + '.data = ' + $data + '; ';
	                }
	                out += ' } ';
	              }
	            } else {
	              if ($rDef.errors === false) {
	                out += ' ' + def_customError + ' ';
	              } else {
	                out += ' if (' + $errs + ' == errors) { ' + def_customError + ' } else {  for (var ' + $i + '=' + $errs + '; ' + $i + '<errors; ' + $i + '++) { var ' + $ruleErr + ' = vErrors[' + $i + ']; if (' + $ruleErr + '.dataPath === undefined) ' + $ruleErr + '.dataPath = (dataPath || \'\') + ' + it.errorPath + '; if (' + $ruleErr + '.schemaPath === undefined) { ' + $ruleErr + '.schemaPath = "' + $errSchemaPath + '"; } ';
	                if (it.opts.verbose) {
	                  out += ' ' + $ruleErr + '.schema = ' + $schemaValue + '; ' + $ruleErr + '.data = ' + $data + '; ';
	                }
	                out += ' } } ';
	              }
	            }
	          } else if ($macro) {
	            out += '   var err =   '; /* istanbul ignore else */
	            if (it.createErrors !== false) {
	              out += ' { keyword: \'' + ($errorKeyword || 'custom') + '\' , dataPath: (dataPath || \'\') + ' + it.errorPath + ' , schemaPath: ' + it.util.toQuotedString($errSchemaPath) + ' , params: { keyword: \'' + $rule.keyword + '\' } ';
	              if (it.opts.messages !== false) {
	                out += ' , message: \'should pass "' + $rule.keyword + '" keyword validation\' ';
	              }
	              if (it.opts.verbose) {
	                out += ' , schema: validate.schema' + $schemaPath + ' , parentSchema: validate.schema' + it.schemaPath + ' , data: ' + $data + ' ';
	              }
	              out += ' } ';
	            } else {
	              out += ' {} ';
	            }
	            out += ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
	            if (!it.compositeRule && $breakOnError) {
	              /* istanbul ignore if */
	              if (it.async) {
	                out += ' throw new ValidationError(vErrors); ';
	              } else {
	                out += ' validate.errors = vErrors; return false; ';
	              }
	            }
	          } else {
	            if ($rDef.errors === false) {
	              out += ' ' + def_customError + ' ';
	            } else {
	              out += ' if (Array.isArray(' + $ruleErrs + ')) { if (vErrors === null) vErrors = ' + $ruleErrs + '; else vErrors = vErrors.concat(' + $ruleErrs + '); errors = vErrors.length;  for (var ' + $i + '=' + $errs + '; ' + $i + '<errors; ' + $i + '++) { var ' + $ruleErr + ' = vErrors[' + $i + ']; if (' + $ruleErr + '.dataPath === undefined) ' + $ruleErr + '.dataPath = (dataPath || \'\') + ' + it.errorPath + ';  ' + $ruleErr + '.schemaPath = "' + $errSchemaPath + '";  ';
	              if (it.opts.verbose) {
	                out += ' ' + $ruleErr + '.schema = ' + $schemaValue + '; ' + $ruleErr + '.data = ' + $data + '; ';
	              }
	              out += ' } } else { ' + def_customError + ' } ';
	            }
	          }
	          out += ' } ';
	          if ($breakOnError) {
	            out += ' else { ';
	          }
	        }
	        return out;
	      };
	    }, {}], 22: [function (require, module, exports) {
	      'use strict';
	
	      module.exports = function generate_dependencies(it, $keyword) {
	        var out = ' ';
	        var $lvl = it.level;
	        var $dataLvl = it.dataLevel;
	        var $schema = it.schema[$keyword];
	        var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
	        var $errSchemaPath = it.errSchemaPath + '/' + $keyword;
	        var $breakOnError = !it.opts.allErrors;
	        var $data = 'data' + ($dataLvl || '');
	        var $errs = 'errs__' + $lvl;
	        var $it = it.util.copy(it);
	        var $closingBraces = '';
	        $it.level++;
	        var $nextValid = 'valid' + $it.level;
	        var $schemaDeps = {},
	            $propertyDeps = {};
	        for ($property in $schema) {
	          var $sch = $schema[$property];
	          var $deps = Array.isArray($sch) ? $propertyDeps : $schemaDeps;
	          $deps[$property] = $sch;
	        }
	        out += 'var ' + $errs + ' = errors;';
	        var $currentErrorPath = it.errorPath;
	        out += 'var missing' + $lvl + ';';
	        for (var $property in $propertyDeps) {
	          $deps = $propertyDeps[$property];
	          out += ' if (' + $data + it.util.getProperty($property) + ' !== undefined ';
	          if ($breakOnError) {
	            out += ' && ( ';
	            var arr1 = $deps;
	            if (arr1) {
	              var _$property,
	                  $i = -1,
	                  l1 = arr1.length - 1;
	              while ($i < l1) {
	                _$property = arr1[$i += 1];
	                if ($i) {
	                  out += ' || ';
	                }
	                var $prop = it.util.getProperty(_$property);
	                out += ' ( ' + $data + $prop + ' === undefined && (missing' + $lvl + ' = ' + it.util.toQuotedString(it.opts.jsonPointers ? _$property : $prop) + ') ) ';
	              }
	            }
	            out += ')) {  ';
	            var $propertyPath = 'missing' + $lvl,
	                $missingProperty = '\' + ' + $propertyPath + ' + \'';
	            if (it.opts._errorDataPathProperty) {
	              it.errorPath = it.opts.jsonPointers ? it.util.getPathExpr($currentErrorPath, $propertyPath, true) : $currentErrorPath + ' + ' + $propertyPath;
	            }
	            var $$outStack = $$outStack || [];
	            $$outStack.push(out);
	            out = ''; /* istanbul ignore else */
	            if (it.createErrors !== false) {
	              out += ' { keyword: \'' + 'dependencies' + '\' , dataPath: (dataPath || \'\') + ' + it.errorPath + ' , schemaPath: ' + it.util.toQuotedString($errSchemaPath) + ' , params: { property: \'' + it.util.escapeQuotes($property) + '\', missingProperty: \'' + $missingProperty + '\', depsCount: ' + $deps.length + ', deps: \'' + it.util.escapeQuotes($deps.length == 1 ? $deps[0] : $deps.join(", ")) + '\' } ';
	              if (it.opts.messages !== false) {
	                out += ' , message: \'should have ';
	                if ($deps.length == 1) {
	                  out += 'property ' + it.util.escapeQuotes($deps[0]);
	                } else {
	                  out += 'properties ' + it.util.escapeQuotes($deps.join(", "));
	                }
	                out += ' when property ' + it.util.escapeQuotes($property) + ' is present\' ';
	              }
	              if (it.opts.verbose) {
	                out += ' , schema: validate.schema' + $schemaPath + ' , parentSchema: validate.schema' + it.schemaPath + ' , data: ' + $data + ' ';
	              }
	              out += ' } ';
	            } else {
	              out += ' {} ';
	            }
	            var __err = out;
	            out = $$outStack.pop();
	            if (!it.compositeRule && $breakOnError) {
	              /* istanbul ignore if */
	              if (it.async) {
	                out += ' throw new ValidationError([' + __err + ']); ';
	              } else {
	                out += ' validate.errors = [' + __err + ']; return false; ';
	              }
	            } else {
	              out += ' var err = ' + __err + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
	            }
	          } else {
	            out += ' ) { ';
	            var arr2 = $deps;
	            if (arr2) {
	              var $reqProperty,
	                  i2 = -1,
	                  l2 = arr2.length - 1;
	              while (i2 < l2) {
	                $reqProperty = arr2[i2 += 1];
	                var $prop = it.util.getProperty($reqProperty),
	                    $missingProperty = it.util.escapeQuotes($reqProperty);
	                if (it.opts._errorDataPathProperty) {
	                  it.errorPath = it.util.getPath($currentErrorPath, $reqProperty, it.opts.jsonPointers);
	                }
	                out += ' if (' + $data + $prop + ' === undefined) {  var err =   '; /* istanbul ignore else */
	                if (it.createErrors !== false) {
	                  out += ' { keyword: \'' + 'dependencies' + '\' , dataPath: (dataPath || \'\') + ' + it.errorPath + ' , schemaPath: ' + it.util.toQuotedString($errSchemaPath) + ' , params: { property: \'' + it.util.escapeQuotes($property) + '\', missingProperty: \'' + $missingProperty + '\', depsCount: ' + $deps.length + ', deps: \'' + it.util.escapeQuotes($deps.length == 1 ? $deps[0] : $deps.join(", ")) + '\' } ';
	                  if (it.opts.messages !== false) {
	                    out += ' , message: \'should have ';
	                    if ($deps.length == 1) {
	                      out += 'property ' + it.util.escapeQuotes($deps[0]);
	                    } else {
	                      out += 'properties ' + it.util.escapeQuotes($deps.join(", "));
	                    }
	                    out += ' when property ' + it.util.escapeQuotes($property) + ' is present\' ';
	                  }
	                  if (it.opts.verbose) {
	                    out += ' , schema: validate.schema' + $schemaPath + ' , parentSchema: validate.schema' + it.schemaPath + ' , data: ' + $data + ' ';
	                  }
	                  out += ' } ';
	                } else {
	                  out += ' {} ';
	                }
	                out += ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; } ';
	              }
	            }
	          }
	          out += ' }   ';
	          if ($breakOnError) {
	            $closingBraces += '}';
	            out += ' else { ';
	          }
	        }
	        it.errorPath = $currentErrorPath;
	        var $currentBaseId = $it.baseId;
	        for (var $property in $schemaDeps) {
	          var $sch = $schemaDeps[$property];
	          if (it.util.schemaHasRules($sch, it.RULES.all)) {
	            out += ' ' + $nextValid + ' = true; if (' + $data + it.util.getProperty($property) + ' !== undefined) { ';
	            $it.schema = $sch;
	            $it.schemaPath = $schemaPath + it.util.getProperty($property);
	            $it.errSchemaPath = $errSchemaPath + '/' + it.util.escapeFragment($property);
	            out += '  ' + it.validate($it) + ' ';
	            $it.baseId = $currentBaseId;
	            out += ' }  ';
	            if ($breakOnError) {
	              out += ' if (' + $nextValid + ') { ';
	              $closingBraces += '}';
	            }
	          }
	        }
	        if ($breakOnError) {
	          out += '   ' + $closingBraces + ' if (' + $errs + ' == errors) {';
	        }
	        out = it.util.cleanUpCode(out);
	        return out;
	      };
	    }, {}], 23: [function (require, module, exports) {
	      'use strict';
	
	      module.exports = function generate_enum(it, $keyword) {
	        var out = ' ';
	        var $lvl = it.level;
	        var $dataLvl = it.dataLevel;
	        var $schema = it.schema[$keyword];
	        var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
	        var $errSchemaPath = it.errSchemaPath + '/' + $keyword;
	        var $breakOnError = !it.opts.allErrors;
	        var $data = 'data' + ($dataLvl || '');
	        var $valid = 'valid' + $lvl;
	        var $isData = it.opts.v5 && $schema && $schema.$data,
	            $schemaValue;
	        if ($isData) {
	          out += ' var schema' + $lvl + ' = ' + it.util.getData($schema.$data, $dataLvl, it.dataPathArr) + '; ';
	          $schemaValue = 'schema' + $lvl;
	        } else {
	          $schemaValue = $schema;
	        }
	        var $i = 'i' + $lvl,
	            $vSchema = 'schema' + $lvl;
	        if (!$isData) {
	          out += ' var ' + $vSchema + ' = validate.schema' + $schemaPath + ';';
	        }
	        out += 'var ' + $valid + ';';
	        if ($isData) {
	          out += ' if (schema' + $lvl + ' === undefined) ' + $valid + ' = true; else if (!Array.isArray(schema' + $lvl + ')) ' + $valid + ' = false; else {';
	        }
	        out += '' + $valid + ' = false;for (var ' + $i + '=0; ' + $i + '<' + $vSchema + '.length; ' + $i + '++) if (equal(' + $data + ', ' + $vSchema + '[' + $i + '])) { ' + $valid + ' = true; break; }';
	        if ($isData) {
	          out += '  }  ';
	        }
	        out += ' if (!' + $valid + ') {   ';
	        var $$outStack = $$outStack || [];
	        $$outStack.push(out);
	        out = ''; /* istanbul ignore else */
	        if (it.createErrors !== false) {
	          out += ' { keyword: \'' + 'enum' + '\' , dataPath: (dataPath || \'\') + ' + it.errorPath + ' , schemaPath: ' + it.util.toQuotedString($errSchemaPath) + ' , params: { allowedValues: schema' + $lvl + ' } ';
	          if (it.opts.messages !== false) {
	            out += ' , message: \'should be equal to one of the allowed values\' ';
	          }
	          if (it.opts.verbose) {
	            out += ' , schema: validate.schema' + $schemaPath + ' , parentSchema: validate.schema' + it.schemaPath + ' , data: ' + $data + ' ';
	          }
	          out += ' } ';
	        } else {
	          out += ' {} ';
	        }
	        var __err = out;
	        out = $$outStack.pop();
	        if (!it.compositeRule && $breakOnError) {
	          /* istanbul ignore if */
	          if (it.async) {
	            out += ' throw new ValidationError([' + __err + ']); ';
	          } else {
	            out += ' validate.errors = [' + __err + ']; return false; ';
	          }
	        } else {
	          out += ' var err = ' + __err + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
	        }
	        out += ' }';
	        if ($breakOnError) {
	          out += ' else { ';
	        }
	        return out;
	      };
	    }, {}], 24: [function (require, module, exports) {
	      'use strict';
	
	      module.exports = function generate_format(it, $keyword) {
	        var out = ' ';
	        var $lvl = it.level;
	        var $dataLvl = it.dataLevel;
	        var $schema = it.schema[$keyword];
	        var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
	        var $errSchemaPath = it.errSchemaPath + '/' + $keyword;
	        var $breakOnError = !it.opts.allErrors;
	        var $data = 'data' + ($dataLvl || '');
	        if (it.opts.format === false) {
	          if ($breakOnError) {
	            out += ' if (true) { ';
	          }
	          return out;
	        }
	        var $isData = it.opts.v5 && $schema && $schema.$data,
	            $schemaValue;
	        if ($isData) {
	          out += ' var schema' + $lvl + ' = ' + it.util.getData($schema.$data, $dataLvl, it.dataPathArr) + '; ';
	          $schemaValue = 'schema' + $lvl;
	        } else {
	          $schemaValue = $schema;
	        }
	        var $unknownFormats = it.opts.unknownFormats,
	            $allowUnknown = Array.isArray($unknownFormats);
	        if ($isData) {
	          var $format = 'format' + $lvl;
	          out += ' var ' + $format + ' = formats[' + $schemaValue + ']; var isObject' + $lvl + ' = typeof ' + $format + ' == \'object\' && !(' + $format + ' instanceof RegExp) && ' + $format + '.validate; if (isObject' + $lvl + ') { ';
	          if (it.async) {
	            out += ' var async' + $lvl + ' = ' + $format + '.async; ';
	          }
	          out += ' ' + $format + ' = ' + $format + '.validate; } if (  ';
	          if ($isData) {
	            out += ' (' + $schemaValue + ' !== undefined && typeof ' + $schemaValue + ' != \'string\') || ';
	          }
	          out += ' (';
	          if ($unknownFormats === true || $allowUnknown) {
	            out += ' (' + $schemaValue + ' && !' + $format + ' ';
	            if ($allowUnknown) {
	              out += ' && self._opts.unknownFormats.indexOf(' + $schemaValue + ') == -1 ';
	            }
	            out += ') || ';
	          }
	          out += ' (' + $format + ' && !(typeof ' + $format + ' == \'function\' ? ';
	          if (it.async) {
	            out += ' (async' + $lvl + ' ? ' + it.yieldAwait + ' ' + $format + '(' + $data + ') : ' + $format + '(' + $data + ')) ';
	          } else {
	            out += ' ' + $format + '(' + $data + ') ';
	          }
	          out += ' : ' + $format + '.test(' + $data + '))))) {';
	        } else {
	          var $format = it.formats[$schema];
	          if (!$format) {
	            if ($unknownFormats === true || $allowUnknown && $unknownFormats.indexOf($schema) == -1) {
	              throw new Error('unknown format "' + $schema + '" is used in schema at path "' + it.errSchemaPath + '"');
	            } else {
	              if (!$allowUnknown) {
	                console.warn('unknown format "' + $schema + '" ignored in schema at path "' + it.errSchemaPath + '"');
	                if ($unknownFormats !== 'ignore') console.warn('In the next major version it will throw exception. See option unknownFormats for more information');
	              }
	              if ($breakOnError) {
	                out += ' if (true) { ';
	              }
	              return out;
	            }
	          }
	          var $isObject = (typeof $format === "undefined" ? "undefined" : _typeof($format)) == 'object' && !($format instanceof RegExp) && $format.validate;
	          if ($isObject) {
	            var $async = $format.async === true;
	            $format = $format.validate;
	          }
	          if ($async) {
	            if (!it.async) throw new Error('async format in sync schema');
	            var $formatRef = 'formats' + it.util.getProperty($schema) + '.validate';
	            out += ' if (!(' + it.yieldAwait + ' ' + $formatRef + '(' + $data + '))) { ';
	          } else {
	            out += ' if (! ';
	            var $formatRef = 'formats' + it.util.getProperty($schema);
	            if ($isObject) $formatRef += '.validate';
	            if (typeof $format == 'function') {
	              out += ' ' + $formatRef + '(' + $data + ') ';
	            } else {
	              out += ' ' + $formatRef + '.test(' + $data + ') ';
	            }
	            out += ') { ';
	          }
	        }
	        var $$outStack = $$outStack || [];
	        $$outStack.push(out);
	        out = ''; /* istanbul ignore else */
	        if (it.createErrors !== false) {
	          out += ' { keyword: \'' + 'format' + '\' , dataPath: (dataPath || \'\') + ' + it.errorPath + ' , schemaPath: ' + it.util.toQuotedString($errSchemaPath) + ' , params: { format:  ';
	          if ($isData) {
	            out += '' + $schemaValue;
	          } else {
	            out += '' + it.util.toQuotedString($schema);
	          }
	          out += '  } ';
	          if (it.opts.messages !== false) {
	            out += ' , message: \'should match format "';
	            if ($isData) {
	              out += '\' + ' + $schemaValue + ' + \'';
	            } else {
	              out += '' + it.util.escapeQuotes($schema);
	            }
	            out += '"\' ';
	          }
	          if (it.opts.verbose) {
	            out += ' , schema:  ';
	            if ($isData) {
	              out += 'validate.schema' + $schemaPath;
	            } else {
	              out += '' + it.util.toQuotedString($schema);
	            }
	            out += '         , parentSchema: validate.schema' + it.schemaPath + ' , data: ' + $data + ' ';
	          }
	          out += ' } ';
	        } else {
	          out += ' {} ';
	        }
	        var __err = out;
	        out = $$outStack.pop();
	        if (!it.compositeRule && $breakOnError) {
	          /* istanbul ignore if */
	          if (it.async) {
	            out += ' throw new ValidationError([' + __err + ']); ';
	          } else {
	            out += ' validate.errors = [' + __err + ']; return false; ';
	          }
	        } else {
	          out += ' var err = ' + __err + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
	        }
	        out += ' } ';
	        if ($breakOnError) {
	          out += ' else { ';
	        }
	        return out;
	      };
	    }, {}], 25: [function (require, module, exports) {
	      'use strict';
	
	      module.exports = function generate_items(it, $keyword) {
	        var out = ' ';
	        var $lvl = it.level;
	        var $dataLvl = it.dataLevel;
	        var $schema = it.schema[$keyword];
	        var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
	        var $errSchemaPath = it.errSchemaPath + '/' + $keyword;
	        var $breakOnError = !it.opts.allErrors;
	        var $data = 'data' + ($dataLvl || '');
	        var $valid = 'valid' + $lvl;
	        var $errs = 'errs__' + $lvl;
	        var $it = it.util.copy(it);
	        var $closingBraces = '';
	        $it.level++;
	        var $nextValid = 'valid' + $it.level;
	        var $idx = 'i' + $lvl,
	            $dataNxt = $it.dataLevel = it.dataLevel + 1,
	            $nextData = 'data' + $dataNxt,
	            $currentBaseId = it.baseId;
	        out += 'var ' + $errs + ' = errors;var ' + $valid + ';';
	        if (Array.isArray($schema)) {
	          var $additionalItems = it.schema.additionalItems;
	          if ($additionalItems === false) {
	            out += ' ' + $valid + ' = ' + $data + '.length <= ' + $schema.length + '; ';
	            var $currErrSchemaPath = $errSchemaPath;
	            $errSchemaPath = it.errSchemaPath + '/additionalItems';
	            out += '  if (!' + $valid + ') {   ';
	            var $$outStack = $$outStack || [];
	            $$outStack.push(out);
	            out = ''; /* istanbul ignore else */
	            if (it.createErrors !== false) {
	              out += ' { keyword: \'' + 'additionalItems' + '\' , dataPath: (dataPath || \'\') + ' + it.errorPath + ' , schemaPath: ' + it.util.toQuotedString($errSchemaPath) + ' , params: { limit: ' + $schema.length + ' } ';
	              if (it.opts.messages !== false) {
	                out += ' , message: \'should NOT have more than ' + $schema.length + ' items\' ';
	              }
	              if (it.opts.verbose) {
	                out += ' , schema: false , parentSchema: validate.schema' + it.schemaPath + ' , data: ' + $data + ' ';
	              }
	              out += ' } ';
	            } else {
	              out += ' {} ';
	            }
	            var __err = out;
	            out = $$outStack.pop();
	            if (!it.compositeRule && $breakOnError) {
	              /* istanbul ignore if */
	              if (it.async) {
	                out += ' throw new ValidationError([' + __err + ']); ';
	              } else {
	                out += ' validate.errors = [' + __err + ']; return false; ';
	              }
	            } else {
	              out += ' var err = ' + __err + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
	            }
	            out += ' } ';
	            $errSchemaPath = $currErrSchemaPath;
	            if ($breakOnError) {
	              $closingBraces += '}';
	              out += ' else { ';
	            }
	          }
	          var arr1 = $schema;
	          if (arr1) {
	            var $sch,
	                $i = -1,
	                l1 = arr1.length - 1;
	            while ($i < l1) {
	              $sch = arr1[$i += 1];
	              if (it.util.schemaHasRules($sch, it.RULES.all)) {
	                out += ' ' + $nextValid + ' = true; if (' + $data + '.length > ' + $i + ') { ';
	                var $passData = $data + '[' + $i + ']';
	                $it.schema = $sch;
	                $it.schemaPath = $schemaPath + '[' + $i + ']';
	                $it.errSchemaPath = $errSchemaPath + '/' + $i;
	                $it.errorPath = it.util.getPathExpr(it.errorPath, $i, it.opts.jsonPointers, true);
	                $it.dataPathArr[$dataNxt] = $i;
	                var $code = it.validate($it);
	                $it.baseId = $currentBaseId;
	                if (it.util.varOccurences($code, $nextData) < 2) {
	                  out += ' ' + it.util.varReplace($code, $nextData, $passData) + ' ';
	                } else {
	                  out += ' var ' + $nextData + ' = ' + $passData + '; ' + $code + ' ';
	                }
	                out += ' }  ';
	                if ($breakOnError) {
	                  out += ' if (' + $nextValid + ') { ';
	                  $closingBraces += '}';
	                }
	              }
	            }
	          }
	          if ((typeof $additionalItems === "undefined" ? "undefined" : _typeof($additionalItems)) == 'object' && it.util.schemaHasRules($additionalItems, it.RULES.all)) {
	            $it.schema = $additionalItems;
	            $it.schemaPath = it.schemaPath + '.additionalItems';
	            $it.errSchemaPath = it.errSchemaPath + '/additionalItems';
	            out += ' ' + $nextValid + ' = true; if (' + $data + '.length > ' + $schema.length + ') {  for (var ' + $idx + ' = ' + $schema.length + '; ' + $idx + ' < ' + $data + '.length; ' + $idx + '++) { ';
	            $it.errorPath = it.util.getPathExpr(it.errorPath, $idx, it.opts.jsonPointers, true);
	            var $passData = $data + '[' + $idx + ']';
	            $it.dataPathArr[$dataNxt] = $idx;
	            var $code = it.validate($it);
	            $it.baseId = $currentBaseId;
	            if (it.util.varOccurences($code, $nextData) < 2) {
	              out += ' ' + it.util.varReplace($code, $nextData, $passData) + ' ';
	            } else {
	              out += ' var ' + $nextData + ' = ' + $passData + '; ' + $code + ' ';
	            }
	            if ($breakOnError) {
	              out += ' if (!' + $nextValid + ') break; ';
	            }
	            out += ' } }  ';
	            if ($breakOnError) {
	              out += ' if (' + $nextValid + ') { ';
	              $closingBraces += '}';
	            }
	          }
	        } else if (it.util.schemaHasRules($schema, it.RULES.all)) {
	          $it.schema = $schema;
	          $it.schemaPath = $schemaPath;
	          $it.errSchemaPath = $errSchemaPath;
	          out += '  for (var ' + $idx + ' = ' + 0 + '; ' + $idx + ' < ' + $data + '.length; ' + $idx + '++) { ';
	          $it.errorPath = it.util.getPathExpr(it.errorPath, $idx, it.opts.jsonPointers, true);
	          var $passData = $data + '[' + $idx + ']';
	          $it.dataPathArr[$dataNxt] = $idx;
	          var $code = it.validate($it);
	          $it.baseId = $currentBaseId;
	          if (it.util.varOccurences($code, $nextData) < 2) {
	            out += ' ' + it.util.varReplace($code, $nextData, $passData) + ' ';
	          } else {
	            out += ' var ' + $nextData + ' = ' + $passData + '; ' + $code + ' ';
	          }
	          if ($breakOnError) {
	            out += ' if (!' + $nextValid + ') break; ';
	          }
	          out += ' }  ';
	          if ($breakOnError) {
	            out += ' if (' + $nextValid + ') { ';
	            $closingBraces += '}';
	          }
	        }
	        if ($breakOnError) {
	          out += ' ' + $closingBraces + ' if (' + $errs + ' == errors) {';
	        }
	        out = it.util.cleanUpCode(out);
	        return out;
	      };
	    }, {}], 26: [function (require, module, exports) {
	      'use strict';
	
	      module.exports = function generate_multipleOf(it, $keyword) {
	        var out = ' ';
	        var $lvl = it.level;
	        var $dataLvl = it.dataLevel;
	        var $schema = it.schema[$keyword];
	        var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
	        var $errSchemaPath = it.errSchemaPath + '/' + $keyword;
	        var $breakOnError = !it.opts.allErrors;
	        var $data = 'data' + ($dataLvl || '');
	        var $isData = it.opts.v5 && $schema && $schema.$data,
	            $schemaValue;
	        if ($isData) {
	          out += ' var schema' + $lvl + ' = ' + it.util.getData($schema.$data, $dataLvl, it.dataPathArr) + '; ';
	          $schemaValue = 'schema' + $lvl;
	        } else {
	          $schemaValue = $schema;
	        }
	        out += 'var division' + $lvl + ';if (';
	        if ($isData) {
	          out += ' ' + $schemaValue + ' !== undefined && ( typeof ' + $schemaValue + ' != \'number\' || ';
	        }
	        out += ' (division' + $lvl + ' = ' + $data + ' / ' + $schemaValue + ', ';
	        if (it.opts.multipleOfPrecision) {
	          out += ' Math.abs(Math.round(division' + $lvl + ') - division' + $lvl + ') > 1e-' + it.opts.multipleOfPrecision + ' ';
	        } else {
	          out += ' division' + $lvl + ' !== parseInt(division' + $lvl + ') ';
	        }
	        out += ' ) ';
	        if ($isData) {
	          out += '  )  ';
	        }
	        out += ' ) {   ';
	        var $$outStack = $$outStack || [];
	        $$outStack.push(out);
	        out = ''; /* istanbul ignore else */
	        if (it.createErrors !== false) {
	          out += ' { keyword: \'' + 'multipleOf' + '\' , dataPath: (dataPath || \'\') + ' + it.errorPath + ' , schemaPath: ' + it.util.toQuotedString($errSchemaPath) + ' , params: { multipleOf: ' + $schemaValue + ' } ';
	          if (it.opts.messages !== false) {
	            out += ' , message: \'should be multiple of ';
	            if ($isData) {
	              out += '\' + ' + $schemaValue;
	            } else {
	              out += '' + $schema + '\'';
	            }
	          }
	          if (it.opts.verbose) {
	            out += ' , schema:  ';
	            if ($isData) {
	              out += 'validate.schema' + $schemaPath;
	            } else {
	              out += '' + $schema;
	            }
	            out += '         , parentSchema: validate.schema' + it.schemaPath + ' , data: ' + $data + ' ';
	          }
	          out += ' } ';
	        } else {
	          out += ' {} ';
	        }
	        var __err = out;
	        out = $$outStack.pop();
	        if (!it.compositeRule && $breakOnError) {
	          /* istanbul ignore if */
	          if (it.async) {
	            out += ' throw new ValidationError([' + __err + ']); ';
	          } else {
	            out += ' validate.errors = [' + __err + ']; return false; ';
	          }
	        } else {
	          out += ' var err = ' + __err + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
	        }
	        out += '} ';
	        if ($breakOnError) {
	          out += ' else { ';
	        }
	        return out;
	      };
	    }, {}], 27: [function (require, module, exports) {
	      'use strict';
	
	      module.exports = function generate_not(it, $keyword) {
	        var out = ' ';
	        var $lvl = it.level;
	        var $dataLvl = it.dataLevel;
	        var $schema = it.schema[$keyword];
	        var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
	        var $errSchemaPath = it.errSchemaPath + '/' + $keyword;
	        var $breakOnError = !it.opts.allErrors;
	        var $data = 'data' + ($dataLvl || '');
	        var $errs = 'errs__' + $lvl;
	        var $it = it.util.copy(it);
	        $it.level++;
	        var $nextValid = 'valid' + $it.level;
	        if (it.util.schemaHasRules($schema, it.RULES.all)) {
	          $it.schema = $schema;
	          $it.schemaPath = $schemaPath;
	          $it.errSchemaPath = $errSchemaPath;
	          out += ' var ' + $errs + ' = errors;  ';
	          var $wasComposite = it.compositeRule;
	          it.compositeRule = $it.compositeRule = true;
	          $it.createErrors = false;
	          var $allErrorsOption;
	          if ($it.opts.allErrors) {
	            $allErrorsOption = $it.opts.allErrors;
	            $it.opts.allErrors = false;
	          }
	          out += ' ' + it.validate($it) + ' ';
	          $it.createErrors = true;
	          if ($allErrorsOption) $it.opts.allErrors = $allErrorsOption;
	          it.compositeRule = $it.compositeRule = $wasComposite;
	          out += ' if (' + $nextValid + ') {   ';
	          var $$outStack = $$outStack || [];
	          $$outStack.push(out);
	          out = ''; /* istanbul ignore else */
	          if (it.createErrors !== false) {
	            out += ' { keyword: \'' + 'not' + '\' , dataPath: (dataPath || \'\') + ' + it.errorPath + ' , schemaPath: ' + it.util.toQuotedString($errSchemaPath) + ' , params: {} ';
	            if (it.opts.messages !== false) {
	              out += ' , message: \'should NOT be valid\' ';
	            }
	            if (it.opts.verbose) {
	              out += ' , schema: validate.schema' + $schemaPath + ' , parentSchema: validate.schema' + it.schemaPath + ' , data: ' + $data + ' ';
	            }
	            out += ' } ';
	          } else {
	            out += ' {} ';
	          }
	          var __err = out;
	          out = $$outStack.pop();
	          if (!it.compositeRule && $breakOnError) {
	            /* istanbul ignore if */
	            if (it.async) {
	              out += ' throw new ValidationError([' + __err + ']); ';
	            } else {
	              out += ' validate.errors = [' + __err + ']; return false; ';
	            }
	          } else {
	            out += ' var err = ' + __err + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
	          }
	          out += ' } else {  errors = ' + $errs + '; if (vErrors !== null) { if (' + $errs + ') vErrors.length = ' + $errs + '; else vErrors = null; } ';
	          if (it.opts.allErrors) {
	            out += ' } ';
	          }
	        } else {
	          out += '  var err =   '; /* istanbul ignore else */
	          if (it.createErrors !== false) {
	            out += ' { keyword: \'' + 'not' + '\' , dataPath: (dataPath || \'\') + ' + it.errorPath + ' , schemaPath: ' + it.util.toQuotedString($errSchemaPath) + ' , params: {} ';
	            if (it.opts.messages !== false) {
	              out += ' , message: \'should NOT be valid\' ';
	            }
	            if (it.opts.verbose) {
	              out += ' , schema: validate.schema' + $schemaPath + ' , parentSchema: validate.schema' + it.schemaPath + ' , data: ' + $data + ' ';
	            }
	            out += ' } ';
	          } else {
	            out += ' {} ';
	          }
	          out += ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
	          if ($breakOnError) {
	            out += ' if (false) { ';
	          }
	        }
	        return out;
	      };
	    }, {}], 28: [function (require, module, exports) {
	      'use strict';
	
	      module.exports = function generate_oneOf(it, $keyword) {
	        var out = ' ';
	        var $lvl = it.level;
	        var $dataLvl = it.dataLevel;
	        var $schema = it.schema[$keyword];
	        var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
	        var $errSchemaPath = it.errSchemaPath + '/' + $keyword;
	        var $breakOnError = !it.opts.allErrors;
	        var $data = 'data' + ($dataLvl || '');
	        var $valid = 'valid' + $lvl;
	        var $errs = 'errs__' + $lvl;
	        var $it = it.util.copy(it);
	        var $closingBraces = '';
	        $it.level++;
	        var $nextValid = 'valid' + $it.level;
	        out += 'var ' + $errs + ' = errors;var prevValid' + $lvl + ' = false;var ' + $valid + ' = false;';
	        var $currentBaseId = $it.baseId;
	        var $wasComposite = it.compositeRule;
	        it.compositeRule = $it.compositeRule = true;
	        var arr1 = $schema;
	        if (arr1) {
	          var $sch,
	              $i = -1,
	              l1 = arr1.length - 1;
	          while ($i < l1) {
	            $sch = arr1[$i += 1];
	            if (it.util.schemaHasRules($sch, it.RULES.all)) {
	              $it.schema = $sch;
	              $it.schemaPath = $schemaPath + '[' + $i + ']';
	              $it.errSchemaPath = $errSchemaPath + '/' + $i;
	              out += '  ' + it.validate($it) + ' ';
	              $it.baseId = $currentBaseId;
	            } else {
	              out += ' var ' + $nextValid + ' = true; ';
	            }
	            if ($i) {
	              out += ' if (' + $nextValid + ' && prevValid' + $lvl + ') ' + $valid + ' = false; else { ';
	              $closingBraces += '}';
	            }
	            out += ' if (' + $nextValid + ') ' + $valid + ' = prevValid' + $lvl + ' = true;';
	          }
	        }
	        it.compositeRule = $it.compositeRule = $wasComposite;
	        out += '' + $closingBraces + 'if (!' + $valid + ') {   ';
	        var $$outStack = $$outStack || [];
	        $$outStack.push(out);
	        out = ''; /* istanbul ignore else */
	        if (it.createErrors !== false) {
	          out += ' { keyword: \'' + 'oneOf' + '\' , dataPath: (dataPath || \'\') + ' + it.errorPath + ' , schemaPath: ' + it.util.toQuotedString($errSchemaPath) + ' , params: {} ';
	          if (it.opts.messages !== false) {
	            out += ' , message: \'should match exactly one schema in oneOf\' ';
	          }
	          if (it.opts.verbose) {
	            out += ' , schema: validate.schema' + $schemaPath + ' , parentSchema: validate.schema' + it.schemaPath + ' , data: ' + $data + ' ';
	          }
	          out += ' } ';
	        } else {
	          out += ' {} ';
	        }
	        var __err = out;
	        out = $$outStack.pop();
	        if (!it.compositeRule && $breakOnError) {
	          /* istanbul ignore if */
	          if (it.async) {
	            out += ' throw new ValidationError([' + __err + ']); ';
	          } else {
	            out += ' validate.errors = [' + __err + ']; return false; ';
	          }
	        } else {
	          out += ' var err = ' + __err + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
	        }
	        out += '} else {  errors = ' + $errs + '; if (vErrors !== null) { if (' + $errs + ') vErrors.length = ' + $errs + '; else vErrors = null; }';
	        if (it.opts.allErrors) {
	          out += ' } ';
	        }
	        return out;
	      };
	    }, {}], 29: [function (require, module, exports) {
	      'use strict';
	
	      module.exports = function generate_pattern(it, $keyword) {
	        var out = ' ';
	        var $lvl = it.level;
	        var $dataLvl = it.dataLevel;
	        var $schema = it.schema[$keyword];
	        var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
	        var $errSchemaPath = it.errSchemaPath + '/' + $keyword;
	        var $breakOnError = !it.opts.allErrors;
	        var $data = 'data' + ($dataLvl || '');
	        var $isData = it.opts.v5 && $schema && $schema.$data,
	            $schemaValue;
	        if ($isData) {
	          out += ' var schema' + $lvl + ' = ' + it.util.getData($schema.$data, $dataLvl, it.dataPathArr) + '; ';
	          $schemaValue = 'schema' + $lvl;
	        } else {
	          $schemaValue = $schema;
	        }
	        var $regexp = $isData ? '(new RegExp(' + $schemaValue + '))' : it.usePattern($schema);
	        out += 'if ( ';
	        if ($isData) {
	          out += ' (' + $schemaValue + ' !== undefined && typeof ' + $schemaValue + ' != \'string\') || ';
	        }
	        out += ' !' + $regexp + '.test(' + $data + ') ) {   ';
	        var $$outStack = $$outStack || [];
	        $$outStack.push(out);
	        out = ''; /* istanbul ignore else */
	        if (it.createErrors !== false) {
	          out += ' { keyword: \'' + 'pattern' + '\' , dataPath: (dataPath || \'\') + ' + it.errorPath + ' , schemaPath: ' + it.util.toQuotedString($errSchemaPath) + ' , params: { pattern:  ';
	          if ($isData) {
	            out += '' + $schemaValue;
	          } else {
	            out += '' + it.util.toQuotedString($schema);
	          }
	          out += '  } ';
	          if (it.opts.messages !== false) {
	            out += ' , message: \'should match pattern "';
	            if ($isData) {
	              out += '\' + ' + $schemaValue + ' + \'';
	            } else {
	              out += '' + it.util.escapeQuotes($schema);
	            }
	            out += '"\' ';
	          }
	          if (it.opts.verbose) {
	            out += ' , schema:  ';
	            if ($isData) {
	              out += 'validate.schema' + $schemaPath;
	            } else {
	              out += '' + it.util.toQuotedString($schema);
	            }
	            out += '         , parentSchema: validate.schema' + it.schemaPath + ' , data: ' + $data + ' ';
	          }
	          out += ' } ';
	        } else {
	          out += ' {} ';
	        }
	        var __err = out;
	        out = $$outStack.pop();
	        if (!it.compositeRule && $breakOnError) {
	          /* istanbul ignore if */
	          if (it.async) {
	            out += ' throw new ValidationError([' + __err + ']); ';
	          } else {
	            out += ' validate.errors = [' + __err + ']; return false; ';
	          }
	        } else {
	          out += ' var err = ' + __err + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
	        }
	        out += '} ';
	        if ($breakOnError) {
	          out += ' else { ';
	        }
	        return out;
	      };
	    }, {}], 30: [function (require, module, exports) {
	      'use strict';
	
	      module.exports = function generate_patternRequired(it, $keyword) {
	        var out = ' ';
	        var $lvl = it.level;
	        var $dataLvl = it.dataLevel;
	        var $schema = it.schema[$keyword];
	        var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
	        var $errSchemaPath = it.errSchemaPath + '/' + $keyword;
	        var $breakOnError = !it.opts.allErrors;
	        var $data = 'data' + ($dataLvl || '');
	        var $valid = 'valid' + $lvl;
	        var $key = 'key' + $lvl,
	            $matched = 'patternMatched' + $lvl,
	            $closingBraces = '',
	            $ownProperties = it.opts.ownProperties;
	        out += 'var ' + $valid + ' = true;';
	        var arr1 = $schema;
	        if (arr1) {
	          var $pProperty,
	              i1 = -1,
	              l1 = arr1.length - 1;
	          while (i1 < l1) {
	            $pProperty = arr1[i1 += 1];
	            out += ' var ' + $matched + ' = false; for (var ' + $key + ' in ' + $data + ') {  ';
	            if ($ownProperties) {
	              out += ' if (!Object.prototype.hasOwnProperty.call(' + $data + ', ' + $key + ')) continue; ';
	            }
	            out += ' ' + $matched + ' = ' + it.usePattern($pProperty) + '.test(' + $key + '); if (' + $matched + ') break; } ';
	            var $missingPattern = it.util.escapeQuotes($pProperty);
	            out += ' if (!' + $matched + ') { ' + $valid + ' = false;  var err =   '; /* istanbul ignore else */
	            if (it.createErrors !== false) {
	              out += ' { keyword: \'' + 'patternRequired' + '\' , dataPath: (dataPath || \'\') + ' + it.errorPath + ' , schemaPath: ' + it.util.toQuotedString($errSchemaPath) + ' , params: { missingPattern: \'' + $missingPattern + '\' } ';
	              if (it.opts.messages !== false) {
	                out += ' , message: \'should have property matching pattern \\\'' + $missingPattern + '\\\'\' ';
	              }
	              if (it.opts.verbose) {
	                out += ' , schema: validate.schema' + $schemaPath + ' , parentSchema: validate.schema' + it.schemaPath + ' , data: ' + $data + ' ';
	              }
	              out += ' } ';
	            } else {
	              out += ' {} ';
	            }
	            out += ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; }   ';
	            if ($breakOnError) {
	              $closingBraces += '}';
	              out += ' else { ';
	            }
	          }
	        }
	        out += '' + $closingBraces;
	        return out;
	      };
	    }, {}], 31: [function (require, module, exports) {
	      'use strict';
	
	      module.exports = function generate_properties(it, $keyword) {
	        var out = ' ';
	        var $lvl = it.level;
	        var $dataLvl = it.dataLevel;
	        var $schema = it.schema[$keyword];
	        var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
	        var $errSchemaPath = it.errSchemaPath + '/' + $keyword;
	        var $breakOnError = !it.opts.allErrors;
	        var $data = 'data' + ($dataLvl || '');
	        var $valid = 'valid' + $lvl;
	        var $errs = 'errs__' + $lvl;
	        var $it = it.util.copy(it);
	        var $closingBraces = '';
	        $it.level++;
	        var $nextValid = 'valid' + $it.level;
	        var $key = 'key' + $lvl,
	            $dataNxt = $it.dataLevel = it.dataLevel + 1,
	            $nextData = 'data' + $dataNxt;
	        var $schemaKeys = Object.keys($schema || {}),
	            $pProperties = it.schema.patternProperties || {},
	            $pPropertyKeys = Object.keys($pProperties),
	            $aProperties = it.schema.additionalProperties,
	            $someProperties = $schemaKeys.length || $pPropertyKeys.length,
	            $noAdditional = $aProperties === false,
	            $additionalIsSchema = (typeof $aProperties === "undefined" ? "undefined" : _typeof($aProperties)) == 'object' && Object.keys($aProperties).length,
	            $removeAdditional = it.opts.removeAdditional,
	            $checkAdditional = $noAdditional || $additionalIsSchema || $removeAdditional,
	            $ownProperties = it.opts.ownProperties,
	            $currentBaseId = it.baseId;
	        var $required = it.schema.required;
	        if ($required && !(it.opts.v5 && $required.$data) && $required.length < it.opts.loopRequired) var $requiredHash = it.util.toHash($required);
	        if (it.opts.v5) {
	          var $pgProperties = it.schema.patternGroups || {},
	              $pgPropertyKeys = Object.keys($pgProperties);
	        }
	        out += 'var ' + $errs + ' = errors;var ' + $nextValid + ' = true;';
	        if ($checkAdditional) {
	          out += ' for (var ' + $key + ' in ' + $data + ') {  ';
	          if ($ownProperties) {
	            out += ' if (!Object.prototype.hasOwnProperty.call(' + $data + ', ' + $key + ')) continue; ';
	          }
	          if ($someProperties) {
	            out += ' var isAdditional' + $lvl + ' = !(false ';
	            if ($schemaKeys.length) {
	              if ($schemaKeys.length > 5) {
	                out += ' || validate.schema' + $schemaPath + '[' + $key + '] ';
	              } else {
	                var arr1 = $schemaKeys;
	                if (arr1) {
	                  var $propertyKey,
	                      i1 = -1,
	                      l1 = arr1.length - 1;
	                  while (i1 < l1) {
	                    $propertyKey = arr1[i1 += 1];
	                    out += ' || ' + $key + ' == ' + it.util.toQuotedString($propertyKey) + ' ';
	                  }
	                }
	              }
	            }
	            if ($pPropertyKeys.length) {
	              var arr2 = $pPropertyKeys;
	              if (arr2) {
	                var $pProperty,
	                    $i = -1,
	                    l2 = arr2.length - 1;
	                while ($i < l2) {
	                  $pProperty = arr2[$i += 1];
	                  out += ' || ' + it.usePattern($pProperty) + '.test(' + $key + ') ';
	                }
	              }
	            }
	            if (it.opts.v5 && $pgPropertyKeys && $pgPropertyKeys.length) {
	              var arr3 = $pgPropertyKeys;
	              if (arr3) {
	                var $pgProperty,
	                    $i = -1,
	                    l3 = arr3.length - 1;
	                while ($i < l3) {
	                  $pgProperty = arr3[$i += 1];
	                  out += ' || ' + it.usePattern($pgProperty) + '.test(' + $key + ') ';
	                }
	              }
	            }
	            out += ' ); if (isAdditional' + $lvl + ') { ';
	          }
	          if ($removeAdditional == 'all') {
	            out += ' delete ' + $data + '[' + $key + ']; ';
	          } else {
	            var $currentErrorPath = it.errorPath;
	            var $additionalProperty = '\' + ' + $key + ' + \'';
	            if (it.opts._errorDataPathProperty) {
	              it.errorPath = it.util.getPathExpr(it.errorPath, $key, it.opts.jsonPointers);
	            }
	            if ($noAdditional) {
	              if ($removeAdditional) {
	                out += ' delete ' + $data + '[' + $key + ']; ';
	              } else {
	                out += ' ' + $nextValid + ' = false; ';
	                var $currErrSchemaPath = $errSchemaPath;
	                $errSchemaPath = it.errSchemaPath + '/additionalProperties';
	                var $$outStack = $$outStack || [];
	                $$outStack.push(out);
	                out = ''; /* istanbul ignore else */
	                if (it.createErrors !== false) {
	                  out += ' { keyword: \'' + 'additionalProperties' + '\' , dataPath: (dataPath || \'\') + ' + it.errorPath + ' , schemaPath: ' + it.util.toQuotedString($errSchemaPath) + ' , params: { additionalProperty: \'' + $additionalProperty + '\' } ';
	                  if (it.opts.messages !== false) {
	                    out += ' , message: \'should NOT have additional properties\' ';
	                  }
	                  if (it.opts.verbose) {
	                    out += ' , schema: false , parentSchema: validate.schema' + it.schemaPath + ' , data: ' + $data + ' ';
	                  }
	                  out += ' } ';
	                } else {
	                  out += ' {} ';
	                }
	                var __err = out;
	                out = $$outStack.pop();
	                if (!it.compositeRule && $breakOnError) {
	                  /* istanbul ignore if */
	                  if (it.async) {
	                    out += ' throw new ValidationError([' + __err + ']); ';
	                  } else {
	                    out += ' validate.errors = [' + __err + ']; return false; ';
	                  }
	                } else {
	                  out += ' var err = ' + __err + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
	                }
	                $errSchemaPath = $currErrSchemaPath;
	                if ($breakOnError) {
	                  out += ' break; ';
	                }
	              }
	            } else if ($additionalIsSchema) {
	              if ($removeAdditional == 'failing') {
	                out += ' var ' + $errs + ' = errors;  ';
	                var $wasComposite = it.compositeRule;
	                it.compositeRule = $it.compositeRule = true;
	                $it.schema = $aProperties;
	                $it.schemaPath = it.schemaPath + '.additionalProperties';
	                $it.errSchemaPath = it.errSchemaPath + '/additionalProperties';
	                $it.errorPath = it.opts._errorDataPathProperty ? it.errorPath : it.util.getPathExpr(it.errorPath, $key, it.opts.jsonPointers);
	                var $passData = $data + '[' + $key + ']';
	                $it.dataPathArr[$dataNxt] = $key;
	                var $code = it.validate($it);
	                $it.baseId = $currentBaseId;
	                if (it.util.varOccurences($code, $nextData) < 2) {
	                  out += ' ' + it.util.varReplace($code, $nextData, $passData) + ' ';
	                } else {
	                  out += ' var ' + $nextData + ' = ' + $passData + '; ' + $code + ' ';
	                }
	                out += ' if (!' + $nextValid + ') { errors = ' + $errs + '; if (validate.errors !== null) { if (errors) validate.errors.length = errors; else validate.errors = null; } delete ' + $data + '[' + $key + ']; }  ';
	                it.compositeRule = $it.compositeRule = $wasComposite;
	              } else {
	                $it.schema = $aProperties;
	                $it.schemaPath = it.schemaPath + '.additionalProperties';
	                $it.errSchemaPath = it.errSchemaPath + '/additionalProperties';
	                $it.errorPath = it.opts._errorDataPathProperty ? it.errorPath : it.util.getPathExpr(it.errorPath, $key, it.opts.jsonPointers);
	                var $passData = $data + '[' + $key + ']';
	                $it.dataPathArr[$dataNxt] = $key;
	                var $code = it.validate($it);
	                $it.baseId = $currentBaseId;
	                if (it.util.varOccurences($code, $nextData) < 2) {
	                  out += ' ' + it.util.varReplace($code, $nextData, $passData) + ' ';
	                } else {
	                  out += ' var ' + $nextData + ' = ' + $passData + '; ' + $code + ' ';
	                }
	                if ($breakOnError) {
	                  out += ' if (!' + $nextValid + ') break; ';
	                }
	              }
	            }
	            it.errorPath = $currentErrorPath;
	          }
	          if ($someProperties) {
	            out += ' } ';
	          }
	          out += ' }  ';
	          if ($breakOnError) {
	            out += ' if (' + $nextValid + ') { ';
	            $closingBraces += '}';
	          }
	        }
	        var $useDefaults = it.opts.useDefaults && !it.compositeRule;
	        if ($schemaKeys.length) {
	          var arr4 = $schemaKeys;
	          if (arr4) {
	            var $propertyKey,
	                i4 = -1,
	                l4 = arr4.length - 1;
	            while (i4 < l4) {
	              $propertyKey = arr4[i4 += 1];
	              var $sch = $schema[$propertyKey];
	              if (it.util.schemaHasRules($sch, it.RULES.all)) {
	                var $prop = it.util.getProperty($propertyKey),
	                    $passData = $data + $prop,
	                    $hasDefault = $useDefaults && $sch.default !== undefined;
	                $it.schema = $sch;
	                $it.schemaPath = $schemaPath + $prop;
	                $it.errSchemaPath = $errSchemaPath + '/' + it.util.escapeFragment($propertyKey);
	                $it.errorPath = it.util.getPath(it.errorPath, $propertyKey, it.opts.jsonPointers);
	                $it.dataPathArr[$dataNxt] = it.util.toQuotedString($propertyKey);
	                var $code = it.validate($it);
	                $it.baseId = $currentBaseId;
	                if (it.util.varOccurences($code, $nextData) < 2) {
	                  $code = it.util.varReplace($code, $nextData, $passData);
	                  var $useData = $passData;
	                } else {
	                  var $useData = $nextData;
	                  out += ' var ' + $nextData + ' = ' + $passData + '; ';
	                }
	                if ($hasDefault) {
	                  out += ' ' + $code + ' ';
	                } else {
	                  if ($requiredHash && $requiredHash[$propertyKey]) {
	                    out += ' if (' + $useData + ' === undefined) { ' + $nextValid + ' = false; ';
	                    var $currentErrorPath = it.errorPath,
	                        $currErrSchemaPath = $errSchemaPath,
	                        $missingProperty = it.util.escapeQuotes($propertyKey);
	                    if (it.opts._errorDataPathProperty) {
	                      it.errorPath = it.util.getPath($currentErrorPath, $propertyKey, it.opts.jsonPointers);
	                    }
	                    $errSchemaPath = it.errSchemaPath + '/required';
	                    var $$outStack = $$outStack || [];
	                    $$outStack.push(out);
	                    out = ''; /* istanbul ignore else */
	                    if (it.createErrors !== false) {
	                      out += ' { keyword: \'' + 'required' + '\' , dataPath: (dataPath || \'\') + ' + it.errorPath + ' , schemaPath: ' + it.util.toQuotedString($errSchemaPath) + ' , params: { missingProperty: \'' + $missingProperty + '\' } ';
	                      if (it.opts.messages !== false) {
	                        out += ' , message: \'';
	                        if (it.opts._errorDataPathProperty) {
	                          out += 'is a required property';
	                        } else {
	                          out += 'should have required property \\\'' + $missingProperty + '\\\'';
	                        }
	                        out += '\' ';
	                      }
	                      if (it.opts.verbose) {
	                        out += ' , schema: validate.schema' + $schemaPath + ' , parentSchema: validate.schema' + it.schemaPath + ' , data: ' + $data + ' ';
	                      }
	                      out += ' } ';
	                    } else {
	                      out += ' {} ';
	                    }
	                    var __err = out;
	                    out = $$outStack.pop();
	                    if (!it.compositeRule && $breakOnError) {
	                      /* istanbul ignore if */
	                      if (it.async) {
	                        out += ' throw new ValidationError([' + __err + ']); ';
	                      } else {
	                        out += ' validate.errors = [' + __err + ']; return false; ';
	                      }
	                    } else {
	                      out += ' var err = ' + __err + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
	                    }
	                    $errSchemaPath = $currErrSchemaPath;
	                    it.errorPath = $currentErrorPath;
	                    out += ' } else { ';
	                  } else {
	                    if ($breakOnError) {
	                      out += ' if (' + $useData + ' === undefined) { ' + $nextValid + ' = true; } else { ';
	                    } else {
	                      out += ' if (' + $useData + ' !== undefined) { ';
	                    }
	                  }
	                  out += ' ' + $code + ' } ';
	                }
	              }
	              if ($breakOnError) {
	                out += ' if (' + $nextValid + ') { ';
	                $closingBraces += '}';
	              }
	            }
	          }
	        }
	        var arr5 = $pPropertyKeys;
	        if (arr5) {
	          var $pProperty,
	              i5 = -1,
	              l5 = arr5.length - 1;
	          while (i5 < l5) {
	            $pProperty = arr5[i5 += 1];
	            var $sch = $pProperties[$pProperty];
	            if (it.util.schemaHasRules($sch, it.RULES.all)) {
	              $it.schema = $sch;
	              $it.schemaPath = it.schemaPath + '.patternProperties' + it.util.getProperty($pProperty);
	              $it.errSchemaPath = it.errSchemaPath + '/patternProperties/' + it.util.escapeFragment($pProperty);
	              out += ' for (var ' + $key + ' in ' + $data + ') {  ';
	              if ($ownProperties) {
	                out += ' if (!Object.prototype.hasOwnProperty.call(' + $data + ', ' + $key + ')) continue; ';
	              }
	              out += ' if (' + it.usePattern($pProperty) + '.test(' + $key + ')) { ';
	              $it.errorPath = it.util.getPathExpr(it.errorPath, $key, it.opts.jsonPointers);
	              var $passData = $data + '[' + $key + ']';
	              $it.dataPathArr[$dataNxt] = $key;
	              var $code = it.validate($it);
	              $it.baseId = $currentBaseId;
	              if (it.util.varOccurences($code, $nextData) < 2) {
	                out += ' ' + it.util.varReplace($code, $nextData, $passData) + ' ';
	              } else {
	                out += ' var ' + $nextData + ' = ' + $passData + '; ' + $code + ' ';
	              }
	              if ($breakOnError) {
	                out += ' if (!' + $nextValid + ') break; ';
	              }
	              out += ' } ';
	              if ($breakOnError) {
	                out += ' else ' + $nextValid + ' = true; ';
	              }
	              out += ' }  ';
	              if ($breakOnError) {
	                out += ' if (' + $nextValid + ') { ';
	                $closingBraces += '}';
	              }
	            }
	          }
	        }
	        if (it.opts.v5) {
	          var arr6 = $pgPropertyKeys;
	          if (arr6) {
	            var $pgProperty,
	                i6 = -1,
	                l6 = arr6.length - 1;
	            while (i6 < l6) {
	              $pgProperty = arr6[i6 += 1];
	              var $pgSchema = $pgProperties[$pgProperty],
	                  $sch = $pgSchema.schema;
	              if (it.util.schemaHasRules($sch, it.RULES.all)) {
	                $it.schema = $sch;
	                $it.schemaPath = it.schemaPath + '.patternGroups' + it.util.getProperty($pgProperty) + '.schema';
	                $it.errSchemaPath = it.errSchemaPath + '/patternGroups/' + it.util.escapeFragment($pgProperty) + '/schema';
	                out += ' var pgPropCount' + $lvl + ' = 0; for (var ' + $key + ' in ' + $data + ') {  ';
	                if ($ownProperties) {
	                  out += ' if (!Object.prototype.hasOwnProperty.call(' + $data + ', ' + $key + ')) continue; ';
	                }
	                out += ' if (' + it.usePattern($pgProperty) + '.test(' + $key + ')) { pgPropCount' + $lvl + '++; ';
	                $it.errorPath = it.util.getPathExpr(it.errorPath, $key, it.opts.jsonPointers);
	                var $passData = $data + '[' + $key + ']';
	                $it.dataPathArr[$dataNxt] = $key;
	                var $code = it.validate($it);
	                $it.baseId = $currentBaseId;
	                if (it.util.varOccurences($code, $nextData) < 2) {
	                  out += ' ' + it.util.varReplace($code, $nextData, $passData) + ' ';
	                } else {
	                  out += ' var ' + $nextData + ' = ' + $passData + '; ' + $code + ' ';
	                }
	                if ($breakOnError) {
	                  out += ' if (!' + $nextValid + ') break; ';
	                }
	                out += ' } ';
	                if ($breakOnError) {
	                  out += ' else ' + $nextValid + ' = true; ';
	                }
	                out += ' }  ';
	                if ($breakOnError) {
	                  out += ' if (' + $nextValid + ') { ';
	                  $closingBraces += '}';
	                }
	                var $pgMin = $pgSchema.minimum,
	                    $pgMax = $pgSchema.maximum;
	                if ($pgMin !== undefined || $pgMax !== undefined) {
	                  out += ' var ' + $valid + ' = true; ';
	                  var $currErrSchemaPath = $errSchemaPath;
	                  if ($pgMin !== undefined) {
	                    var $limit = $pgMin,
	                        $reason = 'minimum',
	                        $moreOrLess = 'less';
	                    out += ' ' + $valid + ' = pgPropCount' + $lvl + ' >= ' + $pgMin + '; ';
	                    $errSchemaPath = it.errSchemaPath + '/patternGroups/minimum';
	                    out += '  if (!' + $valid + ') {   ';
	                    var $$outStack = $$outStack || [];
	                    $$outStack.push(out);
	                    out = ''; /* istanbul ignore else */
	                    if (it.createErrors !== false) {
	                      out += ' { keyword: \'' + 'patternGroups' + '\' , dataPath: (dataPath || \'\') + ' + it.errorPath + ' , schemaPath: ' + it.util.toQuotedString($errSchemaPath) + ' , params: { reason: \'' + $reason + '\', limit: ' + $limit + ', pattern: \'' + it.util.escapeQuotes($pgProperty) + '\' } ';
	                      if (it.opts.messages !== false) {
	                        out += ' , message: \'should NOT have ' + $moreOrLess + ' than ' + $limit + ' properties matching pattern "' + it.util.escapeQuotes($pgProperty) + '"\' ';
	                      }
	                      if (it.opts.verbose) {
	                        out += ' , schema: validate.schema' + $schemaPath + ' , parentSchema: validate.schema' + it.schemaPath + ' , data: ' + $data + ' ';
	                      }
	                      out += ' } ';
	                    } else {
	                      out += ' {} ';
	                    }
	                    var __err = out;
	                    out = $$outStack.pop();
	                    if (!it.compositeRule && $breakOnError) {
	                      /* istanbul ignore if */
	                      if (it.async) {
	                        out += ' throw new ValidationError([' + __err + ']); ';
	                      } else {
	                        out += ' validate.errors = [' + __err + ']; return false; ';
	                      }
	                    } else {
	                      out += ' var err = ' + __err + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
	                    }
	                    out += ' } ';
	                    if ($pgMax !== undefined) {
	                      out += ' else ';
	                    }
	                  }
	                  if ($pgMax !== undefined) {
	                    var $limit = $pgMax,
	                        $reason = 'maximum',
	                        $moreOrLess = 'more';
	                    out += ' ' + $valid + ' = pgPropCount' + $lvl + ' <= ' + $pgMax + '; ';
	                    $errSchemaPath = it.errSchemaPath + '/patternGroups/maximum';
	                    out += '  if (!' + $valid + ') {   ';
	                    var $$outStack = $$outStack || [];
	                    $$outStack.push(out);
	                    out = ''; /* istanbul ignore else */
	                    if (it.createErrors !== false) {
	                      out += ' { keyword: \'' + 'patternGroups' + '\' , dataPath: (dataPath || \'\') + ' + it.errorPath + ' , schemaPath: ' + it.util.toQuotedString($errSchemaPath) + ' , params: { reason: \'' + $reason + '\', limit: ' + $limit + ', pattern: \'' + it.util.escapeQuotes($pgProperty) + '\' } ';
	                      if (it.opts.messages !== false) {
	                        out += ' , message: \'should NOT have ' + $moreOrLess + ' than ' + $limit + ' properties matching pattern "' + it.util.escapeQuotes($pgProperty) + '"\' ';
	                      }
	                      if (it.opts.verbose) {
	                        out += ' , schema: validate.schema' + $schemaPath + ' , parentSchema: validate.schema' + it.schemaPath + ' , data: ' + $data + ' ';
	                      }
	                      out += ' } ';
	                    } else {
	                      out += ' {} ';
	                    }
	                    var __err = out;
	                    out = $$outStack.pop();
	                    if (!it.compositeRule && $breakOnError) {
	                      /* istanbul ignore if */
	                      if (it.async) {
	                        out += ' throw new ValidationError([' + __err + ']); ';
	                      } else {
	                        out += ' validate.errors = [' + __err + ']; return false; ';
	                      }
	                    } else {
	                      out += ' var err = ' + __err + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
	                    }
	                    out += ' } ';
	                  }
	                  $errSchemaPath = $currErrSchemaPath;
	                  if ($breakOnError) {
	                    out += ' if (' + $valid + ') { ';
	                    $closingBraces += '}';
	                  }
	                }
	              }
	            }
	          }
	        }
	        if ($breakOnError) {
	          out += ' ' + $closingBraces + ' if (' + $errs + ' == errors) {';
	        }
	        out = it.util.cleanUpCode(out);
	        return out;
	      };
	    }, {}], 32: [function (require, module, exports) {
	      'use strict';
	
	      module.exports = function generate_ref(it, $keyword) {
	        var out = ' ';
	        var $lvl = it.level;
	        var $dataLvl = it.dataLevel;
	        var $schema = it.schema[$keyword];
	        var $errSchemaPath = it.errSchemaPath + '/' + $keyword;
	        var $breakOnError = !it.opts.allErrors;
	        var $data = 'data' + ($dataLvl || '');
	        var $valid = 'valid' + $lvl;
	        var $async, $refCode;
	        if ($schema == '#' || $schema == '#/') {
	          if (it.isRoot) {
	            $async = it.async;
	            $refCode = 'validate';
	          } else {
	            $async = it.root.schema.$async === true;
	            $refCode = 'root.refVal[0]';
	          }
	        } else {
	          var $refVal = it.resolveRef(it.baseId, $schema, it.isRoot);
	          if ($refVal === undefined) {
	            var $message = 'can\'t resolve reference ' + $schema + ' from id ' + it.baseId;
	            if (it.opts.missingRefs == 'fail') {
	              console.log($message);
	              var $$outStack = $$outStack || [];
	              $$outStack.push(out);
	              out = ''; /* istanbul ignore else */
	              if (it.createErrors !== false) {
	                out += ' { keyword: \'' + '$ref' + '\' , dataPath: (dataPath || \'\') + ' + it.errorPath + ' , schemaPath: ' + it.util.toQuotedString($errSchemaPath) + ' , params: { ref: \'' + it.util.escapeQuotes($schema) + '\' } ';
	                if (it.opts.messages !== false) {
	                  out += ' , message: \'can\\\'t resolve reference ' + it.util.escapeQuotes($schema) + '\' ';
	                }
	                if (it.opts.verbose) {
	                  out += ' , schema: ' + it.util.toQuotedString($schema) + ' , parentSchema: validate.schema' + it.schemaPath + ' , data: ' + $data + ' ';
	                }
	                out += ' } ';
	              } else {
	                out += ' {} ';
	              }
	              var __err = out;
	              out = $$outStack.pop();
	              if (!it.compositeRule && $breakOnError) {
	                /* istanbul ignore if */
	                if (it.async) {
	                  out += ' throw new ValidationError([' + __err + ']); ';
	                } else {
	                  out += ' validate.errors = [' + __err + ']; return false; ';
	                }
	              } else {
	                out += ' var err = ' + __err + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
	              }
	              if ($breakOnError) {
	                out += ' if (false) { ';
	              }
	            } else if (it.opts.missingRefs == 'ignore') {
	              console.log($message);
	              if ($breakOnError) {
	                out += ' if (true) { ';
	              }
	            } else {
	              var $error = new Error($message);
	              $error.missingRef = it.resolve.url(it.baseId, $schema);
	              $error.missingSchema = it.resolve.normalizeId(it.resolve.fullPath($error.missingRef));
	              throw $error;
	            }
	          } else if ($refVal.inline) {
	            var $it = it.util.copy(it);
	            $it.level++;
	            var $nextValid = 'valid' + $it.level;
	            $it.schema = $refVal.schema;
	            $it.schemaPath = '';
	            $it.errSchemaPath = $schema;
	            var $code = it.validate($it).replace(/validate\.schema/g, $refVal.code);
	            out += ' ' + $code + ' ';
	            if ($breakOnError) {
	              out += ' if (' + $nextValid + ') { ';
	            }
	          } else {
	            $async = $refVal.$async === true;
	            $refCode = $refVal.code;
	          }
	        }
	        if ($refCode) {
	          var $$outStack = $$outStack || [];
	          $$outStack.push(out);
	          out = '';
	          if (it.opts.passContext) {
	            out += ' ' + $refCode + '.call(this, ';
	          } else {
	            out += ' ' + $refCode + '( ';
	          }
	          out += ' ' + $data + ', (dataPath || \'\')';
	          if (it.errorPath != '""') {
	            out += ' + ' + it.errorPath;
	          }
	          var $parentData = $dataLvl ? 'data' + ($dataLvl - 1 || '') : 'parentData',
	              $parentDataProperty = $dataLvl ? it.dataPathArr[$dataLvl] : 'parentDataProperty';
	          out += ' , ' + $parentData + ' , ' + $parentDataProperty + ', rootData)  ';
	          var __callValidate = out;
	          out = $$outStack.pop();
	          if ($async) {
	            if (!it.async) throw new Error('async schema referenced by sync schema');
	            out += ' try { ';
	            if ($breakOnError) {
	              out += 'var ' + $valid + ' =';
	            }
	            out += ' ' + it.yieldAwait + ' ' + __callValidate + '; } catch (e) { if (!(e instanceof ValidationError)) throw e; if (vErrors === null) vErrors = e.errors; else vErrors = vErrors.concat(e.errors); errors = vErrors.length; } ';
	            if ($breakOnError) {
	              out += ' if (' + $valid + ') { ';
	            }
	          } else {
	            out += ' if (!' + __callValidate + ') { if (vErrors === null) vErrors = ' + $refCode + '.errors; else vErrors = vErrors.concat(' + $refCode + '.errors); errors = vErrors.length; } ';
	            if ($breakOnError) {
	              out += ' else { ';
	            }
	          }
	        }
	        return out;
	      };
	    }, {}], 33: [function (require, module, exports) {
	      'use strict';
	
	      module.exports = function generate_required(it, $keyword) {
	        var out = ' ';
	        var $lvl = it.level;
	        var $dataLvl = it.dataLevel;
	        var $schema = it.schema[$keyword];
	        var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
	        var $errSchemaPath = it.errSchemaPath + '/' + $keyword;
	        var $breakOnError = !it.opts.allErrors;
	        var $data = 'data' + ($dataLvl || '');
	        var $valid = 'valid' + $lvl;
	        var $isData = it.opts.v5 && $schema && $schema.$data,
	            $schemaValue;
	        if ($isData) {
	          out += ' var schema' + $lvl + ' = ' + it.util.getData($schema.$data, $dataLvl, it.dataPathArr) + '; ';
	          $schemaValue = 'schema' + $lvl;
	        } else {
	          $schemaValue = $schema;
	        }
	        var $vSchema = 'schema' + $lvl;
	        if (!$isData) {
	          if ($schema.length < it.opts.loopRequired && it.schema.properties && Object.keys(it.schema.properties).length) {
	            var $required = [];
	            var arr1 = $schema;
	            if (arr1) {
	              var $property,
	                  i1 = -1,
	                  l1 = arr1.length - 1;
	              while (i1 < l1) {
	                $property = arr1[i1 += 1];
	                var $propertySch = it.schema.properties[$property];
	                if (!($propertySch && it.util.schemaHasRules($propertySch, it.RULES.all))) {
	                  $required[$required.length] = $property;
	                }
	              }
	            }
	          } else {
	            var $required = $schema;
	          }
	        }
	        if ($isData || $required.length) {
	          var $currentErrorPath = it.errorPath,
	              $loopRequired = $isData || $required.length >= it.opts.loopRequired;
	          if ($breakOnError) {
	            out += ' var missing' + $lvl + '; ';
	            if ($loopRequired) {
	              if (!$isData) {
	                out += ' var ' + $vSchema + ' = validate.schema' + $schemaPath + '; ';
	              }
	              var $i = 'i' + $lvl,
	                  $propertyPath = 'schema' + $lvl + '[' + $i + ']',
	                  $missingProperty = '\' + ' + $propertyPath + ' + \'';
	              if (it.opts._errorDataPathProperty) {
	                it.errorPath = it.util.getPathExpr($currentErrorPath, $propertyPath, it.opts.jsonPointers);
	              }
	              out += ' var ' + $valid + ' = true; ';
	              if ($isData) {
	                out += ' if (schema' + $lvl + ' === undefined) ' + $valid + ' = true; else if (!Array.isArray(schema' + $lvl + ')) ' + $valid + ' = false; else {';
	              }
	              out += ' for (var ' + $i + ' = 0; ' + $i + ' < ' + $vSchema + '.length; ' + $i + '++) { ' + $valid + ' = ' + $data + '[' + $vSchema + '[' + $i + ']] !== undefined; if (!' + $valid + ') break; } ';
	              if ($isData) {
	                out += '  }  ';
	              }
	              out += '  if (!' + $valid + ') {   ';
	              var $$outStack = $$outStack || [];
	              $$outStack.push(out);
	              out = ''; /* istanbul ignore else */
	              if (it.createErrors !== false) {
	                out += ' { keyword: \'' + 'required' + '\' , dataPath: (dataPath || \'\') + ' + it.errorPath + ' , schemaPath: ' + it.util.toQuotedString($errSchemaPath) + ' , params: { missingProperty: \'' + $missingProperty + '\' } ';
	                if (it.opts.messages !== false) {
	                  out += ' , message: \'';
	                  if (it.opts._errorDataPathProperty) {
	                    out += 'is a required property';
	                  } else {
	                    out += 'should have required property \\\'' + $missingProperty + '\\\'';
	                  }
	                  out += '\' ';
	                }
	                if (it.opts.verbose) {
	                  out += ' , schema: validate.schema' + $schemaPath + ' , parentSchema: validate.schema' + it.schemaPath + ' , data: ' + $data + ' ';
	                }
	                out += ' } ';
	              } else {
	                out += ' {} ';
	              }
	              var __err = out;
	              out = $$outStack.pop();
	              if (!it.compositeRule && $breakOnError) {
	                /* istanbul ignore if */
	                if (it.async) {
	                  out += ' throw new ValidationError([' + __err + ']); ';
	                } else {
	                  out += ' validate.errors = [' + __err + ']; return false; ';
	                }
	              } else {
	                out += ' var err = ' + __err + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
	              }
	              out += ' } else { ';
	            } else {
	              out += ' if ( ';
	              var arr2 = $required;
	              if (arr2) {
	                var _$property,
	                    $i = -1,
	                    l2 = arr2.length - 1;
	                while ($i < l2) {
	                  _$property = arr2[$i += 1];
	                  if ($i) {
	                    out += ' || ';
	                  }
	                  var $prop = it.util.getProperty(_$property);
	                  out += ' ( ' + $data + $prop + ' === undefined && (missing' + $lvl + ' = ' + it.util.toQuotedString(it.opts.jsonPointers ? _$property : $prop) + ') ) ';
	                }
	              }
	              out += ') {  ';
	              var $propertyPath = 'missing' + $lvl,
	                  $missingProperty = '\' + ' + $propertyPath + ' + \'';
	              if (it.opts._errorDataPathProperty) {
	                it.errorPath = it.opts.jsonPointers ? it.util.getPathExpr($currentErrorPath, $propertyPath, true) : $currentErrorPath + ' + ' + $propertyPath;
	              }
	              var $$outStack = $$outStack || [];
	              $$outStack.push(out);
	              out = ''; /* istanbul ignore else */
	              if (it.createErrors !== false) {
	                out += ' { keyword: \'' + 'required' + '\' , dataPath: (dataPath || \'\') + ' + it.errorPath + ' , schemaPath: ' + it.util.toQuotedString($errSchemaPath) + ' , params: { missingProperty: \'' + $missingProperty + '\' } ';
	                if (it.opts.messages !== false) {
	                  out += ' , message: \'';
	                  if (it.opts._errorDataPathProperty) {
	                    out += 'is a required property';
	                  } else {
	                    out += 'should have required property \\\'' + $missingProperty + '\\\'';
	                  }
	                  out += '\' ';
	                }
	                if (it.opts.verbose) {
	                  out += ' , schema: validate.schema' + $schemaPath + ' , parentSchema: validate.schema' + it.schemaPath + ' , data: ' + $data + ' ';
	                }
	                out += ' } ';
	              } else {
	                out += ' {} ';
	              }
	              var __err = out;
	              out = $$outStack.pop();
	              if (!it.compositeRule && $breakOnError) {
	                /* istanbul ignore if */
	                if (it.async) {
	                  out += ' throw new ValidationError([' + __err + ']); ';
	                } else {
	                  out += ' validate.errors = [' + __err + ']; return false; ';
	                }
	              } else {
	                out += ' var err = ' + __err + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
	              }
	              out += ' } else { ';
	            }
	          } else {
	            if ($loopRequired) {
	              if (!$isData) {
	                out += ' var ' + $vSchema + ' = validate.schema' + $schemaPath + '; ';
	              }
	              var $i = 'i' + $lvl,
	                  $propertyPath = 'schema' + $lvl + '[' + $i + ']',
	                  $missingProperty = '\' + ' + $propertyPath + ' + \'';
	              if (it.opts._errorDataPathProperty) {
	                it.errorPath = it.util.getPathExpr($currentErrorPath, $propertyPath, it.opts.jsonPointers);
	              }
	              if ($isData) {
	                out += ' if (' + $vSchema + ' && !Array.isArray(' + $vSchema + ')) {  var err =   '; /* istanbul ignore else */
	                if (it.createErrors !== false) {
	                  out += ' { keyword: \'' + 'required' + '\' , dataPath: (dataPath || \'\') + ' + it.errorPath + ' , schemaPath: ' + it.util.toQuotedString($errSchemaPath) + ' , params: { missingProperty: \'' + $missingProperty + '\' } ';
	                  if (it.opts.messages !== false) {
	                    out += ' , message: \'';
	                    if (it.opts._errorDataPathProperty) {
	                      out += 'is a required property';
	                    } else {
	                      out += 'should have required property \\\'' + $missingProperty + '\\\'';
	                    }
	                    out += '\' ';
	                  }
	                  if (it.opts.verbose) {
	                    out += ' , schema: validate.schema' + $schemaPath + ' , parentSchema: validate.schema' + it.schemaPath + ' , data: ' + $data + ' ';
	                  }
	                  out += ' } ';
	                } else {
	                  out += ' {} ';
	                }
	                out += ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; } else if (' + $vSchema + ' !== undefined) { ';
	              }
	              out += ' for (var ' + $i + ' = 0; ' + $i + ' < ' + $vSchema + '.length; ' + $i + '++) { if (' + $data + '[' + $vSchema + '[' + $i + ']] === undefined) {  var err =   '; /* istanbul ignore else */
	              if (it.createErrors !== false) {
	                out += ' { keyword: \'' + 'required' + '\' , dataPath: (dataPath || \'\') + ' + it.errorPath + ' , schemaPath: ' + it.util.toQuotedString($errSchemaPath) + ' , params: { missingProperty: \'' + $missingProperty + '\' } ';
	                if (it.opts.messages !== false) {
	                  out += ' , message: \'';
	                  if (it.opts._errorDataPathProperty) {
	                    out += 'is a required property';
	                  } else {
	                    out += 'should have required property \\\'' + $missingProperty + '\\\'';
	                  }
	                  out += '\' ';
	                }
	                if (it.opts.verbose) {
	                  out += ' , schema: validate.schema' + $schemaPath + ' , parentSchema: validate.schema' + it.schemaPath + ' , data: ' + $data + ' ';
	                }
	                out += ' } ';
	              } else {
	                out += ' {} ';
	              }
	              out += ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; } } ';
	              if ($isData) {
	                out += '  }  ';
	              }
	            } else {
	              var arr3 = $required;
	              if (arr3) {
	                var $reqProperty,
	                    i3 = -1,
	                    l3 = arr3.length - 1;
	                while (i3 < l3) {
	                  $reqProperty = arr3[i3 += 1];
	                  var $prop = it.util.getProperty($reqProperty),
	                      $missingProperty = it.util.escapeQuotes($reqProperty);
	                  if (it.opts._errorDataPathProperty) {
	                    it.errorPath = it.util.getPath($currentErrorPath, $reqProperty, it.opts.jsonPointers);
	                  }
	                  out += ' if (' + $data + $prop + ' === undefined) {  var err =   '; /* istanbul ignore else */
	                  if (it.createErrors !== false) {
	                    out += ' { keyword: \'' + 'required' + '\' , dataPath: (dataPath || \'\') + ' + it.errorPath + ' , schemaPath: ' + it.util.toQuotedString($errSchemaPath) + ' , params: { missingProperty: \'' + $missingProperty + '\' } ';
	                    if (it.opts.messages !== false) {
	                      out += ' , message: \'';
	                      if (it.opts._errorDataPathProperty) {
	                        out += 'is a required property';
	                      } else {
	                        out += 'should have required property \\\'' + $missingProperty + '\\\'';
	                      }
	                      out += '\' ';
	                    }
	                    if (it.opts.verbose) {
	                      out += ' , schema: validate.schema' + $schemaPath + ' , parentSchema: validate.schema' + it.schemaPath + ' , data: ' + $data + ' ';
	                    }
	                    out += ' } ';
	                  } else {
	                    out += ' {} ';
	                  }
	                  out += ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; } ';
	                }
	              }
	            }
	          }
	          it.errorPath = $currentErrorPath;
	        } else if ($breakOnError) {
	          out += ' if (true) {';
	        }
	        return out;
	      };
	    }, {}], 34: [function (require, module, exports) {
	      'use strict';
	
	      module.exports = function generate_switch(it, $keyword) {
	        var out = ' ';
	        var $lvl = it.level;
	        var $dataLvl = it.dataLevel;
	        var $schema = it.schema[$keyword];
	        var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
	        var $errSchemaPath = it.errSchemaPath + '/' + $keyword;
	        var $breakOnError = !it.opts.allErrors;
	        var $data = 'data' + ($dataLvl || '');
	        var $valid = 'valid' + $lvl;
	        var $errs = 'errs__' + $lvl;
	        var $it = it.util.copy(it);
	        var $closingBraces = '';
	        $it.level++;
	        var $nextValid = 'valid' + $it.level;
	        var $ifPassed = 'ifPassed' + it.level,
	            $currentBaseId = $it.baseId,
	            $shouldContinue;
	        out += 'var ' + $ifPassed + ';';
	        var arr1 = $schema;
	        if (arr1) {
	          var $sch,
	              $caseIndex = -1,
	              l1 = arr1.length - 1;
	          while ($caseIndex < l1) {
	            $sch = arr1[$caseIndex += 1];
	            if ($caseIndex && !$shouldContinue) {
	              out += ' if (!' + $ifPassed + ') { ';
	              $closingBraces += '}';
	            }
	            if ($sch.if && it.util.schemaHasRules($sch.if, it.RULES.all)) {
	              out += ' var ' + $errs + ' = errors;   ';
	              var $wasComposite = it.compositeRule;
	              it.compositeRule = $it.compositeRule = true;
	              $it.createErrors = false;
	              $it.schema = $sch.if;
	              $it.schemaPath = $schemaPath + '[' + $caseIndex + '].if';
	              $it.errSchemaPath = $errSchemaPath + '/' + $caseIndex + '/if';
	              out += '  ' + it.validate($it) + ' ';
	              $it.baseId = $currentBaseId;
	              $it.createErrors = true;
	              it.compositeRule = $it.compositeRule = $wasComposite;
	              out += ' ' + $ifPassed + ' = ' + $nextValid + '; if (' + $ifPassed + ') {  ';
	              if (typeof $sch.then == 'boolean') {
	                if ($sch.then === false) {
	                  var $$outStack = $$outStack || [];
	                  $$outStack.push(out);
	                  out = ''; /* istanbul ignore else */
	                  if (it.createErrors !== false) {
	                    out += ' { keyword: \'' + 'switch' + '\' , dataPath: (dataPath || \'\') + ' + it.errorPath + ' , schemaPath: ' + it.util.toQuotedString($errSchemaPath) + ' , params: { caseIndex: ' + $caseIndex + ' } ';
	                    if (it.opts.messages !== false) {
	                      out += ' , message: \'should pass "switch" keyword validation\' ';
	                    }
	                    if (it.opts.verbose) {
	                      out += ' , schema: validate.schema' + $schemaPath + ' , parentSchema: validate.schema' + it.schemaPath + ' , data: ' + $data + ' ';
	                    }
	                    out += ' } ';
	                  } else {
	                    out += ' {} ';
	                  }
	                  var __err = out;
	                  out = $$outStack.pop();
	                  if (!it.compositeRule && $breakOnError) {
	                    /* istanbul ignore if */
	                    if (it.async) {
	                      out += ' throw new ValidationError([' + __err + ']); ';
	                    } else {
	                      out += ' validate.errors = [' + __err + ']; return false; ';
	                    }
	                  } else {
	                    out += ' var err = ' + __err + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
	                  }
	                }
	                out += ' var ' + $nextValid + ' = ' + $sch.then + '; ';
	              } else {
	                $it.schema = $sch.then;
	                $it.schemaPath = $schemaPath + '[' + $caseIndex + '].then';
	                $it.errSchemaPath = $errSchemaPath + '/' + $caseIndex + '/then';
	                out += '  ' + it.validate($it) + ' ';
	                $it.baseId = $currentBaseId;
	              }
	              out += '  } else {  errors = ' + $errs + '; if (vErrors !== null) { if (' + $errs + ') vErrors.length = ' + $errs + '; else vErrors = null; } } ';
	            } else {
	              out += ' ' + $ifPassed + ' = true;  ';
	              if (typeof $sch.then == 'boolean') {
	                if ($sch.then === false) {
	                  var $$outStack = $$outStack || [];
	                  $$outStack.push(out);
	                  out = ''; /* istanbul ignore else */
	                  if (it.createErrors !== false) {
	                    out += ' { keyword: \'' + 'switch' + '\' , dataPath: (dataPath || \'\') + ' + it.errorPath + ' , schemaPath: ' + it.util.toQuotedString($errSchemaPath) + ' , params: { caseIndex: ' + $caseIndex + ' } ';
	                    if (it.opts.messages !== false) {
	                      out += ' , message: \'should pass "switch" keyword validation\' ';
	                    }
	                    if (it.opts.verbose) {
	                      out += ' , schema: validate.schema' + $schemaPath + ' , parentSchema: validate.schema' + it.schemaPath + ' , data: ' + $data + ' ';
	                    }
	                    out += ' } ';
	                  } else {
	                    out += ' {} ';
	                  }
	                  var __err = out;
	                  out = $$outStack.pop();
	                  if (!it.compositeRule && $breakOnError) {
	                    /* istanbul ignore if */
	                    if (it.async) {
	                      out += ' throw new ValidationError([' + __err + ']); ';
	                    } else {
	                      out += ' validate.errors = [' + __err + ']; return false; ';
	                    }
	                  } else {
	                    out += ' var err = ' + __err + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
	                  }
	                }
	                out += ' var ' + $nextValid + ' = ' + $sch.then + '; ';
	              } else {
	                $it.schema = $sch.then;
	                $it.schemaPath = $schemaPath + '[' + $caseIndex + '].then';
	                $it.errSchemaPath = $errSchemaPath + '/' + $caseIndex + '/then';
	                out += '  ' + it.validate($it) + ' ';
	                $it.baseId = $currentBaseId;
	              }
	            }
	            $shouldContinue = $sch.continue;
	          }
	        }
	        out += '' + $closingBraces + 'var ' + $valid + ' = ' + $nextValid + '; ';
	        out = it.util.cleanUpCode(out);
	        return out;
	      };
	    }, {}], 35: [function (require, module, exports) {
	      'use strict';
	
	      module.exports = function generate_uniqueItems(it, $keyword) {
	        var out = ' ';
	        var $lvl = it.level;
	        var $dataLvl = it.dataLevel;
	        var $schema = it.schema[$keyword];
	        var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
	        var $errSchemaPath = it.errSchemaPath + '/' + $keyword;
	        var $breakOnError = !it.opts.allErrors;
	        var $data = 'data' + ($dataLvl || '');
	        var $valid = 'valid' + $lvl;
	        var $isData = it.opts.v5 && $schema && $schema.$data,
	            $schemaValue;
	        if ($isData) {
	          out += ' var schema' + $lvl + ' = ' + it.util.getData($schema.$data, $dataLvl, it.dataPathArr) + '; ';
	          $schemaValue = 'schema' + $lvl;
	        } else {
	          $schemaValue = $schema;
	        }
	        if (($schema || $isData) && it.opts.uniqueItems !== false) {
	          if ($isData) {
	            out += ' var ' + $valid + '; if (' + $schemaValue + ' === false || ' + $schemaValue + ' === undefined) ' + $valid + ' = true; else if (typeof ' + $schemaValue + ' != \'boolean\') ' + $valid + ' = false; else { ';
	          }
	          out += ' var ' + $valid + ' = true; if (' + $data + '.length > 1) { var i = ' + $data + '.length, j; outer: for (;i--;) { for (j = i; j--;) { if (equal(' + $data + '[i], ' + $data + '[j])) { ' + $valid + ' = false; break outer; } } } } ';
	          if ($isData) {
	            out += '  }  ';
	          }
	          out += ' if (!' + $valid + ') {   ';
	          var $$outStack = $$outStack || [];
	          $$outStack.push(out);
	          out = ''; /* istanbul ignore else */
	          if (it.createErrors !== false) {
	            out += ' { keyword: \'' + 'uniqueItems' + '\' , dataPath: (dataPath || \'\') + ' + it.errorPath + ' , schemaPath: ' + it.util.toQuotedString($errSchemaPath) + ' , params: { i: i, j: j } ';
	            if (it.opts.messages !== false) {
	              out += ' , message: \'should NOT have duplicate items (items ## \' + j + \' and \' + i + \' are identical)\' ';
	            }
	            if (it.opts.verbose) {
	              out += ' , schema:  ';
	              if ($isData) {
	                out += 'validate.schema' + $schemaPath;
	              } else {
	                out += '' + $schema;
	              }
	              out += '         , parentSchema: validate.schema' + it.schemaPath + ' , data: ' + $data + ' ';
	            }
	            out += ' } ';
	          } else {
	            out += ' {} ';
	          }
	          var __err = out;
	          out = $$outStack.pop();
	          if (!it.compositeRule && $breakOnError) {
	            /* istanbul ignore if */
	            if (it.async) {
	              out += ' throw new ValidationError([' + __err + ']); ';
	            } else {
	              out += ' validate.errors = [' + __err + ']; return false; ';
	            }
	          } else {
	            out += ' var err = ' + __err + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
	          }
	          out += ' } ';
	          if ($breakOnError) {
	            out += ' else { ';
	          }
	        } else {
	          if ($breakOnError) {
	            out += ' if (true) { ';
	          }
	        }
	        return out;
	      };
	    }, {}], 36: [function (require, module, exports) {
	      'use strict';
	
	      module.exports = function generate_validate(it, $keyword) {
	        var out = '';
	        var $async = it.schema.$async === true;
	        if (it.isTop) {
	          var $top = it.isTop,
	              $lvl = it.level = 0,
	              $dataLvl = it.dataLevel = 0,
	              $data = 'data';
	          it.rootId = it.resolve.fullPath(it.root.schema.id);
	          it.baseId = it.baseId || it.rootId;
	          if ($async) {
	            it.async = true;
	            var $es7 = it.opts.async == 'es7';
	            it.yieldAwait = $es7 ? 'await' : 'yield';
	          }
	          delete it.isTop;
	          it.dataPathArr = [undefined];
	          out += ' var validate = ';
	          if ($async) {
	            if ($es7) {
	              out += ' (async function ';
	            } else {
	              if (it.opts.async == 'co*') {
	                out += 'co.wrap';
	              }
	              out += '(function* ';
	            }
	          } else {
	            out += ' (function ';
	          }
	          out += ' (data, dataPath, parentData, parentDataProperty, rootData) { \'use strict\'; var vErrors = null; ';
	          out += ' var errors = 0;     ';
	          out += ' if (rootData === undefined) rootData = data;';
	        } else {
	          var $lvl = it.level,
	              $dataLvl = it.dataLevel,
	              $data = 'data' + ($dataLvl || '');
	          if (it.schema.id) it.baseId = it.resolve.url(it.baseId, it.schema.id);
	          if ($async && !it.async) throw new Error('async schema in sync schema');
	          out += ' var errs_' + $lvl + ' = errors;';
	        }
	        var $valid = 'valid' + $lvl,
	            $breakOnError = !it.opts.allErrors,
	            $closingBraces1 = '',
	            $closingBraces2 = '';
	        var $typeSchema = it.schema.type,
	            $typeIsArray = Array.isArray($typeSchema);
	        if ($typeSchema && it.opts.coerceTypes) {
	          var $coerceToTypes = it.util.coerceToTypes(it.opts.coerceTypes, $typeSchema);
	          if ($coerceToTypes) {
	            var $schemaPath = it.schemaPath + '.type',
	                $errSchemaPath = it.errSchemaPath + '/type',
	                $method = $typeIsArray ? 'checkDataTypes' : 'checkDataType';
	            out += ' if (' + it.util[$method]($typeSchema, $data, true) + ') {  ';
	            var $dataType = 'dataType' + $lvl,
	                $coerced = 'coerced' + $lvl;
	            out += ' var ' + $dataType + ' = typeof ' + $data + '; ';
	            if (it.opts.coerceTypes == 'array') {
	              out += ' if (' + $dataType + ' == \'object\' && Array.isArray(' + $data + ')) ' + $dataType + ' = \'array\'; ';
	            }
	            out += ' var ' + $coerced + ' = undefined; ';
	            var $bracesCoercion = '';
	            var arr1 = $coerceToTypes;
	            if (arr1) {
	              var $type,
	                  $i = -1,
	                  l1 = arr1.length - 1;
	              while ($i < l1) {
	                $type = arr1[$i += 1];
	                if ($i) {
	                  out += ' if (' + $coerced + ' === undefined) { ';
	                  $bracesCoercion += '}';
	                }
	                if (it.opts.coerceTypes == 'array' && $type != 'array') {
	                  out += ' if (' + $dataType + ' == \'array\' && ' + $data + '.length == 1) { ' + $coerced + ' = ' + $data + ' = ' + $data + '[0]; ' + $dataType + ' = typeof ' + $data + ';  } ';
	                }
	                if ($type == 'string') {
	                  out += ' if (' + $dataType + ' == \'number\' || ' + $dataType + ' == \'boolean\') ' + $coerced + ' = \'\' + ' + $data + '; else if (' + $data + ' === null) ' + $coerced + ' = \'\'; ';
	                } else if ($type == 'number' || $type == 'integer') {
	                  out += ' if (' + $dataType + ' == \'boolean\' || ' + $data + ' === null || (' + $dataType + ' == \'string\' && ' + $data + ' && ' + $data + ' == +' + $data + ' ';
	                  if ($type == 'integer') {
	                    out += ' && !(' + $data + ' % 1)';
	                  }
	                  out += ')) ' + $coerced + ' = +' + $data + '; ';
	                } else if ($type == 'boolean') {
	                  out += ' if (' + $data + ' === \'false\' || ' + $data + ' === 0 || ' + $data + ' === null) ' + $coerced + ' = false; else if (' + $data + ' === \'true\' || ' + $data + ' === 1) ' + $coerced + ' = true; ';
	                } else if ($type == 'null') {
	                  out += ' if (' + $data + ' === \'\' || ' + $data + ' === 0 || ' + $data + ' === false) ' + $coerced + ' = null; ';
	                } else if (it.opts.coerceTypes == 'array' && $type == 'array') {
	                  out += ' if (' + $dataType + ' == \'string\' || ' + $dataType + ' == \'number\' || ' + $dataType + ' == \'boolean\' || ' + $data + ' == null) ' + $coerced + ' = [' + $data + ']; ';
	                }
	              }
	            }
	            out += ' ' + $bracesCoercion + ' if (' + $coerced + ' === undefined) {   ';
	            var $$outStack = $$outStack || [];
	            $$outStack.push(out);
	            out = ''; /* istanbul ignore else */
	            if (it.createErrors !== false) {
	              out += ' { keyword: \'' + 'type' + '\' , dataPath: (dataPath || \'\') + ' + it.errorPath + ' , schemaPath: ' + it.util.toQuotedString($errSchemaPath) + ' , params: { type: \'';
	              if ($typeIsArray) {
	                out += '' + $typeSchema.join(",");
	              } else {
	                out += '' + $typeSchema;
	              }
	              out += '\' } ';
	              if (it.opts.messages !== false) {
	                out += ' , message: \'should be ';
	                if ($typeIsArray) {
	                  out += '' + $typeSchema.join(",");
	                } else {
	                  out += '' + $typeSchema;
	                }
	                out += '\' ';
	              }
	              if (it.opts.verbose) {
	                out += ' , schema: validate.schema' + $schemaPath + ' , parentSchema: validate.schema' + it.schemaPath + ' , data: ' + $data + ' ';
	              }
	              out += ' } ';
	            } else {
	              out += ' {} ';
	            }
	            var __err = out;
	            out = $$outStack.pop();
	            if (!it.compositeRule && $breakOnError) {
	              /* istanbul ignore if */
	              if (it.async) {
	                out += ' throw new ValidationError([' + __err + ']); ';
	              } else {
	                out += ' validate.errors = [' + __err + ']; return false; ';
	              }
	            } else {
	              out += ' var err = ' + __err + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
	            }
	            out += ' } else {  ';
	            var $parentData = $dataLvl ? 'data' + ($dataLvl - 1 || '') : 'parentData',
	                $parentDataProperty = $dataLvl ? it.dataPathArr[$dataLvl] : 'parentDataProperty';
	            out += ' ' + $data + ' = ' + $coerced + '; ';
	            if (!$dataLvl) {
	              out += 'if (' + $parentData + ' !== undefined)';
	            }
	            out += ' ' + $parentData + '[' + $parentDataProperty + '] = ' + $coerced + '; } } ';
	          }
	        }
	        var $refKeywords;
	        if (it.schema.$ref && ($refKeywords = it.util.schemaHasRulesExcept(it.schema, it.RULES.all, '$ref'))) {
	          if (it.opts.extendRefs == 'fail') {
	            throw new Error('$ref: validation keywords used in schema at path "' + it.errSchemaPath + '"');
	          } else if (it.opts.extendRefs == 'ignore') {
	            $refKeywords = false;
	            console.log('$ref: keywords ignored in schema at path "' + it.errSchemaPath + '"');
	          } else if (it.opts.extendRefs !== true) {
	            console.log('$ref: all keywords used in schema at path "' + it.errSchemaPath + '". It will change in the next major version, see issue #260. Use option { extendRefs: true } to keep current behaviour');
	          }
	        }
	        if (it.schema.$ref && !$refKeywords) {
	          out += ' ' + it.RULES.all.$ref.code(it, '$ref') + ' ';
	          if ($breakOnError) {
	            out += ' } if (errors === ';
	            if ($top) {
	              out += '0';
	            } else {
	              out += 'errs_' + $lvl;
	            }
	            out += ') { ';
	            $closingBraces2 += '}';
	          }
	        } else {
	          var arr2 = it.RULES;
	          if (arr2) {
	            var $rulesGroup,
	                i2 = -1,
	                l2 = arr2.length - 1;
	            while (i2 < l2) {
	              $rulesGroup = arr2[i2 += 1];
	              if ($shouldUseGroup($rulesGroup)) {
	                if ($rulesGroup.type) {
	                  out += ' if (' + it.util.checkDataType($rulesGroup.type, $data) + ') { ';
	                }
	                if (it.opts.useDefaults && !it.compositeRule) {
	                  if ($rulesGroup.type == 'object' && it.schema.properties) {
	                    var $schema = it.schema.properties,
	                        $schemaKeys = Object.keys($schema);
	                    var arr3 = $schemaKeys;
	                    if (arr3) {
	                      var $propertyKey,
	                          i3 = -1,
	                          l3 = arr3.length - 1;
	                      while (i3 < l3) {
	                        $propertyKey = arr3[i3 += 1];
	                        var $sch = $schema[$propertyKey];
	                        if ($sch.default !== undefined) {
	                          var $passData = $data + it.util.getProperty($propertyKey);
	                          out += '  if (' + $passData + ' === undefined) ' + $passData + ' = ';
	                          if (it.opts.useDefaults == 'shared') {
	                            out += ' ' + it.useDefault($sch.default) + ' ';
	                          } else {
	                            out += ' ' + JSON.stringify($sch.default) + ' ';
	                          }
	                          out += '; ';
	                        }
	                      }
	                    }
	                  } else if ($rulesGroup.type == 'array' && Array.isArray(it.schema.items)) {
	                    var arr4 = it.schema.items;
	                    if (arr4) {
	                      var $sch,
	                          $i = -1,
	                          l4 = arr4.length - 1;
	                      while ($i < l4) {
	                        $sch = arr4[$i += 1];
	                        if ($sch.default !== undefined) {
	                          var $passData = $data + '[' + $i + ']';
	                          out += '  if (' + $passData + ' === undefined) ' + $passData + ' = ';
	                          if (it.opts.useDefaults == 'shared') {
	                            out += ' ' + it.useDefault($sch.default) + ' ';
	                          } else {
	                            out += ' ' + JSON.stringify($sch.default) + ' ';
	                          }
	                          out += '; ';
	                        }
	                      }
	                    }
	                  }
	                }
	                var arr5 = $rulesGroup.rules;
	                if (arr5) {
	                  var $rule,
	                      i5 = -1,
	                      l5 = arr5.length - 1;
	                  while (i5 < l5) {
	                    $rule = arr5[i5 += 1];
	                    if ($shouldUseRule($rule)) {
	                      out += ' ' + $rule.code(it, $rule.keyword) + ' ';
	                      if ($breakOnError) {
	                        $closingBraces1 += '}';
	                      }
	                    }
	                  }
	                }
	                if ($breakOnError) {
	                  out += ' ' + $closingBraces1 + ' ';
	                  $closingBraces1 = '';
	                }
	                if ($rulesGroup.type) {
	                  out += ' } ';
	                  if ($typeSchema && $typeSchema === $rulesGroup.type && !$coerceToTypes) {
	                    var $typeChecked = true;
	                    out += ' else { ';
	                    var $schemaPath = it.schemaPath + '.type',
	                        $errSchemaPath = it.errSchemaPath + '/type';
	                    var $$outStack = $$outStack || [];
	                    $$outStack.push(out);
	                    out = ''; /* istanbul ignore else */
	                    if (it.createErrors !== false) {
	                      out += ' { keyword: \'' + 'type' + '\' , dataPath: (dataPath || \'\') + ' + it.errorPath + ' , schemaPath: ' + it.util.toQuotedString($errSchemaPath) + ' , params: { type: \'';
	                      if ($typeIsArray) {
	                        out += '' + $typeSchema.join(",");
	                      } else {
	                        out += '' + $typeSchema;
	                      }
	                      out += '\' } ';
	                      if (it.opts.messages !== false) {
	                        out += ' , message: \'should be ';
	                        if ($typeIsArray) {
	                          out += '' + $typeSchema.join(",");
	                        } else {
	                          out += '' + $typeSchema;
	                        }
	                        out += '\' ';
	                      }
	                      if (it.opts.verbose) {
	                        out += ' , schema: validate.schema' + $schemaPath + ' , parentSchema: validate.schema' + it.schemaPath + ' , data: ' + $data + ' ';
	                      }
	                      out += ' } ';
	                    } else {
	                      out += ' {} ';
	                    }
	                    var __err = out;
	                    out = $$outStack.pop();
	                    if (!it.compositeRule && $breakOnError) {
	                      /* istanbul ignore if */
	                      if (it.async) {
	                        out += ' throw new ValidationError([' + __err + ']); ';
	                      } else {
	                        out += ' validate.errors = [' + __err + ']; return false; ';
	                      }
	                    } else {
	                      out += ' var err = ' + __err + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
	                    }
	                    out += ' } ';
	                  }
	                }
	                if ($breakOnError) {
	                  out += ' if (errors === ';
	                  if ($top) {
	                    out += '0';
	                  } else {
	                    out += 'errs_' + $lvl;
	                  }
	                  out += ') { ';
	                  $closingBraces2 += '}';
	                }
	              }
	            }
	          }
	        }
	        if ($typeSchema && !$typeChecked && !$coerceToTypes) {
	          var $schemaPath = it.schemaPath + '.type',
	              $errSchemaPath = it.errSchemaPath + '/type',
	              $method = $typeIsArray ? 'checkDataTypes' : 'checkDataType';
	          out += ' if (' + it.util[$method]($typeSchema, $data, true) + ') {   ';
	          var $$outStack = $$outStack || [];
	          $$outStack.push(out);
	          out = ''; /* istanbul ignore else */
	          if (it.createErrors !== false) {
	            out += ' { keyword: \'' + 'type' + '\' , dataPath: (dataPath || \'\') + ' + it.errorPath + ' , schemaPath: ' + it.util.toQuotedString($errSchemaPath) + ' , params: { type: \'';
	            if ($typeIsArray) {
	              out += '' + $typeSchema.join(",");
	            } else {
	              out += '' + $typeSchema;
	            }
	            out += '\' } ';
	            if (it.opts.messages !== false) {
	              out += ' , message: \'should be ';
	              if ($typeIsArray) {
	                out += '' + $typeSchema.join(",");
	              } else {
	                out += '' + $typeSchema;
	              }
	              out += '\' ';
	            }
	            if (it.opts.verbose) {
	              out += ' , schema: validate.schema' + $schemaPath + ' , parentSchema: validate.schema' + it.schemaPath + ' , data: ' + $data + ' ';
	            }
	            out += ' } ';
	          } else {
	            out += ' {} ';
	          }
	          var __err = out;
	          out = $$outStack.pop();
	          if (!it.compositeRule && $breakOnError) {
	            /* istanbul ignore if */
	            if (it.async) {
	              out += ' throw new ValidationError([' + __err + ']); ';
	            } else {
	              out += ' validate.errors = [' + __err + ']; return false; ';
	            }
	          } else {
	            out += ' var err = ' + __err + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
	          }
	          out += ' }';
	        }
	        if ($breakOnError) {
	          out += ' ' + $closingBraces2 + ' ';
	        }
	        if ($top) {
	          if ($async) {
	            out += ' if (errors === 0) return true;           ';
	            out += ' else throw new ValidationError(vErrors); ';
	          } else {
	            out += ' validate.errors = vErrors; ';
	            out += ' return errors === 0;       ';
	          }
	          out += ' }); return validate;';
	        } else {
	          out += ' var ' + $valid + ' = errors === errs_' + $lvl + ';';
	        }
	        out = it.util.cleanUpCode(out);
	        if ($top && $breakOnError) {
	          out = it.util.cleanUpVarErrors(out, $async);
	        }
	
	        function $shouldUseGroup($rulesGroup) {
	          for (var i = 0; i < $rulesGroup.rules.length; i++) {
	            if ($shouldUseRule($rulesGroup.rules[i])) return true;
	          }
	        }
	
	        function $shouldUseRule($rule) {
	          return it.schema[$rule.keyword] !== undefined || $rule.keyword == 'properties' && (it.schema.additionalProperties === false || _typeof(it.schema.additionalProperties) == 'object' || it.schema.patternProperties && Object.keys(it.schema.patternProperties).length || it.opts.v5 && it.schema.patternGroups && Object.keys(it.schema.patternGroups).length);
	        }
	        return out;
	      };
	    }, {}], 37: [function (require, module, exports) {
	      'use strict';
	
	      var IDENTIFIER = /^[a-z_$][a-z0-9_$\-]*$/i;
	      var customRuleCode = require('./dotjs/custom');
	
	      module.exports = {
	        add: addKeyword,
	        get: getKeyword,
	        remove: removeKeyword
	      };
	
	      /**
	       * Define custom keyword
	       * @this  Ajv
	       * @param {String} keyword custom keyword, should be unique (including different from all standard, custom and macro keywords).
	       * @param {Object} definition keyword definition object with properties `type` (type(s) which the keyword applies to), `validate` or `compile`.
	       */
	      function addKeyword(keyword, definition) {
	        /* jshint validthis: true */
	        /* eslint no-shadow: 0 */
	        var RULES = this.RULES;
	
	        if (RULES.keywords[keyword]) throw new Error('Keyword ' + keyword + ' is already defined');
	
	        if (!IDENTIFIER.test(keyword)) throw new Error('Keyword ' + keyword + ' is not a valid identifier');
	
	        if (definition) {
	          if (definition.macro && definition.valid !== undefined) throw new Error('"valid" option cannot be used with macro keywords');
	
	          var dataType = definition.type;
	          if (Array.isArray(dataType)) {
	            var i,
	                len = dataType.length;
	            for (i = 0; i < len; i++) {
	              checkDataType(dataType[i]);
	            }for (i = 0; i < len; i++) {
	              _addRule(keyword, dataType[i], definition);
	            }
	          } else {
	            if (dataType) checkDataType(dataType);
	            _addRule(keyword, dataType, definition);
	          }
	
	          var $data = definition.$data === true && this._opts.v5;
	          if ($data && !definition.validate) throw new Error('$data support: "validate" function is not defined');
	
	          var metaSchema = definition.metaSchema;
	          if (metaSchema) {
	            if ($data) {
	              metaSchema = {
	                anyOf: [metaSchema, { '$ref': 'https://raw.githubusercontent.com/epoberezkin/ajv/master/lib/refs/json-schema-v5.json#/definitions/$data' }]
	              };
	            }
	            definition.validateSchema = this.compile(metaSchema, true);
	          }
	        }
	
	        RULES.keywords[keyword] = RULES.all[keyword] = true;
	
	        function _addRule(keyword, dataType, definition) {
	          var ruleGroup;
	          for (var i = 0; i < RULES.length; i++) {
	            var rg = RULES[i];
	            if (rg.type == dataType) {
	              ruleGroup = rg;
	              break;
	            }
	          }
	
	          if (!ruleGroup) {
	            ruleGroup = { type: dataType, rules: [] };
	            RULES.push(ruleGroup);
	          }
	
	          var rule = {
	            keyword: keyword,
	            definition: definition,
	            custom: true,
	            code: customRuleCode
	          };
	          ruleGroup.rules.push(rule);
	          RULES.custom[keyword] = rule;
	        }
	
	        function checkDataType(dataType) {
	          if (!RULES.types[dataType]) throw new Error('Unknown type ' + dataType);
	        }
	      }
	
	      /**
	       * Get keyword
	       * @this  Ajv
	       * @param {String} keyword pre-defined or custom keyword.
	       * @return {Object|Boolean} custom keyword definition, `true` if it is a predefined keyword, `false` otherwise.
	       */
	      function getKeyword(keyword) {
	        /* jshint validthis: true */
	        var rule = this.RULES.custom[keyword];
	        return rule ? rule.definition : this.RULES.keywords[keyword] || false;
	      }
	
	      /**
	       * Remove keyword
	       * @this  Ajv
	       * @param {String} keyword pre-defined or custom keyword.
	       */
	      function removeKeyword(keyword) {
	        /* jshint validthis: true */
	        var RULES = this.RULES;
	        delete RULES.keywords[keyword];
	        delete RULES.all[keyword];
	        delete RULES.custom[keyword];
	        for (var i = 0; i < RULES.length; i++) {
	          var rules = RULES[i].rules;
	          for (var j = 0; j < rules.length; j++) {
	            if (rules[j].keyword == keyword) {
	              rules.splice(j, 1);
	              break;
	            }
	          }
	        }
	      }
	    }, { "./dotjs/custom": 21 }], 38: [function (require, module, exports) {
	      module.exports = {
	        "id": "http://json-schema.org/draft-04/schema#",
	        "$schema": "http://json-schema.org/draft-04/schema#",
	        "description": "Core schema meta-schema",
	        "definitions": {
	          "schemaArray": {
	            "type": "array",
	            "minItems": 1,
	            "items": { "$ref": "#" }
	          },
	          "positiveInteger": {
	            "type": "integer",
	            "minimum": 0
	          },
	          "positiveIntegerDefault0": {
	            "allOf": [{ "$ref": "#/definitions/positiveInteger" }, { "default": 0 }]
	          },
	          "simpleTypes": {
	            "enum": ["array", "boolean", "integer", "null", "number", "object", "string"]
	          },
	          "stringArray": {
	            "type": "array",
	            "items": { "type": "string" },
	            "minItems": 1,
	            "uniqueItems": true
	          }
	        },
	        "type": "object",
	        "properties": {
	          "id": {
	            "type": "string",
	            "format": "uri"
	          },
	          "$schema": {
	            "type": "string",
	            "format": "uri"
	          },
	          "title": {
	            "type": "string"
	          },
	          "description": {
	            "type": "string"
	          },
	          "default": {},
	          "multipleOf": {
	            "type": "number",
	            "minimum": 0,
	            "exclusiveMinimum": true
	          },
	          "maximum": {
	            "type": "number"
	          },
	          "exclusiveMaximum": {
	            "type": "boolean",
	            "default": false
	          },
	          "minimum": {
	            "type": "number"
	          },
	          "exclusiveMinimum": {
	            "type": "boolean",
	            "default": false
	          },
	          "maxLength": { "$ref": "#/definitions/positiveInteger" },
	          "minLength": { "$ref": "#/definitions/positiveIntegerDefault0" },
	          "pattern": {
	            "type": "string",
	            "format": "regex"
	          },
	          "additionalItems": {
	            "anyOf": [{ "type": "boolean" }, { "$ref": "#" }],
	            "default": {}
	          },
	          "items": {
	            "anyOf": [{ "$ref": "#" }, { "$ref": "#/definitions/schemaArray" }],
	            "default": {}
	          },
	          "maxItems": { "$ref": "#/definitions/positiveInteger" },
	          "minItems": { "$ref": "#/definitions/positiveIntegerDefault0" },
	          "uniqueItems": {
	            "type": "boolean",
	            "default": false
	          },
	          "maxProperties": { "$ref": "#/definitions/positiveInteger" },
	          "minProperties": { "$ref": "#/definitions/positiveIntegerDefault0" },
	          "required": { "$ref": "#/definitions/stringArray" },
	          "additionalProperties": {
	            "anyOf": [{ "type": "boolean" }, { "$ref": "#" }],
	            "default": {}
	          },
	          "definitions": {
	            "type": "object",
	            "additionalProperties": { "$ref": "#" },
	            "default": {}
	          },
	          "properties": {
	            "type": "object",
	            "additionalProperties": { "$ref": "#" },
	            "default": {}
	          },
	          "patternProperties": {
	            "type": "object",
	            "additionalProperties": { "$ref": "#" },
	            "default": {}
	          },
	          "dependencies": {
	            "type": "object",
	            "additionalProperties": {
	              "anyOf": [{ "$ref": "#" }, { "$ref": "#/definitions/stringArray" }]
	            }
	          },
	          "enum": {
	            "type": "array",
	            "minItems": 1,
	            "uniqueItems": true
	          },
	          "type": {
	            "anyOf": [{ "$ref": "#/definitions/simpleTypes" }, {
	              "type": "array",
	              "items": { "$ref": "#/definitions/simpleTypes" },
	              "minItems": 1,
	              "uniqueItems": true
	            }]
	          },
	          "allOf": { "$ref": "#/definitions/schemaArray" },
	          "anyOf": { "$ref": "#/definitions/schemaArray" },
	          "oneOf": { "$ref": "#/definitions/schemaArray" },
	          "not": { "$ref": "#" }
	        },
	        "dependencies": {
	          "exclusiveMaximum": ["maximum"],
	          "exclusiveMinimum": ["minimum"]
	        },
	        "default": {}
	      };
	    }, {}], 39: [function (require, module, exports) {
	      module.exports = {
	        "id": "https://raw.githubusercontent.com/epoberezkin/ajv/master/lib/refs/json-schema-v5.json#",
	        "$schema": "http://json-schema.org/draft-04/schema#",
	        "description": "Core schema meta-schema (v5 proposals)",
	        "definitions": {
	          "schemaArray": {
	            "type": "array",
	            "minItems": 1,
	            "items": { "$ref": "#" }
	          },
	          "positiveInteger": {
	            "type": "integer",
	            "minimum": 0
	          },
	          "positiveIntegerDefault0": {
	            "allOf": [{ "$ref": "#/definitions/positiveInteger" }, { "default": 0 }]
	          },
	          "simpleTypes": {
	            "enum": ["array", "boolean", "integer", "null", "number", "object", "string"]
	          },
	          "stringArray": {
	            "type": "array",
	            "items": { "type": "string" },
	            "minItems": 1,
	            "uniqueItems": true
	          },
	          "$data": {
	            "type": "object",
	            "required": ["$data"],
	            "properties": {
	              "$data": {
	                "type": "string",
	                "anyOf": [{ "format": "relative-json-pointer" }, { "format": "json-pointer" }]
	              }
	            },
	            "additionalProperties": false
	          }
	        },
	        "type": "object",
	        "properties": {
	          "id": {
	            "type": "string",
	            "format": "uri"
	          },
	          "$schema": {
	            "type": "string",
	            "format": "uri"
	          },
	          "title": {
	            "type": "string"
	          },
	          "description": {
	            "type": "string"
	          },
	          "default": {},
	          "multipleOf": {
	            "anyOf": [{
	              "type": "number",
	              "minimum": 0,
	              "exclusiveMinimum": true
	            }, { "$ref": "#/definitions/$data" }]
	          },
	          "maximum": {
	            "anyOf": [{ "type": "number" }, { "$ref": "#/definitions/$data" }]
	          },
	          "exclusiveMaximum": {
	            "anyOf": [{
	              "type": "boolean",
	              "default": false
	            }, { "$ref": "#/definitions/$data" }]
	          },
	          "minimum": {
	            "anyOf": [{ "type": "number" }, { "$ref": "#/definitions/$data" }]
	          },
	          "exclusiveMinimum": {
	            "anyOf": [{
	              "type": "boolean",
	              "default": false
	            }, { "$ref": "#/definitions/$data" }]
	          },
	          "maxLength": {
	            "anyOf": [{ "$ref": "#/definitions/positiveInteger" }, { "$ref": "#/definitions/$data" }]
	          },
	          "minLength": {
	            "anyOf": [{ "$ref": "#/definitions/positiveIntegerDefault0" }, { "$ref": "#/definitions/$data" }]
	          },
	          "pattern": {
	            "anyOf": [{
	              "type": "string",
	              "format": "regex"
	            }, { "$ref": "#/definitions/$data" }]
	          },
	          "additionalItems": {
	            "anyOf": [{ "type": "boolean" }, { "$ref": "#" }, { "$ref": "#/definitions/$data" }],
	            "default": {}
	          },
	          "items": {
	            "anyOf": [{ "$ref": "#" }, { "$ref": "#/definitions/schemaArray" }],
	            "default": {}
	          },
	          "maxItems": {
	            "anyOf": [{ "$ref": "#/definitions/positiveInteger" }, { "$ref": "#/definitions/$data" }]
	          },
	          "minItems": {
	            "anyOf": [{ "$ref": "#/definitions/positiveIntegerDefault0" }, { "$ref": "#/definitions/$data" }]
	          },
	          "uniqueItems": {
	            "anyOf": [{
	              "type": "boolean",
	              "default": false
	            }, { "$ref": "#/definitions/$data" }]
	          },
	          "maxProperties": {
	            "anyOf": [{ "$ref": "#/definitions/positiveInteger" }, { "$ref": "#/definitions/$data" }]
	          },
	          "minProperties": {
	            "anyOf": [{ "$ref": "#/definitions/positiveIntegerDefault0" }, { "$ref": "#/definitions/$data" }]
	          },
	          "required": {
	            "anyOf": [{ "$ref": "#/definitions/stringArray" }, { "$ref": "#/definitions/$data" }]
	          },
	          "additionalProperties": {
	            "anyOf": [{ "type": "boolean" }, { "$ref": "#" }, { "$ref": "#/definitions/$data" }],
	            "default": {}
	          },
	          "definitions": {
	            "type": "object",
	            "additionalProperties": { "$ref": "#" },
	            "default": {}
	          },
	          "properties": {
	            "type": "object",
	            "additionalProperties": { "$ref": "#" },
	            "default": {}
	          },
	          "patternProperties": {
	            "type": "object",
	            "additionalProperties": { "$ref": "#" },
	            "default": {}
	          },
	          "dependencies": {
	            "type": "object",
	            "additionalProperties": {
	              "anyOf": [{ "$ref": "#" }, { "$ref": "#/definitions/stringArray" }]
	            }
	          },
	          "enum": {
	            "anyOf": [{
	              "type": "array",
	              "minItems": 1,
	              "uniqueItems": true
	            }, { "$ref": "#/definitions/$data" }]
	          },
	          "type": {
	            "anyOf": [{ "$ref": "#/definitions/simpleTypes" }, {
	              "type": "array",
	              "items": { "$ref": "#/definitions/simpleTypes" },
	              "minItems": 1,
	              "uniqueItems": true
	            }]
	          },
	          "allOf": { "$ref": "#/definitions/schemaArray" },
	          "anyOf": { "$ref": "#/definitions/schemaArray" },
	          "oneOf": { "$ref": "#/definitions/schemaArray" },
	          "not": { "$ref": "#" },
	          "format": {
	            "anyOf": [{ "type": "string" }, { "$ref": "#/definitions/$data" }]
	          },
	          "formatMaximum": {
	            "anyOf": [{ "type": "string" }, { "$ref": "#/definitions/$data" }]
	          },
	          "formatMinimum": {
	            "anyOf": [{ "type": "string" }, { "$ref": "#/definitions/$data" }]
	          },
	          "formatExclusiveMaximum": {
	            "anyOf": [{
	              "type": "boolean",
	              "default": false
	            }, { "$ref": "#/definitions/$data" }]
	          },
	          "formatExclusiveMinimum": {
	            "anyOf": [{
	              "type": "boolean",
	              "default": false
	            }, { "$ref": "#/definitions/$data" }]
	          },
	          "constant": {
	            "anyOf": [{}, { "$ref": "#/definitions/$data" }]
	          },
	          "contains": { "$ref": "#" },
	          "patternGroups": {
	            "type": "object",
	            "additionalProperties": {
	              "type": "object",
	              "required": ["schema"],
	              "properties": {
	                "maximum": {
	                  "anyOf": [{ "$ref": "#/definitions/positiveInteger" }, { "$ref": "#/definitions/$data" }]
	                },
	                "minimum": {
	                  "anyOf": [{ "$ref": "#/definitions/positiveIntegerDefault0" }, { "$ref": "#/definitions/$data" }]
	                },
	                "schema": { "$ref": "#" }
	              },
	              "additionalProperties": false
	            },
	            "default": {}
	          },
	          "switch": {
	            "type": "array",
	            "items": {
	              "required": ["then"],
	              "properties": {
	                "if": { "$ref": "#" },
	                "then": {
	                  "anyOf": [{ "type": "boolean" }, { "$ref": "#" }]
	                },
	                "continue": { "type": "boolean" }
	              },
	              "additionalProperties": false,
	              "dependencies": {
	                "continue": ["if"]
	              }
	            }
	          }
	        },
	        "dependencies": {
	          "exclusiveMaximum": ["maximum"],
	          "exclusiveMinimum": ["minimum"],
	          "formatMaximum": ["format"],
	          "formatMinimum": ["format"],
	          "formatExclusiveMaximum": ["formatMaximum"],
	          "formatExclusiveMinimum": ["formatMinimum"]
	        },
	        "default": {}
	      };
	    }, {}], 40: [function (require, module, exports) {
	      'use strict';
	
	      var META_SCHEMA_ID = 'https://raw.githubusercontent.com/epoberezkin/ajv/master/lib/refs/json-schema-v5.json';
	
	      module.exports = {
	        enable: enableV5,
	        META_SCHEMA_ID: META_SCHEMA_ID
	      };
	
	      function enableV5(ajv) {
	        var inlineFunctions = {
	          'switch': require('./dotjs/switch'),
	          'constant': require('./dotjs/constant'),
	          '_formatLimit': require('./dotjs/_formatLimit'),
	          'patternRequired': require('./dotjs/patternRequired')
	        };
	
	        if (ajv._opts.meta !== false) {
	          var metaSchema = require('./refs/json-schema-v5.json');
	          ajv.addMetaSchema(metaSchema, META_SCHEMA_ID);
	        }
	        _addKeyword('constant');
	        ajv.addKeyword('contains', { type: 'array', macro: containsMacro });
	
	        _addKeyword('formatMaximum', 'string', inlineFunctions._formatLimit);
	        _addKeyword('formatMinimum', 'string', inlineFunctions._formatLimit);
	        ajv.addKeyword('formatExclusiveMaximum');
	        ajv.addKeyword('formatExclusiveMinimum');
	
	        ajv.addKeyword('patternGroups'); // implemented in properties.jst
	        _addKeyword('patternRequired', 'object');
	        _addKeyword('switch');
	
	        function _addKeyword(keyword, types, inlineFunc) {
	          var definition = {
	            inline: inlineFunc || inlineFunctions[keyword],
	            statements: true,
	            errors: 'full'
	          };
	          if (types) definition.type = types;
	          ajv.addKeyword(keyword, definition);
	        }
	      }
	
	      function containsMacro(schema) {
	        return {
	          not: { items: { not: schema } }
	        };
	      }
	    }, { "./dotjs/_formatLimit": 13, "./dotjs/constant": 20, "./dotjs/patternRequired": 30, "./dotjs/switch": 34, "./refs/json-schema-v5.json": 39 }], 41: [function (require, module, exports) {
	
	      /**
	       * slice() reference.
	       */
	
	      var slice = Array.prototype.slice;
	
	      /**
	       * Expose `co`.
	       */
	
	      module.exports = co['default'] = co.co = co;
	
	      /**
	       * Wrap the given generator `fn` into a
	       * function that returns a promise.
	       * This is a separate function so that
	       * every `co()` call doesn't create a new,
	       * unnecessary closure.
	       *
	       * @param {GeneratorFunction} fn
	       * @return {Function}
	       * @api public
	       */
	
	      co.wrap = function (fn) {
	        createPromise.__generatorFunction__ = fn;
	        return createPromise;
	        function createPromise() {
	          return co.call(this, fn.apply(this, arguments));
	        }
	      };
	
	      /**
	       * Execute the generator function or a generator
	       * and return a promise.
	       *
	       * @param {Function} fn
	       * @return {Promise}
	       * @api public
	       */
	
	      function co(gen) {
	        var ctx = this;
	        var args = slice.call(arguments, 1);
	
	        // we wrap everything in a promise to avoid promise chaining,
	        // which leads to memory leak errors.
	        // see https://github.com/tj/co/issues/180
	        return new Promise(function (resolve, reject) {
	          if (typeof gen === 'function') gen = gen.apply(ctx, args);
	          if (!gen || typeof gen.next !== 'function') return resolve(gen);
	
	          onFulfilled();
	
	          /**
	           * @param {Mixed} res
	           * @return {Promise}
	           * @api private
	           */
	
	          function onFulfilled(res) {
	            var ret;
	            try {
	              ret = gen.next(res);
	            } catch (e) {
	              return reject(e);
	            }
	            next(ret);
	          }
	
	          /**
	           * @param {Error} err
	           * @return {Promise}
	           * @api private
	           */
	
	          function onRejected(err) {
	            var ret;
	            try {
	              ret = gen.throw(err);
	            } catch (e) {
	              return reject(e);
	            }
	            next(ret);
	          }
	
	          /**
	           * Get the next value in the generator,
	           * return a promise.
	           *
	           * @param {Object} ret
	           * @return {Promise}
	           * @api private
	           */
	
	          function next(ret) {
	            if (ret.done) return resolve(ret.value);
	            var value = toPromise.call(ctx, ret.value);
	            if (value && isPromise(value)) return value.then(onFulfilled, onRejected);
	            return onRejected(new TypeError('You may only yield a function, promise, generator, array, or object, ' + 'but the following object was passed: "' + String(ret.value) + '"'));
	          }
	        });
	      }
	
	      /**
	       * Convert a `yield`ed value into a promise.
	       *
	       * @param {Mixed} obj
	       * @return {Promise}
	       * @api private
	       */
	
	      function toPromise(obj) {
	        if (!obj) return obj;
	        if (isPromise(obj)) return obj;
	        if (isGeneratorFunction(obj) || isGenerator(obj)) return co.call(this, obj);
	        if ('function' == typeof obj) return thunkToPromise.call(this, obj);
	        if (Array.isArray(obj)) return arrayToPromise.call(this, obj);
	        if (isObject(obj)) return objectToPromise.call(this, obj);
	        return obj;
	      }
	
	      /**
	       * Convert a thunk to a promise.
	       *
	       * @param {Function}
	       * @return {Promise}
	       * @api private
	       */
	
	      function thunkToPromise(fn) {
	        var ctx = this;
	        return new Promise(function (resolve, reject) {
	          fn.call(ctx, function (err, res) {
	            if (err) return reject(err);
	            if (arguments.length > 2) res = slice.call(arguments, 1);
	            resolve(res);
	          });
	        });
	      }
	
	      /**
	       * Convert an array of "yieldables" to a promise.
	       * Uses `Promise.all()` internally.
	       *
	       * @param {Array} obj
	       * @return {Promise}
	       * @api private
	       */
	
	      function arrayToPromise(obj) {
	        return Promise.all(obj.map(toPromise, this));
	      }
	
	      /**
	       * Convert an object of "yieldables" to a promise.
	       * Uses `Promise.all()` internally.
	       *
	       * @param {Object} obj
	       * @return {Promise}
	       * @api private
	       */
	
	      function objectToPromise(obj) {
	        var results = new obj.constructor();
	        var keys = Object.keys(obj);
	        var promises = [];
	        for (var i = 0; i < keys.length; i++) {
	          var key = keys[i];
	          var promise = toPromise.call(this, obj[key]);
	          if (promise && isPromise(promise)) defer(promise, key);else results[key] = obj[key];
	        }
	        return Promise.all(promises).then(function () {
	          return results;
	        });
	
	        function defer(promise, key) {
	          // predefine the key in the result
	          results[key] = undefined;
	          promises.push(promise.then(function (res) {
	            results[key] = res;
	          }));
	        }
	      }
	
	      /**
	       * Check if `obj` is a promise.
	       *
	       * @param {Object} obj
	       * @return {Boolean}
	       * @api private
	       */
	
	      function isPromise(obj) {
	        return 'function' == typeof obj.then;
	      }
	
	      /**
	       * Check if `obj` is a generator.
	       *
	       * @param {Mixed} obj
	       * @return {Boolean}
	       * @api private
	       */
	
	      function isGenerator(obj) {
	        return 'function' == typeof obj.next && 'function' == typeof obj.throw;
	      }
	
	      /**
	       * Check if `obj` is a generator function.
	       *
	       * @param {Mixed} obj
	       * @return {Boolean}
	       * @api private
	       */
	      function isGeneratorFunction(obj) {
	        var constructor = obj.constructor;
	        if (!constructor) return false;
	        if ('GeneratorFunction' === constructor.name || 'GeneratorFunction' === constructor.displayName) return true;
	        return isGenerator(constructor.prototype);
	      }
	
	      /**
	       * Check for plain object.
	       *
	       * @param {Mixed} val
	       * @return {Boolean}
	       * @api private
	       */
	
	      function isObject(val) {
	        return Object == val.constructor;
	      }
	    }, {}], 42: [function (require, module, exports) {
	      var json = typeof JSON !== 'undefined' ? JSON : require('jsonify');
	
	      module.exports = function (obj, opts) {
	        if (!opts) opts = {};
	        if (typeof opts === 'function') opts = { cmp: opts };
	        var space = opts.space || '';
	        if (typeof space === 'number') space = Array(space + 1).join(' ');
	        var cycles = typeof opts.cycles === 'boolean' ? opts.cycles : false;
	        var replacer = opts.replacer || function (key, value) {
	          return value;
	        };
	
	        var cmp = opts.cmp && function (f) {
	          return function (node) {
	            return function (a, b) {
	              var aobj = { key: a, value: node[a] };
	              var bobj = { key: b, value: node[b] };
	              return f(aobj, bobj);
	            };
	          };
	        }(opts.cmp);
	
	        var seen = [];
	        return function stringify(parent, key, node, level) {
	          var indent = space ? '\n' + new Array(level + 1).join(space) : '';
	          var colonSeparator = space ? ': ' : ':';
	
	          if (node && node.toJSON && typeof node.toJSON === 'function') {
	            node = node.toJSON();
	          }
	
	          node = replacer.call(parent, key, node);
	
	          if (node === undefined) {
	            return;
	          }
	          if ((typeof node === "undefined" ? "undefined" : _typeof(node)) !== 'object' || node === null) {
	            return json.stringify(node);
	          }
	          if (isArray(node)) {
	            var out = [];
	            for (var i = 0; i < node.length; i++) {
	              var item = stringify(node, i, node[i], level + 1) || json.stringify(null);
	              out.push(indent + space + item);
	            }
	            return '[' + out.join(',') + indent + ']';
	          } else {
	            if (seen.indexOf(node) !== -1) {
	              if (cycles) return json.stringify('__cycle__');
	              throw new TypeError('Converting circular structure to JSON');
	            } else seen.push(node);
	
	            var keys = objectKeys(node).sort(cmp && cmp(node));
	            var out = [];
	            for (var i = 0; i < keys.length; i++) {
	              var key = keys[i];
	              var value = stringify(node, key, node[key], level + 1);
	
	              if (!value) continue;
	
	              var keyValue = json.stringify(key) + colonSeparator + value;
	              ;
	              out.push(indent + space + keyValue);
	            }
	            seen.splice(seen.indexOf(node), 1);
	            return '{' + out.join(',') + indent + '}';
	          }
	        }({ '': obj }, '', obj, 0);
	      };
	
	      var isArray = Array.isArray || function (x) {
	        return {}.toString.call(x) === '[object Array]';
	      };
	
	      var objectKeys = Object.keys || function (obj) {
	        var has = Object.prototype.hasOwnProperty || function () {
	          return true;
	        };
	        var keys = [];
	        for (var key in obj) {
	          if (has.call(obj, key)) keys.push(key);
	        }
	        return keys;
	      };
	    }, { "jsonify": 43 }], 43: [function (require, module, exports) {
	      exports.parse = require('./lib/parse');
	      exports.stringify = require('./lib/stringify');
	    }, { "./lib/parse": 44, "./lib/stringify": 45 }], 44: [function (require, module, exports) {
	      var at,
	          // The index of the current character
	      ch,
	          // The current character
	      escapee = {
	        '"': '"',
	        '\\': '\\',
	        '/': '/',
	        b: '\b',
	        f: '\f',
	        n: '\n',
	        r: '\r',
	        t: '\t'
	      },
	          text,
	          error = function error(m) {
	        // Call error when something is wrong.
	        throw {
	          name: 'SyntaxError',
	          message: m,
	          at: at,
	          text: text
	        };
	      },
	          next = function next(c) {
	        // If a c parameter is provided, verify that it matches the current character.
	        if (c && c !== ch) {
	          error("Expected '" + c + "' instead of '" + ch + "'");
	        }
	
	        // Get the next character. When there are no more characters,
	        // return the empty string.
	
	        ch = text.charAt(at);
	        at += 1;
	        return ch;
	      },
	          number = function number() {
	        // Parse a number value.
	        var number,
	            string = '';
	
	        if (ch === '-') {
	          string = '-';
	          next('-');
	        }
	        while (ch >= '0' && ch <= '9') {
	          string += ch;
	          next();
	        }
	        if (ch === '.') {
	          string += '.';
	          while (next() && ch >= '0' && ch <= '9') {
	            string += ch;
	          }
	        }
	        if (ch === 'e' || ch === 'E') {
	          string += ch;
	          next();
	          if (ch === '-' || ch === '+') {
	            string += ch;
	            next();
	          }
	          while (ch >= '0' && ch <= '9') {
	            string += ch;
	            next();
	          }
	        }
	        number = +string;
	        if (!isFinite(number)) {
	          error("Bad number");
	        } else {
	          return number;
	        }
	      },
	          string = function string() {
	        // Parse a string value.
	        var hex,
	            i,
	            string = '',
	            uffff;
	
	        // When parsing for string values, we must look for " and \ characters.
	        if (ch === '"') {
	          while (next()) {
	            if (ch === '"') {
	              next();
	              return string;
	            } else if (ch === '\\') {
	              next();
	              if (ch === 'u') {
	                uffff = 0;
	                for (i = 0; i < 4; i += 1) {
	                  hex = parseInt(next(), 16);
	                  if (!isFinite(hex)) {
	                    break;
	                  }
	                  uffff = uffff * 16 + hex;
	                }
	                string += String.fromCharCode(uffff);
	              } else if (typeof escapee[ch] === 'string') {
	                string += escapee[ch];
	              } else {
	                break;
	              }
	            } else {
	              string += ch;
	            }
	          }
	        }
	        error("Bad string");
	      },
	          white = function white() {
	
	        // Skip whitespace.
	
	        while (ch && ch <= ' ') {
	          next();
	        }
	      },
	          word = function word() {
	
	        // true, false, or null.
	
	        switch (ch) {
	          case 't':
	            next('t');
	            next('r');
	            next('u');
	            next('e');
	            return true;
	          case 'f':
	            next('f');
	            next('a');
	            next('l');
	            next('s');
	            next('e');
	            return false;
	          case 'n':
	            next('n');
	            next('u');
	            next('l');
	            next('l');
	            return null;
	        }
	        error("Unexpected '" + ch + "'");
	      },
	          value,
	          // Place holder for the value function.
	
	      array = function array() {
	
	        // Parse an array value.
	
	        var array = [];
	
	        if (ch === '[') {
	          next('[');
	          white();
	          if (ch === ']') {
	            next(']');
	            return array; // empty array
	          }
	          while (ch) {
	            array.push(value());
	            white();
	            if (ch === ']') {
	              next(']');
	              return array;
	            }
	            next(',');
	            white();
	          }
	        }
	        error("Bad array");
	      },
	          object = function object() {
	
	        // Parse an object value.
	
	        var key,
	            object = {};
	
	        if (ch === '{') {
	          next('{');
	          white();
	          if (ch === '}') {
	            next('}');
	            return object; // empty object
	          }
	          while (ch) {
	            key = string();
	            white();
	            next(':');
	            if (Object.hasOwnProperty.call(object, key)) {
	              error('Duplicate key "' + key + '"');
	            }
	            object[key] = value();
	            white();
	            if (ch === '}') {
	              next('}');
	              return object;
	            }
	            next(',');
	            white();
	          }
	        }
	        error("Bad object");
	      };
	
	      value = function value() {
	
	        // Parse a JSON value. It could be an object, an array, a string, a number,
	        // or a word.
	
	        white();
	        switch (ch) {
	          case '{':
	            return object();
	          case '[':
	            return array();
	          case '"':
	            return string();
	          case '-':
	            return number();
	          default:
	            return ch >= '0' && ch <= '9' ? number() : word();
	        }
	      };
	
	      // Return the json_parse function. It will have access to all of the above
	      // functions and variables.
	
	      module.exports = function (source, reviver) {
	        var result;
	
	        text = source;
	        at = 0;
	        ch = ' ';
	        result = value();
	        white();
	        if (ch) {
	          error("Syntax error");
	        }
	
	        // If there is a reviver function, we recursively walk the new structure,
	        // passing each name/value pair to the reviver function for possible
	        // transformation, starting with a temporary root object that holds the result
	        // in an empty key. If there is not a reviver function, we simply return the
	        // result.
	
	        return typeof reviver === 'function' ? function walk(holder, key) {
	          var k,
	              v,
	              value = holder[key];
	          if (value && (typeof value === "undefined" ? "undefined" : _typeof(value)) === 'object') {
	            for (k in value) {
	              if (Object.prototype.hasOwnProperty.call(value, k)) {
	                v = walk(value, k);
	                if (v !== undefined) {
	                  value[k] = v;
	                } else {
	                  delete value[k];
	                }
	              }
	            }
	          }
	          return reviver.call(holder, key, value);
	        }({ '': result }, '') : result;
	      };
	    }, {}], 45: [function (require, module, exports) {
	      var cx = /[\u0000\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g,
	          escapable = /[\\\"\x00-\x1f\x7f-\x9f\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g,
	          gap,
	          indent,
	          meta = { // table of character substitutions
	        '\b': '\\b',
	        '\t': '\\t',
	        '\n': '\\n',
	        '\f': '\\f',
	        '\r': '\\r',
	        '"': '\\"',
	        '\\': '\\\\'
	      },
	          rep;
	
	      function quote(string) {
	        // If the string contains no control characters, no quote characters, and no
	        // backslash characters, then we can safely slap some quotes around it.
	        // Otherwise we must also replace the offending characters with safe escape
	        // sequences.
	
	        escapable.lastIndex = 0;
	        return escapable.test(string) ? '"' + string.replace(escapable, function (a) {
	          var c = meta[a];
	          return typeof c === 'string' ? c : "\\u" + ('0000' + a.charCodeAt(0).toString(16)).slice(-4);
	        }) + '"' : '"' + string + '"';
	      }
	
	      function str(key, holder) {
	        // Produce a string from holder[key].
	        var i,
	            // The loop counter.
	        k,
	            // The member key.
	        v,
	            // The member value.
	        length,
	            mind = gap,
	            partial,
	            value = holder[key];
	
	        // If the value has a toJSON method, call it to obtain a replacement value.
	        if (value && (typeof value === "undefined" ? "undefined" : _typeof(value)) === 'object' && typeof value.toJSON === 'function') {
	          value = value.toJSON(key);
	        }
	
	        // If we were called with a replacer function, then call the replacer to
	        // obtain a replacement value.
	        if (typeof rep === 'function') {
	          value = rep.call(holder, key, value);
	        }
	
	        // What happens next depends on the value's type.
	        switch (typeof value === "undefined" ? "undefined" : _typeof(value)) {
	          case 'string':
	            return quote(value);
	
	          case 'number':
	            // JSON numbers must be finite. Encode non-finite numbers as null.
	            return isFinite(value) ? String(value) : 'null';
	
	          case 'boolean':
	          case 'null':
	            // If the value is a boolean or null, convert it to a string. Note:
	            // typeof null does not produce 'null'. The case is included here in
	            // the remote chance that this gets fixed someday.
	            return String(value);
	
	          case 'object':
	            if (!value) return 'null';
	            gap += indent;
	            partial = [];
	
	            // Array.isArray
	            if (Object.prototype.toString.apply(value) === '[object Array]') {
	              length = value.length;
	              for (i = 0; i < length; i += 1) {
	                partial[i] = str(i, value) || 'null';
	              }
	
	              // Join all of the elements together, separated with commas, and
	              // wrap them in brackets.
	              v = partial.length === 0 ? '[]' : gap ? '[\n' + gap + partial.join(',\n' + gap) + '\n' + mind + ']' : '[' + partial.join(',') + ']';
	              gap = mind;
	              return v;
	            }
	
	            // If the replacer is an array, use it to select the members to be
	            // stringified.
	            if (rep && (typeof rep === "undefined" ? "undefined" : _typeof(rep)) === 'object') {
	              length = rep.length;
	              for (i = 0; i < length; i += 1) {
	                k = rep[i];
	                if (typeof k === 'string') {
	                  v = str(k, value);
	                  if (v) {
	                    partial.push(quote(k) + (gap ? ': ' : ':') + v);
	                  }
	                }
	              }
	            } else {
	              // Otherwise, iterate through all of the keys in the object.
	              for (k in value) {
	                if (Object.prototype.hasOwnProperty.call(value, k)) {
	                  v = str(k, value);
	                  if (v) {
	                    partial.push(quote(k) + (gap ? ': ' : ':') + v);
	                  }
	                }
	              }
	            }
	
	            // Join all of the member texts together, separated with commas,
	            // and wrap them in braces.
	
	            v = partial.length === 0 ? '{}' : gap ? '{\n' + gap + partial.join(',\n' + gap) + '\n' + mind + '}' : '{' + partial.join(',') + '}';
	            gap = mind;
	            return v;
	        }
	      }
	
	      module.exports = function (value, replacer, space) {
	        var i;
	        gap = '';
	        indent = '';
	
	        // If the space parameter is a number, make an indent string containing that
	        // many spaces.
	        if (typeof space === 'number') {
	          for (i = 0; i < space; i += 1) {
	            indent += ' ';
	          }
	        }
	        // If the space parameter is a string, it will be used as the indent string.
	        else if (typeof space === 'string') {
	            indent = space;
	          }
	
	        // If there is a replacer, it must be a function or an array.
	        // Otherwise, throw an error.
	        rep = replacer;
	        if (replacer && typeof replacer !== 'function' && ((typeof replacer === "undefined" ? "undefined" : _typeof(replacer)) !== 'object' || typeof replacer.length !== 'number')) {
	          throw new Error('JSON.stringify');
	        }
	
	        // Make a fake root object containing our value under the key of ''.
	        // Return the result of stringifying the value.
	        return str('', { '': value });
	      };
	    }, {}], 46: [function (require, module, exports) {
	      (function (global) {
	        /*! https://mths.be/punycode v1.4.1 by @mathias */
	        ;(function (root) {
	
	          /** Detect free variables */
	          var freeExports = (typeof exports === "undefined" ? "undefined" : _typeof(exports)) == 'object' && exports && !exports.nodeType && exports;
	          var freeModule = (typeof module === "undefined" ? "undefined" : _typeof(module)) == 'object' && module && !module.nodeType && module;
	          var freeGlobal = (typeof global === "undefined" ? "undefined" : _typeof(global)) == 'object' && global;
	          if (freeGlobal.global === freeGlobal || freeGlobal.window === freeGlobal || freeGlobal.self === freeGlobal) {
	            root = freeGlobal;
	          }
	
	          /**
	           * The `punycode` object.
	           * @name punycode
	           * @type Object
	           */
	          var punycode,
	
	
	          /** Highest positive signed 32-bit float value */
	          maxInt = 2147483647,
	              // aka. 0x7FFFFFFF or 2^31-1
	
	          /** Bootstring parameters */
	          base = 36,
	              tMin = 1,
	              tMax = 26,
	              skew = 38,
	              damp = 700,
	              initialBias = 72,
	              initialN = 128,
	              // 0x80
	          delimiter = '-',
	              // '\x2D'
	
	          /** Regular expressions */
	          regexPunycode = /^xn--/,
	              regexNonASCII = /[^\x20-\x7E]/,
	              // unprintable ASCII chars + non-ASCII chars
	          regexSeparators = /[\x2E\u3002\uFF0E\uFF61]/g,
	              // RFC 3490 separators
	
	          /** Error messages */
	          errors = {
	            'overflow': 'Overflow: input needs wider integers to process',
	            'not-basic': 'Illegal input >= 0x80 (not a basic code point)',
	            'invalid-input': 'Invalid input'
	          },
	
	
	          /** Convenience shortcuts */
	          baseMinusTMin = base - tMin,
	              floor = Math.floor,
	              stringFromCharCode = String.fromCharCode,
	
	
	          /** Temporary variable */
	          key;
	
	          /*--------------------------------------------------------------------------*/
	
	          /**
	           * A generic error utility function.
	           * @private
	           * @param {String} type The error type.
	           * @returns {Error} Throws a `RangeError` with the applicable error message.
	           */
	          function error(type) {
	            throw new RangeError(errors[type]);
	          }
	
	          /**
	           * A generic `Array#map` utility function.
	           * @private
	           * @param {Array} array The array to iterate over.
	           * @param {Function} callback The function that gets called for every array
	           * item.
	           * @returns {Array} A new array of values returned by the callback function.
	           */
	          function map(array, fn) {
	            var length = array.length;
	            var result = [];
	            while (length--) {
	              result[length] = fn(array[length]);
	            }
	            return result;
	          }
	
	          /**
	           * A simple `Array#map`-like wrapper to work with domain name strings or email
	           * addresses.
	           * @private
	           * @param {String} domain The domain name or email address.
	           * @param {Function} callback The function that gets called for every
	           * character.
	           * @returns {Array} A new string of characters returned by the callback
	           * function.
	           */
	          function mapDomain(string, fn) {
	            var parts = string.split('@');
	            var result = '';
	            if (parts.length > 1) {
	              // In email addresses, only the domain name should be punycoded. Leave
	              // the local part (i.e. everything up to `@`) intact.
	              result = parts[0] + '@';
	              string = parts[1];
	            }
	            // Avoid `split(regex)` for IE8 compatibility. See #17.
	            string = string.replace(regexSeparators, '\x2E');
	            var labels = string.split('.');
	            var encoded = map(labels, fn).join('.');
	            return result + encoded;
	          }
	
	          /**
	           * Creates an array containing the numeric code points of each Unicode
	           * character in the string. While JavaScript uses UCS-2 internally,
	           * this function will convert a pair of surrogate halves (each of which
	           * UCS-2 exposes as separate characters) into a single code point,
	           * matching UTF-16.
	           * @see `punycode.ucs2.encode`
	           * @see <https://mathiasbynens.be/notes/javascript-encoding>
	           * @memberOf punycode.ucs2
	           * @name decode
	           * @param {String} string The Unicode input string (UCS-2).
	           * @returns {Array} The new array of code points.
	           */
	          function ucs2decode(string) {
	            var output = [],
	                counter = 0,
	                length = string.length,
	                value,
	                extra;
	            while (counter < length) {
	              value = string.charCodeAt(counter++);
	              if (value >= 0xD800 && value <= 0xDBFF && counter < length) {
	                // high surrogate, and there is a next character
	                extra = string.charCodeAt(counter++);
	                if ((extra & 0xFC00) == 0xDC00) {
	                  // low surrogate
	                  output.push(((value & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000);
	                } else {
	                  // unmatched surrogate; only append this code unit, in case the next
	                  // code unit is the high surrogate of a surrogate pair
	                  output.push(value);
	                  counter--;
	                }
	              } else {
	                output.push(value);
	              }
	            }
	            return output;
	          }
	
	          /**
	           * Creates a string based on an array of numeric code points.
	           * @see `punycode.ucs2.decode`
	           * @memberOf punycode.ucs2
	           * @name encode
	           * @param {Array} codePoints The array of numeric code points.
	           * @returns {String} The new Unicode string (UCS-2).
	           */
	          function ucs2encode(array) {
	            return map(array, function (value) {
	              var output = '';
	              if (value > 0xFFFF) {
	                value -= 0x10000;
	                output += stringFromCharCode(value >>> 10 & 0x3FF | 0xD800);
	                value = 0xDC00 | value & 0x3FF;
	              }
	              output += stringFromCharCode(value);
	              return output;
	            }).join('');
	          }
	
	          /**
	           * Converts a basic code point into a digit/integer.
	           * @see `digitToBasic()`
	           * @private
	           * @param {Number} codePoint The basic numeric code point value.
	           * @returns {Number} The numeric value of a basic code point (for use in
	           * representing integers) in the range `0` to `base - 1`, or `base` if
	           * the code point does not represent a value.
	           */
	          function basicToDigit(codePoint) {
	            if (codePoint - 48 < 10) {
	              return codePoint - 22;
	            }
	            if (codePoint - 65 < 26) {
	              return codePoint - 65;
	            }
	            if (codePoint - 97 < 26) {
	              return codePoint - 97;
	            }
	            return base;
	          }
	
	          /**
	           * Converts a digit/integer into a basic code point.
	           * @see `basicToDigit()`
	           * @private
	           * @param {Number} digit The numeric value of a basic code point.
	           * @returns {Number} The basic code point whose value (when used for
	           * representing integers) is `digit`, which needs to be in the range
	           * `0` to `base - 1`. If `flag` is non-zero, the uppercase form is
	           * used; else, the lowercase form is used. The behavior is undefined
	           * if `flag` is non-zero and `digit` has no uppercase form.
	           */
	          function digitToBasic(digit, flag) {
	            //  0..25 map to ASCII a..z or A..Z
	            // 26..35 map to ASCII 0..9
	            return digit + 22 + 75 * (digit < 26) - ((flag != 0) << 5);
	          }
	
	          /**
	           * Bias adaptation function as per section 3.4 of RFC 3492.
	           * https://tools.ietf.org/html/rfc3492#section-3.4
	           * @private
	           */
	          function adapt(delta, numPoints, firstTime) {
	            var k = 0;
	            delta = firstTime ? floor(delta / damp) : delta >> 1;
	            delta += floor(delta / numPoints);
	            for (; /* no initialization */delta > baseMinusTMin * tMax >> 1; k += base) {
	              delta = floor(delta / baseMinusTMin);
	            }
	            return floor(k + (baseMinusTMin + 1) * delta / (delta + skew));
	          }
	
	          /**
	           * Converts a Punycode string of ASCII-only symbols to a string of Unicode
	           * symbols.
	           * @memberOf punycode
	           * @param {String} input The Punycode string of ASCII-only symbols.
	           * @returns {String} The resulting string of Unicode symbols.
	           */
	          function decode(input) {
	            // Don't use UCS-2
	            var output = [],
	                inputLength = input.length,
	                out,
	                i = 0,
	                n = initialN,
	                bias = initialBias,
	                basic,
	                j,
	                index,
	                oldi,
	                w,
	                k,
	                digit,
	                t,
	
	            /** Cached calculation results */
	            baseMinusT;
	
	            // Handle the basic code points: let `basic` be the number of input code
	            // points before the last delimiter, or `0` if there is none, then copy
	            // the first basic code points to the output.
	
	            basic = input.lastIndexOf(delimiter);
	            if (basic < 0) {
	              basic = 0;
	            }
	
	            for (j = 0; j < basic; ++j) {
	              // if it's not a basic code point
	              if (input.charCodeAt(j) >= 0x80) {
	                error('not-basic');
	              }
	              output.push(input.charCodeAt(j));
	            }
	
	            // Main decoding loop: start just after the last delimiter if any basic code
	            // points were copied; start at the beginning otherwise.
	
	            for (index = basic > 0 ? basic + 1 : 0; index < inputLength;) /* no final expression */{
	
	              // `index` is the index of the next character to be consumed.
	              // Decode a generalized variable-length integer into `delta`,
	              // which gets added to `i`. The overflow checking is easier
	              // if we increase `i` as we go, then subtract off its starting
	              // value at the end to obtain `delta`.
	              for (oldi = i, w = 1, k = base;; /* no condition */k += base) {
	
	                if (index >= inputLength) {
	                  error('invalid-input');
	                }
	
	                digit = basicToDigit(input.charCodeAt(index++));
	
	                if (digit >= base || digit > floor((maxInt - i) / w)) {
	                  error('overflow');
	                }
	
	                i += digit * w;
	                t = k <= bias ? tMin : k >= bias + tMax ? tMax : k - bias;
	
	                if (digit < t) {
	                  break;
	                }
	
	                baseMinusT = base - t;
	                if (w > floor(maxInt / baseMinusT)) {
	                  error('overflow');
	                }
	
	                w *= baseMinusT;
	              }
	
	              out = output.length + 1;
	              bias = adapt(i - oldi, out, oldi == 0);
	
	              // `i` was supposed to wrap around from `out` to `0`,
	              // incrementing `n` each time, so we'll fix that now:
	              if (floor(i / out) > maxInt - n) {
	                error('overflow');
	              }
	
	              n += floor(i / out);
	              i %= out;
	
	              // Insert `n` at position `i` of the output
	              output.splice(i++, 0, n);
	            }
	
	            return ucs2encode(output);
	          }
	
	          /**
	           * Converts a string of Unicode symbols (e.g. a domain name label) to a
	           * Punycode string of ASCII-only symbols.
	           * @memberOf punycode
	           * @param {String} input The string of Unicode symbols.
	           * @returns {String} The resulting Punycode string of ASCII-only symbols.
	           */
	          function encode(input) {
	            var n,
	                delta,
	                handledCPCount,
	                basicLength,
	                bias,
	                j,
	                m,
	                q,
	                k,
	                t,
	                currentValue,
	                output = [],
	
	            /** `inputLength` will hold the number of code points in `input`. */
	            inputLength,
	
	            /** Cached calculation results */
	            handledCPCountPlusOne,
	                baseMinusT,
	                qMinusT;
	
	            // Convert the input in UCS-2 to Unicode
	            input = ucs2decode(input);
	
	            // Cache the length
	            inputLength = input.length;
	
	            // Initialize the state
	            n = initialN;
	            delta = 0;
	            bias = initialBias;
	
	            // Handle the basic code points
	            for (j = 0; j < inputLength; ++j) {
	              currentValue = input[j];
	              if (currentValue < 0x80) {
	                output.push(stringFromCharCode(currentValue));
	              }
	            }
	
	            handledCPCount = basicLength = output.length;
	
	            // `handledCPCount` is the number of code points that have been handled;
	            // `basicLength` is the number of basic code points.
	
	            // Finish the basic string - if it is not empty - with a delimiter
	            if (basicLength) {
	              output.push(delimiter);
	            }
	
	            // Main encoding loop:
	            while (handledCPCount < inputLength) {
	
	              // All non-basic code points < n have been handled already. Find the next
	              // larger one:
	              for (m = maxInt, j = 0; j < inputLength; ++j) {
	                currentValue = input[j];
	                if (currentValue >= n && currentValue < m) {
	                  m = currentValue;
	                }
	              }
	
	              // Increase `delta` enough to advance the decoder's <n,i> state to <m,0>,
	              // but guard against overflow
	              handledCPCountPlusOne = handledCPCount + 1;
	              if (m - n > floor((maxInt - delta) / handledCPCountPlusOne)) {
	                error('overflow');
	              }
	
	              delta += (m - n) * handledCPCountPlusOne;
	              n = m;
	
	              for (j = 0; j < inputLength; ++j) {
	                currentValue = input[j];
	
	                if (currentValue < n && ++delta > maxInt) {
	                  error('overflow');
	                }
	
	                if (currentValue == n) {
	                  // Represent delta as a generalized variable-length integer
	                  for (q = delta, k = base;; /* no condition */k += base) {
	                    t = k <= bias ? tMin : k >= bias + tMax ? tMax : k - bias;
	                    if (q < t) {
	                      break;
	                    }
	                    qMinusT = q - t;
	                    baseMinusT = base - t;
	                    output.push(stringFromCharCode(digitToBasic(t + qMinusT % baseMinusT, 0)));
	                    q = floor(qMinusT / baseMinusT);
	                  }
	
	                  output.push(stringFromCharCode(digitToBasic(q, 0)));
	                  bias = adapt(delta, handledCPCountPlusOne, handledCPCount == basicLength);
	                  delta = 0;
	                  ++handledCPCount;
	                }
	              }
	
	              ++delta;
	              ++n;
	            }
	            return output.join('');
	          }
	
	          /**
	           * Converts a Punycode string representing a domain name or an email address
	           * to Unicode. Only the Punycoded parts of the input will be converted, i.e.
	           * it doesn't matter if you call it on a string that has already been
	           * converted to Unicode.
	           * @memberOf punycode
	           * @param {String} input The Punycoded domain name or email address to
	           * convert to Unicode.
	           * @returns {String} The Unicode representation of the given Punycode
	           * string.
	           */
	          function toUnicode(input) {
	            return mapDomain(input, function (string) {
	              return regexPunycode.test(string) ? decode(string.slice(4).toLowerCase()) : string;
	            });
	          }
	
	          /**
	           * Converts a Unicode string representing a domain name or an email address to
	           * Punycode. Only the non-ASCII parts of the domain name will be converted,
	           * i.e. it doesn't matter if you call it with a domain that's already in
	           * ASCII.
	           * @memberOf punycode
	           * @param {String} input The domain name or email address to convert, as a
	           * Unicode string.
	           * @returns {String} The Punycode representation of the given domain name or
	           * email address.
	           */
	          function toASCII(input) {
	            return mapDomain(input, function (string) {
	              return regexNonASCII.test(string) ? 'xn--' + encode(string) : string;
	            });
	          }
	
	          /*--------------------------------------------------------------------------*/
	
	          /** Define the public API */
	          punycode = {
	            /**
	             * A string representing the current Punycode.js version number.
	             * @memberOf punycode
	             * @type String
	             */
	            'version': '1.4.1',
	            /**
	             * An object of methods to convert from JavaScript's internal character
	             * representation (UCS-2) to Unicode code points, and back.
	             * @see <https://mathiasbynens.be/notes/javascript-encoding>
	             * @memberOf punycode
	             * @type Object
	             */
	            'ucs2': {
	              'decode': ucs2decode,
	              'encode': ucs2encode
	            },
	            'decode': decode,
	            'encode': encode,
	            'toASCII': toASCII,
	            'toUnicode': toUnicode
	          };
	
	          /** Expose `punycode` */
	          // Some AMD build optimizers, like r.js, check for specific condition patterns
	          // like the following:
	          if (typeof define == 'function' && _typeof(define.amd) == 'object' && define.amd) {
	            define('punycode', function () {
	              return punycode;
	            });
	          } else if (freeExports && freeModule) {
	            if (module.exports == freeExports) {
	              // in Node.js, io.js, or RingoJS v0.8.0+
	              freeModule.exports = punycode;
	            } else {
	              // in Narwhal or RingoJS v0.7.0-
	              for (key in punycode) {
	                punycode.hasOwnProperty(key) && (freeExports[key] = punycode[key]);
	              }
	            }
	          } else {
	            // in Rhino or a web browser
	            root.punycode = punycode;
	          }
	        })(this);
	      }).call(this, typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {});
	    }, {}], 47: [function (require, module, exports) {
	      // Copyright Joyent, Inc. and other Node contributors.
	      //
	      // Permission is hereby granted, free of charge, to any person obtaining a
	      // copy of this software and associated documentation files (the
	      // "Software"), to deal in the Software without restriction, including
	      // without limitation the rights to use, copy, modify, merge, publish,
	      // distribute, sublicense, and/or sell copies of the Software, and to permit
	      // persons to whom the Software is furnished to do so, subject to the
	      // following conditions:
	      //
	      // The above copyright notice and this permission notice shall be included
	      // in all copies or substantial portions of the Software.
	      //
	      // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	      // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	      // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	      // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	      // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	      // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	      // USE OR OTHER DEALINGS IN THE SOFTWARE.
	
	      'use strict';
	
	      // If obj.hasOwnProperty has been overridden, then calling
	      // obj.hasOwnProperty(prop) will break.
	      // See: https://github.com/joyent/node/issues/1707
	
	      function hasOwnProperty(obj, prop) {
	        return Object.prototype.hasOwnProperty.call(obj, prop);
	      }
	
	      module.exports = function (qs, sep, eq, options) {
	        sep = sep || '&';
	        eq = eq || '=';
	        var obj = {};
	
	        if (typeof qs !== 'string' || qs.length === 0) {
	          return obj;
	        }
	
	        var regexp = /\+/g;
	        qs = qs.split(sep);
	
	        var maxKeys = 1000;
	        if (options && typeof options.maxKeys === 'number') {
	          maxKeys = options.maxKeys;
	        }
	
	        var len = qs.length;
	        // maxKeys <= 0 means that we should not limit keys count
	        if (maxKeys > 0 && len > maxKeys) {
	          len = maxKeys;
	        }
	
	        for (var i = 0; i < len; ++i) {
	          var x = qs[i].replace(regexp, '%20'),
	              idx = x.indexOf(eq),
	              kstr,
	              vstr,
	              k,
	              v;
	
	          if (idx >= 0) {
	            kstr = x.substr(0, idx);
	            vstr = x.substr(idx + 1);
	          } else {
	            kstr = x;
	            vstr = '';
	          }
	
	          k = decodeURIComponent(kstr);
	          v = decodeURIComponent(vstr);
	
	          if (!hasOwnProperty(obj, k)) {
	            obj[k] = v;
	          } else if (isArray(obj[k])) {
	            obj[k].push(v);
	          } else {
	            obj[k] = [obj[k], v];
	          }
	        }
	
	        return obj;
	      };
	
	      var isArray = Array.isArray || function (xs) {
	        return Object.prototype.toString.call(xs) === '[object Array]';
	      };
	    }, {}], 48: [function (require, module, exports) {
	      // Copyright Joyent, Inc. and other Node contributors.
	      //
	      // Permission is hereby granted, free of charge, to any person obtaining a
	      // copy of this software and associated documentation files (the
	      // "Software"), to deal in the Software without restriction, including
	      // without limitation the rights to use, copy, modify, merge, publish,
	      // distribute, sublicense, and/or sell copies of the Software, and to permit
	      // persons to whom the Software is furnished to do so, subject to the
	      // following conditions:
	      //
	      // The above copyright notice and this permission notice shall be included
	      // in all copies or substantial portions of the Software.
	      //
	      // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	      // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	      // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	      // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	      // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	      // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	      // USE OR OTHER DEALINGS IN THE SOFTWARE.
	
	      'use strict';
	
	      var stringifyPrimitive = function stringifyPrimitive(v) {
	        switch (typeof v === "undefined" ? "undefined" : _typeof(v)) {
	          case 'string':
	            return v;
	
	          case 'boolean':
	            return v ? 'true' : 'false';
	
	          case 'number':
	            return isFinite(v) ? v : '';
	
	          default:
	            return '';
	        }
	      };
	
	      module.exports = function (obj, sep, eq, name) {
	        sep = sep || '&';
	        eq = eq || '=';
	        if (obj === null) {
	          obj = undefined;
	        }
	
	        if ((typeof obj === "undefined" ? "undefined" : _typeof(obj)) === 'object') {
	          return map(objectKeys(obj), function (k) {
	            var ks = encodeURIComponent(stringifyPrimitive(k)) + eq;
	            if (isArray(obj[k])) {
	              return map(obj[k], function (v) {
	                return ks + encodeURIComponent(stringifyPrimitive(v));
	              }).join(sep);
	            } else {
	              return ks + encodeURIComponent(stringifyPrimitive(obj[k]));
	            }
	          }).join(sep);
	        }
	
	        if (!name) return '';
	        return encodeURIComponent(stringifyPrimitive(name)) + eq + encodeURIComponent(stringifyPrimitive(obj));
	      };
	
	      var isArray = Array.isArray || function (xs) {
	        return Object.prototype.toString.call(xs) === '[object Array]';
	      };
	
	      function map(xs, f) {
	        if (xs.map) return xs.map(f);
	        var res = [];
	        for (var i = 0; i < xs.length; i++) {
	          res.push(f(xs[i], i));
	        }
	        return res;
	      }
	
	      var objectKeys = Object.keys || function (obj) {
	        var res = [];
	        for (var key in obj) {
	          if (Object.prototype.hasOwnProperty.call(obj, key)) res.push(key);
	        }
	        return res;
	      };
	    }, {}], 49: [function (require, module, exports) {
	      'use strict';
	
	      exports.decode = exports.parse = require('./decode');
	      exports.encode = exports.stringify = require('./encode');
	    }, { "./decode": 47, "./encode": 48 }], 50: [function (require, module, exports) {
	      // Copyright Joyent, Inc. and other Node contributors.
	      //
	      // Permission is hereby granted, free of charge, to any person obtaining a
	      // copy of this software and associated documentation files (the
	      // "Software"), to deal in the Software without restriction, including
	      // without limitation the rights to use, copy, modify, merge, publish,
	      // distribute, sublicense, and/or sell copies of the Software, and to permit
	      // persons to whom the Software is furnished to do so, subject to the
	      // following conditions:
	      //
	      // The above copyright notice and this permission notice shall be included
	      // in all copies or substantial portions of the Software.
	      //
	      // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	      // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	      // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	      // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	      // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	      // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	      // USE OR OTHER DEALINGS IN THE SOFTWARE.
	
	      'use strict';
	
	      var punycode = require('punycode');
	      var util = require('./util');
	
	      exports.parse = urlParse;
	      exports.resolve = urlResolve;
	      exports.resolveObject = urlResolveObject;
	      exports.format = urlFormat;
	
	      exports.Url = Url;
	
	      function Url() {
	        this.protocol = null;
	        this.slashes = null;
	        this.auth = null;
	        this.host = null;
	        this.port = null;
	        this.hostname = null;
	        this.hash = null;
	        this.search = null;
	        this.query = null;
	        this.pathname = null;
	        this.path = null;
	        this.href = null;
	      }
	
	      // Reference: RFC 3986, RFC 1808, RFC 2396
	
	      // define these here so at least they only have to be
	      // compiled once on the first module load.
	      var protocolPattern = /^([a-z0-9.+-]+:)/i,
	          portPattern = /:[0-9]*$/,
	
	
	      // Special case for a simple path URL
	      simplePathPattern = /^(\/\/?(?!\/)[^\?\s]*)(\?[^\s]*)?$/,
	
	
	      // RFC 2396: characters reserved for delimiting URLs.
	      // We actually just auto-escape these.
	      delims = ['<', '>', '"', '`', ' ', '\r', '\n', '\t'],
	
	
	      // RFC 2396: characters not allowed for various reasons.
	      unwise = ['{', '}', '|', '\\', '^', '`'].concat(delims),
	
	
	      // Allowed by RFCs, but cause of XSS attacks.  Always escape these.
	      autoEscape = ['\''].concat(unwise),
	
	      // Characters that are never ever allowed in a hostname.
	      // Note that any invalid chars are also handled, but these
	      // are the ones that are *expected* to be seen, so we fast-path
	      // them.
	      nonHostChars = ['%', '/', '?', ';', '#'].concat(autoEscape),
	          hostEndingChars = ['/', '?', '#'],
	          hostnameMaxLen = 255,
	          hostnamePartPattern = /^[+a-z0-9A-Z_-]{0,63}$/,
	          hostnamePartStart = /^([+a-z0-9A-Z_-]{0,63})(.*)$/,
	
	      // protocols that can allow "unsafe" and "unwise" chars.
	      unsafeProtocol = {
	        'javascript': true,
	        'javascript:': true
	      },
	
	      // protocols that never have a hostname.
	      hostlessProtocol = {
	        'javascript': true,
	        'javascript:': true
	      },
	
	      // protocols that always contain a // bit.
	      slashedProtocol = {
	        'http': true,
	        'https': true,
	        'ftp': true,
	        'gopher': true,
	        'file': true,
	        'http:': true,
	        'https:': true,
	        'ftp:': true,
	        'gopher:': true,
	        'file:': true
	      },
	          querystring = require('querystring');
	
	      function urlParse(url, parseQueryString, slashesDenoteHost) {
	        if (url && util.isObject(url) && url instanceof Url) return url;
	
	        var u = new Url();
	        u.parse(url, parseQueryString, slashesDenoteHost);
	        return u;
	      }
	
	      Url.prototype.parse = function (url, parseQueryString, slashesDenoteHost) {
	        if (!util.isString(url)) {
	          throw new TypeError("Parameter 'url' must be a string, not " + (typeof url === "undefined" ? "undefined" : _typeof(url)));
	        }
	
	        // Copy chrome, IE, opera backslash-handling behavior.
	        // Back slashes before the query string get converted to forward slashes
	        // See: https://code.google.com/p/chromium/issues/detail?id=25916
	        var queryIndex = url.indexOf('?'),
	            splitter = queryIndex !== -1 && queryIndex < url.indexOf('#') ? '?' : '#',
	            uSplit = url.split(splitter),
	            slashRegex = /\\/g;
	        uSplit[0] = uSplit[0].replace(slashRegex, '/');
	        url = uSplit.join(splitter);
	
	        var rest = url;
	
	        // trim before proceeding.
	        // This is to support parse stuff like "  http://foo.com  \n"
	        rest = rest.trim();
	
	        if (!slashesDenoteHost && url.split('#').length === 1) {
	          // Try fast path regexp
	          var simplePath = simplePathPattern.exec(rest);
	          if (simplePath) {
	            this.path = rest;
	            this.href = rest;
	            this.pathname = simplePath[1];
	            if (simplePath[2]) {
	              this.search = simplePath[2];
	              if (parseQueryString) {
	                this.query = querystring.parse(this.search.substr(1));
	              } else {
	                this.query = this.search.substr(1);
	              }
	            } else if (parseQueryString) {
	              this.search = '';
	              this.query = {};
	            }
	            return this;
	          }
	        }
	
	        var proto = protocolPattern.exec(rest);
	        if (proto) {
	          proto = proto[0];
	          var lowerProto = proto.toLowerCase();
	          this.protocol = lowerProto;
	          rest = rest.substr(proto.length);
	        }
	
	        // figure out if it's got a host
	        // user@server is *always* interpreted as a hostname, and url
	        // resolution will treat //foo/bar as host=foo,path=bar because that's
	        // how the browser resolves relative URLs.
	        if (slashesDenoteHost || proto || rest.match(/^\/\/[^@\/]+@[^@\/]+/)) {
	          var slashes = rest.substr(0, 2) === '//';
	          if (slashes && !(proto && hostlessProtocol[proto])) {
	            rest = rest.substr(2);
	            this.slashes = true;
	          }
	        }
	
	        if (!hostlessProtocol[proto] && (slashes || proto && !slashedProtocol[proto])) {
	
	          // there's a hostname.
	          // the first instance of /, ?, ;, or # ends the host.
	          //
	          // If there is an @ in the hostname, then non-host chars *are* allowed
	          // to the left of the last @ sign, unless some host-ending character
	          // comes *before* the @-sign.
	          // URLs are obnoxious.
	          //
	          // ex:
	          // http://a@b@c/ => user:a@b host:c
	          // http://a@b?@c => user:a host:c path:/?@c
	
	          // v0.12 TODO(isaacs): This is not quite how Chrome does things.
	          // Review our test case against browsers more comprehensively.
	
	          // find the first instance of any hostEndingChars
	          var hostEnd = -1;
	          for (var i = 0; i < hostEndingChars.length; i++) {
	            var hec = rest.indexOf(hostEndingChars[i]);
	            if (hec !== -1 && (hostEnd === -1 || hec < hostEnd)) hostEnd = hec;
	          }
	
	          // at this point, either we have an explicit point where the
	          // auth portion cannot go past, or the last @ char is the decider.
	          var auth, atSign;
	          if (hostEnd === -1) {
	            // atSign can be anywhere.
	            atSign = rest.lastIndexOf('@');
	          } else {
	            // atSign must be in auth portion.
	            // http://a@b/c@d => host:b auth:a path:/c@d
	            atSign = rest.lastIndexOf('@', hostEnd);
	          }
	
	          // Now we have a portion which is definitely the auth.
	          // Pull that off.
	          if (atSign !== -1) {
	            auth = rest.slice(0, atSign);
	            rest = rest.slice(atSign + 1);
	            this.auth = decodeURIComponent(auth);
	          }
	
	          // the host is the remaining to the left of the first non-host char
	          hostEnd = -1;
	          for (var i = 0; i < nonHostChars.length; i++) {
	            var hec = rest.indexOf(nonHostChars[i]);
	            if (hec !== -1 && (hostEnd === -1 || hec < hostEnd)) hostEnd = hec;
	          }
	          // if we still have not hit it, then the entire thing is a host.
	          if (hostEnd === -1) hostEnd = rest.length;
	
	          this.host = rest.slice(0, hostEnd);
	          rest = rest.slice(hostEnd);
	
	          // pull out port.
	          this.parseHost();
	
	          // we've indicated that there is a hostname,
	          // so even if it's empty, it has to be present.
	          this.hostname = this.hostname || '';
	
	          // if hostname begins with [ and ends with ]
	          // assume that it's an IPv6 address.
	          var ipv6Hostname = this.hostname[0] === '[' && this.hostname[this.hostname.length - 1] === ']';
	
	          // validate a little.
	          if (!ipv6Hostname) {
	            var hostparts = this.hostname.split(/\./);
	            for (var i = 0, l = hostparts.length; i < l; i++) {
	              var part = hostparts[i];
	              if (!part) continue;
	              if (!part.match(hostnamePartPattern)) {
	                var newpart = '';
	                for (var j = 0, k = part.length; j < k; j++) {
	                  if (part.charCodeAt(j) > 127) {
	                    // we replace non-ASCII char with a temporary placeholder
	                    // we need this to make sure size of hostname is not
	                    // broken by replacing non-ASCII by nothing
	                    newpart += 'x';
	                  } else {
	                    newpart += part[j];
	                  }
	                }
	                // we test again with ASCII char only
	                if (!newpart.match(hostnamePartPattern)) {
	                  var validParts = hostparts.slice(0, i);
	                  var notHost = hostparts.slice(i + 1);
	                  var bit = part.match(hostnamePartStart);
	                  if (bit) {
	                    validParts.push(bit[1]);
	                    notHost.unshift(bit[2]);
	                  }
	                  if (notHost.length) {
	                    rest = '/' + notHost.join('.') + rest;
	                  }
	                  this.hostname = validParts.join('.');
	                  break;
	                }
	              }
	            }
	          }
	
	          if (this.hostname.length > hostnameMaxLen) {
	            this.hostname = '';
	          } else {
	            // hostnames are always lower case.
	            this.hostname = this.hostname.toLowerCase();
	          }
	
	          if (!ipv6Hostname) {
	            // IDNA Support: Returns a punycoded representation of "domain".
	            // It only converts parts of the domain name that
	            // have non-ASCII characters, i.e. it doesn't matter if
	            // you call it with a domain that already is ASCII-only.
	            this.hostname = punycode.toASCII(this.hostname);
	          }
	
	          var p = this.port ? ':' + this.port : '';
	          var h = this.hostname || '';
	          this.host = h + p;
	          this.href += this.host;
	
	          // strip [ and ] from the hostname
	          // the host field still retains them, though
	          if (ipv6Hostname) {
	            this.hostname = this.hostname.substr(1, this.hostname.length - 2);
	            if (rest[0] !== '/') {
	              rest = '/' + rest;
	            }
	          }
	        }
	
	        // now rest is set to the post-host stuff.
	        // chop off any delim chars.
	        if (!unsafeProtocol[lowerProto]) {
	
	          // First, make 100% sure that any "autoEscape" chars get
	          // escaped, even if encodeURIComponent doesn't think they
	          // need to be.
	          for (var i = 0, l = autoEscape.length; i < l; i++) {
	            var ae = autoEscape[i];
	            if (rest.indexOf(ae) === -1) continue;
	            var esc = encodeURIComponent(ae);
	            if (esc === ae) {
	              esc = escape(ae);
	            }
	            rest = rest.split(ae).join(esc);
	          }
	        }
	
	        // chop off from the tail first.
	        var hash = rest.indexOf('#');
	        if (hash !== -1) {
	          // got a fragment string.
	          this.hash = rest.substr(hash);
	          rest = rest.slice(0, hash);
	        }
	        var qm = rest.indexOf('?');
	        if (qm !== -1) {
	          this.search = rest.substr(qm);
	          this.query = rest.substr(qm + 1);
	          if (parseQueryString) {
	            this.query = querystring.parse(this.query);
	          }
	          rest = rest.slice(0, qm);
	        } else if (parseQueryString) {
	          // no query string, but parseQueryString still requested
	          this.search = '';
	          this.query = {};
	        }
	        if (rest) this.pathname = rest;
	        if (slashedProtocol[lowerProto] && this.hostname && !this.pathname) {
	          this.pathname = '/';
	        }
	
	        //to support http.request
	        if (this.pathname || this.search) {
	          var p = this.pathname || '';
	          var s = this.search || '';
	          this.path = p + s;
	        }
	
	        // finally, reconstruct the href based on what has been validated.
	        this.href = this.format();
	        return this;
	      };
	
	      // format a parsed object into a url string
	      function urlFormat(obj) {
	        // ensure it's an object, and not a string url.
	        // If it's an obj, this is a no-op.
	        // this way, you can call url_format() on strings
	        // to clean up potentially wonky urls.
	        if (util.isString(obj)) obj = urlParse(obj);
	        if (!(obj instanceof Url)) return Url.prototype.format.call(obj);
	        return obj.format();
	      }
	
	      Url.prototype.format = function () {
	        var auth = this.auth || '';
	        if (auth) {
	          auth = encodeURIComponent(auth);
	          auth = auth.replace(/%3A/i, ':');
	          auth += '@';
	        }
	
	        var protocol = this.protocol || '',
	            pathname = this.pathname || '',
	            hash = this.hash || '',
	            host = false,
	            query = '';
	
	        if (this.host) {
	          host = auth + this.host;
	        } else if (this.hostname) {
	          host = auth + (this.hostname.indexOf(':') === -1 ? this.hostname : '[' + this.hostname + ']');
	          if (this.port) {
	            host += ':' + this.port;
	          }
	        }
	
	        if (this.query && util.isObject(this.query) && Object.keys(this.query).length) {
	          query = querystring.stringify(this.query);
	        }
	
	        var search = this.search || query && '?' + query || '';
	
	        if (protocol && protocol.substr(-1) !== ':') protocol += ':';
	
	        // only the slashedProtocols get the //.  Not mailto:, xmpp:, etc.
	        // unless they had them to begin with.
	        if (this.slashes || (!protocol || slashedProtocol[protocol]) && host !== false) {
	          host = '//' + (host || '');
	          if (pathname && pathname.charAt(0) !== '/') pathname = '/' + pathname;
	        } else if (!host) {
	          host = '';
	        }
	
	        if (hash && hash.charAt(0) !== '#') hash = '#' + hash;
	        if (search && search.charAt(0) !== '?') search = '?' + search;
	
	        pathname = pathname.replace(/[?#]/g, function (match) {
	          return encodeURIComponent(match);
	        });
	        search = search.replace('#', '%23');
	
	        return protocol + host + pathname + search + hash;
	      };
	
	      function urlResolve(source, relative) {
	        return urlParse(source, false, true).resolve(relative);
	      }
	
	      Url.prototype.resolve = function (relative) {
	        return this.resolveObject(urlParse(relative, false, true)).format();
	      };
	
	      function urlResolveObject(source, relative) {
	        if (!source) return relative;
	        return urlParse(source, false, true).resolveObject(relative);
	      }
	
	      Url.prototype.resolveObject = function (relative) {
	        if (util.isString(relative)) {
	          var rel = new Url();
	          rel.parse(relative, false, true);
	          relative = rel;
	        }
	
	        var result = new Url();
	        var tkeys = Object.keys(this);
	        for (var tk = 0; tk < tkeys.length; tk++) {
	          var tkey = tkeys[tk];
	          result[tkey] = this[tkey];
	        }
	
	        // hash is always overridden, no matter what.
	        // even href="" will remove it.
	        result.hash = relative.hash;
	
	        // if the relative url is empty, then there's nothing left to do here.
	        if (relative.href === '') {
	          result.href = result.format();
	          return result;
	        }
	
	        // hrefs like //foo/bar always cut to the protocol.
	        if (relative.slashes && !relative.protocol) {
	          // take everything except the protocol from relative
	          var rkeys = Object.keys(relative);
	          for (var rk = 0; rk < rkeys.length; rk++) {
	            var rkey = rkeys[rk];
	            if (rkey !== 'protocol') result[rkey] = relative[rkey];
	          }
	
	          //urlParse appends trailing / to urls like http://www.example.com
	          if (slashedProtocol[result.protocol] && result.hostname && !result.pathname) {
	            result.path = result.pathname = '/';
	          }
	
	          result.href = result.format();
	          return result;
	        }
	
	        if (relative.protocol && relative.protocol !== result.protocol) {
	          // if it's a known url protocol, then changing
	          // the protocol does weird things
	          // first, if it's not file:, then we MUST have a host,
	          // and if there was a path
	          // to begin with, then we MUST have a path.
	          // if it is file:, then the host is dropped,
	          // because that's known to be hostless.
	          // anything else is assumed to be absolute.
	          if (!slashedProtocol[relative.protocol]) {
	            var keys = Object.keys(relative);
	            for (var v = 0; v < keys.length; v++) {
	              var k = keys[v];
	              result[k] = relative[k];
	            }
	            result.href = result.format();
	            return result;
	          }
	
	          result.protocol = relative.protocol;
	          if (!relative.host && !hostlessProtocol[relative.protocol]) {
	            var relPath = (relative.pathname || '').split('/');
	            while (relPath.length && !(relative.host = relPath.shift())) {}
	            if (!relative.host) relative.host = '';
	            if (!relative.hostname) relative.hostname = '';
	            if (relPath[0] !== '') relPath.unshift('');
	            if (relPath.length < 2) relPath.unshift('');
	            result.pathname = relPath.join('/');
	          } else {
	            result.pathname = relative.pathname;
	          }
	          result.search = relative.search;
	          result.query = relative.query;
	          result.host = relative.host || '';
	          result.auth = relative.auth;
	          result.hostname = relative.hostname || relative.host;
	          result.port = relative.port;
	          // to support http.request
	          if (result.pathname || result.search) {
	            var p = result.pathname || '';
	            var s = result.search || '';
	            result.path = p + s;
	          }
	          result.slashes = result.slashes || relative.slashes;
	          result.href = result.format();
	          return result;
	        }
	
	        var isSourceAbs = result.pathname && result.pathname.charAt(0) === '/',
	            isRelAbs = relative.host || relative.pathname && relative.pathname.charAt(0) === '/',
	            mustEndAbs = isRelAbs || isSourceAbs || result.host && relative.pathname,
	            removeAllDots = mustEndAbs,
	            srcPath = result.pathname && result.pathname.split('/') || [],
	            relPath = relative.pathname && relative.pathname.split('/') || [],
	            psychotic = result.protocol && !slashedProtocol[result.protocol];
	
	        // if the url is a non-slashed url, then relative
	        // links like ../.. should be able
	        // to crawl up to the hostname, as well.  This is strange.
	        // result.protocol has already been set by now.
	        // Later on, put the first path part into the host field.
	        if (psychotic) {
	          result.hostname = '';
	          result.port = null;
	          if (result.host) {
	            if (srcPath[0] === '') srcPath[0] = result.host;else srcPath.unshift(result.host);
	          }
	          result.host = '';
	          if (relative.protocol) {
	            relative.hostname = null;
	            relative.port = null;
	            if (relative.host) {
	              if (relPath[0] === '') relPath[0] = relative.host;else relPath.unshift(relative.host);
	            }
	            relative.host = null;
	          }
	          mustEndAbs = mustEndAbs && (relPath[0] === '' || srcPath[0] === '');
	        }
	
	        if (isRelAbs) {
	          // it's absolute.
	          result.host = relative.host || relative.host === '' ? relative.host : result.host;
	          result.hostname = relative.hostname || relative.hostname === '' ? relative.hostname : result.hostname;
	          result.search = relative.search;
	          result.query = relative.query;
	          srcPath = relPath;
	          // fall through to the dot-handling below.
	        } else if (relPath.length) {
	          // it's relative
	          // throw away the existing file, and take the new path instead.
	          if (!srcPath) srcPath = [];
	          srcPath.pop();
	          srcPath = srcPath.concat(relPath);
	          result.search = relative.search;
	          result.query = relative.query;
	        } else if (!util.isNullOrUndefined(relative.search)) {
	          // just pull out the search.
	          // like href='?foo'.
	          // Put this after the other two cases because it simplifies the booleans
	          if (psychotic) {
	            result.hostname = result.host = srcPath.shift();
	            //occationaly the auth can get stuck only in host
	            //this especially happens in cases like
	            //url.resolveObject('mailto:local1@domain1', 'local2@domain2')
	            var authInHost = result.host && result.host.indexOf('@') > 0 ? result.host.split('@') : false;
	            if (authInHost) {
	              result.auth = authInHost.shift();
	              result.host = result.hostname = authInHost.shift();
	            }
	          }
	          result.search = relative.search;
	          result.query = relative.query;
	          //to support http.request
	          if (!util.isNull(result.pathname) || !util.isNull(result.search)) {
	            result.path = (result.pathname ? result.pathname : '') + (result.search ? result.search : '');
	          }
	          result.href = result.format();
	          return result;
	        }
	
	        if (!srcPath.length) {
	          // no path at all.  easy.
	          // we've already handled the other stuff above.
	          result.pathname = null;
	          //to support http.request
	          if (result.search) {
	            result.path = '/' + result.search;
	          } else {
	            result.path = null;
	          }
	          result.href = result.format();
	          return result;
	        }
	
	        // if a url ENDs in . or .., then it must get a trailing slash.
	        // however, if it ends in anything else non-slashy,
	        // then it must NOT get a trailing slash.
	        var last = srcPath.slice(-1)[0];
	        var hasTrailingSlash = (result.host || relative.host || srcPath.length > 1) && (last === '.' || last === '..') || last === '';
	
	        // strip single dots, resolve double dots to parent dir
	        // if the path tries to go above the root, `up` ends up > 0
	        var up = 0;
	        for (var i = srcPath.length; i >= 0; i--) {
	          last = srcPath[i];
	          if (last === '.') {
	            srcPath.splice(i, 1);
	          } else if (last === '..') {
	            srcPath.splice(i, 1);
	            up++;
	          } else if (up) {
	            srcPath.splice(i, 1);
	            up--;
	          }
	        }
	
	        // if the path is allowed to go above the root, restore leading ..s
	        if (!mustEndAbs && !removeAllDots) {
	          for (; up--; up) {
	            srcPath.unshift('..');
	          }
	        }
	
	        if (mustEndAbs && srcPath[0] !== '' && (!srcPath[0] || srcPath[0].charAt(0) !== '/')) {
	          srcPath.unshift('');
	        }
	
	        if (hasTrailingSlash && srcPath.join('/').substr(-1) !== '/') {
	          srcPath.push('');
	        }
	
	        var isAbsolute = srcPath[0] === '' || srcPath[0] && srcPath[0].charAt(0) === '/';
	
	        // put the host back
	        if (psychotic) {
	          result.hostname = result.host = isAbsolute ? '' : srcPath.length ? srcPath.shift() : '';
	          //occationaly the auth can get stuck only in host
	          //this especially happens in cases like
	          //url.resolveObject('mailto:local1@domain1', 'local2@domain2')
	          var authInHost = result.host && result.host.indexOf('@') > 0 ? result.host.split('@') : false;
	          if (authInHost) {
	            result.auth = authInHost.shift();
	            result.host = result.hostname = authInHost.shift();
	          }
	        }
	
	        mustEndAbs = mustEndAbs || result.host && srcPath.length;
	
	        if (mustEndAbs && !isAbsolute) {
	          srcPath.unshift('');
	        }
	
	        if (!srcPath.length) {
	          result.pathname = null;
	          result.path = null;
	        } else {
	          result.pathname = srcPath.join('/');
	        }
	
	        //to support request.http
	        if (!util.isNull(result.pathname) || !util.isNull(result.search)) {
	          result.path = (result.pathname ? result.pathname : '') + (result.search ? result.search : '');
	        }
	        result.auth = relative.auth || result.auth;
	        result.slashes = result.slashes || relative.slashes;
	        result.href = result.format();
	        return result;
	      };
	
	      Url.prototype.parseHost = function () {
	        var host = this.host;
	        var port = portPattern.exec(host);
	        if (port) {
	          port = port[0];
	          if (port !== ':') {
	            this.port = port.substr(1);
	          }
	          host = host.substr(0, host.length - port.length);
	        }
	        if (host) this.hostname = host;
	      };
	    }, { "./util": 51, "punycode": 46, "querystring": 49 }], 51: [function (require, module, exports) {
	      'use strict';
	
	      module.exports = {
	        isString: function isString(arg) {
	          return typeof arg === 'string';
	        },
	        isObject: function isObject(arg) {
	          return (typeof arg === "undefined" ? "undefined" : _typeof(arg)) === 'object' && arg !== null;
	        },
	        isNull: function isNull(arg) {
	          return arg === null;
	        },
	        isNullOrUndefined: function isNullOrUndefined(arg) {
	          return arg == null;
	        }
	      };
	    }, {}], "ajv": [function (require, module, exports) {
	      'use strict';
	
	      var compileSchema = require('./compile'),
	          resolve = require('./compile/resolve'),
	          Cache = require('./cache'),
	          SchemaObject = require('./compile/schema_obj'),
	          stableStringify = require('json-stable-stringify'),
	          formats = require('./compile/formats'),
	          rules = require('./compile/rules'),
	          v5 = require('./v5'),
	          util = require('./compile/util'),
	          async = require('./async'),
	          co = require('co');
	
	      module.exports = Ajv;
	
	      Ajv.prototype.compileAsync = async.compile;
	
	      var customKeyword = require('./keyword');
	      Ajv.prototype.addKeyword = customKeyword.add;
	      Ajv.prototype.getKeyword = customKeyword.get;
	      Ajv.prototype.removeKeyword = customKeyword.remove;
	      Ajv.ValidationError = require('./compile/validation_error');
	
	      var META_SCHEMA_ID = 'http://json-schema.org/draft-04/schema';
	      var SCHEMA_URI_FORMAT = /^(?:(?:[a-z][a-z0-9+-.]*:)?\/\/)?[^\s]*$/i;
	      function SCHEMA_URI_FORMAT_FUNC(str) {
	        return SCHEMA_URI_FORMAT.test(str);
	      }
	
	      var META_IGNORE_OPTIONS = ['removeAdditional', 'useDefaults', 'coerceTypes'];
	
	      /**
	       * Creates validator instance.
	       * Usage: `Ajv(opts)`
	       * @param {Object} opts optional options
	       * @return {Object} ajv instance
	       */
	      function Ajv(opts) {
	        if (!(this instanceof Ajv)) return new Ajv(opts);
	        var self = this;
	
	        opts = this._opts = util.copy(opts) || {};
	        this._schemas = {};
	        this._refs = {};
	        this._fragments = {};
	        this._formats = formats(opts.format);
	        this._cache = opts.cache || new Cache();
	        this._loadingSchemas = {};
	        this._compilations = [];
	        this.RULES = rules();
	
	        // this is done on purpose, so that methods are bound to the instance
	        // (without using bind) so that they can be used without the instance
	        this.validate = validate;
	        this.compile = compile;
	        this.addSchema = addSchema;
	        this.addMetaSchema = addMetaSchema;
	        this.validateSchema = validateSchema;
	        this.getSchema = getSchema;
	        this.removeSchema = removeSchema;
	        this.addFormat = addFormat;
	        this.errorsText = errorsText;
	
	        this._addSchema = _addSchema;
	        this._compile = _compile;
	
	        opts.loopRequired = opts.loopRequired || Infinity;
	        if (opts.async || opts.transpile) async.setup(opts);
	        if (opts.beautify === true) opts.beautify = { indent_size: 2 };
	        if (opts.errorDataPath == 'property') opts._errorDataPathProperty = true;
	        this._metaOpts = getMetaSchemaOptions();
	
	        if (opts.formats) addInitialFormats();
	        addDraft4MetaSchema();
	        if (opts.v5) v5.enable(this);
	        if (_typeof(opts.meta) == 'object') addMetaSchema(opts.meta);
	        addInitialSchemas();
	
	        /**
	         * Validate data using schema
	         * Schema will be compiled and cached (using serialized JSON as key. [json-stable-stringify](https://github.com/substack/json-stable-stringify) is used to serialize.
	         * @param  {String|Object} schemaKeyRef key, ref or schema object
	         * @param  {Any} data to be validated
	         * @return {Boolean} validation result. Errors from the last validation will be available in `ajv.errors` (and also in compiled schema: `schema.errors`).
	         */
	        function validate(schemaKeyRef, data) {
	          var v;
	          if (typeof schemaKeyRef == 'string') {
	            v = getSchema(schemaKeyRef);
	            if (!v) throw new Error('no schema with key or ref "' + schemaKeyRef + '"');
	          } else {
	            var schemaObj = _addSchema(schemaKeyRef);
	            v = schemaObj.validate || _compile(schemaObj);
	          }
	
	          var valid = v(data);
	          if (v.$async === true) return self._opts.async == '*' ? co(valid) : valid;
	          self.errors = v.errors;
	          return valid;
	        }
	
	        /**
	         * Create validating function for passed schema.
	         * @param  {Object} schema schema object
	         * @param  {Boolean} _meta true if schema is a meta-schema. Used internally to compile meta schemas of custom keywords.
	         * @return {Function} validating function
	         */
	        function compile(schema, _meta) {
	          var schemaObj = _addSchema(schema, undefined, _meta);
	          return schemaObj.validate || _compile(schemaObj);
	        }
	
	        /**
	         * Adds schema to the instance.
	         * @param {Object|Array} schema schema or array of schemas. If array is passed, `key` and other parameters will be ignored.
	         * @param {String} key Optional schema key. Can be passed to `validate` method instead of schema object or id/ref. One schema per instance can have empty `id` and `key`.
	         * @param {Boolean} _skipValidation true to skip schema validation. Used internally, option validateSchema should be used instead.
	         * @param {Boolean} _meta true if schema is a meta-schema. Used internally, addMetaSchema should be used instead.
	         */
	        function addSchema(schema, key, _skipValidation, _meta) {
	          if (Array.isArray(schema)) {
	            for (var i = 0; i < schema.length; i++) {
	              addSchema(schema[i], undefined, _skipValidation, _meta);
	            }return;
	          }
	          // can key/id have # inside?
	          key = resolve.normalizeId(key || schema.id);
	          checkUnique(key);
	          self._schemas[key] = _addSchema(schema, _skipValidation, _meta, true);
	        }
	
	        /**
	         * Add schema that will be used to validate other schemas
	         * options in META_IGNORE_OPTIONS are alway set to false
	         * @param {Object} schema schema object
	         * @param {String} key optional schema key
	         * @param {Boolean} skipValidation true to skip schema validation, can be used to override validateSchema option for meta-schema
	         */
	        function addMetaSchema(schema, key, skipValidation) {
	          addSchema(schema, key, skipValidation, true);
	        }
	
	        /**
	         * Validate schema
	         * @param {Object} schema schema to validate
	         * @param {Boolean} throwOrLogError pass true to throw (or log) an error if invalid
	         * @return {Boolean} true if schema is valid
	         */
	        function validateSchema(schema, throwOrLogError) {
	          var $schema = schema.$schema || self._opts.defaultMeta || defaultMeta();
	          var currentUriFormat = self._formats.uri;
	          self._formats.uri = typeof currentUriFormat == 'function' ? SCHEMA_URI_FORMAT_FUNC : SCHEMA_URI_FORMAT;
	          var valid;
	          try {
	            valid = validate($schema, schema);
	          } finally {
	            self._formats.uri = currentUriFormat;
	          }
	          if (!valid && throwOrLogError) {
	            var message = 'schema is invalid: ' + errorsText();
	            if (self._opts.validateSchema == 'log') console.error(message);else throw new Error(message);
	          }
	          return valid;
	        }
	
	        function defaultMeta() {
	          var meta = self._opts.meta;
	          self._opts.defaultMeta = (typeof meta === "undefined" ? "undefined" : _typeof(meta)) == 'object' ? meta.id || meta : self._opts.v5 ? v5.META_SCHEMA_ID : META_SCHEMA_ID;
	          return self._opts.defaultMeta;
	        }
	
	        /**
	         * Get compiled schema from the instance by `key` or `ref`.
	         * @param  {String} keyRef `key` that was passed to `addSchema` or full schema reference (`schema.id` or resolved id).
	         * @return {Function} schema validating function (with property `schema`).
	         */
	        function getSchema(keyRef) {
	          var schemaObj = _getSchemaObj(keyRef);
	          switch (typeof schemaObj === "undefined" ? "undefined" : _typeof(schemaObj)) {
	            case 'object':
	              return schemaObj.validate || _compile(schemaObj);
	            case 'string':
	              return getSchema(schemaObj);
	            case 'undefined':
	              return _getSchemaFragment(keyRef);
	          }
	        }
	
	        function _getSchemaFragment(ref) {
	          var res = resolve.schema.call(self, { schema: {} }, ref);
	          if (res) {
	            var schema = res.schema,
	                root = res.root,
	                baseId = res.baseId;
	            var v = compileSchema.call(self, schema, root, undefined, baseId);
	            self._fragments[ref] = new SchemaObject({
	              ref: ref,
	              fragment: true,
	              schema: schema,
	              root: root,
	              baseId: baseId,
	              validate: v
	            });
	            return v;
	          }
	        }
	
	        function _getSchemaObj(keyRef) {
	          keyRef = resolve.normalizeId(keyRef);
	          return self._schemas[keyRef] || self._refs[keyRef] || self._fragments[keyRef];
	        }
	
	        /**
	         * Remove cached schema(s).
	         * If no parameter is passed all schemas but meta-schemas are removed.
	         * If RegExp is passed all schemas with key/id matching pattern but meta-schemas are removed.
	         * Even if schema is referenced by other schemas it still can be removed as other schemas have local references.
	         * @param  {String|Object|RegExp} schemaKeyRef key, ref, pattern to match key/ref or schema object
	         */
	        function removeSchema(schemaKeyRef) {
	          if (schemaKeyRef instanceof RegExp) {
	            _removeAllSchemas(self._schemas, schemaKeyRef);
	            _removeAllSchemas(self._refs, schemaKeyRef);
	            return;
	          }
	          switch (typeof schemaKeyRef === "undefined" ? "undefined" : _typeof(schemaKeyRef)) {
	            case 'undefined':
	              _removeAllSchemas(self._schemas);
	              _removeAllSchemas(self._refs);
	              self._cache.clear();
	              return;
	            case 'string':
	              var schemaObj = _getSchemaObj(schemaKeyRef);
	              if (schemaObj) self._cache.del(schemaObj.jsonStr);
	              delete self._schemas[schemaKeyRef];
	              delete self._refs[schemaKeyRef];
	              return;
	            case 'object':
	              var jsonStr = stableStringify(schemaKeyRef);
	              self._cache.del(jsonStr);
	              var id = schemaKeyRef.id;
	              if (id) {
	                id = resolve.normalizeId(id);
	                delete self._schemas[id];
	                delete self._refs[id];
	              }
	          }
	        }
	
	        function _removeAllSchemas(schemas, regex) {
	          for (var keyRef in schemas) {
	            var schemaObj = schemas[keyRef];
	            if (!schemaObj.meta && (!regex || regex.test(keyRef))) {
	              self._cache.del(schemaObj.jsonStr);
	              delete schemas[keyRef];
	            }
	          }
	        }
	
	        function _addSchema(schema, skipValidation, meta, shouldAddSchema) {
	          if ((typeof schema === "undefined" ? "undefined" : _typeof(schema)) != 'object') throw new Error('schema should be object');
	          var jsonStr = stableStringify(schema);
	          var cached = self._cache.get(jsonStr);
	          if (cached) return cached;
	
	          shouldAddSchema = shouldAddSchema || self._opts.addUsedSchema !== false;
	
	          var id = resolve.normalizeId(schema.id);
	          if (id && shouldAddSchema) checkUnique(id);
	
	          var willValidate = self._opts.validateSchema !== false && !skipValidation;
	          var recursiveMeta;
	          if (willValidate && !(recursiveMeta = schema.id && schema.id == schema.$schema)) validateSchema(schema, true);
	
	          var localRefs = resolve.ids.call(self, schema);
	
	          var schemaObj = new SchemaObject({
	            id: id,
	            schema: schema,
	            localRefs: localRefs,
	            jsonStr: jsonStr,
	            meta: meta
	          });
	
	          if (id[0] != '#' && shouldAddSchema) self._refs[id] = schemaObj;
	          self._cache.put(jsonStr, schemaObj);
	
	          if (willValidate && recursiveMeta) validateSchema(schema, true);
	
	          return schemaObj;
	        }
	
	        function _compile(schemaObj, root) {
	          if (schemaObj.compiling) {
	            schemaObj.validate = callValidate;
	            callValidate.schema = schemaObj.schema;
	            callValidate.errors = null;
	            callValidate.root = root ? root : callValidate;
	            if (schemaObj.schema.$async === true) callValidate.$async = true;
	            return callValidate;
	          }
	          schemaObj.compiling = true;
	
	          var currentOpts;
	          if (schemaObj.meta) {
	            currentOpts = self._opts;
	            self._opts = self._metaOpts;
	          }
	
	          var v;
	          try {
	            v = compileSchema.call(self, schemaObj.schema, root, schemaObj.localRefs);
	          } finally {
	            schemaObj.compiling = false;
	            if (schemaObj.meta) self._opts = currentOpts;
	          }
	
	          schemaObj.validate = v;
	          schemaObj.refs = v.refs;
	          schemaObj.refVal = v.refVal;
	          schemaObj.root = v.root;
	          return v;
	
	          function callValidate() {
	            var _validate = schemaObj.validate;
	            var result = _validate.apply(null, arguments);
	            callValidate.errors = _validate.errors;
	            return result;
	          }
	        }
	
	        /**
	         * Convert array of error message objects to string
	         * @param  {Array<Object>} errors optional array of validation errors, if not passed errors from the instance are used.
	         * @param  {Object} options optional options with properties `separator` and `dataVar`.
	         * @return {String} human readable string with all errors descriptions
	         */
	        function errorsText(errors, options) {
	          errors = errors || self.errors;
	          if (!errors) return 'No errors';
	          options = options || {};
	          var separator = options.separator === undefined ? ', ' : options.separator;
	          var dataVar = options.dataVar === undefined ? 'data' : options.dataVar;
	
	          var text = '';
	          for (var i = 0; i < errors.length; i++) {
	            var e = errors[i];
	            if (e) text += dataVar + e.dataPath + ' ' + e.message + separator;
	          }
	          return text.slice(0, -separator.length);
	        }
	
	        /**
	         * Add custom format
	         * @param {String} name format name
	         * @param {String|RegExp|Function} format string is converted to RegExp; function should return boolean (true when valid)
	         */
	        function addFormat(name, format) {
	          if (typeof format == 'string') format = new RegExp(format);
	          self._formats[name] = format;
	        }
	
	        function addDraft4MetaSchema() {
	          if (self._opts.meta !== false) {
	            var metaSchema = require('./refs/json-schema-draft-04.json');
	            addMetaSchema(metaSchema, META_SCHEMA_ID, true);
	            self._refs['http://json-schema.org/schema'] = META_SCHEMA_ID;
	          }
	        }
	
	        function addInitialSchemas() {
	          var optsSchemas = self._opts.schemas;
	          if (!optsSchemas) return;
	          if (Array.isArray(optsSchemas)) addSchema(optsSchemas);else for (var key in optsSchemas) {
	            addSchema(optsSchemas[key], key);
	          }
	        }
	
	        function addInitialFormats() {
	          for (var name in self._opts.formats) {
	            var format = self._opts.formats[name];
	            addFormat(name, format);
	          }
	        }
	
	        function checkUnique(id) {
	          if (self._schemas[id] || self._refs[id]) throw new Error('schema with key or id "' + id + '" already exists');
	        }
	
	        function getMetaSchemaOptions() {
	          var metaOpts = util.copy(self._opts);
	          for (var i = 0; i < META_IGNORE_OPTIONS.length; i++) {
	            delete metaOpts[META_IGNORE_OPTIONS[i]];
	          }return metaOpts;
	        }
	      }
	    }, { "./async": 1, "./cache": 2, "./compile": 6, "./compile/formats": 5, "./compile/resolve": 7, "./compile/rules": 8, "./compile/schema_obj": 9, "./compile/util": 11, "./compile/validation_error": 12, "./keyword": 37, "./refs/json-schema-draft-04.json": 38, "./v5": 40, "co": 41, "json-stable-stringify": 42 }] }, {}, [])("ajv");
	});
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ }),
/* 568 */
/***/ (function(module, exports) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = HARError;
	function HARError(errors) {
	  var message = 'validation failed';
	
	  this.name = 'HARError';
	  this.message = message;
	  this.errors = errors;
	
	  if (typeof Error.captureStackTrace === 'function') {
	    Error.captureStackTrace(this, this.constructor);
	  } else {
	    this.stack = new Error(message).stack;
	  }
	}
	
	HARError.prototype = Error.prototype;
	module.exports = exports['default'];

/***/ }),
/* 569 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var caseless = __webpack_require__(534),
	    uuid = __webpack_require__(570),
	    helpers = __webpack_require__(460);
	
	var md5 = helpers.md5,
	    toBase64 = helpers.toBase64;
	
	function Auth(request) {
	  // define all public properties here
	  this.request = request;
	  this.hasAuth = false;
	  this.sentAuth = false;
	  this.bearerToken = null;
	  this.user = null;
	  this.pass = null;
	}
	
	Auth.prototype.basic = function (user, pass, sendImmediately) {
	  var self = this;
	  if (typeof user !== 'string' || pass !== undefined && typeof pass !== 'string') {
	    self.request.emit('error', new Error('auth() received invalid user or password'));
	  }
	  self.user = user;
	  self.pass = pass;
	  self.hasAuth = true;
	  var header = user + ':' + (pass || '');
	  if (sendImmediately || typeof sendImmediately === 'undefined') {
	    var authHeader = 'Basic ' + toBase64(header);
	    self.sentAuth = true;
	    return authHeader;
	  }
	};
	
	Auth.prototype.bearer = function (bearer, sendImmediately) {
	  var self = this;
	  self.bearerToken = bearer;
	  self.hasAuth = true;
	  if (sendImmediately || typeof sendImmediately === 'undefined') {
	    if (typeof bearer === 'function') {
	      bearer = bearer();
	    }
	    var authHeader = 'Bearer ' + (bearer || '');
	    self.sentAuth = true;
	    return authHeader;
	  }
	};
	
	Auth.prototype.digest = function (method, path, authHeader) {
	  // TODO: More complete implementation of RFC 2617.
	  //   - handle challenge.domain
	  //   - support qop="auth-int" only
	  //   - handle Authentication-Info (not necessarily?)
	  //   - check challenge.stale (not necessarily?)
	  //   - increase nc (not necessarily?)
	  // For reference:
	  // http://tools.ietf.org/html/rfc2617#section-3
	  // https://github.com/bagder/curl/blob/master/lib/http_digest.c
	
	  var self = this;
	
	  var challenge = {};
	  var re = /([a-z0-9_-]+)=(?:"([^"]+)"|([a-z0-9_-]+))/gi;
	  for (;;) {
	    var match = re.exec(authHeader);
	    if (!match) {
	      break;
	    }
	    challenge[match[1]] = match[2] || match[3];
	  }
	
	  /**
	   * RFC 2617: handle both MD5 and MD5-sess algorithms.
	   *
	   * If the algorithm directive's value is "MD5" or unspecified, then HA1 is
	   *   HA1=MD5(username:realm:password)
	   * If the algorithm directive's value is "MD5-sess", then HA1 is
	   *   HA1=MD5(MD5(username:realm:password):nonce:cnonce)
	   */
	  var ha1Compute = function ha1Compute(algorithm, user, realm, pass, nonce, cnonce) {
	    var ha1 = md5(user + ':' + realm + ':' + pass);
	    if (algorithm && algorithm.toLowerCase() === 'md5-sess') {
	      return md5(ha1 + ':' + nonce + ':' + cnonce);
	    } else {
	      return ha1;
	    }
	  };
	
	  var qop = /(^|,)\s*auth\s*($|,)/.test(challenge.qop) && 'auth';
	  var nc = qop && '00000001';
	  var cnonce = qop && uuid().replace(/-/g, '');
	  var ha1 = ha1Compute(challenge.algorithm, self.user, challenge.realm, self.pass, challenge.nonce, cnonce);
	  var ha2 = md5(method + ':' + path);
	  var digestResponse = qop ? md5(ha1 + ':' + challenge.nonce + ':' + nc + ':' + cnonce + ':' + qop + ':' + ha2) : md5(ha1 + ':' + challenge.nonce + ':' + ha2);
	  var authValues = {
	    username: self.user,
	    realm: challenge.realm,
	    nonce: challenge.nonce,
	    uri: path,
	    qop: qop,
	    response: digestResponse,
	    nc: nc,
	    cnonce: cnonce,
	    algorithm: challenge.algorithm,
	    opaque: challenge.opaque
	  };
	
	  authHeader = [];
	  for (var k in authValues) {
	    if (authValues[k]) {
	      if (k === 'qop' || k === 'nc' || k === 'algorithm') {
	        authHeader.push(k + '=' + authValues[k]);
	      } else {
	        authHeader.push(k + '="' + authValues[k] + '"');
	      }
	    }
	  }
	  authHeader = 'Digest ' + authHeader.join(', ');
	  self.sentAuth = true;
	  return authHeader;
	};
	
	Auth.prototype.onRequest = function (user, pass, sendImmediately, bearer) {
	  var self = this,
	      request = self.request;
	
	  var authHeader;
	  if (bearer === undefined && user === undefined) {
	    self.request.emit('error', new Error('no auth mechanism defined'));
	  } else if (bearer !== undefined) {
	    authHeader = self.bearer(bearer, sendImmediately);
	  } else {
	    authHeader = self.basic(user, pass, sendImmediately);
	  }
	  if (authHeader) {
	    request.setHeader('authorization', authHeader);
	  }
	};
	
	Auth.prototype.onResponse = function (response) {
	  var self = this,
	      request = self.request;
	
	  if (!self.hasAuth || self.sentAuth) {
	    return null;
	  }
	
	  var c = caseless(response.headers);
	
	  var authHeader = c.get('www-authenticate');
	  var authVerb = authHeader && authHeader.split(' ')[0].toLowerCase();
	  request.debug('reauth', authVerb);
	
	  switch (authVerb) {
	    case 'basic':
	      return self.basic(self.user, self.pass, true);
	
	    case 'bearer':
	      return self.bearer(self.bearerToken, true);
	
	    case 'digest':
	      return self.digest(request.method, request.path, authHeader);
	  }
	};
	
	exports.Auth = Auth;

/***/ }),
/* 570 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var v1 = __webpack_require__(571);
	var v4 = __webpack_require__(574);
	
	var uuid = v4;
	uuid.v1 = v1;
	uuid.v4 = v4;
	
	module.exports = uuid;

/***/ }),
/* 571 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	// Unique ID creation requires a high quality random # generator.  We feature
	// detect to determine the best RNG source, normalizing to a function that
	// returns 128-bits of randomness, since that's what's usually required
	var rng = __webpack_require__(572);
	var bytesToUuid = __webpack_require__(573);
	
	// **`v1()` - Generate time-based UUID**
	//
	// Inspired by https://github.com/LiosK/UUID.js
	// and http://docs.python.org/library/uuid.html
	
	// random #'s we need to init node and clockseq
	var _seedBytes = rng();
	
	// Per 4.5, create and 48-bit node id, (47 random bits + multicast bit = 1)
	var _nodeId = [_seedBytes[0] | 0x01, _seedBytes[1], _seedBytes[2], _seedBytes[3], _seedBytes[4], _seedBytes[5]];
	
	// Per 4.2.2, randomize (14 bit) clockseq
	var _clockseq = (_seedBytes[6] << 8 | _seedBytes[7]) & 0x3fff;
	
	// Previous uuid creation time
	var _lastMSecs = 0,
	    _lastNSecs = 0;
	
	// See https://github.com/broofa/node-uuid for API details
	function v1(options, buf, offset) {
	  var i = buf && offset || 0;
	  var b = buf || [];
	
	  options = options || {};
	
	  var clockseq = options.clockseq !== undefined ? options.clockseq : _clockseq;
	
	  // UUID timestamps are 100 nano-second units since the Gregorian epoch,
	  // (1582-10-15 00:00).  JSNumbers aren't precise enough for this, so
	  // time is handled internally as 'msecs' (integer milliseconds) and 'nsecs'
	  // (100-nanoseconds offset from msecs) since unix epoch, 1970-01-01 00:00.
	  var msecs = options.msecs !== undefined ? options.msecs : new Date().getTime();
	
	  // Per 4.2.1.2, use count of uuid's generated during the current clock
	  // cycle to simulate higher resolution clock
	  var nsecs = options.nsecs !== undefined ? options.nsecs : _lastNSecs + 1;
	
	  // Time since last uuid creation (in msecs)
	  var dt = msecs - _lastMSecs + (nsecs - _lastNSecs) / 10000;
	
	  // Per 4.2.1.2, Bump clockseq on clock regression
	  if (dt < 0 && options.clockseq === undefined) {
	    clockseq = clockseq + 1 & 0x3fff;
	  }
	
	  // Reset nsecs if clock regresses (new clockseq) or we've moved onto a new
	  // time interval
	  if ((dt < 0 || msecs > _lastMSecs) && options.nsecs === undefined) {
	    nsecs = 0;
	  }
	
	  // Per 4.2.1.2 Throw error if too many uuids are requested
	  if (nsecs >= 10000) {
	    throw new Error('uuid.v1(): Can\'t create more than 10M uuids/sec');
	  }
	
	  _lastMSecs = msecs;
	  _lastNSecs = nsecs;
	  _clockseq = clockseq;
	
	  // Per 4.1.4 - Convert from unix epoch to Gregorian epoch
	  msecs += 12219292800000;
	
	  // `time_low`
	  var tl = ((msecs & 0xfffffff) * 10000 + nsecs) % 0x100000000;
	  b[i++] = tl >>> 24 & 0xff;
	  b[i++] = tl >>> 16 & 0xff;
	  b[i++] = tl >>> 8 & 0xff;
	  b[i++] = tl & 0xff;
	
	  // `time_mid`
	  var tmh = msecs / 0x100000000 * 10000 & 0xfffffff;
	  b[i++] = tmh >>> 8 & 0xff;
	  b[i++] = tmh & 0xff;
	
	  // `time_high_and_version`
	  b[i++] = tmh >>> 24 & 0xf | 0x10; // include version
	  b[i++] = tmh >>> 16 & 0xff;
	
	  // `clock_seq_hi_and_reserved` (Per 4.2.2 - include variant)
	  b[i++] = clockseq >>> 8 | 0x80;
	
	  // `clock_seq_low`
	  b[i++] = clockseq & 0xff;
	
	  // `node`
	  var node = options.node || _nodeId;
	  for (var n = 0; n < 6; ++n) {
	    b[i + n] = node[n];
	  }
	
	  return buf ? buf : bytesToUuid(b);
	}
	
	module.exports = v1;

/***/ }),
/* 572 */
/***/ (function(module, exports) {

	/* WEBPACK VAR INJECTION */(function(global) {"use strict";
	
	// Unique ID creation requires a high quality random # generator.  In the
	// browser this is a little complicated due to unknown quality of Math.random()
	// and inconsistent support for the `crypto` API.  We do the best we can via
	// feature-detection
	var rng;
	
	var crypto = global.crypto || global.msCrypto; // for IE 11
	if (crypto && crypto.getRandomValues) {
	  // WHATWG crypto RNG - http://wiki.whatwg.org/wiki/Crypto
	  var rnds8 = new Uint8Array(16);
	  rng = function whatwgRNG() {
	    crypto.getRandomValues(rnds8);
	    return rnds8;
	  };
	}
	
	if (!rng) {
	  // Math.random()-based (RNG)
	  //
	  // If all else fails, use Math.random().  It's fast, but is of unspecified
	  // quality.
	  var rnds = new Array(16);
	  rng = function rng() {
	    for (var i = 0, r; i < 16; i++) {
	      if ((i & 0x03) === 0) r = Math.random() * 0x100000000;
	      rnds[i] = r >>> ((i & 0x03) << 3) & 0xff;
	    }
	
	    return rnds;
	  };
	}
	
	module.exports = rng;
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ }),
/* 573 */
/***/ (function(module, exports) {

	'use strict';
	
	/**
	 * Convert array of 16 byte values to UUID string format of the form:
	 * XXXXXXXX-XXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX
	 */
	var byteToHex = [];
	for (var i = 0; i < 256; ++i) {
	  byteToHex[i] = (i + 0x100).toString(16).substr(1);
	}
	
	function bytesToUuid(buf, offset) {
	  var i = offset || 0;
	  var bth = byteToHex;
	  return bth[buf[i++]] + bth[buf[i++]] + bth[buf[i++]] + bth[buf[i++]] + '-' + bth[buf[i++]] + bth[buf[i++]] + '-' + bth[buf[i++]] + bth[buf[i++]] + '-' + bth[buf[i++]] + bth[buf[i++]] + '-' + bth[buf[i++]] + bth[buf[i++]] + bth[buf[i++]] + bth[buf[i++]] + bth[buf[i++]] + bth[buf[i++]];
	}
	
	module.exports = bytesToUuid;

/***/ }),
/* 574 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var rng = __webpack_require__(572);
	var bytesToUuid = __webpack_require__(573);
	
	function v4(options, buf, offset) {
	  var i = buf && offset || 0;
	
	  if (typeof options == 'string') {
	    buf = options == 'binary' ? new Array(16) : null;
	    options = null;
	  }
	  options = options || {};
	
	  var rnds = options.random || (options.rng || rng)();
	
	  // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`
	  rnds[6] = rnds[6] & 0x0f | 0x40;
	  rnds[8] = rnds[8] & 0x3f | 0x80;
	
	  // Copy bytes to buffer, if provided
	  if (buf) {
	    for (var ii = 0; ii < 16; ++ii) {
	      buf[i + ii] = rnds[ii];
	    }
	  }
	
	  return buf || bytesToUuid(rnds);
	}
	
	module.exports = v4;

/***/ }),
/* 575 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var url = __webpack_require__(275),
	    qs = __webpack_require__(541),
	    caseless = __webpack_require__(534),
	    uuid = __webpack_require__(570),
	    oauth = __webpack_require__(576),
	    crypto = __webpack_require__(392),
	    Buffer = __webpack_require__(462).Buffer;
	
	function OAuth(request) {
	  this.request = request;
	  this.params = null;
	}
	
	OAuth.prototype.buildParams = function (_oauth, uri, method, query, form, qsLib) {
	  var oa = {};
	  for (var i in _oauth) {
	    oa['oauth_' + i] = _oauth[i];
	  }
	  if (!oa.oauth_version) {
	    oa.oauth_version = '1.0';
	  }
	  if (!oa.oauth_timestamp) {
	    oa.oauth_timestamp = Math.floor(Date.now() / 1000).toString();
	  }
	  if (!oa.oauth_nonce) {
	    oa.oauth_nonce = uuid().replace(/-/g, '');
	  }
	  if (!oa.oauth_signature_method) {
	    oa.oauth_signature_method = 'HMAC-SHA1';
	  }
	
	  var consumer_secret_or_private_key = oa.oauth_consumer_secret || oa.oauth_private_key;
	  delete oa.oauth_consumer_secret;
	  delete oa.oauth_private_key;
	
	  var token_secret = oa.oauth_token_secret;
	  delete oa.oauth_token_secret;
	
	  var realm = oa.oauth_realm;
	  delete oa.oauth_realm;
	  delete oa.oauth_transport_method;
	
	  var baseurl = uri.protocol + '//' + uri.host + uri.pathname;
	  var params = qsLib.parse([].concat(query, form, qsLib.stringify(oa)).join('&'));
	
	  oa.oauth_signature = oauth.sign(oa.oauth_signature_method, method, baseurl, params, consumer_secret_or_private_key, token_secret);
	
	  if (realm) {
	    oa.realm = realm;
	  }
	
	  return oa;
	};
	
	OAuth.prototype.buildBodyHash = function (_oauth, body) {
	  if (['HMAC-SHA1', 'RSA-SHA1'].indexOf(_oauth.signature_method || 'HMAC-SHA1') < 0) {
	    this.request.emit('error', new Error('oauth: ' + _oauth.signature_method + ' signature_method not supported with body_hash signing.'));
	  }
	
	  var shasum = crypto.createHash('sha1');
	  shasum.update(body || '');
	  var sha1 = shasum.digest('hex');
	
	  return Buffer.from(sha1).toString('base64');
	};
	
	OAuth.prototype.concatParams = function (oa, sep, wrap) {
	  wrap = wrap || '';
	
	  var params = Object.keys(oa).filter(function (i) {
	    return i !== 'realm' && i !== 'oauth_signature';
	  }).sort();
	
	  if (oa.realm) {
	    params.splice(0, 0, 'realm');
	  }
	  params.push('oauth_signature');
	
	  return params.map(function (i) {
	    return i + '=' + wrap + oauth.rfc3986(oa[i]) + wrap;
	  }).join(sep);
	};
	
	OAuth.prototype.onRequest = function (_oauth) {
	  var self = this;
	  self.params = _oauth;
	
	  var uri = self.request.uri || {},
	      method = self.request.method || '',
	      headers = caseless(self.request.headers),
	      body = self.request.body || '',
	      qsLib = self.request.qsLib || qs;
	
	  var form,
	      query,
	      contentType = headers.get('content-type') || '',
	      formContentType = 'application/x-www-form-urlencoded',
	      transport = _oauth.transport_method || 'header';
	
	  if (contentType.slice(0, formContentType.length) === formContentType) {
	    contentType = formContentType;
	    form = body;
	  }
	  if (uri.query) {
	    query = uri.query;
	  }
	  if (transport === 'body' && (method !== 'POST' || contentType !== formContentType)) {
	    self.request.emit('error', new Error('oauth: transport_method of body requires POST ' + 'and content-type ' + formContentType));
	  }
	
	  if (!form && typeof _oauth.body_hash === 'boolean') {
	    _oauth.body_hash = self.buildBodyHash(_oauth, self.request.body.toString());
	  }
	
	  var oa = self.buildParams(_oauth, uri, method, query, form, qsLib);
	
	  switch (transport) {
	    case 'header':
	      self.request.setHeader('Authorization', 'OAuth ' + self.concatParams(oa, ',', '"'));
	      break;
	
	    case 'query':
	      var href = self.request.uri.href += (query ? '&' : '?') + self.concatParams(oa, '&');
	      self.request.uri = url.parse(href);
	      self.request.path = self.request.uri.path;
	      break;
	
	    case 'body':
	      self.request.body = (form ? form + '&' : '') + self.concatParams(oa, '&');
	      break;
	
	    default:
	      self.request.emit('error', new Error('oauth: transport_method invalid'));
	  }
	};
	
	exports.OAuth = OAuth;

/***/ }),
/* 576 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
	
	var crypto = __webpack_require__(392),
	    qs = __webpack_require__(279);
	
	function sha1(key, body) {
	  return crypto.createHmac('sha1', key).update(body).digest('base64');
	}
	
	function rsa(key, body) {
	  return crypto.createSign("RSA-SHA1").update(body).sign(key, 'base64');
	}
	
	function rfc3986(str) {
	  return encodeURIComponent(str).replace(/!/g, '%21').replace(/\*/g, '%2A').replace(/\(/g, '%28').replace(/\)/g, '%29').replace(/'/g, '%27');
	}
	
	// Maps object to bi-dimensional array
	// Converts { foo: 'A', bar: [ 'b', 'B' ]} to
	// [ ['foo', 'A'], ['bar', 'b'], ['bar', 'B'] ]
	function map(obj) {
	  var key,
	      val,
	      arr = [];
	  for (key in obj) {
	    val = obj[key];
	    if (Array.isArray(val)) for (var i = 0; i < val.length; i++) {
	      arr.push([key, val[i]]);
	    } else if ((typeof val === 'undefined' ? 'undefined' : _typeof(val)) === "object") for (var prop in val) {
	      arr.push([key + '[' + prop + ']', val[prop]]);
	    } else arr.push([key, val]);
	  }
	  return arr;
	}
	
	// Compare function for sort
	function compare(a, b) {
	  return a > b ? 1 : a < b ? -1 : 0;
	}
	
	function generateBase(httpMethod, base_uri, params) {
	  // adapted from https://dev.twitter.com/docs/auth/oauth and 
	  // https://dev.twitter.com/docs/auth/creating-signature
	
	  // Parameter normalization
	  // http://tools.ietf.org/html/rfc5849#section-3.4.1.3.2
	  var normalized = map(params)
	  // 1.  First, the name and value of each parameter are encoded
	  .map(function (p) {
	    return [rfc3986(p[0]), rfc3986(p[1] || '')];
	  })
	  // 2.  The parameters are sorted by name, using ascending byte value
	  //     ordering.  If two or more parameters share the same name, they
	  //     are sorted by their value.
	  .sort(function (a, b) {
	    return compare(a[0], b[0]) || compare(a[1], b[1]);
	  })
	  // 3.  The name of each parameter is concatenated to its corresponding
	  //     value using an "=" character (ASCII code 61) as a separator, even
	  //     if the value is empty.
	  .map(function (p) {
	    return p.join('=');
	  })
	  // 4.  The sorted name/value pairs are concatenated together into a
	  //     single string by using an "&" character (ASCII code 38) as
	  //     separator.
	  .join('&');
	
	  var base = [rfc3986(httpMethod ? httpMethod.toUpperCase() : 'GET'), rfc3986(base_uri), rfc3986(normalized)].join('&');
	
	  return base;
	}
	
	function hmacsign(httpMethod, base_uri, params, consumer_secret, token_secret) {
	  var base = generateBase(httpMethod, base_uri, params);
	  var key = [consumer_secret || '', token_secret || ''].map(rfc3986).join('&');
	
	  return sha1(key, base);
	}
	
	function rsasign(httpMethod, base_uri, params, private_key, token_secret) {
	  var base = generateBase(httpMethod, base_uri, params);
	  var key = private_key || '';
	
	  return rsa(key, base);
	}
	
	function plaintext(consumer_secret, token_secret) {
	  var key = [consumer_secret || '', token_secret || ''].map(rfc3986).join('&');
	
	  return key;
	}
	
	function sign(signMethod, httpMethod, base_uri, params, consumer_secret, token_secret) {
	  var method;
	  var skipArgs = 1;
	
	  switch (signMethod) {
	    case 'RSA-SHA1':
	      method = rsasign;
	      break;
	    case 'HMAC-SHA1':
	      method = hmacsign;
	      break;
	    case 'PLAINTEXT':
	      method = plaintext;
	      skipArgs = 4;
	      break;
	    default:
	      throw new Error("Signature method not supported: " + signMethod);
	  }
	
	  return method.apply(null, [].slice.call(arguments, skipArgs));
	}
	
	exports.hmacsign = hmacsign;
	exports.rsasign = rsasign;
	exports.plaintext = plaintext;
	exports.sign = sign;
	exports.rfc3986 = rfc3986;
	exports.generateBase = generateBase;

/***/ }),
/* 577 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var uuid = __webpack_require__(570),
	    CombinedStream = __webpack_require__(578),
	    isstream = __webpack_require__(537),
	    Buffer = __webpack_require__(462).Buffer;
	
	function Multipart(request) {
	  this.request = request;
	  this.boundary = uuid();
	  this.chunked = false;
	  this.body = null;
	}
	
	Multipart.prototype.isChunked = function (options) {
	  var self = this,
	      chunked = false,
	      parts = options.data || options;
	
	  if (!parts.forEach) {
	    self.request.emit('error', new Error('Argument error, options.multipart.'));
	  }
	
	  if (options.chunked !== undefined) {
	    chunked = options.chunked;
	  }
	
	  if (self.request.getHeader('transfer-encoding') === 'chunked') {
	    chunked = true;
	  }
	
	  if (!chunked) {
	    parts.forEach(function (part) {
	      if (typeof part.body === 'undefined') {
	        self.request.emit('error', new Error('Body attribute missing in multipart.'));
	      }
	      if (isstream(part.body)) {
	        chunked = true;
	      }
	    });
	  }
	
	  return chunked;
	};
	
	Multipart.prototype.setHeaders = function (chunked) {
	  var self = this;
	
	  if (chunked && !self.request.hasHeader('transfer-encoding')) {
	    self.request.setHeader('transfer-encoding', 'chunked');
	  }
	
	  var header = self.request.getHeader('content-type');
	
	  if (!header || header.indexOf('multipart') === -1) {
	    self.request.setHeader('content-type', 'multipart/related; boundary=' + self.boundary);
	  } else {
	    if (header.indexOf('boundary') !== -1) {
	      self.boundary = header.replace(/.*boundary=([^\s;]+).*/, '$1');
	    } else {
	      self.request.setHeader('content-type', header + '; boundary=' + self.boundary);
	    }
	  }
	};
	
	Multipart.prototype.build = function (parts, chunked) {
	  var self = this;
	  var body = chunked ? new CombinedStream() : [];
	
	  function add(part) {
	    if (typeof part === 'number') {
	      part = part.toString();
	    }
	    return chunked ? body.append(part) : body.push(Buffer.from(part));
	  }
	
	  if (self.request.preambleCRLF) {
	    add('\r\n');
	  }
	
	  parts.forEach(function (part) {
	    var preamble = '--' + self.boundary + '\r\n';
	    Object.keys(part).forEach(function (key) {
	      if (key === 'body') {
	        return;
	      }
	      preamble += key + ': ' + part[key] + '\r\n';
	    });
	    preamble += '\r\n';
	    add(preamble);
	    add(part.body);
	    add('\r\n');
	  });
	  add('--' + self.boundary + '--');
	
	  if (self.request.postambleCRLF) {
	    add('\r\n');
	  }
	
	  return body;
	};
	
	Multipart.prototype.onRequest = function (options) {
	  var self = this;
	
	  var chunked = self.isChunked(options),
	      parts = options.data || options;
	
	  self.setHeaders(chunked);
	  self.chunked = chunked;
	  self.body = self.build(parts, chunked);
	};
	
	exports.Multipart = Multipart;

/***/ }),
/* 578 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {'use strict';
	
	var util = __webpack_require__(271);
	var Stream = __webpack_require__(282).Stream;
	var DelayedStream = __webpack_require__(579);
	
	module.exports = CombinedStream;
	function CombinedStream() {
	  this.writable = false;
	  this.readable = true;
	  this.dataSize = 0;
	  this.maxDataSize = 2 * 1024 * 1024;
	  this.pauseStreams = true;
	
	  this._released = false;
	  this._streams = [];
	  this._currentStream = null;
	}
	util.inherits(CombinedStream, Stream);
	
	CombinedStream.create = function (options) {
	  var combinedStream = new this();
	
	  options = options || {};
	  for (var option in options) {
	    combinedStream[option] = options[option];
	  }
	
	  return combinedStream;
	};
	
	CombinedStream.isStreamLike = function (stream) {
	  return typeof stream !== 'function' && typeof stream !== 'string' && typeof stream !== 'boolean' && typeof stream !== 'number' && !Buffer.isBuffer(stream);
	};
	
	CombinedStream.prototype.append = function (stream) {
	  var isStreamLike = CombinedStream.isStreamLike(stream);
	
	  if (isStreamLike) {
	    if (!(stream instanceof DelayedStream)) {
	      var newStream = DelayedStream.create(stream, {
	        maxDataSize: Infinity,
	        pauseStream: this.pauseStreams
	      });
	      stream.on('data', this._checkDataSize.bind(this));
	      stream = newStream;
	    }
	
	    this._handleErrors(stream);
	
	    if (this.pauseStreams) {
	      stream.pause();
	    }
	  }
	
	  this._streams.push(stream);
	  return this;
	};
	
	CombinedStream.prototype.pipe = function (dest, options) {
	  Stream.prototype.pipe.call(this, dest, options);
	  this.resume();
	  return dest;
	};
	
	CombinedStream.prototype._getNext = function () {
	  this._currentStream = null;
	  var stream = this._streams.shift();
	
	  if (typeof stream == 'undefined') {
	    this.end();
	    return;
	  }
	
	  if (typeof stream !== 'function') {
	    this._pipeNext(stream);
	    return;
	  }
	
	  var getStream = stream;
	  getStream(function (stream) {
	    var isStreamLike = CombinedStream.isStreamLike(stream);
	    if (isStreamLike) {
	      stream.on('data', this._checkDataSize.bind(this));
	      this._handleErrors(stream);
	    }
	
	    this._pipeNext(stream);
	  }.bind(this));
	};
	
	CombinedStream.prototype._pipeNext = function (stream) {
	  this._currentStream = stream;
	
	  var isStreamLike = CombinedStream.isStreamLike(stream);
	  if (isStreamLike) {
	    stream.on('end', this._getNext.bind(this));
	    stream.pipe(this, { end: false });
	    return;
	  }
	
	  var value = stream;
	  this.write(value);
	  this._getNext();
	};
	
	CombinedStream.prototype._handleErrors = function (stream) {
	  var self = this;
	  stream.on('error', function (err) {
	    self._emitError(err);
	  });
	};
	
	CombinedStream.prototype.write = function (data) {
	  this.emit('data', data);
	};
	
	CombinedStream.prototype.pause = function () {
	  if (!this.pauseStreams) {
	    return;
	  }
	
	  if (this.pauseStreams && this._currentStream && typeof this._currentStream.pause == 'function') this._currentStream.pause();
	  this.emit('pause');
	};
	
	CombinedStream.prototype.resume = function () {
	  if (!this._released) {
	    this._released = true;
	    this.writable = true;
	    this._getNext();
	  }
	
	  if (this.pauseStreams && this._currentStream && typeof this._currentStream.resume == 'function') this._currentStream.resume();
	  this.emit('resume');
	};
	
	CombinedStream.prototype.end = function () {
	  this._reset();
	  this.emit('end');
	};
	
	CombinedStream.prototype.destroy = function () {
	  this._reset();
	  this.emit('close');
	};
	
	CombinedStream.prototype._reset = function () {
	  this.writable = false;
	  this._streams = [];
	  this._currentStream = null;
	};
	
	CombinedStream.prototype._checkDataSize = function () {
	  this._updateDataSize();
	  if (this.dataSize <= this.maxDataSize) {
	    return;
	  }
	
	  var message = 'DelayedStream#maxDataSize of ' + this.maxDataSize + ' bytes exceeded.';
	  this._emitError(new Error(message));
	};
	
	CombinedStream.prototype._updateDataSize = function () {
	  this.dataSize = 0;
	
	  var self = this;
	  this._streams.forEach(function (stream) {
	    if (!stream.dataSize) {
	      return;
	    }
	
	    self.dataSize += stream.dataSize;
	  });
	
	  if (this._currentStream && this._currentStream.dataSize) {
	    this.dataSize += this._currentStream.dataSize;
	  }
	};
	
	CombinedStream.prototype._emitError = function (err) {
	  this._reset();
	  this.emit('error', err);
	};
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(290).Buffer))

/***/ }),
/* 579 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var Stream = __webpack_require__(282).Stream;
	var util = __webpack_require__(271);
	
	module.exports = DelayedStream;
	function DelayedStream() {
	  this.source = null;
	  this.dataSize = 0;
	  this.maxDataSize = 1024 * 1024;
	  this.pauseStream = true;
	
	  this._maxDataSizeExceeded = false;
	  this._released = false;
	  this._bufferedEvents = [];
	}
	util.inherits(DelayedStream, Stream);
	
	DelayedStream.create = function (source, options) {
	  var delayedStream = new this();
	
	  options = options || {};
	  for (var option in options) {
	    delayedStream[option] = options[option];
	  }
	
	  delayedStream.source = source;
	
	  var realEmit = source.emit;
	  source.emit = function () {
	    delayedStream._handleEmit(arguments);
	    return realEmit.apply(source, arguments);
	  };
	
	  source.on('error', function () {});
	  if (delayedStream.pauseStream) {
	    source.pause();
	  }
	
	  return delayedStream;
	};
	
	Object.defineProperty(DelayedStream.prototype, 'readable', {
	  configurable: true,
	  enumerable: true,
	  get: function get() {
	    return this.source.readable;
	  }
	});
	
	DelayedStream.prototype.setEncoding = function () {
	  return this.source.setEncoding.apply(this.source, arguments);
	};
	
	DelayedStream.prototype.resume = function () {
	  if (!this._released) {
	    this.release();
	  }
	
	  this.source.resume();
	};
	
	DelayedStream.prototype.pause = function () {
	  this.source.pause();
	};
	
	DelayedStream.prototype.release = function () {
	  this._released = true;
	
	  this._bufferedEvents.forEach(function (args) {
	    this.emit.apply(this, args);
	  }.bind(this));
	  this._bufferedEvents = [];
	};
	
	DelayedStream.prototype.pipe = function () {
	  var r = Stream.prototype.pipe.apply(this, arguments);
	  this.resume();
	  return r;
	};
	
	DelayedStream.prototype._handleEmit = function (args) {
	  if (this._released) {
	    this.emit.apply(this, args);
	    return;
	  }
	
	  if (args[0] === 'data') {
	    this.dataSize += args[1].length;
	    this._checkIfMaxDataSizeExceeded();
	  }
	
	  this._bufferedEvents.push(args);
	};
	
	DelayedStream.prototype._checkIfMaxDataSizeExceeded = function () {
	  if (this._maxDataSizeExceeded) {
	    return;
	  }
	
	  if (this.dataSize <= this.maxDataSize) {
	    return;
	  }
	
	  this._maxDataSizeExceeded = true;
	  var message = 'DelayedStream#maxDataSize of ' + this.maxDataSize + ' bytes exceeded.';
	  this.emit('error', new Error(message));
	};

/***/ }),
/* 580 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var url = __webpack_require__(275);
	var isUrl = /^https?:/;
	
	function Redirect(request) {
	  this.request = request;
	  this.followRedirect = true;
	  this.followRedirects = true;
	  this.followAllRedirects = false;
	  this.followOriginalHttpMethod = false;
	  this.allowRedirect = function () {
	    return true;
	  };
	  this.maxRedirects = 10;
	  this.redirects = [];
	  this.redirectsFollowed = 0;
	  this.removeRefererHeader = false;
	}
	
	Redirect.prototype.onRequest = function (options) {
	  var self = this;
	
	  if (options.maxRedirects !== undefined) {
	    self.maxRedirects = options.maxRedirects;
	  }
	  if (typeof options.followRedirect === 'function') {
	    self.allowRedirect = options.followRedirect;
	  }
	  if (options.followRedirect !== undefined) {
	    self.followRedirects = !!options.followRedirect;
	  }
	  if (options.followAllRedirects !== undefined) {
	    self.followAllRedirects = options.followAllRedirects;
	  }
	  if (self.followRedirects || self.followAllRedirects) {
	    self.redirects = self.redirects || [];
	  }
	  if (options.removeRefererHeader !== undefined) {
	    self.removeRefererHeader = options.removeRefererHeader;
	  }
	  if (options.followOriginalHttpMethod !== undefined) {
	    self.followOriginalHttpMethod = options.followOriginalHttpMethod;
	  }
	};
	
	Redirect.prototype.redirectTo = function (response) {
	  var self = this,
	      request = self.request;
	
	  var redirectTo = null;
	  if (response.statusCode >= 300 && response.statusCode < 400 && response.caseless.has('location')) {
	    var location = response.caseless.get('location');
	    request.debug('redirect', location);
	
	    if (self.followAllRedirects) {
	      redirectTo = location;
	    } else if (self.followRedirects) {
	      switch (request.method) {
	        case 'PATCH':
	        case 'PUT':
	        case 'POST':
	        case 'DELETE':
	          // Do not follow redirects
	          break;
	        default:
	          redirectTo = location;
	          break;
	      }
	    }
	  } else if (response.statusCode === 401) {
	    var authHeader = request._auth.onResponse(response);
	    if (authHeader) {
	      request.setHeader('authorization', authHeader);
	      redirectTo = request.uri;
	    }
	  }
	  return redirectTo;
	};
	
	Redirect.prototype.onResponse = function (response) {
	  var self = this,
	      request = self.request;
	
	  var redirectTo = self.redirectTo(response);
	  if (!redirectTo || !self.allowRedirect.call(request, response)) {
	    return false;
	  }
	
	  request.debug('redirect to', redirectTo);
	
	  // ignore any potential response body.  it cannot possibly be useful
	  // to us at this point.
	  // response.resume should be defined, but check anyway before calling. Workaround for browserify.
	  if (response.resume) {
	    response.resume();
	  }
	
	  if (self.redirectsFollowed >= self.maxRedirects) {
	    request.emit('error', new Error('Exceeded maxRedirects. Probably stuck in a redirect loop ' + request.uri.href));
	    return false;
	  }
	  self.redirectsFollowed += 1;
	
	  if (!isUrl.test(redirectTo)) {
	    redirectTo = url.resolve(request.uri.href, redirectTo);
	  }
	
	  var uriPrev = request.uri;
	  request.uri = url.parse(redirectTo);
	
	  // handle the case where we change protocol from https to http or vice versa
	  if (request.uri.protocol !== uriPrev.protocol) {
	    delete request.agent;
	  }
	
	  self.redirects.push({ statusCode: response.statusCode,
	    redirectUri: redirectTo
	  });
	  if (self.followAllRedirects && request.method !== 'HEAD' && response.statusCode !== 401 && response.statusCode !== 307) {
	    request.method = self.followOriginalHttpMethod ? request.method : 'GET';
	  }
	  // request.method = 'GET' // Force all redirects to use GET || commented out fixes #215
	  delete request.src;
	  delete request.req;
	  delete request._started;
	  if (response.statusCode !== 401 && response.statusCode !== 307) {
	    // Remove parameters from the previous response, unless this is the second request
	    // for a server that requires digest authentication.
	    delete request.body;
	    delete request._form;
	    if (request.headers) {
	      request.removeHeader('host');
	      request.removeHeader('content-type');
	      request.removeHeader('content-length');
	      if (request.uri.hostname !== request.originalHost.split(':')[0]) {
	        // Remove authorization if changing hostnames (but not if just
	        // changing ports or protocols).  This matches the behavior of curl:
	        // https://github.com/bagder/curl/blob/6beb0eee/lib/http.c#L710
	        request.removeHeader('authorization');
	      }
	    }
	  }
	
	  if (!self.removeRefererHeader) {
	    request.setHeader('referer', uriPrev.href);
	  }
	
	  request.emit('redirect');
	
	  request.init();
	
	  return true;
	};
	
	exports.Redirect = Redirect;

/***/ }),
/* 581 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var url = __webpack_require__(275),
	    tunnel = __webpack_require__(582);
	
	var defaultProxyHeaderWhiteList = ['accept', 'accept-charset', 'accept-encoding', 'accept-language', 'accept-ranges', 'cache-control', 'content-encoding', 'content-language', 'content-location', 'content-md5', 'content-range', 'content-type', 'connection', 'date', 'expect', 'max-forwards', 'pragma', 'referer', 'te', 'user-agent', 'via'];
	
	var defaultProxyHeaderExclusiveList = ['proxy-authorization'];
	
	function constructProxyHost(uriObject) {
	  var port = uriObject.port,
	      protocol = uriObject.protocol,
	      proxyHost = uriObject.hostname + ':';
	
	  if (port) {
	    proxyHost += port;
	  } else if (protocol === 'https:') {
	    proxyHost += '443';
	  } else {
	    proxyHost += '80';
	  }
	
	  return proxyHost;
	}
	
	function constructProxyHeaderWhiteList(headers, proxyHeaderWhiteList) {
	  var whiteList = proxyHeaderWhiteList.reduce(function (set, header) {
	    set[header.toLowerCase()] = true;
	    return set;
	  }, {});
	
	  return Object.keys(headers).filter(function (header) {
	    return whiteList[header.toLowerCase()];
	  }).reduce(function (set, header) {
	    set[header] = headers[header];
	    return set;
	  }, {});
	}
	
	function constructTunnelOptions(request, proxyHeaders) {
	  var proxy = request.proxy;
	
	  var tunnelOptions = {
	    proxy: {
	      host: proxy.hostname,
	      port: +proxy.port,
	      proxyAuth: proxy.auth,
	      headers: proxyHeaders
	    },
	    headers: request.headers,
	    ca: request.ca,
	    cert: request.cert,
	    key: request.key,
	    passphrase: request.passphrase,
	    pfx: request.pfx,
	    ciphers: request.ciphers,
	    rejectUnauthorized: request.rejectUnauthorized,
	    secureOptions: request.secureOptions,
	    secureProtocol: request.secureProtocol
	  };
	
	  return tunnelOptions;
	}
	
	function constructTunnelFnName(uri, proxy) {
	  var uriProtocol = uri.protocol === 'https:' ? 'https' : 'http';
	  var proxyProtocol = proxy.protocol === 'https:' ? 'Https' : 'Http';
	  return [uriProtocol, proxyProtocol].join('Over');
	}
	
	function getTunnelFn(request) {
	  var uri = request.uri;
	  var proxy = request.proxy;
	  var tunnelFnName = constructTunnelFnName(uri, proxy);
	  return tunnel[tunnelFnName];
	}
	
	function Tunnel(request) {
	  this.request = request;
	  this.proxyHeaderWhiteList = defaultProxyHeaderWhiteList;
	  this.proxyHeaderExclusiveList = [];
	  if (typeof request.tunnel !== 'undefined') {
	    this.tunnelOverride = request.tunnel;
	  }
	}
	
	Tunnel.prototype.isEnabled = function () {
	  var self = this,
	      request = self.request;
	  // Tunnel HTTPS by default. Allow the user to override this setting.
	
	  // If self.tunnelOverride is set (the user specified a value), use it.
	  if (typeof self.tunnelOverride !== 'undefined') {
	    return self.tunnelOverride;
	  }
	
	  // If the destination is HTTPS, tunnel.
	  if (request.uri.protocol === 'https:') {
	    return true;
	  }
	
	  // Otherwise, do not use tunnel.
	  return false;
	};
	
	Tunnel.prototype.setup = function (options) {
	  var self = this,
	      request = self.request;
	
	  options = options || {};
	
	  if (typeof request.proxy === 'string') {
	    request.proxy = url.parse(request.proxy);
	  }
	
	  if (!request.proxy || !request.tunnel) {
	    return false;
	  }
	
	  // Setup Proxy Header Exclusive List and White List
	  if (options.proxyHeaderWhiteList) {
	    self.proxyHeaderWhiteList = options.proxyHeaderWhiteList;
	  }
	  if (options.proxyHeaderExclusiveList) {
	    self.proxyHeaderExclusiveList = options.proxyHeaderExclusiveList;
	  }
	
	  var proxyHeaderExclusiveList = self.proxyHeaderExclusiveList.concat(defaultProxyHeaderExclusiveList);
	  var proxyHeaderWhiteList = self.proxyHeaderWhiteList.concat(proxyHeaderExclusiveList);
	
	  // Setup Proxy Headers and Proxy Headers Host
	  // Only send the Proxy White Listed Header names
	  var proxyHeaders = constructProxyHeaderWhiteList(request.headers, proxyHeaderWhiteList);
	  proxyHeaders.host = constructProxyHost(request.uri);
	
	  proxyHeaderExclusiveList.forEach(request.removeHeader, request);
	
	  // Set Agent from Tunnel Data
	  var tunnelFn = getTunnelFn(request);
	  var tunnelOptions = constructTunnelOptions(request, proxyHeaders);
	  request.agent = tunnelFn(tunnelOptions);
	
	  return true;
	};
	
	Tunnel.defaultProxyHeaderWhiteList = defaultProxyHeaderWhiteList;
	Tunnel.defaultProxyHeaderExclusiveList = defaultProxyHeaderExclusiveList;
	exports.Tunnel = Tunnel;

/***/ }),
/* 582 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
	
	var net = __webpack_require__(!(function webpackMissingModule() { var e = new Error("Cannot find module \"net\""); e.code = 'MODULE_NOT_FOUND'; throw e; }())),
	    tls = __webpack_require__(!(function webpackMissingModule() { var e = new Error("Cannot find module \"tls\""); e.code = 'MODULE_NOT_FOUND'; throw e; }())),
	    http = __webpack_require__(464),
	    https = __webpack_require__(471),
	    events = __webpack_require__(283),
	    assert = __webpack_require__(336),
	    util = __webpack_require__(271),
	    Buffer = __webpack_require__(462).Buffer;
	
	exports.httpOverHttp = httpOverHttp;
	exports.httpsOverHttp = httpsOverHttp;
	exports.httpOverHttps = httpOverHttps;
	exports.httpsOverHttps = httpsOverHttps;
	
	function httpOverHttp(options) {
	  var agent = new TunnelingAgent(options);
	  agent.request = http.request;
	  return agent;
	}
	
	function httpsOverHttp(options) {
	  var agent = new TunnelingAgent(options);
	  agent.request = http.request;
	  agent.createSocket = createSecureSocket;
	  agent.defaultPort = 443;
	  return agent;
	}
	
	function httpOverHttps(options) {
	  var agent = new TunnelingAgent(options);
	  agent.request = https.request;
	  return agent;
	}
	
	function httpsOverHttps(options) {
	  var agent = new TunnelingAgent(options);
	  agent.request = https.request;
	  agent.createSocket = createSecureSocket;
	  agent.defaultPort = 443;
	  return agent;
	}
	
	function TunnelingAgent(options) {
	  var self = this;
	  self.options = options || {};
	  self.proxyOptions = self.options.proxy || {};
	  self.maxSockets = self.options.maxSockets || http.Agent.defaultMaxSockets;
	  self.requests = [];
	  self.sockets = [];
	
	  self.on('free', function onFree(socket, host, port) {
	    for (var i = 0, len = self.requests.length; i < len; ++i) {
	      var pending = self.requests[i];
	      if (pending.host === host && pending.port === port) {
	        // Detect the request to connect same origin server,
	        // reuse the connection.
	        self.requests.splice(i, 1);
	        pending.request.onSocket(socket);
	        return;
	      }
	    }
	    socket.destroy();
	    self.removeSocket(socket);
	  });
	}
	util.inherits(TunnelingAgent, events.EventEmitter);
	
	TunnelingAgent.prototype.addRequest = function addRequest(req, options) {
	  var self = this;
	
	  // Legacy API: addRequest(req, host, port, path)
	  if (typeof options === 'string') {
	    options = {
	      host: options,
	      port: arguments[2],
	      path: arguments[3]
	    };
	  }
	
	  if (self.sockets.length >= this.maxSockets) {
	    // We are over limit so we'll add it to the queue.
	    self.requests.push({ host: options.host, port: options.port, request: req });
	    return;
	  }
	
	  // If we are under maxSockets create a new one.
	  self.createConnection({ host: options.host, port: options.port, request: req });
	};
	
	TunnelingAgent.prototype.createConnection = function createConnection(pending) {
	  var self = this;
	
	  self.createSocket(pending, function (socket) {
	    socket.on('free', onFree);
	    socket.on('close', onCloseOrRemove);
	    socket.on('agentRemove', onCloseOrRemove);
	    pending.request.onSocket(socket);
	
	    function onFree() {
	      self.emit('free', socket, pending.host, pending.port);
	    }
	
	    function onCloseOrRemove(err) {
	      self.removeSocket(socket);
	      socket.removeListener('free', onFree);
	      socket.removeListener('close', onCloseOrRemove);
	      socket.removeListener('agentRemove', onCloseOrRemove);
	    }
	  });
	};
	
	TunnelingAgent.prototype.createSocket = function createSocket(options, cb) {
	  var self = this;
	  var placeholder = {};
	  self.sockets.push(placeholder);
	
	  var connectOptions = mergeOptions({}, self.proxyOptions, { method: 'CONNECT',
	    path: options.host + ':' + options.port,
	    agent: false
	  });
	  if (connectOptions.proxyAuth) {
	    connectOptions.headers = connectOptions.headers || {};
	    connectOptions.headers['Proxy-Authorization'] = 'Basic ' + Buffer.from(connectOptions.proxyAuth).toString('base64');
	  }
	
	  debug('making CONNECT request');
	  var connectReq = self.request(connectOptions);
	  connectReq.useChunkedEncodingByDefault = false; // for v0.6
	  connectReq.once('response', onResponse); // for v0.6
	  connectReq.once('upgrade', onUpgrade); // for v0.6
	  connectReq.once('connect', onConnect); // for v0.7 or later
	  connectReq.once('error', onError);
	  connectReq.end();
	
	  function onResponse(res) {
	    // Very hacky. This is necessary to avoid http-parser leaks.
	    res.upgrade = true;
	  }
	
	  function onUpgrade(res, socket, head) {
	    // Hacky.
	    process.nextTick(function () {
	      onConnect(res, socket, head);
	    });
	  }
	
	  function onConnect(res, socket, head) {
	    connectReq.removeAllListeners();
	    socket.removeAllListeners();
	
	    if (res.statusCode === 200) {
	      assert.equal(head.length, 0);
	      debug('tunneling connection has established');
	      self.sockets[self.sockets.indexOf(placeholder)] = socket;
	      cb(socket);
	    } else {
	      debug('tunneling socket could not be established, statusCode=%d', res.statusCode);
	      var error = new Error('tunneling socket could not be established, ' + 'statusCode=' + res.statusCode);
	      error.code = 'ECONNRESET';
	      options.request.emit('error', error);
	      self.removeSocket(placeholder);
	    }
	  }
	
	  function onError(cause) {
	    connectReq.removeAllListeners();
	
	    debug('tunneling socket could not be established, cause=%s\n', cause.message, cause.stack);
	    var error = new Error('tunneling socket could not be established, ' + 'cause=' + cause.message);
	    error.code = 'ECONNRESET';
	    options.request.emit('error', error);
	    self.removeSocket(placeholder);
	  }
	};
	
	TunnelingAgent.prototype.removeSocket = function removeSocket(socket) {
	  var pos = this.sockets.indexOf(socket);
	  if (pos === -1) return;
	
	  this.sockets.splice(pos, 1);
	
	  var pending = this.requests.shift();
	  if (pending) {
	    // If we have pending requests and a socket gets closed a new one
	    // needs to be created to take over in the pool for the one that closed.
	    this.createConnection(pending);
	  }
	};
	
	function createSecureSocket(options, cb) {
	  var self = this;
	  TunnelingAgent.prototype.createSocket.call(self, options, function (socket) {
	    // 0 is dummy port for v0.6
	    var secureSocket = tls.connect(0, mergeOptions({}, self.options, { servername: options.host,
	      socket: socket
	    }));
	    self.sockets[self.sockets.indexOf(socket)] = secureSocket;
	    cb(secureSocket);
	  });
	}
	
	function mergeOptions(target) {
	  for (var i = 1, len = arguments.length; i < len; ++i) {
	    var overrides = arguments[i];
	    if ((typeof overrides === 'undefined' ? 'undefined' : _typeof(overrides)) === 'object') {
	      var keys = Object.keys(overrides);
	      for (var j = 0, keyLen = keys.length; j < keyLen; ++j) {
	        var k = keys[j];
	        if (overrides[k] !== undefined) {
	          target[k] = overrides[k];
	        }
	      }
	    }
	  }
	  return target;
	}
	
	var debug;
	if (process.env.NODE_DEBUG && /\btunnel\b/.test(process.env.NODE_DEBUG)) {
	  debug = function debug() {
	    var args = Array.prototype.slice.call(arguments);
	    if (typeof args[0] === 'string') {
	      args[0] = 'TUNNEL: ' + args[0];
	    } else {
	      args.unshift('TUNNEL:');
	    }
	    console.error.apply(console, args);
	  };
	} else {
	  debug = function debug() {};
	}
	exports.debug = debug; // for test
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ }),
/* 583 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {"use strict";
	
	// Generated by CoffeeScript 1.7.1
	(function () {
	  var getNanoSeconds, hrtime, loadTime;
	
	  if (typeof performance !== "undefined" && performance !== null && performance.now) {
	    module.exports = function () {
	      return performance.now();
	    };
	  } else if (typeof process !== "undefined" && process !== null && process.hrtime) {
	    module.exports = function () {
	      return (getNanoSeconds() - loadTime) / 1e6;
	    };
	    hrtime = process.hrtime;
	    getNanoSeconds = function getNanoSeconds() {
	      var hr;
	      hr = hrtime();
	      return hr[0] * 1e9 + hr[1];
	    };
	    loadTime = getNanoSeconds();
	  } else if (Date.now) {
	    module.exports = function () {
	      return Date.now() - loadTime;
	    };
	    loadTime = Date.now();
	  } else {
	    module.exports = function () {
	      return new Date().getTime() - loadTime;
	    };
	    loadTime = new Date().getTime();
	  }
	}).call(undefined);
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ }),
/* 584 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports = exports = list;
	
	exports.usage = 'Prints a listing of the currently installed node development files';
	
	/**
	 * Module dependencies.
	 */
	
	var fs = __webpack_require__(354),
	    path = __webpack_require__(270),
	    log = __webpack_require__(310);
	
	function list(gyp, args, callback) {
	
	  var devDir = gyp.devDir;
	  log.verbose('list', 'using node-gyp dir:', devDir);
	
	  // readdir() the node-gyp dir
	  fs.readdir(devDir, onreaddir);
	
	  function onreaddir(err, versions) {
	    if (err && err.code != 'ENOENT') {
	      return callback(err);
	    }
	    if (Array.isArray(versions)) {
	      versions = versions.filter(function (v) {
	        return v != 'current';
	      });
	    } else {
	      versions = [];
	    }
	    callback(null, versions);
	  }
	}

/***/ }),
/* 585 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';
	
	module.exports = exports = rebuild;
	
	exports.usage = 'Runs "clean", "configure" and "build" all at once';
	
	function rebuild(gyp, argv, callback) {
	
	  gyp.todo.push({ name: 'clean', args: [] }, { name: 'configure', args: argv }, { name: 'build', args: [] });
	  process.nextTick(callback);
	}
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ }),
/* 586 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';
	
	module.exports = exports = remove;
	
	exports.usage = 'Removes the node development files for the specified version';
	
	/**
	 * Module dependencies.
	 */
	
	var fs = __webpack_require__(!(function webpackMissingModule() { var e = new Error("Cannot find module \"fs\""); e.code = 'MODULE_NOT_FOUND'; throw e; }())),
	    rm = __webpack_require__(363),
	    path = __webpack_require__(270),
	    log = __webpack_require__(310),
	    semver = __webpack_require__(349);
	
	function remove(gyp, argv, callback) {
	
	  var devDir = gyp.devDir;
	  log.verbose('remove', 'using node-gyp dir:', devDir);
	
	  // get the user-specified version to remove
	  var version = argv[0] || gyp.opts.target;
	  log.verbose('remove', 'removing target version:', version);
	
	  if (!version) {
	    return callback(new Error('You must specify a version number to remove. Ex: "' + process.version + '"'));
	  }
	
	  var versionSemver = semver.parse(version);
	  if (versionSemver) {
	    // flatten the version Array into a String
	    version = versionSemver.version;
	  }
	
	  var versionPath = path.resolve(gyp.devDir, version);
	  log.verbose('remove', 'removing development files for version:', version);
	
	  // first check if its even installed
	  fs.stat(versionPath, function (err, stat) {
	    if (err) {
	      if (err.code == 'ENOENT') {
	        callback(null, 'version was already uninstalled: ' + version);
	      } else {
	        callback(err);
	      }
	      return;
	    }
	    // Go ahead and delete the dir
	    rm(versionPath, callback);
	  });
	}
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ }),
/* 587 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	
	module.exports = exports = handle_gyp_opts;
	
	var fs = __webpack_require__(!(function webpackMissingModule() { var e = new Error("Cannot find module \"fs\""); e.code = 'MODULE_NOT_FOUND'; throw e; }()));
	var versioning = __webpack_require__(348);
	
	/*
	
	Here we gather node-pre-gyp generated options (from versioning) and pass them along to node-gyp.
	
	We massage the args and options slightly to account for differences in what commands mean between
	node-pre-gyp and node-gyp (e.g. see the difference between "build" and "rebuild" below)
	
	Keep in mind: the values inside `argv` and `gyp.opts` below are different depending on whether
	node-pre-gyp is called directory, or if it is called in a `run-script` phase of npm.
	
	We also try to preserve any command line options that might have been passed to npm or node-pre-gyp.
	But this is fairly difficult without passing way to much through. For example `gyp.opts` contains all
	the process.env and npm pushes a lot of variables into process.env which node-pre-gyp inherits. So we have
	to be very selective about what we pass through.
	
	For example:
	
	`npm install --build-from-source` will give:
	
	argv == [ 'rebuild' ]
	gyp.opts.argv == { remain: [ 'install' ],
	  cooked: [ 'install', '--fallback-to-build' ],
	  original: [ 'install', '--fallback-to-build' ] }
	
	`./bin/node-pre-gyp build` will give:
	
	argv == []
	gyp.opts.argv == { remain: [ 'build' ],
	  cooked: [ 'build' ],
	  original: [ '-C', 'test/app1', 'build' ] }
	
	*/
	
	// select set of node-pre-gyp versioning info
	// to share with node-gyp
	var share_with_node_gyp = ['module', 'module_name', 'module_path'];
	
	function handle_gyp_opts(gyp, argv, callback) {
	
	    // Collect node-pre-gyp specific variables to pass to node-gyp
	    var node_pre_gyp_options = [];
	    // generate custom node-pre-gyp versioning info
	    var opts = versioning.evaluate(JSON.parse(fs.readFileSync('./package.json')), gyp.opts);
	    share_with_node_gyp.forEach(function (key) {
	        var val = opts[key];
	        if (val) {
	            node_pre_gyp_options.push('--' + key + '=' + val);
	        } else {
	            return callback(new Error("Option " + key + " required but not found by node-pre-gyp"));
	        }
	    });
	
	    // Collect options that follow the special -- which disables nopt parsing
	    var unparsed_options = [];
	    var double_hyphen_found = false;
	    gyp.opts.argv.original.forEach(function (opt) {
	        if (double_hyphen_found) {
	            unparsed_options.push(opt);
	        }
	        if (opt == '--') {
	            double_hyphen_found = true;
	        }
	    });
	
	    // We try respect and pass through remaining command
	    // line options (like --foo=bar) to node-gyp
	    var cooked = gyp.opts.argv.cooked;
	    var node_gyp_options = [];
	    cooked.forEach(function (value) {
	        if (value.length > 2 && value.slice(0, 2) == '--') {
	            var key = value.slice(2);
	            var val = cooked[cooked.indexOf(value) + 1];
	            if (val && val.indexOf('--') === -1) {
	                // handle '--foo=bar' or ['--foo','bar']
	                node_gyp_options.push('--' + key + '=' + val);
	            } else {
	                // pass through --foo
	                node_gyp_options.push(value);
	            }
	        }
	    });
	
	    var result = { 'opts': opts, 'gyp': node_gyp_options, 'pre': node_pre_gyp_options, 'unparsed': unparsed_options };
	    return callback(null, result);
	}

/***/ }),
/* 588 */,
/* 589 */,
/* 590 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	
	module.exports = exports;
	
	var url = __webpack_require__(275);
	
	var URI_REGEX = "^(.*)\.(s3(?:-.*)?)\.amazonaws\.com$";
	
	module.exports.detect = function (to, config) {
	    var uri = url.parse(to);
	    var hostname_matches = uri.hostname.match(URI_REGEX);
	    config.prefix = !uri.pathname || uri.pathname == '/' ? '' : uri.pathname.replace('/', '');
	    if (!hostname_matches) {
	        return;
	    }
	    if (!config.bucket) {
	        config.bucket = hostname_matches[1];
	    }
	    if (!config.region) {
	        var s3_domain = hostname_matches[2];
	        if (s3_domain.slice(0, 3) == 's3-' && s3_domain.length >= 3) {
	            // it appears the region is explicit in the url
	            config.region = s3_domain.replace('s3-', '');
	        }
	    }
	};

/***/ }),
/* 591 */
/***/ (function(module, exports, __webpack_require__) {

	var map = {
		"./build": 592,
		"./build.js": 592,
		"./clean": 594,
		"./clean.js": 594,
		"./configure": 593,
		"./configure.js": 593,
		"./info": 596,
		"./info.js": 596,
		"./install": 598,
		"./install.js": 598,
		"./node-pre-gyp": 269,
		"./node-pre-gyp.js": 269,
		"./package": 600,
		"./package.js": 600,
		"./pre-binding": 347,
		"./pre-binding.js": 347,
		"./publish": 618,
		"./publish.js": 618,
		"./rebuild": 619,
		"./rebuild.js": 619,
		"./reinstall": 620,
		"./reinstall.js": 620,
		"./reveal": 621,
		"./reveal.js": 621,
		"./testbinary": 599,
		"./testbinary.js": 599,
		"./testpackage": 622,
		"./testpackage.js": 622,
		"./unpublish": 623,
		"./unpublish.js": 623,
		"./util/compile": 352,
		"./util/compile.js": 352,
		"./util/handle_gyp_opts": 587,
		"./util/handle_gyp_opts.js": 587,
		"./util/s3_setup": 590,
		"./util/s3_setup.js": 590,
		"./util/versioning": 348,
		"./util/versioning.js": 348
	};
	function webpackContext(req) {
		return __webpack_require__(webpackContextResolve(req));
	};
	function webpackContextResolve(req) {
		return map[req] || (function() { throw new Error("Cannot find module '" + req + "'.") }());
	};
	webpackContext.keys = function webpackContextKeys() {
		return Object.keys(map);
	};
	webpackContext.resolve = webpackContextResolve;
	module.exports = webpackContext;
	webpackContext.id = 591;


/***/ }),
/* 592 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	
	module.exports = exports = build;
	
	exports.usage = 'Attempts to compile the module by dispatching to node-gyp or nw-gyp';
	
	var compile = __webpack_require__(352);
	var handle_gyp_opts = __webpack_require__(587);
	var configure = __webpack_require__(593);
	
	function do_build(gyp, argv, callback) {
	    handle_gyp_opts(gyp, argv, function (err, result) {
	        var final_args = ['build'].concat(result.gyp).concat(result.pre);
	        if (result.unparsed.length > 0) {
	            final_args = final_args.concat(['--']).concat(result.unparsed);
	        }
	        compile.run_gyp(final_args, result.opts, function (err) {
	            return callback(err);
	        });
	    });
	}
	
	function build(gyp, argv, callback) {
	
	    // Form up commands to pass to node-gyp:
	    // We map `node-pre-gyp build` to `node-gyp configure build` so that we do not
	    // trigger a clean and therefore do not pay the penalty of a full recompile
	    if (argv.length && argv.indexOf('rebuild') > -1) {
	        // here we map `node-pre-gyp rebuild` to `node-gyp rebuild` which internally means
	        // "clean + configure + build" and triggers a full recompile
	        compile.run_gyp(['clean'], {}, function (err) {
	            if (err) return callback(err);
	            configure(gyp, argv, function (err) {
	                if (err) return callback(err);
	                return do_build(gyp, argv, callback);
	            });
	        });
	    } else {
	        return do_build(gyp, argv, callback);
	    }
	}

/***/ }),
/* 593 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	
	module.exports = exports = configure;
	
	exports.usage = 'Attempts to configure node-gyp or nw-gyp build';
	
	var compile = __webpack_require__(352);
	var handle_gyp_opts = __webpack_require__(587);
	
	function configure(gyp, argv, callback) {
	    handle_gyp_opts(gyp, argv, function (err, result) {
	        var final_args = result.gyp.concat(result.pre);
	        // pull select node-gyp configure options out of the npm environ
	        var known_gyp_args = ['dist-url', 'python', 'nodedir', 'msvs_version'];
	        known_gyp_args.forEach(function (key) {
	            var val = gyp.opts[key] || gyp.opts[key.replace('-', '_')];
	            if (val) {
	                final_args.push('--' + key + '=' + val);
	            }
	        });
	        // --ensure=false tell node-gyp to re-install node development headers
	        // but it is only respected by node-gyp install, so we have to call install
	        // as a separate step if the user passes it
	        if (gyp.opts.ensure === false) {
	            var install_args = final_args.concat(['install', '--ensure=false']);
	            compile.run_gyp(install_args, result.opts, function (err) {
	                if (err) return callback(err);
	                if (result.unparsed.length > 0) {
	                    final_args = final_args.concat(['--']).concat(result.unparsed);
	                }
	                compile.run_gyp(['configure'].concat(final_args), result.opts, function (err) {
	                    return callback(err);
	                });
	            });
	        } else {
	            if (result.unparsed.length > 0) {
	                final_args = final_args.concat(['--']).concat(result.unparsed);
	            }
	            compile.run_gyp(['configure'].concat(final_args), result.opts, function (err) {
	                return callback(err);
	            });
	        }
	    });
	}

/***/ }),
/* 594 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	
	module.exports = exports = clean;
	
	exports.usage = 'Removes the entire folder containing the compiled .node module';
	
	var fs = __webpack_require__(!(function webpackMissingModule() { var e = new Error("Cannot find module \"fs\""); e.code = 'MODULE_NOT_FOUND'; throw e; }()));
	var rm = __webpack_require__(595);
	var exists = __webpack_require__(!(function webpackMissingModule() { var e = new Error("Cannot find module \"fs\""); e.code = 'MODULE_NOT_FOUND'; throw e; }())).exists || __webpack_require__(270).exists;
	var versioning = __webpack_require__(348);
	
	function clean(gyp, argv, callback) {
	    var package_json = JSON.parse(fs.readFileSync('./package.json'));
	    var opts = versioning.evaluate(package_json, gyp.opts);
	    var to_delete = opts.module_path;
	    exists(to_delete, function (found) {
	        if (found) {
	            if (!gyp.opts.silent_clean) console.log('[' + package_json.name + '] Removing "%s"', to_delete);
	            return rm(to_delete, callback);
	        }
	        return callback();
	    });
	}

/***/ }),
/* 595 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {"use strict";
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
	
	module.exports = rimraf;
	rimraf.sync = rimrafSync;
	
	var assert = __webpack_require__(336);
	var path = __webpack_require__(270);
	var fs = __webpack_require__(!(function webpackMissingModule() { var e = new Error("Cannot find module \"fs\""); e.code = 'MODULE_NOT_FOUND'; throw e; }()));
	var glob = __webpack_require__(364);
	
	var defaultGlobOpts = {
	  nosort: true,
	  silent: true
	};
	
	// for EMFILE handling
	var timeout = 0;
	
	var isWindows = process.platform === "win32";
	
	function defaults(options) {
	  var methods = ['unlink', 'chmod', 'stat', 'lstat', 'rmdir', 'readdir'];
	  methods.forEach(function (m) {
	    options[m] = options[m] || fs[m];
	    m = m + 'Sync';
	    options[m] = options[m] || fs[m];
	  });
	
	  options.maxBusyTries = options.maxBusyTries || 3;
	  options.emfileWait = options.emfileWait || 1000;
	  if (options.glob === false) {
	    options.disableGlob = true;
	  }
	  options.disableGlob = options.disableGlob || false;
	  options.glob = options.glob || defaultGlobOpts;
	}
	
	function rimraf(p, options, cb) {
	  if (typeof options === 'function') {
	    cb = options;
	    options = {};
	  }
	
	  assert(p, 'rimraf: missing path');
	  assert.equal(typeof p === "undefined" ? "undefined" : _typeof(p), 'string', 'rimraf: path should be a string');
	  assert.equal(typeof cb === "undefined" ? "undefined" : _typeof(cb), 'function', 'rimraf: callback function required');
	  assert(options, 'rimraf: invalid options argument provided');
	  assert.equal(typeof options === "undefined" ? "undefined" : _typeof(options), 'object', 'rimraf: options should be object');
	
	  defaults(options);
	
	  var busyTries = 0;
	  var errState = null;
	  var n = 0;
	
	  if (options.disableGlob || !glob.hasMagic(p)) return afterGlob(null, [p]);
	
	  options.lstat(p, function (er, stat) {
	    if (!er) return afterGlob(null, [p]);
	
	    glob(p, options.glob, afterGlob);
	  });
	
	  function next(er) {
	    errState = errState || er;
	    if (--n === 0) cb(errState);
	  }
	
	  function afterGlob(er, results) {
	    if (er) return cb(er);
	
	    n = results.length;
	    if (n === 0) return cb();
	
	    results.forEach(function (p) {
	      rimraf_(p, options, function CB(er) {
	        if (er) {
	          if (isWindows && (er.code === "EBUSY" || er.code === "ENOTEMPTY" || er.code === "EPERM") && busyTries < options.maxBusyTries) {
	            busyTries++;
	            var time = busyTries * 100;
	            // try again, with the same exact callback as this one.
	            return setTimeout(function () {
	              rimraf_(p, options, CB);
	            }, time);
	          }
	
	          // this one won't happen if graceful-fs is used.
	          if (er.code === "EMFILE" && timeout < options.emfileWait) {
	            return setTimeout(function () {
	              rimraf_(p, options, CB);
	            }, timeout++);
	          }
	
	          // already gone
	          if (er.code === "ENOENT") er = null;
	        }
	
	        timeout = 0;
	        next(er);
	      });
	    });
	  }
	}
	
	// Two possible strategies.
	// 1. Assume it's a file.  unlink it, then do the dir stuff on EPERM or EISDIR
	// 2. Assume it's a directory.  readdir, then do the file stuff on ENOTDIR
	//
	// Both result in an extra syscall when you guess wrong.  However, there
	// are likely far more normal files in the world than directories.  This
	// is based on the assumption that a the average number of files per
	// directory is >= 1.
	//
	// If anyone ever complains about this, then I guess the strategy could
	// be made configurable somehow.  But until then, YAGNI.
	function rimraf_(p, options, cb) {
	  assert(p);
	  assert(options);
	  assert(typeof cb === 'function');
	
	  // sunos lets the root user unlink directories, which is... weird.
	  // so we have to lstat here and make sure it's not a dir.
	  options.lstat(p, function (er, st) {
	    if (er && er.code === "ENOENT") return cb(null);
	
	    // Windows can EPERM on stat.  Life is suffering.
	    if (er && er.code === "EPERM" && isWindows) fixWinEPERM(p, options, er, cb);
	
	    if (st && st.isDirectory()) return rmdir(p, options, er, cb);
	
	    options.unlink(p, function (er) {
	      if (er) {
	        if (er.code === "ENOENT") return cb(null);
	        if (er.code === "EPERM") return isWindows ? fixWinEPERM(p, options, er, cb) : rmdir(p, options, er, cb);
	        if (er.code === "EISDIR") return rmdir(p, options, er, cb);
	      }
	      return cb(er);
	    });
	  });
	}
	
	function fixWinEPERM(p, options, er, cb) {
	  assert(p);
	  assert(options);
	  assert(typeof cb === 'function');
	  if (er) assert(er instanceof Error);
	
	  options.chmod(p, 666, function (er2) {
	    if (er2) cb(er2.code === "ENOENT" ? null : er);else options.stat(p, function (er3, stats) {
	      if (er3) cb(er3.code === "ENOENT" ? null : er);else if (stats.isDirectory()) rmdir(p, options, er, cb);else options.unlink(p, cb);
	    });
	  });
	}
	
	function fixWinEPERMSync(p, options, er) {
	  assert(p);
	  assert(options);
	  if (er) assert(er instanceof Error);
	
	  try {
	    options.chmodSync(p, 666);
	  } catch (er2) {
	    if (er2.code === "ENOENT") return;else throw er;
	  }
	
	  try {
	    var stats = options.statSync(p);
	  } catch (er3) {
	    if (er3.code === "ENOENT") return;else throw er;
	  }
	
	  if (stats.isDirectory()) rmdirSync(p, options, er);else options.unlinkSync(p);
	}
	
	function rmdir(p, options, originalEr, cb) {
	  assert(p);
	  assert(options);
	  if (originalEr) assert(originalEr instanceof Error);
	  assert(typeof cb === 'function');
	
	  // try to rmdir first, and only readdir on ENOTEMPTY or EEXIST (SunOS)
	  // if we guessed wrong, and it's not a directory, then
	  // raise the original error.
	  options.rmdir(p, function (er) {
	    if (er && (er.code === "ENOTEMPTY" || er.code === "EEXIST" || er.code === "EPERM")) rmkids(p, options, cb);else if (er && er.code === "ENOTDIR") cb(originalEr);else cb(er);
	  });
	}
	
	function rmkids(p, options, cb) {
	  assert(p);
	  assert(options);
	  assert(typeof cb === 'function');
	
	  options.readdir(p, function (er, files) {
	    if (er) return cb(er);
	    var n = files.length;
	    if (n === 0) return options.rmdir(p, cb);
	    var errState;
	    files.forEach(function (f) {
	      rimraf(path.join(p, f), options, function (er) {
	        if (errState) return;
	        if (er) return cb(errState = er);
	        if (--n === 0) options.rmdir(p, cb);
	      });
	    });
	  });
	}
	
	// this looks simpler, and is strictly *faster*, but will
	// tie up the JavaScript thread and fail on excessively
	// deep directory trees.
	function rimrafSync(p, options) {
	  options = options || {};
	  defaults(options);
	
	  assert(p, 'rimraf: missing path');
	  assert.equal(typeof p === "undefined" ? "undefined" : _typeof(p), 'string', 'rimraf: path should be a string');
	  assert(options, 'rimraf: missing options');
	  assert.equal(typeof options === "undefined" ? "undefined" : _typeof(options), 'object', 'rimraf: options should be object');
	
	  var results;
	
	  if (options.disableGlob || !glob.hasMagic(p)) {
	    results = [p];
	  } else {
	    try {
	      options.lstatSync(p);
	      results = [p];
	    } catch (er) {
	      results = glob.sync(p, options.glob);
	    }
	  }
	
	  if (!results.length) return;
	
	  for (var i = 0; i < results.length; i++) {
	    var p = results[i];
	
	    try {
	      var st = options.lstatSync(p);
	    } catch (er) {
	      if (er.code === "ENOENT") return;
	
	      // Windows can EPERM on stat.  Life is suffering.
	      if (er.code === "EPERM" && isWindows) fixWinEPERMSync(p, options, er);
	    }
	
	    try {
	      // sunos lets the root user unlink directories, which is... weird.
	      if (st && st.isDirectory()) rmdirSync(p, options, null);else options.unlinkSync(p);
	    } catch (er) {
	      if (er.code === "ENOENT") return;
	      if (er.code === "EPERM") return isWindows ? fixWinEPERMSync(p, options, er) : rmdirSync(p, options, er);
	      if (er.code !== "EISDIR") throw er;
	      rmdirSync(p, options, er);
	    }
	  }
	}
	
	function rmdirSync(p, options, originalEr) {
	  assert(p);
	  assert(options);
	  if (originalEr) assert(originalEr instanceof Error);
	
	  try {
	    options.rmdirSync(p);
	  } catch (er) {
	    if (er.code === "ENOENT") return;
	    if (er.code === "ENOTDIR") throw originalEr;
	    if (er.code === "ENOTEMPTY" || er.code === "EEXIST" || er.code === "EPERM") rmkidsSync(p, options);
	  }
	}
	
	function rmkidsSync(p, options) {
	  assert(p);
	  assert(options);
	  options.readdirSync(p).forEach(function (f) {
	    rimrafSync(path.join(p, f), options);
	  });
	  options.rmdirSync(p, options);
	}
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ }),
/* 596 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	
	module.exports = exports = unpublish;
	
	exports.usage = 'Lists all published binaries (requires aws-sdk)';
	
	var fs = __webpack_require__(!(function webpackMissingModule() { var e = new Error("Cannot find module \"fs\""); e.code = 'MODULE_NOT_FOUND'; throw e; }()));
	var log = __webpack_require__(310);
	var versioning = __webpack_require__(348);
	var s3_setup = __webpack_require__(590);
	var config = __webpack_require__(597)("node_pre_gyp", { acl: "public-read" });
	
	function unpublish(gyp, argv, callback) {
	    var AWS = __webpack_require__(!(function webpackMissingModule() { var e = new Error("Cannot find module \"aws-sdk\""); e.code = 'MODULE_NOT_FOUND'; throw e; }()));
	    var package_json = JSON.parse(fs.readFileSync('./package.json'));
	    var opts = versioning.evaluate(package_json, gyp.opts);
	    s3_setup.detect(opts.hosted_path, config);
	    AWS.config.update(config);
	    var s3 = new AWS.S3();
	    var s3_opts = { Bucket: config.bucket,
	        Prefix: config.prefix
	    };
	    s3.listObjects(s3_opts, function (err, meta) {
	        if (err && err.code == 'NotFound') {
	            return callback(new Error('[' + package_json.name + '] Not found: https://' + s3_opts.Bucket + '.s3.amazonaws.com/' + config.prefix));
	        } else if (err) {
	            return callback(err);
	        } else {
	            log.verbose(JSON.stringify(meta, null, 1));
	            if (meta && meta.Contents) {
	                meta.Contents.forEach(function (obj) {
	                    console.log(obj.Key);
	                });
	            } else {
	                console.error('[' + package_json.name + '] No objects found at https://' + s3_opts.Bucket + '.s3.amazonaws.com/' + config.prefix);
	            }
	            return callback();
	        }
	    });
	}

/***/ }),
/* 597 */
/***/ (function(module, exports) {

	"use strict";
	
	// when this is loaded into the browser, 
	// just use the defaults...
	
	module.exports = function (name, defaults) {
	  return defaults;
	};

/***/ }),
/* 598 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(__dirname, process) {"use strict";
	
	module.exports = exports = install;
	
	exports.usage = 'Attempts to install pre-built binary for module';
	
	var fs = __webpack_require__(!(function webpackMissingModule() { var e = new Error("Cannot find module \"fs\""); e.code = 'MODULE_NOT_FOUND'; throw e; }()));
	var path = __webpack_require__(270);
	var zlib = __webpack_require__(421);
	var log = __webpack_require__(310);
	var existsAsync = fs.exists || path.exists;
	var versioning = __webpack_require__(348);
	var testbinary = __webpack_require__(599);
	var clean = __webpack_require__(594);
	
	var npgVersion = 'unknown';
	try {
	    // Read own package.json to get the current node-pre-pyp version.
	    var ownPackageJSON = fs.readFileSync(path.join(__dirname, '..', 'package.json'), 'utf8');
	    npgVersion = JSON.parse(ownPackageJSON).version;
	} catch (e) {}
	
	function download(uri, opts, callback) {
	    log.http('GET', uri);
	
	    var req = null;
	
	    // Try getting version info from the currently running npm.
	    var envVersionInfo = process.env.npm_config_user_agent || 'node ' + process.version;
	
	    var requestOpts = {
	        uri: uri.replace('+', '%2B'),
	        headers: {
	            'User-Agent': 'node-pre-gyp (v' + npgVersion + ', ' + envVersionInfo + ')'
	        }
	    };
	
	    if (opts.cafile) {
	        try {
	            requestOpts.ca = fs.readFileSync(opts.cafile);
	        } catch (e) {
	            return callback(e);
	        }
	    } else if (opts.ca) {
	        requestOpts.ca = opts.ca;
	    }
	
	    var proxyUrl = opts.proxy || process.env.http_proxy || process.env.HTTP_PROXY || process.env.npm_config_proxy;
	    if (proxyUrl) {
	        if (/^https?:\/\//i.test(proxyUrl)) {
	            log.verbose('download', 'using proxy url: "%s"', proxyUrl);
	            requestOpts.proxy = proxyUrl;
	        } else {
	            log.warn('download', 'ignoring invalid "proxy" config setting: "%s"', proxyUrl);
	        }
	    }
	    try {
	        req = __webpack_require__(449)(requestOpts);
	    } catch (e) {
	        return callback(e);
	    }
	    if (req) {
	        req.on('response', function (res) {
	            log.http(res.statusCode, uri);
	        });
	    }
	    return callback(null, req);
	}
	
	function place_binary(from, to, opts, callback) {
	    download(from, opts, function (err, req) {
	        if (err) return callback(err);
	        if (!req) return callback(new Error("empty req"));
	        var badDownload = false;
	        var extractCount = 0;
	        var gunzip = zlib.createGunzip();
	        var extracter = __webpack_require__(!(function webpackMissingModule() { var e = new Error("Cannot find module \"tar\""); e.code = 'MODULE_NOT_FOUND'; throw e; }())).Extract({ path: to, strip: 1 });
	
	        function afterTarball(err) {
	            if (err) return callback(err);
	            if (badDownload) return callback(new Error("bad download"));
	            if (extractCount === 0) {
	                return callback(new Error('There was a fatal problem while downloading/extracting the tarball'));
	            }
	            log.info('tarball', 'done parsing tarball');
	            callback();
	        }
	
	        function filter_func(entry) {
	            // ensure directories are +x
	            // https://github.com/mapnik/node-mapnik/issues/262
	            entry.props.mode |= entry.props.mode >>> 2 & parseInt('0111', 8);
	            log.info('install', 'unpacking ' + entry.path);
	            extractCount++;
	        }
	
	        gunzip.on('error', callback);
	        extracter.on('entry', filter_func);
	        extracter.on('error', callback);
	        extracter.on('end', afterTarball);
	
	        req.on('error', function (err) {
	            badDownload = true;
	            return callback(err);
	        });
	
	        req.on('close', function () {
	            if (extractCount === 0) {
	                return callback(new Error('Connection closed while downloading tarball file'));
	            }
	        });
	
	        req.on('response', function (res) {
	            if (res.statusCode !== 200) {
	                badDownload = true;
	                var err = new Error(res.statusCode + ' status code downloading tarball ' + from);
	                err.statusCode = res.statusCode;
	                return callback(err);
	            }
	            // start unzipping and untaring
	            req.pipe(gunzip).pipe(extracter);
	        });
	    });
	}
	
	function do_build(gyp, argv, callback) {
	    gyp.todo.push({ name: 'build', args: ['rebuild'] });
	    process.nextTick(callback);
	}
	
	function print_fallback_error(err, opts, package_json) {
	    var fallback_message = ' (falling back to source compile with node-gyp)';
	    var full_message = "Pre-built binaries not found for " + package_json.name + "@" + package_json.version;
	    full_message += " and " + opts.runtime + "@" + (opts.target || process.versions.node) + " (" + opts.node_abi + " ABI)";
	    full_message += fallback_message;
	    log.error("Tried to download(" + err.statusCode + "): " + opts.hosted_tarball);
	    log.error(full_message);
	    log.http(err.message);
	}
	
	function install(gyp, argv, callback) {
	    var package_json = JSON.parse(fs.readFileSync('./package.json'));
	    var source_build = gyp.opts['build-from-source'] || gyp.opts.build_from_source;
	    var update_binary = gyp.opts['update-binary'] || gyp.opts.update_binary;
	    var should_do_source_build = source_build === package_json.name || source_build === true || source_build === 'true';
	    var no_rollback = gyp.opts.hasOwnProperty('rollback') && gyp.opts.rollback === false;
	    if (should_do_source_build) {
	        log.info('build', 'requesting source compile');
	        return do_build(gyp, argv, callback);
	    } else {
	        var fallback_to_build = gyp.opts['fallback-to-build'] || gyp.opts.fallback_to_build;
	        var should_do_fallback_build = fallback_to_build === package_json.name || fallback_to_build === true || fallback_to_build === 'true';
	        // but allow override from npm
	        if (process.env.npm_config_argv) {
	            var cooked = JSON.parse(process.env.npm_config_argv).cooked;
	            var match = cooked.indexOf("--fallback-to-build");
	            if (match > -1 && cooked.length > match && cooked[match + 1] == "false") {
	                should_do_fallback_build = false;
	                log.info('install', 'Build fallback disabled via npm flag: --fallback-to-build=false');
	            }
	        }
	        var opts;
	        try {
	            opts = versioning.evaluate(package_json, gyp.opts);
	        } catch (err) {
	            return callback(err);
	        }
	
	        opts.ca = gyp.opts.ca;
	        opts.cafile = gyp.opts.cafile;
	
	        var from = opts.hosted_tarball;
	        var to = opts.module_path;
	        var binary_module = path.join(to, opts.module_name + '.node');
	        if (existsAsync(binary_module, function (found) {
	            if (found && !update_binary) {
	                testbinary(gyp, argv, function (err) {
	                    if (err) {
	                        console.error('[' + package_json.name + '] ' + err.message);
	                        log.error("Testing local pre-built binary failed, attempting to re-download");
	                        place_binary(from, to, opts, function (err) {
	                            if (err) {
	                                if (should_do_fallback_build) {
	                                    print_fallback_error(err, opts, package_json);
	                                    return do_build(gyp, argv, callback);
	                                } else {
	                                    return callback(err);
	                                }
	                            } else {
	                                console.log('[' + package_json.name + '] Success: "' + binary_module + '" is reinstalled via remote');
	                                return callback();
	                            }
	                        });
	                    } else {
	                        console.log('[' + package_json.name + '] Success: "' + binary_module + '" already installed');
	                        console.log('Pass --update-binary to reinstall or --build-from-source to recompile');
	                        return callback();
	                    }
	                });
	            } else {
	                if (!update_binary) log.info('check', 'checked for "' + binary_module + '" (not found)');
	                place_binary(from, to, opts, function (err) {
	                    if (err && should_do_fallback_build) {
	                        print_fallback_error(err, opts, package_json);
	                        return do_build(gyp, argv, callback);
	                    } else if (err) {
	                        return callback(err);
	                    } else {
	                        testbinary(gyp, argv, function (err) {
	                            if (err) {
	                                if (no_rollback) {
	                                    return callback(err);
	                                }
	                                gyp.opts.silent_clean = true;
	                                clean(gyp, argv, function (error) {
	                                    if (error) console.log(error);
	                                    if (should_do_fallback_build) {
	                                        console.error('[' + package_json.name + '] ' + err.message);
	                                        log.error("Testing pre-built binary failed, attempting to source compile");
	                                        return do_build(gyp, argv, callback);
	                                    } else {
	                                        return callback(err);
	                                    }
	                                });
	                            } else {
	                                console.log('[' + package_json.name + '] Success: "' + binary_module + '" is installed via remote');
	                                return callback();
	                            }
	                        });
	                    }
	                });
	            }
	        })) ;
	    }
	}
	/* WEBPACK VAR INJECTION */}.call(exports, "/", __webpack_require__(3)))

/***/ }),
/* 599 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process, __dirname) {"use strict";
	
	module.exports = exports = testbinary;
	
	exports.usage = 'Tests that the binary.node can be required';
	
	var fs = __webpack_require__(!(function webpackMissingModule() { var e = new Error("Cannot find module \"fs\""); e.code = 'MODULE_NOT_FOUND'; throw e; }()));
	var path = __webpack_require__(270);
	var log = __webpack_require__(310);
	var cp = __webpack_require__(!(function webpackMissingModule() { var e = new Error("Cannot find module \"child_process\""); e.code = 'MODULE_NOT_FOUND'; throw e; }()));
	var versioning = __webpack_require__(348);
	var path = __webpack_require__(270);
	
	function testbinary(gyp, argv, callback) {
	    var args = [];
	    var options = {};
	    var shell_cmd = process.execPath;
	    var package_json = JSON.parse(fs.readFileSync('./package.json'));
	    var opts = versioning.evaluate(package_json, gyp.opts);
	    // ensure on windows that / are used for require path
	    var binary_module = opts.module.replace(/\\/g, '/');
	    var nw = opts.runtime && opts.runtime === 'node-webkit';
	    if (process.arch != opts.target_arch || process.platform != opts.target_platform) {
	        var msg = "skipping validation since host platform/arch (";
	        msg += process.platform + '/' + process.arch + ")";
	        msg += " does not match target (";
	        msg += opts.target_platform + '/' + opts.target_arch + ")";
	        log.info('validate', msg);
	        return callback();
	    }
	    if (nw) {
	        options.timeout = 5000;
	        if (process.platform === 'darwin') {
	            shell_cmd = 'node-webkit';
	        } else if (process.platform === 'win32') {
	            shell_cmd = 'nw.exe';
	        } else {
	            shell_cmd = 'nw';
	        }
	        var modulePath = path.resolve(binary_module);
	        var appDir = path.join(__dirname, 'util', 'nw-pre-gyp');
	        args.push(appDir);
	        args.push(modulePath);
	        log.info("validate", "Running test command: '" + shell_cmd + ' ' + args.join(' ') + "'");
	        cp.execFile(shell_cmd, args, options, function (err, stdout, stderr) {
	            // check for normal timeout for node-webkit
	            if (err) {
	                if (err.killed === true && err.signal && err.signal.indexOf('SIG') > -1) {
	                    return callback();
	                }
	                var stderrLog = stderr.toString();
	                log.info('stderr', stderrLog);
	                if (/^\s*Xlib:\s*extension\s*"RANDR"\s*missing\s*on\s*display\s*":\d+\.\d+"\.\s*$/.test(stderrLog)) {
	                    log.info('RANDR', 'stderr contains only RANDR error, ignored');
	                    return callback();
	                }
	                return callback(err);
	            }
	            return callback();
	        });
	        return;
	    }
	    args.push('--eval');
	    args.push("'require(\\'" + binary_module.replace(/\'/g, '\\\'') + "\\')'");
	    log.info("validate", "Running test command: '" + shell_cmd + ' ' + args.join(' ') + "'");
	    cp.execFile(shell_cmd, args, options, function (err, stdout, stderr) {
	        if (err) {
	            return callback(err, { stdout: stdout, stderr: stderr });
	        }
	        return callback();
	    });
	}
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3), "/"))

/***/ }),
/* 600 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	
	module.exports = exports = _package;
	
	exports.usage = 'Packs binary (and enclosing directory) into locally staged tarball';
	
	var fs = __webpack_require__(!(function webpackMissingModule() { var e = new Error("Cannot find module \"fs\""); e.code = 'MODULE_NOT_FOUND'; throw e; }()));
	var path = __webpack_require__(270);
	var log = __webpack_require__(310);
	var versioning = __webpack_require__(348);
	var write = __webpack_require__(!(function webpackMissingModule() { var e = new Error("Cannot find module \"fs\""); e.code = 'MODULE_NOT_FOUND'; throw e; }())).createWriteStream;
	var existsAsync = fs.exists || path.exists;
	var mkdirp = __webpack_require__(387);
	
	function _package(gyp, argv, callback) {
	    var pack = __webpack_require__(601).pack;
	    var package_json = JSON.parse(fs.readFileSync('./package.json'));
	    var opts = versioning.evaluate(package_json, gyp.opts);
	    var from = opts.module_path;
	    var binary_module = path.join(from, opts.module_name + '.node');
	    existsAsync(binary_module, function (found) {
	        if (!found) {
	            return callback(new Error("Cannot package because " + binary_module + " missing: run `node-pre-gyp rebuild` first"));
	        }
	        var tarball = opts.staged_tarball;
	        var filter_func = function filter_func(entry) {
	            // ensure directories are +x
	            // https://github.com/mapnik/node-mapnik/issues/262
	            log.info('package', 'packing ' + entry.path);
	            return true;
	        };
	        mkdirp(path.dirname(tarball), function (err) {
	            if (err) throw err;
	            pack(from, { filter: filter_func }).pipe(write(tarball)).on('error', function (err) {
	                if (err) console.error('[' + package_json.name + '] ' + err.message);
	                return callback(err);
	            }).on('close', function () {
	                log.info('package', 'Binary staged at "' + tarball + '"');
	                return callback();
	            });
	        });
	    });
	}

/***/ }),
/* 601 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {"use strict";
	
	var debug = __webpack_require__(602)('tar-pack');
	var uidNumber = __webpack_require__(605);
	var rm = __webpack_require__(607);
	var tar = __webpack_require__(!(function webpackMissingModule() { var e = new Error("Cannot find module \"tar\""); e.code = 'MODULE_NOT_FOUND'; throw e; }()));
	var once = __webpack_require__(376);
	var fstream = __webpack_require__(434);
	var packer = __webpack_require__(608);
	
	var PassThrough = __webpack_require__(282).PassThrough || __webpack_require__(609).PassThrough;
	var zlib = __webpack_require__(421);
	var path = __webpack_require__(270);
	
	var win32 = process.platform === 'win32';
	var myUid = process.getuid && process.getuid();
	var myGid = process.getgid && process.getgid();
	
	if (process.env.SUDO_UID && myUid === 0) {
	  if (!isNaN(process.env.SUDO_UID)) myUid = +process.env.SUDO_UID;
	  if (!isNaN(process.env.SUDO_GID)) myGid = +process.env.SUDO_GID;
	}
	
	exports.pack = pack;
	exports.unpack = unpack;
	
	function pack(folder, options) {
	  options = options || {};
	  if (typeof folder === 'string') {
	
	    var _filter = options.filter || function (entry) {
	      return true;
	    };
	
	    folder = packer({
	      path: folder,
	      type: 'Directory',
	      isDirectory: true,
	      ignoreFiles: options.ignoreFiles || ['.gitignore'],
	      filter: function filter(entry) {
	        // {path, basename, dirname, type} (type is "Directory" or "File")
	        var basename = entry.basename;
	        // some files are *never* allowed under any circumstances
	        // these files should always be either temporary files or
	        // version control related files
	        if (basename === '.git' || basename === '.lock-wscript' || basename.match(/^\.wafpickle-[0-9]+$/) || basename === 'CVS' || basename === '.svn' || basename === '.hg' || basename.match(/^\..*\.swp$/) || basename === '.DS_Store' || basename.match(/^\._/)) {
	          return false;
	        }
	        //custom excludes
	        return _filter(entry);
	      }
	    });
	  }
	  // By default, npm includes some proprietary attributes in the
	  // package tarball.  This is sane, and allowed by the spec.
	  // However, npm *itself* excludes these from its own package,
	  // so that it can be more easily bootstrapped using old and
	  // non-compliant tar implementations.
	  var tarPack = tar.Pack({ noProprietary: options.noProprietary || false, fromBase: options.fromBase || false });
	  var gzip = zlib.Gzip();
	
	  folder.on('error', function (er) {
	    if (er) debug('Error reading folder');
	    return gzip.emit('error', er);
	  });
	  tarPack.on('error', function (er) {
	    if (er) debug('tar creation error');
	    gzip.emit('error', er);
	  });
	  return folder.pipe(tarPack).pipe(gzip);
	}
	
	function unpack(unpackTarget, options, cb) {
	  if (typeof options === 'function' && cb === undefined) cb = options, options = undefined;
	
	  var tarball = new PassThrough();
	  if (typeof cb === 'function') {
	    cb = once(cb);
	    tarball.on('error', cb);
	    tarball.on('close', function () {
	      cb();
	    });
	  }
	
	  var parent = path.dirname(unpackTarget);
	  var base = path.basename(unpackTarget);
	
	  options = options || {};
	  var gid = options.gid || null;
	  var uid = options.uid || null;
	  var dMode = options.dmode || 0x0777; //npm.modes.exec
	  var fMode = options.fmode || 0x0666; //npm.modes.file
	  var defaultName = options.defaultName || (options.defaultName === false ? false : 'index.js');
	  var strip = options.strip !== undefined ? options.strip : 1;
	
	  // figure out who we're supposed to be, if we're not pretending
	  // to be a specific user.
	  if (options.unsafe && !win32) {
	    uid = myUid;
	    gid = myGid;
	  }
	
	  var pending = 2;
	  uidNumber(uid, gid, function (er, uid, gid) {
	    if (er) {
	      tarball.emit('error', er);
	      return tarball.end();
	    }
	    if (0 === --pending) next();
	  });
	  if (!options.keepFiles) {
	    rm(unpackTarget, function (er) {
	      if (er) {
	        tarball.emit('error', er);
	        return tarball.end();
	      }
	      if (0 === --pending) next();
	    });
	  } else {
	    next();
	  }
	  function next() {
	    // gzip {tarball} --decompress --stdout \
	    //   | tar -mvxpf - --strip-components={strip} -C {unpackTarget}
	    gunzTarPerm(tarball, unpackTarget, dMode, fMode, uid, gid, defaultName, strip);
	  }
	  return tarball;
	}
	
	function gunzTarPerm(tarball, target, dMode, fMode, uid, gid, defaultName, strip) {
	  debug('modes %j', [dMode.toString(8), fMode.toString(8)]);
	
	  function fixEntry(entry) {
	    debug('fixEntry %j', entry.path);
	    // never create things that are user-unreadable,
	    // or dirs that are user-un-listable. Only leads to headaches.
	    var originalMode = entry.mode = entry.mode || entry.props.mode;
	    entry.mode = entry.mode | (entry.type === 'Directory' ? dMode : fMode);
	    entry.props.mode = entry.mode;
	    if (originalMode !== entry.mode) {
	      debug('modified mode %j', [entry.path, originalMode, entry.mode]);
	    }
	
	    // if there's a specific owner uid/gid that we want, then set that
	    if (!win32 && typeof uid === 'number' && typeof gid === 'number') {
	      entry.props.uid = entry.uid = uid;
	      entry.props.gid = entry.gid = gid;
	    }
	  }
	
	  var extractOpts = { type: 'Directory', path: target, strip: strip };
	
	  if (!win32 && typeof uid === 'number' && typeof gid === 'number') {
	    extractOpts.uid = uid;
	    extractOpts.gid = gid;
	  }
	
	  extractOpts.filter = function () {
	    // symbolic links are not allowed in packages.
	    if (this.type.match(/^.*Link$/)) {
	      debug('excluding symbolic link: ' + this.path.substr(target.length + 1) + ' -> ' + this.linkpath);
	      return false;
	    }
	    return true;
	  };
	
	  type(tarball, function (err, type) {
	    if (err) return tarball.emit('error', err);
	    var strm = tarball;
	    if (type === 'gzip') {
	      strm = strm.pipe(zlib.Unzip());
	      strm.on('error', function (er) {
	        if (er) debug('unzip error');
	        tarball.emit('error', er);
	      });
	      type = 'tar';
	    }
	    if (type === 'tar') {
	      strm.pipe(tar.Extract(extractOpts)).on('entry', fixEntry).on('error', function (er) {
	        if (er) debug('untar error');
	        tarball.emit('error', er);
	      }).on('close', function () {
	        tarball.emit('close');
	      });
	      return;
	    }
	    if (type === 'naked-file' && defaultName) {
	      var jsOpts = { path: path.resolve(target, defaultName) };
	
	      if (!win32 && typeof uid === 'number' && typeof gid === 'number') {
	        jsOpts.uid = uid;
	        jsOpts.gid = gid;
	      }
	
	      strm.pipe(fstream.Writer(jsOpts)).on('error', function (er) {
	        if (er) debug('copy error');
	        tarball.emit('error', er);
	      }).on('close', function () {
	        tarball.emit('close');
	      });
	      return;
	    }
	
	    return cb(new Error('Unrecognised package type'));
	  });
	}
	
	function type(stream, callback) {
	  stream.on('error', handle);
	  stream.on('data', parse);
	  function handle(err) {
	    stream.removeListener('data', parse);
	    stream.removeListener('error', handle);
	  }
	  function parse(chunk) {
	    // detect what it is.
	    // Then, depending on that, we'll figure out whether it's
	    // a single-file module, gzipped tarball, or naked tarball.
	
	    // gzipped files all start with 1f8b08
	    if (chunk[0] === 0x1F && chunk[1] === 0x8B && chunk[2] === 0x08) {
	      callback(null, 'gzip');
	    } else if (chunk.toString().match(/^package\/\u0000/)) {
	      // note, this will only pick up on tarballs with a root directory called package
	      callback(null, 'tar');
	    } else {
	      callback(null, 'naked-file');
	    }
	
	    // now un-hook, and re-emit the chunk
	    stream.removeListener('data', parse);
	    stream.removeListener('error', handle);
	    stream.unshift(chunk);
	  }
	}
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ }),
/* 602 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
	
	/**
	 * This is the web browser implementation of `debug()`.
	 *
	 * Expose `debug()` as the module.
	 */
	
	exports = module.exports = __webpack_require__(603);
	exports.log = log;
	exports.formatArgs = formatArgs;
	exports.save = save;
	exports.load = load;
	exports.useColors = useColors;
	exports.storage = 'undefined' != typeof chrome && 'undefined' != typeof chrome.storage ? chrome.storage.local : localstorage();
	
	/**
	 * Colors.
	 */
	
	exports.colors = ['lightseagreen', 'forestgreen', 'goldenrod', 'dodgerblue', 'darkorchid', 'crimson'];
	
	/**
	 * Currently only WebKit-based Web Inspectors, Firefox >= v31,
	 * and the Firebug extension (any Firefox version) are known
	 * to support "%c" CSS customizations.
	 *
	 * TODO: add a `localStorage` variable to explicitly enable/disable colors
	 */
	
	function useColors() {
	  // is webkit? http://stackoverflow.com/a/16459606/376773
	  return 'WebkitAppearance' in document.documentElement.style ||
	  // is firebug? http://stackoverflow.com/a/398120/376773
	  window.console && (console.firebug || console.exception && console.table) ||
	  // is firefox >= v31?
	  // https://developer.mozilla.org/en-US/docs/Tools/Web_Console#Styling_messages
	  navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/) && parseInt(RegExp.$1, 10) >= 31;
	}
	
	/**
	 * Map %j to `JSON.stringify()`, since no Web Inspectors do that by default.
	 */
	
	exports.formatters.j = function (v) {
	  return JSON.stringify(v);
	};
	
	/**
	 * Colorize log arguments if enabled.
	 *
	 * @api public
	 */
	
	function formatArgs() {
	  var args = arguments;
	  var useColors = this.useColors;
	
	  args[0] = (useColors ? '%c' : '') + this.namespace + (useColors ? ' %c' : ' ') + args[0] + (useColors ? '%c ' : ' ') + '+' + exports.humanize(this.diff);
	
	  if (!useColors) return args;
	
	  var c = 'color: ' + this.color;
	  args = [args[0], c, 'color: inherit'].concat(Array.prototype.slice.call(args, 1));
	
	  // the final "%c" is somewhat tricky, because there could be other
	  // arguments passed either before or after the %c, so we need to
	  // figure out the correct index to insert the CSS into
	  var index = 0;
	  var lastC = 0;
	  args[0].replace(/%[a-z%]/g, function (match) {
	    if ('%%' === match) return;
	    index++;
	    if ('%c' === match) {
	      // we only are interested in the *last* %c
	      // (the user may have provided their own)
	      lastC = index;
	    }
	  });
	
	  args.splice(lastC, 0, c);
	  return args;
	}
	
	/**
	 * Invokes `console.log()` when available.
	 * No-op when `console.log` is not a "function".
	 *
	 * @api public
	 */
	
	function log() {
	  // this hackery is required for IE8/9, where
	  // the `console.log` function doesn't have 'apply'
	  return 'object' === (typeof console === 'undefined' ? 'undefined' : _typeof(console)) && console.log && Function.prototype.apply.call(console.log, console, arguments);
	}
	
	/**
	 * Save `namespaces`.
	 *
	 * @param {String} namespaces
	 * @api private
	 */
	
	function save(namespaces) {
	  try {
	    if (null == namespaces) {
	      exports.storage.removeItem('debug');
	    } else {
	      exports.storage.debug = namespaces;
	    }
	  } catch (e) {}
	}
	
	/**
	 * Load `namespaces`.
	 *
	 * @return {String} returns the previously persisted debug modes
	 * @api private
	 */
	
	function load() {
	  var r;
	  try {
	    r = exports.storage.debug;
	  } catch (e) {}
	  return r;
	}
	
	/**
	 * Enable namespaces listed in `localStorage.debug` initially.
	 */
	
	exports.enable(load());
	
	/**
	 * Localstorage attempts to return the localstorage.
	 *
	 * This is necessary because safari throws
	 * when a user disables cookies/localstorage
	 * and you attempt to access it.
	 *
	 * @return {LocalStorage}
	 * @api private
	 */
	
	function localstorage() {
	  try {
	    return window.localStorage;
	  } catch (e) {}
	}

/***/ }),
/* 603 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	/**
	 * This is the common logic for both the Node.js and web browser
	 * implementations of `debug()`.
	 *
	 * Expose `debug()` as the module.
	 */
	
	exports = module.exports = debug;
	exports.coerce = coerce;
	exports.disable = disable;
	exports.enable = enable;
	exports.enabled = enabled;
	exports.humanize = __webpack_require__(604);
	
	/**
	 * The currently active debug mode names, and names to skip.
	 */
	
	exports.names = [];
	exports.skips = [];
	
	/**
	 * Map of special "%n" handling functions, for the debug "format" argument.
	 *
	 * Valid key names are a single, lowercased letter, i.e. "n".
	 */
	
	exports.formatters = {};
	
	/**
	 * Previously assigned color.
	 */
	
	var prevColor = 0;
	
	/**
	 * Previous log timestamp.
	 */
	
	var prevTime;
	
	/**
	 * Select a color.
	 *
	 * @return {Number}
	 * @api private
	 */
	
	function selectColor() {
	  return exports.colors[prevColor++ % exports.colors.length];
	}
	
	/**
	 * Create a debugger with the given `namespace`.
	 *
	 * @param {String} namespace
	 * @return {Function}
	 * @api public
	 */
	
	function debug(namespace) {
	
	  // define the `disabled` version
	  function disabled() {}
	  disabled.enabled = false;
	
	  // define the `enabled` version
	  function enabled() {
	
	    var self = enabled;
	
	    // set `diff` timestamp
	    var curr = +new Date();
	    var ms = curr - (prevTime || curr);
	    self.diff = ms;
	    self.prev = prevTime;
	    self.curr = curr;
	    prevTime = curr;
	
	    // add the `color` if not set
	    if (null == self.useColors) self.useColors = exports.useColors();
	    if (null == self.color && self.useColors) self.color = selectColor();
	
	    var args = Array.prototype.slice.call(arguments);
	
	    args[0] = exports.coerce(args[0]);
	
	    if ('string' !== typeof args[0]) {
	      // anything else let's inspect with %o
	      args = ['%o'].concat(args);
	    }
	
	    // apply any `formatters` transformations
	    var index = 0;
	    args[0] = args[0].replace(/%([a-z%])/g, function (match, format) {
	      // if we encounter an escaped % then don't increase the array index
	      if (match === '%%') return match;
	      index++;
	      var formatter = exports.formatters[format];
	      if ('function' === typeof formatter) {
	        var val = args[index];
	        match = formatter.call(self, val);
	
	        // now we need to remove `args[index]` since it's inlined in the `format`
	        args.splice(index, 1);
	        index--;
	      }
	      return match;
	    });
	
	    if ('function' === typeof exports.formatArgs) {
	      args = exports.formatArgs.apply(self, args);
	    }
	    var logFn = enabled.log || exports.log || console.log.bind(console);
	    logFn.apply(self, args);
	  }
	  enabled.enabled = true;
	
	  var fn = exports.enabled(namespace) ? enabled : disabled;
	
	  fn.namespace = namespace;
	
	  return fn;
	}
	
	/**
	 * Enables a debug mode by namespaces. This can include modes
	 * separated by a colon and wildcards.
	 *
	 * @param {String} namespaces
	 * @api public
	 */
	
	function enable(namespaces) {
	  exports.save(namespaces);
	
	  var split = (namespaces || '').split(/[\s,]+/);
	  var len = split.length;
	
	  for (var i = 0; i < len; i++) {
	    if (!split[i]) continue; // ignore empty strings
	    namespaces = split[i].replace(/\*/g, '.*?');
	    if (namespaces[0] === '-') {
	      exports.skips.push(new RegExp('^' + namespaces.substr(1) + '$'));
	    } else {
	      exports.names.push(new RegExp('^' + namespaces + '$'));
	    }
	  }
	}
	
	/**
	 * Disable debug output.
	 *
	 * @api public
	 */
	
	function disable() {
	  exports.enable('');
	}
	
	/**
	 * Returns true if the given mode name is enabled, false otherwise.
	 *
	 * @param {String} name
	 * @return {Boolean}
	 * @api public
	 */
	
	function enabled(name) {
	  var i, len;
	  for (i = 0, len = exports.skips.length; i < len; i++) {
	    if (exports.skips[i].test(name)) {
	      return false;
	    }
	  }
	  for (i = 0, len = exports.names.length; i < len; i++) {
	    if (exports.names[i].test(name)) {
	      return true;
	    }
	  }
	  return false;
	}
	
	/**
	 * Coerce `val`.
	 *
	 * @param {Mixed} val
	 * @return {Mixed}
	 * @api private
	 */
	
	function coerce(val) {
	  if (val instanceof Error) return val.stack || val.message;
	  return val;
	}

/***/ }),
/* 604 */
/***/ (function(module, exports) {

	'use strict';
	
	/**
	 * Helpers.
	 */
	
	var s = 1000;
	var m = s * 60;
	var h = m * 60;
	var d = h * 24;
	var y = d * 365.25;
	
	/**
	 * Parse or format the given `val`.
	 *
	 * Options:
	 *
	 *  - `long` verbose formatting [false]
	 *
	 * @param {String|Number} val
	 * @param {Object} options
	 * @return {String|Number}
	 * @api public
	 */
	
	module.exports = function (val, options) {
	  options = options || {};
	  if ('string' == typeof val) return parse(val);
	  return options.long ? long(val) : short(val);
	};
	
	/**
	 * Parse the given `str` and return milliseconds.
	 *
	 * @param {String} str
	 * @return {Number}
	 * @api private
	 */
	
	function parse(str) {
	  str = '' + str;
	  if (str.length > 10000) return;
	  var match = /^((?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|years?|yrs?|y)?$/i.exec(str);
	  if (!match) return;
	  var n = parseFloat(match[1]);
	  var type = (match[2] || 'ms').toLowerCase();
	  switch (type) {
	    case 'years':
	    case 'year':
	    case 'yrs':
	    case 'yr':
	    case 'y':
	      return n * y;
	    case 'days':
	    case 'day':
	    case 'd':
	      return n * d;
	    case 'hours':
	    case 'hour':
	    case 'hrs':
	    case 'hr':
	    case 'h':
	      return n * h;
	    case 'minutes':
	    case 'minute':
	    case 'mins':
	    case 'min':
	    case 'm':
	      return n * m;
	    case 'seconds':
	    case 'second':
	    case 'secs':
	    case 'sec':
	    case 's':
	      return n * s;
	    case 'milliseconds':
	    case 'millisecond':
	    case 'msecs':
	    case 'msec':
	    case 'ms':
	      return n;
	  }
	}
	
	/**
	 * Short format for `ms`.
	 *
	 * @param {Number} ms
	 * @return {String}
	 * @api private
	 */
	
	function short(ms) {
	  if (ms >= d) return Math.round(ms / d) + 'd';
	  if (ms >= h) return Math.round(ms / h) + 'h';
	  if (ms >= m) return Math.round(ms / m) + 'm';
	  if (ms >= s) return Math.round(ms / s) + 's';
	  return ms + 'ms';
	}
	
	/**
	 * Long format for `ms`.
	 *
	 * @param {Number} ms
	 * @return {String}
	 * @api private
	 */
	
	function long(ms) {
	  return plural(ms, d, 'day') || plural(ms, h, 'hour') || plural(ms, m, 'minute') || plural(ms, s, 'second') || ms + ' ms';
	}
	
	/**
	 * Pluralization helper.
	 */
	
	function plural(ms, n, name) {
	  if (ms < n) return;
	  if (ms < n * 1.5) return Math.floor(ms / n) + ' ' + name;
	  return Math.ceil(ms / n) + ' ' + name + 's';
	}

/***/ }),
/* 605 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {"use strict";
	
	module.exports = uidNumber;
	
	// This module calls into get-uid-gid.js, which sets the
	// uid and gid to the supplied argument, in order to find out their
	// numeric value.  This can't be done in the main node process,
	// because otherwise node would be running as that user from this
	// point on.
	
	var child_process = __webpack_require__(!(function webpackMissingModule() { var e = new Error("Cannot find module \"child_process\""); e.code = 'MODULE_NOT_FOUND'; throw e; }())),
	    path = __webpack_require__(270),
	    uidSupport = process.getuid && process.setuid,
	    uidCache = {},
	    gidCache = {};
	
	function uidNumber(uid, gid, cb) {
	  if (!uidSupport) return cb();
	  if (typeof cb !== "function") cb = gid, gid = null;
	  if (typeof cb !== "function") cb = uid, uid = null;
	  if (gid == null) gid = process.getgid();
	  if (uid == null) uid = process.getuid();
	  if (!isNaN(gid)) gid = gidCache[gid] = +gid;
	  if (!isNaN(uid)) uid = uidCache[uid] = +uid;
	
	  if (uidCache.hasOwnProperty(uid)) uid = uidCache[uid];
	  if (gidCache.hasOwnProperty(gid)) gid = gidCache[gid];
	
	  if (typeof gid === "number" && typeof uid === "number") {
	    return process.nextTick(cb.bind(null, null, uid, gid));
	  }
	
	  var getter = /*require.resolve*/(606);
	
	  child_process.execFile(process.execPath, [getter, uid, gid], function (code, out, stderr) {
	    if (code) {
	      var er = new Error("could not get uid/gid\n" + stderr);
	      er.code = code;
	      return cb(er);
	    }
	
	    try {
	      out = JSON.parse(out + "");
	    } catch (ex) {
	      return cb(ex);
	    }
	
	    if (out.error) {
	      var er = new Error(out.error);
	      er.errno = out.errno;
	      return cb(er);
	    }
	
	    if (isNaN(out.uid) || isNaN(out.gid)) return cb(new Error("Could not get uid/gid: " + JSON.stringify(out)));
	
	    cb(null, uidCache[uid] = +out.uid, gidCache[gid] = +out.gid);
	  });
	}
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ }),
/* 606 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(module, process) {"use strict";
	
	if (module !== __webpack_require__.c[0]) {
	  throw new Error("This file should not be loaded with require()");
	}
	
	if (!process.getuid || !process.getgid) {
	  throw new Error("this file should not be called without uid/gid support");
	}
	
	var argv = process.argv.slice(2),
	    user = argv[0] || process.getuid(),
	    group = argv[1] || process.getgid();
	
	if (!isNaN(user)) user = +user;
	if (!isNaN(group)) group = +group;
	
	console.error([user, group]);
	
	try {
	  process.setgid(group);
	  process.setuid(user);
	  console.log(JSON.stringify({ uid: +process.getuid(), gid: +process.getgid() }));
	} catch (ex) {
	  console.log(JSON.stringify({ error: ex.message, errno: ex.errno }));
	}
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(205)(module), __webpack_require__(3)))

/***/ }),
/* 607 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {"use strict";
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
	
	module.exports = rimraf;
	rimraf.sync = rimrafSync;
	
	var assert = __webpack_require__(336);
	var path = __webpack_require__(270);
	var fs = __webpack_require__(!(function webpackMissingModule() { var e = new Error("Cannot find module \"fs\""); e.code = 'MODULE_NOT_FOUND'; throw e; }()));
	var glob = __webpack_require__(364);
	
	var defaultGlobOpts = {
	  nosort: true,
	  silent: true
	};
	
	// for EMFILE handling
	var timeout = 0;
	
	var isWindows = process.platform === "win32";
	
	function defaults(options) {
	  var methods = ['unlink', 'chmod', 'stat', 'lstat', 'rmdir', 'readdir'];
	  methods.forEach(function (m) {
	    options[m] = options[m] || fs[m];
	    m = m + 'Sync';
	    options[m] = options[m] || fs[m];
	  });
	
	  options.maxBusyTries = options.maxBusyTries || 3;
	  options.emfileWait = options.emfileWait || 1000;
	  if (options.glob === false) {
	    options.disableGlob = true;
	  }
	  options.disableGlob = options.disableGlob || false;
	  options.glob = options.glob || defaultGlobOpts;
	}
	
	function rimraf(p, options, cb) {
	  if (typeof options === 'function') {
	    cb = options;
	    options = {};
	  }
	
	  assert(p, 'rimraf: missing path');
	  assert.equal(typeof p === "undefined" ? "undefined" : _typeof(p), 'string', 'rimraf: path should be a string');
	  assert.equal(typeof cb === "undefined" ? "undefined" : _typeof(cb), 'function', 'rimraf: callback function required');
	  assert(options, 'rimraf: invalid options argument provided');
	  assert.equal(typeof options === "undefined" ? "undefined" : _typeof(options), 'object', 'rimraf: options should be object');
	
	  defaults(options);
	
	  var busyTries = 0;
	  var errState = null;
	  var n = 0;
	
	  if (options.disableGlob || !glob.hasMagic(p)) return afterGlob(null, [p]);
	
	  options.lstat(p, function (er, stat) {
	    if (!er) return afterGlob(null, [p]);
	
	    glob(p, options.glob, afterGlob);
	  });
	
	  function next(er) {
	    errState = errState || er;
	    if (--n === 0) cb(errState);
	  }
	
	  function afterGlob(er, results) {
	    if (er) return cb(er);
	
	    n = results.length;
	    if (n === 0) return cb();
	
	    results.forEach(function (p) {
	      rimraf_(p, options, function CB(er) {
	        if (er) {
	          if (isWindows && (er.code === "EBUSY" || er.code === "ENOTEMPTY" || er.code === "EPERM") && busyTries < options.maxBusyTries) {
	            busyTries++;
	            var time = busyTries * 100;
	            // try again, with the same exact callback as this one.
	            return setTimeout(function () {
	              rimraf_(p, options, CB);
	            }, time);
	          }
	
	          // this one won't happen if graceful-fs is used.
	          if (er.code === "EMFILE" && timeout < options.emfileWait) {
	            return setTimeout(function () {
	              rimraf_(p, options, CB);
	            }, timeout++);
	          }
	
	          // already gone
	          if (er.code === "ENOENT") er = null;
	        }
	
	        timeout = 0;
	        next(er);
	      });
	    });
	  }
	}
	
	// Two possible strategies.
	// 1. Assume it's a file.  unlink it, then do the dir stuff on EPERM or EISDIR
	// 2. Assume it's a directory.  readdir, then do the file stuff on ENOTDIR
	//
	// Both result in an extra syscall when you guess wrong.  However, there
	// are likely far more normal files in the world than directories.  This
	// is based on the assumption that a the average number of files per
	// directory is >= 1.
	//
	// If anyone ever complains about this, then I guess the strategy could
	// be made configurable somehow.  But until then, YAGNI.
	function rimraf_(p, options, cb) {
	  assert(p);
	  assert(options);
	  assert(typeof cb === 'function');
	
	  // sunos lets the root user unlink directories, which is... weird.
	  // so we have to lstat here and make sure it's not a dir.
	  options.lstat(p, function (er, st) {
	    if (er && er.code === "ENOENT") return cb(null);
	
	    // Windows can EPERM on stat.  Life is suffering.
	    if (er && er.code === "EPERM" && isWindows) fixWinEPERM(p, options, er, cb);
	
	    if (st && st.isDirectory()) return rmdir(p, options, er, cb);
	
	    options.unlink(p, function (er) {
	      if (er) {
	        if (er.code === "ENOENT") return cb(null);
	        if (er.code === "EPERM") return isWindows ? fixWinEPERM(p, options, er, cb) : rmdir(p, options, er, cb);
	        if (er.code === "EISDIR") return rmdir(p, options, er, cb);
	      }
	      return cb(er);
	    });
	  });
	}
	
	function fixWinEPERM(p, options, er, cb) {
	  assert(p);
	  assert(options);
	  assert(typeof cb === 'function');
	  if (er) assert(er instanceof Error);
	
	  options.chmod(p, 666, function (er2) {
	    if (er2) cb(er2.code === "ENOENT" ? null : er);else options.stat(p, function (er3, stats) {
	      if (er3) cb(er3.code === "ENOENT" ? null : er);else if (stats.isDirectory()) rmdir(p, options, er, cb);else options.unlink(p, cb);
	    });
	  });
	}
	
	function fixWinEPERMSync(p, options, er) {
	  assert(p);
	  assert(options);
	  if (er) assert(er instanceof Error);
	
	  try {
	    options.chmodSync(p, 666);
	  } catch (er2) {
	    if (er2.code === "ENOENT") return;else throw er;
	  }
	
	  try {
	    var stats = options.statSync(p);
	  } catch (er3) {
	    if (er3.code === "ENOENT") return;else throw er;
	  }
	
	  if (stats.isDirectory()) rmdirSync(p, options, er);else options.unlinkSync(p);
	}
	
	function rmdir(p, options, originalEr, cb) {
	  assert(p);
	  assert(options);
	  if (originalEr) assert(originalEr instanceof Error);
	  assert(typeof cb === 'function');
	
	  // try to rmdir first, and only readdir on ENOTEMPTY or EEXIST (SunOS)
	  // if we guessed wrong, and it's not a directory, then
	  // raise the original error.
	  options.rmdir(p, function (er) {
	    if (er && (er.code === "ENOTEMPTY" || er.code === "EEXIST" || er.code === "EPERM")) rmkids(p, options, cb);else if (er && er.code === "ENOTDIR") cb(originalEr);else cb(er);
	  });
	}
	
	function rmkids(p, options, cb) {
	  assert(p);
	  assert(options);
	  assert(typeof cb === 'function');
	
	  options.readdir(p, function (er, files) {
	    if (er) return cb(er);
	    var n = files.length;
	    if (n === 0) return options.rmdir(p, cb);
	    var errState;
	    files.forEach(function (f) {
	      rimraf(path.join(p, f), options, function (er) {
	        if (errState) return;
	        if (er) return cb(errState = er);
	        if (--n === 0) options.rmdir(p, cb);
	      });
	    });
	  });
	}
	
	// this looks simpler, and is strictly *faster*, but will
	// tie up the JavaScript thread and fail on excessively
	// deep directory trees.
	function rimrafSync(p, options) {
	  options = options || {};
	  defaults(options);
	
	  assert(p, 'rimraf: missing path');
	  assert.equal(typeof p === "undefined" ? "undefined" : _typeof(p), 'string', 'rimraf: path should be a string');
	  assert(options, 'rimraf: missing options');
	  assert.equal(typeof options === "undefined" ? "undefined" : _typeof(options), 'object', 'rimraf: options should be object');
	
	  var results;
	
	  if (options.disableGlob || !glob.hasMagic(p)) {
	    results = [p];
	  } else {
	    try {
	      options.lstatSync(p);
	      results = [p];
	    } catch (er) {
	      results = glob.sync(p, options.glob);
	    }
	  }
	
	  if (!results.length) return;
	
	  for (var i = 0; i < results.length; i++) {
	    var p = results[i];
	
	    try {
	      var st = options.lstatSync(p);
	    } catch (er) {
	      if (er.code === "ENOENT") return;
	
	      // Windows can EPERM on stat.  Life is suffering.
	      if (er.code === "EPERM" && isWindows) fixWinEPERMSync(p, options, er);
	    }
	
	    try {
	      // sunos lets the root user unlink directories, which is... weird.
	      if (st && st.isDirectory()) rmdirSync(p, options, null);else options.unlinkSync(p);
	    } catch (er) {
	      if (er.code === "ENOENT") return;
	      if (er.code === "EPERM") return isWindows ? fixWinEPERMSync(p, options, er) : rmdirSync(p, options, er);
	      if (er.code !== "EISDIR") throw er;
	      rmdirSync(p, options, er);
	    }
	  }
	}
	
	function rmdirSync(p, options, originalEr) {
	  assert(p);
	  assert(options);
	  if (originalEr) assert(originalEr instanceof Error);
	
	  try {
	    options.rmdirSync(p);
	  } catch (er) {
	    if (er.code === "ENOENT") return;
	    if (er.code === "ENOTDIR") throw originalEr;
	    if (er.code === "ENOTEMPTY" || er.code === "EEXIST" || er.code === "EPERM") rmkidsSync(p, options);
	  }
	}
	
	function rmkidsSync(p, options) {
	  assert(p);
	  assert(options);
	  options.readdirSync(p).forEach(function (f) {
	    rimrafSync(path.join(p, f), options);
	  });
	  options.rmdirSync(p, options);
	}
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ }),
/* 608 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	
	// Essentially, this is a fstream.DirReader class, but with a
	// bit of special logic to read the specified sort of ignore files,
	// and a filter that prevents it from picking up anything excluded
	// by those files.
	
	var Minimatch = __webpack_require__(367).Minimatch,
	    fstream = __webpack_require__(434),
	    DirReader = fstream.DirReader,
	    inherits = __webpack_require__(284),
	    path = __webpack_require__(270),
	    fs = __webpack_require__(!(function webpackMissingModule() { var e = new Error("Cannot find module \"fs\""); e.code = 'MODULE_NOT_FOUND'; throw e; }()));
	
	module.exports = IgnoreReader;
	
	inherits(IgnoreReader, DirReader);
	
	function IgnoreReader(props) {
	  if (!(this instanceof IgnoreReader)) {
	    return new IgnoreReader(props);
	  }
	
	  // must be a Directory type
	  if (typeof props === "string") {
	    props = { path: path.resolve(props) };
	  }
	
	  props.type = "Directory";
	  props.Directory = true;
	
	  if (!props.ignoreFiles) props.ignoreFiles = [".ignore"];
	  this.ignoreFiles = props.ignoreFiles;
	
	  this.ignoreRules = null;
	
	  // ensure that .ignore files always show up at the top of the list
	  // that way, they can be read before proceeding to handle other
	  // entries in that same folder
	  if (props.sort) {
	    this._sort = props.sort === "alpha" ? alphasort : props.sort;
	    props.sort = null;
	  }
	
	  this.on("entries", function () {
	    // if there are any ignore files in the list, then
	    // pause and add them.
	    // then, filter the list based on our ignoreRules
	
	    var hasIg = this.entries.some(this.isIgnoreFile, this);
	
	    if (!hasIg) return this.filterEntries();
	
	    this.addIgnoreFiles();
	  });
	
	  // we filter entries before we know what they are.
	  // however, directories have to be re-tested against
	  // rules with a "/" appended, because "a/b/" will only
	  // match if "a/b" is a dir, and not otherwise.
	  this.on("_entryStat", function (entry, props) {
	    var t = entry.basename;
	    if (!this.applyIgnores(entry.basename, entry.type === "Directory", entry)) {
	      entry.abort();
	    }
	  }.bind(this));
	
	  DirReader.call(this, props);
	}
	
	IgnoreReader.prototype.addIgnoreFiles = function () {
	  if (this._paused) {
	    this.once("resume", this.addIgnoreFiles);
	    return;
	  }
	  if (this._ignoreFilesAdded) return;
	  this._ignoreFilesAdded = true;
	
	  var newIg = this.entries.filter(this.isIgnoreFile, this),
	      count = newIg.length,
	      errState = null;
	
	  if (!count) return;
	
	  this.pause();
	
	  var then = function (er) {
	    if (errState) return;
	    if (er) return this.emit("error", errState = er);
	    if (--count === 0) {
	      this.filterEntries();
	      this.resume();
	    } else {
	      this.addIgnoreFile(newIg[newIg.length - count], then);
	    }
	  }.bind(this);
	
	  this.addIgnoreFile(newIg[0], then);
	};
	
	IgnoreReader.prototype.isIgnoreFile = function (e) {
	  return e !== "." && e !== ".." && -1 !== this.ignoreFiles.indexOf(e);
	};
	
	IgnoreReader.prototype.getChildProps = function (stat) {
	  var props = DirReader.prototype.getChildProps.call(this, stat);
	  props.ignoreFiles = this.ignoreFiles;
	
	  // Directories have to be read as IgnoreReaders
	  // otherwise fstream.Reader will create a DirReader instead.
	  if (stat.isDirectory()) {
	    props.type = this.constructor;
	  }
	  return props;
	};
	
	IgnoreReader.prototype.addIgnoreFile = function (e, cb) {
	  // read the file, and then call addIgnoreRules
	  // if there's an error, then tell the cb about it.
	
	  var ig = path.resolve(this.path, e);
	  fs.readFile(ig, function (er, data) {
	    if (er) return cb(er);
	
	    this.emit("ignoreFile", e, data);
	    var rules = this.readRules(data, e);
	    this.addIgnoreRules(rules, e);
	    cb();
	  }.bind(this));
	};
	
	IgnoreReader.prototype.readRules = function (buf, e) {
	  return buf.toString().split(/\r?\n/);
	};
	
	// Override this to do fancier things, like read the
	// "files" array from a package.json file or something.
	IgnoreReader.prototype.addIgnoreRules = function (set, e) {
	  // filter out anything obvious
	  set = set.filter(function (s) {
	    s = s.trim();
	    return s && !s.match(/^#/);
	  });
	
	  // no rules to add!
	  if (!set.length) return;
	
	  // now get a minimatch object for each one of these.
	  // Note that we need to allow dot files by default, and
	  // not switch the meaning of their exclusion
	  var mmopt = { matchBase: true, dot: true, flipNegate: true },
	      mm = set.map(function (s) {
	    var m = new Minimatch(s, mmopt);
	    m.ignoreFile = e;
	    return m;
	  });
	
	  if (!this.ignoreRules) this.ignoreRules = [];
	  this.ignoreRules.push.apply(this.ignoreRules, mm);
	};
	
	IgnoreReader.prototype.filterEntries = function () {
	  // this exclusion is at the point where we know the list of
	  // entries in the dir, but don't know what they are.  since
	  // some of them *might* be directories, we have to run the
	  // match in dir-mode as well, so that we'll pick up partials
	  // of files that will be included later.  Anything included
	  // at this point will be checked again later once we know
	  // what it is.
	  this.entries = this.entries.filter(function (entry) {
	    // at this point, we don't know if it's a dir or not.
	    return this.applyIgnores(entry) || this.applyIgnores(entry, true);
	  }, this);
	};
	
	IgnoreReader.prototype.applyIgnores = function (entry, partial, obj) {
	  var included = true;
	
	  // this = /a/b/c
	  // entry = d
	  // parent /a/b sees c/d
	  if (this.parent && this.parent.applyIgnores) {
	    var pt = this.basename + "/" + entry;
	    included = this.parent.applyIgnores(pt, partial);
	  }
	
	  // Negated Rules
	  // Since we're *ignoring* things here, negating means that a file
	  // is re-included, if it would have been excluded by a previous
	  // rule.  So, negated rules are only relevant if the file
	  // has been excluded.
	  //
	  // Similarly, if a file has been excluded, then there's no point
	  // trying it against rules that have already been applied
	  //
	  // We're using the "flipnegate" flag here, which tells minimatch
	  // to set the "negate" for our information, but still report
	  // whether the core pattern was a hit or a miss.
	
	  if (!this.ignoreRules) {
	    return included;
	  }
	
	  this.ignoreRules.forEach(function (rule) {
	    // negation means inclusion
	    if (rule.negate && included || !rule.negate && !included) {
	      // unnecessary
	      return;
	    }
	
	    // first, match against /foo/bar
	    var match = rule.match("/" + entry);
	
	    if (!match) {
	      // try with the leading / trimmed off the test
	      // eg: foo/bar instead of /foo/bar
	      match = rule.match(entry);
	    }
	
	    // if the entry is a directory, then it will match
	    // with a trailing slash. eg: /foo/bar/ or foo/bar/
	    if (!match && partial) {
	      match = rule.match("/" + entry + "/") || rule.match(entry + "/");
	    }
	
	    // When including a file with a negated rule, it's
	    // relevant if a directory partially matches, since
	    // it may then match a file within it.
	    // Eg, if you ignore /a, but !/a/b/c
	    if (!match && rule.negate && partial) {
	      match = rule.match("/" + entry, true) || rule.match(entry, true);
	    }
	
	    if (match) {
	      included = rule.negate;
	    }
	  }, this);
	
	  return included;
	};
	
	IgnoreReader.prototype.sort = function (a, b) {
	  var aig = this.ignoreFiles.indexOf(a) !== -1,
	      big = this.ignoreFiles.indexOf(b) !== -1;
	
	  if (aig && !big) return -1;
	  if (big && !aig) return 1;
	  return this._sort(a, b);
	};
	
	IgnoreReader.prototype._sort = function (a, b) {
	  return 0;
	};
	
	function alphasort(a, b) {
	  return a === b ? 0 : a.toLowerCase() > b.toLowerCase() ? 1 : a.toLowerCase() < b.toLowerCase() ? -1 : a > b ? 1 : -1;
	}

/***/ }),
/* 609 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';
	
	var Stream = function () {
	  try {
	    return __webpack_require__(282); // hack to fix a circular dependency issue when used with browserify
	  } catch (_) {}
	}();
	exports = module.exports = __webpack_require__(610);
	exports.Stream = Stream || exports;
	exports.Readable = exports;
	exports.Writable = __webpack_require__(614);
	exports.Duplex = __webpack_require__(613);
	exports.Transform = __webpack_require__(616);
	exports.PassThrough = __webpack_require__(617);
	
	if (!process.browser && process.env.READABLE_STREAM === 'disable' && Stream) {
	  module.exports = Stream;
	}
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ }),
/* 610 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';
	
	module.exports = Readable;
	
	/*<replacement>*/
	var processNextTick = __webpack_require__(287);
	/*</replacement>*/
	
	/*<replacement>*/
	var isArray = __webpack_require__(288);
	/*</replacement>*/
	
	Readable.ReadableState = ReadableState;
	
	/*<replacement>*/
	var EE = __webpack_require__(283).EventEmitter;
	
	var EElistenerCount = function EElistenerCount(emitter, type) {
	  return emitter.listeners(type).length;
	};
	/*</replacement>*/
	
	/*<replacement>*/
	var Stream;
	(function () {
	  try {
	    Stream = __webpack_require__(282);
	  } catch (_) {} finally {
	    if (!Stream) Stream = __webpack_require__(283).EventEmitter;
	  }
	})();
	/*</replacement>*/
	
	var Buffer = __webpack_require__(290).Buffer;
	/*<replacement>*/
	var bufferShim = __webpack_require__(293);
	/*</replacement>*/
	
	/*<replacement>*/
	var util = __webpack_require__(294);
	util.inherits = __webpack_require__(284);
	/*</replacement>*/
	
	/*<replacement>*/
	var debugUtil = __webpack_require__(611);
	var debug = void 0;
	if (debugUtil && debugUtil.debuglog) {
	  debug = debugUtil.debuglog('stream');
	} else {
	  debug = function debug() {};
	}
	/*</replacement>*/
	
	var BufferList = __webpack_require__(612);
	var StringDecoder;
	
	util.inherits(Readable, Stream);
	
	function prependListener(emitter, event, fn) {
	  if (typeof emitter.prependListener === 'function') {
	    return emitter.prependListener(event, fn);
	  } else {
	    // This is a hack to make sure that our error handler is attached before any
	    // userland ones.  NEVER DO THIS. This is here only because this code needs
	    // to continue to work with older versions of Node.js that do not include
	    // the prependListener() method. The goal is to eventually remove this hack.
	    if (!emitter._events || !emitter._events[event]) emitter.on(event, fn);else if (isArray(emitter._events[event])) emitter._events[event].unshift(fn);else emitter._events[event] = [fn, emitter._events[event]];
	  }
	}
	
	var Duplex;
	function ReadableState(options, stream) {
	  Duplex = Duplex || __webpack_require__(613);
	
	  options = options || {};
	
	  // object stream flag. Used to make read(n) ignore n and to
	  // make all the buffer merging and length checks go away
	  this.objectMode = !!options.objectMode;
	
	  if (stream instanceof Duplex) this.objectMode = this.objectMode || !!options.readableObjectMode;
	
	  // the point at which it stops calling _read() to fill the buffer
	  // Note: 0 is a valid value, means "don't call _read preemptively ever"
	  var hwm = options.highWaterMark;
	  var defaultHwm = this.objectMode ? 16 : 16 * 1024;
	  this.highWaterMark = hwm || hwm === 0 ? hwm : defaultHwm;
	
	  // cast to ints.
	  this.highWaterMark = ~~this.highWaterMark;
	
	  // A linked list is used to store data chunks instead of an array because the
	  // linked list can remove elements from the beginning faster than
	  // array.shift()
	  this.buffer = new BufferList();
	  this.length = 0;
	  this.pipes = null;
	  this.pipesCount = 0;
	  this.flowing = null;
	  this.ended = false;
	  this.endEmitted = false;
	  this.reading = false;
	
	  // a flag to be able to tell if the onwrite cb is called immediately,
	  // or on a later tick.  We set this to true at first, because any
	  // actions that shouldn't happen until "later" should generally also
	  // not happen before the first write call.
	  this.sync = true;
	
	  // whenever we return null, then we set a flag to say
	  // that we're awaiting a 'readable' event emission.
	  this.needReadable = false;
	  this.emittedReadable = false;
	  this.readableListening = false;
	  this.resumeScheduled = false;
	
	  // Crypto is kind of old and crusty.  Historically, its default string
	  // encoding is 'binary' so we have to make this configurable.
	  // Everything else in the universe uses 'utf8', though.
	  this.defaultEncoding = options.defaultEncoding || 'utf8';
	
	  // when piping, we only care about 'readable' events that happen
	  // after read()ing all the bytes and not getting any pushback.
	  this.ranOut = false;
	
	  // the number of writers that are awaiting a drain event in .pipe()s
	  this.awaitDrain = 0;
	
	  // if true, a maybeReadMore has been scheduled
	  this.readingMore = false;
	
	  this.decoder = null;
	  this.encoding = null;
	  if (options.encoding) {
	    if (!StringDecoder) StringDecoder = __webpack_require__(615).StringDecoder;
	    this.decoder = new StringDecoder(options.encoding);
	    this.encoding = options.encoding;
	  }
	}
	
	var Duplex;
	function Readable(options) {
	  Duplex = Duplex || __webpack_require__(613);
	
	  if (!(this instanceof Readable)) return new Readable(options);
	
	  this._readableState = new ReadableState(options, this);
	
	  // legacy
	  this.readable = true;
	
	  if (options && typeof options.read === 'function') this._read = options.read;
	
	  Stream.call(this);
	}
	
	// Manually shove something into the read() buffer.
	// This returns true if the highWaterMark has not been hit yet,
	// similar to how Writable.write() returns true if you should
	// write() some more.
	Readable.prototype.push = function (chunk, encoding) {
	  var state = this._readableState;
	
	  if (!state.objectMode && typeof chunk === 'string') {
	    encoding = encoding || state.defaultEncoding;
	    if (encoding !== state.encoding) {
	      chunk = bufferShim.from(chunk, encoding);
	      encoding = '';
	    }
	  }
	
	  return readableAddChunk(this, state, chunk, encoding, false);
	};
	
	// Unshift should *always* be something directly out of read()
	Readable.prototype.unshift = function (chunk) {
	  var state = this._readableState;
	  return readableAddChunk(this, state, chunk, '', true);
	};
	
	Readable.prototype.isPaused = function () {
	  return this._readableState.flowing === false;
	};
	
	function readableAddChunk(stream, state, chunk, encoding, addToFront) {
	  var er = chunkInvalid(state, chunk);
	  if (er) {
	    stream.emit('error', er);
	  } else if (chunk === null) {
	    state.reading = false;
	    onEofChunk(stream, state);
	  } else if (state.objectMode || chunk && chunk.length > 0) {
	    if (state.ended && !addToFront) {
	      var e = new Error('stream.push() after EOF');
	      stream.emit('error', e);
	    } else if (state.endEmitted && addToFront) {
	      var _e = new Error('stream.unshift() after end event');
	      stream.emit('error', _e);
	    } else {
	      var skipAdd;
	      if (state.decoder && !addToFront && !encoding) {
	        chunk = state.decoder.write(chunk);
	        skipAdd = !state.objectMode && chunk.length === 0;
	      }
	
	      if (!addToFront) state.reading = false;
	
	      // Don't add to the buffer if we've decoded to an empty string chunk and
	      // we're not in object mode
	      if (!skipAdd) {
	        // if we want the data now, just emit it.
	        if (state.flowing && state.length === 0 && !state.sync) {
	          stream.emit('data', chunk);
	          stream.read(0);
	        } else {
	          // update the buffer info.
	          state.length += state.objectMode ? 1 : chunk.length;
	          if (addToFront) state.buffer.unshift(chunk);else state.buffer.push(chunk);
	
	          if (state.needReadable) emitReadable(stream);
	        }
	      }
	
	      maybeReadMore(stream, state);
	    }
	  } else if (!addToFront) {
	    state.reading = false;
	  }
	
	  return needMoreData(state);
	}
	
	// if it's past the high water mark, we can push in some more.
	// Also, if we have no data yet, we can stand some
	// more bytes.  This is to work around cases where hwm=0,
	// such as the repl.  Also, if the push() triggered a
	// readable event, and the user called read(largeNumber) such that
	// needReadable was set, then we ought to push more, so that another
	// 'readable' event will be triggered.
	function needMoreData(state) {
	  return !state.ended && (state.needReadable || state.length < state.highWaterMark || state.length === 0);
	}
	
	// backwards compatibility.
	Readable.prototype.setEncoding = function (enc) {
	  if (!StringDecoder) StringDecoder = __webpack_require__(615).StringDecoder;
	  this._readableState.decoder = new StringDecoder(enc);
	  this._readableState.encoding = enc;
	  return this;
	};
	
	// Don't raise the hwm > 8MB
	var MAX_HWM = 0x800000;
	function computeNewHighWaterMark(n) {
	  if (n >= MAX_HWM) {
	    n = MAX_HWM;
	  } else {
	    // Get the next highest power of 2 to prevent increasing hwm excessively in
	    // tiny amounts
	    n--;
	    n |= n >>> 1;
	    n |= n >>> 2;
	    n |= n >>> 4;
	    n |= n >>> 8;
	    n |= n >>> 16;
	    n++;
	  }
	  return n;
	}
	
	// This function is designed to be inlinable, so please take care when making
	// changes to the function body.
	function howMuchToRead(n, state) {
	  if (n <= 0 || state.length === 0 && state.ended) return 0;
	  if (state.objectMode) return 1;
	  if (n !== n) {
	    // Only flow one buffer at a time
	    if (state.flowing && state.length) return state.buffer.head.data.length;else return state.length;
	  }
	  // If we're asking for more than the current hwm, then raise the hwm.
	  if (n > state.highWaterMark) state.highWaterMark = computeNewHighWaterMark(n);
	  if (n <= state.length) return n;
	  // Don't have enough
	  if (!state.ended) {
	    state.needReadable = true;
	    return 0;
	  }
	  return state.length;
	}
	
	// you can override either this method, or the async _read(n) below.
	Readable.prototype.read = function (n) {
	  debug('read', n);
	  n = parseInt(n, 10);
	  var state = this._readableState;
	  var nOrig = n;
	
	  if (n !== 0) state.emittedReadable = false;
	
	  // if we're doing read(0) to trigger a readable event, but we
	  // already have a bunch of data in the buffer, then just trigger
	  // the 'readable' event and move on.
	  if (n === 0 && state.needReadable && (state.length >= state.highWaterMark || state.ended)) {
	    debug('read: emitReadable', state.length, state.ended);
	    if (state.length === 0 && state.ended) endReadable(this);else emitReadable(this);
	    return null;
	  }
	
	  n = howMuchToRead(n, state);
	
	  // if we've ended, and we're now clear, then finish it up.
	  if (n === 0 && state.ended) {
	    if (state.length === 0) endReadable(this);
	    return null;
	  }
	
	  // All the actual chunk generation logic needs to be
	  // *below* the call to _read.  The reason is that in certain
	  // synthetic stream cases, such as passthrough streams, _read
	  // may be a completely synchronous operation which may change
	  // the state of the read buffer, providing enough data when
	  // before there was *not* enough.
	  //
	  // So, the steps are:
	  // 1. Figure out what the state of things will be after we do
	  // a read from the buffer.
	  //
	  // 2. If that resulting state will trigger a _read, then call _read.
	  // Note that this may be asynchronous, or synchronous.  Yes, it is
	  // deeply ugly to write APIs this way, but that still doesn't mean
	  // that the Readable class should behave improperly, as streams are
	  // designed to be sync/async agnostic.
	  // Take note if the _read call is sync or async (ie, if the read call
	  // has returned yet), so that we know whether or not it's safe to emit
	  // 'readable' etc.
	  //
	  // 3. Actually pull the requested chunks out of the buffer and return.
	
	  // if we need a readable event, then we need to do some reading.
	  var doRead = state.needReadable;
	  debug('need readable', doRead);
	
	  // if we currently have less than the highWaterMark, then also read some
	  if (state.length === 0 || state.length - n < state.highWaterMark) {
	    doRead = true;
	    debug('length less than watermark', doRead);
	  }
	
	  // however, if we've ended, then there's no point, and if we're already
	  // reading, then it's unnecessary.
	  if (state.ended || state.reading) {
	    doRead = false;
	    debug('reading or ended', doRead);
	  } else if (doRead) {
	    debug('do read');
	    state.reading = true;
	    state.sync = true;
	    // if the length is currently zero, then we *need* a readable event.
	    if (state.length === 0) state.needReadable = true;
	    // call internal read method
	    this._read(state.highWaterMark);
	    state.sync = false;
	    // If _read pushed data synchronously, then `reading` will be false,
	    // and we need to re-evaluate how much data we can return to the user.
	    if (!state.reading) n = howMuchToRead(nOrig, state);
	  }
	
	  var ret;
	  if (n > 0) ret = fromList(n, state);else ret = null;
	
	  if (ret === null) {
	    state.needReadable = true;
	    n = 0;
	  } else {
	    state.length -= n;
	  }
	
	  if (state.length === 0) {
	    // If we have nothing in the buffer, then we want to know
	    // as soon as we *do* get something into the buffer.
	    if (!state.ended) state.needReadable = true;
	
	    // If we tried to read() past the EOF, then emit end on the next tick.
	    if (nOrig !== n && state.ended) endReadable(this);
	  }
	
	  if (ret !== null) this.emit('data', ret);
	
	  return ret;
	};
	
	function chunkInvalid(state, chunk) {
	  var er = null;
	  if (!Buffer.isBuffer(chunk) && typeof chunk !== 'string' && chunk !== null && chunk !== undefined && !state.objectMode) {
	    er = new TypeError('Invalid non-string/buffer chunk');
	  }
	  return er;
	}
	
	function onEofChunk(stream, state) {
	  if (state.ended) return;
	  if (state.decoder) {
	    var chunk = state.decoder.end();
	    if (chunk && chunk.length) {
	      state.buffer.push(chunk);
	      state.length += state.objectMode ? 1 : chunk.length;
	    }
	  }
	  state.ended = true;
	
	  // emit 'readable' now to make sure it gets picked up.
	  emitReadable(stream);
	}
	
	// Don't emit readable right away in sync mode, because this can trigger
	// another read() call => stack overflow.  This way, it might trigger
	// a nextTick recursion warning, but that's not so bad.
	function emitReadable(stream) {
	  var state = stream._readableState;
	  state.needReadable = false;
	  if (!state.emittedReadable) {
	    debug('emitReadable', state.flowing);
	    state.emittedReadable = true;
	    if (state.sync) processNextTick(emitReadable_, stream);else emitReadable_(stream);
	  }
	}
	
	function emitReadable_(stream) {
	  debug('emit readable');
	  stream.emit('readable');
	  flow(stream);
	}
	
	// at this point, the user has presumably seen the 'readable' event,
	// and called read() to consume some data.  that may have triggered
	// in turn another _read(n) call, in which case reading = true if
	// it's in progress.
	// However, if we're not ended, or reading, and the length < hwm,
	// then go ahead and try to read some more preemptively.
	function maybeReadMore(stream, state) {
	  if (!state.readingMore) {
	    state.readingMore = true;
	    processNextTick(maybeReadMore_, stream, state);
	  }
	}
	
	function maybeReadMore_(stream, state) {
	  var len = state.length;
	  while (!state.reading && !state.flowing && !state.ended && state.length < state.highWaterMark) {
	    debug('maybeReadMore read 0');
	    stream.read(0);
	    if (len === state.length)
	      // didn't get any data, stop spinning.
	      break;else len = state.length;
	  }
	  state.readingMore = false;
	}
	
	// abstract method.  to be overridden in specific implementation classes.
	// call cb(er, data) where data is <= n in length.
	// for virtual (non-string, non-buffer) streams, "length" is somewhat
	// arbitrary, and perhaps not very meaningful.
	Readable.prototype._read = function (n) {
	  this.emit('error', new Error('not implemented'));
	};
	
	Readable.prototype.pipe = function (dest, pipeOpts) {
	  var src = this;
	  var state = this._readableState;
	
	  switch (state.pipesCount) {
	    case 0:
	      state.pipes = dest;
	      break;
	    case 1:
	      state.pipes = [state.pipes, dest];
	      break;
	    default:
	      state.pipes.push(dest);
	      break;
	  }
	  state.pipesCount += 1;
	  debug('pipe count=%d opts=%j', state.pipesCount, pipeOpts);
	
	  var doEnd = (!pipeOpts || pipeOpts.end !== false) && dest !== process.stdout && dest !== process.stderr;
	
	  var endFn = doEnd ? onend : cleanup;
	  if (state.endEmitted) processNextTick(endFn);else src.once('end', endFn);
	
	  dest.on('unpipe', onunpipe);
	  function onunpipe(readable) {
	    debug('onunpipe');
	    if (readable === src) {
	      cleanup();
	    }
	  }
	
	  function onend() {
	    debug('onend');
	    dest.end();
	  }
	
	  // when the dest drains, it reduces the awaitDrain counter
	  // on the source.  This would be more elegant with a .once()
	  // handler in flow(), but adding and removing repeatedly is
	  // too slow.
	  var ondrain = pipeOnDrain(src);
	  dest.on('drain', ondrain);
	
	  var cleanedUp = false;
	  function cleanup() {
	    debug('cleanup');
	    // cleanup event handlers once the pipe is broken
	    dest.removeListener('close', onclose);
	    dest.removeListener('finish', onfinish);
	    dest.removeListener('drain', ondrain);
	    dest.removeListener('error', onerror);
	    dest.removeListener('unpipe', onunpipe);
	    src.removeListener('end', onend);
	    src.removeListener('end', cleanup);
	    src.removeListener('data', ondata);
	
	    cleanedUp = true;
	
	    // if the reader is waiting for a drain event from this
	    // specific writer, then it would cause it to never start
	    // flowing again.
	    // So, if this is awaiting a drain, then we just call it now.
	    // If we don't know, then assume that we are waiting for one.
	    if (state.awaitDrain && (!dest._writableState || dest._writableState.needDrain)) ondrain();
	  }
	
	  // If the user pushes more data while we're writing to dest then we'll end up
	  // in ondata again. However, we only want to increase awaitDrain once because
	  // dest will only emit one 'drain' event for the multiple writes.
	  // => Introduce a guard on increasing awaitDrain.
	  var increasedAwaitDrain = false;
	  src.on('data', ondata);
	  function ondata(chunk) {
	    debug('ondata');
	    increasedAwaitDrain = false;
	    var ret = dest.write(chunk);
	    if (false === ret && !increasedAwaitDrain) {
	      // If the user unpiped during `dest.write()`, it is possible
	      // to get stuck in a permanently paused state if that write
	      // also returned false.
	      // => Check whether `dest` is still a piping destination.
	      if ((state.pipesCount === 1 && state.pipes === dest || state.pipesCount > 1 && indexOf(state.pipes, dest) !== -1) && !cleanedUp) {
	        debug('false write response, pause', src._readableState.awaitDrain);
	        src._readableState.awaitDrain++;
	        increasedAwaitDrain = true;
	      }
	      src.pause();
	    }
	  }
	
	  // if the dest has an error, then stop piping into it.
	  // however, don't suppress the throwing behavior for this.
	  function onerror(er) {
	    debug('onerror', er);
	    unpipe();
	    dest.removeListener('error', onerror);
	    if (EElistenerCount(dest, 'error') === 0) dest.emit('error', er);
	  }
	
	  // Make sure our error handler is attached before userland ones.
	  prependListener(dest, 'error', onerror);
	
	  // Both close and finish should trigger unpipe, but only once.
	  function onclose() {
	    dest.removeListener('finish', onfinish);
	    unpipe();
	  }
	  dest.once('close', onclose);
	  function onfinish() {
	    debug('onfinish');
	    dest.removeListener('close', onclose);
	    unpipe();
	  }
	  dest.once('finish', onfinish);
	
	  function unpipe() {
	    debug('unpipe');
	    src.unpipe(dest);
	  }
	
	  // tell the dest that it's being piped to
	  dest.emit('pipe', src);
	
	  // start the flow if it hasn't been started already.
	  if (!state.flowing) {
	    debug('pipe resume');
	    src.resume();
	  }
	
	  return dest;
	};
	
	function pipeOnDrain(src) {
	  return function () {
	    var state = src._readableState;
	    debug('pipeOnDrain', state.awaitDrain);
	    if (state.awaitDrain) state.awaitDrain--;
	    if (state.awaitDrain === 0 && EElistenerCount(src, 'data')) {
	      state.flowing = true;
	      flow(src);
	    }
	  };
	}
	
	Readable.prototype.unpipe = function (dest) {
	  var state = this._readableState;
	
	  // if we're not piping anywhere, then do nothing.
	  if (state.pipesCount === 0) return this;
	
	  // just one destination.  most common case.
	  if (state.pipesCount === 1) {
	    // passed in one, but it's not the right one.
	    if (dest && dest !== state.pipes) return this;
	
	    if (!dest) dest = state.pipes;
	
	    // got a match.
	    state.pipes = null;
	    state.pipesCount = 0;
	    state.flowing = false;
	    if (dest) dest.emit('unpipe', this);
	    return this;
	  }
	
	  // slow case. multiple pipe destinations.
	
	  if (!dest) {
	    // remove all.
	    var dests = state.pipes;
	    var len = state.pipesCount;
	    state.pipes = null;
	    state.pipesCount = 0;
	    state.flowing = false;
	
	    for (var _i = 0; _i < len; _i++) {
	      dests[_i].emit('unpipe', this);
	    }return this;
	  }
	
	  // try to find the right one.
	  var i = indexOf(state.pipes, dest);
	  if (i === -1) return this;
	
	  state.pipes.splice(i, 1);
	  state.pipesCount -= 1;
	  if (state.pipesCount === 1) state.pipes = state.pipes[0];
	
	  dest.emit('unpipe', this);
	
	  return this;
	};
	
	// set up data events if they are asked for
	// Ensure readable listeners eventually get something
	Readable.prototype.on = function (ev, fn) {
	  var res = Stream.prototype.on.call(this, ev, fn);
	
	  if (ev === 'data') {
	    // Start flowing on next tick if stream isn't explicitly paused
	    if (this._readableState.flowing !== false) this.resume();
	  } else if (ev === 'readable') {
	    var state = this._readableState;
	    if (!state.endEmitted && !state.readableListening) {
	      state.readableListening = state.needReadable = true;
	      state.emittedReadable = false;
	      if (!state.reading) {
	        processNextTick(nReadingNextTick, this);
	      } else if (state.length) {
	        emitReadable(this, state);
	      }
	    }
	  }
	
	  return res;
	};
	Readable.prototype.addListener = Readable.prototype.on;
	
	function nReadingNextTick(self) {
	  debug('readable nexttick read 0');
	  self.read(0);
	}
	
	// pause() and resume() are remnants of the legacy readable stream API
	// If the user uses them, then switch into old mode.
	Readable.prototype.resume = function () {
	  var state = this._readableState;
	  if (!state.flowing) {
	    debug('resume');
	    state.flowing = true;
	    resume(this, state);
	  }
	  return this;
	};
	
	function resume(stream, state) {
	  if (!state.resumeScheduled) {
	    state.resumeScheduled = true;
	    processNextTick(resume_, stream, state);
	  }
	}
	
	function resume_(stream, state) {
	  if (!state.reading) {
	    debug('resume read 0');
	    stream.read(0);
	  }
	
	  state.resumeScheduled = false;
	  state.awaitDrain = 0;
	  stream.emit('resume');
	  flow(stream);
	  if (state.flowing && !state.reading) stream.read(0);
	}
	
	Readable.prototype.pause = function () {
	  debug('call pause flowing=%j', this._readableState.flowing);
	  if (false !== this._readableState.flowing) {
	    debug('pause');
	    this._readableState.flowing = false;
	    this.emit('pause');
	  }
	  return this;
	};
	
	function flow(stream) {
	  var state = stream._readableState;
	  debug('flow', state.flowing);
	  while (state.flowing && stream.read() !== null) {}
	}
	
	// wrap an old-style stream as the async data source.
	// This is *not* part of the readable stream interface.
	// It is an ugly unfortunate mess of history.
	Readable.prototype.wrap = function (stream) {
	  var state = this._readableState;
	  var paused = false;
	
	  var self = this;
	  stream.on('end', function () {
	    debug('wrapped end');
	    if (state.decoder && !state.ended) {
	      var chunk = state.decoder.end();
	      if (chunk && chunk.length) self.push(chunk);
	    }
	
	    self.push(null);
	  });
	
	  stream.on('data', function (chunk) {
	    debug('wrapped data');
	    if (state.decoder) chunk = state.decoder.write(chunk);
	
	    // don't skip over falsy values in objectMode
	    if (state.objectMode && (chunk === null || chunk === undefined)) return;else if (!state.objectMode && (!chunk || !chunk.length)) return;
	
	    var ret = self.push(chunk);
	    if (!ret) {
	      paused = true;
	      stream.pause();
	    }
	  });
	
	  // proxy all the other methods.
	  // important when wrapping filters and duplexes.
	  for (var i in stream) {
	    if (this[i] === undefined && typeof stream[i] === 'function') {
	      this[i] = function (method) {
	        return function () {
	          return stream[method].apply(stream, arguments);
	        };
	      }(i);
	    }
	  }
	
	  // proxy certain important events.
	  var events = ['error', 'close', 'destroy', 'pause', 'resume'];
	  forEach(events, function (ev) {
	    stream.on(ev, self.emit.bind(self, ev));
	  });
	
	  // when we try to consume some more bytes, simply unpause the
	  // underlying stream.
	  self._read = function (n) {
	    debug('wrapped _read', n);
	    if (paused) {
	      paused = false;
	      stream.resume();
	    }
	  };
	
	  return self;
	};
	
	// exposed for testing purposes only.
	Readable._fromList = fromList;
	
	// Pluck off n bytes from an array of buffers.
	// Length is the combined lengths of all the buffers in the list.
	// This function is designed to be inlinable, so please take care when making
	// changes to the function body.
	function fromList(n, state) {
	  // nothing buffered
	  if (state.length === 0) return null;
	
	  var ret;
	  if (state.objectMode) ret = state.buffer.shift();else if (!n || n >= state.length) {
	    // read it all, truncate the list
	    if (state.decoder) ret = state.buffer.join('');else if (state.buffer.length === 1) ret = state.buffer.head.data;else ret = state.buffer.concat(state.length);
	    state.buffer.clear();
	  } else {
	    // read part of list
	    ret = fromListPartial(n, state.buffer, state.decoder);
	  }
	
	  return ret;
	}
	
	// Extracts only enough buffered data to satisfy the amount requested.
	// This function is designed to be inlinable, so please take care when making
	// changes to the function body.
	function fromListPartial(n, list, hasStrings) {
	  var ret;
	  if (n < list.head.data.length) {
	    // slice is the same for buffers and strings
	    ret = list.head.data.slice(0, n);
	    list.head.data = list.head.data.slice(n);
	  } else if (n === list.head.data.length) {
	    // first chunk is a perfect match
	    ret = list.shift();
	  } else {
	    // result spans more than one buffer
	    ret = hasStrings ? copyFromBufferString(n, list) : copyFromBuffer(n, list);
	  }
	  return ret;
	}
	
	// Copies a specified amount of characters from the list of buffered data
	// chunks.
	// This function is designed to be inlinable, so please take care when making
	// changes to the function body.
	function copyFromBufferString(n, list) {
	  var p = list.head;
	  var c = 1;
	  var ret = p.data;
	  n -= ret.length;
	  while (p = p.next) {
	    var str = p.data;
	    var nb = n > str.length ? str.length : n;
	    if (nb === str.length) ret += str;else ret += str.slice(0, n);
	    n -= nb;
	    if (n === 0) {
	      if (nb === str.length) {
	        ++c;
	        if (p.next) list.head = p.next;else list.head = list.tail = null;
	      } else {
	        list.head = p;
	        p.data = str.slice(nb);
	      }
	      break;
	    }
	    ++c;
	  }
	  list.length -= c;
	  return ret;
	}
	
	// Copies a specified amount of bytes from the list of buffered data chunks.
	// This function is designed to be inlinable, so please take care when making
	// changes to the function body.
	function copyFromBuffer(n, list) {
	  var ret = bufferShim.allocUnsafe(n);
	  var p = list.head;
	  var c = 1;
	  p.data.copy(ret);
	  n -= p.data.length;
	  while (p = p.next) {
	    var buf = p.data;
	    var nb = n > buf.length ? buf.length : n;
	    buf.copy(ret, ret.length - n, 0, nb);
	    n -= nb;
	    if (n === 0) {
	      if (nb === buf.length) {
	        ++c;
	        if (p.next) list.head = p.next;else list.head = list.tail = null;
	      } else {
	        list.head = p;
	        p.data = buf.slice(nb);
	      }
	      break;
	    }
	    ++c;
	  }
	  list.length -= c;
	  return ret;
	}
	
	function endReadable(stream) {
	  var state = stream._readableState;
	
	  // If we get here before consuming all the bytes, then that is a
	  // bug in node.  Should never happen.
	  if (state.length > 0) throw new Error('"endReadable()" called on non-empty stream');
	
	  if (!state.endEmitted) {
	    state.ended = true;
	    processNextTick(endReadableNT, state, stream);
	  }
	}
	
	function endReadableNT(state, stream) {
	  // Check that we didn't get one last unshift.
	  if (!state.endEmitted && state.length === 0) {
	    state.endEmitted = true;
	    stream.readable = false;
	    stream.emit('end');
	  }
	}
	
	function forEach(xs, f) {
	  for (var i = 0, l = xs.length; i < l; i++) {
	    f(xs[i], i);
	  }
	}
	
	function indexOf(xs, x) {
	  for (var i = 0, l = xs.length; i < l; i++) {
	    if (xs[i] === x) return i;
	  }
	  return -1;
	}
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ }),
/* 611 */
/***/ (function(module, exports) {

	/* (ignored) */

/***/ }),
/* 612 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var Buffer = __webpack_require__(290).Buffer;
	/*<replacement>*/
	var bufferShim = __webpack_require__(293);
	/*</replacement>*/
	
	module.exports = BufferList;
	
	function BufferList() {
	  this.head = null;
	  this.tail = null;
	  this.length = 0;
	}
	
	BufferList.prototype.push = function (v) {
	  var entry = { data: v, next: null };
	  if (this.length > 0) this.tail.next = entry;else this.head = entry;
	  this.tail = entry;
	  ++this.length;
	};
	
	BufferList.prototype.unshift = function (v) {
	  var entry = { data: v, next: this.head };
	  if (this.length === 0) this.tail = entry;
	  this.head = entry;
	  ++this.length;
	};
	
	BufferList.prototype.shift = function () {
	  if (this.length === 0) return;
	  var ret = this.head.data;
	  if (this.length === 1) this.head = this.tail = null;else this.head = this.head.next;
	  --this.length;
	  return ret;
	};
	
	BufferList.prototype.clear = function () {
	  this.head = this.tail = null;
	  this.length = 0;
	};
	
	BufferList.prototype.join = function (s) {
	  if (this.length === 0) return '';
	  var p = this.head;
	  var ret = '' + p.data;
	  while (p = p.next) {
	    ret += s + p.data;
	  }return ret;
	};
	
	BufferList.prototype.concat = function (n) {
	  if (this.length === 0) return bufferShim.alloc(0);
	  if (this.length === 1) return this.head.data;
	  var ret = bufferShim.allocUnsafe(n >>> 0);
	  var p = this.head;
	  var i = 0;
	  while (p) {
	    p.data.copy(ret, i);
	    i += p.data.length;
	    p = p.next;
	  }
	  return ret;
	};

/***/ }),
/* 613 */
/***/ (function(module, exports, __webpack_require__) {

	// a duplex stream is just a stream that is both readable and writable.
	// Since JS doesn't have multiple prototypal inheritance, this class
	// prototypally inherits from Readable, and then parasitically from
	// Writable.
	
	'use strict';
	
	/*<replacement>*/
	
	var objectKeys = Object.keys || function (obj) {
	  var keys = [];
	  for (var key in obj) {
	    keys.push(key);
	  }return keys;
	};
	/*</replacement>*/
	
	module.exports = Duplex;
	
	/*<replacement>*/
	var processNextTick = __webpack_require__(287);
	/*</replacement>*/
	
	/*<replacement>*/
	var util = __webpack_require__(294);
	util.inherits = __webpack_require__(284);
	/*</replacement>*/
	
	var Readable = __webpack_require__(610);
	var Writable = __webpack_require__(614);
	
	util.inherits(Duplex, Readable);
	
	var keys = objectKeys(Writable.prototype);
	for (var v = 0; v < keys.length; v++) {
	  var method = keys[v];
	  if (!Duplex.prototype[method]) Duplex.prototype[method] = Writable.prototype[method];
	}
	
	function Duplex(options) {
	  if (!(this instanceof Duplex)) return new Duplex(options);
	
	  Readable.call(this, options);
	  Writable.call(this, options);
	
	  if (options && options.readable === false) this.readable = false;
	
	  if (options && options.writable === false) this.writable = false;
	
	  this.allowHalfOpen = true;
	  if (options && options.allowHalfOpen === false) this.allowHalfOpen = false;
	
	  this.once('end', onend);
	}
	
	// the no-half-open enforcer
	function onend() {
	  // if we allow half-open state, or if the writable side ended,
	  // then we're ok.
	  if (this.allowHalfOpen || this._writableState.ended) return;
	
	  // no more data can be written.
	  // But allow more writes to happen in this tick.
	  processNextTick(onEndNT, this);
	}
	
	function onEndNT(self) {
	  self.end();
	}
	
	function forEach(xs, f) {
	  for (var i = 0, l = xs.length; i < l; i++) {
	    f(xs[i], i);
	  }
	}

/***/ }),
/* 614 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process, setImmediate) {// A bit simpler than readable streams.
	// Implement an async ._write(chunk, encoding, cb), and it'll handle all
	// the drain event emission and buffering.
	
	'use strict';
	
	module.exports = Writable;
	
	/*<replacement>*/
	var processNextTick = __webpack_require__(287);
	/*</replacement>*/
	
	/*<replacement>*/
	var asyncWrite = !process.browser && ['v0.10', 'v0.9.'].indexOf(process.version.slice(0, 5)) > -1 ? setImmediate : processNextTick;
	/*</replacement>*/
	
	Writable.WritableState = WritableState;
	
	/*<replacement>*/
	var util = __webpack_require__(294);
	util.inherits = __webpack_require__(284);
	/*</replacement>*/
	
	/*<replacement>*/
	var internalUtil = {
	  deprecate: __webpack_require__(301)
	};
	/*</replacement>*/
	
	/*<replacement>*/
	var Stream;
	(function () {
	  try {
	    Stream = __webpack_require__(282);
	  } catch (_) {} finally {
	    if (!Stream) Stream = __webpack_require__(283).EventEmitter;
	  }
	})();
	/*</replacement>*/
	
	var Buffer = __webpack_require__(290).Buffer;
	/*<replacement>*/
	var bufferShim = __webpack_require__(293);
	/*</replacement>*/
	
	util.inherits(Writable, Stream);
	
	function nop() {}
	
	function WriteReq(chunk, encoding, cb) {
	  this.chunk = chunk;
	  this.encoding = encoding;
	  this.callback = cb;
	  this.next = null;
	}
	
	var Duplex;
	function WritableState(options, stream) {
	  Duplex = Duplex || __webpack_require__(613);
	
	  options = options || {};
	
	  // object stream flag to indicate whether or not this stream
	  // contains buffers or objects.
	  this.objectMode = !!options.objectMode;
	
	  if (stream instanceof Duplex) this.objectMode = this.objectMode || !!options.writableObjectMode;
	
	  // the point at which write() starts returning false
	  // Note: 0 is a valid value, means that we always return false if
	  // the entire buffer is not flushed immediately on write()
	  var hwm = options.highWaterMark;
	  var defaultHwm = this.objectMode ? 16 : 16 * 1024;
	  this.highWaterMark = hwm || hwm === 0 ? hwm : defaultHwm;
	
	  // cast to ints.
	  this.highWaterMark = ~~this.highWaterMark;
	
	  this.needDrain = false;
	  // at the start of calling end()
	  this.ending = false;
	  // when end() has been called, and returned
	  this.ended = false;
	  // when 'finish' is emitted
	  this.finished = false;
	
	  // should we decode strings into buffers before passing to _write?
	  // this is here so that some node-core streams can optimize string
	  // handling at a lower level.
	  var noDecode = options.decodeStrings === false;
	  this.decodeStrings = !noDecode;
	
	  // Crypto is kind of old and crusty.  Historically, its default string
	  // encoding is 'binary' so we have to make this configurable.
	  // Everything else in the universe uses 'utf8', though.
	  this.defaultEncoding = options.defaultEncoding || 'utf8';
	
	  // not an actual buffer we keep track of, but a measurement
	  // of how much we're waiting to get pushed to some underlying
	  // socket or file.
	  this.length = 0;
	
	  // a flag to see when we're in the middle of a write.
	  this.writing = false;
	
	  // when true all writes will be buffered until .uncork() call
	  this.corked = 0;
	
	  // a flag to be able to tell if the onwrite cb is called immediately,
	  // or on a later tick.  We set this to true at first, because any
	  // actions that shouldn't happen until "later" should generally also
	  // not happen before the first write call.
	  this.sync = true;
	
	  // a flag to know if we're processing previously buffered items, which
	  // may call the _write() callback in the same tick, so that we don't
	  // end up in an overlapped onwrite situation.
	  this.bufferProcessing = false;
	
	  // the callback that's passed to _write(chunk,cb)
	  this.onwrite = function (er) {
	    onwrite(stream, er);
	  };
	
	  // the callback that the user supplies to write(chunk,encoding,cb)
	  this.writecb = null;
	
	  // the amount that is being written when _write is called.
	  this.writelen = 0;
	
	  this.bufferedRequest = null;
	  this.lastBufferedRequest = null;
	
	  // number of pending user-supplied write callbacks
	  // this must be 0 before 'finish' can be emitted
	  this.pendingcb = 0;
	
	  // emit prefinish if the only thing we're waiting for is _write cbs
	  // This is relevant for synchronous Transform streams
	  this.prefinished = false;
	
	  // True if the error was already emitted and should not be thrown again
	  this.errorEmitted = false;
	
	  // count buffered requests
	  this.bufferedRequestCount = 0;
	
	  // allocate the first CorkedRequest, there is always
	  // one allocated and free to use, and we maintain at most two
	  this.corkedRequestsFree = new CorkedRequest(this);
	}
	
	WritableState.prototype.getBuffer = function writableStateGetBuffer() {
	  var current = this.bufferedRequest;
	  var out = [];
	  while (current) {
	    out.push(current);
	    current = current.next;
	  }
	  return out;
	};
	
	(function () {
	  try {
	    Object.defineProperty(WritableState.prototype, 'buffer', {
	      get: internalUtil.deprecate(function () {
	        return this.getBuffer();
	      }, '_writableState.buffer is deprecated. Use _writableState.getBuffer ' + 'instead.')
	    });
	  } catch (_) {}
	})();
	
	var Duplex;
	function Writable(options) {
	  Duplex = Duplex || __webpack_require__(613);
	
	  // Writable ctor is applied to Duplexes, though they're not
	  // instanceof Writable, they're instanceof Readable.
	  if (!(this instanceof Writable) && !(this instanceof Duplex)) return new Writable(options);
	
	  this._writableState = new WritableState(options, this);
	
	  // legacy.
	  this.writable = true;
	
	  if (options) {
	    if (typeof options.write === 'function') this._write = options.write;
	
	    if (typeof options.writev === 'function') this._writev = options.writev;
	  }
	
	  Stream.call(this);
	}
	
	// Otherwise people can pipe Writable streams, which is just wrong.
	Writable.prototype.pipe = function () {
	  this.emit('error', new Error('Cannot pipe, not readable'));
	};
	
	function writeAfterEnd(stream, cb) {
	  var er = new Error('write after end');
	  // TODO: defer error events consistently everywhere, not just the cb
	  stream.emit('error', er);
	  processNextTick(cb, er);
	}
	
	// If we get something that is not a buffer, string, null, or undefined,
	// and we're not in objectMode, then that's an error.
	// Otherwise stream chunks are all considered to be of length=1, and the
	// watermarks determine how many objects to keep in the buffer, rather than
	// how many bytes or characters.
	function validChunk(stream, state, chunk, cb) {
	  var valid = true;
	  var er = false;
	  // Always throw error if a null is written
	  // if we are not in object mode then throw
	  // if it is not a buffer, string, or undefined.
	  if (chunk === null) {
	    er = new TypeError('May not write null values to stream');
	  } else if (!Buffer.isBuffer(chunk) && typeof chunk !== 'string' && chunk !== undefined && !state.objectMode) {
	    er = new TypeError('Invalid non-string/buffer chunk');
	  }
	  if (er) {
	    stream.emit('error', er);
	    processNextTick(cb, er);
	    valid = false;
	  }
	  return valid;
	}
	
	Writable.prototype.write = function (chunk, encoding, cb) {
	  var state = this._writableState;
	  var ret = false;
	
	  if (typeof encoding === 'function') {
	    cb = encoding;
	    encoding = null;
	  }
	
	  if (Buffer.isBuffer(chunk)) encoding = 'buffer';else if (!encoding) encoding = state.defaultEncoding;
	
	  if (typeof cb !== 'function') cb = nop;
	
	  if (state.ended) writeAfterEnd(this, cb);else if (validChunk(this, state, chunk, cb)) {
	    state.pendingcb++;
	    ret = writeOrBuffer(this, state, chunk, encoding, cb);
	  }
	
	  return ret;
	};
	
	Writable.prototype.cork = function () {
	  var state = this._writableState;
	
	  state.corked++;
	};
	
	Writable.prototype.uncork = function () {
	  var state = this._writableState;
	
	  if (state.corked) {
	    state.corked--;
	
	    if (!state.writing && !state.corked && !state.finished && !state.bufferProcessing && state.bufferedRequest) clearBuffer(this, state);
	  }
	};
	
	Writable.prototype.setDefaultEncoding = function setDefaultEncoding(encoding) {
	  // node::ParseEncoding() requires lower case.
	  if (typeof encoding === 'string') encoding = encoding.toLowerCase();
	  if (!(['hex', 'utf8', 'utf-8', 'ascii', 'binary', 'base64', 'ucs2', 'ucs-2', 'utf16le', 'utf-16le', 'raw'].indexOf((encoding + '').toLowerCase()) > -1)) throw new TypeError('Unknown encoding: ' + encoding);
	  this._writableState.defaultEncoding = encoding;
	  return this;
	};
	
	function decodeChunk(state, chunk, encoding) {
	  if (!state.objectMode && state.decodeStrings !== false && typeof chunk === 'string') {
	    chunk = bufferShim.from(chunk, encoding);
	  }
	  return chunk;
	}
	
	// if we're already writing something, then just put this
	// in the queue, and wait our turn.  Otherwise, call _write
	// If we return false, then we need a drain event, so set that flag.
	function writeOrBuffer(stream, state, chunk, encoding, cb) {
	  chunk = decodeChunk(state, chunk, encoding);
	
	  if (Buffer.isBuffer(chunk)) encoding = 'buffer';
	  var len = state.objectMode ? 1 : chunk.length;
	
	  state.length += len;
	
	  var ret = state.length < state.highWaterMark;
	  // we must ensure that previous needDrain will not be reset to false.
	  if (!ret) state.needDrain = true;
	
	  if (state.writing || state.corked) {
	    var last = state.lastBufferedRequest;
	    state.lastBufferedRequest = new WriteReq(chunk, encoding, cb);
	    if (last) {
	      last.next = state.lastBufferedRequest;
	    } else {
	      state.bufferedRequest = state.lastBufferedRequest;
	    }
	    state.bufferedRequestCount += 1;
	  } else {
	    doWrite(stream, state, false, len, chunk, encoding, cb);
	  }
	
	  return ret;
	}
	
	function doWrite(stream, state, writev, len, chunk, encoding, cb) {
	  state.writelen = len;
	  state.writecb = cb;
	  state.writing = true;
	  state.sync = true;
	  if (writev) stream._writev(chunk, state.onwrite);else stream._write(chunk, encoding, state.onwrite);
	  state.sync = false;
	}
	
	function onwriteError(stream, state, sync, er, cb) {
	  --state.pendingcb;
	  if (sync) processNextTick(cb, er);else cb(er);
	
	  stream._writableState.errorEmitted = true;
	  stream.emit('error', er);
	}
	
	function onwriteStateUpdate(state) {
	  state.writing = false;
	  state.writecb = null;
	  state.length -= state.writelen;
	  state.writelen = 0;
	}
	
	function onwrite(stream, er) {
	  var state = stream._writableState;
	  var sync = state.sync;
	  var cb = state.writecb;
	
	  onwriteStateUpdate(state);
	
	  if (er) onwriteError(stream, state, sync, er, cb);else {
	    // Check if we're actually ready to finish, but don't emit yet
	    var finished = needFinish(state);
	
	    if (!finished && !state.corked && !state.bufferProcessing && state.bufferedRequest) {
	      clearBuffer(stream, state);
	    }
	
	    if (sync) {
	      /*<replacement>*/
	      asyncWrite(afterWrite, stream, state, finished, cb);
	      /*</replacement>*/
	    } else {
	      afterWrite(stream, state, finished, cb);
	    }
	  }
	}
	
	function afterWrite(stream, state, finished, cb) {
	  if (!finished) onwriteDrain(stream, state);
	  state.pendingcb--;
	  cb();
	  finishMaybe(stream, state);
	}
	
	// Must force callback to be called on nextTick, so that we don't
	// emit 'drain' before the write() consumer gets the 'false' return
	// value, and has a chance to attach a 'drain' listener.
	function onwriteDrain(stream, state) {
	  if (state.length === 0 && state.needDrain) {
	    state.needDrain = false;
	    stream.emit('drain');
	  }
	}
	
	// if there's something in the buffer waiting, then process it
	function clearBuffer(stream, state) {
	  state.bufferProcessing = true;
	  var entry = state.bufferedRequest;
	
	  if (stream._writev && entry && entry.next) {
	    // Fast case, write everything using _writev()
	    var l = state.bufferedRequestCount;
	    var buffer = new Array(l);
	    var holder = state.corkedRequestsFree;
	    holder.entry = entry;
	
	    var count = 0;
	    while (entry) {
	      buffer[count] = entry;
	      entry = entry.next;
	      count += 1;
	    }
	
	    doWrite(stream, state, true, state.length, buffer, '', holder.finish);
	
	    // doWrite is almost always async, defer these to save a bit of time
	    // as the hot path ends with doWrite
	    state.pendingcb++;
	    state.lastBufferedRequest = null;
	    if (holder.next) {
	      state.corkedRequestsFree = holder.next;
	      holder.next = null;
	    } else {
	      state.corkedRequestsFree = new CorkedRequest(state);
	    }
	  } else {
	    // Slow case, write chunks one-by-one
	    while (entry) {
	      var chunk = entry.chunk;
	      var encoding = entry.encoding;
	      var cb = entry.callback;
	      var len = state.objectMode ? 1 : chunk.length;
	
	      doWrite(stream, state, false, len, chunk, encoding, cb);
	      entry = entry.next;
	      // if we didn't call the onwrite immediately, then
	      // it means that we need to wait until it does.
	      // also, that means that the chunk and cb are currently
	      // being processed, so move the buffer counter past them.
	      if (state.writing) {
	        break;
	      }
	    }
	
	    if (entry === null) state.lastBufferedRequest = null;
	  }
	
	  state.bufferedRequestCount = 0;
	  state.bufferedRequest = entry;
	  state.bufferProcessing = false;
	}
	
	Writable.prototype._write = function (chunk, encoding, cb) {
	  cb(new Error('not implemented'));
	};
	
	Writable.prototype._writev = null;
	
	Writable.prototype.end = function (chunk, encoding, cb) {
	  var state = this._writableState;
	
	  if (typeof chunk === 'function') {
	    cb = chunk;
	    chunk = null;
	    encoding = null;
	  } else if (typeof encoding === 'function') {
	    cb = encoding;
	    encoding = null;
	  }
	
	  if (chunk !== null && chunk !== undefined) this.write(chunk, encoding);
	
	  // .end() fully uncorks
	  if (state.corked) {
	    state.corked = 1;
	    this.uncork();
	  }
	
	  // ignore unnecessary end() calls.
	  if (!state.ending && !state.finished) endWritable(this, state, cb);
	};
	
	function needFinish(state) {
	  return state.ending && state.length === 0 && state.bufferedRequest === null && !state.finished && !state.writing;
	}
	
	function prefinish(stream, state) {
	  if (!state.prefinished) {
	    state.prefinished = true;
	    stream.emit('prefinish');
	  }
	}
	
	function finishMaybe(stream, state) {
	  var need = needFinish(state);
	  if (need) {
	    if (state.pendingcb === 0) {
	      prefinish(stream, state);
	      state.finished = true;
	      stream.emit('finish');
	    } else {
	      prefinish(stream, state);
	    }
	  }
	  return need;
	}
	
	function endWritable(stream, state, cb) {
	  state.ending = true;
	  finishMaybe(stream, state);
	  if (cb) {
	    if (state.finished) processNextTick(cb);else stream.once('finish', cb);
	  }
	  state.ended = true;
	  stream.writable = false;
	}
	
	// It seems a linked list but it is not
	// there will be only 2 of these for each stream
	function CorkedRequest(state) {
	  var _this = this;
	
	  this.next = null;
	  this.entry = null;
	
	  this.finish = function (err) {
	    var entry = _this.entry;
	    _this.entry = null;
	    while (entry) {
	      var cb = entry.callback;
	      state.pendingcb--;
	      cb(err);
	      entry = entry.next;
	    }
	    if (state.corkedRequestsFree) {
	      state.corkedRequestsFree.next = _this;
	    } else {
	      state.corkedRequestsFree = _this;
	    }
	  };
	}
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3), __webpack_require__(299).setImmediate))

/***/ }),
/* 615 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.
	
	var Buffer = __webpack_require__(290).Buffer;
	
	var isBufferEncoding = Buffer.isEncoding || function (encoding) {
	  switch (encoding && encoding.toLowerCase()) {
	    case 'hex':case 'utf8':case 'utf-8':case 'ascii':case 'binary':case 'base64':case 'ucs2':case 'ucs-2':case 'utf16le':case 'utf-16le':case 'raw':
	      return true;
	    default:
	      return false;
	  }
	};
	
	function assertEncoding(encoding) {
	  if (encoding && !isBufferEncoding(encoding)) {
	    throw new Error('Unknown encoding: ' + encoding);
	  }
	}
	
	// StringDecoder provides an interface for efficiently splitting a series of
	// buffers into a series of JS strings without breaking apart multi-byte
	// characters. CESU-8 is handled as part of the UTF-8 encoding.
	//
	// @TODO Handling all encodings inside a single object makes it very difficult
	// to reason about this code, so it should be split up in the future.
	// @TODO There should be a utf8-strict encoding that rejects invalid UTF-8 code
	// points as used by CESU-8.
	var StringDecoder = exports.StringDecoder = function (encoding) {
	  this.encoding = (encoding || 'utf8').toLowerCase().replace(/[-_]/, '');
	  assertEncoding(encoding);
	  switch (this.encoding) {
	    case 'utf8':
	      // CESU-8 represents each of Surrogate Pair by 3-bytes
	      this.surrogateSize = 3;
	      break;
	    case 'ucs2':
	    case 'utf16le':
	      // UTF-16 represents each of Surrogate Pair by 2-bytes
	      this.surrogateSize = 2;
	      this.detectIncompleteChar = utf16DetectIncompleteChar;
	      break;
	    case 'base64':
	      // Base-64 stores 3 bytes in 4 chars, and pads the remainder.
	      this.surrogateSize = 3;
	      this.detectIncompleteChar = base64DetectIncompleteChar;
	      break;
	    default:
	      this.write = passThroughWrite;
	      return;
	  }
	
	  // Enough space to store all bytes of a single character. UTF-8 needs 4
	  // bytes, but CESU-8 may require up to 6 (3 bytes per surrogate).
	  this.charBuffer = new Buffer(6);
	  // Number of bytes received for the current incomplete multi-byte character.
	  this.charReceived = 0;
	  // Number of bytes expected for the current incomplete multi-byte character.
	  this.charLength = 0;
	};
	
	// write decodes the given buffer and returns it as JS string that is
	// guaranteed to not contain any partial multi-byte characters. Any partial
	// character found at the end of the buffer is buffered up, and will be
	// returned when calling write again with the remaining bytes.
	//
	// Note: Converting a Buffer containing an orphan surrogate to a String
	// currently works, but converting a String to a Buffer (via `new Buffer`, or
	// Buffer#write) will replace incomplete surrogates with the unicode
	// replacement character. See https://codereview.chromium.org/121173009/ .
	StringDecoder.prototype.write = function (buffer) {
	  var charStr = '';
	  // if our last write ended with an incomplete multibyte character
	  while (this.charLength) {
	    // determine how many remaining bytes this buffer has to offer for this char
	    var available = buffer.length >= this.charLength - this.charReceived ? this.charLength - this.charReceived : buffer.length;
	
	    // add the new bytes to the char buffer
	    buffer.copy(this.charBuffer, this.charReceived, 0, available);
	    this.charReceived += available;
	
	    if (this.charReceived < this.charLength) {
	      // still not enough chars in this buffer? wait for more ...
	      return '';
	    }
	
	    // remove bytes belonging to the current character from the buffer
	    buffer = buffer.slice(available, buffer.length);
	
	    // get the character that was split
	    charStr = this.charBuffer.slice(0, this.charLength).toString(this.encoding);
	
	    // CESU-8: lead surrogate (D800-DBFF) is also the incomplete character
	    var charCode = charStr.charCodeAt(charStr.length - 1);
	    if (charCode >= 0xD800 && charCode <= 0xDBFF) {
	      this.charLength += this.surrogateSize;
	      charStr = '';
	      continue;
	    }
	    this.charReceived = this.charLength = 0;
	
	    // if there are no more bytes in this buffer, just emit our char
	    if (buffer.length === 0) {
	      return charStr;
	    }
	    break;
	  }
	
	  // determine and set charLength / charReceived
	  this.detectIncompleteChar(buffer);
	
	  var end = buffer.length;
	  if (this.charLength) {
	    // buffer the incomplete character bytes we got
	    buffer.copy(this.charBuffer, 0, buffer.length - this.charReceived, end);
	    end -= this.charReceived;
	  }
	
	  charStr += buffer.toString(this.encoding, 0, end);
	
	  var end = charStr.length - 1;
	  var charCode = charStr.charCodeAt(end);
	  // CESU-8: lead surrogate (D800-DBFF) is also the incomplete character
	  if (charCode >= 0xD800 && charCode <= 0xDBFF) {
	    var size = this.surrogateSize;
	    this.charLength += size;
	    this.charReceived += size;
	    this.charBuffer.copy(this.charBuffer, size, 0, size);
	    buffer.copy(this.charBuffer, 0, 0, size);
	    return charStr.substring(0, end);
	  }
	
	  // or just emit the charStr
	  return charStr;
	};
	
	// detectIncompleteChar determines if there is an incomplete UTF-8 character at
	// the end of the given buffer. If so, it sets this.charLength to the byte
	// length that character, and sets this.charReceived to the number of bytes
	// that are available for this character.
	StringDecoder.prototype.detectIncompleteChar = function (buffer) {
	  // determine how many bytes we have to check at the end of this buffer
	  var i = buffer.length >= 3 ? 3 : buffer.length;
	
	  // Figure out if one of the last i bytes of our buffer announces an
	  // incomplete char.
	  for (; i > 0; i--) {
	    var c = buffer[buffer.length - i];
	
	    // See http://en.wikipedia.org/wiki/UTF-8#Description
	
	    // 110XXXXX
	    if (i == 1 && c >> 5 == 0x06) {
	      this.charLength = 2;
	      break;
	    }
	
	    // 1110XXXX
	    if (i <= 2 && c >> 4 == 0x0E) {
	      this.charLength = 3;
	      break;
	    }
	
	    // 11110XXX
	    if (i <= 3 && c >> 3 == 0x1E) {
	      this.charLength = 4;
	      break;
	    }
	  }
	  this.charReceived = i;
	};
	
	StringDecoder.prototype.end = function (buffer) {
	  var res = '';
	  if (buffer && buffer.length) res = this.write(buffer);
	
	  if (this.charReceived) {
	    var cr = this.charReceived;
	    var buf = this.charBuffer;
	    var enc = this.encoding;
	    res += buf.slice(0, cr).toString(enc);
	  }
	
	  return res;
	};
	
	function passThroughWrite(buffer) {
	  return buffer.toString(this.encoding);
	}
	
	function utf16DetectIncompleteChar(buffer) {
	  this.charReceived = buffer.length % 2;
	  this.charLength = this.charReceived ? 2 : 0;
	}
	
	function base64DetectIncompleteChar(buffer) {
	  this.charReceived = buffer.length % 3;
	  this.charLength = this.charReceived ? 3 : 0;
	}

/***/ }),
/* 616 */
/***/ (function(module, exports, __webpack_require__) {

	// a transform stream is a readable/writable stream where you do
	// something with the data.  Sometimes it's called a "filter",
	// but that's not a great name for it, since that implies a thing where
	// some bits pass through, and others are simply ignored.  (That would
	// be a valid example of a transform, of course.)
	//
	// While the output is causally related to the input, it's not a
	// necessarily symmetric or synchronous transformation.  For example,
	// a zlib stream might take multiple plain-text writes(), and then
	// emit a single compressed chunk some time in the future.
	//
	// Here's how this works:
	//
	// The Transform stream has all the aspects of the readable and writable
	// stream classes.  When you write(chunk), that calls _write(chunk,cb)
	// internally, and returns false if there's a lot of pending writes
	// buffered up.  When you call read(), that calls _read(n) until
	// there's enough pending readable data buffered up.
	//
	// In a transform stream, the written data is placed in a buffer.  When
	// _read(n) is called, it transforms the queued up data, calling the
	// buffered _write cb's as it consumes chunks.  If consuming a single
	// written chunk would result in multiple output chunks, then the first
	// outputted bit calls the readcb, and subsequent chunks just go into
	// the read buffer, and will cause it to emit 'readable' if necessary.
	//
	// This way, back-pressure is actually determined by the reading side,
	// since _read has to be called to start processing a new chunk.  However,
	// a pathological inflate type of transform can cause excessive buffering
	// here.  For example, imagine a stream where every byte of input is
	// interpreted as an integer from 0-255, and then results in that many
	// bytes of output.  Writing the 4 bytes {ff,ff,ff,ff} would result in
	// 1kb of data being output.  In this case, you could write a very small
	// amount of input, and end up with a very large amount of output.  In
	// such a pathological inflating mechanism, there'd be no way to tell
	// the system to stop doing the transform.  A single 4MB write could
	// cause the system to run out of memory.
	//
	// However, even in such a pathological case, only a single written chunk
	// would be consumed, and then the rest would wait (un-transformed) until
	// the results of the previous transformed chunk were consumed.
	
	'use strict';
	
	module.exports = Transform;
	
	var Duplex = __webpack_require__(613);
	
	/*<replacement>*/
	var util = __webpack_require__(294);
	util.inherits = __webpack_require__(284);
	/*</replacement>*/
	
	util.inherits(Transform, Duplex);
	
	function TransformState(stream) {
	  this.afterTransform = function (er, data) {
	    return afterTransform(stream, er, data);
	  };
	
	  this.needTransform = false;
	  this.transforming = false;
	  this.writecb = null;
	  this.writechunk = null;
	  this.writeencoding = null;
	}
	
	function afterTransform(stream, er, data) {
	  var ts = stream._transformState;
	  ts.transforming = false;
	
	  var cb = ts.writecb;
	
	  if (!cb) return stream.emit('error', new Error('no writecb in Transform class'));
	
	  ts.writechunk = null;
	  ts.writecb = null;
	
	  if (data !== null && data !== undefined) stream.push(data);
	
	  cb(er);
	
	  var rs = stream._readableState;
	  rs.reading = false;
	  if (rs.needReadable || rs.length < rs.highWaterMark) {
	    stream._read(rs.highWaterMark);
	  }
	}
	
	function Transform(options) {
	  if (!(this instanceof Transform)) return new Transform(options);
	
	  Duplex.call(this, options);
	
	  this._transformState = new TransformState(this);
	
	  // when the writable side finishes, then flush out anything remaining.
	  var stream = this;
	
	  // start out asking for a readable event once data is transformed.
	  this._readableState.needReadable = true;
	
	  // we have implemented the _read method, and done the other things
	  // that Readable wants before the first _read call, so unset the
	  // sync guard flag.
	  this._readableState.sync = false;
	
	  if (options) {
	    if (typeof options.transform === 'function') this._transform = options.transform;
	
	    if (typeof options.flush === 'function') this._flush = options.flush;
	  }
	
	  this.once('prefinish', function () {
	    if (typeof this._flush === 'function') this._flush(function (er) {
	      done(stream, er);
	    });else done(stream);
	  });
	}
	
	Transform.prototype.push = function (chunk, encoding) {
	  this._transformState.needTransform = false;
	  return Duplex.prototype.push.call(this, chunk, encoding);
	};
	
	// This is the part where you do stuff!
	// override this function in implementation classes.
	// 'chunk' is an input chunk.
	//
	// Call `push(newChunk)` to pass along transformed output
	// to the readable side.  You may call 'push' zero or more times.
	//
	// Call `cb(err)` when you are done with this chunk.  If you pass
	// an error, then that'll put the hurt on the whole operation.  If you
	// never call cb(), then you'll never get another chunk.
	Transform.prototype._transform = function (chunk, encoding, cb) {
	  throw new Error('Not implemented');
	};
	
	Transform.prototype._write = function (chunk, encoding, cb) {
	  var ts = this._transformState;
	  ts.writecb = cb;
	  ts.writechunk = chunk;
	  ts.writeencoding = encoding;
	  if (!ts.transforming) {
	    var rs = this._readableState;
	    if (ts.needTransform || rs.needReadable || rs.length < rs.highWaterMark) this._read(rs.highWaterMark);
	  }
	};
	
	// Doesn't matter what the args are here.
	// _transform does all the work.
	// That we got here means that the readable side wants more data.
	Transform.prototype._read = function (n) {
	  var ts = this._transformState;
	
	  if (ts.writechunk !== null && ts.writecb && !ts.transforming) {
	    ts.transforming = true;
	    this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);
	  } else {
	    // mark that we need a transform, so that any data that comes in
	    // will get processed, now that we've asked for it.
	    ts.needTransform = true;
	  }
	};
	
	function done(stream, er) {
	  if (er) return stream.emit('error', er);
	
	  // if there's nothing in the write buffer, then that means
	  // that nothing more will ever be provided
	  var ws = stream._writableState;
	  var ts = stream._transformState;
	
	  if (ws.length) throw new Error('Calling transform done when ws.length != 0');
	
	  if (ts.transforming) throw new Error('Calling transform done when still transforming');
	
	  return stream.push(null);
	}

/***/ }),
/* 617 */
/***/ (function(module, exports, __webpack_require__) {

	// a passthrough stream.
	// basically just the most minimal sort of Transform stream.
	// Every written chunk gets output as-is.
	
	'use strict';
	
	module.exports = PassThrough;
	
	var Transform = __webpack_require__(616);
	
	/*<replacement>*/
	var util = __webpack_require__(294);
	util.inherits = __webpack_require__(284);
	/*</replacement>*/
	
	util.inherits(PassThrough, Transform);
	
	function PassThrough(options) {
	  if (!(this instanceof PassThrough)) return new PassThrough(options);
	
	  Transform.call(this, options);
	}
	
	PassThrough.prototype._transform = function (chunk, encoding, cb) {
	  cb(null, chunk);
	};

/***/ }),
/* 618 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	
	module.exports = exports = publish;
	
	exports.usage = 'Publishes pre-built binary (requires aws-sdk)';
	
	var fs = __webpack_require__(!(function webpackMissingModule() { var e = new Error("Cannot find module \"fs\""); e.code = 'MODULE_NOT_FOUND'; throw e; }()));
	var path = __webpack_require__(270);
	var log = __webpack_require__(310);
	var versioning = __webpack_require__(348);
	var s3_setup = __webpack_require__(590);
	var existsAsync = fs.exists || path.exists;
	var url = __webpack_require__(275);
	var config = __webpack_require__(597)("node_pre_gyp", { acl: "public-read" });
	
	function publish(gyp, argv, callback) {
	    var AWS = __webpack_require__(!(function webpackMissingModule() { var e = new Error("Cannot find module \"aws-sdk\""); e.code = 'MODULE_NOT_FOUND'; throw e; }()));
	    var package_json = JSON.parse(fs.readFileSync('./package.json'));
	    var opts = versioning.evaluate(package_json, gyp.opts);
	    var tarball = opts.staged_tarball;
	    existsAsync(tarball, function (found) {
	        if (!found) {
	            return callback(new Error("Cannot publish because " + tarball + " missing: run `node-pre-gyp package` first"));
	        }
	        log.info('publish', 'Detecting s3 credentials');
	        s3_setup.detect(opts.hosted_path, config);
	        var key_name = url.resolve(config.prefix, opts.package_name);
	        log.info('publish', 'Authenticating with s3');
	        AWS.config.update(config);
	        var s3 = new AWS.S3();
	        var s3_opts = { Bucket: config.bucket,
	            Key: key_name
	        };
	        var remote_package = 'https://' + s3_opts.Bucket + '.s3.amazonaws.com/' + s3_opts.Key;
	        log.info('publish', 'Checking for existing binary at ' + remote_package);
	        s3.headObject(s3_opts, function (err, meta) {
	            if (meta) log.info('publish', JSON.stringify(meta));
	            if (err && err.code == 'NotFound') {
	                // we are safe to publish because
	                // the object does not already exist
	                log.info('publish', 'Preparing to put object');
	                var s3_put = new AWS.S3();
	                var s3_put_opts = { ACL: config.acl,
	                    Body: fs.createReadStream(tarball),
	                    Bucket: config.bucket,
	                    Key: key_name
	                };
	                log.info('publish', 'Putting object');
	                try {
	                    s3_put.putObject(s3_put_opts, function (err, resp) {
	                        log.info('publish', 'returned from putting object');
	                        if (err) {
	                            log.info('publish', 's3 putObject error: "' + err + '"');
	                            return callback(err);
	                        }
	                        if (resp) log.info('publish', 's3 putObject response: "' + JSON.stringify(resp) + '"');
	                        log.info('publish', 'successfully put object');
	                        console.log('[' + package_json.name + '] published to ' + remote_package);
	                        return callback();
	                    });
	                } catch (err) {
	                    log.info('publish', 's3 putObject error: "' + err + '"');
	                    return callback(err);
	                }
	            } else if (err) {
	                log.info('publish', 's3 headObject error: "' + err + '"');
	                return callback(err);
	            } else {
	                log.error('publish', 'Cannot publish over existing version');
	                log.error('publish', "Update the 'version' field in package.json and try again");
	                log.error('publish', 'If the previous version was published in error see:');
	                log.error('publish', '\t node-pre-gyp unpublish');
	                return callback(new Error('Failed publishing to ' + remote_package));
	            }
	        });
	    });
	}

/***/ }),
/* 619 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {"use strict";
	
	module.exports = exports = rebuild;
	
	exports.usage = 'Runs "clean" and "build" at once';
	
	function rebuild(gyp, argv, callback) {
	    gyp.todo.unshift({ name: 'clean', args: [] }, { name: 'build', args: ['rebuild'] });
	    process.nextTick(callback);
	}
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ }),
/* 620 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {"use strict";
	
	module.exports = exports = rebuild;
	
	exports.usage = 'Runs "clean" and "install" at once';
	
	function rebuild(gyp, argv, callback) {
	    gyp.todo.unshift({ name: 'clean', args: [] }, { name: 'install', args: [] });
	    process.nextTick(callback);
	}
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ }),
/* 621 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	
	module.exports = exports = reveal;
	
	exports.usage = 'Reveals data on the versioned binary';
	
	var fs = __webpack_require__(!(function webpackMissingModule() { var e = new Error("Cannot find module \"fs\""); e.code = 'MODULE_NOT_FOUND'; throw e; }()));
	var versioning = __webpack_require__(348);
	
	function unix_paths(key, val) {
	    return val && val.replace ? val.replace(/\\/g, '/') : val;
	}
	
	function reveal(gyp, argv, callback) {
	    var package_json = JSON.parse(fs.readFileSync('./package.json'));
	    var opts = versioning.evaluate(package_json, gyp.opts);
	    var hit = false;
	    // if a second arg is passed look to see
	    // if it is a known option
	    //console.log(JSON.stringify(gyp.opts,null,1))
	    var remain = gyp.opts.argv.remain.pop();
	    if (remain && opts.hasOwnProperty(remain)) {
	        console.log(opts[remain].replace(/\\/g, '/'));
	        hit = true;
	    }
	    // otherwise return all options as json
	    if (!hit) {
	        console.log(JSON.stringify(opts, unix_paths, 2));
	    }
	    return callback();
	}

/***/ }),
/* 622 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	
	module.exports = exports = testpackage;
	
	exports.usage = 'Tests that the staged package is valid';
	
	var fs = __webpack_require__(!(function webpackMissingModule() { var e = new Error("Cannot find module \"fs\""); e.code = 'MODULE_NOT_FOUND'; throw e; }()));
	var path = __webpack_require__(270);
	var log = __webpack_require__(310);
	var existsAsync = fs.exists || path.exists;
	var versioning = __webpack_require__(348);
	var testbinary = __webpack_require__(599);
	var read = __webpack_require__(!(function webpackMissingModule() { var e = new Error("Cannot find module \"fs\""); e.code = 'MODULE_NOT_FOUND'; throw e; }())).createReadStream;
	var zlib = __webpack_require__(421);
	
	function testpackage(gyp, argv, callback) {
	    var package_json = JSON.parse(fs.readFileSync('./package.json'));
	    var opts = versioning.evaluate(package_json, gyp.opts);
	    var tarball = opts.staged_tarball;
	    existsAsync(tarball, function (found) {
	        if (!found) {
	            return callback(new Error("Cannot test package because " + tarball + " missing: run `node-pre-gyp package` first"));
	        }
	        var to = opts.module_path;
	        var gunzip = zlib.createGunzip();
	        var extracter = __webpack_require__(!(function webpackMissingModule() { var e = new Error("Cannot find module \"tar\""); e.code = 'MODULE_NOT_FOUND'; throw e; }())).Extract({ path: to, strip: 1 });
	        function filter_func(entry) {
	            // ensure directories are +x
	            // https://github.com/mapnik/node-mapnik/issues/262
	            entry.props.mode |= entry.props.mode >>> 2 & parseInt('0111', 8);
	            log.info('install', 'unpacking ' + entry.path);
	        }
	        gunzip.on('error', callback);
	        extracter.on('error', callback);
	        extracter.on('entry', filter_func);
	        extracter.on('end', function (err) {
	            if (err) return callback(err);
	            testbinary(gyp, argv, function (err) {
	                if (err) {
	                    return callback(err);
	                } else {
	                    console.log('[' + package_json.name + '] Package appears valid');
	                    return callback();
	                }
	            });
	        });
	        read(tarball).pipe(gunzip).pipe(extracter);
	    });
	}

/***/ }),
/* 623 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	
	module.exports = exports = unpublish;
	
	exports.usage = 'Unpublishes pre-built binary (requires aws-sdk)';
	
	var fs = __webpack_require__(!(function webpackMissingModule() { var e = new Error("Cannot find module \"fs\""); e.code = 'MODULE_NOT_FOUND'; throw e; }()));
	var log = __webpack_require__(310);
	var versioning = __webpack_require__(348);
	var s3_setup = __webpack_require__(590);
	var url = __webpack_require__(275);
	var config = __webpack_require__(597)("node_pre_gyp", { acl: "public-read" });
	
	function unpublish(gyp, argv, callback) {
	    var AWS = __webpack_require__(!(function webpackMissingModule() { var e = new Error("Cannot find module \"aws-sdk\""); e.code = 'MODULE_NOT_FOUND'; throw e; }()));
	    var package_json = JSON.parse(fs.readFileSync('./package.json'));
	    var opts = versioning.evaluate(package_json, gyp.opts);
	    s3_setup.detect(opts.hosted_path, config);
	    AWS.config.update(config);
	    var key_name = url.resolve(config.prefix, opts.package_name);
	    var s3 = new AWS.S3();
	    var s3_opts = { Bucket: config.bucket,
	        Key: key_name
	    };
	    s3.headObject(s3_opts, function (err, meta) {
	        if (err && err.code == 'NotFound') {
	            console.log('[' + package_json.name + '] Not found: https://' + s3_opts.Bucket + '.s3.amazonaws.com/' + s3_opts.Key);
	            return callback();
	        } else if (err) {
	            return callback(err);
	        } else {
	            log.info('unpublish', JSON.stringify(meta));
	            s3.deleteObject(s3_opts, function (err, resp) {
	                if (err) return callback(err);
	                log.info(JSON.stringify(resp));
	                console.log('[' + package_json.name + '] Success: removed https://' + s3_opts.Bucket + '.s3.amazonaws.com/' + s3_opts.Key);
	                return callback();
	            });
	        }
	    });
	}

/***/ }),
/* 624 */
/***/ (function(module, exports, __webpack_require__) {

	var map = {
		"./bcrypt": 268,
		"./bcrypt.js": 268,
		"./examples/async_compare": 632,
		"./examples/async_compare.js": 632,
		"./examples/forever_gen_salt": 633,
		"./examples/forever_gen_salt.js": 633,
		"./lib/promises": 635,
		"./lib/promises.js": 635,
		"./test/async": 641,
		"./test/async.js": 641,
		"./test/promise": 642,
		"./test/promise.js": 642,
		"./test/repetitions": 643,
		"./test/repetitions.js": 643,
		"./test/sync": 644,
		"./test/sync.js": 644
	};
	function webpackContext(req) {
		return __webpack_require__(webpackContextResolve(req));
	};
	function webpackContextResolve(req) {
		return map[req] || (function() { throw new Error("Cannot find module '" + req + "'.") }());
	};
	webpackContext.keys = function webpackContextKeys() {
		return Object.keys(map);
	};
	webpackContext.resolve = webpackContextResolve;
	module.exports = webpackContext;
	webpackContext.id = 624;


/***/ }),
/* 625 */,
/* 626 */,
/* 627 */,
/* 628 */,
/* 629 */,
/* 630 */,
/* 631 */,
/* 632 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var bcrypt = __webpack_require__(268);
	
	var start = Date.now();
	bcrypt.genSalt(10, function (err, salt) {
	  console.log('salt: ' + salt);
	  console.log('salt cb end: ' + (Date.now() - start) + 'ms');
	  bcrypt.hash('test', salt, function (err, crypted) {
	    console.log('crypted: ' + crypted);
	    console.log('crypted cb end: ' + (Date.now() - start) + 'ms');
	    console.log('rounds used from hash:', bcrypt.getRounds(crypted));
	    bcrypt.compare('test', crypted, function (err, res) {
	      console.log('compared true: ' + res);
	      console.log('compared true cb end: ' + (Date.now() - start) + 'ms');
	    });
	    bcrypt.compare('bacon', crypted, function (err, res) {
	      console.log('compared false: ' + res);
	      console.log('compared false cb end: ' + (Date.now() - start) + 'ms');
	    });
	  });
	});
	console.log('end: ' + (Date.now() - start) + 'ms');

/***/ }),
/* 633 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var bcrypt = __webpack_require__(268);
	
	(function printSalt() {
	  bcrypt.genSalt(10, function (err, salt) {
	    console.log('salt: ' + salt);
	    printSalt();
	  });
	})();

/***/ }),
/* 634 */,
/* 635 */
/***/ (function(module, exports) {

	'use strict';
	
	/// encapsulate a method with a node-style callback in a Promise
	/// @param {object} 'this' of the encapsulated function
	/// @param {function} function to be encapsulated
	/// @param {Array-like} args to be passed to the called function
	/// @return {Promise} a Promise encapuslaing the function
	
	module.exports.promise = function (fn, context, args) {
	
	    //can't do anything without Promise so fail silently
	    if (typeof Promise === 'undefined') {
	        return;
	    }
	
	    if (!Array.isArray(args)) {
	        args = Array.prototype.slice.call(args);
	    }
	
	    if (typeof fn !== 'function') {
	        return Promise.reject(new Error('fn must be a function'));
	    }
	
	    return new Promise(function (resolve, reject) {
	        args.push(function (err, data) {
	            if (err) {
	                reject(err);
	            } else {
	                resolve(data);
	            }
	        });
	
	        fn.apply(context, args);
	    });
	};
	
	/// @param {err} the error to be thrown
	module.exports.reject = function (err) {
	
	    // silently swallow errors if Promise is not defined
	    // emulating old behavior
	    if (typeof Promise === 'undefined') {
	        return;
	    }
	
	    return Promise.reject(err);
	};

/***/ }),
/* 636 */,
/* 637 */,
/* 638 */,
/* 639 */,
/* 640 */,
/* 641 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	
	var bcrypt = __webpack_require__(268);
	
	module.exports = {
	    test_salt_length: function test_salt_length(assert) {
	        assert.expect(1);
	        bcrypt.genSalt(10, function (err, salt) {
	            assert.equals(29, salt.length, "Salt isn't the correct length.");
	            assert.done();
	        });
	    },
	    test_salt_only_cb: function test_salt_only_cb(assert) {
	        assert.doesNotThrow(function () {
	            bcrypt.genSalt(function (err, salt) {});
	        }, "Should not throw an Error. Rounds and seed length are optional.");
	        assert.done();
	    },
	    test_salt_rounds_is_string_number: function test_salt_rounds_is_string_number(assert) {
	        bcrypt.genSalt('10', void 0, function (err, salt) {
	            assert.ok(err instanceof Error, "Should be an Error. genSalt requires round to be of type number.");
	            assert.done();
	        });
	    },
	    test_salt_rounds_is_string_non_number: function test_salt_rounds_is_string_non_number(assert) {
	        bcrypt.genSalt('b', function (err, salt) {
	            assert.ok(err instanceof Error, "Should throw an Error. genSalt requires rounds to of type number.");
	            assert.done();
	        });
	    },
	    test_hash: function test_hash(assert) {
	        assert.expect(1);
	        bcrypt.genSalt(10, function (err, salt) {
	            bcrypt.hash('password', salt, function (err, res) {
	                assert.ok(res, "Res should be defined.");
	                assert.done();
	            });
	        });
	    },
	    test_hash_rounds: function test_hash_rounds(assert) {
	        assert.expect(1);
	        bcrypt.hash('bacon', 8, function (err, hash) {
	            assert.equals(bcrypt.getRounds(hash), 8, "Number of rounds should be that specified in the function call.");
	            assert.done();
	        });
	    },
	    test_hash_empty_strings: function test_hash_empty_strings(assert) {
	        assert.expect(2);
	        bcrypt.genSalt(10, function (err, salt) {
	            bcrypt.hash('', salt, function (err, res) {
	                assert.ok(res, "Res should be defined even with an empty pw.");
	                bcrypt.hash('', '', function (err, res) {
	                    if (err) {
	                        assert.ok(err);
	                    } else {
	                        assert.fail();
	                    }
	
	                    assert.done();
	                });
	            });
	        });
	    },
	    test_hash_no_params: function test_hash_no_params(assert) {
	        bcrypt.hash(function (err, hash) {
	            assert.ok(err, "Should be an error. No params.");
	            assert.done();
	        });
	    },
	    test_hash_one_param: function test_hash_one_param(assert) {
	        bcrypt.hash('password', function (err, hash) {
	            assert.ok(err, "Should be an Error. No salt.");
	            assert.done();
	        });
	    },
	    test_hash_salt_validity: function test_hash_salt_validity(assert) {
	        assert.expect(3);
	        bcrypt.hash('password', '$2a$10$somesaltyvaluertsetrse', function (err, enc) {
	            assert.equal(err, undefined);
	            bcrypt.hash('password', 'some$value', function (err, enc) {
	                assert.notEqual(err, undefined);
	                assert.equal(err.message, "Invalid salt. Salt must be in the form of: $Vers$log2(NumRounds)$saltvalue");
	                assert.done();
	            });
	        });
	    },
	    test_verify_salt: function test_verify_salt(assert) {
	        assert.expect(2);
	        bcrypt.genSalt(10, function (err, salt) {
	            var split_salt = salt.split('$');
	            assert.ok(split_salt[1], '2a');
	            assert.ok(split_salt[2], '10');
	            assert.done();
	        });
	    },
	    test_verify_salt_min_rounds: function test_verify_salt_min_rounds(assert) {
	        assert.expect(2);
	        bcrypt.genSalt(1, function (err, salt) {
	            var split_salt = salt.split('$');
	            assert.ok(split_salt[1], '2a');
	            assert.ok(split_salt[2], '4');
	            assert.done();
	        });
	    },
	    test_verify_salt_max_rounds: function test_verify_salt_max_rounds(assert) {
	        assert.expect(2);
	        bcrypt.genSalt(100, function (err, salt) {
	            var split_salt = salt.split('$');
	            assert.ok(split_salt[1], '2a');
	            assert.ok(split_salt[2], '31');
	            assert.done();
	        });
	    },
	    test_hash_compare: function test_hash_compare(assert) {
	        assert.expect(3);
	        bcrypt.genSalt(10, function (err, salt) {
	            assert.equals(29, salt.length, "Salt isn't the correct length.");
	            bcrypt.hash("test", salt, function (err, hash) {
	                bcrypt.compare("test", hash, function (err, res) {
	                    assert.equal(res, true, "These hashes should be equal.");
	                    bcrypt.compare("blah", hash, function (err, res) {
	                        assert.equal(res, false, "These hashes should not be equal.");
	                        assert.done();
	                    });
	                });
	            });
	        });
	    },
	    test_hash_compare_empty_strings: function test_hash_compare_empty_strings(assert) {
	        assert.expect(2);
	        var hash = bcrypt.hashSync("test", bcrypt.genSaltSync(10));
	
	        bcrypt.compare("", hash, function (err, res) {
	            assert.equal(res, false, "These hashes should be equal.");
	            bcrypt.compare("", "", function (err, res) {
	                assert.equal(res, false, "These hashes should be equal.");
	                assert.done();
	            });
	        });
	    },
	    test_hash_compare_invalid_strings: function test_hash_compare_invalid_strings(assert) {
	        var fullString = 'envy1362987212538';
	        var hash = '$2a$10$XOPbrlUPQdwdJUpSrIF6X.LbE14qsMmKGhM1A8W9iqaG3vv1BD7WC';
	        var wut = ':';
	        bcrypt.compare(fullString, hash, function (err, res) {
	            assert.ok(res);
	            bcrypt.compare(fullString, wut, function (err, res) {
	                assert.ok(!res);
	                assert.done();
	            });
	        });
	    },
	    test_compare_no_params: function test_compare_no_params(assert) {
	        bcrypt.compare(function (err, hash) {
	            assert.ok(err, 'Should be an error. No params.');
	            assert.done();
	        });
	    },
	    test_hash_compare_one_param: function test_hash_compare_one_param(assert) {
	        bcrypt.compare('password', function (err, hash) {
	            assert.ok(err, 'Should be an Error. No hash.');
	            assert.done();
	        });
	    }
	};

/***/ }),
/* 642 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var bcrypt = __webpack_require__(268);
	
	var fail = function fail(assert, error) {
	    assert.ok(false, error);
	    assert.done();
	};
	
	// only run these tests if Promise is available
	if (typeof Promise !== 'undefined') {
	    module.exports = {
	        test_salt_returns_promise_on_no_args: function test_salt_returns_promise_on_no_args(assert) {
	            // make sure test passes with non-native implementations such as bluebird
	            // http://stackoverflow.com/questions/27746304/how-do-i-tell-if-an-object-is-a-promise
	            assert.ok(typeof bcrypt.genSalt().then === 'function', "Should return a promise");
	            assert.done();
	        },
	        test_salt_returns_promise_on_null_callback: function test_salt_returns_promise_on_null_callback(assert) {
	            assert.ok(typeof bcrypt.genSalt(13, null, null).then === 'function', "Should return a promise");
	            assert.done();
	        },
	        test_salt_length: function test_salt_length(assert) {
	            assert.expect(2);
	            bcrypt.genSalt(10).then(function (salt) {
	                assert.ok(typeof salt !== 'undefined', 'salt must not be undefined');
	                assert.equals(29, salt.length, "Salt isn't the correct length.");
	                assert.done();
	            });
	        },
	        test_salt_rounds_is_string_number: function test_salt_rounds_is_string_number(assert) {
	            assert.expect(1);
	            bcrypt.genSalt('10').then(function () {
	                fail(assert, "should not be resolved");
	            }).catch(function (err) {
	                assert.ok(err instanceof Error, "Should be an Error. genSalt requires round to be of type number.");
	            }).then(function () {
	                assert.done();
	            });
	        },
	        test_salt_rounds_is_string_non_number: function test_salt_rounds_is_string_non_number(assert) {
	            assert.expect(1);
	            bcrypt.genSalt('b').then(function () {
	                fail(assert, "should not be resolved");
	            }).catch(function (err) {
	                assert.ok(err instanceof Error, "Should be an Error. genSalt requires round to be of type number.");
	            }).then(function () {
	                assert.done();
	            });
	        },
	        test_hash_returns_promise_on_null_callback: function test_hash_returns_promise_on_null_callback(assert) {
	            assert.ok(typeof bcrypt.hash('password', 10, null).then === 'function', "Should return a promise");
	            assert.done();
	        },
	        test_hash: function test_hash(assert) {
	            assert.expect(1);
	            bcrypt.genSalt(10).then(function (salt) {
	                return bcrypt.hash('password', salt);
	            }).then(function (res) {
	                assert.ok(res, "Res should be defined.");
	                assert.done();
	            });
	        },
	        test_hash_rounds: function test_hash_rounds(assert) {
	            assert.expect(1);
	            bcrypt.hash('bacon', 8).then(function (hash) {
	                assert.equals(bcrypt.getRounds(hash), 8, "Number of rounds should be that specified in the function call.");
	                assert.done();
	            });
	        },
	        test_hash_empty_strings: function test_hash_empty_strings(assert) {
	            assert.expect(2);
	            Promise.all([bcrypt.genSalt(10).then(function (salt) {
	                return bcrypt.hash('', salt);
	            }).then(function (res) {
	                assert.ok(res, "Res should be defined even with an empty pw.");
	            }), bcrypt.hash('', '').then(function () {
	                fail(assert, "should not be resolved");
	            }).catch(function (err) {
	                assert.ok(err);
	            })]).then(function () {
	                assert.done();
	            });
	        },
	        test_hash_no_params: function test_hash_no_params(assert) {
	            assert.expect(1);
	            bcrypt.hash().then(function () {
	                fail(assert, "should not be resolved");
	            }).catch(function (err) {
	                assert.ok(err, "Should be an error. No params.");
	            }).then(function () {
	                assert.done();
	            });
	        },
	        test_hash_one_param: function test_hash_one_param(assert) {
	            assert.expect(1);
	            bcrypt.hash('password').then(function () {
	                fail(assert, "should not be resolved");
	            }).catch(function (err) {
	                assert.ok(err, "Should be an error. No salt.");
	            }).then(function () {
	                assert.done();
	            });
	        },
	        test_hash_salt_validity: function test_hash_salt_validity(assert) {
	            assert.expect(3);
	            Promise.all([bcrypt.hash('password', '$2a$10$somesaltyvaluertsetrse').then(function (enc) {
	                assert.ok(enc, "should be resolved with a value");
	            }), bcrypt.hash('password', 'some$value').then(function () {
	                fail(assert, "should not resolve");
	            }).catch(function (err) {
	                assert.notEqual(err, undefined);
	                assert.equal(err.message, "Invalid salt. Salt must be in the form of: $Vers$log2(NumRounds)$saltvalue");
	            })]).then(function () {
	                assert.done();
	            });
	        },
	        test_verify_salt: function test_verify_salt(assert) {
	            assert.expect(2);
	            bcrypt.genSalt(10).then(function (salt) {
	                var split_salt = salt.split('$');
	                assert.ok(split_salt[1], '2a');
	                assert.ok(split_salt[2], '10');
	                assert.done();
	            });
	        },
	        test_verify_salt_min_rounds: function test_verify_salt_min_rounds(assert) {
	            assert.expect(2);
	            bcrypt.genSalt(1).then(function (salt) {
	                var split_salt = salt.split('$');
	                assert.ok(split_salt[1], '2a');
	                assert.ok(split_salt[2], '4');
	                assert.done();
	            });
	        },
	        test_verify_salt_max_rounds: function test_verify_salt_max_rounds(assert) {
	            assert.expect(2);
	            bcrypt.genSalt(100).then(function (salt) {
	                var split_salt = salt.split('$');
	                assert.ok(split_salt[1], '2a');
	                assert.ok(split_salt[2], '31');
	                assert.done();
	            });
	        },
	        test_hash_compare_returns_promise_on_null_callback: function test_hash_compare_returns_promise_on_null_callback(assert) {
	            assert.ok(typeof bcrypt.compare('password', 'something', null).then === 'function', "Should return a promise");
	            assert.done();
	        },
	        test_hash_compare: function test_hash_compare(assert) {
	            assert.expect(3);
	            bcrypt.genSalt(10).then(function (salt) {
	                assert.equals(29, salt.length, "Salt isn't the correct length.");
	                return bcrypt.hash("test", salt);
	            }).then(function (hash) {
	                return Promise.all([bcrypt.compare("test", hash).then(function (res) {
	                    assert.equal(res, true, "These hashes should be equal.");
	                }), bcrypt.compare("blah", hash).then(function (res) {
	                    assert.equal(res, false, "These hashes should not be equal.");
	                })]).then(function () {
	                    assert.done();
	                });
	            });
	        },
	        test_hash_compare_empty_strings: function test_hash_compare_empty_strings(assert) {
	            assert.expect(2);
	            var hash = bcrypt.hashSync("test", bcrypt.genSaltSync(10));
	            bcrypt.compare("", hash).then(function (res) {
	                assert.equal(res, false, "These hashes should be equal.");
	                return bcrypt.compare("", "");
	            }).then(function (res) {
	                assert.equal(res, false, "These hashes should be equal.");
	                assert.done();
	            });
	        },
	        test_hash_compare_invalid_strings: function test_hash_compare_invalid_strings(assert) {
	            var fullString = 'envy1362987212538';
	            var hash = '$2a$10$XOPbrlUPQdwdJUpSrIF6X.LbE14qsMmKGhM1A8W9iqaG3vv1BD7WC';
	            var wut = ':';
	            Promise.all([bcrypt.compare(fullString, hash).then(function (res) {
	                assert.ok(res);
	            }), bcrypt.compare(fullString, wut).then(function (res) {
	                assert.ok(!res);
	            })]).then(function () {
	                assert.done();
	            });
	        },
	        test_hash_compare_no_params: function test_hash_compare_no_params(assert) {
	            assert.expect(1);
	            bcrypt.compare().then(function () {
	                fail(assert, 'Should not resolve');
	            }).catch(function (err) {
	                assert.equal(err.message, 'data and hash arguments required', 'Promise should be rejected when no parameters are supplied');
	            }).then(function () {
	                assert.done();
	            });
	        },
	        test_hash_compare_one_param: function test_hash_compare_one_param(assert) {
	            assert.expect(1);
	            bcrypt.compare('password').then(function () {
	                fail(assert, 'Should not resolve');
	            }).catch(function (err) {
	                assert.equal(err.message, 'data and hash arguments required', 'Promise should be rejected when no parameters are supplied');
	            }).then(function () {
	                assert.done();
	            });
	        }
	    };
	}

/***/ }),
/* 643 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	
	var bcrypt = __webpack_require__(268);
	
	var EXPECTED = 2500; //number of times to iterate these tests...
	
	module.exports = {
	  test_salt_length: function test_salt_length(assert) {
	    assert.expect(EXPECTED);
	    var n = 0;
	    for (var i = 0; i < EXPECTED; i++) {
	      bcrypt.genSalt(10, function (err, salt) {
	        assert.equals(29, salt.length, "Salt (" + salt + ") isn't the correct length. It is: " + salt.length);
	        n++;
	      });
	    }
	
	    function checkVal() {
	      if (n == EXPECTED) {
	        assert.done();
	      } else {
	        setTimeout(checkVal, 100);
	      }
	    }
	    setTimeout(checkVal, 100);
	  },
	  test_hash_length: function test_hash_length(assert) {
	    assert.expect(EXPECTED);
	    var SALT = '$2a$04$TnjywYklQbbZjdjBgBoA4e';
	    var n = 0;
	    for (var i = 0; i < EXPECTED; i++) {
	      bcrypt.hash('test', SALT, function (err, crypted) {
	        assert.equals(60, crypted.length, "Encrypted (" + crypted + ") isn't the correct length. It is: " + crypted.length);
	        n++;
	      });
	    }
	
	    function checkVal() {
	      if (n == EXPECTED) {
	        assert.done();
	      } else {
	        setTimeout(checkVal, 100);
	      }
	    }
	    setTimeout(checkVal, 100);
	  },
	  test_compare: function test_compare(assert) {
	    assert.expect(EXPECTED);
	    var HASH = '$2a$04$TnjywYklQbbZjdjBgBoA4e9G7RJt9blgMgsCvUvus4Iv4TENB5nHy';
	    var n = 0;
	    for (var i = 0; i < EXPECTED; i++) {
	      bcrypt.compare('test', HASH, function (err, match) {
	        assert.equal(true, match, "No match.");
	        n++;
	      });
	    }
	
	    function checkVal() {
	      if (n == EXPECTED) {
	        assert.done();
	      } else {
	        setTimeout(checkVal, 100);
	      }
	    }
	    setTimeout(checkVal, 100);
	  },
	  test_hash_and_compare: function test_hash_and_compare(assert) {
	    assert.expect((EXPECTED - 1) * 3);
	    var salt = bcrypt.genSaltSync(4),
	        idx = 0,
	        good_done = false,
	        bad_done = false;
	
	    function next() {
	      return test('secret' + Math.random());
	    }
	
	    function test(password) {
	      idx += 1;
	      return bcrypt.hash(password, salt, function (err, hash) {
	        if (err) throw err;
	        //console.log('\nbcrypt iter ' + idx);
	
	        assert.ok(hash);
	
	        bcrypt.compare(password, hash, function (err, res) {
	          //if (err) throw err;
	          assert.ok(res);
	          if (idx >= EXPECTED - 1) {
	            good_done = true;
	          }
	        });
	
	        bcrypt.compare('bad' + password, hash, function (err, res) {
	          //if (err) throw err;
	          assert.ok(!res);
	          if (idx >= EXPECTED - 1) {
	            bad_done = true;
	          }
	        });
	
	        if (idx < EXPECTED - 1) {
	          next();
	        } else {
	          var checkDone = function checkDone() {
	            if (idx >= EXPECTED - 1 && good_done && bad_done) {
	              assert.done();
	            } else {
	              setTimeout(checkDone, 100);
	            }
	          };
	
	          setTimeout(checkDone, 100);
	        }
	      });
	    }
	
	    next();
	  }
	};

/***/ }),
/* 644 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
	
	var bcrypt = __webpack_require__(268);
	
	module.exports = _defineProperty({
	    test_salt_length: function test_salt_length(assert) {
	        var salt = bcrypt.genSaltSync(10);
	        assert.equals(29, salt.length, "Salt isn't the correct length.");
	        var split_salt = salt.split('$');
	        assert.ok(split_salt[1], '2a');
	        assert.ok(split_salt[2], '10');
	        assert.done();
	    },
	    test_salt_no_params: function test_salt_no_params(assert) {
	        // same as test_verify_salt except using default rounds of 10
	        var salt = bcrypt.genSaltSync();
	        var split_salt = salt.split('$');
	        assert.ok(split_salt[1], '2a');
	        assert.ok(split_salt[2], '10');
	        assert.done();
	    },
	    test_salt_rounds_is_string_number: function test_salt_rounds_is_string_number(assert) {
	        assert.throws(function () {
	            bcrypt.genSaltSync('10');
	        }, "Should throw an Error. No params.");
	        assert.done();
	    },
	    test_salt_rounds_is_NaN: function test_salt_rounds_is_NaN(assert) {
	        assert.throws(function () {
	            bcrypt.genSaltSync('b');
	        }, "Should throw an Error. gen_salt requires rounds to be a number.");
	        assert.done();
	    },
	    test_hash: function test_hash(assert) {
	        assert.ok(bcrypt.hashSync('password', bcrypt.genSaltSync(10)), "Shouldn't throw an Error.");
	        assert.done();
	    },
	    test_hash_rounds: function test_hash_rounds(assert) {
	        var hash = bcrypt.hashSync('password', 8);
	        assert.equals(bcrypt.getRounds(hash), 8, "Number of rounds should equal 8.");
	        assert.done();
	    },
	    test_hash_empty_string: function test_hash_empty_string(assert) {
	        assert.ok(bcrypt.hashSync('', bcrypt.genSaltSync(10)), "Shouldn't throw an Error.");
	        assert.throws(function () {
	            bcrypt.hashSync('password', '');
	        }, "Should have thrown an Error related to the salt.");
	        assert.throws(function () {
	            bcrypt.hashSync('', '');
	        }, "Should have thrown an Error related to the salt.");
	        assert.done();
	    },
	    test_hash_pw_no_params: function test_hash_pw_no_params(assert) {
	        assert.throws(function () {
	            bcrypt.hashSync();
	        }, "Should throw an Error. No Params.");
	        assert.done();
	    },
	    test_hash_pw_one_param: function test_hash_pw_one_param(assert) {
	        assert.throws(function () {
	            bcrypt.hashSync('password');
	        }, "Should throw an Error. No salt.");
	        assert.done();
	    },
	    test_hash_pw_not_hash_str: function test_hash_pw_not_hash_str(assert) {
	        assert.throws(function () {
	            bcrypt.hashSync('password', {});
	        }, "Should throw an Error. hash should be a string or number.");
	        assert.done();
	    },
	    test_hash_salt_validity: function test_hash_salt_validity(assert) {
	        assert.expect(2);
	        assert.ok(bcrypt.hashSync('password', '$2a$10$somesaltyvaluertsetrse'));
	        assert.throws(function () {
	            bcrypt.hashSync('password', 'some$value');
	        });
	        assert.done();
	    },
	    test_verify_salt: function test_verify_salt(assert) {
	        var salt = bcrypt.genSaltSync(10);
	        var split_salt = salt.split('$');
	        assert.ok(split_salt[1], '2a');
	        assert.ok(split_salt[2], '10');
	        assert.done();
	    },
	    test_verify_salt_min_rounds: function test_verify_salt_min_rounds(assert) {
	        var salt = bcrypt.genSaltSync(1);
	        var split_salt = salt.split('$');
	        assert.ok(split_salt[1], '2a');
	        assert.ok(split_salt[2], '4');
	        assert.done();
	    },
	    test_verify_salt_max_rounds: function test_verify_salt_max_rounds(assert) {
	        var salt = bcrypt.genSaltSync(100);
	        var split_salt = salt.split('$');
	        assert.ok(split_salt[1], '2a');
	        assert.ok(split_salt[2], '31');
	        assert.done();
	    },
	    test_hash_compare: function test_hash_compare(assert) {
	        var salt = bcrypt.genSaltSync(10);
	        assert.equals(29, salt.length, "Salt isn't the correct length.");
	        var hash = bcrypt.hashSync("test", salt);
	        assert.ok(bcrypt.compareSync("test", hash), "These hashes should be equal.");
	        assert.ok(!bcrypt.compareSync("blah", hash), "These hashes should not be equal.");
	        assert.done();
	    },
	    test_hash_compare_empty_strings: function test_hash_compare_empty_strings(assert) {
	        assert.ok(!bcrypt.compareSync("", "password"), "These hashes should not be equal.");
	        assert.ok(!bcrypt.compareSync("", ""), "These hashes should not be equal.");
	        assert.ok(!bcrypt.compareSync("password", ""), "These hashes should not be equal.");
	        assert.done();
	    },
	    test_hash_compare_invalid_strings: function test_hash_compare_invalid_strings(assert) {
	        var fullString = 'envy1362987212538';
	        var hash = '$2a$10$XOPbrlUPQdwdJUpSrIF6X.LbE14qsMmKGhM1A8W9iqaG3vv1BD7WC';
	        var wut = ':';
	        bcrypt.compareSync(fullString, hash, function (err, res) {
	            assert.ok(res);
	        });
	        bcrypt.compareSync(fullString, wut, function (err, res) {
	            assert.ok(!res);
	        });
	        assert.done();
	    },
	    test_getRounds: function test_getRounds(assert) {
	        var hash = bcrypt.hashSync("test", bcrypt.genSaltSync(9));
	        assert.equals(9, bcrypt.getRounds(hash), "getRounds can't extract rounds");
	        assert.done();
	    }
	}, 'test_getRounds', function test_getRounds(assert) {
	    var hash = bcrypt.hashSync("test", bcrypt.genSaltSync(9));
	    assert.equals(9, bcrypt.getRounds(hash), "getRounds can't extract rounds");
	    assert.throws(function () {
	        bcrypt.getRounds('');
	    }, "Must pass a valid hash to getRounds");
	    assert.done();
	});

/***/ }),
/* 645 */,
/* 646 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	/**
	 * Module dependencies.
	 */
	
	var domToReact = __webpack_require__(647);
	var htmlToDOM = __webpack_require__(651);
	
	// decode HTML entities by default for `htmlparser2`
	var domParserOptions = { decodeEntities: true };
	
	/**
	 * Convert HTML string to React elements.
	 *
	 * @param  {String}   html              - The HTML string.
	 * @param  {Object}   [options]         - The additional options.
	 * @param  {Function} [options.replace] - The replace method.
	 * @return {ReactElement|Array}
	 */
	function HTMLReactParser(html, options) {
	  if (typeof html !== 'string') {
	    throw new TypeError('First argument must be a string');
	  }
	  return domToReact(htmlToDOM(html, domParserOptions), options);
	}
	
	/**
	 * Export HTML to React parser.
	 */
	module.exports = HTMLReactParser;

/***/ }),
/* 647 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	/**
	 * Module dependencies.
	 */
	
	var React = __webpack_require__(1);
	var attributesToProps = __webpack_require__(648);
	
	/**
	 * Convert DOM nodes to React elements.
	 *
	 * @param  {Array}    nodes             - The DOM nodes.
	 * @param  {Object}   [options]         - The additional options.
	 * @param  {Function} [options.replace] - The replace method.
	 * @return {ReactElement|Array}
	 */
	function domToReact(nodes, options) {
	    options = options || {};
	    var result = [];
	    var node;
	    var isReplacePresent = typeof options.replace === 'function';
	    var replacement;
	    var props;
	    var children;
	
	    for (var i = 0, len = nodes.length; i < len; i++) {
	        node = nodes[i];
	
	        // replace with custom React element (if applicable)
	        if (isReplacePresent) {
	            replacement = options.replace(node);
	
	            if (React.isValidElement(replacement)) {
	                // specify a "key" prop if element has siblings
	                // https://fb.me/react-warning-keys
	                if (len > 1) {
	                    replacement = React.cloneElement(replacement, { key: i });
	                }
	                result.push(replacement);
	                continue;
	            }
	        }
	
	        if (node.type === 'text') {
	            result.push(node.data);
	            continue;
	        }
	
	        // update values
	        props = attributesToProps(node.attribs);
	        children = null;
	
	        // node type for <script> is "script"
	        // node type for <style> is "style"
	        if (node.type === 'script' || node.type === 'style') {
	            // prevent text in <script> or <style> from being escaped
	            // https://facebook.github.io/react/tips/dangerously-set-inner-html.html
	            if (node.children[0]) {
	                props.dangerouslySetInnerHTML = {
	                    __html: node.children[0].data
	                };
	            }
	        } else if (node.type === 'tag') {
	            // setting textarea value in children is an antipattern in React
	            // https://facebook.github.io/react/docs/forms.html#why-textarea-value
	            if (node.name === 'textarea' && node.children[0]) {
	                props.defaultValue = node.children[0].data;
	
	                // continue recursion of creating React elements (if applicable)
	            } else if (node.children && node.children.length) {
	                children = domToReact(node.children, options);
	            }
	
	            // skip all other cases (e.g., comment)
	        } else {
	            continue;
	        }
	
	        // specify a "key" prop if element has siblings
	        // https://fb.me/react-warning-keys
	        if (len > 1) {
	            props.key = i;
	        }
	
	        result.push(React.createElement(node.name, props, children));
	    }
	
	    if (result.length === 1) {
	        return result[0];
	    } else {
	        return result;
	    }
	}
	
	/**
	 * Export DOM to React parser.
	 */
	module.exports = domToReact;

/***/ }),
/* 648 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	/**
	 * Module dependencies.
	 */
	
	var utilities = __webpack_require__(649);
	var propertyConfig = __webpack_require__(650);
	var config = propertyConfig.config;
	var isCustomAttribute = propertyConfig.HTMLDOMPropertyConfig.isCustomAttribute;
	
	/**
	 * Make attributes compatible with React props.
	 *
	 * @param  {Object} attributes - The attributes.
	 * @return {Object}            - The props.
	 */
	function attributesToProps(attributes) {
	    attributes = attributes || {};
	    var props = {};
	    var propertyName;
	    var propertyValue;
	    var reactProperty;
	
	    for (propertyName in attributes) {
	        propertyValue = attributes[propertyName];
	
	        // custom attributes (`data-` and `aria-`)
	        if (isCustomAttribute(propertyName)) {
	            props[propertyName] = propertyValue;
	            continue;
	        }
	
	        // make HTML DOM attribute/property consistent with React attribute/property
	        reactProperty = config.html[propertyName.toLowerCase()];
	        if (reactProperty) {
	            props[reactProperty] = propertyValue;
	            continue;
	        }
	
	        // make SVG DOM attribute/property consistent with React attribute/property
	        reactProperty = config.svg[propertyName];
	        if (reactProperty) {
	            props[reactProperty] = propertyValue;
	        }
	    }
	
	    // convert inline style to object
	    if (attributes.style) {
	        props.style = cssToJs(attributes.style);
	    }
	
	    return props;
	}
	
	/**
	 * Convert CSS style string to JS style object.
	 *
	 * @param  {String} style - The CSS style.
	 * @return {Object}       - The JS style object.
	 */
	function cssToJs(style) {
	    if (typeof style !== 'string') {
	        throw new Error('`cssToJs`: first argument must be a string. ');
	    }
	
	    var result = {};
	    // e.g., `color: #f00`
	    var declarations = style.split(';');
	    // css property itemized as key and value
	    var properties;
	    var j;
	    var propertiesLen;
	
	    for (var i = 0, declarationsLen = declarations.length; i < declarationsLen; i++) {
	        properties = declarations[i].trim().split(':');
	
	        // skip if not a css property
	        if (properties.length !== 2) {
	            continue;
	        }
	
	        // css property name
	        properties[0] = properties[0].trim();
	        // css property value
	        properties[1] = properties[1].trim();
	
	        if (properties[0] && properties[1]) {
	            for (j = 0, propertiesLen = properties.length; j < propertiesLen; j++) {
	                result[utilities.camelCase(properties[0])] = properties[1];
	            }
	        }
	    }
	
	    return result;
	}
	
	/**
	 * Export attributes to props helper.
	 */
	module.exports = attributesToProps;

/***/ }),
/* 649 */
/***/ (function(module, exports) {

	'use strict';
	
	/**
	 * Convert a string to camel case.
	 *
	 * @param  {String} string - The string.
	 * @return {String}
	 */
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
	
	function camelCase(string) {
	    if (typeof string !== 'string') {
	        throw new TypeError('First argument must be a string');
	    }
	
	    // hyphen found after first character
	    if (string.indexOf('-') > 0) {
	        var strings = string.toLowerCase().split('-');
	
	        // capitalize starting from the second string item
	        for (var i = 1, len = strings.length; i < len; i++) {
	            strings[i] = strings[i].charAt(0).toUpperCase() + strings[i].slice(1);
	        }
	
	        return strings.join('');
	    }
	
	    return string;
	}
	
	/**
	 * Swap key with value in an object.
	 *
	 * @param  {Object}   obj        - The object.
	 * @param  {Function} [override] - The override method.
	 * @return {Object}              - The inverted object.
	 */
	function invertObject(obj, override) {
	    if ((typeof obj === 'undefined' ? 'undefined' : _typeof(obj)) !== 'object' || !obj) {
	        // null is an object
	        throw new TypeError('First argument must be an object');
	    }
	
	    var key;
	    var value;
	    var isOverridePresent = typeof override === 'function';
	    var overrides = {};
	    var result = {};
	
	    for (key in obj) {
	        value = obj[key];
	
	        if (isOverridePresent) {
	            overrides = override(key, value);
	            if (overrides && overrides.length === 2) {
	                result[overrides[0]] = overrides[1];
	                continue;
	            }
	        }
	
	        if (typeof value === 'string') {
	            result[value] = key;
	        }
	    }
	
	    return result;
	}
	
	/**
	 * Export utilties.
	 */
	module.exports = {
	    camelCase: camelCase,
	    invertObject: invertObject
	};

/***/ }),
/* 650 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	/**
	 * Module dependencies.
	 */
	
	var utilities = __webpack_require__(649);
	
	// HTML and SVG DOM Property Configs
	var HTMLDOMPropertyConfig = __webpack_require__(82);
	var SVGDOMPropertyConfig = __webpack_require__(157);
	
	var config = {
	    html: {},
	    svg: {}
	};
	
	var propertyName;
	
	/**
	 * HTML DOM property config.
	 */
	
	// first map out the HTML DOM attribute names
	// e.g., { className: 'class' } => { 'class': 'className' }
	// https://github.com/facebook/react/blob/master/src/renderers/dom/shared/HTMLDOMPropertyConfig.js#L204
	config.html = utilities.invertObject(HTMLDOMPropertyConfig.DOMAttributeNames);
	
	// then map out the rest of the HTML DOM properties
	// e.g., { charSet: 0 } => { charset: 'charSet' }
	// https://github.com/facebook/react/blob/master/src/renderers/dom/shared/HTMLDOMPropertyConfig.js#L28
	for (propertyName in HTMLDOMPropertyConfig.Properties) {
	    // lowercase to make matching property names easier
	    config.html[propertyName.toLowerCase()] = propertyName;
	}
	
	/**
	 * SVG DOM property config.
	 */
	
	// first map out the SVG DOM attribute names
	// e.g., { fontSize: 'font-size' } => { 'font-size': 'fontSize' }
	// https://github.com/facebook/react/blob/master/src/renderers/dom/shared/SVGDOMPropertyConfig.js#L36
	config.svg = utilities.invertObject(SVGDOMPropertyConfig.DOMAttributeNames);
	
	// then map out the rest of the SVG DOM properties
	// e.g., { preserveAlpha: 0 } => { preserveAlpha: 'preserveAlpha' }
	// https://github.com/facebook/react/blob/master/src/renderers/dom/shared/HTMLDOMPropertyConfig.js#L28
	for (propertyName in SVGDOMPropertyConfig.Properties) {
	    // do not lowercase as some svg properties are camel cased
	    config.html[propertyName] = propertyName;
	}
	
	/**
	 * Export React property configs.
	 */
	module.exports = {
	    config: config,
	    HTMLDOMPropertyConfig: HTMLDOMPropertyConfig,
	    SVGDOMPropertyConfig: SVGDOMPropertyConfig
	};

/***/ }),
/* 651 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	/**
	 * Module dependencies.
	 */
	
	var domparser = __webpack_require__(652);
	var utilities = __webpack_require__(653);
	var formatDOM = utilities.formatDOM;
	
	/**
	 * Constants.
	 */
	var DIRECTIVE_REGEX = /<(![a-zA-Z\s]+)>/; // e.g., <!doctype html>
	
	/**
	 * Parses HTML and reformats DOM nodes output.
	 *
	 * @param  {String} html - The HTML string.
	 * @return {Array}       - The formatted DOM nodes.
	 */
	module.exports = function parseDOM(html) {
	  if (typeof html !== 'string') {
	    throw new TypeError('First argument must be a string.');
	  }
	  if (!html) return [];
	
	  // directive found
	  var match = html.match(DIRECTIVE_REGEX);
	  var directive;
	  if (match && match[1]) {
	    directive = match[1];
	  }
	
	  return formatDOM(domparser(html), null, directive);
	};

/***/ }),
/* 652 */
/***/ (function(module, exports) {

	'use strict';
	
	/**
	 * Constants.
	 */
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
	
	var HTML_TAG_NAME = 'html';
	var BODY_TAG_NAME = 'body';
	var HEAD_TAG_NAME = 'head';
	var FIRST_TAG_REGEX = /<([a-zA-Z]+[0-9]?)/; // e.g., <h1>
	var HEAD_REGEX = /<head[\s\S]*>[\s\S]*<\/head>/i;
	var BODY_REGEX = /<body[\s\S]*>[\s\S]*<\/body>/i;
	
	/**
	 * DOMParser (performance: slow).
	 *
	 * https://developer.mozilla.org/docs/Web/API/DOMParser#Parsing_an_SVG_or_HTML_document
	 */
	var parseFromString;
	if (typeof window.DOMParser === 'function') {
	    var domParser = new window.DOMParser();
	    var MIME_TYPE = 'text/' + HTML_TAG_NAME;
	
	    /**
	     * Creates an HTML document using `DOMParser.parseFromString`.
	     *
	     * @param  {String} html      - The HTML string.
	     * @param  {String} [tagName] - The element to render the HTML.
	     * @return {HTMLDocument}
	     */
	    parseFromString = function domStringParser(html, tagName) {
	        if (tagName) {
	            html = ['<', tagName, '>', html, '</', tagName, '>'].join('');
	        }
	        return domParser.parseFromString(html, MIME_TYPE);
	    };
	}
	
	/**
	 * DOMImplementation (performance: fair).
	 *
	 * https://developer.mozilla.org/docs/Web/API/DOMImplementation/createHTMLDocument
	 */
	var parseFromDocument;
	if (_typeof(document.implementation) === 'object') {
	    // title parameter is required in IE
	    var doc = document.implementation.createHTMLDocument('title');
	    // remove the title
	    doc.documentElement.innerHTML = '';
	
	    /**
	     * Use HTML document created by `document.implementation.createHTMLDocument`.
	     *
	     * @param  {String} html      - The HTML string.
	     * @param  {String} [tagName] - The element to render the HTML.
	     * @return {HTMLDocument}
	     */
	    parseFromDocument = function createHTMLDocument(html, tagName) {
	        if (tagName) {
	            doc.documentElement.getElementsByTagName(tagName)[0].innerHTML = html;
	        } else {
	            doc.documentElement.innerHTML = html;
	        }
	        return doc;
	    };
	}
	
	/**
	 * Template (performance: fast).
	 *
	 * https://developer.mozilla.org/docs/Web/HTML/Element/template
	 */
	var parseFromTemplate;
	var template = document.createElement('template');
	if (template.content) {
	
	    /**
	     * Uses a template element (content fragment) to parse HTML.
	     *
	     * @param  {String} html - The HTML string.
	     * @return {NodeList}
	     */
	    parseFromTemplate = function templateParser(html) {
	        template.innerHTML = html;
	        return template.content.childNodes;
	    };
	}
	
	/** Fallback document parser. */
	var parseWithFallback = parseFromDocument || parseFromString;
	
	/**
	 * Parses HTML string to DOM nodes.
	 *
	 * @param  {String} html      - The HTML string.
	 * @param  {String} [tagName] - The tag name.
	 * @return {NodeList|Array}
	 */
	module.exports = function domparser(html) {
	    // try to match first tag
	    var tagName;
	    var match = html.match(FIRST_TAG_REGEX);
	    if (match && match[1]) {
	        tagName = match[1];
	    }
	
	    var doc;
	    var element;
	    var elements;
	
	    switch (tagName) {
	        case HTML_TAG_NAME:
	            if (parseFromString) {
	                doc = parseFromString(html);
	
	                // strip elements if not found
	                if (!HEAD_REGEX.test(html)) {
	                    element = doc.getElementsByTagName(HEAD_TAG_NAME)[0];
	                    element.parentNode.removeChild(element);
	                }
	
	                if (!BODY_REGEX.test(html)) {
	                    element = doc.getElementsByTagName(BODY_TAG_NAME)[0];
	                    element.parentNode.removeChild(element);
	                }
	
	                return doc.getElementsByTagName(HTML_TAG_NAME);
	            }
	            break;
	
	        case HEAD_TAG_NAME:
	            if (parseWithFallback) {
	                elements = parseWithFallback(html).getElementsByTagName(HEAD_TAG_NAME);
	
	                // account for possibility of sibling
	                if (BODY_REGEX.test(html)) {
	                    return elements[0].parentNode.childNodes;
	                }
	                return elements;
	            }
	            break;
	
	        case BODY_TAG_NAME:
	            if (parseWithFallback) {
	                elements = parseWithFallback(html).getElementsByTagName(BODY_TAG_NAME);
	
	                // account for possibility of sibling
	                if (HEAD_REGEX.test(html)) {
	                    return elements[0].parentNode.childNodes;
	                }
	                return elements;
	            }
	            break;
	
	        // low-level tag or text
	        default:
	            if (parseFromTemplate) return parseFromTemplate(html);
	            if (parseWithFallback) {
	                return parseWithFallback(html, BODY_TAG_NAME).getElementsByTagName(BODY_TAG_NAME)[0].childNodes;
	            }
	            break;
	    }
	
	    return [];
	};

/***/ }),
/* 653 */
/***/ (function(module, exports) {

	'use strict';
	
	/**
	 * Format DOM attributes to an associative array.
	 *
	 * @param  {NamedNodeMap} - The list of attributes.
	 * @return {Object}       - The object of attributes.
	 */
	
	function formatAttributes(attributes) {
	    var result = {};
	    var attribute;
	
	    // NamedNodeMap is array-like
	    for (var i = 0, len = attributes.length; i < len; i++) {
	        attribute = attributes[i];
	        result[attribute.name] = attribute.value;
	    }
	
	    return result;
	}
	
	/**
	 * Format the browser DOM nodes to mimic the output of `htmlparser2.parseDOM()`.
	 *
	 * @param  {NodeList} nodes        - The DOM nodes.
	 * @param  {Object}   [parentObj]  - The formatted parent node.
	 * @param  {String}   [directive]  - The directive.
	 * @return {Object}                - The formatted DOM object.
	 */
	function formatDOM(nodes, parentObj, directive) {
	    parentObj = parentObj || null;
	
	    var result = [];
	    var node;
	    var prevNode;
	    var nodeObj;
	
	    // NodeList is array-like
	    for (var i = 0, len = nodes.length; i < len; i++) {
	        node = nodes[i];
	        // reset
	        nodeObj = {
	            next: null,
	            prev: result[i - 1] || null,
	            parent: parentObj
	        };
	
	        // set the next node for the previous node (if applicable)
	        prevNode = result[i - 1];
	        if (prevNode) {
	            prevNode.next = nodeObj;
	        }
	
	        // set the node name if it's not "#text" or "#comment"
	        // e.g., "div"
	        if (node.nodeName.indexOf('#') !== 0) {
	            nodeObj.name = node.nodeName.toLowerCase();
	
	            // also, nodes of type "tag" have "attribs"
	            nodeObj.attribs = {}; // default
	            if (node.attributes && node.attributes.length) {
	                nodeObj.attribs = formatAttributes(node.attributes);
	            }
	        }
	
	        // set the node type
	        // e.g., "tag"
	        switch (node.nodeType) {
	            // 1 = element
	            case 1:
	                if (nodeObj.name === 'script' || nodeObj.name === 'style') {
	                    nodeObj.type = nodeObj.name;
	                } else {
	                    nodeObj.type = 'tag';
	                }
	                // recursively format the children
	                nodeObj.children = formatDOM(node.childNodes, nodeObj);
	                break;
	            // 2 = attribute
	            // 3 = text
	            case 3:
	                nodeObj.type = 'text';
	                nodeObj.data = node.nodeValue;
	                break;
	            // 8 = comment
	            case 8:
	                nodeObj.type = 'comment';
	                nodeObj.data = node.nodeValue;
	                break;
	            default:
	                break;
	        }
	
	        result.push(nodeObj);
	    }
	
	    if (directive) {
	        result.unshift({
	            name: directive.substring(0, directive.indexOf(' ')).toLowerCase(),
	            data: directive,
	            type: 'directive',
	            next: result[0] ? result[0] : null,
	            prev: null,
	            parent: parentObj
	        });
	
	        if (result[1]) {
	            result[1].prev = result[0];
	        }
	    }
	
	    return result;
	}
	
	/**
	 * Export utilities.
	 */
	module.exports = {
	    formatAttributes: formatAttributes,
	    formatDOM: formatDOM
	};

/***/ }),
/* 654 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _react = __webpack_require__(1);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _reactRedux = __webpack_require__(182);
	
	var _reactRouterDom = __webpack_require__(220);
	
	var _index = __webpack_require__(259);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	var Login = function (_React$Component) {
	  _inherits(Login, _React$Component);
	
	  function Login(props) {
	    _classCallCheck(this, Login);
	
	    return _possibleConstructorReturn(this, (Login.__proto__ || Object.getPrototypeOf(Login)).call(this, props));
	  }
	
	  _createClass(Login, [{
	    key: 'render',
	    value: function render() {
	      var _this2 = this;
	
	      return _react2.default.createElement(
	        'div',
	        { className: 'login' },
	        _react2.default.createElement(
	          'div',
	          { className: 'logo' },
	          'signhere'
	        ),
	        _react2.default.createElement(
	          'form',
	          { className: 'loginForm', onSubmit: function onSubmit(e) {
	              LogInUser(e, _this2.props.dispatch);
	            } },
	          _react2.default.createElement(
	            'label',
	            null,
	            'Email:'
	          ),
	          _react2.default.createElement('br', null),
	          _react2.default.createElement('input', { type: 'text', name: 'email' }),
	          _react2.default.createElement('br', null),
	          _react2.default.createElement(
	            'label',
	            null,
	            'Password:'
	          ),
	          _react2.default.createElement('br', null),
	          _react2.default.createElement('input', { type: 'password', name: 'password' }),
	          _react2.default.createElement('br', null),
	          _react2.default.createElement('input', { type: 'submit', value: 'Log In' })
	        ),
	        _react2.default.createElement(
	          'div',
	          { className: 'newUserLink' },
	          _react2.default.createElement(
	            _reactRouterDom.HashRouter,
	            null,
	            _react2.default.createElement(
	              _reactRouterDom.Link,
	              { to: '/userRegistration' },
	              'New user? Sign up here!'
	            )
	          )
	        ),
	        _react2.default.createElement(
	          'div',
	          { className: 'note' },
	          'WORK IN PROGRESS: To use this demo, type in ID number as 1, and click on the login button. You can then go to the contracts page to view all contracts associated with this account or go the profile page to view user information.'
	        )
	      );
	    }
	  }]);
	
	  return Login;
	}(_react2.default.Component);
	
	function LogInUser(e, dispatch) {
	  e.preventDefault(e);
	  var userLogin = {
	    email: e.target.elements.email.value,
	    password: e.target.elements.password.value
	  };
	  (0, _index.loggedInUser)(userLogin, dispatch);
	}
	
	function mapStateToProps(state) {
	  console.log(state);
	  return {
	    dispatch: state.dispatch,
	    user: state.user
	  };
	}
	
	exports.default = (0, _reactRedux.connect)(mapStateToProps)(Login);

/***/ }),
/* 655 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _react = __webpack_require__(1);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _propTypes = __webpack_require__(184);
	
	var _propTypes2 = _interopRequireDefault(_propTypes);
	
	var _reactRedux = __webpack_require__(182);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	var UserProfile = function (_React$Component) {
	  _inherits(UserProfile, _React$Component);
	
	  function UserProfile(props) {
	    _classCallCheck(this, UserProfile);
	
	    return _possibleConstructorReturn(this, (UserProfile.__proto__ || Object.getPrototypeOf(UserProfile)).call(this, props));
	  }
	
	  _createClass(UserProfile, [{
	    key: 'render',
	    value: function render() {
	      var userDetails = this.props.userDetails;
	      return _react2.default.createElement(
	        'div',
	        { className: 'userProfile' },
	        _react2.default.createElement(
	          'h1',
	          null,
	          'My Profile'
	        ),
	        _react2.default.createElement('img', { className: 'userProfile-img', src: userDetails.user_image_url }),
	        _react2.default.createElement(
	          'h1',
	          null,
	          userDetails.fName,
	          ' ',
	          userDetails.lName
	        ),
	        _react2.default.createElement(
	          'ul',
	          null,
	          _react2.default.createElement(
	            'li',
	            null,
	            _react2.default.createElement(
	              'strong',
	              null,
	              'Organisation:'
	            ),
	            ' ',
	            userDetails.organisation
	          ),
	          _react2.default.createElement(
	            'li',
	            null,
	            _react2.default.createElement(
	              'strong',
	              null,
	              'Email:'
	            ),
	            ' ',
	            userDetails.email
	          ),
	          _react2.default.createElement(
	            'li',
	            null,
	            _react2.default.createElement(
	              'strong',
	              null,
	              'Phone:'
	            ),
	            ' ',
	            userDetails.phone
	          ),
	          _react2.default.createElement(
	            'li',
	            null,
	            _react2.default.createElement(
	              'strong',
	              null,
	              'Street Address:'
	            ),
	            ' ',
	            userDetails.street_address
	          ),
	          _react2.default.createElement(
	            'li',
	            null,
	            _react2.default.createElement(
	              'strong',
	              null,
	              'Suburb:'
	            ),
	            ' ',
	            userDetails.suburb
	          )
	        )
	      );
	    }
	  }]);
	
	  return UserProfile;
	}(_react2.default.Component);
	
	UserProfile.propTypes = {
	  userDetails: _propTypes2.default.object
	};
	
	function mapStateToProps(state) {
	  return {
	    userDetails: state.user
	  };
	}
	
	exports.default = (0, _reactRedux.connect)(mapStateToProps)(UserProfile);

/***/ }),
/* 656 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _react = __webpack_require__(1);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _propTypes = __webpack_require__(184);
	
	var _propTypes2 = _interopRequireDefault(_propTypes);
	
	var _reactRedux = __webpack_require__(182);
	
	var _reactRouterDom = __webpack_require__(220);
	
	var _index = __webpack_require__(259);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	var Parser = __webpack_require__(646);
	
	var Contract = function (_React$Component) {
	  _inherits(Contract, _React$Component);
	
	  function Contract(props) {
	    _classCallCheck(this, Contract);
	
	    return _possibleConstructorReturn(this, (Contract.__proto__ || Object.getPrototypeOf(Contract)).call(this, props));
	  }
	
	  _createClass(Contract, [{
	    key: 'componentDidMount',
	    value: function componentDidMount() {
	      var wrapper1 = document.getElementById("signature-pad"),
	          canvas1 = wrapper1.querySelector("canvas"),
	          signaturePad;
	
	      resizeCanvas(canvas1);
	      signaturePad = new SignaturePad(canvas1);
	
	      function resizeCanvas(canvas) {
	        var ratio = window.devicePixelRatio || 1;
	        canvas.width = canvas.offsetWidth * ratio;
	        canvas.height = canvas.offsetHeight * ratio;
	        canvas.getContext("2d").scale(ratio, ratio);
	      }
	
	      this.clearSignature = function clear() {
	        signaturePad.clear();
	      };
	
	      this.saveSignature = function save() {
	        var dataUrl = signaturePad.toDataURL();
	        var contractId = this.props.contractDetails.id;
	        var userId = this.props.id;
	        var dispatch = this.props.dispatch;
	        var signatureData = {
	          signature_url: dataUrl,
	          id: userId
	        };
	        (0, _index.updateUserContract)(testCallback, contractId, signatureData, dispatch);
	      };
	
	      function testCallback(err, status) {
	        if (err) {
	          console.log(err);
	        } else {
	          console.log(status);
	        }
	      }
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	      var _this2 = this;
	
	      var contractDetails = this.props.contractDetails;
	      return _react2.default.createElement(
	        'div',
	        { className: 'contract' },
	        _react2.default.createElement(
	          'h1',
	          null,
	          contractDetails.contract_header
	        ),
	        Parser(contractDetails.contract_desc),
	        contractDetails.signature_url == '' || contractDetails.signature_url == null ? _react2.default.createElement(
	          'div',
	          { id: 'signature-pad', className: 'm-signature-pad' },
	          _react2.default.createElement(
	            'div',
	            { className: 'm-signature-pad--body' },
	            _react2.default.createElement('canvas', null)
	          ),
	          _react2.default.createElement(
	            'button',
	            { className: 'signature-pad-btn', onClick: function onClick() {
	                return _this2.clearSignature();
	              } },
	            'Clear'
	          ),
	          _react2.default.createElement(
	            _reactRouterDom.HashRouter,
	            null,
	            _react2.default.createElement(
	              _reactRouterDom.Link,
	              { to: '/myContracts' },
	              _react2.default.createElement(
	                'button',
	                { className: 'signature-pad-btn', onClick: function onClick() {
	                    return _this2.saveSignature(_this2.props.id);
	                  } },
	                'Save'
	              )
	            )
	          )
	        ) : _react2.default.createElement('img', { src: contractDetails.signature_url })
	      );
	    }
	  }]);
	
	  return Contract;
	}(_react2.default.Component);
	
	Contract.propTypes = {
	  contractDetails: _propTypes2.default.object,
	  id: _propTypes2.default.number
	};
	
	function mapStateToProps(state) {
	  return {
	    contractDetails: state.contract[0].singleContractDetails,
	    id: state.user.id,
	    dispatch: state.dispatch
	  };
	}
	
	exports.default = (0, _reactRedux.connect)(mapStateToProps)(Contract);

/***/ }),
/* 657 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _react = __webpack_require__(1);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _propTypes = __webpack_require__(184);
	
	var _propTypes2 = _interopRequireDefault(_propTypes);
	
	var _reactRedux = __webpack_require__(182);
	
	var _reactRouterDom = __webpack_require__(220);
	
	var _reactQuill = __webpack_require__(658);
	
	var _reactQuill2 = _interopRequireDefault(_reactQuill);
	
	var _index = __webpack_require__(259);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	var WriteContract = function (_React$Component) {
	  _inherits(WriteContract, _React$Component);
	
	  function WriteContract(props) {
	    _classCallCheck(this, WriteContract);
	
	    var _this = _possibleConstructorReturn(this, (WriteContract.__proto__ || Object.getPrototypeOf(WriteContract)).call(this, props));
	
	    _this.state = { text: '' };
	    _this.handleChange = _this.handleChange.bind(_this);
	    return _this;
	  }
	
	  _createClass(WriteContract, [{
	    key: 'handleChange',
	    value: function handleChange(value) {
	      this.setState({ text: value });
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	      var _this2 = this;
	
	      return _react2.default.createElement(
	        'div',
	        { className: 'WriteContract' },
	        _react2.default.createElement(
	          'form',
	          { method: 'post', className: 'newContractForm', onSubmit: function onSubmit(e) {
	              submitNewContract(e, _this2.props.dispatch, _this2.props.userId, _this2.state);
	            } },
	          _react2.default.createElement(
	            'h3',
	            null,
	            'Write a new contract'
	          ),
	          _react2.default.createElement(
	            'label',
	            null,
	            'Signee ID: '
	          ),
	          _react2.default.createElement('br', null),
	          _react2.default.createElement('input', { className: 'writeContract-id', type: 'text', name: 'signee_id' }),
	          _react2.default.createElement('br', null),
	          _react2.default.createElement(
	            'label',
	            null,
	            'Contract Title: '
	          ),
	          _react2.default.createElement('br', null),
	          _react2.default.createElement('input', { className: 'writeContract-title', type: 'text', name: 'contract_header' }),
	          _react2.default.createElement('br', null),
	          _react2.default.createElement(_reactQuill2.default, { value: this.state.text,
	            onChange: this.handleChange }),
	          _react2.default.createElement(
	            'button',
	            { type: 'submit', className: 'writeContract-submit', value: 'Submit' },
	            'Submit'
	          )
	        )
	      );
	    }
	  }]);
	
	  return WriteContract;
	}(_react2.default.Component);
	
	function submitNewContract(e, dispatch, userId, state) {
	  e.preventDefault(e);
	  var writeContractForm = {
	    id: userId,
	    signee_id: e.target.elements.signee_id.value,
	    contract_header: e.target.elements.contract_header.value,
	    contract_desc: state.text
	  };
	  (0, _index.writeNewContract)(writeContractForm, dispatch, userId, testCallback);
	}
	
	function testCallback(err, status) {
	  if (err) {
	    console.log(err);
	  } else {
	    console.log(status);
	  }
	}
	
	WriteContract.propTypes = {
	  userId: _propTypes2.default.number
	};
	
	function mapStateToProps(state) {
	  return {
	    userId: state.user.id,
	    dispatch: state.dispatch
	  };
	}
	
	exports.default = (0, _reactRedux.connect)(mapStateToProps)(WriteContract);

/***/ }),
/* 658 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	/*
	React-Quill v1.0.0
	https://github.com/zenoamaro/react-quill
	*/
	var Quill = __webpack_require__(659);
	
	module.exports = __webpack_require__(660);
	module.exports.Quill = Quill;
	module.exports.Mixin = __webpack_require__(661);
	module.exports.Toolbar = __webpack_require__(784);

/***/ }),
/* 659 */
/***/ (function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/* WEBPACK VAR INJECTION */(function(Buffer, module) {'use strict';
	
	var _typeof2 = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
	
	/*!
	 * Quill Editor v1.3.0
	 * https://quilljs.com/
	 * Copyright (c) 2014, Jason Chen
	 * Copyright (c) 2013, salesforce.com
	 */
	(function webpackUniversalModuleDefinition(root, factory) {
	  if (( false ? 'undefined' : _typeof2(exports)) === 'object' && ( false ? 'undefined' : _typeof2(module)) === 'object') module.exports = factory();else if (true) !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));else if ((typeof exports === 'undefined' ? 'undefined' : _typeof2(exports)) === 'object') exports["Quill"] = factory();else root["Quill"] = factory();
	})(undefined, function () {
	  return (/******/function (modules) {
	      // webpackBootstrap
	      /******/ // The module cache
	      /******/var installedModules = {};
	      /******/
	      /******/ // The require function
	      /******/function __webpack_require__(moduleId) {
	        /******/
	        /******/ // Check if module is in cache
	        /******/if (installedModules[moduleId]) {
	          /******/return installedModules[moduleId].exports;
	          /******/
	        }
	        /******/ // Create a new module (and put it into the cache)
	        /******/var module = installedModules[moduleId] = {
	          /******/i: moduleId,
	          /******/l: false,
	          /******/exports: {}
	          /******/ };
	        /******/
	        /******/ // Execute the module function
	        /******/modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
	        /******/
	        /******/ // Flag the module as loaded
	        /******/module.l = true;
	        /******/
	        /******/ // Return the exports of the module
	        /******/return module.exports;
	        /******/
	      }
	      /******/
	      /******/
	      /******/ // expose the modules object (__webpack_modules__)
	      /******/__webpack_require__.m = modules;
	      /******/
	      /******/ // expose the module cache
	      /******/__webpack_require__.c = installedModules;
	      /******/
	      /******/ // identity function for calling harmony imports with the correct context
	      /******/__webpack_require__.i = function (value) {
	        return value;
	      };
	      /******/
	      /******/ // define getter function for harmony exports
	      /******/__webpack_require__.d = function (exports, name, getter) {
	        /******/if (!__webpack_require__.o(exports, name)) {
	          /******/Object.defineProperty(exports, name, {
	            /******/configurable: false,
	            /******/enumerable: true,
	            /******/get: getter
	            /******/ });
	          /******/
	        }
	        /******/
	      };
	      /******/
	      /******/ // getDefaultExport function for compatibility with non-harmony modules
	      /******/__webpack_require__.n = function (module) {
	        /******/var getter = module && module.__esModule ?
	        /******/function getDefault() {
	          return module['default'];
	        } :
	        /******/function getModuleExports() {
	          return module;
	        };
	        /******/__webpack_require__.d(getter, 'a', getter);
	        /******/return getter;
	        /******/
	      };
	      /******/
	      /******/ // Object.prototype.hasOwnProperty.call
	      /******/__webpack_require__.o = function (object, property) {
	        return Object.prototype.hasOwnProperty.call(object, property);
	      };
	      /******/
	      /******/ // __webpack_public_path__
	      /******/__webpack_require__.p = "";
	      /******/
	      /******/ // Load entry module and return exports
	      /******/return __webpack_require__(__webpack_require__.s = 137);
	      /******/
	    }(
	    /************************************************************************/
	    /******/[
	    /* 0 */
	    /***/function (module, exports, __webpack_require__) {
	
	      "use strict";
	
	      Object.defineProperty(exports, "__esModule", { value: true });
	      var container_1 = __webpack_require__(21);
	      var format_1 = __webpack_require__(22);
	      var leaf_1 = __webpack_require__(23);
	      var scroll_1 = __webpack_require__(59);
	      var inline_1 = __webpack_require__(58);
	      var block_1 = __webpack_require__(56);
	      var embed_1 = __webpack_require__(57);
	      var text_1 = __webpack_require__(60);
	      var attributor_1 = __webpack_require__(13);
	      var class_1 = __webpack_require__(32);
	      var style_1 = __webpack_require__(34);
	      var store_1 = __webpack_require__(33);
	      var Registry = __webpack_require__(2);
	      var Parchment = {
	        Scope: Registry.Scope,
	        create: Registry.create,
	        find: Registry.find,
	        query: Registry.query,
	        register: Registry.register,
	        Container: container_1.default,
	        Format: format_1.default,
	        Leaf: leaf_1.default,
	        Embed: embed_1.default,
	        Scroll: scroll_1.default,
	        Block: block_1.default,
	        Inline: inline_1.default,
	        Text: text_1.default,
	        Attributor: {
	          Attribute: attributor_1.default,
	          Class: class_1.default,
	          Style: style_1.default,
	          Store: store_1.default
	        }
	      };
	      exports.default = Parchment;
	
	      /***/
	    },
	    /* 1 */
	    /***/function (module, exports, __webpack_require__) {
	
	      var diff = __webpack_require__(54);
	      var equal = __webpack_require__(12);
	      var extend = __webpack_require__(3);
	      var op = __webpack_require__(20);
	
	      var NULL_CHARACTER = String.fromCharCode(0); // Placeholder char for embed in diff()
	
	
	      var Delta = function Delta(ops) {
	        // Assume we are given a well formed ops
	        if (Array.isArray(ops)) {
	          this.ops = ops;
	        } else if (ops != null && Array.isArray(ops.ops)) {
	          this.ops = ops.ops;
	        } else {
	          this.ops = [];
	        }
	      };
	
	      Delta.prototype.insert = function (text, attributes) {
	        var newOp = {};
	        if (text.length === 0) return this;
	        newOp.insert = text;
	        if (attributes != null && (typeof attributes === 'undefined' ? 'undefined' : _typeof2(attributes)) === 'object' && Object.keys(attributes).length > 0) {
	          newOp.attributes = attributes;
	        }
	        return this.push(newOp);
	      };
	
	      Delta.prototype['delete'] = function (length) {
	        if (length <= 0) return this;
	        return this.push({ 'delete': length });
	      };
	
	      Delta.prototype.retain = function (length, attributes) {
	        if (length <= 0) return this;
	        var newOp = { retain: length };
	        if (attributes != null && (typeof attributes === 'undefined' ? 'undefined' : _typeof2(attributes)) === 'object' && Object.keys(attributes).length > 0) {
	          newOp.attributes = attributes;
	        }
	        return this.push(newOp);
	      };
	
	      Delta.prototype.push = function (newOp) {
	        var index = this.ops.length;
	        var lastOp = this.ops[index - 1];
	        newOp = extend(true, {}, newOp);
	        if ((typeof lastOp === 'undefined' ? 'undefined' : _typeof2(lastOp)) === 'object') {
	          if (typeof newOp['delete'] === 'number' && typeof lastOp['delete'] === 'number') {
	            this.ops[index - 1] = { 'delete': lastOp['delete'] + newOp['delete'] };
	            return this;
	          }
	          // Since it does not matter if we insert before or after deleting at the same index,
	          // always prefer to insert first
	          if (typeof lastOp['delete'] === 'number' && newOp.insert != null) {
	            index -= 1;
	            lastOp = this.ops[index - 1];
	            if ((typeof lastOp === 'undefined' ? 'undefined' : _typeof2(lastOp)) !== 'object') {
	              this.ops.unshift(newOp);
	              return this;
	            }
	          }
	          if (equal(newOp.attributes, lastOp.attributes)) {
	            if (typeof newOp.insert === 'string' && typeof lastOp.insert === 'string') {
	              this.ops[index - 1] = { insert: lastOp.insert + newOp.insert };
	              if (_typeof2(newOp.attributes) === 'object') this.ops[index - 1].attributes = newOp.attributes;
	              return this;
	            } else if (typeof newOp.retain === 'number' && typeof lastOp.retain === 'number') {
	              this.ops[index - 1] = { retain: lastOp.retain + newOp.retain };
	              if (_typeof2(newOp.attributes) === 'object') this.ops[index - 1].attributes = newOp.attributes;
	              return this;
	            }
	          }
	        }
	        if (index === this.ops.length) {
	          this.ops.push(newOp);
	        } else {
	          this.ops.splice(index, 0, newOp);
	        }
	        return this;
	      };
	
	      Delta.prototype.filter = function (predicate) {
	        return this.ops.filter(predicate);
	      };
	
	      Delta.prototype.forEach = function (predicate) {
	        this.ops.forEach(predicate);
	      };
	
	      Delta.prototype.map = function (predicate) {
	        return this.ops.map(predicate);
	      };
	
	      Delta.prototype.partition = function (predicate) {
	        var passed = [],
	            failed = [];
	        this.forEach(function (op) {
	          var target = predicate(op) ? passed : failed;
	          target.push(op);
	        });
	        return [passed, failed];
	      };
	
	      Delta.prototype.reduce = function (predicate, initial) {
	        return this.ops.reduce(predicate, initial);
	      };
	
	      Delta.prototype.chop = function () {
	        var lastOp = this.ops[this.ops.length - 1];
	        if (lastOp && lastOp.retain && !lastOp.attributes) {
	          this.ops.pop();
	        }
	        return this;
	      };
	
	      Delta.prototype.length = function () {
	        return this.reduce(function (length, elem) {
	          return length + op.length(elem);
	        }, 0);
	      };
	
	      Delta.prototype.slice = function (start, end) {
	        start = start || 0;
	        if (typeof end !== 'number') end = Infinity;
	        var ops = [];
	        var iter = op.iterator(this.ops);
	        var index = 0;
	        while (index < end && iter.hasNext()) {
	          var nextOp;
	          if (index < start) {
	            nextOp = iter.next(start - index);
	          } else {
	            nextOp = iter.next(end - index);
	            ops.push(nextOp);
	          }
	          index += op.length(nextOp);
	        }
	        return new Delta(ops);
	      };
	
	      Delta.prototype.compose = function (other) {
	        var thisIter = op.iterator(this.ops);
	        var otherIter = op.iterator(other.ops);
	        var delta = new Delta();
	        while (thisIter.hasNext() || otherIter.hasNext()) {
	          if (otherIter.peekType() === 'insert') {
	            delta.push(otherIter.next());
	          } else if (thisIter.peekType() === 'delete') {
	            delta.push(thisIter.next());
	          } else {
	            var length = Math.min(thisIter.peekLength(), otherIter.peekLength());
	            var thisOp = thisIter.next(length);
	            var otherOp = otherIter.next(length);
	            if (typeof otherOp.retain === 'number') {
	              var newOp = {};
	              if (typeof thisOp.retain === 'number') {
	                newOp.retain = length;
	              } else {
	                newOp.insert = thisOp.insert;
	              }
	              // Preserve null when composing with a retain, otherwise remove it for inserts
	              var attributes = op.attributes.compose(thisOp.attributes, otherOp.attributes, typeof thisOp.retain === 'number');
	              if (attributes) newOp.attributes = attributes;
	              delta.push(newOp);
	              // Other op should be delete, we could be an insert or retain
	              // Insert + delete cancels out
	            } else if (typeof otherOp['delete'] === 'number' && typeof thisOp.retain === 'number') {
	              delta.push(otherOp);
	            }
	          }
	        }
	        return delta.chop();
	      };
	
	      Delta.prototype.concat = function (other) {
	        var delta = new Delta(this.ops.slice());
	        if (other.ops.length > 0) {
	          delta.push(other.ops[0]);
	          delta.ops = delta.ops.concat(other.ops.slice(1));
	        }
	        return delta;
	      };
	
	      Delta.prototype.diff = function (other, index) {
	        if (this.ops === other.ops) {
	          return new Delta();
	        }
	        var strings = [this, other].map(function (delta) {
	          return delta.map(function (op) {
	            if (op.insert != null) {
	              return typeof op.insert === 'string' ? op.insert : NULL_CHARACTER;
	            }
	            var prep = delta === other ? 'on' : 'with';
	            throw new Error('diff() called ' + prep + ' non-document');
	          }).join('');
	        });
	        var delta = new Delta();
	        var diffResult = diff(strings[0], strings[1], index);
	        var thisIter = op.iterator(this.ops);
	        var otherIter = op.iterator(other.ops);
	        diffResult.forEach(function (component) {
	          var length = component[1].length;
	          while (length > 0) {
	            var opLength = 0;
	            switch (component[0]) {
	              case diff.INSERT:
	                opLength = Math.min(otherIter.peekLength(), length);
	                delta.push(otherIter.next(opLength));
	                break;
	              case diff.DELETE:
	                opLength = Math.min(length, thisIter.peekLength());
	                thisIter.next(opLength);
	                delta['delete'](opLength);
	                break;
	              case diff.EQUAL:
	                opLength = Math.min(thisIter.peekLength(), otherIter.peekLength(), length);
	                var thisOp = thisIter.next(opLength);
	                var otherOp = otherIter.next(opLength);
	                if (equal(thisOp.insert, otherOp.insert)) {
	                  delta.retain(opLength, op.attributes.diff(thisOp.attributes, otherOp.attributes));
	                } else {
	                  delta.push(otherOp)['delete'](opLength);
	                }
	                break;
	            }
	            length -= opLength;
	          }
	        });
	        return delta.chop();
	      };
	
	      Delta.prototype.eachLine = function (predicate, newline) {
	        newline = newline || '\n';
	        var iter = op.iterator(this.ops);
	        var line = new Delta();
	        var i = 0;
	        while (iter.hasNext()) {
	          if (iter.peekType() !== 'insert') return;
	          var thisOp = iter.peek();
	          var start = op.length(thisOp) - iter.peekLength();
	          var index = typeof thisOp.insert === 'string' ? thisOp.insert.indexOf(newline, start) - start : -1;
	          if (index < 0) {
	            line.push(iter.next());
	          } else if (index > 0) {
	            line.push(iter.next(index));
	          } else {
	            if (predicate(line, iter.next(1).attributes || {}, i) === false) {
	              return;
	            }
	            i += 1;
	            line = new Delta();
	          }
	        }
	        if (line.length() > 0) {
	          predicate(line, {}, i);
	        }
	      };
	
	      Delta.prototype.transform = function (other, priority) {
	        priority = !!priority;
	        if (typeof other === 'number') {
	          return this.transformPosition(other, priority);
	        }
	        var thisIter = op.iterator(this.ops);
	        var otherIter = op.iterator(other.ops);
	        var delta = new Delta();
	        while (thisIter.hasNext() || otherIter.hasNext()) {
	          if (thisIter.peekType() === 'insert' && (priority || otherIter.peekType() !== 'insert')) {
	            delta.retain(op.length(thisIter.next()));
	          } else if (otherIter.peekType() === 'insert') {
	            delta.push(otherIter.next());
	          } else {
	            var length = Math.min(thisIter.peekLength(), otherIter.peekLength());
	            var thisOp = thisIter.next(length);
	            var otherOp = otherIter.next(length);
	            if (thisOp['delete']) {
	              // Our delete either makes their delete redundant or removes their retain
	              continue;
	            } else if (otherOp['delete']) {
	              delta.push(otherOp);
	            } else {
	              // We retain either their retain or insert
	              delta.retain(length, op.attributes.transform(thisOp.attributes, otherOp.attributes, priority));
	            }
	          }
	        }
	        return delta.chop();
	      };
	
	      Delta.prototype.transformPosition = function (index, priority) {
	        priority = !!priority;
	        var thisIter = op.iterator(this.ops);
	        var offset = 0;
	        while (thisIter.hasNext() && offset <= index) {
	          var length = thisIter.peekLength();
	          var nextType = thisIter.peekType();
	          thisIter.next();
	          if (nextType === 'delete') {
	            index -= Math.min(length, index - offset);
	            continue;
	          } else if (nextType === 'insert' && (offset < index || !priority)) {
	            index += length;
	          }
	          offset += length;
	        }
	        return index;
	      };
	
	      module.exports = Delta;
	
	      /***/
	    },
	    /* 2 */
	    /***/function (module, exports, __webpack_require__) {
	
	      "use strict";
	
	      var __extends = this && this.__extends || function () {
	        var extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function (d, b) {
	          d.__proto__ = b;
	        } || function (d, b) {
	          for (var p in b) {
	            if (b.hasOwnProperty(p)) d[p] = b[p];
	          }
	        };
	        return function (d, b) {
	          extendStatics(d, b);
	          function __() {
	            this.constructor = d;
	          }
	          d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	        };
	      }();
	      Object.defineProperty(exports, "__esModule", { value: true });
	      var ParchmentError = function (_super) {
	        __extends(ParchmentError, _super);
	        function ParchmentError(message) {
	          var _this = this;
	          message = '[Parchment] ' + message;
	          _this = _super.call(this, message) || this;
	          _this.message = message;
	          _this.name = _this.constructor.name;
	          return _this;
	        }
	        return ParchmentError;
	      }(Error);
	      exports.ParchmentError = ParchmentError;
	      var attributes = {};
	      var classes = {};
	      var tags = {};
	      var types = {};
	      exports.DATA_KEY = '__blot';
	      var Scope;
	      (function (Scope) {
	        Scope[Scope["TYPE"] = 3] = "TYPE";
	        Scope[Scope["LEVEL"] = 12] = "LEVEL";
	        Scope[Scope["ATTRIBUTE"] = 13] = "ATTRIBUTE";
	        Scope[Scope["BLOT"] = 14] = "BLOT";
	        Scope[Scope["INLINE"] = 7] = "INLINE";
	        Scope[Scope["BLOCK"] = 11] = "BLOCK";
	        Scope[Scope["BLOCK_BLOT"] = 10] = "BLOCK_BLOT";
	        Scope[Scope["INLINE_BLOT"] = 6] = "INLINE_BLOT";
	        Scope[Scope["BLOCK_ATTRIBUTE"] = 9] = "BLOCK_ATTRIBUTE";
	        Scope[Scope["INLINE_ATTRIBUTE"] = 5] = "INLINE_ATTRIBUTE";
	        Scope[Scope["ANY"] = 15] = "ANY";
	      })(Scope = exports.Scope || (exports.Scope = {}));
	      ;
	      function create(input, value) {
	        var match = query(input);
	        if (match == null) {
	          throw new ParchmentError("Unable to create " + input + " blot");
	        }
	        var BlotClass = match;
	        var node = input instanceof Node || input['nodeType'] === Node.TEXT_NODE ? input : BlotClass.create(value);
	        return new BlotClass(node, value);
	      }
	      exports.create = create;
	      function find(node, bubble) {
	        if (bubble === void 0) {
	          bubble = false;
	        }
	        if (node == null) return null;
	        if (node[exports.DATA_KEY] != null) return node[exports.DATA_KEY].blot;
	        if (bubble) return find(node.parentNode, bubble);
	        return null;
	      }
	      exports.find = find;
	      function query(query, scope) {
	        if (scope === void 0) {
	          scope = Scope.ANY;
	        }
	        var match;
	        if (typeof query === 'string') {
	          match = types[query] || attributes[query];
	        } else if (query instanceof Text || query['nodeType'] === Node.TEXT_NODE) {
	          match = types['text'];
	        } else if (typeof query === 'number') {
	          if (query & Scope.LEVEL & Scope.BLOCK) {
	            match = types['block'];
	          } else if (query & Scope.LEVEL & Scope.INLINE) {
	            match = types['inline'];
	          }
	        } else if (query instanceof HTMLElement) {
	          var names = (query.getAttribute('class') || '').split(/\s+/);
	          for (var i in names) {
	            match = classes[names[i]];
	            if (match) break;
	          }
	          match = match || tags[query.tagName];
	        }
	        if (match == null) return null;
	        if (scope & Scope.LEVEL & match.scope && scope & Scope.TYPE & match.scope) return match;
	        return null;
	      }
	      exports.query = query;
	      function register() {
	        var Definitions = [];
	        for (var _i = 0; _i < arguments.length; _i++) {
	          Definitions[_i] = arguments[_i];
	        }
	        if (Definitions.length > 1) {
	          return Definitions.map(function (d) {
	            return register(d);
	          });
	        }
	        var Definition = Definitions[0];
	        if (typeof Definition.blotName !== 'string' && typeof Definition.attrName !== 'string') {
	          throw new ParchmentError('Invalid definition');
	        } else if (Definition.blotName === 'abstract') {
	          throw new ParchmentError('Cannot register abstract class');
	        }
	        types[Definition.blotName || Definition.attrName] = Definition;
	        if (typeof Definition.keyName === 'string') {
	          attributes[Definition.keyName] = Definition;
	        } else {
	          if (Definition.className != null) {
	            classes[Definition.className] = Definition;
	          }
	          if (Definition.tagName != null) {
	            if (Array.isArray(Definition.tagName)) {
	              Definition.tagName = Definition.tagName.map(function (tagName) {
	                return tagName.toUpperCase();
	              });
	            } else {
	              Definition.tagName = Definition.tagName.toUpperCase();
	            }
	            var tagNames = Array.isArray(Definition.tagName) ? Definition.tagName : [Definition.tagName];
	            tagNames.forEach(function (tag) {
	              if (tags[tag] == null || Definition.className == null) {
	                tags[tag] = Definition;
	              }
	            });
	          }
	        }
	        return Definition;
	      }
	      exports.register = register;
	
	      /***/
	    },
	    /* 3 */
	    /***/function (module, exports) {
	
	      'use strict';
	
	      var hasOwn = Object.prototype.hasOwnProperty;
	      var toStr = Object.prototype.toString;
	
	      var isArray = function isArray(arr) {
	        if (typeof Array.isArray === 'function') {
	          return Array.isArray(arr);
	        }
	
	        return toStr.call(arr) === '[object Array]';
	      };
	
	      var isPlainObject = function isPlainObject(obj) {
	        if (!obj || toStr.call(obj) !== '[object Object]') {
	          return false;
	        }
	
	        var hasOwnConstructor = hasOwn.call(obj, 'constructor');
	        var hasIsPrototypeOf = obj.constructor && obj.constructor.prototype && hasOwn.call(obj.constructor.prototype, 'isPrototypeOf');
	        // Not own constructor property must be Object
	        if (obj.constructor && !hasOwnConstructor && !hasIsPrototypeOf) {
	          return false;
	        }
	
	        // Own properties are enumerated firstly, so to speed up,
	        // if last one is own, then all properties are own.
	        var key;
	        for (key in obj) {/**/}
	
	        return typeof key === 'undefined' || hasOwn.call(obj, key);
	      };
	
	      module.exports = function extend() {
	        var options, name, src, copy, copyIsArray, clone;
	        var target = arguments[0];
	        var i = 1;
	        var length = arguments.length;
	        var deep = false;
	
	        // Handle a deep copy situation
	        if (typeof target === 'boolean') {
	          deep = target;
	          target = arguments[1] || {};
	          // skip the boolean and the target
	          i = 2;
	        }
	        if (target == null || (typeof target === 'undefined' ? 'undefined' : _typeof2(target)) !== 'object' && typeof target !== 'function') {
	          target = {};
	        }
	
	        for (; i < length; ++i) {
	          options = arguments[i];
	          // Only deal with non-null/undefined values
	          if (options != null) {
	            // Extend the base object
	            for (name in options) {
	              src = target[name];
	              copy = options[name];
	
	              // Prevent never-ending loop
	              if (target !== copy) {
	                // Recurse if we're merging plain objects or arrays
	                if (deep && copy && (isPlainObject(copy) || (copyIsArray = isArray(copy)))) {
	                  if (copyIsArray) {
	                    copyIsArray = false;
	                    clone = src && isArray(src) ? src : [];
	                  } else {
	                    clone = src && isPlainObject(src) ? src : {};
	                  }
	
	                  // Never move original objects, clone them
	                  target[name] = extend(deep, clone, copy);
	
	                  // Don't bring in undefined values
	                } else if (typeof copy !== 'undefined') {
	                  target[name] = copy;
	                }
	              }
	            }
	          }
	        }
	
	        // Return the modified object
	        return target;
	      };
	
	      /***/
	    },
	    /* 4 */
	    /***/function (module, exports, __webpack_require__) {
	
	      "use strict";
	
	      Object.defineProperty(exports, "__esModule", {
	        value: true
	      });
	      exports.default = exports.BlockEmbed = exports.bubbleFormats = undefined;
	
	      var _createClass = function () {
	        function defineProperties(target, props) {
	          for (var i = 0; i < props.length; i++) {
	            var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
	          }
	        }return function (Constructor, protoProps, staticProps) {
	          if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
	        };
	      }();
	
	      var _get = function get(object, property, receiver) {
	        if (object === null) object = Function.prototype;var desc = Object.getOwnPropertyDescriptor(object, property);if (desc === undefined) {
	          var parent = Object.getPrototypeOf(object);if (parent === null) {
	            return undefined;
	          } else {
	            return get(parent, property, receiver);
	          }
	        } else if ("value" in desc) {
	          return desc.value;
	        } else {
	          var getter = desc.get;if (getter === undefined) {
	            return undefined;
	          }return getter.call(receiver);
	        }
	      };
	
	      var _extend = __webpack_require__(3);
	
	      var _extend2 = _interopRequireDefault(_extend);
	
	      var _quillDelta = __webpack_require__(1);
	
	      var _quillDelta2 = _interopRequireDefault(_quillDelta);
	
	      var _parchment = __webpack_require__(0);
	
	      var _parchment2 = _interopRequireDefault(_parchment);
	
	      var _break = __webpack_require__(16);
	
	      var _break2 = _interopRequireDefault(_break);
	
	      var _embed = __webpack_require__(5);
	
	      var _embed2 = _interopRequireDefault(_embed);
	
	      var _inline = __webpack_require__(7);
	
	      var _inline2 = _interopRequireDefault(_inline);
	
	      var _text = __webpack_require__(8);
	
	      var _text2 = _interopRequireDefault(_text);
	
	      function _interopRequireDefault(obj) {
	        return obj && obj.__esModule ? obj : { default: obj };
	      }
	
	      function _classCallCheck(instance, Constructor) {
	        if (!(instance instanceof Constructor)) {
	          throw new TypeError("Cannot call a class as a function");
	        }
	      }
	
	      function _possibleConstructorReturn(self, call) {
	        if (!self) {
	          throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
	        }return call && ((typeof call === 'undefined' ? 'undefined' : _typeof2(call)) === "object" || typeof call === "function") ? call : self;
	      }
	
	      function _inherits(subClass, superClass) {
	        if (typeof superClass !== "function" && superClass !== null) {
	          throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === 'undefined' ? 'undefined' : _typeof2(superClass)));
	        }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
	      }
	
	      var NEWLINE_LENGTH = 1;
	
	      var BlockEmbed = function (_Embed) {
	        _inherits(BlockEmbed, _Embed);
	
	        function BlockEmbed() {
	          _classCallCheck(this, BlockEmbed);
	
	          return _possibleConstructorReturn(this, (BlockEmbed.__proto__ || Object.getPrototypeOf(BlockEmbed)).apply(this, arguments));
	        }
	
	        _createClass(BlockEmbed, [{
	          key: 'attach',
	          value: function attach() {
	            _get(BlockEmbed.prototype.__proto__ || Object.getPrototypeOf(BlockEmbed.prototype), 'attach', this).call(this);
	            this.attributes = new _parchment2.default.Attributor.Store(this.domNode);
	          }
	        }, {
	          key: 'delta',
	          value: function delta() {
	            return new _quillDelta2.default().insert(this.value(), (0, _extend2.default)(this.formats(), this.attributes.values()));
	          }
	        }, {
	          key: 'format',
	          value: function format(name, value) {
	            var attribute = _parchment2.default.query(name, _parchment2.default.Scope.BLOCK_ATTRIBUTE);
	            if (attribute != null) {
	              this.attributes.attribute(attribute, value);
	            }
	          }
	        }, {
	          key: 'formatAt',
	          value: function formatAt(index, length, name, value) {
	            this.format(name, value);
	          }
	        }, {
	          key: 'insertAt',
	          value: function insertAt(index, value, def) {
	            if (typeof value === 'string' && value.endsWith('\n')) {
	              var block = _parchment2.default.create(Block.blotName);
	              this.parent.insertBefore(block, index === 0 ? this : this.next);
	              block.insertAt(0, value.slice(0, -1));
	            } else {
	              _get(BlockEmbed.prototype.__proto__ || Object.getPrototypeOf(BlockEmbed.prototype), 'insertAt', this).call(this, index, value, def);
	            }
	          }
	        }]);
	
	        return BlockEmbed;
	      }(_embed2.default);
	
	      BlockEmbed.scope = _parchment2.default.Scope.BLOCK_BLOT;
	      // It is important for cursor behavior BlockEmbeds use tags that are block level elements
	
	
	      var Block = function (_Parchment$Block) {
	        _inherits(Block, _Parchment$Block);
	
	        function Block(domNode) {
	          _classCallCheck(this, Block);
	
	          var _this2 = _possibleConstructorReturn(this, (Block.__proto__ || Object.getPrototypeOf(Block)).call(this, domNode));
	
	          _this2.cache = {};
	          return _this2;
	        }
	
	        _createClass(Block, [{
	          key: 'delta',
	          value: function delta() {
	            if (this.cache.delta == null) {
	              this.cache.delta = this.descendants(_parchment2.default.Leaf).reduce(function (delta, leaf) {
	                if (leaf.length() === 0) {
	                  return delta;
	                } else {
	                  return delta.insert(leaf.value(), bubbleFormats(leaf));
	                }
	              }, new _quillDelta2.default()).insert('\n', bubbleFormats(this));
	            }
	            return this.cache.delta;
	          }
	        }, {
	          key: 'deleteAt',
	          value: function deleteAt(index, length) {
	            _get(Block.prototype.__proto__ || Object.getPrototypeOf(Block.prototype), 'deleteAt', this).call(this, index, length);
	            this.cache = {};
	          }
	        }, {
	          key: 'formatAt',
	          value: function formatAt(index, length, name, value) {
	            if (length <= 0) return;
	            if (_parchment2.default.query(name, _parchment2.default.Scope.BLOCK)) {
	              if (index + length === this.length()) {
	                this.format(name, value);
	              }
	            } else {
	              _get(Block.prototype.__proto__ || Object.getPrototypeOf(Block.prototype), 'formatAt', this).call(this, index, Math.min(length, this.length() - index - 1), name, value);
	            }
	            this.cache = {};
	          }
	        }, {
	          key: 'insertAt',
	          value: function insertAt(index, value, def) {
	            if (def != null) return _get(Block.prototype.__proto__ || Object.getPrototypeOf(Block.prototype), 'insertAt', this).call(this, index, value, def);
	            if (value.length === 0) return;
	            var lines = value.split('\n');
	            var text = lines.shift();
	            if (text.length > 0) {
	              if (index < this.length() - 1 || this.children.tail == null) {
	                _get(Block.prototype.__proto__ || Object.getPrototypeOf(Block.prototype), 'insertAt', this).call(this, Math.min(index, this.length() - 1), text);
	              } else {
	                this.children.tail.insertAt(this.children.tail.length(), text);
	              }
	              this.cache = {};
	            }
	            var block = this;
	            lines.reduce(function (index, line) {
	              block = block.split(index, true);
	              block.insertAt(0, line);
	              return line.length;
	            }, index + text.length);
	          }
	        }, {
	          key: 'insertBefore',
	          value: function insertBefore(blot, ref) {
	            var head = this.children.head;
	            _get(Block.prototype.__proto__ || Object.getPrototypeOf(Block.prototype), 'insertBefore', this).call(this, blot, ref);
	            if (head instanceof _break2.default) {
	              head.remove();
	            }
	            this.cache = {};
	          }
	        }, {
	          key: 'length',
	          value: function length() {
	            if (this.cache.length == null) {
	              this.cache.length = _get(Block.prototype.__proto__ || Object.getPrototypeOf(Block.prototype), 'length', this).call(this) + NEWLINE_LENGTH;
	            }
	            return this.cache.length;
	          }
	        }, {
	          key: 'moveChildren',
	          value: function moveChildren(target, ref) {
	            _get(Block.prototype.__proto__ || Object.getPrototypeOf(Block.prototype), 'moveChildren', this).call(this, target, ref);
	            this.cache = {};
	          }
	        }, {
	          key: 'optimize',
	          value: function optimize(context) {
	            _get(Block.prototype.__proto__ || Object.getPrototypeOf(Block.prototype), 'optimize', this).call(this, context);
	            this.cache = {};
	          }
	        }, {
	          key: 'path',
	          value: function path(index) {
	            return _get(Block.prototype.__proto__ || Object.getPrototypeOf(Block.prototype), 'path', this).call(this, index, true);
	          }
	        }, {
	          key: 'removeChild',
	          value: function removeChild(child) {
	            _get(Block.prototype.__proto__ || Object.getPrototypeOf(Block.prototype), 'removeChild', this).call(this, child);
	            this.cache = {};
	          }
	        }, {
	          key: 'split',
	          value: function split(index) {
	            var force = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
	
	            if (force && (index === 0 || index >= this.length() - NEWLINE_LENGTH)) {
	              var clone = this.clone();
	              if (index === 0) {
	                this.parent.insertBefore(clone, this);
	                return this;
	              } else {
	                this.parent.insertBefore(clone, this.next);
	                return clone;
	              }
	            } else {
	              var next = _get(Block.prototype.__proto__ || Object.getPrototypeOf(Block.prototype), 'split', this).call(this, index, force);
	              this.cache = {};
	              return next;
	            }
	          }
	        }]);
	
	        return Block;
	      }(_parchment2.default.Block);
	
	      Block.blotName = 'block';
	      Block.tagName = 'P';
	      Block.defaultChild = 'break';
	      Block.allowedChildren = [_inline2.default, _embed2.default, _text2.default];
	
	      function bubbleFormats(blot) {
	        var formats = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
	
	        if (blot == null) return formats;
	        if (typeof blot.formats === 'function') {
	          formats = (0, _extend2.default)(formats, blot.formats());
	        }
	        if (blot.parent == null || blot.parent.blotName == 'scroll' || blot.parent.statics.scope !== blot.statics.scope) {
	          return formats;
	        }
	        return bubbleFormats(blot.parent, formats);
	      }
	
	      exports.bubbleFormats = bubbleFormats;
	      exports.BlockEmbed = BlockEmbed;
	      exports.default = Block;
	
	      /***/
	    },
	    /* 5 */
	    /***/function (module, exports, __webpack_require__) {
	
	      "use strict";
	
	      Object.defineProperty(exports, "__esModule", {
	        value: true
	      });
	      exports.InlineEmbed = exports.default = undefined;
	
	      var _createClass = function () {
	        function defineProperties(target, props) {
	          for (var i = 0; i < props.length; i++) {
	            var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
	          }
	        }return function (Constructor, protoProps, staticProps) {
	          if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
	        };
	      }();
	
	      var _get = function get(object, property, receiver) {
	        if (object === null) object = Function.prototype;var desc = Object.getOwnPropertyDescriptor(object, property);if (desc === undefined) {
	          var parent = Object.getPrototypeOf(object);if (parent === null) {
	            return undefined;
	          } else {
	            return get(parent, property, receiver);
	          }
	        } else if ("value" in desc) {
	          return desc.value;
	        } else {
	          var getter = desc.get;if (getter === undefined) {
	            return undefined;
	          }return getter.call(receiver);
	        }
	      };
	
	      var _parchment = __webpack_require__(0);
	
	      var _parchment2 = _interopRequireDefault(_parchment);
	
	      var _text = __webpack_require__(8);
	
	      var _text2 = _interopRequireDefault(_text);
	
	      function _interopRequireDefault(obj) {
	        return obj && obj.__esModule ? obj : { default: obj };
	      }
	
	      function _classCallCheck(instance, Constructor) {
	        if (!(instance instanceof Constructor)) {
	          throw new TypeError("Cannot call a class as a function");
	        }
	      }
	
	      function _possibleConstructorReturn(self, call) {
	        if (!self) {
	          throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
	        }return call && ((typeof call === 'undefined' ? 'undefined' : _typeof2(call)) === "object" || typeof call === "function") ? call : self;
	      }
	
	      function _inherits(subClass, superClass) {
	        if (typeof superClass !== "function" && superClass !== null) {
	          throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === 'undefined' ? 'undefined' : _typeof2(superClass)));
	        }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
	      }
	
	      var GUARD_TEXT = '\uFEFF';
	
	      var Embed = function (_Parchment$Embed) {
	        _inherits(Embed, _Parchment$Embed);
	
	        function Embed() {
	          _classCallCheck(this, Embed);
	
	          return _possibleConstructorReturn(this, (Embed.__proto__ || Object.getPrototypeOf(Embed)).apply(this, arguments));
	        }
	
	        return Embed;
	      }(_parchment2.default.Embed);
	
	      var InlineEmbed = function (_Embed) {
	        _inherits(InlineEmbed, _Embed);
	
	        function InlineEmbed(node) {
	          _classCallCheck(this, InlineEmbed);
	
	          var _this2 = _possibleConstructorReturn(this, (InlineEmbed.__proto__ || Object.getPrototypeOf(InlineEmbed)).call(this, node));
	
	          var wrapper = document.createElement('span');
	          wrapper.setAttribute('contenteditable', false);
	          [].slice.call(_this2.domNode.childNodes).forEach(function (childNode) {
	            wrapper.appendChild(childNode);
	          });
	          _this2.leftGuard = document.createTextNode(GUARD_TEXT);
	          _this2.rightGuard = document.createTextNode(GUARD_TEXT);
	          _this2.domNode.appendChild(_this2.leftGuard);
	          _this2.domNode.appendChild(wrapper);
	          _this2.domNode.appendChild(_this2.rightGuard);
	          return _this2;
	        }
	
	        _createClass(InlineEmbed, [{
	          key: 'index',
	          value: function index(node, offset) {
	            if (node === this.leftGuard) return 0;
	            if (node === this.rightGuard) return 1;
	            return _get(InlineEmbed.prototype.__proto__ || Object.getPrototypeOf(InlineEmbed.prototype), 'index', this).call(this, node, offset);
	          }
	        }, {
	          key: 'restore',
	          value: function restore(node) {
	            var range = void 0,
	                textNode = void 0;
	            var text = node.data.split(GUARD_TEXT).join('');
	            if (node === this.leftGuard) {
	              if (this.prev instanceof _text2.default) {
	                var prevLength = this.prev.length();
	                this.prev.insertAt(prevLength, text);
	                range = {
	                  startNode: this.prev.domNode,
	                  startOffset: prevLength + text.length
	                };
	              } else {
	                textNode = document.createTextNode(text);
	                this.parent.insertBefore(_parchment2.default.create(textNode), this);
	                range = {
	                  startNode: textNode,
	                  startOffset: text.length
	                };
	              }
	            } else if (node === this.rightGuard) {
	              if (this.next instanceof _text2.default) {
	                this.next.insertAt(0, text);
	                range = {
	                  startNode: this.next.domNode,
	                  startOffset: text.length
	                };
	              } else {
	                textNode = document.createTextNode(text);
	                this.parent.insertBefore(_parchment2.default.create(textNode), this.next);
	                range = {
	                  startNode: textNode,
	                  startOffset: text.length
	                };
	              }
	            }
	            node.data = GUARD_TEXT;
	            return range;
	          }
	        }, {
	          key: 'update',
	          value: function update(mutations, context) {
	            var _this3 = this;
	
	            mutations.forEach(function (mutation) {
	              if (mutation.type === 'characterData' && (mutation.target === _this3.leftGuard || mutation.target === _this3.rightGuard)) {
	                var range = _this3.restore(mutation.target);
	                if (range) context.range = range;
	              }
	            });
	          }
	        }]);
	
	        return InlineEmbed;
	      }(Embed);
	
	      exports.default = Embed;
	      exports.InlineEmbed = InlineEmbed;
	
	      /***/
	    },
	    /* 6 */
	    /***/function (module, exports, __webpack_require__) {
	
	      "use strict";
	
	      Object.defineProperty(exports, "__esModule", {
	        value: true
	      });
	      exports.default = exports.overload = exports.expandConfig = undefined;
	
	      var _typeof = typeof Symbol === "function" && _typeof2(Symbol.iterator) === "symbol" ? function (obj) {
	        return typeof obj === 'undefined' ? 'undefined' : _typeof2(obj);
	      } : function (obj) {
	        return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj === 'undefined' ? 'undefined' : _typeof2(obj);
	      };
	
	      var _slicedToArray = function () {
	        function sliceIterator(arr, i) {
	          var _arr = [];var _n = true;var _d = false;var _e = undefined;try {
	            for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
	              _arr.push(_s.value);if (i && _arr.length === i) break;
	            }
	          } catch (err) {
	            _d = true;_e = err;
	          } finally {
	            try {
	              if (!_n && _i["return"]) _i["return"]();
	            } finally {
	              if (_d) throw _e;
	            }
	          }return _arr;
	        }return function (arr, i) {
	          if (Array.isArray(arr)) {
	            return arr;
	          } else if (Symbol.iterator in Object(arr)) {
	            return sliceIterator(arr, i);
	          } else {
	            throw new TypeError("Invalid attempt to destructure non-iterable instance");
	          }
	        };
	      }();
	
	      var _createClass = function () {
	        function defineProperties(target, props) {
	          for (var i = 0; i < props.length; i++) {
	            var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
	          }
	        }return function (Constructor, protoProps, staticProps) {
	          if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
	        };
	      }();
	
	      __webpack_require__(44);
	
	      var _quillDelta = __webpack_require__(1);
	
	      var _quillDelta2 = _interopRequireDefault(_quillDelta);
	
	      var _editor = __webpack_require__(14);
	
	      var _editor2 = _interopRequireDefault(_editor);
	
	      var _emitter3 = __webpack_require__(9);
	
	      var _emitter4 = _interopRequireDefault(_emitter3);
	
	      var _module = __webpack_require__(10);
	
	      var _module2 = _interopRequireDefault(_module);
	
	      var _parchment = __webpack_require__(0);
	
	      var _parchment2 = _interopRequireDefault(_parchment);
	
	      var _selection = __webpack_require__(15);
	
	      var _selection2 = _interopRequireDefault(_selection);
	
	      var _extend = __webpack_require__(3);
	
	      var _extend2 = _interopRequireDefault(_extend);
	
	      var _logger = __webpack_require__(11);
	
	      var _logger2 = _interopRequireDefault(_logger);
	
	      var _theme = __webpack_require__(30);
	
	      var _theme2 = _interopRequireDefault(_theme);
	
	      function _interopRequireDefault(obj) {
	        return obj && obj.__esModule ? obj : { default: obj };
	      }
	
	      function _defineProperty(obj, key, value) {
	        if (key in obj) {
	          Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });
	        } else {
	          obj[key] = value;
	        }return obj;
	      }
	
	      function _classCallCheck(instance, Constructor) {
	        if (!(instance instanceof Constructor)) {
	          throw new TypeError("Cannot call a class as a function");
	        }
	      }
	
	      var debug = (0, _logger2.default)('quill');
	
	      var Quill = function () {
	        _createClass(Quill, null, [{
	          key: 'debug',
	          value: function debug(limit) {
	            if (limit === true) {
	              limit = 'log';
	            }
	            _logger2.default.level(limit);
	          }
	        }, {
	          key: 'find',
	          value: function find(node) {
	            return node.__quill || _parchment2.default.find(node);
	          }
	        }, {
	          key: 'import',
	          value: function _import(name) {
	            if (this.imports[name] == null) {
	              debug.error('Cannot import ' + name + '. Are you sure it was registered?');
	            }
	            return this.imports[name];
	          }
	        }, {
	          key: 'register',
	          value: function register(path, target) {
	            var _this = this;
	
	            var overwrite = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
	
	            if (typeof path !== 'string') {
	              var name = path.attrName || path.blotName;
	              if (typeof name === 'string') {
	                // register(Blot | Attributor, overwrite)
	                this.register('formats/' + name, path, target);
	              } else {
	                Object.keys(path).forEach(function (key) {
	                  _this.register(key, path[key], target);
	                });
	              }
	            } else {
	              if (this.imports[path] != null && !overwrite) {
	                debug.warn('Overwriting ' + path + ' with', target);
	              }
	              this.imports[path] = target;
	              if ((path.startsWith('blots/') || path.startsWith('formats/')) && target.blotName !== 'abstract') {
	                _parchment2.default.register(target);
	              } else if (path.startsWith('modules') && typeof target.register === 'function') {
	                target.register();
	              }
	            }
	          }
	        }]);
	
	        function Quill(container) {
	          var _this2 = this;
	
	          var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
	
	          _classCallCheck(this, Quill);
	
	          this.options = expandConfig(container, options);
	          this.container = this.options.container;
	          if (this.container == null) {
	            return debug.error('Invalid Quill container', container);
	          }
	          if (this.options.debug) {
	            Quill.debug(this.options.debug);
	          }
	          var html = this.container.innerHTML.trim();
	          this.container.classList.add('ql-container');
	          this.container.innerHTML = '';
	          this.container.__quill = this;
	          this.root = this.addContainer('ql-editor');
	          this.root.classList.add('ql-blank');
	          this.root.setAttribute('data-gramm', false);
	          this.scrollingContainer = this.options.scrollingContainer || this.root;
	          this.emitter = new _emitter4.default();
	          this.scroll = _parchment2.default.create(this.root, {
	            emitter: this.emitter,
	            whitelist: this.options.formats
	          });
	          this.editor = new _editor2.default(this.scroll);
	          this.selection = new _selection2.default(this.scroll, this.emitter);
	          this.theme = new this.options.theme(this, this.options);
	          this.keyboard = this.theme.addModule('keyboard');
	          this.clipboard = this.theme.addModule('clipboard');
	          this.history = this.theme.addModule('history');
	          this.theme.init();
	          this.emitter.on(_emitter4.default.events.EDITOR_CHANGE, function (type) {
	            if (type === _emitter4.default.events.TEXT_CHANGE) {
	              _this2.root.classList.toggle('ql-blank', _this2.editor.isBlank());
	            }
	          });
	          this.emitter.on(_emitter4.default.events.SCROLL_UPDATE, function (source, mutations) {
	            var range = _this2.selection.lastRange;
	            var index = range && range.length === 0 ? range.index : undefined;
	            modify.call(_this2, function () {
	              return _this2.editor.update(null, mutations, index);
	            }, source);
	          });
	          var contents = this.clipboard.convert('<div class=\'ql-editor\' style="white-space: normal;">' + html + '<p><br></p></div>');
	          this.setContents(contents);
	          this.history.clear();
	          if (this.options.placeholder) {
	            this.root.setAttribute('data-placeholder', this.options.placeholder);
	          }
	          if (this.options.readOnly) {
	            this.disable();
	          }
	        }
	
	        _createClass(Quill, [{
	          key: 'addContainer',
	          value: function addContainer(container) {
	            var refNode = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
	
	            if (typeof container === 'string') {
	              var className = container;
	              container = document.createElement('div');
	              container.classList.add(className);
	            }
	            this.container.insertBefore(container, refNode);
	            return container;
	          }
	        }, {
	          key: 'blur',
	          value: function blur() {
	            this.selection.setRange(null);
	          }
	        }, {
	          key: 'deleteText',
	          value: function deleteText(index, length, source) {
	            var _this3 = this;
	
	            var _overload = overload(index, length, source);
	
	            var _overload2 = _slicedToArray(_overload, 4);
	
	            index = _overload2[0];
	            length = _overload2[1];
	            source = _overload2[3];
	
	            return modify.call(this, function () {
	              return _this3.editor.deleteText(index, length);
	            }, source, index, -1 * length);
	          }
	        }, {
	          key: 'disable',
	          value: function disable() {
	            this.enable(false);
	          }
	        }, {
	          key: 'enable',
	          value: function enable() {
	            var enabled = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;
	
	            this.scroll.enable(enabled);
	            this.container.classList.toggle('ql-disabled', !enabled);
	          }
	        }, {
	          key: 'focus',
	          value: function focus() {
	            var scrollTop = this.scrollingContainer.scrollTop;
	            this.selection.focus();
	            this.scrollingContainer.scrollTop = scrollTop;
	            this.scrollIntoView();
	          }
	        }, {
	          key: 'format',
	          value: function format(name, value) {
	            var _this4 = this;
	
	            var source = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : _emitter4.default.sources.API;
	
	            return modify.call(this, function () {
	              var range = _this4.getSelection(true);
	              var change = new _quillDelta2.default();
	              if (range == null) {
	                return change;
	              } else if (_parchment2.default.query(name, _parchment2.default.Scope.BLOCK)) {
	                change = _this4.editor.formatLine(range.index, range.length, _defineProperty({}, name, value));
	              } else if (range.length === 0) {
	                _this4.selection.format(name, value);
	                return change;
	              } else {
	                change = _this4.editor.formatText(range.index, range.length, _defineProperty({}, name, value));
	              }
	              _this4.setSelection(range, _emitter4.default.sources.SILENT);
	              return change;
	            }, source);
	          }
	        }, {
	          key: 'formatLine',
	          value: function formatLine(index, length, name, value, source) {
	            var _this5 = this;
	
	            var formats = void 0;
	
	            var _overload3 = overload(index, length, name, value, source);
	
	            var _overload4 = _slicedToArray(_overload3, 4);
	
	            index = _overload4[0];
	            length = _overload4[1];
	            formats = _overload4[2];
	            source = _overload4[3];
	
	            return modify.call(this, function () {
	              return _this5.editor.formatLine(index, length, formats);
	            }, source, index, 0);
	          }
	        }, {
	          key: 'formatText',
	          value: function formatText(index, length, name, value, source) {
	            var _this6 = this;
	
	            var formats = void 0;
	
	            var _overload5 = overload(index, length, name, value, source);
	
	            var _overload6 = _slicedToArray(_overload5, 4);
	
	            index = _overload6[0];
	            length = _overload6[1];
	            formats = _overload6[2];
	            source = _overload6[3];
	
	            return modify.call(this, function () {
	              return _this6.editor.formatText(index, length, formats);
	            }, source, index, 0);
	          }
	        }, {
	          key: 'getBounds',
	          value: function getBounds(index) {
	            var length = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
	
	            var bounds = void 0;
	            if (typeof index === 'number') {
	              bounds = this.selection.getBounds(index, length);
	            } else {
	              bounds = this.selection.getBounds(index.index, index.length);
	            }
	            var containerBounds = this.container.getBoundingClientRect();
	            return {
	              bottom: bounds.bottom - containerBounds.top,
	              height: bounds.height,
	              left: bounds.left - containerBounds.left,
	              right: bounds.right - containerBounds.left,
	              top: bounds.top - containerBounds.top,
	              width: bounds.width
	            };
	          }
	        }, {
	          key: 'getContents',
	          value: function getContents() {
	            var index = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
	            var length = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.getLength() - index;
	
	            var _overload7 = overload(index, length);
	
	            var _overload8 = _slicedToArray(_overload7, 2);
	
	            index = _overload8[0];
	            length = _overload8[1];
	
	            return this.editor.getContents(index, length);
	          }
	        }, {
	          key: 'getFormat',
	          value: function getFormat() {
	            var index = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.getSelection();
	            var length = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
	
	            if (typeof index === 'number') {
	              return this.editor.getFormat(index, length);
	            } else {
	              return this.editor.getFormat(index.index, index.length);
	            }
	          }
	        }, {
	          key: 'getIndex',
	          value: function getIndex(blot) {
	            return blot.offset(this.scroll);
	          }
	        }, {
	          key: 'getLength',
	          value: function getLength() {
	            return this.scroll.length();
	          }
	        }, {
	          key: 'getLeaf',
	          value: function getLeaf(index) {
	            return this.scroll.leaf(index);
	          }
	        }, {
	          key: 'getLine',
	          value: function getLine(index) {
	            return this.scroll.line(index);
	          }
	        }, {
	          key: 'getLines',
	          value: function getLines() {
	            var index = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
	            var length = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : Number.MAX_VALUE;
	
	            if (typeof index !== 'number') {
	              return this.scroll.lines(index.index, index.length);
	            } else {
	              return this.scroll.lines(index, length);
	            }
	          }
	        }, {
	          key: 'getModule',
	          value: function getModule(name) {
	            return this.theme.modules[name];
	          }
	        }, {
	          key: 'getSelection',
	          value: function getSelection() {
	            var focus = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
	
	            if (focus) this.focus();
	            this.update(); // Make sure we access getRange with editor in consistent state
	            return this.selection.getRange()[0];
	          }
	        }, {
	          key: 'getText',
	          value: function getText() {
	            var index = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
	            var length = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.getLength() - index;
	
	            var _overload9 = overload(index, length);
	
	            var _overload10 = _slicedToArray(_overload9, 2);
	
	            index = _overload10[0];
	            length = _overload10[1];
	
	            return this.editor.getText(index, length);
	          }
	        }, {
	          key: 'hasFocus',
	          value: function hasFocus() {
	            return this.selection.hasFocus();
	          }
	        }, {
	          key: 'insertEmbed',
	          value: function insertEmbed(index, embed, value) {
	            var _this7 = this;
	
	            var source = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : Quill.sources.API;
	
	            return modify.call(this, function () {
	              return _this7.editor.insertEmbed(index, embed, value);
	            }, source, index);
	          }
	        }, {
	          key: 'insertText',
	          value: function insertText(index, text, name, value, source) {
	            var _this8 = this;
	
	            var formats = void 0;
	
	            var _overload11 = overload(index, 0, name, value, source);
	
	            var _overload12 = _slicedToArray(_overload11, 4);
	
	            index = _overload12[0];
	            formats = _overload12[2];
	            source = _overload12[3];
	
	            return modify.call(this, function () {
	              return _this8.editor.insertText(index, text, formats);
	            }, source, index, text.length);
	          }
	        }, {
	          key: 'isEnabled',
	          value: function isEnabled() {
	            return !this.container.classList.contains('ql-disabled');
	          }
	        }, {
	          key: 'off',
	          value: function off() {
	            return this.emitter.off.apply(this.emitter, arguments);
	          }
	        }, {
	          key: 'on',
	          value: function on() {
	            return this.emitter.on.apply(this.emitter, arguments);
	          }
	        }, {
	          key: 'once',
	          value: function once() {
	            return this.emitter.once.apply(this.emitter, arguments);
	          }
	        }, {
	          key: 'pasteHTML',
	          value: function pasteHTML(index, html, source) {
	            this.clipboard.dangerouslyPasteHTML(index, html, source);
	          }
	        }, {
	          key: 'removeFormat',
	          value: function removeFormat(index, length, source) {
	            var _this9 = this;
	
	            var _overload13 = overload(index, length, source);
	
	            var _overload14 = _slicedToArray(_overload13, 4);
	
	            index = _overload14[0];
	            length = _overload14[1];
	            source = _overload14[3];
	
	            return modify.call(this, function () {
	              return _this9.editor.removeFormat(index, length);
	            }, source, index);
	          }
	        }, {
	          key: 'scrollIntoView',
	          value: function scrollIntoView() {
	            this.selection.scrollIntoView(this.scrollingContainer);
	          }
	        }, {
	          key: 'setContents',
	          value: function setContents(delta) {
	            var _this10 = this;
	
	            var source = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _emitter4.default.sources.API;
	
	            return modify.call(this, function () {
	              delta = new _quillDelta2.default(delta);
	              var length = _this10.getLength();
	              var deleted = _this10.editor.deleteText(0, length);
	              var applied = _this10.editor.applyDelta(delta);
	              var lastOp = applied.ops[applied.ops.length - 1];
	              if (lastOp != null && typeof lastOp.insert === 'string' && lastOp.insert[lastOp.insert.length - 1] === '\n') {
	                _this10.editor.deleteText(_this10.getLength() - 1, 1);
	                applied.delete(1);
	              }
	              var ret = deleted.compose(applied);
	              return ret;
	            }, source);
	          }
	        }, {
	          key: 'setSelection',
	          value: function setSelection(index, length, source) {
	            if (index == null) {
	              this.selection.setRange(null, length || Quill.sources.API);
	            } else {
	              var _overload15 = overload(index, length, source);
	
	              var _overload16 = _slicedToArray(_overload15, 4);
	
	              index = _overload16[0];
	              length = _overload16[1];
	              source = _overload16[3];
	
	              this.selection.setRange(new _selection.Range(index, length), source);
	              if (source !== _emitter4.default.sources.SILENT) {
	                this.selection.scrollIntoView(this.scrollingContainer);
	              }
	            }
	          }
	        }, {
	          key: 'setText',
	          value: function setText(text) {
	            var source = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _emitter4.default.sources.API;
	
	            var delta = new _quillDelta2.default().insert(text);
	            return this.setContents(delta, source);
	          }
	        }, {
	          key: 'update',
	          value: function update() {
	            var source = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _emitter4.default.sources.USER;
	
	            var change = this.scroll.update(source); // Will update selection before selection.update() does if text changes
	            this.selection.update(source);
	            return change;
	          }
	        }, {
	          key: 'updateContents',
	          value: function updateContents(delta) {
	            var _this11 = this;
	
	            var source = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _emitter4.default.sources.API;
	
	            return modify.call(this, function () {
	              delta = new _quillDelta2.default(delta);
	              return _this11.editor.applyDelta(delta, source);
	            }, source, true);
	          }
	        }]);
	
	        return Quill;
	      }();
	
	      Quill.DEFAULTS = {
	        bounds: null,
	        formats: null,
	        modules: {},
	        placeholder: '',
	        readOnly: false,
	        scrollingContainer: null,
	        strict: true,
	        theme: 'default'
	      };
	      Quill.events = _emitter4.default.events;
	      Quill.sources = _emitter4.default.sources;
	      // eslint-disable-next-line no-undef
	      Quill.version = false ? 'dev' : "1.3.0";
	
	      Quill.imports = {
	        'delta': _quillDelta2.default,
	        'parchment': _parchment2.default,
	        'core/module': _module2.default,
	        'core/theme': _theme2.default
	      };
	
	      function expandConfig(container, userConfig) {
	        userConfig = (0, _extend2.default)(true, {
	          container: container,
	          modules: {
	            clipboard: true,
	            keyboard: true,
	            history: true
	          }
	        }, userConfig);
	        if (!userConfig.theme || userConfig.theme === Quill.DEFAULTS.theme) {
	          userConfig.theme = _theme2.default;
	        } else {
	          userConfig.theme = Quill.import('themes/' + userConfig.theme);
	          if (userConfig.theme == null) {
	            throw new Error('Invalid theme ' + userConfig.theme + '. Did you register it?');
	          }
	        }
	        var themeConfig = (0, _extend2.default)(true, {}, userConfig.theme.DEFAULTS);
	        [themeConfig, userConfig].forEach(function (config) {
	          config.modules = config.modules || {};
	          Object.keys(config.modules).forEach(function (module) {
	            if (config.modules[module] === true) {
	              config.modules[module] = {};
	            }
	          });
	        });
	        var moduleNames = Object.keys(themeConfig.modules).concat(Object.keys(userConfig.modules));
	        var moduleConfig = moduleNames.reduce(function (config, name) {
	          var moduleClass = Quill.import('modules/' + name);
	          if (moduleClass == null) {
	            debug.error('Cannot load ' + name + ' module. Are you sure you registered it?');
	          } else {
	            config[name] = moduleClass.DEFAULTS || {};
	          }
	          return config;
	        }, {});
	        // Special case toolbar shorthand
	        if (userConfig.modules != null && userConfig.modules.toolbar && userConfig.modules.toolbar.constructor !== Object) {
	          userConfig.modules.toolbar = {
	            container: userConfig.modules.toolbar
	          };
	        }
	        userConfig = (0, _extend2.default)(true, {}, Quill.DEFAULTS, { modules: moduleConfig }, themeConfig, userConfig);
	        ['bounds', 'container', 'scrollingContainer'].forEach(function (key) {
	          if (typeof userConfig[key] === 'string') {
	            userConfig[key] = document.querySelector(userConfig[key]);
	          }
	        });
	        userConfig.modules = Object.keys(userConfig.modules).reduce(function (config, name) {
	          if (userConfig.modules[name]) {
	            config[name] = userConfig.modules[name];
	          }
	          return config;
	        }, {});
	        return userConfig;
	      }
	
	      // Handle selection preservation and TEXT_CHANGE emission
	      // common to modification APIs
	      function modify(modifier, source, index, shift) {
	        if (this.options.strict && !this.isEnabled() && source === _emitter4.default.sources.USER) {
	          return new _quillDelta2.default();
	        }
	        var range = index == null ? null : this.getSelection();
	        var oldDelta = this.editor.delta;
	        var change = modifier();
	        if (range != null) {
	          if (index === true) index = range.index;
	          if (shift == null) {
	            range = shiftRange(range, change, source);
	          } else if (shift !== 0) {
	            range = shiftRange(range, index, shift, source);
	          }
	          this.setSelection(range, _emitter4.default.sources.SILENT);
	        }
	        if (change.length() > 0) {
	          var _emitter;
	
	          var args = [_emitter4.default.events.TEXT_CHANGE, change, oldDelta, source];
	          (_emitter = this.emitter).emit.apply(_emitter, [_emitter4.default.events.EDITOR_CHANGE].concat(args));
	          if (source !== _emitter4.default.sources.SILENT) {
	            var _emitter2;
	
	            (_emitter2 = this.emitter).emit.apply(_emitter2, args);
	          }
	        }
	        return change;
	      }
	
	      function overload(index, length, name, value, source) {
	        var formats = {};
	        if (typeof index.index === 'number' && typeof index.length === 'number') {
	          // Allow for throwaway end (used by insertText/insertEmbed)
	          if (typeof length !== 'number') {
	            source = value, value = name, name = length, length = index.length, index = index.index;
	          } else {
	            length = index.length, index = index.index;
	          }
	        } else if (typeof length !== 'number') {
	          source = value, value = name, name = length, length = 0;
	        }
	        // Handle format being object, two format name/value strings or excluded
	        if ((typeof name === 'undefined' ? 'undefined' : _typeof(name)) === 'object') {
	          formats = name;
	          source = value;
	        } else if (typeof name === 'string') {
	          if (value != null) {
	            formats[name] = value;
	          } else {
	            source = name;
	          }
	        }
	        // Handle optional source
	        source = source || _emitter4.default.sources.API;
	        return [index, length, formats, source];
	      }
	
	      function shiftRange(range, index, length, source) {
	        if (range == null) return null;
	        var start = void 0,
	            end = void 0;
	        if (index instanceof _quillDelta2.default) {
	          var _map = [range.index, range.index + range.length].map(function (pos) {
	            return index.transformPosition(pos, source !== _emitter4.default.sources.USER);
	          });
	
	          var _map2 = _slicedToArray(_map, 2);
	
	          start = _map2[0];
	          end = _map2[1];
	        } else {
	          var _map3 = [range.index, range.index + range.length].map(function (pos) {
	            if (pos < index || pos === index && source === _emitter4.default.sources.USER) return pos;
	            if (length >= 0) {
	              return pos + length;
	            } else {
	              return Math.max(index, pos + length);
	            }
	          });
	
	          var _map4 = _slicedToArray(_map3, 2);
	
	          start = _map4[0];
	          end = _map4[1];
	        }
	        return new _selection.Range(start, end - start);
	      }
	
	      exports.expandConfig = expandConfig;
	      exports.overload = overload;
	      exports.default = Quill;
	
	      /***/
	    },
	    /* 7 */
	    /***/function (module, exports, __webpack_require__) {
	
	      "use strict";
	
	      Object.defineProperty(exports, "__esModule", {
	        value: true
	      });
	
	      var _createClass = function () {
	        function defineProperties(target, props) {
	          for (var i = 0; i < props.length; i++) {
	            var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
	          }
	        }return function (Constructor, protoProps, staticProps) {
	          if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
	        };
	      }();
	
	      var _get = function get(object, property, receiver) {
	        if (object === null) object = Function.prototype;var desc = Object.getOwnPropertyDescriptor(object, property);if (desc === undefined) {
	          var parent = Object.getPrototypeOf(object);if (parent === null) {
	            return undefined;
	          } else {
	            return get(parent, property, receiver);
	          }
	        } else if ("value" in desc) {
	          return desc.value;
	        } else {
	          var getter = desc.get;if (getter === undefined) {
	            return undefined;
	          }return getter.call(receiver);
	        }
	      };
	
	      var _embed = __webpack_require__(5);
	
	      var _embed2 = _interopRequireDefault(_embed);
	
	      var _text = __webpack_require__(8);
	
	      var _text2 = _interopRequireDefault(_text);
	
	      var _parchment = __webpack_require__(0);
	
	      var _parchment2 = _interopRequireDefault(_parchment);
	
	      function _interopRequireDefault(obj) {
	        return obj && obj.__esModule ? obj : { default: obj };
	      }
	
	      function _classCallCheck(instance, Constructor) {
	        if (!(instance instanceof Constructor)) {
	          throw new TypeError("Cannot call a class as a function");
	        }
	      }
	
	      function _possibleConstructorReturn(self, call) {
	        if (!self) {
	          throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
	        }return call && ((typeof call === 'undefined' ? 'undefined' : _typeof2(call)) === "object" || typeof call === "function") ? call : self;
	      }
	
	      function _inherits(subClass, superClass) {
	        if (typeof superClass !== "function" && superClass !== null) {
	          throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === 'undefined' ? 'undefined' : _typeof2(superClass)));
	        }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
	      }
	
	      var Inline = function (_Parchment$Inline) {
	        _inherits(Inline, _Parchment$Inline);
	
	        function Inline() {
	          _classCallCheck(this, Inline);
	
	          return _possibleConstructorReturn(this, (Inline.__proto__ || Object.getPrototypeOf(Inline)).apply(this, arguments));
	        }
	
	        _createClass(Inline, [{
	          key: 'formatAt',
	          value: function formatAt(index, length, name, value) {
	            if (Inline.compare(this.statics.blotName, name) < 0 && _parchment2.default.query(name, _parchment2.default.Scope.BLOT)) {
	              var blot = this.isolate(index, length);
	              if (value) {
	                blot.wrap(name, value);
	              }
	            } else {
	              _get(Inline.prototype.__proto__ || Object.getPrototypeOf(Inline.prototype), 'formatAt', this).call(this, index, length, name, value);
	            }
	          }
	        }, {
	          key: 'optimize',
	          value: function optimize(context) {
	            _get(Inline.prototype.__proto__ || Object.getPrototypeOf(Inline.prototype), 'optimize', this).call(this, context);
	            if (this.parent instanceof Inline && Inline.compare(this.statics.blotName, this.parent.statics.blotName) > 0) {
	              var parent = this.parent.isolate(this.offset(), this.length());
	              this.moveChildren(parent);
	              parent.wrap(this);
	            }
	          }
	        }], [{
	          key: 'compare',
	          value: function compare(self, other) {
	            var selfIndex = Inline.order.indexOf(self);
	            var otherIndex = Inline.order.indexOf(other);
	            if (selfIndex >= 0 || otherIndex >= 0) {
	              return selfIndex - otherIndex;
	            } else if (self === other) {
	              return 0;
	            } else if (self < other) {
	              return -1;
	            } else {
	              return 1;
	            }
	          }
	        }]);
	
	        return Inline;
	      }(_parchment2.default.Inline);
	
	      Inline.allowedChildren = [Inline, _embed2.default, _text2.default];
	      // Lower index means deeper in the DOM tree, since not found (-1) is for embeds
	      Inline.order = ['cursor', 'inline', // Must be lower
	      'code', 'underline', 'strike', 'italic', 'bold', 'script', 'link' // Must be higher
	      ];
	
	      exports.default = Inline;
	
	      /***/
	    },
	    /* 8 */
	    /***/function (module, exports, __webpack_require__) {
	
	      "use strict";
	
	      Object.defineProperty(exports, "__esModule", {
	        value: true
	      });
	
	      var _parchment = __webpack_require__(0);
	
	      var _parchment2 = _interopRequireDefault(_parchment);
	
	      function _interopRequireDefault(obj) {
	        return obj && obj.__esModule ? obj : { default: obj };
	      }
	
	      function _classCallCheck(instance, Constructor) {
	        if (!(instance instanceof Constructor)) {
	          throw new TypeError("Cannot call a class as a function");
	        }
	      }
	
	      function _possibleConstructorReturn(self, call) {
	        if (!self) {
	          throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
	        }return call && ((typeof call === 'undefined' ? 'undefined' : _typeof2(call)) === "object" || typeof call === "function") ? call : self;
	      }
	
	      function _inherits(subClass, superClass) {
	        if (typeof superClass !== "function" && superClass !== null) {
	          throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === 'undefined' ? 'undefined' : _typeof2(superClass)));
	        }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
	      }
	
	      var TextBlot = function (_Parchment$Text) {
	        _inherits(TextBlot, _Parchment$Text);
	
	        function TextBlot() {
	          _classCallCheck(this, TextBlot);
	
	          return _possibleConstructorReturn(this, (TextBlot.__proto__ || Object.getPrototypeOf(TextBlot)).apply(this, arguments));
	        }
	
	        return TextBlot;
	      }(_parchment2.default.Text);
	
	      exports.default = TextBlot;
	
	      /***/
	    },
	    /* 9 */
	    /***/function (module, exports, __webpack_require__) {
	
	      "use strict";
	
	      Object.defineProperty(exports, "__esModule", {
	        value: true
	      });
	
	      var _createClass = function () {
	        function defineProperties(target, props) {
	          for (var i = 0; i < props.length; i++) {
	            var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
	          }
	        }return function (Constructor, protoProps, staticProps) {
	          if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
	        };
	      }();
	
	      var _get = function get(object, property, receiver) {
	        if (object === null) object = Function.prototype;var desc = Object.getOwnPropertyDescriptor(object, property);if (desc === undefined) {
	          var parent = Object.getPrototypeOf(object);if (parent === null) {
	            return undefined;
	          } else {
	            return get(parent, property, receiver);
	          }
	        } else if ("value" in desc) {
	          return desc.value;
	        } else {
	          var getter = desc.get;if (getter === undefined) {
	            return undefined;
	          }return getter.call(receiver);
	        }
	      };
	
	      var _eventemitter = __webpack_require__(53);
	
	      var _eventemitter2 = _interopRequireDefault(_eventemitter);
	
	      var _logger = __webpack_require__(11);
	
	      var _logger2 = _interopRequireDefault(_logger);
	
	      function _interopRequireDefault(obj) {
	        return obj && obj.__esModule ? obj : { default: obj };
	      }
	
	      function _classCallCheck(instance, Constructor) {
	        if (!(instance instanceof Constructor)) {
	          throw new TypeError("Cannot call a class as a function");
	        }
	      }
	
	      function _possibleConstructorReturn(self, call) {
	        if (!self) {
	          throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
	        }return call && ((typeof call === 'undefined' ? 'undefined' : _typeof2(call)) === "object" || typeof call === "function") ? call : self;
	      }
	
	      function _inherits(subClass, superClass) {
	        if (typeof superClass !== "function" && superClass !== null) {
	          throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === 'undefined' ? 'undefined' : _typeof2(superClass)));
	        }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
	      }
	
	      var debug = (0, _logger2.default)('quill:events');
	
	      var EVENTS = ['selectionchange'];
	
	      EVENTS.forEach(function (eventName) {
	        document.addEventListener(eventName, function () {
	          for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	            args[_key] = arguments[_key];
	          }
	
	          [].slice.call(document.querySelectorAll('.ql-container')).forEach(function (node) {
	            // TODO use WeakMap
	            if (node.__quill && node.__quill.emitter) {
	              var _node$__quill$emitter;
	
	              (_node$__quill$emitter = node.__quill.emitter).handleDOM.apply(_node$__quill$emitter, args);
	            }
	          });
	        });
	      });
	
	      var Emitter = function (_EventEmitter) {
	        _inherits(Emitter, _EventEmitter);
	
	        function Emitter() {
	          _classCallCheck(this, Emitter);
	
	          var _this = _possibleConstructorReturn(this, (Emitter.__proto__ || Object.getPrototypeOf(Emitter)).call(this));
	
	          _this.listeners = {};
	          _this.on('error', debug.error);
	          return _this;
	        }
	
	        _createClass(Emitter, [{
	          key: 'emit',
	          value: function emit() {
	            debug.log.apply(debug, arguments);
	            _get(Emitter.prototype.__proto__ || Object.getPrototypeOf(Emitter.prototype), 'emit', this).apply(this, arguments);
	          }
	        }, {
	          key: 'handleDOM',
	          value: function handleDOM(event) {
	            for (var _len2 = arguments.length, args = Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
	              args[_key2 - 1] = arguments[_key2];
	            }
	
	            (this.listeners[event.type] || []).forEach(function (_ref) {
	              var node = _ref.node,
	                  handler = _ref.handler;
	
	              if (event.target === node) {
	                handler.apply(undefined, [event].concat(args));
	              }
	            });
	          }
	        }, {
	          key: 'listenDOM',
	          value: function listenDOM(eventName, node, handler) {
	            if (!this.listeners[eventName]) {
	              this.listeners[eventName] = [];
	            }
	            this.listeners[eventName].push({ node: node, handler: handler });
	          }
	        }]);
	
	        return Emitter;
	      }(_eventemitter2.default);
	
	      Emitter.events = {
	        EDITOR_CHANGE: 'editor-change',
	        SCROLL_BEFORE_UPDATE: 'scroll-before-update',
	        SCROLL_OPTIMIZE: 'scroll-optimize',
	        SCROLL_UPDATE: 'scroll-update',
	        SELECTION_CHANGE: 'selection-change',
	        TEXT_CHANGE: 'text-change'
	      };
	      Emitter.sources = {
	        API: 'api',
	        SILENT: 'silent',
	        USER: 'user'
	      };
	
	      exports.default = Emitter;
	
	      /***/
	    },
	    /* 10 */
	    /***/function (module, exports, __webpack_require__) {
	
	      "use strict";
	
	      Object.defineProperty(exports, "__esModule", {
	        value: true
	      });
	
	      function _classCallCheck(instance, Constructor) {
	        if (!(instance instanceof Constructor)) {
	          throw new TypeError("Cannot call a class as a function");
	        }
	      }
	
	      var Module = function Module(quill) {
	        var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
	
	        _classCallCheck(this, Module);
	
	        this.quill = quill;
	        this.options = options;
	      };
	
	      Module.DEFAULTS = {};
	
	      exports.default = Module;
	
	      /***/
	    },
	    /* 11 */
	    /***/function (module, exports, __webpack_require__) {
	
	      "use strict";
	
	      Object.defineProperty(exports, "__esModule", {
	        value: true
	      });
	      var levels = ['error', 'warn', 'log', 'info'];
	      var level = 'warn';
	
	      function debug(method) {
	        if (levels.indexOf(method) <= levels.indexOf(level)) {
	          var _console;
	
	          for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
	            args[_key - 1] = arguments[_key];
	          }
	
	          (_console = console)[method].apply(_console, args); // eslint-disable-line no-console
	        }
	      }
	
	      function namespace(ns) {
	        return levels.reduce(function (logger, method) {
	          logger[method] = debug.bind(console, method, ns);
	          return logger;
	        }, {});
	      }
	
	      debug.level = namespace.level = function (newLevel) {
	        level = newLevel;
	      };
	
	      exports.default = namespace;
	
	      /***/
	    },
	    /* 12 */
	    /***/function (module, exports, __webpack_require__) {
	
	      var pSlice = Array.prototype.slice;
	      var objectKeys = __webpack_require__(52);
	      var isArguments = __webpack_require__(51);
	
	      var deepEqual = module.exports = function (actual, expected, opts) {
	        if (!opts) opts = {};
	        // 7.1. All identical values are equivalent, as determined by ===.
	        if (actual === expected) {
	          return true;
	        } else if (actual instanceof Date && expected instanceof Date) {
	          return actual.getTime() === expected.getTime();
	
	          // 7.3. Other pairs that do not both pass typeof value == 'object',
	          // equivalence is determined by ==.
	        } else if (!actual || !expected || (typeof actual === 'undefined' ? 'undefined' : _typeof2(actual)) != 'object' && (typeof expected === 'undefined' ? 'undefined' : _typeof2(expected)) != 'object') {
	          return opts.strict ? actual === expected : actual == expected;
	
	          // 7.4. For all other Object pairs, including Array objects, equivalence is
	          // determined by having the same number of owned properties (as verified
	          // with Object.prototype.hasOwnProperty.call), the same set of keys
	          // (although not necessarily the same order), equivalent values for every
	          // corresponding key, and an identical 'prototype' property. Note: this
	          // accounts for both named and indexed properties on Arrays.
	        } else {
	          return objEquiv(actual, expected, opts);
	        }
	      };
	
	      function isUndefinedOrNull(value) {
	        return value === null || value === undefined;
	      }
	
	      function isBuffer(x) {
	        if (!x || (typeof x === 'undefined' ? 'undefined' : _typeof2(x)) !== 'object' || typeof x.length !== 'number') return false;
	        if (typeof x.copy !== 'function' || typeof x.slice !== 'function') {
	          return false;
	        }
	        if (x.length > 0 && typeof x[0] !== 'number') return false;
	        return true;
	      }
	
	      function objEquiv(a, b, opts) {
	        var i, key;
	        if (isUndefinedOrNull(a) || isUndefinedOrNull(b)) return false;
	        // an identical 'prototype' property.
	        if (a.prototype !== b.prototype) return false;
	        //~~~I've managed to break Object.keys through screwy arguments passing.
	        //   Converting to array solves the problem.
	        if (isArguments(a)) {
	          if (!isArguments(b)) {
	            return false;
	          }
	          a = pSlice.call(a);
	          b = pSlice.call(b);
	          return deepEqual(a, b, opts);
	        }
	        if (isBuffer(a)) {
	          if (!isBuffer(b)) {
	            return false;
	          }
	          if (a.length !== b.length) return false;
	          for (i = 0; i < a.length; i++) {
	            if (a[i] !== b[i]) return false;
	          }
	          return true;
	        }
	        try {
	          var ka = objectKeys(a),
	              kb = objectKeys(b);
	        } catch (e) {
	          //happens when one is a string literal and the other isn't
	          return false;
	        }
	        // having the same number of owned properties (keys incorporates
	        // hasOwnProperty)
	        if (ka.length != kb.length) return false;
	        //the same set of keys (although not necessarily the same order),
	        ka.sort();
	        kb.sort();
	        //~~~cheap key test
	        for (i = ka.length - 1; i >= 0; i--) {
	          if (ka[i] != kb[i]) return false;
	        }
	        //equivalent values for every corresponding key, and
	        //~~~possibly expensive deep test
	        for (i = ka.length - 1; i >= 0; i--) {
	          key = ka[i];
	          if (!deepEqual(a[key], b[key], opts)) return false;
	        }
	        return (typeof a === 'undefined' ? 'undefined' : _typeof2(a)) === (typeof b === 'undefined' ? 'undefined' : _typeof2(b));
	      }
	
	      /***/
	    },
	    /* 13 */
	    /***/function (module, exports, __webpack_require__) {
	
	      "use strict";
	
	      Object.defineProperty(exports, "__esModule", { value: true });
	      var Registry = __webpack_require__(2);
	      var Attributor = function () {
	        function Attributor(attrName, keyName, options) {
	          if (options === void 0) {
	            options = {};
	          }
	          this.attrName = attrName;
	          this.keyName = keyName;
	          var attributeBit = Registry.Scope.TYPE & Registry.Scope.ATTRIBUTE;
	          if (options.scope != null) {
	            // Ignore type bits, force attribute bit
	            this.scope = options.scope & Registry.Scope.LEVEL | attributeBit;
	          } else {
	            this.scope = Registry.Scope.ATTRIBUTE;
	          }
	          if (options.whitelist != null) this.whitelist = options.whitelist;
	        }
	        Attributor.keys = function (node) {
	          return [].map.call(node.attributes, function (item) {
	            return item.name;
	          });
	        };
	        Attributor.prototype.add = function (node, value) {
	          if (!this.canAdd(node, value)) return false;
	          node.setAttribute(this.keyName, value);
	          return true;
	        };
	        Attributor.prototype.canAdd = function (node, value) {
	          var match = Registry.query(node, Registry.Scope.BLOT & (this.scope | Registry.Scope.TYPE));
	          if (match != null && (this.whitelist == null || this.whitelist.indexOf(value) > -1)) {
	            return true;
	          }
	          return false;
	        };
	        Attributor.prototype.remove = function (node) {
	          node.removeAttribute(this.keyName);
	        };
	        Attributor.prototype.value = function (node) {
	          var value = node.getAttribute(this.keyName);
	          return this.canAdd(node, value) ? value : '';
	        };
	        return Attributor;
	      }();
	      exports.default = Attributor;
	
	      /***/
	    },
	    /* 14 */
	    /***/function (module, exports, __webpack_require__) {
	
	      "use strict";
	
	      Object.defineProperty(exports, "__esModule", {
	        value: true
	      });
	
	      var _typeof = typeof Symbol === "function" && _typeof2(Symbol.iterator) === "symbol" ? function (obj) {
	        return typeof obj === 'undefined' ? 'undefined' : _typeof2(obj);
	      } : function (obj) {
	        return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj === 'undefined' ? 'undefined' : _typeof2(obj);
	      };
	
	      var _slicedToArray = function () {
	        function sliceIterator(arr, i) {
	          var _arr = [];var _n = true;var _d = false;var _e = undefined;try {
	            for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
	              _arr.push(_s.value);if (i && _arr.length === i) break;
	            }
	          } catch (err) {
	            _d = true;_e = err;
	          } finally {
	            try {
	              if (!_n && _i["return"]) _i["return"]();
	            } finally {
	              if (_d) throw _e;
	            }
	          }return _arr;
	        }return function (arr, i) {
	          if (Array.isArray(arr)) {
	            return arr;
	          } else if (Symbol.iterator in Object(arr)) {
	            return sliceIterator(arr, i);
	          } else {
	            throw new TypeError("Invalid attempt to destructure non-iterable instance");
	          }
	        };
	      }();
	
	      var _createClass = function () {
	        function defineProperties(target, props) {
	          for (var i = 0; i < props.length; i++) {
	            var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
	          }
	        }return function (Constructor, protoProps, staticProps) {
	          if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
	        };
	      }();
	
	      var _quillDelta = __webpack_require__(1);
	
	      var _quillDelta2 = _interopRequireDefault(_quillDelta);
	
	      var _op = __webpack_require__(20);
	
	      var _op2 = _interopRequireDefault(_op);
	
	      var _parchment = __webpack_require__(0);
	
	      var _parchment2 = _interopRequireDefault(_parchment);
	
	      var _code = __webpack_require__(17);
	
	      var _code2 = _interopRequireDefault(_code);
	
	      var _cursor = __webpack_require__(25);
	
	      var _cursor2 = _interopRequireDefault(_cursor);
	
	      var _block = __webpack_require__(4);
	
	      var _block2 = _interopRequireDefault(_block);
	
	      var _break = __webpack_require__(16);
	
	      var _break2 = _interopRequireDefault(_break);
	
	      var _clone = __webpack_require__(19);
	
	      var _clone2 = _interopRequireDefault(_clone);
	
	      var _deepEqual = __webpack_require__(12);
	
	      var _deepEqual2 = _interopRequireDefault(_deepEqual);
	
	      var _extend = __webpack_require__(3);
	
	      var _extend2 = _interopRequireDefault(_extend);
	
	      function _interopRequireDefault(obj) {
	        return obj && obj.__esModule ? obj : { default: obj };
	      }
	
	      function _defineProperty(obj, key, value) {
	        if (key in obj) {
	          Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });
	        } else {
	          obj[key] = value;
	        }return obj;
	      }
	
	      function _classCallCheck(instance, Constructor) {
	        if (!(instance instanceof Constructor)) {
	          throw new TypeError("Cannot call a class as a function");
	        }
	      }
	
	      var ASCII = /^[ -~]*$/;
	
	      var Editor = function () {
	        function Editor(scroll) {
	          _classCallCheck(this, Editor);
	
	          this.scroll = scroll;
	          this.delta = this.getDelta();
	        }
	
	        _createClass(Editor, [{
	          key: 'applyDelta',
	          value: function applyDelta(delta) {
	            var _this = this;
	
	            var consumeNextNewline = false;
	            this.scroll.update();
	            var scrollLength = this.scroll.length();
	            this.scroll.batchStart();
	            delta = normalizeDelta(delta);
	            delta.reduce(function (index, op) {
	              var length = op.retain || op.delete || op.insert.length || 1;
	              var attributes = op.attributes || {};
	              if (op.insert != null) {
	                if (typeof op.insert === 'string') {
	                  var text = op.insert;
	                  if (text.endsWith('\n') && consumeNextNewline) {
	                    consumeNextNewline = false;
	                    text = text.slice(0, -1);
	                  }
	                  if (index >= scrollLength && !text.endsWith('\n')) {
	                    consumeNextNewline = true;
	                  }
	                  _this.scroll.insertAt(index, text);
	
	                  var _scroll$line = _this.scroll.line(index),
	                      _scroll$line2 = _slicedToArray(_scroll$line, 2),
	                      line = _scroll$line2[0],
	                      offset = _scroll$line2[1];
	
	                  var formats = (0, _extend2.default)({}, (0, _block.bubbleFormats)(line));
	                  if (line instanceof _block2.default) {
	                    var _line$descendant = line.descendant(_parchment2.default.Leaf, offset),
	                        _line$descendant2 = _slicedToArray(_line$descendant, 1),
	                        leaf = _line$descendant2[0];
	
	                    formats = (0, _extend2.default)(formats, (0, _block.bubbleFormats)(leaf));
	                  }
	                  attributes = _op2.default.attributes.diff(formats, attributes) || {};
	                } else if (_typeof(op.insert) === 'object') {
	                  var key = Object.keys(op.insert)[0]; // There should only be one key
	                  if (key == null) return index;
	                  _this.scroll.insertAt(index, key, op.insert[key]);
	                }
	                scrollLength += length;
	              }
	              Object.keys(attributes).forEach(function (name) {
	                _this.scroll.formatAt(index, length, name, attributes[name]);
	              });
	              return index + length;
	            }, 0);
	            delta.reduce(function (index, op) {
	              if (typeof op.delete === 'number') {
	                _this.scroll.deleteAt(index, op.delete);
	                return index;
	              }
	              return index + (op.retain || op.insert.length || 1);
	            }, 0);
	            this.scroll.batchEnd();
	            return this.update(delta);
	          }
	        }, {
	          key: 'deleteText',
	          value: function deleteText(index, length) {
	            this.scroll.deleteAt(index, length);
	            return this.update(new _quillDelta2.default().retain(index).delete(length));
	          }
	        }, {
	          key: 'formatLine',
	          value: function formatLine(index, length) {
	            var _this2 = this;
	
	            var formats = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
	
	            this.scroll.update();
	            Object.keys(formats).forEach(function (format) {
	              if (_this2.scroll.whitelist != null && !_this2.scroll.whitelist[format]) return;
	              var lines = _this2.scroll.lines(index, Math.max(length, 1));
	              var lengthRemaining = length;
	              lines.forEach(function (line) {
	                var lineLength = line.length();
	                if (!(line instanceof _code2.default)) {
	                  line.format(format, formats[format]);
	                } else {
	                  var codeIndex = index - line.offset(_this2.scroll);
	                  var codeLength = line.newlineIndex(codeIndex + lengthRemaining) - codeIndex + 1;
	                  line.formatAt(codeIndex, codeLength, format, formats[format]);
	                }
	                lengthRemaining -= lineLength;
	              });
	            });
	            this.scroll.optimize();
	            return this.update(new _quillDelta2.default().retain(index).retain(length, (0, _clone2.default)(formats)));
	          }
	        }, {
	          key: 'formatText',
	          value: function formatText(index, length) {
	            var _this3 = this;
	
	            var formats = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
	
	            Object.keys(formats).forEach(function (format) {
	              _this3.scroll.formatAt(index, length, format, formats[format]);
	            });
	            return this.update(new _quillDelta2.default().retain(index).retain(length, (0, _clone2.default)(formats)));
	          }
	        }, {
	          key: 'getContents',
	          value: function getContents(index, length) {
	            return this.delta.slice(index, index + length);
	          }
	        }, {
	          key: 'getDelta',
	          value: function getDelta() {
	            return this.scroll.lines().reduce(function (delta, line) {
	              return delta.concat(line.delta());
	            }, new _quillDelta2.default());
	          }
	        }, {
	          key: 'getFormat',
	          value: function getFormat(index) {
	            var length = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
	
	            var lines = [],
	                leaves = [];
	            if (length === 0) {
	              this.scroll.path(index).forEach(function (path) {
	                var _path = _slicedToArray(path, 1),
	                    blot = _path[0];
	
	                if (blot instanceof _block2.default) {
	                  lines.push(blot);
	                } else if (blot instanceof _parchment2.default.Leaf) {
	                  leaves.push(blot);
	                }
	              });
	            } else {
	              lines = this.scroll.lines(index, length);
	              leaves = this.scroll.descendants(_parchment2.default.Leaf, index, length);
	            }
	            var formatsArr = [lines, leaves].map(function (blots) {
	              if (blots.length === 0) return {};
	              var formats = (0, _block.bubbleFormats)(blots.shift());
	              while (Object.keys(formats).length > 0) {
	                var blot = blots.shift();
	                if (blot == null) return formats;
	                formats = combineFormats((0, _block.bubbleFormats)(blot), formats);
	              }
	              return formats;
	            });
	            return _extend2.default.apply(_extend2.default, formatsArr);
	          }
	        }, {
	          key: 'getText',
	          value: function getText(index, length) {
	            return this.getContents(index, length).filter(function (op) {
	              return typeof op.insert === 'string';
	            }).map(function (op) {
	              return op.insert;
	            }).join('');
	          }
	        }, {
	          key: 'insertEmbed',
	          value: function insertEmbed(index, embed, value) {
	            this.scroll.insertAt(index, embed, value);
	            return this.update(new _quillDelta2.default().retain(index).insert(_defineProperty({}, embed, value)));
	          }
	        }, {
	          key: 'insertText',
	          value: function insertText(index, text) {
	            var _this4 = this;
	
	            var formats = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
	
	            text = text.replace(/\r\n/g, '\n').replace(/\r/g, '\n');
	            this.scroll.insertAt(index, text);
	            Object.keys(formats).forEach(function (format) {
	              _this4.scroll.formatAt(index, text.length, format, formats[format]);
	            });
	            return this.update(new _quillDelta2.default().retain(index).insert(text, (0, _clone2.default)(formats)));
	          }
	        }, {
	          key: 'isBlank',
	          value: function isBlank() {
	            if (this.scroll.children.length == 0) return true;
	            if (this.scroll.children.length > 1) return false;
	            var child = this.scroll.children.head;
	            return child.length() <= 1 && child instanceof _break2.default;
	          }
	        }, {
	          key: 'removeFormat',
	          value: function removeFormat(index, length) {
	            var text = this.getText(index, length);
	
	            var _scroll$line3 = this.scroll.line(index + length),
	                _scroll$line4 = _slicedToArray(_scroll$line3, 2),
	                line = _scroll$line4[0],
	                offset = _scroll$line4[1];
	
	            var suffixLength = 0,
	                suffix = new _quillDelta2.default();
	            if (line != null) {
	              if (!(line instanceof _code2.default)) {
	                suffixLength = line.length() - offset;
	              } else {
	                suffixLength = line.newlineIndex(offset) - offset + 1;
	              }
	              suffix = line.delta().slice(offset, offset + suffixLength - 1).insert('\n');
	            }
	            var contents = this.getContents(index, length + suffixLength);
	            var diff = contents.diff(new _quillDelta2.default().insert(text).concat(suffix));
	            var delta = new _quillDelta2.default().retain(index).concat(diff);
	            return this.applyDelta(delta);
	          }
	        }, {
	          key: 'update',
	          value: function update(change) {
	            var mutations = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
	            var cursorIndex = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : undefined;
	
	            var oldDelta = this.delta;
	            if (mutations.length === 1 && mutations[0].type === 'characterData' && mutations[0].target.data.match(ASCII) && _parchment2.default.find(mutations[0].target)) {
	              // Optimization for character changes
	              var textBlot = _parchment2.default.find(mutations[0].target);
	              var formats = (0, _block.bubbleFormats)(textBlot);
	              var index = textBlot.offset(this.scroll);
	              var oldValue = mutations[0].oldValue.replace(_cursor2.default.CONTENTS, '');
	              var oldText = new _quillDelta2.default().insert(oldValue);
	              var newText = new _quillDelta2.default().insert(textBlot.value());
	              var diffDelta = new _quillDelta2.default().retain(index).concat(oldText.diff(newText, cursorIndex));
	              change = diffDelta.reduce(function (delta, op) {
	                if (op.insert) {
	                  return delta.insert(op.insert, formats);
	                } else {
	                  return delta.push(op);
	                }
	              }, new _quillDelta2.default());
	              this.delta = oldDelta.compose(change);
	            } else {
	              this.delta = this.getDelta();
	              if (!change || !(0, _deepEqual2.default)(oldDelta.compose(change), this.delta)) {
	                change = oldDelta.diff(this.delta, cursorIndex);
	              }
	            }
	            return change;
	          }
	        }]);
	
	        return Editor;
	      }();
	
	      function combineFormats(formats, combined) {
	        return Object.keys(combined).reduce(function (merged, name) {
	          if (formats[name] == null) return merged;
	          if (combined[name] === formats[name]) {
	            merged[name] = combined[name];
	          } else if (Array.isArray(combined[name])) {
	            if (combined[name].indexOf(formats[name]) < 0) {
	              merged[name] = combined[name].concat([formats[name]]);
	            }
	          } else {
	            merged[name] = [combined[name], formats[name]];
	          }
	          return merged;
	        }, {});
	      }
	
	      function normalizeDelta(delta) {
	        return delta.reduce(function (delta, op) {
	          if (op.insert === 1) {
	            var attributes = (0, _clone2.default)(op.attributes);
	            delete attributes['image'];
	            return delta.insert({ image: op.attributes.image }, attributes);
	          }
	          if (op.attributes != null && (op.attributes.list === true || op.attributes.bullet === true)) {
	            op = (0, _clone2.default)(op);
	            if (op.attributes.list) {
	              op.attributes.list = 'ordered';
	            } else {
	              op.attributes.list = 'bullet';
	              delete op.attributes.bullet;
	            }
	          }
	          if (typeof op.insert === 'string') {
	            var text = op.insert.replace(/\r\n/g, '\n').replace(/\r/g, '\n');
	            return delta.insert(text, op.attributes);
	          }
	          return delta.push(op);
	        }, new _quillDelta2.default());
	      }
	
	      exports.default = Editor;
	
	      /***/
	    },
	    /* 15 */
	    /***/function (module, exports, __webpack_require__) {
	
	      "use strict";
	
	      Object.defineProperty(exports, "__esModule", {
	        value: true
	      });
	      exports.default = exports.Range = undefined;
	
	      var _slicedToArray = function () {
	        function sliceIterator(arr, i) {
	          var _arr = [];var _n = true;var _d = false;var _e = undefined;try {
	            for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
	              _arr.push(_s.value);if (i && _arr.length === i) break;
	            }
	          } catch (err) {
	            _d = true;_e = err;
	          } finally {
	            try {
	              if (!_n && _i["return"]) _i["return"]();
	            } finally {
	              if (_d) throw _e;
	            }
	          }return _arr;
	        }return function (arr, i) {
	          if (Array.isArray(arr)) {
	            return arr;
	          } else if (Symbol.iterator in Object(arr)) {
	            return sliceIterator(arr, i);
	          } else {
	            throw new TypeError("Invalid attempt to destructure non-iterable instance");
	          }
	        };
	      }();
	
	      var _createClass = function () {
	        function defineProperties(target, props) {
	          for (var i = 0; i < props.length; i++) {
	            var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
	          }
	        }return function (Constructor, protoProps, staticProps) {
	          if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
	        };
	      }();
	
	      var _parchment = __webpack_require__(0);
	
	      var _parchment2 = _interopRequireDefault(_parchment);
	
	      var _embed = __webpack_require__(5);
	
	      var _clone = __webpack_require__(19);
	
	      var _clone2 = _interopRequireDefault(_clone);
	
	      var _deepEqual = __webpack_require__(12);
	
	      var _deepEqual2 = _interopRequireDefault(_deepEqual);
	
	      var _emitter3 = __webpack_require__(9);
	
	      var _emitter4 = _interopRequireDefault(_emitter3);
	
	      var _logger = __webpack_require__(11);
	
	      var _logger2 = _interopRequireDefault(_logger);
	
	      function _interopRequireDefault(obj) {
	        return obj && obj.__esModule ? obj : { default: obj };
	      }
	
	      function _toConsumableArray(arr) {
	        if (Array.isArray(arr)) {
	          for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) {
	            arr2[i] = arr[i];
	          }return arr2;
	        } else {
	          return Array.from(arr);
	        }
	      }
	
	      function _classCallCheck(instance, Constructor) {
	        if (!(instance instanceof Constructor)) {
	          throw new TypeError("Cannot call a class as a function");
	        }
	      }
	
	      var debug = (0, _logger2.default)('quill:selection');
	
	      var Range = function Range(index) {
	        var length = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
	
	        _classCallCheck(this, Range);
	
	        this.index = index;
	        this.length = length;
	      };
	
	      var Selection = function () {
	        function Selection(scroll, emitter) {
	          var _this = this;
	
	          _classCallCheck(this, Selection);
	
	          this.emitter = emitter;
	          this.scroll = scroll;
	          this.composing = false;
	          this.root = this.scroll.domNode;
	          this.root.addEventListener('compositionstart', function () {
	            _this.composing = true;
	          });
	          this.root.addEventListener('compositionend', function () {
	            _this.composing = false;
	            if (_this.cursor.parent) {
	              var range = _this.cursor.restore();
	              if (!range) return;
	              setTimeout(function () {
	                _this.setNativeRange(range.startNode, range.startOffset, range.endNode, range.endOffset);
	              }, 1);
	            }
	          });
	          this.cursor = _parchment2.default.create('cursor', this);
	          // savedRange is last non-null range
	          this.lastRange = this.savedRange = new Range(0, 0);
	          this.root.addEventListener('click', function (e) {
	            var blot = _parchment2.default.find(e.target, true);
	            var selectedNode = document.querySelector('.ql-embed-selected');
	            if (selectedNode) {
	              selectedNode.classList.remove('ql-embed-selected');
	            }
	            if (blot instanceof _parchment2.default.Embed) {
	              blot.domNode.classList.add('ql-embed-selected');
	              var range = new Range(blot.offset(scroll), blot.length());
	              _this.setRange(range, _emitter4.default.sources.USER);
	              e.stopPropagation();
	            }
	          });
	          this.emitter.listenDOM('selectionchange', document, function () {
	            setTimeout(_this.update.bind(_this, _emitter4.default.sources.USER), 1);
	          });
	          this.emitter.on(_emitter4.default.events.EDITOR_CHANGE, function (type, delta) {
	            if (type === _emitter4.default.events.TEXT_CHANGE && delta.length() > 0) {
	              _this.update(_emitter4.default.sources.SILENT);
	            }
	          });
	          this.emitter.on(_emitter4.default.events.SCROLL_BEFORE_UPDATE, function () {
	            if (!_this.hasFocus()) return;
	            var native = _this.getNativeRange();
	            if (native == null) return;
	            if (native.start.node === _this.cursor.textNode) return; // cursor.restore() will handle
	            // TODO unclear if this has negative side effects
	            _this.emitter.once(_emitter4.default.events.SCROLL_UPDATE, function () {
	              try {
	                _this.setNativeRange(native.start.node, native.start.offset, native.end.node, native.end.offset);
	              } catch (ignored) {}
	            });
	          });
	          this.emitter.on(_emitter4.default.events.SCROLL_OPTIMIZE, function (mutations, context) {
	            if (context.range) {
	              var _context$range = context.range,
	                  startNode = _context$range.startNode,
	                  startOffset = _context$range.startOffset,
	                  endNode = _context$range.endNode,
	                  endOffset = _context$range.endOffset;
	
	              _this.setNativeRange(startNode, startOffset, endNode, endOffset);
	            }
	          });
	          this.update(_emitter4.default.sources.SILENT);
	        }
	
	        _createClass(Selection, [{
	          key: 'fixInlineEmbed',
	          value: function fixInlineEmbed(native) {
	            if (native == null) return;
	
	            var _map = [native.start, native.end].map(function (pos) {
	              var blot = _parchment2.default.find(pos.node, true);
	              if (blot instanceof _embed.InlineEmbed) {
	                var node = void 0,
	                    offset = void 0;
	                if (pos.node === blot.leftGuard && pos.offset === 1) {
	                  var _blot$position = blot.position(blot.length());
	
	                  var _blot$position2 = _slicedToArray(_blot$position, 2);
	
	                  node = _blot$position2[0];
	                  offset = _blot$position2[1];
	
	                  return { node: node, offset: offset };
	                } else if (pos.node === blot.rightGuard && pos.offset === 0) {
	                  var _blot$position3 = blot.position(0);
	
	                  var _blot$position4 = _slicedToArray(_blot$position3, 2);
	
	                  node = _blot$position4[0];
	                  offset = _blot$position4[1];
	
	                  return { node: node, offset: offset };
	                }
	              }
	              return pos;
	            }),
	                _map2 = _slicedToArray(_map, 2),
	                start = _map2[0],
	                end = _map2[1];
	
	            if (native.start !== start || native.end !== end) {
	              this.setNativeRange(start.node, start.offset, end.node, end.offset);
	            }
	          }
	        }, {
	          key: 'focus',
	          value: function focus() {
	            if (this.hasFocus()) return;
	            this.root.focus();
	            this.setRange(this.savedRange);
	          }
	        }, {
	          key: 'format',
	          value: function format(_format, value) {
	            if (this.scroll.whitelist != null && !this.scroll.whitelist[_format]) return;
	            this.scroll.update();
	            var nativeRange = this.getNativeRange();
	            if (nativeRange == null || !nativeRange.native.collapsed || _parchment2.default.query(_format, _parchment2.default.Scope.BLOCK)) return;
	            if (nativeRange.start.node !== this.cursor.textNode) {
	              var blot = _parchment2.default.find(nativeRange.start.node, false);
	              if (blot == null) return;
	              // TODO Give blot ability to not split
	              if (blot instanceof _parchment2.default.Leaf) {
	                var after = blot.split(nativeRange.start.offset);
	                blot.parent.insertBefore(this.cursor, after);
	              } else {
	                blot.insertBefore(this.cursor, nativeRange.start.node); // Should never happen
	              }
	              this.cursor.attach();
	            }
	            this.cursor.format(_format, value);
	            this.scroll.optimize();
	            this.setNativeRange(this.cursor.textNode, this.cursor.textNode.data.length);
	            this.update();
	          }
	        }, {
	          key: 'getBounds',
	          value: function getBounds(index) {
	            var length = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
	
	            var scrollLength = this.scroll.length();
	            index = Math.min(index, scrollLength - 1);
	            length = Math.min(index + length, scrollLength - 1) - index;
	            var node = void 0,
	                _scroll$leaf = this.scroll.leaf(index),
	                _scroll$leaf2 = _slicedToArray(_scroll$leaf, 2),
	                leaf = _scroll$leaf2[0],
	                offset = _scroll$leaf2[1];
	            if (leaf == null) return null;
	
	            var _leaf$position = leaf.position(offset, true);
	
	            var _leaf$position2 = _slicedToArray(_leaf$position, 2);
	
	            node = _leaf$position2[0];
	            offset = _leaf$position2[1];
	
	            var range = document.createRange();
	            if (length > 0) {
	              range.setStart(node, offset);
	
	              var _scroll$leaf3 = this.scroll.leaf(index + length);
	
	              var _scroll$leaf4 = _slicedToArray(_scroll$leaf3, 2);
	
	              leaf = _scroll$leaf4[0];
	              offset = _scroll$leaf4[1];
	
	              if (leaf == null) return null;
	
	              var _leaf$position3 = leaf.position(offset, true);
	
	              var _leaf$position4 = _slicedToArray(_leaf$position3, 2);
	
	              node = _leaf$position4[0];
	              offset = _leaf$position4[1];
	
	              range.setEnd(node, offset);
	              return range.getBoundingClientRect();
	            } else {
	              var side = 'left';
	              var rect = void 0;
	              if (node instanceof Text) {
	                if (offset < node.data.length) {
	                  range.setStart(node, offset);
	                  range.setEnd(node, offset + 1);
	                } else {
	                  range.setStart(node, offset - 1);
	                  range.setEnd(node, offset);
	                  side = 'right';
	                }
	                rect = range.getBoundingClientRect();
	              } else {
	                rect = leaf.domNode.getBoundingClientRect();
	                if (offset > 0) side = 'right';
	              }
	              return {
	                bottom: rect.top + rect.height,
	                height: rect.height,
	                left: rect[side],
	                right: rect[side],
	                top: rect.top,
	                width: 0
	              };
	            }
	          }
	        }, {
	          key: 'getNativeRange',
	          value: function getNativeRange() {
	            var selection = document.getSelection();
	            if (selection == null || selection.rangeCount <= 0) return null;
	            var nativeRange = selection.getRangeAt(0);
	            if (nativeRange == null) return null;
	            var range = this.normalizeNative(nativeRange);
	            debug.info('getNativeRange', range);
	            return range;
	          }
	        }, {
	          key: 'getRange',
	          value: function getRange() {
	            var normalized = this.getNativeRange();
	            if (normalized == null) return [null, null];
	            var range = this.normalizedToRange(normalized);
	            return [range, normalized];
	          }
	        }, {
	          key: 'hasFocus',
	          value: function hasFocus() {
	            return document.activeElement === this.root;
	          }
	        }, {
	          key: 'normalizedToRange',
	          value: function normalizedToRange(range) {
	            var _this2 = this;
	
	            var positions = [[range.start.node, range.start.offset]];
	            if (!range.native.collapsed) {
	              positions.push([range.end.node, range.end.offset]);
	            }
	            var indexes = positions.map(function (position) {
	              var _position = _slicedToArray(position, 2),
	                  node = _position[0],
	                  offset = _position[1];
	
	              var blot = _parchment2.default.find(node, true);
	              var index = blot.offset(_this2.scroll);
	              if (offset === 0) {
	                return index;
	              } else if (blot instanceof _parchment2.default.Container) {
	                return index + blot.length();
	              } else {
	                return index + blot.index(node, offset);
	              }
	            });
	            var end = Math.min(Math.max.apply(Math, _toConsumableArray(indexes)), this.scroll.length() - 1);
	            var start = Math.min.apply(Math, [end].concat(_toConsumableArray(indexes)));
	            return new Range(start, end - start);
	          }
	        }, {
	          key: 'normalizeNative',
	          value: function normalizeNative(nativeRange) {
	            if (!contains(this.root, nativeRange.startContainer) || !nativeRange.collapsed && !contains(this.root, nativeRange.endContainer)) {
	              return null;
	            }
	            var range = {
	              start: { node: nativeRange.startContainer, offset: nativeRange.startOffset },
	              end: { node: nativeRange.endContainer, offset: nativeRange.endOffset },
	              native: nativeRange
	            };
	            [range.start, range.end].forEach(function (position) {
	              var node = position.node,
	                  offset = position.offset;
	              while (!(node instanceof Text) && node.childNodes.length > 0) {
	                if (node.childNodes.length > offset) {
	                  node = node.childNodes[offset];
	                  offset = 0;
	                } else if (node.childNodes.length === offset) {
	                  node = node.lastChild;
	                  offset = node instanceof Text ? node.data.length : node.childNodes.length + 1;
	                } else {
	                  break;
	                }
	              }
	              position.node = node, position.offset = offset;
	            });
	            return range;
	          }
	        }, {
	          key: 'rangeToNative',
	          value: function rangeToNative(range) {
	            var _this3 = this;
	
	            var indexes = range.collapsed ? [range.index] : [range.index, range.index + range.length];
	            var args = [];
	            var scrollLength = this.scroll.length();
	            indexes.forEach(function (index, i) {
	              index = Math.min(scrollLength - 1, index);
	              var node = void 0,
	                  _scroll$leaf5 = _this3.scroll.leaf(index),
	                  _scroll$leaf6 = _slicedToArray(_scroll$leaf5, 2),
	                  leaf = _scroll$leaf6[0],
	                  offset = _scroll$leaf6[1];
	              var _leaf$position5 = leaf.position(offset, i !== 0);
	
	              var _leaf$position6 = _slicedToArray(_leaf$position5, 2);
	
	              node = _leaf$position6[0];
	              offset = _leaf$position6[1];
	
	              args.push(node, offset);
	            });
	            if (args.length < 2) {
	              args = args.concat(args);
	            }
	            return args;
	          }
	        }, {
	          key: 'scrollIntoView',
	          value: function scrollIntoView(scrollingContainer) {
	            var range = this.lastRange;
	            if (range == null) return;
	            var bounds = this.getBounds(range.index, range.length);
	            if (bounds == null) return;
	            var limit = this.scroll.length() - 1;
	
	            var _scroll$line = this.scroll.line(Math.min(range.index, limit)),
	                _scroll$line2 = _slicedToArray(_scroll$line, 1),
	                first = _scroll$line2[0];
	
	            var last = first;
	            if (range.length > 0) {
	              var _scroll$line3 = this.scroll.line(Math.min(range.index + range.length, limit));
	
	              var _scroll$line4 = _slicedToArray(_scroll$line3, 1);
	
	              last = _scroll$line4[0];
	            }
	            if (first == null || last == null) return;
	            var scrollBounds = scrollingContainer.getBoundingClientRect();
	            if (bounds.top < scrollBounds.top) {
	              scrollingContainer.scrollTop -= scrollBounds.top - bounds.top;
	            } else if (bounds.bottom > scrollBounds.bottom) {
	              scrollingContainer.scrollTop += bounds.bottom - scrollBounds.bottom;
	            }
	          }
	        }, {
	          key: 'setNativeRange',
	          value: function setNativeRange(startNode, startOffset) {
	            var endNode = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : startNode;
	            var endOffset = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : startOffset;
	            var force = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;
	
	            debug.info('setNativeRange', startNode, startOffset, endNode, endOffset);
	            if (startNode != null && (this.root.parentNode == null || startNode.parentNode == null || endNode.parentNode == null)) {
	              return;
	            }
	            var selection = document.getSelection();
	            if (selection == null) return;
	            if (startNode != null) {
	              if (!this.hasFocus()) this.root.focus();
	              var native = (this.getNativeRange() || {}).native;
	              if (native == null || force || startNode !== native.startContainer || startOffset !== native.startOffset || endNode !== native.endContainer || endOffset !== native.endOffset) {
	
	                if (startNode.tagName == "BR") {
	                  startOffset = [].indexOf.call(startNode.parentNode.childNodes, startNode);
	                  startNode = startNode.parentNode;
	                }
	                if (endNode.tagName == "BR") {
	                  endOffset = [].indexOf.call(endNode.parentNode.childNodes, endNode);
	                  endNode = endNode.parentNode;
	                }
	                var range = document.createRange();
	                range.setStart(startNode, startOffset);
	                range.setEnd(endNode, endOffset);
	                selection.removeAllRanges();
	                selection.addRange(range);
	              }
	            } else {
	              selection.removeAllRanges();
	              this.root.blur();
	              document.body.focus(); // root.blur() not enough on IE11+Travis+SauceLabs (but not local VMs)
	            }
	          }
	        }, {
	          key: 'setRange',
	          value: function setRange(range) {
	            var force = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
	            var source = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : _emitter4.default.sources.API;
	
	            if (typeof force === 'string') {
	              source = force;
	              force = false;
	            }
	            debug.info('setRange', range);
	            if (range != null) {
	              var args = this.rangeToNative(range);
	              this.setNativeRange.apply(this, _toConsumableArray(args).concat([force]));
	            } else {
	              this.setNativeRange(null);
	            }
	            this.update(source);
	          }
	        }, {
	          key: 'update',
	          value: function update() {
	            var source = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _emitter4.default.sources.USER;
	
	            var oldRange = this.lastRange;
	
	            var _getRange = this.getRange(),
	                _getRange2 = _slicedToArray(_getRange, 2),
	                lastRange = _getRange2[0],
	                nativeRange = _getRange2[1];
	
	            this.fixInlineEmbed(nativeRange);
	            this.lastRange = lastRange;
	            if (this.lastRange != null) {
	              this.savedRange = this.lastRange;
	            }
	            if (!(0, _deepEqual2.default)(oldRange, this.lastRange)) {
	              var _emitter;
	
	              if (!this.composing && nativeRange != null && nativeRange.native.collapsed && nativeRange.start.node !== this.cursor.textNode) {
	                this.cursor.restore();
	              }
	              var args = [_emitter4.default.events.SELECTION_CHANGE, (0, _clone2.default)(this.lastRange), (0, _clone2.default)(oldRange), source];
	              (_emitter = this.emitter).emit.apply(_emitter, [_emitter4.default.events.EDITOR_CHANGE].concat(args));
	              if (source !== _emitter4.default.sources.SILENT) {
	                var _emitter2;
	
	                (_emitter2 = this.emitter).emit.apply(_emitter2, args);
	              }
	            }
	          }
	        }]);
	
	        return Selection;
	      }();
	
	      function contains(parent, descendant) {
	        try {
	          // Firefox inserts inaccessible nodes around video elements
	          descendant.parentNode;
	        } catch (e) {
	          return false;
	        }
	        // IE11 has bug with Text nodes
	        // https://connect.microsoft.com/IE/feedback/details/780874/node-contains-is-incorrect
	        if (descendant instanceof Text) {
	          descendant = descendant.parentNode;
	        }
	        return parent.contains(descendant);
	      }
	
	      exports.Range = Range;
	      exports.default = Selection;
	
	      /***/
	    },
	    /* 16 */
	    /***/function (module, exports, __webpack_require__) {
	
	      "use strict";
	
	      Object.defineProperty(exports, "__esModule", {
	        value: true
	      });
	
	      var _createClass = function () {
	        function defineProperties(target, props) {
	          for (var i = 0; i < props.length; i++) {
	            var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
	          }
	        }return function (Constructor, protoProps, staticProps) {
	          if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
	        };
	      }();
	
	      var _get = function get(object, property, receiver) {
	        if (object === null) object = Function.prototype;var desc = Object.getOwnPropertyDescriptor(object, property);if (desc === undefined) {
	          var parent = Object.getPrototypeOf(object);if (parent === null) {
	            return undefined;
	          } else {
	            return get(parent, property, receiver);
	          }
	        } else if ("value" in desc) {
	          return desc.value;
	        } else {
	          var getter = desc.get;if (getter === undefined) {
	            return undefined;
	          }return getter.call(receiver);
	        }
	      };
	
	      var _embed = __webpack_require__(5);
	
	      var _embed2 = _interopRequireDefault(_embed);
	
	      function _interopRequireDefault(obj) {
	        return obj && obj.__esModule ? obj : { default: obj };
	      }
	
	      function _classCallCheck(instance, Constructor) {
	        if (!(instance instanceof Constructor)) {
	          throw new TypeError("Cannot call a class as a function");
	        }
	      }
	
	      function _possibleConstructorReturn(self, call) {
	        if (!self) {
	          throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
	        }return call && ((typeof call === 'undefined' ? 'undefined' : _typeof2(call)) === "object" || typeof call === "function") ? call : self;
	      }
	
	      function _inherits(subClass, superClass) {
	        if (typeof superClass !== "function" && superClass !== null) {
	          throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === 'undefined' ? 'undefined' : _typeof2(superClass)));
	        }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
	      }
	
	      var Break = function (_Embed) {
	        _inherits(Break, _Embed);
	
	        function Break() {
	          _classCallCheck(this, Break);
	
	          return _possibleConstructorReturn(this, (Break.__proto__ || Object.getPrototypeOf(Break)).apply(this, arguments));
	        }
	
	        _createClass(Break, [{
	          key: 'insertInto',
	          value: function insertInto(parent, ref) {
	            if (parent.children.length === 0) {
	              _get(Break.prototype.__proto__ || Object.getPrototypeOf(Break.prototype), 'insertInto', this).call(this, parent, ref);
	            } else {
	              this.remove();
	            }
	          }
	        }, {
	          key: 'length',
	          value: function length() {
	            return 0;
	          }
	        }, {
	          key: 'value',
	          value: function value() {
	            return '';
	          }
	        }], [{
	          key: 'value',
	          value: function value() {
	            return undefined;
	          }
	        }]);
	
	        return Break;
	      }(_embed2.default);
	
	      Break.blotName = 'break';
	      Break.tagName = 'BR';
	
	      exports.default = Break;
	
	      /***/
	    },
	    /* 17 */
	    /***/function (module, exports, __webpack_require__) {
	
	      "use strict";
	
	      Object.defineProperty(exports, "__esModule", {
	        value: true
	      });
	      exports.default = exports.Code = undefined;
	
	      var _slicedToArray = function () {
	        function sliceIterator(arr, i) {
	          var _arr = [];var _n = true;var _d = false;var _e = undefined;try {
	            for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
	              _arr.push(_s.value);if (i && _arr.length === i) break;
	            }
	          } catch (err) {
	            _d = true;_e = err;
	          } finally {
	            try {
	              if (!_n && _i["return"]) _i["return"]();
	            } finally {
	              if (_d) throw _e;
	            }
	          }return _arr;
	        }return function (arr, i) {
	          if (Array.isArray(arr)) {
	            return arr;
	          } else if (Symbol.iterator in Object(arr)) {
	            return sliceIterator(arr, i);
	          } else {
	            throw new TypeError("Invalid attempt to destructure non-iterable instance");
	          }
	        };
	      }();
	
	      var _createClass = function () {
	        function defineProperties(target, props) {
	          for (var i = 0; i < props.length; i++) {
	            var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
	          }
	        }return function (Constructor, protoProps, staticProps) {
	          if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
	        };
	      }();
	
	      var _get = function get(object, property, receiver) {
	        if (object === null) object = Function.prototype;var desc = Object.getOwnPropertyDescriptor(object, property);if (desc === undefined) {
	          var parent = Object.getPrototypeOf(object);if (parent === null) {
	            return undefined;
	          } else {
	            return get(parent, property, receiver);
	          }
	        } else if ("value" in desc) {
	          return desc.value;
	        } else {
	          var getter = desc.get;if (getter === undefined) {
	            return undefined;
	          }return getter.call(receiver);
	        }
	      };
	
	      var _quillDelta = __webpack_require__(1);
	
	      var _quillDelta2 = _interopRequireDefault(_quillDelta);
	
	      var _parchment = __webpack_require__(0);
	
	      var _parchment2 = _interopRequireDefault(_parchment);
	
	      var _block = __webpack_require__(4);
	
	      var _block2 = _interopRequireDefault(_block);
	
	      var _inline = __webpack_require__(7);
	
	      var _inline2 = _interopRequireDefault(_inline);
	
	      var _text = __webpack_require__(8);
	
	      var _text2 = _interopRequireDefault(_text);
	
	      function _interopRequireDefault(obj) {
	        return obj && obj.__esModule ? obj : { default: obj };
	      }
	
	      function _classCallCheck(instance, Constructor) {
	        if (!(instance instanceof Constructor)) {
	          throw new TypeError("Cannot call a class as a function");
	        }
	      }
	
	      function _possibleConstructorReturn(self, call) {
	        if (!self) {
	          throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
	        }return call && ((typeof call === 'undefined' ? 'undefined' : _typeof2(call)) === "object" || typeof call === "function") ? call : self;
	      }
	
	      function _inherits(subClass, superClass) {
	        if (typeof superClass !== "function" && superClass !== null) {
	          throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === 'undefined' ? 'undefined' : _typeof2(superClass)));
	        }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
	      }
	
	      var Code = function (_Inline) {
	        _inherits(Code, _Inline);
	
	        function Code() {
	          _classCallCheck(this, Code);
	
	          return _possibleConstructorReturn(this, (Code.__proto__ || Object.getPrototypeOf(Code)).apply(this, arguments));
	        }
	
	        return Code;
	      }(_inline2.default);
	
	      Code.blotName = 'code';
	      Code.tagName = 'CODE';
	
	      var CodeBlock = function (_Block) {
	        _inherits(CodeBlock, _Block);
	
	        function CodeBlock() {
	          _classCallCheck(this, CodeBlock);
	
	          return _possibleConstructorReturn(this, (CodeBlock.__proto__ || Object.getPrototypeOf(CodeBlock)).apply(this, arguments));
	        }
	
	        _createClass(CodeBlock, [{
	          key: 'delta',
	          value: function delta() {
	            var _this3 = this;
	
	            var text = this.domNode.textContent;
	            if (text.endsWith('\n')) {
	              // Should always be true
	              text = text.slice(0, -1);
	            }
	            return text.split('\n').reduce(function (delta, frag) {
	              return delta.insert(frag).insert('\n', _this3.formats());
	            }, new _quillDelta2.default());
	          }
	        }, {
	          key: 'format',
	          value: function format(name, value) {
	            if (name === this.statics.blotName && value) return;
	
	            var _descendant = this.descendant(_text2.default, this.length() - 1),
	                _descendant2 = _slicedToArray(_descendant, 1),
	                text = _descendant2[0];
	
	            if (text != null) {
	              text.deleteAt(text.length() - 1, 1);
	            }
	            _get(CodeBlock.prototype.__proto__ || Object.getPrototypeOf(CodeBlock.prototype), 'format', this).call(this, name, value);
	          }
	        }, {
	          key: 'formatAt',
	          value: function formatAt(index, length, name, value) {
	            if (length === 0) return;
	            if (_parchment2.default.query(name, _parchment2.default.Scope.BLOCK) == null || name === this.statics.blotName && value === this.statics.formats(this.domNode)) {
	              return;
	            }
	            var nextNewline = this.newlineIndex(index);
	            if (nextNewline < 0 || nextNewline >= index + length) return;
	            var prevNewline = this.newlineIndex(index, true) + 1;
	            var isolateLength = nextNewline - prevNewline + 1;
	            var blot = this.isolate(prevNewline, isolateLength);
	            var next = blot.next;
	            blot.format(name, value);
	            if (next instanceof CodeBlock) {
	              next.formatAt(0, index - prevNewline + length - isolateLength, name, value);
	            }
	          }
	        }, {
	          key: 'insertAt',
	          value: function insertAt(index, value, def) {
	            if (def != null) return;
	
	            var _descendant3 = this.descendant(_text2.default, index),
	                _descendant4 = _slicedToArray(_descendant3, 2),
	                text = _descendant4[0],
	                offset = _descendant4[1];
	
	            text.insertAt(offset, value);
	          }
	        }, {
	          key: 'length',
	          value: function length() {
	            var length = this.domNode.textContent.length;
	            if (!this.domNode.textContent.endsWith('\n')) {
	              return length + 1;
	            }
	            return length;
	          }
	        }, {
	          key: 'newlineIndex',
	          value: function newlineIndex(searchIndex) {
	            var reverse = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
	
	            if (!reverse) {
	              var offset = this.domNode.textContent.slice(searchIndex).indexOf('\n');
	              return offset > -1 ? searchIndex + offset : -1;
	            } else {
	              return this.domNode.textContent.slice(0, searchIndex).lastIndexOf('\n');
	            }
	          }
	        }, {
	          key: 'optimize',
	          value: function optimize(context) {
	            if (!this.domNode.textContent.endsWith('\n')) {
	              this.appendChild(_parchment2.default.create('text', '\n'));
	            }
	            _get(CodeBlock.prototype.__proto__ || Object.getPrototypeOf(CodeBlock.prototype), 'optimize', this).call(this, context);
	            var next = this.next;
	            if (next != null && next.prev === this && next.statics.blotName === this.statics.blotName && this.statics.formats(this.domNode) === next.statics.formats(next.domNode)) {
	              next.optimize(context);
	              next.moveChildren(this);
	              next.remove();
	            }
	          }
	        }, {
	          key: 'replace',
	          value: function replace(target) {
	            _get(CodeBlock.prototype.__proto__ || Object.getPrototypeOf(CodeBlock.prototype), 'replace', this).call(this, target);
	            [].slice.call(this.domNode.querySelectorAll('*')).forEach(function (node) {
	              var blot = _parchment2.default.find(node);
	              if (blot == null) {
	                node.parentNode.removeChild(node);
	              } else if (blot instanceof _parchment2.default.Embed) {
	                blot.remove();
	              } else {
	                blot.unwrap();
	              }
	            });
	          }
	        }], [{
	          key: 'create',
	          value: function create(value) {
	            var domNode = _get(CodeBlock.__proto__ || Object.getPrototypeOf(CodeBlock), 'create', this).call(this, value);
	            domNode.setAttribute('spellcheck', false);
	            return domNode;
	          }
	        }, {
	          key: 'formats',
	          value: function formats() {
	            return true;
	          }
	        }]);
	
	        return CodeBlock;
	      }(_block2.default);
	
	      CodeBlock.blotName = 'code-block';
	      CodeBlock.tagName = 'PRE';
	      CodeBlock.TAB = '  ';
	
	      exports.Code = Code;
	      exports.default = CodeBlock;
	
	      /***/
	    },
	    /* 18 */
	    /***/function (module, exports, __webpack_require__) {
	
	      "use strict";
	
	      Object.defineProperty(exports, "__esModule", {
	        value: true
	      });
	
	      var _slicedToArray = function () {
	        function sliceIterator(arr, i) {
	          var _arr = [];var _n = true;var _d = false;var _e = undefined;try {
	            for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
	              _arr.push(_s.value);if (i && _arr.length === i) break;
	            }
	          } catch (err) {
	            _d = true;_e = err;
	          } finally {
	            try {
	              if (!_n && _i["return"]) _i["return"]();
	            } finally {
	              if (_d) throw _e;
	            }
	          }return _arr;
	        }return function (arr, i) {
	          if (Array.isArray(arr)) {
	            return arr;
	          } else if (Symbol.iterator in Object(arr)) {
	            return sliceIterator(arr, i);
	          } else {
	            throw new TypeError("Invalid attempt to destructure non-iterable instance");
	          }
	        };
	      }();
	
	      var _createClass = function () {
	        function defineProperties(target, props) {
	          for (var i = 0; i < props.length; i++) {
	            var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
	          }
	        }return function (Constructor, protoProps, staticProps) {
	          if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
	        };
	      }();
	
	      var _get = function get(object, property, receiver) {
	        if (object === null) object = Function.prototype;var desc = Object.getOwnPropertyDescriptor(object, property);if (desc === undefined) {
	          var parent = Object.getPrototypeOf(object);if (parent === null) {
	            return undefined;
	          } else {
	            return get(parent, property, receiver);
	          }
	        } else if ("value" in desc) {
	          return desc.value;
	        } else {
	          var getter = desc.get;if (getter === undefined) {
	            return undefined;
	          }return getter.call(receiver);
	        }
	      };
	
	      var _parchment = __webpack_require__(0);
	
	      var _parchment2 = _interopRequireDefault(_parchment);
	
	      var _emitter = __webpack_require__(9);
	
	      var _emitter2 = _interopRequireDefault(_emitter);
	
	      var _block = __webpack_require__(4);
	
	      var _block2 = _interopRequireDefault(_block);
	
	      var _break = __webpack_require__(16);
	
	      var _break2 = _interopRequireDefault(_break);
	
	      var _container = __webpack_require__(24);
	
	      var _container2 = _interopRequireDefault(_container);
	
	      var _code = __webpack_require__(17);
	
	      var _code2 = _interopRequireDefault(_code);
	
	      function _interopRequireDefault(obj) {
	        return obj && obj.__esModule ? obj : { default: obj };
	      }
	
	      function _classCallCheck(instance, Constructor) {
	        if (!(instance instanceof Constructor)) {
	          throw new TypeError("Cannot call a class as a function");
	        }
	      }
	
	      function _possibleConstructorReturn(self, call) {
	        if (!self) {
	          throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
	        }return call && ((typeof call === 'undefined' ? 'undefined' : _typeof2(call)) === "object" || typeof call === "function") ? call : self;
	      }
	
	      function _inherits(subClass, superClass) {
	        if (typeof superClass !== "function" && superClass !== null) {
	          throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === 'undefined' ? 'undefined' : _typeof2(superClass)));
	        }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
	      }
	
	      function isLine(blot) {
	        return blot instanceof _block2.default || blot instanceof _block.BlockEmbed;
	      }
	
	      var Scroll = function (_Parchment$Scroll) {
	        _inherits(Scroll, _Parchment$Scroll);
	
	        function Scroll(domNode, config) {
	          _classCallCheck(this, Scroll);
	
	          var _this = _possibleConstructorReturn(this, (Scroll.__proto__ || Object.getPrototypeOf(Scroll)).call(this, domNode));
	
	          _this.emitter = config.emitter;
	          if (Array.isArray(config.whitelist)) {
	            _this.whitelist = config.whitelist.reduce(function (whitelist, format) {
	              whitelist[format] = true;
	              return whitelist;
	            }, {});
	          }
	          // Some reason fixes composition issues with character languages in Windows/Chrome, Safari
	          _this.domNode.addEventListener('DOMNodeInserted', function () {});
	          _this.optimize();
	          _this.enable();
	          return _this;
	        }
	
	        _createClass(Scroll, [{
	          key: 'batchStart',
	          value: function batchStart() {
	            this.batch = true;
	          }
	        }, {
	          key: 'batchEnd',
	          value: function batchEnd() {
	            this.batch = false;
	            this.optimize();
	          }
	        }, {
	          key: 'deleteAt',
	          value: function deleteAt(index, length) {
	            var _line = this.line(index),
	                _line2 = _slicedToArray(_line, 2),
	                first = _line2[0],
	                offset = _line2[1];
	
	            var _line3 = this.line(index + length),
	                _line4 = _slicedToArray(_line3, 1),
	                last = _line4[0];
	
	            _get(Scroll.prototype.__proto__ || Object.getPrototypeOf(Scroll.prototype), 'deleteAt', this).call(this, index, length);
	            if (last != null && first !== last && offset > 0 && !(first instanceof _block.BlockEmbed) && !(last instanceof _block.BlockEmbed)) {
	              if (last instanceof _code2.default) {
	                last.deleteAt(last.length() - 1, 1);
	              }
	              var ref = last.children.head instanceof _break2.default ? null : last.children.head;
	              first.moveChildren(last, ref);
	              first.remove();
	            }
	            this.optimize();
	          }
	        }, {
	          key: 'enable',
	          value: function enable() {
	            var enabled = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;
	
	            this.domNode.setAttribute('contenteditable', enabled);
	          }
	        }, {
	          key: 'formatAt',
	          value: function formatAt(index, length, format, value) {
	            if (this.whitelist != null && !this.whitelist[format]) return;
	            _get(Scroll.prototype.__proto__ || Object.getPrototypeOf(Scroll.prototype), 'formatAt', this).call(this, index, length, format, value);
	            this.optimize();
	          }
	        }, {
	          key: 'insertAt',
	          value: function insertAt(index, value, def) {
	            if (def != null && this.whitelist != null && !this.whitelist[value]) return;
	            if (index >= this.length()) {
	              if (def == null || _parchment2.default.query(value, _parchment2.default.Scope.BLOCK) == null) {
	                var blot = _parchment2.default.create(this.statics.defaultChild);
	                this.appendChild(blot);
	                if (def == null && value.endsWith('\n')) {
	                  value = value.slice(0, -1);
	                }
	                blot.insertAt(0, value, def);
	              } else {
	                var embed = _parchment2.default.create(value, def);
	                this.appendChild(embed);
	              }
	            } else {
	              _get(Scroll.prototype.__proto__ || Object.getPrototypeOf(Scroll.prototype), 'insertAt', this).call(this, index, value, def);
	            }
	            this.optimize();
	          }
	        }, {
	          key: 'insertBefore',
	          value: function insertBefore(blot, ref) {
	            if (blot.statics.scope === _parchment2.default.Scope.INLINE_BLOT) {
	              var wrapper = _parchment2.default.create(this.statics.defaultChild);
	              wrapper.appendChild(blot);
	              blot = wrapper;
	            }
	            _get(Scroll.prototype.__proto__ || Object.getPrototypeOf(Scroll.prototype), 'insertBefore', this).call(this, blot, ref);
	          }
	        }, {
	          key: 'leaf',
	          value: function leaf(index) {
	            return this.path(index).pop() || [null, -1];
	          }
	        }, {
	          key: 'line',
	          value: function line(index) {
	            if (index === this.length()) {
	              return this.line(index - 1);
	            }
	            return this.descendant(isLine, index);
	          }
	        }, {
	          key: 'lines',
	          value: function lines() {
	            var index = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
	            var length = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : Number.MAX_VALUE;
	
	            var getLines = function getLines(blot, index, length) {
	              var lines = [],
	                  lengthLeft = length;
	              blot.children.forEachAt(index, length, function (child, index, length) {
	                if (isLine(child)) {
	                  lines.push(child);
	                } else if (child instanceof _parchment2.default.Container) {
	                  lines = lines.concat(getLines(child, index, lengthLeft));
	                }
	                lengthLeft -= length;
	              });
	              return lines;
	            };
	            return getLines(this, index, length);
	          }
	        }, {
	          key: 'optimize',
	          value: function optimize() {
	            var mutations = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
	            var context = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
	
	            if (this.batch === true) return;
	            _get(Scroll.prototype.__proto__ || Object.getPrototypeOf(Scroll.prototype), 'optimize', this).call(this, mutations, context);
	            if (mutations.length > 0) {
	              this.emitter.emit(_emitter2.default.events.SCROLL_OPTIMIZE, mutations, context);
	            }
	          }
	        }, {
	          key: 'path',
	          value: function path(index) {
	            return _get(Scroll.prototype.__proto__ || Object.getPrototypeOf(Scroll.prototype), 'path', this).call(this, index).slice(1); // Exclude self
	          }
	        }, {
	          key: 'update',
	          value: function update(mutations) {
	            if (this.batch === true) return;
	            var source = _emitter2.default.sources.USER;
	            if (typeof mutations === 'string') {
	              source = mutations;
	            }
	            if (!Array.isArray(mutations)) {
	              mutations = this.observer.takeRecords();
	            }
	            if (mutations.length > 0) {
	              this.emitter.emit(_emitter2.default.events.SCROLL_BEFORE_UPDATE, source, mutations);
	            }
	            _get(Scroll.prototype.__proto__ || Object.getPrototypeOf(Scroll.prototype), 'update', this).call(this, mutations.concat([])); // pass copy
	            if (mutations.length > 0) {
	              this.emitter.emit(_emitter2.default.events.SCROLL_UPDATE, source, mutations);
	            }
	          }
	        }]);
	
	        return Scroll;
	      }(_parchment2.default.Scroll);
	
	      Scroll.blotName = 'scroll';
	      Scroll.className = 'ql-editor';
	      Scroll.tagName = 'DIV';
	      Scroll.defaultChild = 'block';
	      Scroll.allowedChildren = [_block2.default, _block.BlockEmbed, _container2.default];
	
	      exports.default = Scroll;
	
	      /***/
	    },
	    /* 19 */
	    /***/function (module, exports) {
	
	      var clone = function () {
	        'use strict';
	
	        function _instanceof(obj, type) {
	          return type != null && obj instanceof type;
	        }
	
	        var nativeMap;
	        try {
	          nativeMap = Map;
	        } catch (_) {
	          // maybe a reference error because no `Map`. Give it a dummy value that no
	          // value will ever be an instanceof.
	          nativeMap = function nativeMap() {};
	        }
	
	        var nativeSet;
	        try {
	          nativeSet = Set;
	        } catch (_) {
	          nativeSet = function nativeSet() {};
	        }
	
	        var nativePromise;
	        try {
	          nativePromise = Promise;
	        } catch (_) {
	          nativePromise = function nativePromise() {};
	        }
	
	        /**
	         * Clones (copies) an Object using deep copying.
	         *
	         * This function supports circular references by default, but if you are certain
	         * there are no circular references in your object, you can save some CPU time
	         * by calling clone(obj, false).
	         *
	         * Caution: if `circular` is false and `parent` contains circular references,
	         * your program may enter an infinite loop and crash.
	         *
	         * @param `parent` - the object to be cloned
	         * @param `circular` - set to true if the object to be cloned may contain
	         *    circular references. (optional - true by default)
	         * @param `depth` - set to a number if the object is only to be cloned to
	         *    a particular depth. (optional - defaults to Infinity)
	         * @param `prototype` - sets the prototype to be used when cloning an object.
	         *    (optional - defaults to parent prototype).
	         * @param `includeNonEnumerable` - set to true if the non-enumerable properties
	         *    should be cloned as well. Non-enumerable properties on the prototype
	         *    chain will be ignored. (optional - false by default)
	        */
	        function clone(parent, circular, depth, prototype, includeNonEnumerable) {
	          if ((typeof circular === 'undefined' ? 'undefined' : _typeof2(circular)) === 'object') {
	            depth = circular.depth;
	            prototype = circular.prototype;
	            includeNonEnumerable = circular.includeNonEnumerable;
	            circular = circular.circular;
	          }
	          // maintain two arrays for circular references, where corresponding parents
	          // and children have the same index
	          var allParents = [];
	          var allChildren = [];
	
	          var useBuffer = typeof Buffer != 'undefined';
	
	          if (typeof circular == 'undefined') circular = true;
	
	          if (typeof depth == 'undefined') depth = Infinity;
	
	          // recurse this function so we don't reset allParents and allChildren
	          function _clone(parent, depth) {
	            // cloning null always returns null
	            if (parent === null) return null;
	
	            if (depth === 0) return parent;
	
	            var child;
	            var proto;
	            if ((typeof parent === 'undefined' ? 'undefined' : _typeof2(parent)) != 'object') {
	              return parent;
	            }
	
	            if (_instanceof(parent, nativeMap)) {
	              child = new nativeMap();
	            } else if (_instanceof(parent, nativeSet)) {
	              child = new nativeSet();
	            } else if (_instanceof(parent, nativePromise)) {
	              child = new nativePromise(function (resolve, reject) {
	                parent.then(function (value) {
	                  resolve(_clone(value, depth - 1));
	                }, function (err) {
	                  reject(_clone(err, depth - 1));
	                });
	              });
	            } else if (clone.__isArray(parent)) {
	              child = [];
	            } else if (clone.__isRegExp(parent)) {
	              child = new RegExp(parent.source, __getRegExpFlags(parent));
	              if (parent.lastIndex) child.lastIndex = parent.lastIndex;
	            } else if (clone.__isDate(parent)) {
	              child = new Date(parent.getTime());
	            } else if (useBuffer && Buffer.isBuffer(parent)) {
	              child = new Buffer(parent.length);
	              parent.copy(child);
	              return child;
	            } else if (_instanceof(parent, Error)) {
	              child = Object.create(parent);
	            } else {
	              if (typeof prototype == 'undefined') {
	                proto = Object.getPrototypeOf(parent);
	                child = Object.create(proto);
	              } else {
	                child = Object.create(prototype);
	                proto = prototype;
	              }
	            }
	
	            if (circular) {
	              var index = allParents.indexOf(parent);
	
	              if (index != -1) {
	                return allChildren[index];
	              }
	              allParents.push(parent);
	              allChildren.push(child);
	            }
	
	            if (_instanceof(parent, nativeMap)) {
	              parent.forEach(function (value, key) {
	                var keyChild = _clone(key, depth - 1);
	                var valueChild = _clone(value, depth - 1);
	                child.set(keyChild, valueChild);
	              });
	            }
	            if (_instanceof(parent, nativeSet)) {
	              parent.forEach(function (value) {
	                var entryChild = _clone(value, depth - 1);
	                child.add(entryChild);
	              });
	            }
	
	            for (var i in parent) {
	              var attrs;
	              if (proto) {
	                attrs = Object.getOwnPropertyDescriptor(proto, i);
	              }
	
	              if (attrs && attrs.set == null) {
	                continue;
	              }
	              child[i] = _clone(parent[i], depth - 1);
	            }
	
	            if (Object.getOwnPropertySymbols) {
	              var symbols = Object.getOwnPropertySymbols(parent);
	              for (var i = 0; i < symbols.length; i++) {
	                // Don't need to worry about cloning a symbol because it is a primitive,
	                // like a number or string.
	                var symbol = symbols[i];
	                var descriptor = Object.getOwnPropertyDescriptor(parent, symbol);
	                if (descriptor && !descriptor.enumerable && !includeNonEnumerable) {
	                  continue;
	                }
	                child[symbol] = _clone(parent[symbol], depth - 1);
	                if (!descriptor.enumerable) {
	                  Object.defineProperty(child, symbol, {
	                    enumerable: false
	                  });
	                }
	              }
	            }
	
	            if (includeNonEnumerable) {
	              var allPropertyNames = Object.getOwnPropertyNames(parent);
	              for (var i = 0; i < allPropertyNames.length; i++) {
	                var propertyName = allPropertyNames[i];
	                var descriptor = Object.getOwnPropertyDescriptor(parent, propertyName);
	                if (descriptor && descriptor.enumerable) {
	                  continue;
	                }
	                child[propertyName] = _clone(parent[propertyName], depth - 1);
	                Object.defineProperty(child, propertyName, {
	                  enumerable: false
	                });
	              }
	            }
	
	            return child;
	          }
	
	          return _clone(parent, depth);
	        }
	
	        /**
	         * Simple flat clone using prototype, accepts only objects, usefull for property
	         * override on FLAT configuration object (no nested props).
	         *
	         * USE WITH CAUTION! This may not behave as you wish if you do not know how this
	         * works.
	         */
	        clone.clonePrototype = function clonePrototype(parent) {
	          if (parent === null) return null;
	
	          var c = function c() {};
	          c.prototype = parent;
	          return new c();
	        };
	
	        // private utility functions
	
	        function __objToStr(o) {
	          return Object.prototype.toString.call(o);
	        }
	        clone.__objToStr = __objToStr;
	
	        function __isDate(o) {
	          return (typeof o === 'undefined' ? 'undefined' : _typeof2(o)) === 'object' && __objToStr(o) === '[object Date]';
	        }
	        clone.__isDate = __isDate;
	
	        function __isArray(o) {
	          return (typeof o === 'undefined' ? 'undefined' : _typeof2(o)) === 'object' && __objToStr(o) === '[object Array]';
	        }
	        clone.__isArray = __isArray;
	
	        function __isRegExp(o) {
	          return (typeof o === 'undefined' ? 'undefined' : _typeof2(o)) === 'object' && __objToStr(o) === '[object RegExp]';
	        }
	        clone.__isRegExp = __isRegExp;
	
	        function __getRegExpFlags(re) {
	          var flags = '';
	          if (re.global) flags += 'g';
	          if (re.ignoreCase) flags += 'i';
	          if (re.multiline) flags += 'm';
	          return flags;
	        }
	        clone.__getRegExpFlags = __getRegExpFlags;
	
	        return clone;
	      }();
	
	      if ((typeof module === 'undefined' ? 'undefined' : _typeof2(module)) === 'object' && module.exports) {
	        module.exports = clone;
	      }
	
	      /***/
	    },
	    /* 20 */
	    /***/function (module, exports, __webpack_require__) {
	
	      var equal = __webpack_require__(12);
	      var extend = __webpack_require__(3);
	
	      var lib = {
	        attributes: {
	          compose: function compose(a, b, keepNull) {
	            if ((typeof a === 'undefined' ? 'undefined' : _typeof2(a)) !== 'object') a = {};
	            if ((typeof b === 'undefined' ? 'undefined' : _typeof2(b)) !== 'object') b = {};
	            var attributes = extend(true, {}, b);
	            if (!keepNull) {
	              attributes = Object.keys(attributes).reduce(function (copy, key) {
	                if (attributes[key] != null) {
	                  copy[key] = attributes[key];
	                }
	                return copy;
	              }, {});
	            }
	            for (var key in a) {
	              if (a[key] !== undefined && b[key] === undefined) {
	                attributes[key] = a[key];
	              }
	            }
	            return Object.keys(attributes).length > 0 ? attributes : undefined;
	          },
	
	          diff: function diff(a, b) {
	            if ((typeof a === 'undefined' ? 'undefined' : _typeof2(a)) !== 'object') a = {};
	            if ((typeof b === 'undefined' ? 'undefined' : _typeof2(b)) !== 'object') b = {};
	            var attributes = Object.keys(a).concat(Object.keys(b)).reduce(function (attributes, key) {
	              if (!equal(a[key], b[key])) {
	                attributes[key] = b[key] === undefined ? null : b[key];
	              }
	              return attributes;
	            }, {});
	            return Object.keys(attributes).length > 0 ? attributes : undefined;
	          },
	
	          transform: function transform(a, b, priority) {
	            if ((typeof a === 'undefined' ? 'undefined' : _typeof2(a)) !== 'object') return b;
	            if ((typeof b === 'undefined' ? 'undefined' : _typeof2(b)) !== 'object') return undefined;
	            if (!priority) return b; // b simply overwrites us without priority
	            var attributes = Object.keys(b).reduce(function (attributes, key) {
	              if (a[key] === undefined) attributes[key] = b[key]; // null is a valid value
	              return attributes;
	            }, {});
	            return Object.keys(attributes).length > 0 ? attributes : undefined;
	          }
	        },
	
	        iterator: function iterator(ops) {
	          return new Iterator(ops);
	        },
	
	        length: function length(op) {
	          if (typeof op['delete'] === 'number') {
	            return op['delete'];
	          } else if (typeof op.retain === 'number') {
	            return op.retain;
	          } else {
	            return typeof op.insert === 'string' ? op.insert.length : 1;
	          }
	        }
	      };
	
	      function Iterator(ops) {
	        this.ops = ops;
	        this.index = 0;
	        this.offset = 0;
	      };
	
	      Iterator.prototype.hasNext = function () {
	        return this.peekLength() < Infinity;
	      };
	
	      Iterator.prototype.next = function (length) {
	        if (!length) length = Infinity;
	        var nextOp = this.ops[this.index];
	        if (nextOp) {
	          var offset = this.offset;
	          var opLength = lib.length(nextOp);
	          if (length >= opLength - offset) {
	            length = opLength - offset;
	            this.index += 1;
	            this.offset = 0;
	          } else {
	            this.offset += length;
	          }
	          if (typeof nextOp['delete'] === 'number') {
	            return { 'delete': length };
	          } else {
	            var retOp = {};
	            if (nextOp.attributes) {
	              retOp.attributes = nextOp.attributes;
	            }
	            if (typeof nextOp.retain === 'number') {
	              retOp.retain = length;
	            } else if (typeof nextOp.insert === 'string') {
	              retOp.insert = nextOp.insert.substr(offset, length);
	            } else {
	              // offset should === 0, length should === 1
	              retOp.insert = nextOp.insert;
	            }
	            return retOp;
	          }
	        } else {
	          return { retain: Infinity };
	        }
	      };
	
	      Iterator.prototype.peek = function () {
	        return this.ops[this.index];
	      };
	
	      Iterator.prototype.peekLength = function () {
	        if (this.ops[this.index]) {
	          // Should never return 0 if our index is being managed correctly
	          return lib.length(this.ops[this.index]) - this.offset;
	        } else {
	          return Infinity;
	        }
	      };
	
	      Iterator.prototype.peekType = function () {
	        if (this.ops[this.index]) {
	          if (typeof this.ops[this.index]['delete'] === 'number') {
	            return 'delete';
	          } else if (typeof this.ops[this.index].retain === 'number') {
	            return 'retain';
	          } else {
	            return 'insert';
	          }
	        }
	        return 'retain';
	      };
	
	      module.exports = lib;
	
	      /***/
	    },
	    /* 21 */
	    /***/function (module, exports, __webpack_require__) {
	
	      "use strict";
	
	      var __extends = this && this.__extends || function () {
	        var extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function (d, b) {
	          d.__proto__ = b;
	        } || function (d, b) {
	          for (var p in b) {
	            if (b.hasOwnProperty(p)) d[p] = b[p];
	          }
	        };
	        return function (d, b) {
	          extendStatics(d, b);
	          function __() {
	            this.constructor = d;
	          }
	          d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	        };
	      }();
	      Object.defineProperty(exports, "__esModule", { value: true });
	      var linked_list_1 = __webpack_require__(61);
	      var shadow_1 = __webpack_require__(35);
	      var Registry = __webpack_require__(2);
	      var ContainerBlot = function (_super) {
	        __extends(ContainerBlot, _super);
	        function ContainerBlot() {
	          return _super !== null && _super.apply(this, arguments) || this;
	        }
	        ContainerBlot.prototype.appendChild = function (other) {
	          this.insertBefore(other);
	        };
	        ContainerBlot.prototype.attach = function () {
	          var _this = this;
	          _super.prototype.attach.call(this);
	          this.children = new linked_list_1.default();
	          // Need to be reversed for if DOM nodes already in order
	          [].slice.call(this.domNode.childNodes).reverse().forEach(function (node) {
	            try {
	              var child = makeBlot(node);
	              _this.insertBefore(child, _this.children.head);
	            } catch (err) {
	              if (err instanceof Registry.ParchmentError) return;else throw err;
	            }
	          });
	        };
	        ContainerBlot.prototype.deleteAt = function (index, length) {
	          if (index === 0 && length === this.length()) {
	            return this.remove();
	          }
	          this.children.forEachAt(index, length, function (child, offset, length) {
	            child.deleteAt(offset, length);
	          });
	        };
	        ContainerBlot.prototype.descendant = function (criteria, index) {
	          var _a = this.children.find(index),
	              child = _a[0],
	              offset = _a[1];
	          if (criteria.blotName == null && criteria(child) || criteria.blotName != null && child instanceof criteria) {
	            return [child, offset];
	          } else if (child instanceof ContainerBlot) {
	            return child.descendant(criteria, offset);
	          } else {
	            return [null, -1];
	          }
	        };
	        ContainerBlot.prototype.descendants = function (criteria, index, length) {
	          if (index === void 0) {
	            index = 0;
	          }
	          if (length === void 0) {
	            length = Number.MAX_VALUE;
	          }
	          var descendants = [],
	              lengthLeft = length;
	          this.children.forEachAt(index, length, function (child, index, length) {
	            if (criteria.blotName == null && criteria(child) || criteria.blotName != null && child instanceof criteria) {
	              descendants.push(child);
	            }
	            if (child instanceof ContainerBlot) {
	              descendants = descendants.concat(child.descendants(criteria, index, lengthLeft));
	            }
	            lengthLeft -= length;
	          });
	          return descendants;
	        };
	        ContainerBlot.prototype.detach = function () {
	          this.children.forEach(function (child) {
	            child.detach();
	          });
	          _super.prototype.detach.call(this);
	        };
	        ContainerBlot.prototype.formatAt = function (index, length, name, value) {
	          this.children.forEachAt(index, length, function (child, offset, length) {
	            child.formatAt(offset, length, name, value);
	          });
	        };
	        ContainerBlot.prototype.insertAt = function (index, value, def) {
	          var _a = this.children.find(index),
	              child = _a[0],
	              offset = _a[1];
	          if (child) {
	            child.insertAt(offset, value, def);
	          } else {
	            var blot = def == null ? Registry.create('text', value) : Registry.create(value, def);
	            this.appendChild(blot);
	          }
	        };
	        ContainerBlot.prototype.insertBefore = function (childBlot, refBlot) {
	          if (this.statics.allowedChildren != null && !this.statics.allowedChildren.some(function (child) {
	            return childBlot instanceof child;
	          })) {
	            throw new Registry.ParchmentError("Cannot insert " + childBlot.statics.blotName + " into " + this.statics.blotName);
	          }
	          childBlot.insertInto(this, refBlot);
	        };
	        ContainerBlot.prototype.length = function () {
	          return this.children.reduce(function (memo, child) {
	            return memo + child.length();
	          }, 0);
	        };
	        ContainerBlot.prototype.moveChildren = function (targetParent, refNode) {
	          this.children.forEach(function (child) {
	            targetParent.insertBefore(child, refNode);
	          });
	        };
	        ContainerBlot.prototype.optimize = function (context) {
	          _super.prototype.optimize.call(this, context);
	          if (this.children.length === 0) {
	            if (this.statics.defaultChild != null) {
	              var child = Registry.create(this.statics.defaultChild);
	              this.appendChild(child);
	              child.optimize(context);
	            } else {
	              this.remove();
	            }
	          }
	        };
	        ContainerBlot.prototype.path = function (index, inclusive) {
	          if (inclusive === void 0) {
	            inclusive = false;
	          }
	          var _a = this.children.find(index, inclusive),
	              child = _a[0],
	              offset = _a[1];
	          var position = [[this, index]];
	          if (child instanceof ContainerBlot) {
	            return position.concat(child.path(offset, inclusive));
	          } else if (child != null) {
	            position.push([child, offset]);
	          }
	          return position;
	        };
	        ContainerBlot.prototype.removeChild = function (child) {
	          this.children.remove(child);
	        };
	        ContainerBlot.prototype.replace = function (target) {
	          if (target instanceof ContainerBlot) {
	            target.moveChildren(this);
	          }
	          _super.prototype.replace.call(this, target);
	        };
	        ContainerBlot.prototype.split = function (index, force) {
	          if (force === void 0) {
	            force = false;
	          }
	          if (!force) {
	            if (index === 0) return this;
	            if (index === this.length()) return this.next;
	          }
	          var after = this.clone();
	          this.parent.insertBefore(after, this.next);
	          this.children.forEachAt(index, this.length(), function (child, offset, length) {
	            child = child.split(offset, force);
	            after.appendChild(child);
	          });
	          return after;
	        };
	        ContainerBlot.prototype.unwrap = function () {
	          this.moveChildren(this.parent, this.next);
	          this.remove();
	        };
	        ContainerBlot.prototype.update = function (mutations, context) {
	          var _this = this;
	          var addedNodes = [],
	              removedNodes = [];
	          mutations.forEach(function (mutation) {
	            if (mutation.target === _this.domNode && mutation.type === 'childList') {
	              addedNodes.push.apply(addedNodes, mutation.addedNodes);
	              removedNodes.push.apply(removedNodes, mutation.removedNodes);
	            }
	          });
	          removedNodes.forEach(function (node) {
	            // Check node has actually been removed
	            // One exception is Chrome does not immediately remove IFRAMEs
	            // from DOM but MutationRecord is correct in its reported removal
	            if (node.parentNode != null && node.tagName !== 'IFRAME' && document.body.compareDocumentPosition(node) & Node.DOCUMENT_POSITION_CONTAINED_BY) {
	              return;
	            }
	            var blot = Registry.find(node);
	            if (blot == null) return;
	            if (blot.domNode.parentNode == null || blot.domNode.parentNode === _this.domNode) {
	              blot.detach();
	            }
	          });
	          addedNodes.filter(function (node) {
	            return node.parentNode == _this.domNode;
	          }).sort(function (a, b) {
	            if (a === b) return 0;
	            if (a.compareDocumentPosition(b) & Node.DOCUMENT_POSITION_FOLLOWING) {
	              return 1;
	            }
	            return -1;
	          }).forEach(function (node) {
	            var refBlot = null;
	            if (node.nextSibling != null) {
	              refBlot = Registry.find(node.nextSibling);
	            }
	            var blot = makeBlot(node);
	            if (blot.next != refBlot || blot.next == null) {
	              if (blot.parent != null) {
	                blot.parent.removeChild(_this);
	              }
	              _this.insertBefore(blot, refBlot);
	            }
	          });
	        };
	        return ContainerBlot;
	      }(shadow_1.default);
	      function makeBlot(node) {
	        var blot = Registry.find(node);
	        if (blot == null) {
	          try {
	            blot = Registry.create(node);
	          } catch (e) {
	            blot = Registry.create(Registry.Scope.INLINE);
	            [].slice.call(node.childNodes).forEach(function (child) {
	              blot.domNode.appendChild(child);
	            });
	            node.parentNode.replaceChild(blot.domNode, node);
	            blot.attach();
	          }
	        }
	        return blot;
	      }
	      exports.default = ContainerBlot;
	
	      /***/
	    },
	    /* 22 */
	    /***/function (module, exports, __webpack_require__) {
	
	      "use strict";
	
	      var __extends = this && this.__extends || function () {
	        var extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function (d, b) {
	          d.__proto__ = b;
	        } || function (d, b) {
	          for (var p in b) {
	            if (b.hasOwnProperty(p)) d[p] = b[p];
	          }
	        };
	        return function (d, b) {
	          extendStatics(d, b);
	          function __() {
	            this.constructor = d;
	          }
	          d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	        };
	      }();
	      Object.defineProperty(exports, "__esModule", { value: true });
	      var attributor_1 = __webpack_require__(13);
	      var store_1 = __webpack_require__(33);
	      var container_1 = __webpack_require__(21);
	      var Registry = __webpack_require__(2);
	      var FormatBlot = function (_super) {
	        __extends(FormatBlot, _super);
	        function FormatBlot() {
	          return _super !== null && _super.apply(this, arguments) || this;
	        }
	        FormatBlot.formats = function (domNode) {
	          if (typeof this.tagName === 'string') {
	            return true;
	          } else if (Array.isArray(this.tagName)) {
	            return domNode.tagName.toLowerCase();
	          }
	          return undefined;
	        };
	        FormatBlot.prototype.attach = function () {
	          _super.prototype.attach.call(this);
	          this.attributes = new store_1.default(this.domNode);
	        };
	        FormatBlot.prototype.format = function (name, value) {
	          var format = Registry.query(name);
	          if (format instanceof attributor_1.default) {
	            this.attributes.attribute(format, value);
	          } else if (value) {
	            if (format != null && (name !== this.statics.blotName || this.formats()[name] !== value)) {
	              this.replaceWith(name, value);
	            }
	          }
	        };
	        FormatBlot.prototype.formats = function () {
	          var formats = this.attributes.values();
	          var format = this.statics.formats(this.domNode);
	          if (format != null) {
	            formats[this.statics.blotName] = format;
	          }
	          return formats;
	        };
	        FormatBlot.prototype.replaceWith = function (name, value) {
	          var replacement = _super.prototype.replaceWith.call(this, name, value);
	          this.attributes.copy(replacement);
	          return replacement;
	        };
	        FormatBlot.prototype.update = function (mutations, context) {
	          var _this = this;
	          _super.prototype.update.call(this, mutations, context);
	          if (mutations.some(function (mutation) {
	            return mutation.target === _this.domNode && mutation.type === 'attributes';
	          })) {
	            this.attributes.build();
	          }
	        };
	        FormatBlot.prototype.wrap = function (name, value) {
	          var wrapper = _super.prototype.wrap.call(this, name, value);
	          if (wrapper instanceof FormatBlot && wrapper.statics.scope === this.statics.scope) {
	            this.attributes.move(wrapper);
	          }
	          return wrapper;
	        };
	        return FormatBlot;
	      }(container_1.default);
	      exports.default = FormatBlot;
	
	      /***/
	    },
	    /* 23 */
	    /***/function (module, exports, __webpack_require__) {
	
	      "use strict";
	
	      var __extends = this && this.__extends || function () {
	        var extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function (d, b) {
	          d.__proto__ = b;
	        } || function (d, b) {
	          for (var p in b) {
	            if (b.hasOwnProperty(p)) d[p] = b[p];
	          }
	        };
	        return function (d, b) {
	          extendStatics(d, b);
	          function __() {
	            this.constructor = d;
	          }
	          d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	        };
	      }();
	      Object.defineProperty(exports, "__esModule", { value: true });
	      var shadow_1 = __webpack_require__(35);
	      var Registry = __webpack_require__(2);
	      var LeafBlot = function (_super) {
	        __extends(LeafBlot, _super);
	        function LeafBlot() {
	          return _super !== null && _super.apply(this, arguments) || this;
	        }
	        LeafBlot.value = function (domNode) {
	          return true;
	        };
	        LeafBlot.prototype.index = function (node, offset) {
	          if (this.domNode === node || this.domNode.compareDocumentPosition(node) & Node.DOCUMENT_POSITION_CONTAINED_BY) {
	            return Math.min(offset, 1);
	          }
	          return -1;
	        };
	        LeafBlot.prototype.position = function (index, inclusive) {
	          var offset = [].indexOf.call(this.parent.domNode.childNodes, this.domNode);
	          if (index > 0) offset += 1;
	          return [this.parent.domNode, offset];
	        };
	        LeafBlot.prototype.value = function () {
	          return _a = {}, _a[this.statics.blotName] = this.statics.value(this.domNode) || true, _a;
	          var _a;
	        };
	        return LeafBlot;
	      }(shadow_1.default);
	      LeafBlot.scope = Registry.Scope.INLINE_BLOT;
	      exports.default = LeafBlot;
	
	      /***/
	    },
	    /* 24 */
	    /***/function (module, exports, __webpack_require__) {
	
	      "use strict";
	
	      Object.defineProperty(exports, "__esModule", {
	        value: true
	      });
	
	      var _parchment = __webpack_require__(0);
	
	      var _parchment2 = _interopRequireDefault(_parchment);
	
	      var _block = __webpack_require__(4);
	
	      var _block2 = _interopRequireDefault(_block);
	
	      function _interopRequireDefault(obj) {
	        return obj && obj.__esModule ? obj : { default: obj };
	      }
	
	      function _classCallCheck(instance, Constructor) {
	        if (!(instance instanceof Constructor)) {
	          throw new TypeError("Cannot call a class as a function");
	        }
	      }
	
	      function _possibleConstructorReturn(self, call) {
	        if (!self) {
	          throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
	        }return call && ((typeof call === 'undefined' ? 'undefined' : _typeof2(call)) === "object" || typeof call === "function") ? call : self;
	      }
	
	      function _inherits(subClass, superClass) {
	        if (typeof superClass !== "function" && superClass !== null) {
	          throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === 'undefined' ? 'undefined' : _typeof2(superClass)));
	        }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
	      }
	
	      var Container = function (_Parchment$Container) {
	        _inherits(Container, _Parchment$Container);
	
	        function Container() {
	          _classCallCheck(this, Container);
	
	          return _possibleConstructorReturn(this, (Container.__proto__ || Object.getPrototypeOf(Container)).apply(this, arguments));
	        }
	
	        return Container;
	      }(_parchment2.default.Container);
	
	      Container.allowedChildren = [_block2.default, _block.BlockEmbed, Container];
	
	      exports.default = Container;
	
	      /***/
	    },
	    /* 25 */
	    /***/function (module, exports, __webpack_require__) {
	
	      "use strict";
	
	      Object.defineProperty(exports, "__esModule", {
	        value: true
	      });
	
	      var _slicedToArray = function () {
	        function sliceIterator(arr, i) {
	          var _arr = [];var _n = true;var _d = false;var _e = undefined;try {
	            for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
	              _arr.push(_s.value);if (i && _arr.length === i) break;
	            }
	          } catch (err) {
	            _d = true;_e = err;
	          } finally {
	            try {
	              if (!_n && _i["return"]) _i["return"]();
	            } finally {
	              if (_d) throw _e;
	            }
	          }return _arr;
	        }return function (arr, i) {
	          if (Array.isArray(arr)) {
	            return arr;
	          } else if (Symbol.iterator in Object(arr)) {
	            return sliceIterator(arr, i);
	          } else {
	            throw new TypeError("Invalid attempt to destructure non-iterable instance");
	          }
	        };
	      }();
	
	      var _get = function get(object, property, receiver) {
	        if (object === null) object = Function.prototype;var desc = Object.getOwnPropertyDescriptor(object, property);if (desc === undefined) {
	          var parent = Object.getPrototypeOf(object);if (parent === null) {
	            return undefined;
	          } else {
	            return get(parent, property, receiver);
	          }
	        } else if ("value" in desc) {
	          return desc.value;
	        } else {
	          var getter = desc.get;if (getter === undefined) {
	            return undefined;
	          }return getter.call(receiver);
	        }
	      };
	
	      var _createClass = function () {
	        function defineProperties(target, props) {
	          for (var i = 0; i < props.length; i++) {
	            var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
	          }
	        }return function (Constructor, protoProps, staticProps) {
	          if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
	        };
	      }();
	
	      var _parchment = __webpack_require__(0);
	
	      var _parchment2 = _interopRequireDefault(_parchment);
	
	      var _embed = __webpack_require__(5);
	
	      var _embed2 = _interopRequireDefault(_embed);
	
	      var _text = __webpack_require__(8);
	
	      var _text2 = _interopRequireDefault(_text);
	
	      function _interopRequireDefault(obj) {
	        return obj && obj.__esModule ? obj : { default: obj };
	      }
	
	      function _classCallCheck(instance, Constructor) {
	        if (!(instance instanceof Constructor)) {
	          throw new TypeError("Cannot call a class as a function");
	        }
	      }
	
	      function _possibleConstructorReturn(self, call) {
	        if (!self) {
	          throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
	        }return call && ((typeof call === 'undefined' ? 'undefined' : _typeof2(call)) === "object" || typeof call === "function") ? call : self;
	      }
	
	      function _inherits(subClass, superClass) {
	        if (typeof superClass !== "function" && superClass !== null) {
	          throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === 'undefined' ? 'undefined' : _typeof2(superClass)));
	        }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
	      }
	
	      var Cursor = function (_Embed) {
	        _inherits(Cursor, _Embed);
	
	        _createClass(Cursor, null, [{
	          key: 'value',
	          value: function value() {
	            return undefined;
	          }
	        }]);
	
	        function Cursor(domNode, selection) {
	          _classCallCheck(this, Cursor);
	
	          var _this = _possibleConstructorReturn(this, (Cursor.__proto__ || Object.getPrototypeOf(Cursor)).call(this, domNode));
	
	          _this.selection = selection;
	          _this.textNode = document.createTextNode(Cursor.CONTENTS);
	          _this.domNode.appendChild(_this.textNode);
	          _this._length = 0;
	          return _this;
	        }
	
	        _createClass(Cursor, [{
	          key: 'detach',
	          value: function detach() {
	            // super.detach() will also clear domNode.__blot
	            if (this.parent != null) this.parent.removeChild(this);
	          }
	        }, {
	          key: 'format',
	          value: function format(name, value) {
	            if (this._length !== 0) {
	              return _get(Cursor.prototype.__proto__ || Object.getPrototypeOf(Cursor.prototype), 'format', this).call(this, name, value);
	            }
	            var target = this,
	                index = 0;
	            while (target != null && target.statics.scope !== _parchment2.default.Scope.BLOCK_BLOT) {
	              index += target.offset(target.parent);
	              target = target.parent;
	            }
	            if (target != null) {
	              this._length = Cursor.CONTENTS.length;
	              target.optimize();
	              target.formatAt(index, Cursor.CONTENTS.length, name, value);
	              this._length = 0;
	            }
	          }
	        }, {
	          key: 'index',
	          value: function index(node, offset) {
	            if (node === this.textNode) return 0;
	            return _get(Cursor.prototype.__proto__ || Object.getPrototypeOf(Cursor.prototype), 'index', this).call(this, node, offset);
	          }
	        }, {
	          key: 'length',
	          value: function length() {
	            return this._length;
	          }
	        }, {
	          key: 'position',
	          value: function position() {
	            return [this.textNode, this.textNode.data.length];
	          }
	        }, {
	          key: 'remove',
	          value: function remove() {
	            _get(Cursor.prototype.__proto__ || Object.getPrototypeOf(Cursor.prototype), 'remove', this).call(this);
	            this.parent = null;
	          }
	        }, {
	          key: 'restore',
	          value: function restore() {
	            if (this.selection.composing || this.parent == null) return;
	            var textNode = this.textNode;
	            var range = this.selection.getNativeRange();
	            var restoreText = void 0,
	                start = void 0,
	                end = void 0;
	            if (range != null && range.start.node === textNode && range.end.node === textNode) {
	              var _ref = [textNode, range.start.offset, range.end.offset];
	              restoreText = _ref[0];
	              start = _ref[1];
	              end = _ref[2];
	            }
	            // Link format will insert text outside of anchor tag
	            while (this.domNode.lastChild != null && this.domNode.lastChild !== this.textNode) {
	              this.domNode.parentNode.insertBefore(this.domNode.lastChild, this.domNode);
	            }
	            if (this.textNode.data !== Cursor.CONTENTS) {
	              var text = this.textNode.data.split(Cursor.CONTENTS).join('');
	              if (this.next instanceof _text2.default) {
	                restoreText = this.next.domNode;
	                this.next.insertAt(0, text);
	                this.textNode.data = Cursor.CONTENTS;
	              } else {
	                this.textNode.data = text;
	                this.parent.insertBefore(_parchment2.default.create(this.textNode), this);
	                this.textNode = document.createTextNode(Cursor.CONTENTS);
	                this.domNode.appendChild(this.textNode);
	              }
	            }
	            this.remove();
	            if (start != null) {
	              var _map = [start, end].map(function (offset) {
	                return Math.max(0, Math.min(restoreText.data.length, offset - 1));
	              });
	
	              var _map2 = _slicedToArray(_map, 2);
	
	              start = _map2[0];
	              end = _map2[1];
	
	              return {
	                startNode: restoreText,
	                startOffset: start,
	                endNode: restoreText,
	                endOffset: end
	              };
	            }
	          }
	        }, {
	          key: 'update',
	          value: function update(mutations, context) {
	            var _this2 = this;
	
	            if (mutations.some(function (mutation) {
	              return mutation.type === 'characterData' && mutation.target === _this2.textNode;
	            })) {
	              var range = this.restore();
	              if (range) context.range = range;
	            }
	          }
	        }, {
	          key: 'value',
	          value: function value() {
	            return '';
	          }
	        }]);
	
	        return Cursor;
	      }(_embed2.default);
	
	      Cursor.blotName = 'cursor';
	      Cursor.className = 'ql-cursor';
	      Cursor.tagName = 'span';
	      Cursor.CONTENTS = '\uFEFF'; // Zero width no break space
	
	
	      exports.default = Cursor;
	
	      /***/
	    },
	    /* 26 */
	    /***/function (module, exports, __webpack_require__) {
	
	      "use strict";
	
	      Object.defineProperty(exports, "__esModule", {
	        value: true
	      });
	      exports.ColorStyle = exports.ColorClass = exports.ColorAttributor = undefined;
	
	      var _createClass = function () {
	        function defineProperties(target, props) {
	          for (var i = 0; i < props.length; i++) {
	            var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
	          }
	        }return function (Constructor, protoProps, staticProps) {
	          if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
	        };
	      }();
	
	      var _get = function get(object, property, receiver) {
	        if (object === null) object = Function.prototype;var desc = Object.getOwnPropertyDescriptor(object, property);if (desc === undefined) {
	          var parent = Object.getPrototypeOf(object);if (parent === null) {
	            return undefined;
	          } else {
	            return get(parent, property, receiver);
	          }
	        } else if ("value" in desc) {
	          return desc.value;
	        } else {
	          var getter = desc.get;if (getter === undefined) {
	            return undefined;
	          }return getter.call(receiver);
	        }
	      };
	
	      var _parchment = __webpack_require__(0);
	
	      var _parchment2 = _interopRequireDefault(_parchment);
	
	      function _interopRequireDefault(obj) {
	        return obj && obj.__esModule ? obj : { default: obj };
	      }
	
	      function _classCallCheck(instance, Constructor) {
	        if (!(instance instanceof Constructor)) {
	          throw new TypeError("Cannot call a class as a function");
	        }
	      }
	
	      function _possibleConstructorReturn(self, call) {
	        if (!self) {
	          throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
	        }return call && ((typeof call === 'undefined' ? 'undefined' : _typeof2(call)) === "object" || typeof call === "function") ? call : self;
	      }
	
	      function _inherits(subClass, superClass) {
	        if (typeof superClass !== "function" && superClass !== null) {
	          throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === 'undefined' ? 'undefined' : _typeof2(superClass)));
	        }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
	      }
	
	      var ColorAttributor = function (_Parchment$Attributor) {
	        _inherits(ColorAttributor, _Parchment$Attributor);
	
	        function ColorAttributor() {
	          _classCallCheck(this, ColorAttributor);
	
	          return _possibleConstructorReturn(this, (ColorAttributor.__proto__ || Object.getPrototypeOf(ColorAttributor)).apply(this, arguments));
	        }
	
	        _createClass(ColorAttributor, [{
	          key: 'value',
	          value: function value(domNode) {
	            var value = _get(ColorAttributor.prototype.__proto__ || Object.getPrototypeOf(ColorAttributor.prototype), 'value', this).call(this, domNode);
	            if (!value.startsWith('rgb(')) return value;
	            value = value.replace(/^[^\d]+/, '').replace(/[^\d]+$/, '');
	            return '#' + value.split(',').map(function (component) {
	              return ('00' + parseInt(component).toString(16)).slice(-2);
	            }).join('');
	          }
	        }]);
	
	        return ColorAttributor;
	      }(_parchment2.default.Attributor.Style);
	
	      var ColorClass = new _parchment2.default.Attributor.Class('color', 'ql-color', {
	        scope: _parchment2.default.Scope.INLINE
	      });
	      var ColorStyle = new ColorAttributor('color', 'color', {
	        scope: _parchment2.default.Scope.INLINE
	      });
	
	      exports.ColorAttributor = ColorAttributor;
	      exports.ColorClass = ColorClass;
	      exports.ColorStyle = ColorStyle;
	
	      /***/
	    },
	    /* 27 */
	    /***/function (module, exports, __webpack_require__) {
	
	      "use strict";
	
	      Object.defineProperty(exports, "__esModule", {
	        value: true
	      });
	      exports.sanitize = exports.default = undefined;
	
	      var _createClass = function () {
	        function defineProperties(target, props) {
	          for (var i = 0; i < props.length; i++) {
	            var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
	          }
	        }return function (Constructor, protoProps, staticProps) {
	          if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
	        };
	      }();
	
	      var _get = function get(object, property, receiver) {
	        if (object === null) object = Function.prototype;var desc = Object.getOwnPropertyDescriptor(object, property);if (desc === undefined) {
	          var parent = Object.getPrototypeOf(object);if (parent === null) {
	            return undefined;
	          } else {
	            return get(parent, property, receiver);
	          }
	        } else if ("value" in desc) {
	          return desc.value;
	        } else {
	          var getter = desc.get;if (getter === undefined) {
	            return undefined;
	          }return getter.call(receiver);
	        }
	      };
	
	      var _inline = __webpack_require__(7);
	
	      var _inline2 = _interopRequireDefault(_inline);
	
	      function _interopRequireDefault(obj) {
	        return obj && obj.__esModule ? obj : { default: obj };
	      }
	
	      function _classCallCheck(instance, Constructor) {
	        if (!(instance instanceof Constructor)) {
	          throw new TypeError("Cannot call a class as a function");
	        }
	      }
	
	      function _possibleConstructorReturn(self, call) {
	        if (!self) {
	          throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
	        }return call && ((typeof call === 'undefined' ? 'undefined' : _typeof2(call)) === "object" || typeof call === "function") ? call : self;
	      }
	
	      function _inherits(subClass, superClass) {
	        if (typeof superClass !== "function" && superClass !== null) {
	          throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === 'undefined' ? 'undefined' : _typeof2(superClass)));
	        }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
	      }
	
	      var Link = function (_Inline) {
	        _inherits(Link, _Inline);
	
	        function Link() {
	          _classCallCheck(this, Link);
	
	          return _possibleConstructorReturn(this, (Link.__proto__ || Object.getPrototypeOf(Link)).apply(this, arguments));
	        }
	
	        _createClass(Link, [{
	          key: 'format',
	          value: function format(name, value) {
	            if (name !== this.statics.blotName || !value) return _get(Link.prototype.__proto__ || Object.getPrototypeOf(Link.prototype), 'format', this).call(this, name, value);
	            value = this.constructor.sanitize(value);
	            this.domNode.setAttribute('href', value);
	          }
	        }], [{
	          key: 'create',
	          value: function create(value) {
	            var node = _get(Link.__proto__ || Object.getPrototypeOf(Link), 'create', this).call(this, value);
	            value = this.sanitize(value);
	            node.setAttribute('href', value);
	            node.setAttribute('target', '_blank');
	            return node;
	          }
	        }, {
	          key: 'formats',
	          value: function formats(domNode) {
	            return domNode.getAttribute('href');
	          }
	        }, {
	          key: 'sanitize',
	          value: function sanitize(url) {
	            return _sanitize(url, this.PROTOCOL_WHITELIST) ? url : this.SANITIZED_URL;
	          }
	        }]);
	
	        return Link;
	      }(_inline2.default);
	
	      Link.blotName = 'link';
	      Link.tagName = 'A';
	      Link.SANITIZED_URL = 'about:blank';
	      Link.PROTOCOL_WHITELIST = ['http', 'https', 'mailto', 'tel'];
	
	      function _sanitize(url, protocols) {
	        var anchor = document.createElement('a');
	        anchor.href = url;
	        var protocol = anchor.href.slice(0, anchor.href.indexOf(':'));
	        return protocols.indexOf(protocol) > -1;
	      }
	
	      exports.default = Link;
	      exports.sanitize = _sanitize;
	
	      /***/
	    },
	    /* 28 */
	    /***/function (module, exports, __webpack_require__) {
	
	      "use strict";
	
	      Object.defineProperty(exports, "__esModule", {
	        value: true
	      });
	
	      var _typeof = typeof Symbol === "function" && _typeof2(Symbol.iterator) === "symbol" ? function (obj) {
	        return typeof obj === 'undefined' ? 'undefined' : _typeof2(obj);
	      } : function (obj) {
	        return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj === 'undefined' ? 'undefined' : _typeof2(obj);
	      };
	
	      var _createClass = function () {
	        function defineProperties(target, props) {
	          for (var i = 0; i < props.length; i++) {
	            var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
	          }
	        }return function (Constructor, protoProps, staticProps) {
	          if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
	        };
	      }();
	
	      var _dropdown = __webpack_require__(88);
	
	      var _dropdown2 = _interopRequireDefault(_dropdown);
	
	      function _interopRequireDefault(obj) {
	        return obj && obj.__esModule ? obj : { default: obj };
	      }
	
	      function _classCallCheck(instance, Constructor) {
	        if (!(instance instanceof Constructor)) {
	          throw new TypeError("Cannot call a class as a function");
	        }
	      }
	
	      var Picker = function () {
	        function Picker(select) {
	          var _this = this;
	
	          _classCallCheck(this, Picker);
	
	          this.select = select;
	          this.container = document.createElement('span');
	          this.buildPicker();
	          this.select.style.display = 'none';
	          this.select.parentNode.insertBefore(this.container, this.select);
	          this.label.addEventListener('mousedown', function () {
	            _this.container.classList.toggle('ql-expanded');
	          });
	          this.select.addEventListener('change', this.update.bind(this));
	        }
	
	        _createClass(Picker, [{
	          key: 'buildItem',
	          value: function buildItem(option) {
	            var _this2 = this;
	
	            var item = document.createElement('span');
	            item.classList.add('ql-picker-item');
	            if (option.hasAttribute('value')) {
	              item.setAttribute('data-value', option.getAttribute('value'));
	            }
	            if (option.textContent) {
	              item.setAttribute('data-label', option.textContent);
	            }
	            item.addEventListener('click', function () {
	              _this2.selectItem(item, true);
	            });
	            return item;
	          }
	        }, {
	          key: 'buildLabel',
	          value: function buildLabel() {
	            var label = document.createElement('span');
	            label.classList.add('ql-picker-label');
	            label.innerHTML = _dropdown2.default;
	            this.container.appendChild(label);
	            return label;
	          }
	        }, {
	          key: 'buildOptions',
	          value: function buildOptions() {
	            var _this3 = this;
	
	            var options = document.createElement('span');
	            options.classList.add('ql-picker-options');
	            [].slice.call(this.select.options).forEach(function (option) {
	              var item = _this3.buildItem(option);
	              options.appendChild(item);
	              if (option.selected === true) {
	                _this3.selectItem(item);
	              }
	            });
	            this.container.appendChild(options);
	          }
	        }, {
	          key: 'buildPicker',
	          value: function buildPicker() {
	            var _this4 = this;
	
	            [].slice.call(this.select.attributes).forEach(function (item) {
	              _this4.container.setAttribute(item.name, item.value);
	            });
	            this.container.classList.add('ql-picker');
	            this.label = this.buildLabel();
	            this.buildOptions();
	          }
	        }, {
	          key: 'close',
	          value: function close() {
	            this.container.classList.remove('ql-expanded');
	          }
	        }, {
	          key: 'selectItem',
	          value: function selectItem(item) {
	            var trigger = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
	
	            var selected = this.container.querySelector('.ql-selected');
	            if (item === selected) return;
	            if (selected != null) {
	              selected.classList.remove('ql-selected');
	            }
	            if (item == null) return;
	            item.classList.add('ql-selected');
	            this.select.selectedIndex = [].indexOf.call(item.parentNode.children, item);
	            if (item.hasAttribute('data-value')) {
	              this.label.setAttribute('data-value', item.getAttribute('data-value'));
	            } else {
	              this.label.removeAttribute('data-value');
	            }
	            if (item.hasAttribute('data-label')) {
	              this.label.setAttribute('data-label', item.getAttribute('data-label'));
	            } else {
	              this.label.removeAttribute('data-label');
	            }
	            if (trigger) {
	              if (typeof Event === 'function') {
	                this.select.dispatchEvent(new Event('change'));
	              } else if ((typeof Event === 'undefined' ? 'undefined' : _typeof(Event)) === 'object') {
	                // IE11
	                var event = document.createEvent('Event');
	                event.initEvent('change', true, true);
	                this.select.dispatchEvent(event);
	              }
	              this.close();
	            }
	          }
	        }, {
	          key: 'update',
	          value: function update() {
	            var option = void 0;
	            if (this.select.selectedIndex > -1) {
	              var item = this.container.querySelector('.ql-picker-options').children[this.select.selectedIndex];
	              option = this.select.options[this.select.selectedIndex];
	              this.selectItem(item);
	            } else {
	              this.selectItem(null);
	            }
	            var isActive = option != null && option !== this.select.querySelector('option[selected]');
	            this.label.classList.toggle('ql-active', isActive);
	          }
	        }]);
	
	        return Picker;
	      }();
	
	      exports.default = Picker;
	
	      /***/
	    },
	    /* 29 */
	    /***/function (module, exports, __webpack_require__) {
	
	      "use strict";
	
	      var _parchment = __webpack_require__(0);
	
	      var _parchment2 = _interopRequireDefault(_parchment);
	
	      var _quill = __webpack_require__(6);
	
	      var _quill2 = _interopRequireDefault(_quill);
	
	      var _block = __webpack_require__(4);
	
	      var _block2 = _interopRequireDefault(_block);
	
	      var _break = __webpack_require__(16);
	
	      var _break2 = _interopRequireDefault(_break);
	
	      var _container = __webpack_require__(24);
	
	      var _container2 = _interopRequireDefault(_container);
	
	      var _cursor = __webpack_require__(25);
	
	      var _cursor2 = _interopRequireDefault(_cursor);
	
	      var _embed = __webpack_require__(5);
	
	      var _embed2 = _interopRequireDefault(_embed);
	
	      var _inline = __webpack_require__(7);
	
	      var _inline2 = _interopRequireDefault(_inline);
	
	      var _scroll = __webpack_require__(18);
	
	      var _scroll2 = _interopRequireDefault(_scroll);
	
	      var _text = __webpack_require__(8);
	
	      var _text2 = _interopRequireDefault(_text);
	
	      var _clipboard = __webpack_require__(46);
	
	      var _clipboard2 = _interopRequireDefault(_clipboard);
	
	      var _history = __webpack_require__(42);
	
	      var _history2 = _interopRequireDefault(_history);
	
	      var _keyboard = __webpack_require__(31);
	
	      var _keyboard2 = _interopRequireDefault(_keyboard);
	
	      function _interopRequireDefault(obj) {
	        return obj && obj.__esModule ? obj : { default: obj };
	      }
	
	      _quill2.default.register({
	        'blots/block': _block2.default,
	        'blots/block/embed': _block.BlockEmbed,
	        'blots/break': _break2.default,
	        'blots/container': _container2.default,
	        'blots/cursor': _cursor2.default,
	        'blots/embed': _embed2.default,
	        'blots/inline': _inline2.default,
	        'blots/scroll': _scroll2.default,
	        'blots/text': _text2.default,
	
	        'modules/clipboard': _clipboard2.default,
	        'modules/history': _history2.default,
	        'modules/keyboard': _keyboard2.default
	      });
	
	      _parchment2.default.register(_block2.default, _break2.default, _cursor2.default, _inline2.default, _scroll2.default, _text2.default);
	
	      module.exports = _quill2.default;
	
	      /***/
	    },
	    /* 30 */
	    /***/function (module, exports, __webpack_require__) {
	
	      "use strict";
	
	      Object.defineProperty(exports, "__esModule", {
	        value: true
	      });
	
	      var _createClass = function () {
	        function defineProperties(target, props) {
	          for (var i = 0; i < props.length; i++) {
	            var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
	          }
	        }return function (Constructor, protoProps, staticProps) {
	          if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
	        };
	      }();
	
	      function _classCallCheck(instance, Constructor) {
	        if (!(instance instanceof Constructor)) {
	          throw new TypeError("Cannot call a class as a function");
	        }
	      }
	
	      var Theme = function () {
	        function Theme(quill, options) {
	          _classCallCheck(this, Theme);
	
	          this.quill = quill;
	          this.options = options;
	          this.modules = {};
	        }
	
	        _createClass(Theme, [{
	          key: 'init',
	          value: function init() {
	            var _this = this;
	
	            Object.keys(this.options.modules).forEach(function (name) {
	              if (_this.modules[name] == null) {
	                _this.addModule(name);
	              }
	            });
	          }
	        }, {
	          key: 'addModule',
	          value: function addModule(name) {
	            var moduleClass = this.quill.constructor.import('modules/' + name);
	            this.modules[name] = new moduleClass(this.quill, this.options.modules[name] || {});
	            return this.modules[name];
	          }
	        }]);
	
	        return Theme;
	      }();
	
	      Theme.DEFAULTS = {
	        modules: {}
	      };
	      Theme.themes = {
	        'default': Theme
	      };
	
	      exports.default = Theme;
	
	      /***/
	    },
	    /* 31 */
	    /***/function (module, exports, __webpack_require__) {
	
	      "use strict";
	
	      Object.defineProperty(exports, "__esModule", {
	        value: true
	      });
	      exports.SHORTKEY = exports.default = undefined;
	
	      var _typeof = typeof Symbol === "function" && _typeof2(Symbol.iterator) === "symbol" ? function (obj) {
	        return typeof obj === 'undefined' ? 'undefined' : _typeof2(obj);
	      } : function (obj) {
	        return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj === 'undefined' ? 'undefined' : _typeof2(obj);
	      };
	
	      var _slicedToArray = function () {
	        function sliceIterator(arr, i) {
	          var _arr = [];var _n = true;var _d = false;var _e = undefined;try {
	            for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
	              _arr.push(_s.value);if (i && _arr.length === i) break;
	            }
	          } catch (err) {
	            _d = true;_e = err;
	          } finally {
	            try {
	              if (!_n && _i["return"]) _i["return"]();
	            } finally {
	              if (_d) throw _e;
	            }
	          }return _arr;
	        }return function (arr, i) {
	          if (Array.isArray(arr)) {
	            return arr;
	          } else if (Symbol.iterator in Object(arr)) {
	            return sliceIterator(arr, i);
	          } else {
	            throw new TypeError("Invalid attempt to destructure non-iterable instance");
	          }
	        };
	      }();
	
	      var _createClass = function () {
	        function defineProperties(target, props) {
	          for (var i = 0; i < props.length; i++) {
	            var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
	          }
	        }return function (Constructor, protoProps, staticProps) {
	          if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
	        };
	      }();
	
	      var _clone = __webpack_require__(19);
	
	      var _clone2 = _interopRequireDefault(_clone);
	
	      var _deepEqual = __webpack_require__(12);
	
	      var _deepEqual2 = _interopRequireDefault(_deepEqual);
	
	      var _extend = __webpack_require__(3);
	
	      var _extend2 = _interopRequireDefault(_extend);
	
	      var _quillDelta = __webpack_require__(1);
	
	      var _quillDelta2 = _interopRequireDefault(_quillDelta);
	
	      var _op = __webpack_require__(20);
	
	      var _op2 = _interopRequireDefault(_op);
	
	      var _parchment = __webpack_require__(0);
	
	      var _parchment2 = _interopRequireDefault(_parchment);
	
	      var _quill = __webpack_require__(6);
	
	      var _quill2 = _interopRequireDefault(_quill);
	
	      var _logger = __webpack_require__(11);
	
	      var _logger2 = _interopRequireDefault(_logger);
	
	      var _module = __webpack_require__(10);
	
	      var _module2 = _interopRequireDefault(_module);
	
	      function _interopRequireDefault(obj) {
	        return obj && obj.__esModule ? obj : { default: obj };
	      }
	
	      function _classCallCheck(instance, Constructor) {
	        if (!(instance instanceof Constructor)) {
	          throw new TypeError("Cannot call a class as a function");
	        }
	      }
	
	      function _possibleConstructorReturn(self, call) {
	        if (!self) {
	          throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
	        }return call && ((typeof call === 'undefined' ? 'undefined' : _typeof2(call)) === "object" || typeof call === "function") ? call : self;
	      }
	
	      function _inherits(subClass, superClass) {
	        if (typeof superClass !== "function" && superClass !== null) {
	          throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === 'undefined' ? 'undefined' : _typeof2(superClass)));
	        }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
	      }
	
	      var debug = (0, _logger2.default)('quill:keyboard');
	
	      var SHORTKEY = /Mac/i.test(navigator.platform) ? 'metaKey' : 'ctrlKey';
	
	      var Keyboard = function (_Module) {
	        _inherits(Keyboard, _Module);
	
	        _createClass(Keyboard, null, [{
	          key: 'match',
	          value: function match(evt, binding) {
	            binding = normalize(binding);
	            if (['altKey', 'ctrlKey', 'metaKey', 'shiftKey'].some(function (key) {
	              return !!binding[key] !== evt[key] && binding[key] !== null;
	            })) {
	              return false;
	            }
	            return binding.key === (evt.which || evt.keyCode);
	          }
	        }]);
	
	        function Keyboard(quill, options) {
	          _classCallCheck(this, Keyboard);
	
	          var _this = _possibleConstructorReturn(this, (Keyboard.__proto__ || Object.getPrototypeOf(Keyboard)).call(this, quill, options));
	
	          _this.bindings = {};
	          Object.keys(_this.options.bindings).forEach(function (name) {
	            if (name === 'list autofill' && quill.scroll.whitelist != null && !quill.scroll.whitelist['list']) {
	              return;
	            }
	            if (_this.options.bindings[name]) {
	              _this.addBinding(_this.options.bindings[name]);
	            }
	          });
	          _this.addBinding({ key: Keyboard.keys.ENTER, shiftKey: null }, handleEnter);
	          _this.addBinding({ key: Keyboard.keys.ENTER, metaKey: null, ctrlKey: null, altKey: null }, function () {});
	          if (/Firefox/i.test(navigator.userAgent)) {
	            // Need to handle delete and backspace for Firefox in the general case #1171
	            _this.addBinding({ key: Keyboard.keys.BACKSPACE }, { collapsed: true }, handleBackspace);
	            _this.addBinding({ key: Keyboard.keys.DELETE }, { collapsed: true }, handleDelete);
	          } else {
	            _this.addBinding({ key: Keyboard.keys.BACKSPACE }, { collapsed: true, prefix: /^.?$/ }, handleBackspace);
	            _this.addBinding({ key: Keyboard.keys.DELETE }, { collapsed: true, suffix: /^.?$/ }, handleDelete);
	          }
	          _this.addBinding({ key: Keyboard.keys.BACKSPACE }, { collapsed: false }, handleDeleteRange);
	          _this.addBinding({ key: Keyboard.keys.DELETE }, { collapsed: false }, handleDeleteRange);
	          _this.addBinding({ key: Keyboard.keys.BACKSPACE, altKey: null, ctrlKey: null, metaKey: null, shiftKey: null }, { collapsed: true, offset: 0 }, handleBackspace);
	          _this.listen();
	          return _this;
	        }
	
	        _createClass(Keyboard, [{
	          key: 'addBinding',
	          value: function addBinding(key) {
	            var context = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
	            var handler = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
	
	            var binding = normalize(key);
	            if (binding == null || binding.key == null) {
	              return debug.warn('Attempted to add invalid keyboard binding', binding);
	            }
	            if (typeof context === 'function') {
	              context = { handler: context };
	            }
	            if (typeof handler === 'function') {
	              handler = { handler: handler };
	            }
	            binding = (0, _extend2.default)(binding, context, handler);
	            this.bindings[binding.key] = this.bindings[binding.key] || [];
	            this.bindings[binding.key].push(binding);
	          }
	        }, {
	          key: 'listen',
	          value: function listen() {
	            var _this2 = this;
	
	            this.quill.root.addEventListener('keydown', function (evt) {
	              if (evt.defaultPrevented) return;
	              var which = evt.which || evt.keyCode;
	              var bindings = (_this2.bindings[which] || []).filter(function (binding) {
	                return Keyboard.match(evt, binding);
	              });
	              if (bindings.length === 0) return;
	              var range = _this2.quill.getSelection();
	              if (range == null || !_this2.quill.hasFocus()) return;
	
	              var _quill$getLine = _this2.quill.getLine(range.index),
	                  _quill$getLine2 = _slicedToArray(_quill$getLine, 2),
	                  line = _quill$getLine2[0],
	                  offset = _quill$getLine2[1];
	
	              var _quill$getLeaf = _this2.quill.getLeaf(range.index),
	                  _quill$getLeaf2 = _slicedToArray(_quill$getLeaf, 2),
	                  leafStart = _quill$getLeaf2[0],
	                  offsetStart = _quill$getLeaf2[1];
	
	              var _ref = range.length === 0 ? [leafStart, offsetStart] : _this2.quill.getLeaf(range.index + range.length),
	                  _ref2 = _slicedToArray(_ref, 2),
	                  leafEnd = _ref2[0],
	                  offsetEnd = _ref2[1];
	
	              var prefixText = leafStart instanceof _parchment2.default.Text ? leafStart.value().slice(0, offsetStart) : '';
	              var suffixText = leafEnd instanceof _parchment2.default.Text ? leafEnd.value().slice(offsetEnd) : '';
	              var curContext = {
	                collapsed: range.length === 0,
	                empty: range.length === 0 && line.length() <= 1,
	                format: _this2.quill.getFormat(range),
	                offset: offset,
	                prefix: prefixText,
	                suffix: suffixText
	              };
	              var prevented = bindings.some(function (binding) {
	                if (binding.collapsed != null && binding.collapsed !== curContext.collapsed) return false;
	                if (binding.empty != null && binding.empty !== curContext.empty) return false;
	                if (binding.offset != null && binding.offset !== curContext.offset) return false;
	                if (Array.isArray(binding.format)) {
	                  // any format is present
	                  if (binding.format.every(function (name) {
	                    return curContext.format[name] == null;
	                  })) {
	                    return false;
	                  }
	                } else if (_typeof(binding.format) === 'object') {
	                  // all formats must match
	                  if (!Object.keys(binding.format).every(function (name) {
	                    if (binding.format[name] === true) return curContext.format[name] != null;
	                    if (binding.format[name] === false) return curContext.format[name] == null;
	                    return (0, _deepEqual2.default)(binding.format[name], curContext.format[name]);
	                  })) {
	                    return false;
	                  }
	                }
	                if (binding.prefix != null && !binding.prefix.test(curContext.prefix)) return false;
	                if (binding.suffix != null && !binding.suffix.test(curContext.suffix)) return false;
	                return binding.handler.call(_this2, range, curContext) !== true;
	              });
	              if (prevented) {
	                evt.preventDefault();
	              }
	            });
	          }
	        }]);
	
	        return Keyboard;
	      }(_module2.default);
	
	      Keyboard.keys = {
	        BACKSPACE: 8,
	        TAB: 9,
	        ENTER: 13,
	        ESCAPE: 27,
	        LEFT: 37,
	        UP: 38,
	        RIGHT: 39,
	        DOWN: 40,
	        DELETE: 46
	      };
	
	      Keyboard.DEFAULTS = {
	        bindings: {
	          'bold': makeFormatHandler('bold'),
	          'italic': makeFormatHandler('italic'),
	          'underline': makeFormatHandler('underline'),
	          'indent': {
	            // highlight tab or tab at beginning of list, indent or blockquote
	            key: Keyboard.keys.TAB,
	            format: ['blockquote', 'indent', 'list'],
	            handler: function handler(range, context) {
	              if (context.collapsed && context.offset !== 0) return true;
	              this.quill.format('indent', '+1', _quill2.default.sources.USER);
	            }
	          },
	          'outdent': {
	            key: Keyboard.keys.TAB,
	            shiftKey: true,
	            format: ['blockquote', 'indent', 'list'],
	            // highlight tab or tab at beginning of list, indent or blockquote
	            handler: function handler(range, context) {
	              if (context.collapsed && context.offset !== 0) return true;
	              this.quill.format('indent', '-1', _quill2.default.sources.USER);
	            }
	          },
	          'outdent backspace': {
	            key: Keyboard.keys.BACKSPACE,
	            collapsed: true,
	            shiftKey: null,
	            metaKey: null,
	            ctrlKey: null,
	            altKey: null,
	            format: ['blockquote', 'indent', 'list'],
	            offset: 0,
	            handler: function handler(range, context) {
	              if (context.format.indent != null) {
	                this.quill.format('indent', '-1', _quill2.default.sources.USER);
	              } else if (context.format.blockquote != null) {
	                this.quill.format('blockquote', false, _quill2.default.sources.USER);
	              } else if (context.format.list != null) {
	                this.quill.format('list', false, _quill2.default.sources.USER);
	              }
	            }
	          },
	          'indent code-block': makeCodeBlockHandler(true),
	          'outdent code-block': makeCodeBlockHandler(false),
	          'remove tab': {
	            key: Keyboard.keys.TAB,
	            shiftKey: true,
	            collapsed: true,
	            prefix: /\t$/,
	            handler: function handler(range) {
	              this.quill.deleteText(range.index - 1, 1, _quill2.default.sources.USER);
	            }
	          },
	          'tab': {
	            key: Keyboard.keys.TAB,
	            handler: function handler(range) {
	              this.quill.history.cutoff();
	              var delta = new _quillDelta2.default().retain(range.index).delete(range.length).insert('\t');
	              this.quill.updateContents(delta, _quill2.default.sources.USER);
	              this.quill.history.cutoff();
	              this.quill.setSelection(range.index + 1, _quill2.default.sources.SILENT);
	            }
	          },
	          'list empty enter': {
	            key: Keyboard.keys.ENTER,
	            collapsed: true,
	            format: ['list'],
	            empty: true,
	            handler: function handler(range, context) {
	              this.quill.format('list', false, _quill2.default.sources.USER);
	              if (context.format.indent) {
	                this.quill.format('indent', false, _quill2.default.sources.USER);
	              }
	            }
	          },
	          'checklist enter': {
	            key: Keyboard.keys.ENTER,
	            collapsed: true,
	            format: { list: 'checked' },
	            handler: function handler(range) {
	              var _quill$getLine3 = this.quill.getLine(range.index),
	                  _quill$getLine4 = _slicedToArray(_quill$getLine3, 2),
	                  line = _quill$getLine4[0],
	                  offset = _quill$getLine4[1];
	
	              var delta = new _quillDelta2.default().retain(range.index).insert('\n', { list: 'checked' }).retain(line.length() - offset - 1).retain(1, { list: 'unchecked' });
	              this.quill.updateContents(delta, _quill2.default.sources.USER);
	              this.quill.setSelection(range.index + 1, _quill2.default.sources.SILENT);
	              this.quill.scrollIntoView();
	            }
	          },
	          'header enter': {
	            key: Keyboard.keys.ENTER,
	            collapsed: true,
	            format: ['header'],
	            suffix: /^$/,
	            handler: function handler(range, context) {
	              var _quill$getLine5 = this.quill.getLine(range.index),
	                  _quill$getLine6 = _slicedToArray(_quill$getLine5, 2),
	                  line = _quill$getLine6[0],
	                  offset = _quill$getLine6[1];
	
	              var delta = new _quillDelta2.default().retain(range.index).insert('\n', { header: context.format.header }).retain(line.length() - offset - 1).retain(1, { header: null });
	              this.quill.updateContents(delta, _quill2.default.sources.USER);
	              this.quill.setSelection(range.index + 1, _quill2.default.sources.SILENT);
	              this.quill.scrollIntoView();
	            }
	          },
	          'list autofill': {
	            key: ' ',
	            collapsed: true,
	            format: { list: false },
	            prefix: /^\s*?(1\.|-|\[ ?\]|\[x\])$/,
	            handler: function handler(range, context) {
	              var length = context.prefix.length;
	              var value = void 0;
	              switch (context.prefix.trim()) {
	                case '[]':case '[ ]':
	                  value = 'unchecked';
	                  break;
	                case '[x]':
	                  value = 'checked';
	                  break;
	                case '-':
	                  value = 'bullet';
	                  break;
	                default:
	                  value = 'ordered';
	              }
	              this.quill.insertText(range.index, ' ', _quill2.default.sources.USER);
	              this.quill.history.cutoff();
	
	              var _quill$getLine7 = this.quill.getLine(range.index + 1),
	                  _quill$getLine8 = _slicedToArray(_quill$getLine7, 2),
	                  line = _quill$getLine8[0],
	                  offset = _quill$getLine8[1];
	
	              var delta = new _quillDelta2.default().retain(range.index + 1 - offset).delete(length + 1).retain(line.length() - 1 - offset).retain(1, { list: value });
	              this.quill.updateContents(delta, _quill2.default.sources.USER);
	              this.quill.history.cutoff();
	              this.quill.setSelection(range.index - length, _quill2.default.sources.SILENT);
	            }
	          },
	          'code exit': {
	            key: Keyboard.keys.ENTER,
	            collapsed: true,
	            format: ['code-block'],
	            prefix: /\n\n$/,
	            suffix: /^\s+$/,
	            handler: function handler(range) {
	              this.quill.format('code-block', false, _quill2.default.sources.USER);
	              this.quill.deleteText(range.index - 2, 1, _quill2.default.sources.USER);
	            }
	          }
	        }
	      };
	
	      function handleBackspace(range, context) {
	        if (range.index === 0 || this.quill.getLength() <= 1) return;
	
	        var _quill$getLine9 = this.quill.getLine(range.index),
	            _quill$getLine10 = _slicedToArray(_quill$getLine9, 1),
	            line = _quill$getLine10[0];
	
	        var formats = {};
	        if (context.offset === 0) {
	          var _quill$getLine11 = this.quill.getLine(range.index - 1),
	              _quill$getLine12 = _slicedToArray(_quill$getLine11, 1),
	              prev = _quill$getLine12[0];
	
	          if (prev != null && prev.length() > 1) {
	            var curFormats = line.formats();
	            var prevFormats = this.quill.getFormat(range.index - 1, 1);
	            formats = _op2.default.attributes.diff(curFormats, prevFormats) || {};
	          }
	        }
	        // Check for astral symbols
	        var length = /[\uD800-\uDBFF][\uDC00-\uDFFF]$/.test(context.prefix) ? 2 : 1;
	        this.quill.deleteText(range.index - length, length, _quill2.default.sources.USER);
	        if (Object.keys(formats).length > 0) {
	          this.quill.formatLine(range.index - length, length, formats, _quill2.default.sources.USER);
	        }
	        this.quill.focus();
	      }
	
	      function handleDelete(range, context) {
	        // Check for astral symbols
	        var length = /^[\uD800-\uDBFF][\uDC00-\uDFFF]/.test(context.suffix) ? 2 : 1;
	        if (range.index >= this.quill.getLength() - length) return;
	        var formats = {},
	            nextLength = 0;
	
	        var _quill$getLine13 = this.quill.getLine(range.index),
	            _quill$getLine14 = _slicedToArray(_quill$getLine13, 1),
	            line = _quill$getLine14[0];
	
	        if (context.offset >= line.length() - 1) {
	          var _quill$getLine15 = this.quill.getLine(range.index + 1),
	              _quill$getLine16 = _slicedToArray(_quill$getLine15, 1),
	              next = _quill$getLine16[0];
	
	          if (next) {
	            var curFormats = line.formats();
	            var nextFormats = this.quill.getFormat(range.index, 1);
	            formats = _op2.default.attributes.diff(curFormats, nextFormats) || {};
	            nextLength = next.length();
	          }
	        }
	        this.quill.deleteText(range.index, length, _quill2.default.sources.USER);
	        if (Object.keys(formats).length > 0) {
	          this.quill.formatLine(range.index + nextLength - 1, length, formats, _quill2.default.sources.USER);
	        }
	      }
	
	      function handleDeleteRange(range) {
	        var lines = this.quill.getLines(range);
	        var formats = {};
	        if (lines.length > 1) {
	          var firstFormats = lines[0].formats();
	          var lastFormats = lines[lines.length - 1].formats();
	          formats = _op2.default.attributes.diff(lastFormats, firstFormats) || {};
	        }
	        this.quill.deleteText(range, _quill2.default.sources.USER);
	        if (Object.keys(formats).length > 0) {
	          this.quill.formatLine(range.index, 1, formats, _quill2.default.sources.USER);
	        }
	        this.quill.setSelection(range.index, _quill2.default.sources.SILENT);
	        this.quill.focus();
	      }
	
	      function handleEnter(range, context) {
	        var _this3 = this;
	
	        if (range.length > 0) {
	          this.quill.scroll.deleteAt(range.index, range.length); // So we do not trigger text-change
	        }
	        var lineFormats = Object.keys(context.format).reduce(function (lineFormats, format) {
	          if (_parchment2.default.query(format, _parchment2.default.Scope.BLOCK) && !Array.isArray(context.format[format])) {
	            lineFormats[format] = context.format[format];
	          }
	          return lineFormats;
	        }, {});
	        this.quill.insertText(range.index, '\n', lineFormats, _quill2.default.sources.USER);
	        // Earlier scroll.deleteAt might have messed up our selection,
	        // so insertText's built in selection preservation is not reliable
	        this.quill.setSelection(range.index + 1, _quill2.default.sources.SILENT);
	        this.quill.focus();
	        Object.keys(context.format).forEach(function (name) {
	          if (lineFormats[name] != null) return;
	          if (Array.isArray(context.format[name])) return;
	          if (name === 'link') return;
	          _this3.quill.format(name, context.format[name], _quill2.default.sources.USER);
	        });
	      }
	
	      function makeCodeBlockHandler(indent) {
	        return {
	          key: Keyboard.keys.TAB,
	          shiftKey: !indent,
	          format: { 'code-block': true },
	          handler: function handler(range) {
	            var CodeBlock = _parchment2.default.query('code-block');
	            var index = range.index,
	                length = range.length;
	
	            var _quill$scroll$descend = this.quill.scroll.descendant(CodeBlock, index),
	                _quill$scroll$descend2 = _slicedToArray(_quill$scroll$descend, 2),
	                block = _quill$scroll$descend2[0],
	                offset = _quill$scroll$descend2[1];
	
	            if (block == null) return;
	            var scrollIndex = this.quill.getIndex(block);
	            var start = block.newlineIndex(offset, true) + 1;
	            var end = block.newlineIndex(scrollIndex + offset + length);
	            var lines = block.domNode.textContent.slice(start, end).split('\n');
	            offset = 0;
	            lines.forEach(function (line, i) {
	              if (indent) {
	                block.insertAt(start + offset, CodeBlock.TAB);
	                offset += CodeBlock.TAB.length;
	                if (i === 0) {
	                  index += CodeBlock.TAB.length;
	                } else {
	                  length += CodeBlock.TAB.length;
	                }
	              } else if (line.startsWith(CodeBlock.TAB)) {
	                block.deleteAt(start + offset, CodeBlock.TAB.length);
	                offset -= CodeBlock.TAB.length;
	                if (i === 0) {
	                  index -= CodeBlock.TAB.length;
	                } else {
	                  length -= CodeBlock.TAB.length;
	                }
	              }
	              offset += line.length + 1;
	            });
	            this.quill.update(_quill2.default.sources.USER);
	            this.quill.setSelection(index, length, _quill2.default.sources.SILENT);
	          }
	        };
	      }
	
	      function makeFormatHandler(format) {
	        return {
	          key: format[0].toUpperCase(),
	          shortKey: true,
	          handler: function handler(range, context) {
	            this.quill.format(format, !context.format[format], _quill2.default.sources.USER);
	          }
	        };
	      }
	
	      function normalize(binding) {
	        if (typeof binding === 'string' || typeof binding === 'number') {
	          return normalize({ key: binding });
	        }
	        if ((typeof binding === 'undefined' ? 'undefined' : _typeof(binding)) === 'object') {
	          binding = (0, _clone2.default)(binding, false);
	        }
	        if (typeof binding.key === 'string') {
	          if (Keyboard.keys[binding.key.toUpperCase()] != null) {
	            binding.key = Keyboard.keys[binding.key.toUpperCase()];
	          } else if (binding.key.length === 1) {
	            binding.key = binding.key.toUpperCase().charCodeAt(0);
	          } else {
	            return null;
	          }
	        }
	        if (binding.shortKey) {
	          binding[SHORTKEY] = binding.shortKey;
	          delete binding.shortKey;
	        }
	        return binding;
	      }
	
	      exports.default = Keyboard;
	      exports.SHORTKEY = SHORTKEY;
	
	      /***/
	    },
	    /* 32 */
	    /***/function (module, exports, __webpack_require__) {
	
	      "use strict";
	
	      var __extends = this && this.__extends || function () {
	        var extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function (d, b) {
	          d.__proto__ = b;
	        } || function (d, b) {
	          for (var p in b) {
	            if (b.hasOwnProperty(p)) d[p] = b[p];
	          }
	        };
	        return function (d, b) {
	          extendStatics(d, b);
	          function __() {
	            this.constructor = d;
	          }
	          d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	        };
	      }();
	      Object.defineProperty(exports, "__esModule", { value: true });
	      var attributor_1 = __webpack_require__(13);
	      function match(node, prefix) {
	        var className = node.getAttribute('class') || '';
	        return className.split(/\s+/).filter(function (name) {
	          return name.indexOf(prefix + "-") === 0;
	        });
	      }
	      var ClassAttributor = function (_super) {
	        __extends(ClassAttributor, _super);
	        function ClassAttributor() {
	          return _super !== null && _super.apply(this, arguments) || this;
	        }
	        ClassAttributor.keys = function (node) {
	          return (node.getAttribute('class') || '').split(/\s+/).map(function (name) {
	            return name.split('-').slice(0, -1).join('-');
	          });
	        };
	        ClassAttributor.prototype.add = function (node, value) {
	          if (!this.canAdd(node, value)) return false;
	          this.remove(node);
	          node.classList.add(this.keyName + "-" + value);
	          return true;
	        };
	        ClassAttributor.prototype.remove = function (node) {
	          var matches = match(node, this.keyName);
	          matches.forEach(function (name) {
	            node.classList.remove(name);
	          });
	          if (node.classList.length === 0) {
	            node.removeAttribute('class');
	          }
	        };
	        ClassAttributor.prototype.value = function (node) {
	          var result = match(node, this.keyName)[0] || '';
	          var value = result.slice(this.keyName.length + 1); // +1 for hyphen
	          return this.canAdd(node, value) ? value : '';
	        };
	        return ClassAttributor;
	      }(attributor_1.default);
	      exports.default = ClassAttributor;
	
	      /***/
	    },
	    /* 33 */
	    /***/function (module, exports, __webpack_require__) {
	
	      "use strict";
	
	      Object.defineProperty(exports, "__esModule", { value: true });
	      var attributor_1 = __webpack_require__(13);
	      var class_1 = __webpack_require__(32);
	      var style_1 = __webpack_require__(34);
	      var Registry = __webpack_require__(2);
	      var AttributorStore = function () {
	        function AttributorStore(domNode) {
	          this.attributes = {};
	          this.domNode = domNode;
	          this.build();
	        }
	        AttributorStore.prototype.attribute = function (attribute, value) {
	          if (value) {
	            if (attribute.add(this.domNode, value)) {
	              if (attribute.value(this.domNode) != null) {
	                this.attributes[attribute.attrName] = attribute;
	              } else {
	                delete this.attributes[attribute.attrName];
	              }
	            }
	          } else {
	            attribute.remove(this.domNode);
	            delete this.attributes[attribute.attrName];
	          }
	        };
	        AttributorStore.prototype.build = function () {
	          var _this = this;
	          this.attributes = {};
	          var attributes = attributor_1.default.keys(this.domNode);
	          var classes = class_1.default.keys(this.domNode);
	          var styles = style_1.default.keys(this.domNode);
	          attributes.concat(classes).concat(styles).forEach(function (name) {
	            var attr = Registry.query(name, Registry.Scope.ATTRIBUTE);
	            if (attr instanceof attributor_1.default) {
	              _this.attributes[attr.attrName] = attr;
	            }
	          });
	        };
	        AttributorStore.prototype.copy = function (target) {
	          var _this = this;
	          Object.keys(this.attributes).forEach(function (key) {
	            var value = _this.attributes[key].value(_this.domNode);
	            target.format(key, value);
	          });
	        };
	        AttributorStore.prototype.move = function (target) {
	          var _this = this;
	          this.copy(target);
	          Object.keys(this.attributes).forEach(function (key) {
	            _this.attributes[key].remove(_this.domNode);
	          });
	          this.attributes = {};
	        };
	        AttributorStore.prototype.values = function () {
	          var _this = this;
	          return Object.keys(this.attributes).reduce(function (attributes, name) {
	            attributes[name] = _this.attributes[name].value(_this.domNode);
	            return attributes;
	          }, {});
	        };
	        return AttributorStore;
	      }();
	      exports.default = AttributorStore;
	
	      /***/
	    },
	    /* 34 */
	    /***/function (module, exports, __webpack_require__) {
	
	      "use strict";
	
	      var __extends = this && this.__extends || function () {
	        var extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function (d, b) {
	          d.__proto__ = b;
	        } || function (d, b) {
	          for (var p in b) {
	            if (b.hasOwnProperty(p)) d[p] = b[p];
	          }
	        };
	        return function (d, b) {
	          extendStatics(d, b);
	          function __() {
	            this.constructor = d;
	          }
	          d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	        };
	      }();
	      Object.defineProperty(exports, "__esModule", { value: true });
	      var attributor_1 = __webpack_require__(13);
	      function camelize(name) {
	        var parts = name.split('-');
	        var rest = parts.slice(1).map(function (part) {
	          return part[0].toUpperCase() + part.slice(1);
	        }).join('');
	        return parts[0] + rest;
	      }
	      var StyleAttributor = function (_super) {
	        __extends(StyleAttributor, _super);
	        function StyleAttributor() {
	          return _super !== null && _super.apply(this, arguments) || this;
	        }
	        StyleAttributor.keys = function (node) {
	          return (node.getAttribute('style') || '').split(';').map(function (value) {
	            var arr = value.split(':');
	            return arr[0].trim();
	          });
	        };
	        StyleAttributor.prototype.add = function (node, value) {
	          if (!this.canAdd(node, value)) return false;
	          node.style[camelize(this.keyName)] = value;
	          return true;
	        };
	        StyleAttributor.prototype.remove = function (node) {
	          node.style[camelize(this.keyName)] = '';
	          if (!node.getAttribute('style')) {
	            node.removeAttribute('style');
	          }
	        };
	        StyleAttributor.prototype.value = function (node) {
	          var value = node.style[camelize(this.keyName)];
	          return this.canAdd(node, value) ? value : '';
	        };
	        return StyleAttributor;
	      }(attributor_1.default);
	      exports.default = StyleAttributor;
	
	      /***/
	    },
	    /* 35 */
	    /***/function (module, exports, __webpack_require__) {
	
	      "use strict";
	
	      Object.defineProperty(exports, "__esModule", { value: true });
	      var Registry = __webpack_require__(2);
	      var ShadowBlot = function () {
	        function ShadowBlot(domNode) {
	          this.domNode = domNode;
	          this.attach();
	        }
	        Object.defineProperty(ShadowBlot.prototype, "statics", {
	          // Hack for accessing inherited static methods
	          get: function get() {
	            return this.constructor;
	          },
	          enumerable: true,
	          configurable: true
	        });
	        ShadowBlot.create = function (value) {
	          if (this.tagName == null) {
	            throw new Registry.ParchmentError('Blot definition missing tagName');
	          }
	          var node;
	          if (Array.isArray(this.tagName)) {
	            if (typeof value === 'string') {
	              value = value.toUpperCase();
	              if (parseInt(value).toString() === value) {
	                value = parseInt(value);
	              }
	            }
	            if (typeof value === 'number') {
	              node = document.createElement(this.tagName[value - 1]);
	            } else if (this.tagName.indexOf(value) > -1) {
	              node = document.createElement(value);
	            } else {
	              node = document.createElement(this.tagName[0]);
	            }
	          } else {
	            node = document.createElement(this.tagName);
	          }
	          if (this.className) {
	            node.classList.add(this.className);
	          }
	          return node;
	        };
	        ShadowBlot.prototype.attach = function () {
	          this.domNode[Registry.DATA_KEY] = { blot: this };
	        };
	        ShadowBlot.prototype.clone = function () {
	          var domNode = this.domNode.cloneNode(false);
	          return Registry.create(domNode);
	        };
	        ShadowBlot.prototype.detach = function () {
	          if (this.parent != null) this.parent.removeChild(this);
	          delete this.domNode[Registry.DATA_KEY];
	        };
	        ShadowBlot.prototype.deleteAt = function (index, length) {
	          var blot = this.isolate(index, length);
	          blot.remove();
	        };
	        ShadowBlot.prototype.formatAt = function (index, length, name, value) {
	          var blot = this.isolate(index, length);
	          if (Registry.query(name, Registry.Scope.BLOT) != null && value) {
	            blot.wrap(name, value);
	          } else if (Registry.query(name, Registry.Scope.ATTRIBUTE) != null) {
	            var parent = Registry.create(this.statics.scope);
	            blot.wrap(parent);
	            parent.format(name, value);
	          }
	        };
	        ShadowBlot.prototype.insertAt = function (index, value, def) {
	          var blot = def == null ? Registry.create('text', value) : Registry.create(value, def);
	          var ref = this.split(index);
	          this.parent.insertBefore(blot, ref);
	        };
	        ShadowBlot.prototype.insertInto = function (parentBlot, refBlot) {
	          if (this.parent != null) {
	            this.parent.children.remove(this);
	          }
	          parentBlot.children.insertBefore(this, refBlot);
	          if (refBlot != null) {
	            var refDomNode = refBlot.domNode;
	          }
	          if (this.next == null || this.domNode.nextSibling != refDomNode) {
	            parentBlot.domNode.insertBefore(this.domNode, typeof refDomNode !== 'undefined' ? refDomNode : null);
	          }
	          this.parent = parentBlot;
	        };
	        ShadowBlot.prototype.isolate = function (index, length) {
	          var target = this.split(index);
	          target.split(length);
	          return target;
	        };
	        ShadowBlot.prototype.length = function () {
	          return 1;
	        };
	        ;
	        ShadowBlot.prototype.offset = function (root) {
	          if (root === void 0) {
	            root = this.parent;
	          }
	          if (this.parent == null || this == root) return 0;
	          return this.parent.children.offset(this) + this.parent.offset(root);
	        };
	        ShadowBlot.prototype.optimize = function (context) {
	          // TODO clean up once we use WeakMap
	          if (this.domNode[Registry.DATA_KEY] != null) {
	            delete this.domNode[Registry.DATA_KEY].mutations;
	          }
	        };
	        ShadowBlot.prototype.remove = function () {
	          if (this.domNode.parentNode != null) {
	            this.domNode.parentNode.removeChild(this.domNode);
	          }
	          this.detach();
	        };
	        ShadowBlot.prototype.replace = function (target) {
	          if (target.parent == null) return;
	          target.parent.insertBefore(this, target.next);
	          target.remove();
	        };
	        ShadowBlot.prototype.replaceWith = function (name, value) {
	          var replacement = typeof name === 'string' ? Registry.create(name, value) : name;
	          replacement.replace(this);
	          return replacement;
	        };
	        ShadowBlot.prototype.split = function (index, force) {
	          return index === 0 ? this : this.next;
	        };
	        ShadowBlot.prototype.update = function (mutations, context) {
	          // Nothing to do by default
	        };
	        ShadowBlot.prototype.wrap = function (name, value) {
	          var wrapper = typeof name === 'string' ? Registry.create(name, value) : name;
	          if (this.parent != null) {
	            this.parent.insertBefore(wrapper, this.next);
	          }
	          wrapper.appendChild(this);
	          return wrapper;
	        };
	        return ShadowBlot;
	      }();
	      ShadowBlot.blotName = 'abstract';
	      exports.default = ShadowBlot;
	
	      /***/
	    },
	    /* 36 */
	    /***/function (module, exports, __webpack_require__) {
	
	      "use strict";
	
	      Object.defineProperty(exports, "__esModule", {
	        value: true
	      });
	      exports.AlignStyle = exports.AlignClass = exports.AlignAttribute = undefined;
	
	      var _parchment = __webpack_require__(0);
	
	      var _parchment2 = _interopRequireDefault(_parchment);
	
	      function _interopRequireDefault(obj) {
	        return obj && obj.__esModule ? obj : { default: obj };
	      }
	
	      var config = {
	        scope: _parchment2.default.Scope.BLOCK,
	        whitelist: ['right', 'center', 'justify']
	      };
	
	      var AlignAttribute = new _parchment2.default.Attributor.Attribute('align', 'align', config);
	      var AlignClass = new _parchment2.default.Attributor.Class('align', 'ql-align', config);
	      var AlignStyle = new _parchment2.default.Attributor.Style('align', 'text-align', config);
	
	      exports.AlignAttribute = AlignAttribute;
	      exports.AlignClass = AlignClass;
	      exports.AlignStyle = AlignStyle;
	
	      /***/
	    },
	    /* 37 */
	    /***/function (module, exports, __webpack_require__) {
	
	      "use strict";
	
	      Object.defineProperty(exports, "__esModule", {
	        value: true
	      });
	      exports.BackgroundStyle = exports.BackgroundClass = undefined;
	
	      var _parchment = __webpack_require__(0);
	
	      var _parchment2 = _interopRequireDefault(_parchment);
	
	      var _color = __webpack_require__(26);
	
	      function _interopRequireDefault(obj) {
	        return obj && obj.__esModule ? obj : { default: obj };
	      }
	
	      var BackgroundClass = new _parchment2.default.Attributor.Class('background', 'ql-bg', {
	        scope: _parchment2.default.Scope.INLINE
	      });
	      var BackgroundStyle = new _color.ColorAttributor('background', 'background-color', {
	        scope: _parchment2.default.Scope.INLINE
	      });
	
	      exports.BackgroundClass = BackgroundClass;
	      exports.BackgroundStyle = BackgroundStyle;
	
	      /***/
	    },
	    /* 38 */
	    /***/function (module, exports, __webpack_require__) {
	
	      "use strict";
	
	      Object.defineProperty(exports, "__esModule", {
	        value: true
	      });
	      exports.DirectionStyle = exports.DirectionClass = exports.DirectionAttribute = undefined;
	
	      var _parchment = __webpack_require__(0);
	
	      var _parchment2 = _interopRequireDefault(_parchment);
	
	      function _interopRequireDefault(obj) {
	        return obj && obj.__esModule ? obj : { default: obj };
	      }
	
	      var config = {
	        scope: _parchment2.default.Scope.BLOCK,
	        whitelist: ['rtl']
	      };
	
	      var DirectionAttribute = new _parchment2.default.Attributor.Attribute('direction', 'dir', config);
	      var DirectionClass = new _parchment2.default.Attributor.Class('direction', 'ql-direction', config);
	      var DirectionStyle = new _parchment2.default.Attributor.Style('direction', 'direction', config);
	
	      exports.DirectionAttribute = DirectionAttribute;
	      exports.DirectionClass = DirectionClass;
	      exports.DirectionStyle = DirectionStyle;
	
	      /***/
	    },
	    /* 39 */
	    /***/function (module, exports, __webpack_require__) {
	
	      "use strict";
	
	      Object.defineProperty(exports, "__esModule", {
	        value: true
	      });
	      exports.FontClass = exports.FontStyle = undefined;
	
	      var _createClass = function () {
	        function defineProperties(target, props) {
	          for (var i = 0; i < props.length; i++) {
	            var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
	          }
	        }return function (Constructor, protoProps, staticProps) {
	          if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
	        };
	      }();
	
	      var _get = function get(object, property, receiver) {
	        if (object === null) object = Function.prototype;var desc = Object.getOwnPropertyDescriptor(object, property);if (desc === undefined) {
	          var parent = Object.getPrototypeOf(object);if (parent === null) {
	            return undefined;
	          } else {
	            return get(parent, property, receiver);
	          }
	        } else if ("value" in desc) {
	          return desc.value;
	        } else {
	          var getter = desc.get;if (getter === undefined) {
	            return undefined;
	          }return getter.call(receiver);
	        }
	      };
	
	      var _parchment = __webpack_require__(0);
	
	      var _parchment2 = _interopRequireDefault(_parchment);
	
	      function _interopRequireDefault(obj) {
	        return obj && obj.__esModule ? obj : { default: obj };
	      }
	
	      function _classCallCheck(instance, Constructor) {
	        if (!(instance instanceof Constructor)) {
	          throw new TypeError("Cannot call a class as a function");
	        }
	      }
	
	      function _possibleConstructorReturn(self, call) {
	        if (!self) {
	          throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
	        }return call && ((typeof call === 'undefined' ? 'undefined' : _typeof2(call)) === "object" || typeof call === "function") ? call : self;
	      }
	
	      function _inherits(subClass, superClass) {
	        if (typeof superClass !== "function" && superClass !== null) {
	          throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === 'undefined' ? 'undefined' : _typeof2(superClass)));
	        }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
	      }
	
	      var config = {
	        scope: _parchment2.default.Scope.INLINE,
	        whitelist: ['serif', 'monospace']
	      };
	
	      var FontClass = new _parchment2.default.Attributor.Class('font', 'ql-font', config);
	
	      var FontStyleAttributor = function (_Parchment$Attributor) {
	        _inherits(FontStyleAttributor, _Parchment$Attributor);
	
	        function FontStyleAttributor() {
	          _classCallCheck(this, FontStyleAttributor);
	
	          return _possibleConstructorReturn(this, (FontStyleAttributor.__proto__ || Object.getPrototypeOf(FontStyleAttributor)).apply(this, arguments));
	        }
	
	        _createClass(FontStyleAttributor, [{
	          key: 'value',
	          value: function value(node) {
	            return _get(FontStyleAttributor.prototype.__proto__ || Object.getPrototypeOf(FontStyleAttributor.prototype), 'value', this).call(this, node).replace(/["']/g, '');
	          }
	        }]);
	
	        return FontStyleAttributor;
	      }(_parchment2.default.Attributor.Style);
	
	      var FontStyle = new FontStyleAttributor('font', 'font-family', config);
	
	      exports.FontStyle = FontStyle;
	      exports.FontClass = FontClass;
	
	      /***/
	    },
	    /* 40 */
	    /***/function (module, exports, __webpack_require__) {
	
	      "use strict";
	
	      Object.defineProperty(exports, "__esModule", {
	        value: true
	      });
	      exports.SizeStyle = exports.SizeClass = undefined;
	
	      var _parchment = __webpack_require__(0);
	
	      var _parchment2 = _interopRequireDefault(_parchment);
	
	      function _interopRequireDefault(obj) {
	        return obj && obj.__esModule ? obj : { default: obj };
	      }
	
	      var SizeClass = new _parchment2.default.Attributor.Class('size', 'ql-size', {
	        scope: _parchment2.default.Scope.INLINE,
	        whitelist: ['small', 'large', 'huge']
	      });
	      var SizeStyle = new _parchment2.default.Attributor.Style('size', 'font-size', {
	        scope: _parchment2.default.Scope.INLINE,
	        whitelist: ['10px', '18px', '32px']
	      });
	
	      exports.SizeClass = SizeClass;
	      exports.SizeStyle = SizeStyle;
	
	      /***/
	    },
	    /* 41 */
	    /***/function (module, exports, __webpack_require__) {
	
	      "use strict";
	
	      module.exports = {
	        'align': {
	          '': __webpack_require__(79),
	          'center': __webpack_require__(77),
	          'right': __webpack_require__(80),
	          'justify': __webpack_require__(78)
	        },
	        'background': __webpack_require__(81),
	        'blockquote': __webpack_require__(82),
	        'bold': __webpack_require__(83),
	        'clean': __webpack_require__(84),
	        'code': __webpack_require__(55),
	        'code-block': __webpack_require__(55),
	        'color': __webpack_require__(85),
	        'direction': {
	          '': __webpack_require__(86),
	          'rtl': __webpack_require__(87)
	        },
	        'float': {
	          'center': __webpack_require__(89),
	          'full': __webpack_require__(90),
	          'left': __webpack_require__(91),
	          'right': __webpack_require__(92)
	        },
	        'formula': __webpack_require__(93),
	        'header': {
	          '1': __webpack_require__(95),
	          '2': __webpack_require__(94)
	        },
	        'italic': __webpack_require__(98),
	        'image': __webpack_require__(96),
	        'indent': {
	          '+1': __webpack_require__(97),
	          '-1': __webpack_require__(103)
	        },
	        'link': __webpack_require__(99),
	        'list': {
	          'ordered': __webpack_require__(102),
	          'bullet': __webpack_require__(100),
	          'check': __webpack_require__(101)
	        },
	        'script': {
	          'sub': __webpack_require__(105),
	          'super': __webpack_require__(106)
	        },
	        'strike': __webpack_require__(104),
	        'underline': __webpack_require__(107),
	        'video': __webpack_require__(108)
	      };
	
	      /***/
	    },
	    /* 42 */
	    /***/function (module, exports, __webpack_require__) {
	
	      "use strict";
	
	      Object.defineProperty(exports, "__esModule", {
	        value: true
	      });
	      exports.getLastChangeIndex = exports.default = undefined;
	
	      var _createClass = function () {
	        function defineProperties(target, props) {
	          for (var i = 0; i < props.length; i++) {
	            var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
	          }
	        }return function (Constructor, protoProps, staticProps) {
	          if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
	        };
	      }();
	
	      var _parchment = __webpack_require__(0);
	
	      var _parchment2 = _interopRequireDefault(_parchment);
	
	      var _quill = __webpack_require__(6);
	
	      var _quill2 = _interopRequireDefault(_quill);
	
	      var _module = __webpack_require__(10);
	
	      var _module2 = _interopRequireDefault(_module);
	
	      function _interopRequireDefault(obj) {
	        return obj && obj.__esModule ? obj : { default: obj };
	      }
	
	      function _classCallCheck(instance, Constructor) {
	        if (!(instance instanceof Constructor)) {
	          throw new TypeError("Cannot call a class as a function");
	        }
	      }
	
	      function _possibleConstructorReturn(self, call) {
	        if (!self) {
	          throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
	        }return call && ((typeof call === 'undefined' ? 'undefined' : _typeof2(call)) === "object" || typeof call === "function") ? call : self;
	      }
	
	      function _inherits(subClass, superClass) {
	        if (typeof superClass !== "function" && superClass !== null) {
	          throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === 'undefined' ? 'undefined' : _typeof2(superClass)));
	        }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
	      }
	
	      var History = function (_Module) {
	        _inherits(History, _Module);
	
	        function History(quill, options) {
	          _classCallCheck(this, History);
	
	          var _this = _possibleConstructorReturn(this, (History.__proto__ || Object.getPrototypeOf(History)).call(this, quill, options));
	
	          _this.lastRecorded = 0;
	          _this.ignoreChange = false;
	          _this.clear();
	          _this.quill.on(_quill2.default.events.EDITOR_CHANGE, function (eventName, delta, oldDelta, source) {
	            if (eventName !== _quill2.default.events.TEXT_CHANGE || _this.ignoreChange) return;
	            if (!_this.options.userOnly || source === _quill2.default.sources.USER) {
	              _this.record(delta, oldDelta);
	            } else {
	              _this.transform(delta);
	            }
	          });
	          _this.quill.keyboard.addBinding({ key: 'Z', shortKey: true }, _this.undo.bind(_this));
	          _this.quill.keyboard.addBinding({ key: 'Z', shortKey: true, shiftKey: true }, _this.redo.bind(_this));
	          if (/Win/i.test(navigator.platform)) {
	            _this.quill.keyboard.addBinding({ key: 'Y', shortKey: true }, _this.redo.bind(_this));
	          }
	          return _this;
	        }
	
	        _createClass(History, [{
	          key: 'change',
	          value: function change(source, dest) {
	            if (this.stack[source].length === 0) return;
	            var delta = this.stack[source].pop();
	            this.lastRecorded = 0;
	            this.ignoreChange = true;
	            this.quill.updateContents(delta[source], _quill2.default.sources.USER);
	            this.ignoreChange = false;
	            var index = getLastChangeIndex(delta[source]);
	            this.quill.setSelection(index);
	            this.stack[dest].push(delta);
	          }
	        }, {
	          key: 'clear',
	          value: function clear() {
	            this.stack = { undo: [], redo: [] };
	          }
	        }, {
	          key: 'cutoff',
	          value: function cutoff() {
	            this.lastRecorded = 0;
	          }
	        }, {
	          key: 'record',
	          value: function record(changeDelta, oldDelta) {
	            if (changeDelta.ops.length === 0) return;
	            this.stack.redo = [];
	            var undoDelta = this.quill.getContents().diff(oldDelta);
	            var timestamp = Date.now();
	            if (this.lastRecorded + this.options.delay > timestamp && this.stack.undo.length > 0) {
	              var delta = this.stack.undo.pop();
	              undoDelta = undoDelta.compose(delta.undo);
	              changeDelta = delta.redo.compose(changeDelta);
	            } else {
	              this.lastRecorded = timestamp;
	            }
	            this.stack.undo.push({
	              redo: changeDelta,
	              undo: undoDelta
	            });
	            if (this.stack.undo.length > this.options.maxStack) {
	              this.stack.undo.shift();
	            }
	          }
	        }, {
	          key: 'redo',
	          value: function redo() {
	            this.change('redo', 'undo');
	          }
	        }, {
	          key: 'transform',
	          value: function transform(delta) {
	            this.stack.undo.forEach(function (change) {
	              change.undo = delta.transform(change.undo, true);
	              change.redo = delta.transform(change.redo, true);
	            });
	            this.stack.redo.forEach(function (change) {
	              change.undo = delta.transform(change.undo, true);
	              change.redo = delta.transform(change.redo, true);
	            });
	          }
	        }, {
	          key: 'undo',
	          value: function undo() {
	            this.change('undo', 'redo');
	          }
	        }]);
	
	        return History;
	      }(_module2.default);
	
	      History.DEFAULTS = {
	        delay: 1000,
	        maxStack: 100,
	        userOnly: false
	      };
	
	      function endsWithNewlineChange(delta) {
	        var lastOp = delta.ops[delta.ops.length - 1];
	        if (lastOp == null) return false;
	        if (lastOp.insert != null) {
	          return typeof lastOp.insert === 'string' && lastOp.insert.endsWith('\n');
	        }
	        if (lastOp.attributes != null) {
	          return Object.keys(lastOp.attributes).some(function (attr) {
	            return _parchment2.default.query(attr, _parchment2.default.Scope.BLOCK) != null;
	          });
	        }
	        return false;
	      }
	
	      function getLastChangeIndex(delta) {
	        var deleteLength = delta.reduce(function (length, op) {
	          length += op.delete || 0;
	          return length;
	        }, 0);
	        var changeIndex = delta.length() - deleteLength;
	        if (endsWithNewlineChange(delta)) {
	          changeIndex -= 1;
	        }
	        return changeIndex;
	      }
	
	      exports.default = History;
	      exports.getLastChangeIndex = getLastChangeIndex;
	
	      /***/
	    },
	    /* 43 */
	    /***/function (module, exports, __webpack_require__) {
	
	      "use strict";
	
	      Object.defineProperty(exports, "__esModule", {
	        value: true
	      });
	      exports.default = exports.BaseTooltip = undefined;
	
	      var _createClass = function () {
	        function defineProperties(target, props) {
	          for (var i = 0; i < props.length; i++) {
	            var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
	          }
	        }return function (Constructor, protoProps, staticProps) {
	          if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
	        };
	      }();
	
	      var _get = function get(object, property, receiver) {
	        if (object === null) object = Function.prototype;var desc = Object.getOwnPropertyDescriptor(object, property);if (desc === undefined) {
	          var parent = Object.getPrototypeOf(object);if (parent === null) {
	            return undefined;
	          } else {
	            return get(parent, property, receiver);
	          }
	        } else if ("value" in desc) {
	          return desc.value;
	        } else {
	          var getter = desc.get;if (getter === undefined) {
	            return undefined;
	          }return getter.call(receiver);
	        }
	      };
	
	      var _extend = __webpack_require__(3);
	
	      var _extend2 = _interopRequireDefault(_extend);
	
	      var _quillDelta = __webpack_require__(1);
	
	      var _quillDelta2 = _interopRequireDefault(_quillDelta);
	
	      var _emitter = __webpack_require__(9);
	
	      var _emitter2 = _interopRequireDefault(_emitter);
	
	      var _keyboard = __webpack_require__(31);
	
	      var _keyboard2 = _interopRequireDefault(_keyboard);
	
	      var _theme = __webpack_require__(30);
	
	      var _theme2 = _interopRequireDefault(_theme);
	
	      var _colorPicker = __webpack_require__(48);
	
	      var _colorPicker2 = _interopRequireDefault(_colorPicker);
	
	      var _iconPicker = __webpack_require__(49);
	
	      var _iconPicker2 = _interopRequireDefault(_iconPicker);
	
	      var _picker = __webpack_require__(28);
	
	      var _picker2 = _interopRequireDefault(_picker);
	
	      var _tooltip = __webpack_require__(50);
	
	      var _tooltip2 = _interopRequireDefault(_tooltip);
	
	      function _interopRequireDefault(obj) {
	        return obj && obj.__esModule ? obj : { default: obj };
	      }
	
	      function _classCallCheck(instance, Constructor) {
	        if (!(instance instanceof Constructor)) {
	          throw new TypeError("Cannot call a class as a function");
	        }
	      }
	
	      function _possibleConstructorReturn(self, call) {
	        if (!self) {
	          throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
	        }return call && ((typeof call === 'undefined' ? 'undefined' : _typeof2(call)) === "object" || typeof call === "function") ? call : self;
	      }
	
	      function _inherits(subClass, superClass) {
	        if (typeof superClass !== "function" && superClass !== null) {
	          throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === 'undefined' ? 'undefined' : _typeof2(superClass)));
	        }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
	      }
	
	      var ALIGNS = [false, 'center', 'right', 'justify'];
	
	      var COLORS = ["#000000", "#e60000", "#ff9900", "#ffff00", "#008a00", "#0066cc", "#9933ff", "#ffffff", "#facccc", "#ffebcc", "#ffffcc", "#cce8cc", "#cce0f5", "#ebd6ff", "#bbbbbb", "#f06666", "#ffc266", "#ffff66", "#66b966", "#66a3e0", "#c285ff", "#888888", "#a10000", "#b26b00", "#b2b200", "#006100", "#0047b2", "#6b24b2", "#444444", "#5c0000", "#663d00", "#666600", "#003700", "#002966", "#3d1466"];
	
	      var FONTS = [false, 'serif', 'monospace'];
	
	      var HEADERS = ['1', '2', '3', false];
	
	      var SIZES = ['small', false, 'large', 'huge'];
	
	      var BaseTheme = function (_Theme) {
	        _inherits(BaseTheme, _Theme);
	
	        function BaseTheme(quill, options) {
	          _classCallCheck(this, BaseTheme);
	
	          var _this = _possibleConstructorReturn(this, (BaseTheme.__proto__ || Object.getPrototypeOf(BaseTheme)).call(this, quill, options));
	
	          var listener = function listener(e) {
	            if (!document.body.contains(quill.root)) {
	              return document.body.removeEventListener('click', listener);
	            }
	            if (_this.tooltip != null && !_this.tooltip.root.contains(e.target) && document.activeElement !== _this.tooltip.textbox && !_this.quill.hasFocus()) {
	              _this.tooltip.hide();
	            }
	            if (_this.pickers != null) {
	              _this.pickers.forEach(function (picker) {
	                if (!picker.container.contains(e.target)) {
	                  picker.close();
	                }
	              });
	            }
	          };
	          document.body.addEventListener('click', listener);
	          return _this;
	        }
	
	        _createClass(BaseTheme, [{
	          key: 'addModule',
	          value: function addModule(name) {
	            var module = _get(BaseTheme.prototype.__proto__ || Object.getPrototypeOf(BaseTheme.prototype), 'addModule', this).call(this, name);
	            if (name === 'toolbar') {
	              this.extendToolbar(module);
	            }
	            return module;
	          }
	        }, {
	          key: 'buildButtons',
	          value: function buildButtons(buttons, icons) {
	            buttons.forEach(function (button) {
	              var className = button.getAttribute('class') || '';
	              className.split(/\s+/).forEach(function (name) {
	                if (!name.startsWith('ql-')) return;
	                name = name.slice('ql-'.length);
	                if (icons[name] == null) return;
	                if (name === 'direction') {
	                  button.innerHTML = icons[name][''] + icons[name]['rtl'];
	                } else if (typeof icons[name] === 'string') {
	                  button.innerHTML = icons[name];
	                } else {
	                  var value = button.value || '';
	                  if (value != null && icons[name][value]) {
	                    button.innerHTML = icons[name][value];
	                  }
	                }
	              });
	            });
	          }
	        }, {
	          key: 'buildPickers',
	          value: function buildPickers(selects, icons) {
	            var _this2 = this;
	
	            this.pickers = selects.map(function (select) {
	              if (select.classList.contains('ql-align')) {
	                if (select.querySelector('option') == null) {
	                  fillSelect(select, ALIGNS);
	                }
	                return new _iconPicker2.default(select, icons.align);
	              } else if (select.classList.contains('ql-background') || select.classList.contains('ql-color')) {
	                var format = select.classList.contains('ql-background') ? 'background' : 'color';
	                if (select.querySelector('option') == null) {
	                  fillSelect(select, COLORS, format === 'background' ? '#ffffff' : '#000000');
	                }
	                return new _colorPicker2.default(select, icons[format]);
	              } else {
	                if (select.querySelector('option') == null) {
	                  if (select.classList.contains('ql-font')) {
	                    fillSelect(select, FONTS);
	                  } else if (select.classList.contains('ql-header')) {
	                    fillSelect(select, HEADERS);
	                  } else if (select.classList.contains('ql-size')) {
	                    fillSelect(select, SIZES);
	                  }
	                }
	                return new _picker2.default(select);
	              }
	            });
	            var update = function update() {
	              _this2.pickers.forEach(function (picker) {
	                picker.update();
	              });
	            };
	            this.quill.on(_emitter2.default.events.EDITOR_CHANGE, update);
	          }
	        }]);
	
	        return BaseTheme;
	      }(_theme2.default);
	
	      BaseTheme.DEFAULTS = (0, _extend2.default)(true, {}, _theme2.default.DEFAULTS, {
	        modules: {
	          toolbar: {
	            handlers: {
	              formula: function formula() {
	                this.quill.theme.tooltip.edit('formula');
	              },
	              image: function image() {
	                var _this3 = this;
	
	                var fileInput = this.container.querySelector('input.ql-image[type=file]');
	                if (fileInput == null) {
	                  fileInput = document.createElement('input');
	                  fileInput.setAttribute('type', 'file');
	                  fileInput.setAttribute('accept', 'image/png, image/gif, image/jpeg, image/bmp, image/x-icon');
	                  fileInput.classList.add('ql-image');
	                  fileInput.addEventListener('change', function () {
	                    if (fileInput.files != null && fileInput.files[0] != null) {
	                      var reader = new FileReader();
	                      reader.onload = function (e) {
	                        var range = _this3.quill.getSelection(true);
	                        _this3.quill.updateContents(new _quillDelta2.default().retain(range.index).delete(range.length).insert({ image: e.target.result }), _emitter2.default.sources.USER);
	                        fileInput.value = "";
	                      };
	                      reader.readAsDataURL(fileInput.files[0]);
	                    }
	                  });
	                  this.container.appendChild(fileInput);
	                }
	                fileInput.click();
	              },
	              video: function video() {
	                this.quill.theme.tooltip.edit('video');
	              }
	            }
	          }
	        }
	      });
	
	      var BaseTooltip = function (_Tooltip) {
	        _inherits(BaseTooltip, _Tooltip);
	
	        function BaseTooltip(quill, boundsContainer) {
	          _classCallCheck(this, BaseTooltip);
	
	          var _this4 = _possibleConstructorReturn(this, (BaseTooltip.__proto__ || Object.getPrototypeOf(BaseTooltip)).call(this, quill, boundsContainer));
	
	          _this4.textbox = _this4.root.querySelector('input[type="text"]');
	          _this4.listen();
	          return _this4;
	        }
	
	        _createClass(BaseTooltip, [{
	          key: 'listen',
	          value: function listen() {
	            var _this5 = this;
	
	            this.textbox.addEventListener('keydown', function (event) {
	              if (_keyboard2.default.match(event, 'enter')) {
	                _this5.save();
	                event.preventDefault();
	              } else if (_keyboard2.default.match(event, 'escape')) {
	                _this5.cancel();
	                event.preventDefault();
	              }
	            });
	          }
	        }, {
	          key: 'cancel',
	          value: function cancel() {
	            this.hide();
	          }
	        }, {
	          key: 'edit',
	          value: function edit() {
	            var mode = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'link';
	            var preview = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
	
	            this.root.classList.remove('ql-hidden');
	            this.root.classList.add('ql-editing');
	            if (preview != null) {
	              this.textbox.value = preview;
	            } else if (mode !== this.root.getAttribute('data-mode')) {
	              this.textbox.value = '';
	            }
	            this.position(this.quill.getBounds(this.quill.selection.savedRange));
	            this.textbox.select();
	            this.textbox.setAttribute('placeholder', this.textbox.getAttribute('data-' + mode) || '');
	            this.root.setAttribute('data-mode', mode);
	          }
	        }, {
	          key: 'restoreFocus',
	          value: function restoreFocus() {
	            var scrollTop = this.quill.scrollingContainer.scrollTop;
	            this.quill.focus();
	            this.quill.scrollingContainer.scrollTop = scrollTop;
	          }
	        }, {
	          key: 'save',
	          value: function save() {
	            var value = this.textbox.value;
	            switch (this.root.getAttribute('data-mode')) {
	              case 'link':
	                {
	                  var scrollTop = this.quill.root.scrollTop;
	                  if (this.linkRange) {
	                    this.quill.formatText(this.linkRange, 'link', value, _emitter2.default.sources.USER);
	                    delete this.linkRange;
	                  } else {
	                    this.restoreFocus();
	                    this.quill.format('link', value, _emitter2.default.sources.USER);
	                  }
	                  this.quill.root.scrollTop = scrollTop;
	                  break;
	                }
	              case 'video':
	                {
	                  value = extractVideoUrl(value);
	                } // eslint-disable-next-line no-fallthrough
	              case 'formula':
	                {
	                  if (!value) break;
	                  var range = this.quill.getSelection(true);
	                  if (range != null) {
	                    var index = range.index + range.length;
	                    this.quill.insertEmbed(index, this.root.getAttribute('data-mode'), value, _emitter2.default.sources.USER);
	                    if (this.root.getAttribute('data-mode') === 'formula') {
	                      this.quill.insertText(index + 1, ' ', _emitter2.default.sources.USER);
	                    }
	                    this.quill.setSelection(index + 2, _emitter2.default.sources.USER);
	                  }
	                  break;
	                }
	              default:
	            }
	            this.textbox.value = '';
	            this.hide();
	          }
	        }]);
	
	        return BaseTooltip;
	      }(_tooltip2.default);
	
	      function extractVideoUrl(url) {
	        var match = url.match(/^(?:(https?):\/\/)?(?:(?:www|m)\.)?youtube\.com\/watch.*v=([a-zA-Z0-9_-]+)/) || url.match(/^(?:(https?):\/\/)?(?:(?:www|m)\.)?youtu\.be\/([a-zA-Z0-9_-]+)/);
	        if (match) {
	          return (match[1] || 'https') + '://www.youtube.com/embed/' + match[2] + '?showinfo=0';
	        }
	        if (match = url.match(/^(?:(https?):\/\/)?(?:www\.)?vimeo\.com\/(\d+)/)) {
	          // eslint-disable-line no-cond-assign
	          return (match[1] || 'https') + '://player.vimeo.com/video/' + match[2] + '/';
	        }
	        return url;
	      }
	
	      function fillSelect(select, values) {
	        var defaultValue = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
	
	        values.forEach(function (value) {
	          var option = document.createElement('option');
	          if (value === defaultValue) {
	            option.setAttribute('selected', 'selected');
	          } else {
	            option.setAttribute('value', value);
	          }
	          select.appendChild(option);
	        });
	      }
	
	      exports.BaseTooltip = BaseTooltip;
	      exports.default = BaseTheme;
	
	      /***/
	    },
	    /* 44 */
	    /***/function (module, exports, __webpack_require__) {
	
	      "use strict";
	
	      var elem = document.createElement('div');
	      elem.classList.toggle('test-class', false);
	      if (elem.classList.contains('test-class')) {
	        var _toggle = DOMTokenList.prototype.toggle;
	        DOMTokenList.prototype.toggle = function (token, force) {
	          if (arguments.length > 1 && !this.contains(token) === !force) {
	            return force;
	          } else {
	            return _toggle.call(this, token);
	          }
	        };
	      }
	
	      if (!String.prototype.startsWith) {
	        String.prototype.startsWith = function (searchString, position) {
	          position = position || 0;
	          return this.substr(position, searchString.length) === searchString;
	        };
	      }
	
	      if (!String.prototype.endsWith) {
	        String.prototype.endsWith = function (searchString, position) {
	          var subjectString = this.toString();
	          if (typeof position !== 'number' || !isFinite(position) || Math.floor(position) !== position || position > subjectString.length) {
	            position = subjectString.length;
	          }
	          position -= searchString.length;
	          var lastIndex = subjectString.indexOf(searchString, position);
	          return lastIndex !== -1 && lastIndex === position;
	        };
	      }
	
	      if (!Array.prototype.find) {
	        Object.defineProperty(Array.prototype, "find", {
	          value: function value(predicate) {
	            if (this === null) {
	              throw new TypeError('Array.prototype.find called on null or undefined');
	            }
	            if (typeof predicate !== 'function') {
	              throw new TypeError('predicate must be a function');
	            }
	            var list = Object(this);
	            var length = list.length >>> 0;
	            var thisArg = arguments[1];
	            var value;
	
	            for (var i = 0; i < length; i++) {
	              value = list[i];
	              if (predicate.call(thisArg, value, i, list)) {
	                return value;
	              }
	            }
	            return undefined;
	          }
	        });
	      }
	
	      document.addEventListener("DOMContentLoaded", function () {
	        // Disable resizing in Firefox
	        document.execCommand("enableObjectResizing", false, false);
	        // Disable automatic linkifying in IE11
	        document.execCommand("autoUrlDetect", false, false);
	      });
	
	      /***/
	    },
	    /* 45 */
	    /***/function (module, exports, __webpack_require__) {
	
	      "use strict";
	
	      Object.defineProperty(exports, "__esModule", {
	        value: true
	      });
	
	      var _createClass = function () {
	        function defineProperties(target, props) {
	          for (var i = 0; i < props.length; i++) {
	            var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
	          }
	        }return function (Constructor, protoProps, staticProps) {
	          if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
	        };
	      }();
	
	      var _get = function get(object, property, receiver) {
	        if (object === null) object = Function.prototype;var desc = Object.getOwnPropertyDescriptor(object, property);if (desc === undefined) {
	          var parent = Object.getPrototypeOf(object);if (parent === null) {
	            return undefined;
	          } else {
	            return get(parent, property, receiver);
	          }
	        } else if ("value" in desc) {
	          return desc.value;
	        } else {
	          var getter = desc.get;if (getter === undefined) {
	            return undefined;
	          }return getter.call(receiver);
	        }
	      };
	
	      var _inline = __webpack_require__(7);
	
	      var _inline2 = _interopRequireDefault(_inline);
	
	      function _interopRequireDefault(obj) {
	        return obj && obj.__esModule ? obj : { default: obj };
	      }
	
	      function _classCallCheck(instance, Constructor) {
	        if (!(instance instanceof Constructor)) {
	          throw new TypeError("Cannot call a class as a function");
	        }
	      }
	
	      function _possibleConstructorReturn(self, call) {
	        if (!self) {
	          throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
	        }return call && ((typeof call === 'undefined' ? 'undefined' : _typeof2(call)) === "object" || typeof call === "function") ? call : self;
	      }
	
	      function _inherits(subClass, superClass) {
	        if (typeof superClass !== "function" && superClass !== null) {
	          throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === 'undefined' ? 'undefined' : _typeof2(superClass)));
	        }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
	      }
	
	      var Bold = function (_Inline) {
	        _inherits(Bold, _Inline);
	
	        function Bold() {
	          _classCallCheck(this, Bold);
	
	          return _possibleConstructorReturn(this, (Bold.__proto__ || Object.getPrototypeOf(Bold)).apply(this, arguments));
	        }
	
	        _createClass(Bold, [{
	          key: 'optimize',
	          value: function optimize(context) {
	            _get(Bold.prototype.__proto__ || Object.getPrototypeOf(Bold.prototype), 'optimize', this).call(this, context);
	            if (this.domNode.tagName !== this.statics.tagName[0]) {
	              this.replaceWith(this.statics.blotName);
	            }
	          }
	        }], [{
	          key: 'create',
	          value: function create() {
	            return _get(Bold.__proto__ || Object.getPrototypeOf(Bold), 'create', this).call(this);
	          }
	        }, {
	          key: 'formats',
	          value: function formats() {
	            return true;
	          }
	        }]);
	
	        return Bold;
	      }(_inline2.default);
	
	      Bold.blotName = 'bold';
	      Bold.tagName = ['STRONG', 'B'];
	
	      exports.default = Bold;
	
	      /***/
	    },
	    /* 46 */
	    /***/function (module, exports, __webpack_require__) {
	
	      "use strict";
	
	      Object.defineProperty(exports, "__esModule", {
	        value: true
	      });
	      exports.matchText = exports.matchSpacing = exports.matchNewline = exports.matchBlot = exports.matchAttributor = exports.default = undefined;
	
	      var _typeof = typeof Symbol === "function" && _typeof2(Symbol.iterator) === "symbol" ? function (obj) {
	        return typeof obj === 'undefined' ? 'undefined' : _typeof2(obj);
	      } : function (obj) {
	        return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj === 'undefined' ? 'undefined' : _typeof2(obj);
	      };
	
	      var _slicedToArray = function () {
	        function sliceIterator(arr, i) {
	          var _arr = [];var _n = true;var _d = false;var _e = undefined;try {
	            for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
	              _arr.push(_s.value);if (i && _arr.length === i) break;
	            }
	          } catch (err) {
	            _d = true;_e = err;
	          } finally {
	            try {
	              if (!_n && _i["return"]) _i["return"]();
	            } finally {
	              if (_d) throw _e;
	            }
	          }return _arr;
	        }return function (arr, i) {
	          if (Array.isArray(arr)) {
	            return arr;
	          } else if (Symbol.iterator in Object(arr)) {
	            return sliceIterator(arr, i);
	          } else {
	            throw new TypeError("Invalid attempt to destructure non-iterable instance");
	          }
	        };
	      }();
	
	      var _createClass = function () {
	        function defineProperties(target, props) {
	          for (var i = 0; i < props.length; i++) {
	            var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
	          }
	        }return function (Constructor, protoProps, staticProps) {
	          if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
	        };
	      }();
	
	      var _extend2 = __webpack_require__(3);
	
	      var _extend3 = _interopRequireDefault(_extend2);
	
	      var _quillDelta = __webpack_require__(1);
	
	      var _quillDelta2 = _interopRequireDefault(_quillDelta);
	
	      var _parchment = __webpack_require__(0);
	
	      var _parchment2 = _interopRequireDefault(_parchment);
	
	      var _quill = __webpack_require__(6);
	
	      var _quill2 = _interopRequireDefault(_quill);
	
	      var _logger = __webpack_require__(11);
	
	      var _logger2 = _interopRequireDefault(_logger);
	
	      var _module = __webpack_require__(10);
	
	      var _module2 = _interopRequireDefault(_module);
	
	      var _align = __webpack_require__(36);
	
	      var _background = __webpack_require__(37);
	
	      var _color = __webpack_require__(26);
	
	      var _direction = __webpack_require__(38);
	
	      var _font = __webpack_require__(39);
	
	      var _size = __webpack_require__(40);
	
	      function _interopRequireDefault(obj) {
	        return obj && obj.__esModule ? obj : { default: obj };
	      }
	
	      function _defineProperty(obj, key, value) {
	        if (key in obj) {
	          Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });
	        } else {
	          obj[key] = value;
	        }return obj;
	      }
	
	      function _classCallCheck(instance, Constructor) {
	        if (!(instance instanceof Constructor)) {
	          throw new TypeError("Cannot call a class as a function");
	        }
	      }
	
	      function _possibleConstructorReturn(self, call) {
	        if (!self) {
	          throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
	        }return call && ((typeof call === 'undefined' ? 'undefined' : _typeof2(call)) === "object" || typeof call === "function") ? call : self;
	      }
	
	      function _inherits(subClass, superClass) {
	        if (typeof superClass !== "function" && superClass !== null) {
	          throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === 'undefined' ? 'undefined' : _typeof2(superClass)));
	        }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
	      }
	
	      var debug = (0, _logger2.default)('quill:clipboard');
	
	      var DOM_KEY = '__ql-matcher';
	
	      var CLIPBOARD_CONFIG = [[Node.TEXT_NODE, matchText], [Node.TEXT_NODE, matchNewline], ['br', matchBreak], [Node.ELEMENT_NODE, matchNewline], [Node.ELEMENT_NODE, matchBlot], [Node.ELEMENT_NODE, matchSpacing], [Node.ELEMENT_NODE, matchAttributor], [Node.ELEMENT_NODE, matchStyles], ['li', matchIndent], ['b', matchAlias.bind(matchAlias, 'bold')], ['i', matchAlias.bind(matchAlias, 'italic')], ['style', matchIgnore]];
	
	      var ATTRIBUTE_ATTRIBUTORS = [_align.AlignAttribute, _direction.DirectionAttribute].reduce(function (memo, attr) {
	        memo[attr.keyName] = attr;
	        return memo;
	      }, {});
	
	      var STYLE_ATTRIBUTORS = [_align.AlignStyle, _background.BackgroundStyle, _color.ColorStyle, _direction.DirectionStyle, _font.FontStyle, _size.SizeStyle].reduce(function (memo, attr) {
	        memo[attr.keyName] = attr;
	        return memo;
	      }, {});
	
	      var Clipboard = function (_Module) {
	        _inherits(Clipboard, _Module);
	
	        function Clipboard(quill, options) {
	          _classCallCheck(this, Clipboard);
	
	          var _this = _possibleConstructorReturn(this, (Clipboard.__proto__ || Object.getPrototypeOf(Clipboard)).call(this, quill, options));
	
	          _this.quill.root.addEventListener('paste', _this.onPaste.bind(_this));
	          _this.container = _this.quill.addContainer('ql-clipboard');
	          _this.container.setAttribute('contenteditable', true);
	          _this.container.setAttribute('tabindex', -1);
	          _this.matchers = [];
	          CLIPBOARD_CONFIG.concat(_this.options.matchers).forEach(function (_ref) {
	            var _ref2 = _slicedToArray(_ref, 2),
	                selector = _ref2[0],
	                matcher = _ref2[1];
	
	            if (!options.matchVisual && matcher === matchSpacing) return;
	            _this.addMatcher(selector, matcher);
	          });
	          return _this;
	        }
	
	        _createClass(Clipboard, [{
	          key: 'addMatcher',
	          value: function addMatcher(selector, matcher) {
	            this.matchers.push([selector, matcher]);
	          }
	        }, {
	          key: 'convert',
	          value: function convert(html) {
	            if (typeof html === 'string') {
	              this.container.innerHTML = html.replace(/\>\r?\n +\</g, '><'); // Remove spaces between tags
	            }
	
	            var _prepareMatching = this.prepareMatching(),
	                _prepareMatching2 = _slicedToArray(_prepareMatching, 2),
	                elementMatchers = _prepareMatching2[0],
	                textMatchers = _prepareMatching2[1];
	
	            var delta = traverse(this.container, elementMatchers, textMatchers);
	            // Remove trailing newline
	            if (deltaEndsWith(delta, '\n') && delta.ops[delta.ops.length - 1].attributes == null) {
	              delta = delta.compose(new _quillDelta2.default().retain(delta.length() - 1).delete(1));
	            }
	            debug.log('convert', this.container.innerHTML, delta);
	            this.container.innerHTML = '';
	            return delta;
	          }
	        }, {
	          key: 'dangerouslyPasteHTML',
	          value: function dangerouslyPasteHTML(index, html) {
	            var source = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : _quill2.default.sources.API;
	
	            if (typeof index === 'string') {
	              return this.quill.setContents(this.convert(index), html);
	            } else {
	              var paste = this.convert(html);
	              return this.quill.updateContents(new _quillDelta2.default().retain(index).concat(paste), source);
	            }
	          }
	        }, {
	          key: 'onPaste',
	          value: function onPaste(e) {
	            var _this2 = this;
	
	            if (e.defaultPrevented || !this.quill.isEnabled()) return;
	            var range = this.quill.getSelection();
	            var delta = new _quillDelta2.default().retain(range.index);
	            var scrollTop = this.quill.scrollingContainer.scrollTop;
	            this.container.focus();
	            this.quill.selection.update(_quill2.default.sources.SILENT);
	            setTimeout(function () {
	              delta = delta.concat(_this2.convert()).delete(range.length);
	              _this2.quill.updateContents(delta, _quill2.default.sources.USER);
	              // range.length contributes to delta.length()
	              _this2.quill.setSelection(delta.length() - range.length, _quill2.default.sources.SILENT);
	              _this2.quill.scrollingContainer.scrollTop = scrollTop;
	              _this2.quill.focus();
	            }, 1);
	          }
	        }, {
	          key: 'prepareMatching',
	          value: function prepareMatching() {
	            var _this3 = this;
	
	            var elementMatchers = [],
	                textMatchers = [];
	            this.matchers.forEach(function (pair) {
	              var _pair = _slicedToArray(pair, 2),
	                  selector = _pair[0],
	                  matcher = _pair[1];
	
	              switch (selector) {
	                case Node.TEXT_NODE:
	                  textMatchers.push(matcher);
	                  break;
	                case Node.ELEMENT_NODE:
	                  elementMatchers.push(matcher);
	                  break;
	                default:
	                  [].forEach.call(_this3.container.querySelectorAll(selector), function (node) {
	                    // TODO use weakmap
	                    node[DOM_KEY] = node[DOM_KEY] || [];
	                    node[DOM_KEY].push(matcher);
	                  });
	                  break;
	              }
	            });
	            return [elementMatchers, textMatchers];
	          }
	        }]);
	
	        return Clipboard;
	      }(_module2.default);
	
	      Clipboard.DEFAULTS = {
	        matchers: [],
	        matchVisual: true
	      };
	
	      function applyFormat(delta, format, value) {
	        if ((typeof format === 'undefined' ? 'undefined' : _typeof(format)) === 'object') {
	          return Object.keys(format).reduce(function (delta, key) {
	            return applyFormat(delta, key, format[key]);
	          }, delta);
	        } else {
	          return delta.reduce(function (delta, op) {
	            if (op.attributes && op.attributes[format]) {
	              return delta.push(op);
	            } else {
	              return delta.insert(op.insert, (0, _extend3.default)({}, _defineProperty({}, format, value), op.attributes));
	            }
	          }, new _quillDelta2.default());
	        }
	      }
	
	      function computeStyle(node) {
	        if (node.nodeType !== Node.ELEMENT_NODE) return {};
	        var DOM_KEY = '__ql-computed-style';
	        return node[DOM_KEY] || (node[DOM_KEY] = window.getComputedStyle(node));
	      }
	
	      function deltaEndsWith(delta, text) {
	        var endText = "";
	        for (var i = delta.ops.length - 1; i >= 0 && endText.length < text.length; --i) {
	          var op = delta.ops[i];
	          if (typeof op.insert !== 'string') break;
	          endText = op.insert + endText;
	        }
	        return endText.slice(-1 * text.length) === text;
	      }
	
	      function isLine(node) {
	        if (node.childNodes.length === 0) return false; // Exclude embed blocks
	        var style = computeStyle(node);
	        return ['block', 'list-item'].indexOf(style.display) > -1;
	      }
	
	      function traverse(node, elementMatchers, textMatchers) {
	        // Post-order
	        if (node.nodeType === node.TEXT_NODE) {
	          return textMatchers.reduce(function (delta, matcher) {
	            return matcher(node, delta);
	          }, new _quillDelta2.default());
	        } else if (node.nodeType === node.ELEMENT_NODE) {
	          return [].reduce.call(node.childNodes || [], function (delta, childNode) {
	            var childrenDelta = traverse(childNode, elementMatchers, textMatchers);
	            if (childNode.nodeType === node.ELEMENT_NODE) {
	              childrenDelta = elementMatchers.reduce(function (childrenDelta, matcher) {
	                return matcher(childNode, childrenDelta);
	              }, childrenDelta);
	              childrenDelta = (childNode[DOM_KEY] || []).reduce(function (childrenDelta, matcher) {
	                return matcher(childNode, childrenDelta);
	              }, childrenDelta);
	            }
	            return delta.concat(childrenDelta);
	          }, new _quillDelta2.default());
	        } else {
	          return new _quillDelta2.default();
	        }
	      }
	
	      function matchAlias(format, node, delta) {
	        return applyFormat(delta, format, true);
	      }
	
	      function matchAttributor(node, delta) {
	        var attributes = _parchment2.default.Attributor.Attribute.keys(node);
	        var classes = _parchment2.default.Attributor.Class.keys(node);
	        var styles = _parchment2.default.Attributor.Style.keys(node);
	        var formats = {};
	        attributes.concat(classes).concat(styles).forEach(function (name) {
	          var attr = _parchment2.default.query(name, _parchment2.default.Scope.ATTRIBUTE);
	          if (attr != null) {
	            formats[attr.attrName] = attr.value(node);
	            if (formats[attr.attrName]) return;
	          }
	          attr = ATTRIBUTE_ATTRIBUTORS[name];
	          if (attr != null && attr.attrName === name) {
	            formats[attr.attrName] = attr.value(node) || undefined;
	          }
	          attr = STYLE_ATTRIBUTORS[name];
	          if (attr != null && attr.attrName === name) {
	            attr = STYLE_ATTRIBUTORS[name];
	            formats[attr.attrName] = attr.value(node) || undefined;
	          }
	        });
	        if (Object.keys(formats).length > 0) {
	          delta = applyFormat(delta, formats);
	        }
	        return delta;
	      }
	
	      function matchBlot(node, delta) {
	        var match = _parchment2.default.query(node);
	        if (match == null) return delta;
	        if (match.prototype instanceof _parchment2.default.Embed) {
	          var embed = {};
	          var value = match.value(node);
	          if (value != null) {
	            embed[match.blotName] = value;
	            delta = new _quillDelta2.default().insert(embed, match.formats(node));
	          }
	        } else if (typeof match.formats === 'function') {
	          delta = applyFormat(delta, match.blotName, match.formats(node));
	        }
	        return delta;
	      }
	
	      function matchBreak(node, delta) {
	        if (!deltaEndsWith(delta, '\n')) {
	          delta.insert('\n');
	        }
	        return delta;
	      }
	
	      function matchIgnore() {
	        return new _quillDelta2.default();
	      }
	
	      function matchIndent(node, delta) {
	        var match = _parchment2.default.query(node);
	        if (match == null || match.blotName !== 'list-item' || !deltaEndsWith(delta, '\n')) {
	          return delta;
	        }
	        var indent = -1,
	            parent = node.parentNode;
	        while (!parent.classList.contains('ql-clipboard')) {
	          if ((_parchment2.default.query(parent) || {}).blotName === 'list') {
	            indent += 1;
	          }
	          parent = parent.parentNode;
	        }
	        if (indent <= 0) return delta;
	        return delta.compose(new _quillDelta2.default().retain(delta.length() - 1).retain(1, { indent: indent }));
	      }
	
	      function matchNewline(node, delta) {
	        if (!deltaEndsWith(delta, '\n')) {
	          if (isLine(node) || delta.length() > 0 && node.nextSibling && isLine(node.nextSibling)) {
	            delta.insert('\n');
	          }
	        }
	        return delta;
	      }
	
	      function matchSpacing(node, delta) {
	        if (isLine(node) && node.nextElementSibling != null && !deltaEndsWith(delta, '\n\n')) {
	          var nodeHeight = node.offsetHeight + parseFloat(computeStyle(node).marginTop) + parseFloat(computeStyle(node).marginBottom);
	          if (node.nextElementSibling.offsetTop > node.offsetTop + nodeHeight * 1.5) {
	            delta.insert('\n');
	          }
	        }
	        return delta;
	      }
	
	      function matchStyles(node, delta) {
	        var formats = {};
	        var style = node.style || {};
	        if (style.fontStyle && computeStyle(node).fontStyle === 'italic') {
	          formats.italic = true;
	        }
	        if (style.fontWeight && (computeStyle(node).fontWeight.startsWith('bold') || parseInt(computeStyle(node).fontWeight) >= 700)) {
	          formats.bold = true;
	        }
	        if (Object.keys(formats).length > 0) {
	          delta = applyFormat(delta, formats);
	        }
	        if (parseFloat(style.textIndent || 0) > 0) {
	          // Could be 0.5in
	          delta = new _quillDelta2.default().insert('\t').concat(delta);
	        }
	        return delta;
	      }
	
	      function matchText(node, delta) {
	        var text = node.data;
	        // Word represents empty line with <o:p>&nbsp;</o:p>
	        if (node.parentNode.tagName === 'O:P') {
	          return delta.insert(text.trim());
	        }
	        if (text.trim().length === 0 && node.parentNode.classList.contains('ql-clipboard')) {
	          return delta;
	        }
	        if (!computeStyle(node.parentNode).whiteSpace.startsWith('pre')) {
	          // eslint-disable-next-line func-style
	          var replacer = function replacer(collapse, match) {
	            match = match.replace(/[^\u00a0]/g, ''); // \u00a0 is nbsp;
	            return match.length < 1 && collapse ? ' ' : match;
	          };
	          text = text.replace(/\r\n/g, ' ').replace(/\n/g, ' ');
	          text = text.replace(/\s\s+/g, replacer.bind(replacer, true)); // collapse whitespace
	          if (node.previousSibling == null && isLine(node.parentNode) || node.previousSibling != null && isLine(node.previousSibling)) {
	            text = text.replace(/^\s+/, replacer.bind(replacer, false));
	          }
	          if (node.nextSibling == null && isLine(node.parentNode) || node.nextSibling != null && isLine(node.nextSibling)) {
	            text = text.replace(/\s+$/, replacer.bind(replacer, false));
	          }
	        }
	        return delta.insert(text);
	      }
	
	      exports.default = Clipboard;
	      exports.matchAttributor = matchAttributor;
	      exports.matchBlot = matchBlot;
	      exports.matchNewline = matchNewline;
	      exports.matchSpacing = matchSpacing;
	      exports.matchText = matchText;
	
	      /***/
	    },
	    /* 47 */
	    /***/function (module, exports, __webpack_require__) {
	
	      "use strict";
	
	      Object.defineProperty(exports, "__esModule", {
	        value: true
	      });
	      exports.addControls = exports.default = undefined;
	
	      var _slicedToArray = function () {
	        function sliceIterator(arr, i) {
	          var _arr = [];var _n = true;var _d = false;var _e = undefined;try {
	            for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
	              _arr.push(_s.value);if (i && _arr.length === i) break;
	            }
	          } catch (err) {
	            _d = true;_e = err;
	          } finally {
	            try {
	              if (!_n && _i["return"]) _i["return"]();
	            } finally {
	              if (_d) throw _e;
	            }
	          }return _arr;
	        }return function (arr, i) {
	          if (Array.isArray(arr)) {
	            return arr;
	          } else if (Symbol.iterator in Object(arr)) {
	            return sliceIterator(arr, i);
	          } else {
	            throw new TypeError("Invalid attempt to destructure non-iterable instance");
	          }
	        };
	      }();
	
	      var _createClass = function () {
	        function defineProperties(target, props) {
	          for (var i = 0; i < props.length; i++) {
	            var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
	          }
	        }return function (Constructor, protoProps, staticProps) {
	          if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
	        };
	      }();
	
	      var _quillDelta = __webpack_require__(1);
	
	      var _quillDelta2 = _interopRequireDefault(_quillDelta);
	
	      var _parchment = __webpack_require__(0);
	
	      var _parchment2 = _interopRequireDefault(_parchment);
	
	      var _quill = __webpack_require__(6);
	
	      var _quill2 = _interopRequireDefault(_quill);
	
	      var _logger = __webpack_require__(11);
	
	      var _logger2 = _interopRequireDefault(_logger);
	
	      var _module = __webpack_require__(10);
	
	      var _module2 = _interopRequireDefault(_module);
	
	      function _interopRequireDefault(obj) {
	        return obj && obj.__esModule ? obj : { default: obj };
	      }
	
	      function _defineProperty(obj, key, value) {
	        if (key in obj) {
	          Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });
	        } else {
	          obj[key] = value;
	        }return obj;
	      }
	
	      function _classCallCheck(instance, Constructor) {
	        if (!(instance instanceof Constructor)) {
	          throw new TypeError("Cannot call a class as a function");
	        }
	      }
	
	      function _possibleConstructorReturn(self, call) {
	        if (!self) {
	          throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
	        }return call && ((typeof call === 'undefined' ? 'undefined' : _typeof2(call)) === "object" || typeof call === "function") ? call : self;
	      }
	
	      function _inherits(subClass, superClass) {
	        if (typeof superClass !== "function" && superClass !== null) {
	          throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === 'undefined' ? 'undefined' : _typeof2(superClass)));
	        }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
	      }
	
	      var debug = (0, _logger2.default)('quill:toolbar');
	
	      var Toolbar = function (_Module) {
	        _inherits(Toolbar, _Module);
	
	        function Toolbar(quill, options) {
	          _classCallCheck(this, Toolbar);
	
	          var _this = _possibleConstructorReturn(this, (Toolbar.__proto__ || Object.getPrototypeOf(Toolbar)).call(this, quill, options));
	
	          if (Array.isArray(_this.options.container)) {
	            var container = document.createElement('div');
	            addControls(container, _this.options.container);
	            quill.container.parentNode.insertBefore(container, quill.container);
	            _this.container = container;
	          } else if (typeof _this.options.container === 'string') {
	            _this.container = document.querySelector(_this.options.container);
	          } else {
	            _this.container = _this.options.container;
	          }
	          if (!(_this.container instanceof HTMLElement)) {
	            var _ret;
	
	            return _ret = debug.error('Container required for toolbar', _this.options), _possibleConstructorReturn(_this, _ret);
	          }
	          _this.container.classList.add('ql-toolbar');
	          _this.controls = [];
	          _this.handlers = {};
	          Object.keys(_this.options.handlers).forEach(function (format) {
	            _this.addHandler(format, _this.options.handlers[format]);
	          });
	          [].forEach.call(_this.container.querySelectorAll('button, select'), function (input) {
	            _this.attach(input);
	          });
	          _this.quill.on(_quill2.default.events.EDITOR_CHANGE, function (type, range) {
	            if (type === _quill2.default.events.SELECTION_CHANGE) {
	              _this.update(range);
	            }
	          });
	          _this.quill.on(_quill2.default.events.SCROLL_OPTIMIZE, function () {
	            var _this$quill$selection = _this.quill.selection.getRange(),
	                _this$quill$selection2 = _slicedToArray(_this$quill$selection, 1),
	                range = _this$quill$selection2[0]; // quill.getSelection triggers update
	
	
	            _this.update(range);
	          });
	          return _this;
	        }
	
	        _createClass(Toolbar, [{
	          key: 'addHandler',
	          value: function addHandler(format, handler) {
	            this.handlers[format] = handler;
	          }
	        }, {
	          key: 'attach',
	          value: function attach(input) {
	            var _this2 = this;
	
	            var format = [].find.call(input.classList, function (className) {
	              return className.indexOf('ql-') === 0;
	            });
	            if (!format) return;
	            format = format.slice('ql-'.length);
	            if (input.tagName === 'BUTTON') {
	              input.setAttribute('type', 'button');
	            }
	            if (this.handlers[format] == null) {
	              if (this.quill.scroll.whitelist != null && this.quill.scroll.whitelist[format] == null) {
	                debug.warn('ignoring attaching to disabled format', format, input);
	                return;
	              }
	              if (_parchment2.default.query(format) == null) {
	                debug.warn('ignoring attaching to nonexistent format', format, input);
	                return;
	              }
	            }
	            var eventName = input.tagName === 'SELECT' ? 'change' : 'click';
	            input.addEventListener(eventName, function (e) {
	              var value = void 0;
	              if (input.tagName === 'SELECT') {
	                if (input.selectedIndex < 0) return;
	                var selected = input.options[input.selectedIndex];
	                if (selected.hasAttribute('selected')) {
	                  value = false;
	                } else {
	                  value = selected.value || false;
	                }
	              } else {
	                if (input.classList.contains('ql-active')) {
	                  value = false;
	                } else {
	                  value = input.value || !input.hasAttribute('value');
	                }
	                e.preventDefault();
	              }
	              _this2.quill.focus();
	
	              var _quill$selection$getR = _this2.quill.selection.getRange(),
	                  _quill$selection$getR2 = _slicedToArray(_quill$selection$getR, 1),
	                  range = _quill$selection$getR2[0];
	
	              if (_this2.handlers[format] != null) {
	                _this2.handlers[format].call(_this2, value);
	              } else if (_parchment2.default.query(format).prototype instanceof _parchment2.default.Embed) {
	                value = prompt('Enter ' + format);
	                if (!value) return;
	                _this2.quill.updateContents(new _quillDelta2.default().retain(range.index).delete(range.length).insert(_defineProperty({}, format, value)), _quill2.default.sources.USER);
	              } else {
	                _this2.quill.format(format, value, _quill2.default.sources.USER);
	              }
	              _this2.update(range);
	            });
	            // TODO use weakmap
	            this.controls.push([format, input]);
	          }
	        }, {
	          key: 'update',
	          value: function update(range) {
	            var formats = range == null ? {} : this.quill.getFormat(range);
	            this.controls.forEach(function (pair) {
	              var _pair = _slicedToArray(pair, 2),
	                  format = _pair[0],
	                  input = _pair[1];
	
	              if (input.tagName === 'SELECT') {
	                var option = void 0;
	                if (range == null) {
	                  option = null;
	                } else if (formats[format] == null) {
	                  option = input.querySelector('option[selected]');
	                } else if (!Array.isArray(formats[format])) {
	                  var value = formats[format];
	                  if (typeof value === 'string') {
	                    value = value.replace(/\"/g, '\\"');
	                  }
	                  option = input.querySelector('option[value="' + value + '"]');
	                }
	                if (option == null) {
	                  input.value = ''; // TODO make configurable?
	                  input.selectedIndex = -1;
	                } else {
	                  option.selected = true;
	                }
	              } else {
	                if (range == null) {
	                  input.classList.remove('ql-active');
	                } else if (input.hasAttribute('value')) {
	                  // both being null should match (default values)
	                  // '1' should match with 1 (headers)
	                  var isActive = formats[format] === input.getAttribute('value') || formats[format] != null && formats[format].toString() === input.getAttribute('value') || formats[format] == null && !input.getAttribute('value');
	                  input.classList.toggle('ql-active', isActive);
	                } else {
	                  input.classList.toggle('ql-active', formats[format] != null);
	                }
	              }
	            });
	          }
	        }]);
	
	        return Toolbar;
	      }(_module2.default);
	
	      Toolbar.DEFAULTS = {};
	
	      function addButton(container, format, value) {
	        var input = document.createElement('button');
	        input.setAttribute('type', 'button');
	        input.classList.add('ql-' + format);
	        if (value != null) {
	          input.value = value;
	        }
	        container.appendChild(input);
	      }
	
	      function addControls(container, groups) {
	        if (!Array.isArray(groups[0])) {
	          groups = [groups];
	        }
	        groups.forEach(function (controls) {
	          var group = document.createElement('span');
	          group.classList.add('ql-formats');
	          controls.forEach(function (control) {
	            if (typeof control === 'string') {
	              addButton(group, control);
	            } else {
	              var format = Object.keys(control)[0];
	              var value = control[format];
	              if (Array.isArray(value)) {
	                addSelect(group, format, value);
	              } else {
	                addButton(group, format, value);
	              }
	            }
	          });
	          container.appendChild(group);
	        });
	      }
	
	      function addSelect(container, format, values) {
	        var input = document.createElement('select');
	        input.classList.add('ql-' + format);
	        values.forEach(function (value) {
	          var option = document.createElement('option');
	          if (value !== false) {
	            option.setAttribute('value', value);
	          } else {
	            option.setAttribute('selected', 'selected');
	          }
	          input.appendChild(option);
	        });
	        container.appendChild(input);
	      }
	
	      Toolbar.DEFAULTS = {
	        container: null,
	        handlers: {
	          clean: function clean() {
	            var _this3 = this;
	
	            var range = this.quill.getSelection();
	            if (range == null) return;
	            if (range.length == 0) {
	              var formats = this.quill.getFormat();
	              Object.keys(formats).forEach(function (name) {
	                // Clean functionality in existing apps only clean inline formats
	                if (_parchment2.default.query(name, _parchment2.default.Scope.INLINE) != null) {
	                  _this3.quill.format(name, false);
	                }
	              });
	            } else {
	              this.quill.removeFormat(range, _quill2.default.sources.USER);
	            }
	          },
	          direction: function direction(value) {
	            var align = this.quill.getFormat()['align'];
	            if (value === 'rtl' && align == null) {
	              this.quill.format('align', 'right', _quill2.default.sources.USER);
	            } else if (!value && align === 'right') {
	              this.quill.format('align', false, _quill2.default.sources.USER);
	            }
	            this.quill.format('direction', value, _quill2.default.sources.USER);
	          },
	          indent: function indent(value) {
	            var range = this.quill.getSelection();
	            var formats = this.quill.getFormat(range);
	            var indent = parseInt(formats.indent || 0);
	            if (value === '+1' || value === '-1') {
	              var modifier = value === '+1' ? 1 : -1;
	              if (formats.direction === 'rtl') modifier *= -1;
	              this.quill.format('indent', indent + modifier, _quill2.default.sources.USER);
	            }
	          },
	          link: function link(value) {
	            if (value === true) {
	              value = prompt('Enter link URL:');
	            }
	            this.quill.format('link', value, _quill2.default.sources.USER);
	          },
	          list: function list(value) {
	            var range = this.quill.getSelection();
	            var formats = this.quill.getFormat(range);
	            if (value === 'check') {
	              if (formats['list'] === 'checked' || formats['list'] === 'unchecked') {
	                this.quill.format('list', false, _quill2.default.sources.USER);
	              } else {
	                this.quill.format('list', 'unchecked', _quill2.default.sources.USER);
	              }
	            } else {
	              this.quill.format('list', value, _quill2.default.sources.USER);
	            }
	          }
	        }
	      };
	
	      exports.default = Toolbar;
	      exports.addControls = addControls;
	
	      /***/
	    },
	    /* 48 */
	    /***/function (module, exports, __webpack_require__) {
	
	      "use strict";
	
	      Object.defineProperty(exports, "__esModule", {
	        value: true
	      });
	
	      var _createClass = function () {
	        function defineProperties(target, props) {
	          for (var i = 0; i < props.length; i++) {
	            var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
	          }
	        }return function (Constructor, protoProps, staticProps) {
	          if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
	        };
	      }();
	
	      var _get = function get(object, property, receiver) {
	        if (object === null) object = Function.prototype;var desc = Object.getOwnPropertyDescriptor(object, property);if (desc === undefined) {
	          var parent = Object.getPrototypeOf(object);if (parent === null) {
	            return undefined;
	          } else {
	            return get(parent, property, receiver);
	          }
	        } else if ("value" in desc) {
	          return desc.value;
	        } else {
	          var getter = desc.get;if (getter === undefined) {
	            return undefined;
	          }return getter.call(receiver);
	        }
	      };
	
	      var _picker = __webpack_require__(28);
	
	      var _picker2 = _interopRequireDefault(_picker);
	
	      function _interopRequireDefault(obj) {
	        return obj && obj.__esModule ? obj : { default: obj };
	      }
	
	      function _classCallCheck(instance, Constructor) {
	        if (!(instance instanceof Constructor)) {
	          throw new TypeError("Cannot call a class as a function");
	        }
	      }
	
	      function _possibleConstructorReturn(self, call) {
	        if (!self) {
	          throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
	        }return call && ((typeof call === 'undefined' ? 'undefined' : _typeof2(call)) === "object" || typeof call === "function") ? call : self;
	      }
	
	      function _inherits(subClass, superClass) {
	        if (typeof superClass !== "function" && superClass !== null) {
	          throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === 'undefined' ? 'undefined' : _typeof2(superClass)));
	        }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
	      }
	
	      var ColorPicker = function (_Picker) {
	        _inherits(ColorPicker, _Picker);
	
	        function ColorPicker(select, label) {
	          _classCallCheck(this, ColorPicker);
	
	          var _this = _possibleConstructorReturn(this, (ColorPicker.__proto__ || Object.getPrototypeOf(ColorPicker)).call(this, select));
	
	          _this.label.innerHTML = label;
	          _this.container.classList.add('ql-color-picker');
	          [].slice.call(_this.container.querySelectorAll('.ql-picker-item'), 0, 7).forEach(function (item) {
	            item.classList.add('ql-primary');
	          });
	          return _this;
	        }
	
	        _createClass(ColorPicker, [{
	          key: 'buildItem',
	          value: function buildItem(option) {
	            var item = _get(ColorPicker.prototype.__proto__ || Object.getPrototypeOf(ColorPicker.prototype), 'buildItem', this).call(this, option);
	            item.style.backgroundColor = option.getAttribute('value') || '';
	            return item;
	          }
	        }, {
	          key: 'selectItem',
	          value: function selectItem(item, trigger) {
	            _get(ColorPicker.prototype.__proto__ || Object.getPrototypeOf(ColorPicker.prototype), 'selectItem', this).call(this, item, trigger);
	            var colorLabel = this.label.querySelector('.ql-color-label');
	            var value = item ? item.getAttribute('data-value') || '' : '';
	            if (colorLabel) {
	              if (colorLabel.tagName === 'line') {
	                colorLabel.style.stroke = value;
	              } else {
	                colorLabel.style.fill = value;
	              }
	            }
	          }
	        }]);
	
	        return ColorPicker;
	      }(_picker2.default);
	
	      exports.default = ColorPicker;
	
	      /***/
	    },
	    /* 49 */
	    /***/function (module, exports, __webpack_require__) {
	
	      "use strict";
	
	      Object.defineProperty(exports, "__esModule", {
	        value: true
	      });
	
	      var _createClass = function () {
	        function defineProperties(target, props) {
	          for (var i = 0; i < props.length; i++) {
	            var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
	          }
	        }return function (Constructor, protoProps, staticProps) {
	          if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
	        };
	      }();
	
	      var _get = function get(object, property, receiver) {
	        if (object === null) object = Function.prototype;var desc = Object.getOwnPropertyDescriptor(object, property);if (desc === undefined) {
	          var parent = Object.getPrototypeOf(object);if (parent === null) {
	            return undefined;
	          } else {
	            return get(parent, property, receiver);
	          }
	        } else if ("value" in desc) {
	          return desc.value;
	        } else {
	          var getter = desc.get;if (getter === undefined) {
	            return undefined;
	          }return getter.call(receiver);
	        }
	      };
	
	      var _picker = __webpack_require__(28);
	
	      var _picker2 = _interopRequireDefault(_picker);
	
	      function _interopRequireDefault(obj) {
	        return obj && obj.__esModule ? obj : { default: obj };
	      }
	
	      function _classCallCheck(instance, Constructor) {
	        if (!(instance instanceof Constructor)) {
	          throw new TypeError("Cannot call a class as a function");
	        }
	      }
	
	      function _possibleConstructorReturn(self, call) {
	        if (!self) {
	          throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
	        }return call && ((typeof call === 'undefined' ? 'undefined' : _typeof2(call)) === "object" || typeof call === "function") ? call : self;
	      }
	
	      function _inherits(subClass, superClass) {
	        if (typeof superClass !== "function" && superClass !== null) {
	          throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === 'undefined' ? 'undefined' : _typeof2(superClass)));
	        }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
	      }
	
	      var IconPicker = function (_Picker) {
	        _inherits(IconPicker, _Picker);
	
	        function IconPicker(select, icons) {
	          _classCallCheck(this, IconPicker);
	
	          var _this = _possibleConstructorReturn(this, (IconPicker.__proto__ || Object.getPrototypeOf(IconPicker)).call(this, select));
	
	          _this.container.classList.add('ql-icon-picker');
	          [].forEach.call(_this.container.querySelectorAll('.ql-picker-item'), function (item) {
	            item.innerHTML = icons[item.getAttribute('data-value') || ''];
	          });
	          _this.defaultItem = _this.container.querySelector('.ql-selected');
	          _this.selectItem(_this.defaultItem);
	          return _this;
	        }
	
	        _createClass(IconPicker, [{
	          key: 'selectItem',
	          value: function selectItem(item, trigger) {
	            _get(IconPicker.prototype.__proto__ || Object.getPrototypeOf(IconPicker.prototype), 'selectItem', this).call(this, item, trigger);
	            item = item || this.defaultItem;
	            this.label.innerHTML = item.innerHTML;
	          }
	        }]);
	
	        return IconPicker;
	      }(_picker2.default);
	
	      exports.default = IconPicker;
	
	      /***/
	    },
	    /* 50 */
	    /***/function (module, exports, __webpack_require__) {
	
	      "use strict";
	
	      Object.defineProperty(exports, "__esModule", {
	        value: true
	      });
	
	      var _createClass = function () {
	        function defineProperties(target, props) {
	          for (var i = 0; i < props.length; i++) {
	            var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
	          }
	        }return function (Constructor, protoProps, staticProps) {
	          if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
	        };
	      }();
	
	      function _classCallCheck(instance, Constructor) {
	        if (!(instance instanceof Constructor)) {
	          throw new TypeError("Cannot call a class as a function");
	        }
	      }
	
	      var Tooltip = function () {
	        function Tooltip(quill, boundsContainer) {
	          var _this = this;
	
	          _classCallCheck(this, Tooltip);
	
	          this.quill = quill;
	          this.boundsContainer = boundsContainer || document.body;
	          this.root = quill.addContainer('ql-tooltip');
	          this.root.innerHTML = this.constructor.TEMPLATE;
	          if (this.quill.root === this.quill.scrollingContainer) {
	            this.quill.root.addEventListener('scroll', function () {
	              _this.root.style.marginTop = -1 * _this.quill.root.scrollTop + 'px';
	            });
	          }
	          this.hide();
	        }
	
	        _createClass(Tooltip, [{
	          key: 'hide',
	          value: function hide() {
	            this.root.classList.add('ql-hidden');
	          }
	        }, {
	          key: 'position',
	          value: function position(reference) {
	            var left = reference.left + reference.width / 2 - this.root.offsetWidth / 2;
	            // root.scrollTop should be 0 if scrollContainer !== root
	            var top = reference.bottom + this.quill.root.scrollTop;
	            this.root.style.left = left + 'px';
	            this.root.style.top = top + 'px';
	            this.root.classList.remove('ql-flip');
	            var containerBounds = this.boundsContainer.getBoundingClientRect();
	            var rootBounds = this.root.getBoundingClientRect();
	            var shift = 0;
	            if (rootBounds.right > containerBounds.right) {
	              shift = containerBounds.right - rootBounds.right;
	              this.root.style.left = left + shift + 'px';
	            }
	            if (rootBounds.left < containerBounds.left) {
	              shift = containerBounds.left - rootBounds.left;
	              this.root.style.left = left + shift + 'px';
	            }
	            if (rootBounds.bottom > containerBounds.bottom) {
	              var height = rootBounds.bottom - rootBounds.top;
	              var verticalShift = reference.bottom - reference.top + height;
	              this.root.style.top = top - verticalShift + 'px';
	              this.root.classList.add('ql-flip');
	            }
	            return shift;
	          }
	        }, {
	          key: 'show',
	          value: function show() {
	            this.root.classList.remove('ql-editing');
	            this.root.classList.remove('ql-hidden');
	          }
	        }]);
	
	        return Tooltip;
	      }();
	
	      exports.default = Tooltip;
	
	      /***/
	    },
	    /* 51 */
	    /***/function (module, exports) {
	
	      var supportsArgumentsClass = function () {
	        return Object.prototype.toString.call(arguments);
	      }() == '[object Arguments]';
	
	      exports = module.exports = supportsArgumentsClass ? supported : unsupported;
	
	      exports.supported = supported;
	      function supported(object) {
	        return Object.prototype.toString.call(object) == '[object Arguments]';
	      };
	
	      exports.unsupported = unsupported;
	      function unsupported(object) {
	        return object && (typeof object === 'undefined' ? 'undefined' : _typeof2(object)) == 'object' && typeof object.length == 'number' && Object.prototype.hasOwnProperty.call(object, 'callee') && !Object.prototype.propertyIsEnumerable.call(object, 'callee') || false;
	      };
	
	      /***/
	    },
	    /* 52 */
	    /***/function (module, exports) {
	
	      exports = module.exports = typeof Object.keys === 'function' ? Object.keys : shim;
	
	      exports.shim = shim;
	      function shim(obj) {
	        var keys = [];
	        for (var key in obj) {
	          keys.push(key);
	        }return keys;
	      }
	
	      /***/
	    },
	    /* 53 */
	    /***/function (module, exports) {
	
	      'use strict';
	
	      var has = Object.prototype.hasOwnProperty,
	          prefix = '~';
	
	      /**
	       * Constructor to create a storage for our `EE` objects.
	       * An `Events` instance is a plain object whose properties are event names.
	       *
	       * @constructor
	       * @api private
	       */
	      function Events() {}
	
	      //
	      // We try to not inherit from `Object.prototype`. In some engines creating an
	      // instance in this way is faster than calling `Object.create(null)` directly.
	      // If `Object.create(null)` is not supported we prefix the event names with a
	      // character to make sure that the built-in object properties are not
	      // overridden or used as an attack vector.
	      //
	      if (Object.create) {
	        Events.prototype = Object.create(null);
	
	        //
	        // This hack is needed because the `__proto__` property is still inherited in
	        // some old browsers like Android 4, iPhone 5.1, Opera 11 and Safari 5.
	        //
	        if (!new Events().__proto__) prefix = false;
	      }
	
	      /**
	       * Representation of a single event listener.
	       *
	       * @param {Function} fn The listener function.
	       * @param {Mixed} context The context to invoke the listener with.
	       * @param {Boolean} [once=false] Specify if the listener is a one-time listener.
	       * @constructor
	       * @api private
	       */
	      function EE(fn, context, once) {
	        this.fn = fn;
	        this.context = context;
	        this.once = once || false;
	      }
	
	      /**
	       * Minimal `EventEmitter` interface that is molded against the Node.js
	       * `EventEmitter` interface.
	       *
	       * @constructor
	       * @api public
	       */
	      function EventEmitter() {
	        this._events = new Events();
	        this._eventsCount = 0;
	      }
	
	      /**
	       * Return an array listing the events for which the emitter has registered
	       * listeners.
	       *
	       * @returns {Array}
	       * @api public
	       */
	      EventEmitter.prototype.eventNames = function eventNames() {
	        var names = [],
	            events,
	            name;
	
	        if (this._eventsCount === 0) return names;
	
	        for (name in events = this._events) {
	          if (has.call(events, name)) names.push(prefix ? name.slice(1) : name);
	        }
	
	        if (Object.getOwnPropertySymbols) {
	          return names.concat(Object.getOwnPropertySymbols(events));
	        }
	
	        return names;
	      };
	
	      /**
	       * Return the listeners registered for a given event.
	       *
	       * @param {String|Symbol} event The event name.
	       * @param {Boolean} exists Only check if there are listeners.
	       * @returns {Array|Boolean}
	       * @api public
	       */
	      EventEmitter.prototype.listeners = function listeners(event, exists) {
	        var evt = prefix ? prefix + event : event,
	            available = this._events[evt];
	
	        if (exists) return !!available;
	        if (!available) return [];
	        if (available.fn) return [available.fn];
	
	        for (var i = 0, l = available.length, ee = new Array(l); i < l; i++) {
	          ee[i] = available[i].fn;
	        }
	
	        return ee;
	      };
	
	      /**
	       * Calls each of the listeners registered for a given event.
	       *
	       * @param {String|Symbol} event The event name.
	       * @returns {Boolean} `true` if the event had listeners, else `false`.
	       * @api public
	       */
	      EventEmitter.prototype.emit = function emit(event, a1, a2, a3, a4, a5) {
	        var evt = prefix ? prefix + event : event;
	
	        if (!this._events[evt]) return false;
	
	        var listeners = this._events[evt],
	            len = arguments.length,
	            args,
	            i;
	
	        if (listeners.fn) {
	          if (listeners.once) this.removeListener(event, listeners.fn, undefined, true);
	
	          switch (len) {
	            case 1:
	              return listeners.fn.call(listeners.context), true;
	            case 2:
	              return listeners.fn.call(listeners.context, a1), true;
	            case 3:
	              return listeners.fn.call(listeners.context, a1, a2), true;
	            case 4:
	              return listeners.fn.call(listeners.context, a1, a2, a3), true;
	            case 5:
	              return listeners.fn.call(listeners.context, a1, a2, a3, a4), true;
	            case 6:
	              return listeners.fn.call(listeners.context, a1, a2, a3, a4, a5), true;
	          }
	
	          for (i = 1, args = new Array(len - 1); i < len; i++) {
	            args[i - 1] = arguments[i];
	          }
	
	          listeners.fn.apply(listeners.context, args);
	        } else {
	          var length = listeners.length,
	              j;
	
	          for (i = 0; i < length; i++) {
	            if (listeners[i].once) this.removeListener(event, listeners[i].fn, undefined, true);
	
	            switch (len) {
	              case 1:
	                listeners[i].fn.call(listeners[i].context);break;
	              case 2:
	                listeners[i].fn.call(listeners[i].context, a1);break;
	              case 3:
	                listeners[i].fn.call(listeners[i].context, a1, a2);break;
	              case 4:
	                listeners[i].fn.call(listeners[i].context, a1, a2, a3);break;
	              default:
	                if (!args) for (j = 1, args = new Array(len - 1); j < len; j++) {
	                  args[j - 1] = arguments[j];
	                }
	
	                listeners[i].fn.apply(listeners[i].context, args);
	            }
	          }
	        }
	
	        return true;
	      };
	
	      /**
	       * Add a listener for a given event.
	       *
	       * @param {String|Symbol} event The event name.
	       * @param {Function} fn The listener function.
	       * @param {Mixed} [context=this] The context to invoke the listener with.
	       * @returns {EventEmitter} `this`.
	       * @api public
	       */
	      EventEmitter.prototype.on = function on(event, fn, context) {
	        var listener = new EE(fn, context || this),
	            evt = prefix ? prefix + event : event;
	
	        if (!this._events[evt]) this._events[evt] = listener, this._eventsCount++;else if (!this._events[evt].fn) this._events[evt].push(listener);else this._events[evt] = [this._events[evt], listener];
	
	        return this;
	      };
	
	      /**
	       * Add a one-time listener for a given event.
	       *
	       * @param {String|Symbol} event The event name.
	       * @param {Function} fn The listener function.
	       * @param {Mixed} [context=this] The context to invoke the listener with.
	       * @returns {EventEmitter} `this`.
	       * @api public
	       */
	      EventEmitter.prototype.once = function once(event, fn, context) {
	        var listener = new EE(fn, context || this, true),
	            evt = prefix ? prefix + event : event;
	
	        if (!this._events[evt]) this._events[evt] = listener, this._eventsCount++;else if (!this._events[evt].fn) this._events[evt].push(listener);else this._events[evt] = [this._events[evt], listener];
	
	        return this;
	      };
	
	      /**
	       * Remove the listeners of a given event.
	       *
	       * @param {String|Symbol} event The event name.
	       * @param {Function} fn Only remove the listeners that match this function.
	       * @param {Mixed} context Only remove the listeners that have this context.
	       * @param {Boolean} once Only remove one-time listeners.
	       * @returns {EventEmitter} `this`.
	       * @api public
	       */
	      EventEmitter.prototype.removeListener = function removeListener(event, fn, context, once) {
	        var evt = prefix ? prefix + event : event;
	
	        if (!this._events[evt]) return this;
	        if (!fn) {
	          if (--this._eventsCount === 0) this._events = new Events();else delete this._events[evt];
	          return this;
	        }
	
	        var listeners = this._events[evt];
	
	        if (listeners.fn) {
	          if (listeners.fn === fn && (!once || listeners.once) && (!context || listeners.context === context)) {
	            if (--this._eventsCount === 0) this._events = new Events();else delete this._events[evt];
	          }
	        } else {
	          for (var i = 0, events = [], length = listeners.length; i < length; i++) {
	            if (listeners[i].fn !== fn || once && !listeners[i].once || context && listeners[i].context !== context) {
	              events.push(listeners[i]);
	            }
	          }
	
	          //
	          // Reset the array, or remove it completely if we have no more listeners.
	          //
	          if (events.length) this._events[evt] = events.length === 1 ? events[0] : events;else if (--this._eventsCount === 0) this._events = new Events();else delete this._events[evt];
	        }
	
	        return this;
	      };
	
	      /**
	       * Remove all listeners, or those of the specified event.
	       *
	       * @param {String|Symbol} [event] The event name.
	       * @returns {EventEmitter} `this`.
	       * @api public
	       */
	      EventEmitter.prototype.removeAllListeners = function removeAllListeners(event) {
	        var evt;
	
	        if (event) {
	          evt = prefix ? prefix + event : event;
	          if (this._events[evt]) {
	            if (--this._eventsCount === 0) this._events = new Events();else delete this._events[evt];
	          }
	        } else {
	          this._events = new Events();
	          this._eventsCount = 0;
	        }
	
	        return this;
	      };
	
	      //
	      // Alias methods names because people roll like that.
	      //
	      EventEmitter.prototype.off = EventEmitter.prototype.removeListener;
	      EventEmitter.prototype.addListener = EventEmitter.prototype.on;
	
	      //
	      // This function doesn't apply anymore.
	      //
	      EventEmitter.prototype.setMaxListeners = function setMaxListeners() {
	        return this;
	      };
	
	      //
	      // Expose the prefix.
	      //
	      EventEmitter.prefixed = prefix;
	
	      //
	      // Allow `EventEmitter` to be imported as module namespace.
	      //
	      EventEmitter.EventEmitter = EventEmitter;
	
	      //
	      // Expose the module.
	      //
	      if ('undefined' !== typeof module) {
	        module.exports = EventEmitter;
	      }
	
	      /***/
	    },
	    /* 54 */
	    /***/function (module, exports) {
	
	      /**
	       * This library modifies the diff-patch-match library by Neil Fraser
	       * by removing the patch and match functionality and certain advanced
	       * options in the diff function. The original license is as follows:
	       *
	       * ===
	       *
	       * Diff Match and Patch
	       *
	       * Copyright 2006 Google Inc.
	       * http://code.google.com/p/google-diff-match-patch/
	       *
	       * Licensed under the Apache License, Version 2.0 (the "License");
	       * you may not use this file except in compliance with the License.
	       * You may obtain a copy of the License at
	       *
	       *   http://www.apache.org/licenses/LICENSE-2.0
	       *
	       * Unless required by applicable law or agreed to in writing, software
	       * distributed under the License is distributed on an "AS IS" BASIS,
	       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	       * See the License for the specific language governing permissions and
	       * limitations under the License.
	       */
	
	      /**
	       * The data structure representing a diff is an array of tuples:
	       * [[DIFF_DELETE, 'Hello'], [DIFF_INSERT, 'Goodbye'], [DIFF_EQUAL, ' world.']]
	       * which means: delete 'Hello', add 'Goodbye' and keep ' world.'
	       */
	      var DIFF_DELETE = -1;
	      var DIFF_INSERT = 1;
	      var DIFF_EQUAL = 0;
	
	      /**
	       * Find the differences between two texts.  Simplifies the problem by stripping
	       * any common prefix or suffix off the texts before diffing.
	       * @param {string} text1 Old string to be diffed.
	       * @param {string} text2 New string to be diffed.
	       * @param {Int} cursor_pos Expected edit position in text1 (optional)
	       * @return {Array} Array of diff tuples.
	       */
	      function diff_main(text1, text2, cursor_pos) {
	        // Check for equality (speedup).
	        if (text1 == text2) {
	          if (text1) {
	            return [[DIFF_EQUAL, text1]];
	          }
	          return [];
	        }
	
	        // Check cursor_pos within bounds
	        if (cursor_pos < 0 || text1.length < cursor_pos) {
	          cursor_pos = null;
	        }
	
	        // Trim off common prefix (speedup).
	        var commonlength = diff_commonPrefix(text1, text2);
	        var commonprefix = text1.substring(0, commonlength);
	        text1 = text1.substring(commonlength);
	        text2 = text2.substring(commonlength);
	
	        // Trim off common suffix (speedup).
	        commonlength = diff_commonSuffix(text1, text2);
	        var commonsuffix = text1.substring(text1.length - commonlength);
	        text1 = text1.substring(0, text1.length - commonlength);
	        text2 = text2.substring(0, text2.length - commonlength);
	
	        // Compute the diff on the middle block.
	        var diffs = diff_compute_(text1, text2);
	
	        // Restore the prefix and suffix.
	        if (commonprefix) {
	          diffs.unshift([DIFF_EQUAL, commonprefix]);
	        }
	        if (commonsuffix) {
	          diffs.push([DIFF_EQUAL, commonsuffix]);
	        }
	        diff_cleanupMerge(diffs);
	        if (cursor_pos != null) {
	          diffs = fix_cursor(diffs, cursor_pos);
	        }
	        return diffs;
	      };
	
	      /**
	       * Find the differences between two texts.  Assumes that the texts do not
	       * have any common prefix or suffix.
	       * @param {string} text1 Old string to be diffed.
	       * @param {string} text2 New string to be diffed.
	       * @return {Array} Array of diff tuples.
	       */
	      function diff_compute_(text1, text2) {
	        var diffs;
	
	        if (!text1) {
	          // Just add some text (speedup).
	          return [[DIFF_INSERT, text2]];
	        }
	
	        if (!text2) {
	          // Just delete some text (speedup).
	          return [[DIFF_DELETE, text1]];
	        }
	
	        var longtext = text1.length > text2.length ? text1 : text2;
	        var shorttext = text1.length > text2.length ? text2 : text1;
	        var i = longtext.indexOf(shorttext);
	        if (i != -1) {
	          // Shorter text is inside the longer text (speedup).
	          diffs = [[DIFF_INSERT, longtext.substring(0, i)], [DIFF_EQUAL, shorttext], [DIFF_INSERT, longtext.substring(i + shorttext.length)]];
	          // Swap insertions for deletions if diff is reversed.
	          if (text1.length > text2.length) {
	            diffs[0][0] = diffs[2][0] = DIFF_DELETE;
	          }
	          return diffs;
	        }
	
	        if (shorttext.length == 1) {
	          // Single character string.
	          // After the previous speedup, the character can't be an equality.
	          return [[DIFF_DELETE, text1], [DIFF_INSERT, text2]];
	        }
	
	        // Check to see if the problem can be split in two.
	        var hm = diff_halfMatch_(text1, text2);
	        if (hm) {
	          // A half-match was found, sort out the return data.
	          var text1_a = hm[0];
	          var text1_b = hm[1];
	          var text2_a = hm[2];
	          var text2_b = hm[3];
	          var mid_common = hm[4];
	          // Send both pairs off for separate processing.
	          var diffs_a = diff_main(text1_a, text2_a);
	          var diffs_b = diff_main(text1_b, text2_b);
	          // Merge the results.
	          return diffs_a.concat([[DIFF_EQUAL, mid_common]], diffs_b);
	        }
	
	        return diff_bisect_(text1, text2);
	      };
	
	      /**
	       * Find the 'middle snake' of a diff, split the problem in two
	       * and return the recursively constructed diff.
	       * See Myers 1986 paper: An O(ND) Difference Algorithm and Its Variations.
	       * @param {string} text1 Old string to be diffed.
	       * @param {string} text2 New string to be diffed.
	       * @return {Array} Array of diff tuples.
	       * @private
	       */
	      function diff_bisect_(text1, text2) {
	        // Cache the text lengths to prevent multiple calls.
	        var text1_length = text1.length;
	        var text2_length = text2.length;
	        var max_d = Math.ceil((text1_length + text2_length) / 2);
	        var v_offset = max_d;
	        var v_length = 2 * max_d;
	        var v1 = new Array(v_length);
	        var v2 = new Array(v_length);
	        // Setting all elements to -1 is faster in Chrome & Firefox than mixing
	        // integers and undefined.
	        for (var x = 0; x < v_length; x++) {
	          v1[x] = -1;
	          v2[x] = -1;
	        }
	        v1[v_offset + 1] = 0;
	        v2[v_offset + 1] = 0;
	        var delta = text1_length - text2_length;
	        // If the total number of characters is odd, then the front path will collide
	        // with the reverse path.
	        var front = delta % 2 != 0;
	        // Offsets for start and end of k loop.
	        // Prevents mapping of space beyond the grid.
	        var k1start = 0;
	        var k1end = 0;
	        var k2start = 0;
	        var k2end = 0;
	        for (var d = 0; d < max_d; d++) {
	          // Walk the front path one step.
	          for (var k1 = -d + k1start; k1 <= d - k1end; k1 += 2) {
	            var k1_offset = v_offset + k1;
	            var x1;
	            if (k1 == -d || k1 != d && v1[k1_offset - 1] < v1[k1_offset + 1]) {
	              x1 = v1[k1_offset + 1];
	            } else {
	              x1 = v1[k1_offset - 1] + 1;
	            }
	            var y1 = x1 - k1;
	            while (x1 < text1_length && y1 < text2_length && text1.charAt(x1) == text2.charAt(y1)) {
	              x1++;
	              y1++;
	            }
	            v1[k1_offset] = x1;
	            if (x1 > text1_length) {
	              // Ran off the right of the graph.
	              k1end += 2;
	            } else if (y1 > text2_length) {
	              // Ran off the bottom of the graph.
	              k1start += 2;
	            } else if (front) {
	              var k2_offset = v_offset + delta - k1;
	              if (k2_offset >= 0 && k2_offset < v_length && v2[k2_offset] != -1) {
	                // Mirror x2 onto top-left coordinate system.
	                var x2 = text1_length - v2[k2_offset];
	                if (x1 >= x2) {
	                  // Overlap detected.
	                  return diff_bisectSplit_(text1, text2, x1, y1);
	                }
	              }
	            }
	          }
	
	          // Walk the reverse path one step.
	          for (var k2 = -d + k2start; k2 <= d - k2end; k2 += 2) {
	            var k2_offset = v_offset + k2;
	            var x2;
	            if (k2 == -d || k2 != d && v2[k2_offset - 1] < v2[k2_offset + 1]) {
	              x2 = v2[k2_offset + 1];
	            } else {
	              x2 = v2[k2_offset - 1] + 1;
	            }
	            var y2 = x2 - k2;
	            while (x2 < text1_length && y2 < text2_length && text1.charAt(text1_length - x2 - 1) == text2.charAt(text2_length - y2 - 1)) {
	              x2++;
	              y2++;
	            }
	            v2[k2_offset] = x2;
	            if (x2 > text1_length) {
	              // Ran off the left of the graph.
	              k2end += 2;
	            } else if (y2 > text2_length) {
	              // Ran off the top of the graph.
	              k2start += 2;
	            } else if (!front) {
	              var k1_offset = v_offset + delta - k2;
	              if (k1_offset >= 0 && k1_offset < v_length && v1[k1_offset] != -1) {
	                var x1 = v1[k1_offset];
	                var y1 = v_offset + x1 - k1_offset;
	                // Mirror x2 onto top-left coordinate system.
	                x2 = text1_length - x2;
	                if (x1 >= x2) {
	                  // Overlap detected.
	                  return diff_bisectSplit_(text1, text2, x1, y1);
	                }
	              }
	            }
	          }
	        }
	        // Diff took too long and hit the deadline or
	        // number of diffs equals number of characters, no commonality at all.
	        return [[DIFF_DELETE, text1], [DIFF_INSERT, text2]];
	      };
	
	      /**
	       * Given the location of the 'middle snake', split the diff in two parts
	       * and recurse.
	       * @param {string} text1 Old string to be diffed.
	       * @param {string} text2 New string to be diffed.
	       * @param {number} x Index of split point in text1.
	       * @param {number} y Index of split point in text2.
	       * @return {Array} Array of diff tuples.
	       */
	      function diff_bisectSplit_(text1, text2, x, y) {
	        var text1a = text1.substring(0, x);
	        var text2a = text2.substring(0, y);
	        var text1b = text1.substring(x);
	        var text2b = text2.substring(y);
	
	        // Compute both diffs serially.
	        var diffs = diff_main(text1a, text2a);
	        var diffsb = diff_main(text1b, text2b);
	
	        return diffs.concat(diffsb);
	      };
	
	      /**
	       * Determine the common prefix of two strings.
	       * @param {string} text1 First string.
	       * @param {string} text2 Second string.
	       * @return {number} The number of characters common to the start of each
	       *     string.
	       */
	      function diff_commonPrefix(text1, text2) {
	        // Quick check for common null cases.
	        if (!text1 || !text2 || text1.charAt(0) != text2.charAt(0)) {
	          return 0;
	        }
	        // Binary search.
	        // Performance analysis: http://neil.fraser.name/news/2007/10/09/
	        var pointermin = 0;
	        var pointermax = Math.min(text1.length, text2.length);
	        var pointermid = pointermax;
	        var pointerstart = 0;
	        while (pointermin < pointermid) {
	          if (text1.substring(pointerstart, pointermid) == text2.substring(pointerstart, pointermid)) {
	            pointermin = pointermid;
	            pointerstart = pointermin;
	          } else {
	            pointermax = pointermid;
	          }
	          pointermid = Math.floor((pointermax - pointermin) / 2 + pointermin);
	        }
	        return pointermid;
	      };
	
	      /**
	       * Determine the common suffix of two strings.
	       * @param {string} text1 First string.
	       * @param {string} text2 Second string.
	       * @return {number} The number of characters common to the end of each string.
	       */
	      function diff_commonSuffix(text1, text2) {
	        // Quick check for common null cases.
	        if (!text1 || !text2 || text1.charAt(text1.length - 1) != text2.charAt(text2.length - 1)) {
	          return 0;
	        }
	        // Binary search.
	        // Performance analysis: http://neil.fraser.name/news/2007/10/09/
	        var pointermin = 0;
	        var pointermax = Math.min(text1.length, text2.length);
	        var pointermid = pointermax;
	        var pointerend = 0;
	        while (pointermin < pointermid) {
	          if (text1.substring(text1.length - pointermid, text1.length - pointerend) == text2.substring(text2.length - pointermid, text2.length - pointerend)) {
	            pointermin = pointermid;
	            pointerend = pointermin;
	          } else {
	            pointermax = pointermid;
	          }
	          pointermid = Math.floor((pointermax - pointermin) / 2 + pointermin);
	        }
	        return pointermid;
	      };
	
	      /**
	       * Do the two texts share a substring which is at least half the length of the
	       * longer text?
	       * This speedup can produce non-minimal diffs.
	       * @param {string} text1 First string.
	       * @param {string} text2 Second string.
	       * @return {Array.<string>} Five element Array, containing the prefix of
	       *     text1, the suffix of text1, the prefix of text2, the suffix of
	       *     text2 and the common middle.  Or null if there was no match.
	       */
	      function diff_halfMatch_(text1, text2) {
	        var longtext = text1.length > text2.length ? text1 : text2;
	        var shorttext = text1.length > text2.length ? text2 : text1;
	        if (longtext.length < 4 || shorttext.length * 2 < longtext.length) {
	          return null; // Pointless.
	        }
	
	        /**
	         * Does a substring of shorttext exist within longtext such that the substring
	         * is at least half the length of longtext?
	         * Closure, but does not reference any external variables.
	         * @param {string} longtext Longer string.
	         * @param {string} shorttext Shorter string.
	         * @param {number} i Start index of quarter length substring within longtext.
	         * @return {Array.<string>} Five element Array, containing the prefix of
	         *     longtext, the suffix of longtext, the prefix of shorttext, the suffix
	         *     of shorttext and the common middle.  Or null if there was no match.
	         * @private
	         */
	        function diff_halfMatchI_(longtext, shorttext, i) {
	          // Start with a 1/4 length substring at position i as a seed.
	          var seed = longtext.substring(i, i + Math.floor(longtext.length / 4));
	          var j = -1;
	          var best_common = '';
	          var best_longtext_a, best_longtext_b, best_shorttext_a, best_shorttext_b;
	          while ((j = shorttext.indexOf(seed, j + 1)) != -1) {
	            var prefixLength = diff_commonPrefix(longtext.substring(i), shorttext.substring(j));
	            var suffixLength = diff_commonSuffix(longtext.substring(0, i), shorttext.substring(0, j));
	            if (best_common.length < suffixLength + prefixLength) {
	              best_common = shorttext.substring(j - suffixLength, j) + shorttext.substring(j, j + prefixLength);
	              best_longtext_a = longtext.substring(0, i - suffixLength);
	              best_longtext_b = longtext.substring(i + prefixLength);
	              best_shorttext_a = shorttext.substring(0, j - suffixLength);
	              best_shorttext_b = shorttext.substring(j + prefixLength);
	            }
	          }
	          if (best_common.length * 2 >= longtext.length) {
	            return [best_longtext_a, best_longtext_b, best_shorttext_a, best_shorttext_b, best_common];
	          } else {
	            return null;
	          }
	        }
	
	        // First check if the second quarter is the seed for a half-match.
	        var hm1 = diff_halfMatchI_(longtext, shorttext, Math.ceil(longtext.length / 4));
	        // Check again based on the third quarter.
	        var hm2 = diff_halfMatchI_(longtext, shorttext, Math.ceil(longtext.length / 2));
	        var hm;
	        if (!hm1 && !hm2) {
	          return null;
	        } else if (!hm2) {
	          hm = hm1;
	        } else if (!hm1) {
	          hm = hm2;
	        } else {
	          // Both matched.  Select the longest.
	          hm = hm1[4].length > hm2[4].length ? hm1 : hm2;
	        }
	
	        // A half-match was found, sort out the return data.
	        var text1_a, text1_b, text2_a, text2_b;
	        if (text1.length > text2.length) {
	          text1_a = hm[0];
	          text1_b = hm[1];
	          text2_a = hm[2];
	          text2_b = hm[3];
	        } else {
	          text2_a = hm[0];
	          text2_b = hm[1];
	          text1_a = hm[2];
	          text1_b = hm[3];
	        }
	        var mid_common = hm[4];
	        return [text1_a, text1_b, text2_a, text2_b, mid_common];
	      };
	
	      /**
	       * Reorder and merge like edit sections.  Merge equalities.
	       * Any edit section can move as long as it doesn't cross an equality.
	       * @param {Array} diffs Array of diff tuples.
	       */
	      function diff_cleanupMerge(diffs) {
	        diffs.push([DIFF_EQUAL, '']); // Add a dummy entry at the end.
	        var pointer = 0;
	        var count_delete = 0;
	        var count_insert = 0;
	        var text_delete = '';
	        var text_insert = '';
	        var commonlength;
	        while (pointer < diffs.length) {
	          switch (diffs[pointer][0]) {
	            case DIFF_INSERT:
	              count_insert++;
	              text_insert += diffs[pointer][1];
	              pointer++;
	              break;
	            case DIFF_DELETE:
	              count_delete++;
	              text_delete += diffs[pointer][1];
	              pointer++;
	              break;
	            case DIFF_EQUAL:
	              // Upon reaching an equality, check for prior redundancies.
	              if (count_delete + count_insert > 1) {
	                if (count_delete !== 0 && count_insert !== 0) {
	                  // Factor out any common prefixies.
	                  commonlength = diff_commonPrefix(text_insert, text_delete);
	                  if (commonlength !== 0) {
	                    if (pointer - count_delete - count_insert > 0 && diffs[pointer - count_delete - count_insert - 1][0] == DIFF_EQUAL) {
	                      diffs[pointer - count_delete - count_insert - 1][1] += text_insert.substring(0, commonlength);
	                    } else {
	                      diffs.splice(0, 0, [DIFF_EQUAL, text_insert.substring(0, commonlength)]);
	                      pointer++;
	                    }
	                    text_insert = text_insert.substring(commonlength);
	                    text_delete = text_delete.substring(commonlength);
	                  }
	                  // Factor out any common suffixies.
	                  commonlength = diff_commonSuffix(text_insert, text_delete);
	                  if (commonlength !== 0) {
	                    diffs[pointer][1] = text_insert.substring(text_insert.length - commonlength) + diffs[pointer][1];
	                    text_insert = text_insert.substring(0, text_insert.length - commonlength);
	                    text_delete = text_delete.substring(0, text_delete.length - commonlength);
	                  }
	                }
	                // Delete the offending records and add the merged ones.
	                if (count_delete === 0) {
	                  diffs.splice(pointer - count_insert, count_delete + count_insert, [DIFF_INSERT, text_insert]);
	                } else if (count_insert === 0) {
	                  diffs.splice(pointer - count_delete, count_delete + count_insert, [DIFF_DELETE, text_delete]);
	                } else {
	                  diffs.splice(pointer - count_delete - count_insert, count_delete + count_insert, [DIFF_DELETE, text_delete], [DIFF_INSERT, text_insert]);
	                }
	                pointer = pointer - count_delete - count_insert + (count_delete ? 1 : 0) + (count_insert ? 1 : 0) + 1;
	              } else if (pointer !== 0 && diffs[pointer - 1][0] == DIFF_EQUAL) {
	                // Merge this equality with the previous one.
	                diffs[pointer - 1][1] += diffs[pointer][1];
	                diffs.splice(pointer, 1);
	              } else {
	                pointer++;
	              }
	              count_insert = 0;
	              count_delete = 0;
	              text_delete = '';
	              text_insert = '';
	              break;
	          }
	        }
	        if (diffs[diffs.length - 1][1] === '') {
	          diffs.pop(); // Remove the dummy entry at the end.
	        }
	
	        // Second pass: look for single edits surrounded on both sides by equalities
	        // which can be shifted sideways to eliminate an equality.
	        // e.g: A<ins>BA</ins>C -> <ins>AB</ins>AC
	        var changes = false;
	        pointer = 1;
	        // Intentionally ignore the first and last element (don't need checking).
	        while (pointer < diffs.length - 1) {
	          if (diffs[pointer - 1][0] == DIFF_EQUAL && diffs[pointer + 1][0] == DIFF_EQUAL) {
	            // This is a single edit surrounded by equalities.
	            if (diffs[pointer][1].substring(diffs[pointer][1].length - diffs[pointer - 1][1].length) == diffs[pointer - 1][1]) {
	              // Shift the edit over the previous equality.
	              diffs[pointer][1] = diffs[pointer - 1][1] + diffs[pointer][1].substring(0, diffs[pointer][1].length - diffs[pointer - 1][1].length);
	              diffs[pointer + 1][1] = diffs[pointer - 1][1] + diffs[pointer + 1][1];
	              diffs.splice(pointer - 1, 1);
	              changes = true;
	            } else if (diffs[pointer][1].substring(0, diffs[pointer + 1][1].length) == diffs[pointer + 1][1]) {
	              // Shift the edit over the next equality.
	              diffs[pointer - 1][1] += diffs[pointer + 1][1];
	              diffs[pointer][1] = diffs[pointer][1].substring(diffs[pointer + 1][1].length) + diffs[pointer + 1][1];
	              diffs.splice(pointer + 1, 1);
	              changes = true;
	            }
	          }
	          pointer++;
	        }
	        // If shifts were made, the diff needs reordering and another shift sweep.
	        if (changes) {
	          diff_cleanupMerge(diffs);
	        }
	      };
	
	      var diff = diff_main;
	      diff.INSERT = DIFF_INSERT;
	      diff.DELETE = DIFF_DELETE;
	      diff.EQUAL = DIFF_EQUAL;
	
	      module.exports = diff;
	
	      /*
	       * Modify a diff such that the cursor position points to the start of a change:
	       * E.g.
	       *   cursor_normalize_diff([[DIFF_EQUAL, 'abc']], 1)
	       *     => [1, [[DIFF_EQUAL, 'a'], [DIFF_EQUAL, 'bc']]]
	       *   cursor_normalize_diff([[DIFF_INSERT, 'new'], [DIFF_DELETE, 'xyz']], 2)
	       *     => [2, [[DIFF_INSERT, 'new'], [DIFF_DELETE, 'xy'], [DIFF_DELETE, 'z']]]
	       *
	       * @param {Array} diffs Array of diff tuples
	       * @param {Int} cursor_pos Suggested edit position. Must not be out of bounds!
	       * @return {Array} A tuple [cursor location in the modified diff, modified diff]
	       */
	      function cursor_normalize_diff(diffs, cursor_pos) {
	        if (cursor_pos === 0) {
	          return [DIFF_EQUAL, diffs];
	        }
	        for (var current_pos = 0, i = 0; i < diffs.length; i++) {
	          var d = diffs[i];
	          if (d[0] === DIFF_DELETE || d[0] === DIFF_EQUAL) {
	            var next_pos = current_pos + d[1].length;
	            if (cursor_pos === next_pos) {
	              return [i + 1, diffs];
	            } else if (cursor_pos < next_pos) {
	              // copy to prevent side effects
	              diffs = diffs.slice();
	              // split d into two diff changes
	              var split_pos = cursor_pos - current_pos;
	              var d_left = [d[0], d[1].slice(0, split_pos)];
	              var d_right = [d[0], d[1].slice(split_pos)];
	              diffs.splice(i, 1, d_left, d_right);
	              return [i + 1, diffs];
	            } else {
	              current_pos = next_pos;
	            }
	          }
	        }
	        throw new Error('cursor_pos is out of bounds!');
	      }
	
	      /*
	       * Modify a diff such that the edit position is "shifted" to the proposed edit location (cursor_position).
	       *
	       * Case 1)
	       *   Check if a naive shift is possible:
	       *     [0, X], [ 1, Y] -> [ 1, Y], [0, X]    (if X + Y === Y + X)
	       *     [0, X], [-1, Y] -> [-1, Y], [0, X]    (if X + Y === Y + X) - holds same result
	       * Case 2)
	       *   Check if the following shifts are possible:
	       *     [0, 'pre'], [ 1, 'prefix'] -> [ 1, 'pre'], [0, 'pre'], [ 1, 'fix']
	       *     [0, 'pre'], [-1, 'prefix'] -> [-1, 'pre'], [0, 'pre'], [-1, 'fix']
	       *         ^            ^
	       *         d          d_next
	       *
	       * @param {Array} diffs Array of diff tuples
	       * @param {Int} cursor_pos Suggested edit position. Must not be out of bounds!
	       * @return {Array} Array of diff tuples
	       */
	      function fix_cursor(diffs, cursor_pos) {
	        var norm = cursor_normalize_diff(diffs, cursor_pos);
	        var ndiffs = norm[1];
	        var cursor_pointer = norm[0];
	        var d = ndiffs[cursor_pointer];
	        var d_next = ndiffs[cursor_pointer + 1];
	
	        if (d == null) {
	          // Text was deleted from end of original string,
	          // cursor is now out of bounds in new string
	          return diffs;
	        } else if (d[0] !== DIFF_EQUAL) {
	          // A modification happened at the cursor location.
	          // This is the expected outcome, so we can return the original diff.
	          return diffs;
	        } else {
	          if (d_next != null && d[1] + d_next[1] === d_next[1] + d[1]) {
	            // Case 1)
	            // It is possible to perform a naive shift
	            ndiffs.splice(cursor_pointer, 2, d_next, d);
	            return merge_tuples(ndiffs, cursor_pointer, 2);
	          } else if (d_next != null && d_next[1].indexOf(d[1]) === 0) {
	            // Case 2)
	            // d[1] is a prefix of d_next[1]
	            // We can assume that d_next[0] !== 0, since d[0] === 0
	            // Shift edit locations..
	            ndiffs.splice(cursor_pointer, 2, [d_next[0], d[1]], [0, d[1]]);
	            var suffix = d_next[1].slice(d[1].length);
	            if (suffix.length > 0) {
	              ndiffs.splice(cursor_pointer + 2, 0, [d_next[0], suffix]);
	            }
	            return merge_tuples(ndiffs, cursor_pointer, 3);
	          } else {
	            // Not possible to perform any modification
	            return diffs;
	          }
	        }
	      }
	
	      /*
	       * Try to merge tuples with their neigbors in a given range.
	       * E.g. [0, 'a'], [0, 'b'] -> [0, 'ab']
	       *
	       * @param {Array} diffs Array of diff tuples.
	       * @param {Int} start Position of the first element to merge (diffs[start] is also merged with diffs[start - 1]).
	       * @param {Int} length Number of consecutive elements to check.
	       * @return {Array} Array of merged diff tuples.
	       */
	      function merge_tuples(diffs, start, length) {
	        // Check from (start-1) to (start+length).
	        for (var i = start + length - 1; i >= 0 && i >= start - 1; i--) {
	          if (i + 1 < diffs.length) {
	            var left_d = diffs[i];
	            var right_d = diffs[i + 1];
	            if (left_d[0] === right_d[1]) {
	              diffs.splice(i, 2, [left_d[0], left_d[1] + right_d[1]]);
	            }
	          }
	        }
	        return diffs;
	      }
	
	      /***/
	    },
	    /* 55 */
	    /***/function (module, exports) {
	
	      module.exports = "<svg viewbox=\"0 0 18 18\"> <polyline class=\"ql-even ql-stroke\" points=\"5 7 3 9 5 11\"></polyline> <polyline class=\"ql-even ql-stroke\" points=\"13 7 15 9 13 11\"></polyline> <line class=ql-stroke x1=10 x2=8 y1=5 y2=13></line> </svg>";
	
	      /***/
	    },
	    /* 56 */
	    /***/function (module, exports, __webpack_require__) {
	
	      "use strict";
	
	      var __extends = this && this.__extends || function () {
	        var extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function (d, b) {
	          d.__proto__ = b;
	        } || function (d, b) {
	          for (var p in b) {
	            if (b.hasOwnProperty(p)) d[p] = b[p];
	          }
	        };
	        return function (d, b) {
	          extendStatics(d, b);
	          function __() {
	            this.constructor = d;
	          }
	          d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	        };
	      }();
	      Object.defineProperty(exports, "__esModule", { value: true });
	      var format_1 = __webpack_require__(22);
	      var Registry = __webpack_require__(2);
	      var BlockBlot = function (_super) {
	        __extends(BlockBlot, _super);
	        function BlockBlot() {
	          return _super !== null && _super.apply(this, arguments) || this;
	        }
	        BlockBlot.formats = function (domNode) {
	          var tagName = Registry.query(BlockBlot.blotName).tagName;
	          if (domNode.tagName === tagName) return undefined;
	          return _super.formats.call(this, domNode);
	        };
	        BlockBlot.prototype.format = function (name, value) {
	          if (Registry.query(name, Registry.Scope.BLOCK) == null) {
	            return;
	          } else if (name === this.statics.blotName && !value) {
	            this.replaceWith(BlockBlot.blotName);
	          } else {
	            _super.prototype.format.call(this, name, value);
	          }
	        };
	        BlockBlot.prototype.formatAt = function (index, length, name, value) {
	          if (Registry.query(name, Registry.Scope.BLOCK) != null) {
	            this.format(name, value);
	          } else {
	            _super.prototype.formatAt.call(this, index, length, name, value);
	          }
	        };
	        BlockBlot.prototype.insertAt = function (index, value, def) {
	          if (def == null || Registry.query(value, Registry.Scope.INLINE) != null) {
	            // Insert text or inline
	            _super.prototype.insertAt.call(this, index, value, def);
	          } else {
	            var after = this.split(index);
	            var blot = Registry.create(value, def);
	            after.parent.insertBefore(blot, after);
	          }
	        };
	        BlockBlot.prototype.update = function (mutations, context) {
	          if (navigator.userAgent.match(/Trident/)) {
	            this.attach();
	          } else {
	            _super.prototype.update.call(this, mutations, context);
	          }
	        };
	        return BlockBlot;
	      }(format_1.default);
	      BlockBlot.blotName = 'block';
	      BlockBlot.scope = Registry.Scope.BLOCK_BLOT;
	      BlockBlot.tagName = 'P';
	      exports.default = BlockBlot;
	
	      /***/
	    },
	    /* 57 */
	    /***/function (module, exports, __webpack_require__) {
	
	      "use strict";
	
	      var __extends = this && this.__extends || function () {
	        var extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function (d, b) {
	          d.__proto__ = b;
	        } || function (d, b) {
	          for (var p in b) {
	            if (b.hasOwnProperty(p)) d[p] = b[p];
	          }
	        };
	        return function (d, b) {
	          extendStatics(d, b);
	          function __() {
	            this.constructor = d;
	          }
	          d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	        };
	      }();
	      Object.defineProperty(exports, "__esModule", { value: true });
	      var leaf_1 = __webpack_require__(23);
	      var EmbedBlot = function (_super) {
	        __extends(EmbedBlot, _super);
	        function EmbedBlot() {
	          return _super !== null && _super.apply(this, arguments) || this;
	        }
	        EmbedBlot.formats = function (domNode) {
	          return undefined;
	        };
	        EmbedBlot.prototype.format = function (name, value) {
	          // super.formatAt wraps, which is what we want in general,
	          // but this allows subclasses to overwrite for formats
	          // that just apply to particular embeds
	          _super.prototype.formatAt.call(this, 0, this.length(), name, value);
	        };
	        EmbedBlot.prototype.formatAt = function (index, length, name, value) {
	          if (index === 0 && length === this.length()) {
	            this.format(name, value);
	          } else {
	            _super.prototype.formatAt.call(this, index, length, name, value);
	          }
	        };
	        EmbedBlot.prototype.formats = function () {
	          return this.statics.formats(this.domNode);
	        };
	        return EmbedBlot;
	      }(leaf_1.default);
	      exports.default = EmbedBlot;
	
	      /***/
	    },
	    /* 58 */
	    /***/function (module, exports, __webpack_require__) {
	
	      "use strict";
	
	      var __extends = this && this.__extends || function () {
	        var extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function (d, b) {
	          d.__proto__ = b;
	        } || function (d, b) {
	          for (var p in b) {
	            if (b.hasOwnProperty(p)) d[p] = b[p];
	          }
	        };
	        return function (d, b) {
	          extendStatics(d, b);
	          function __() {
	            this.constructor = d;
	          }
	          d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	        };
	      }();
	      Object.defineProperty(exports, "__esModule", { value: true });
	      var format_1 = __webpack_require__(22);
	      var Registry = __webpack_require__(2);
	      // Shallow object comparison
	      function isEqual(obj1, obj2) {
	        if (Object.keys(obj1).length !== Object.keys(obj2).length) return false;
	        for (var prop in obj1) {
	          if (obj1[prop] !== obj2[prop]) return false;
	        }
	        return true;
	      }
	      var InlineBlot = function (_super) {
	        __extends(InlineBlot, _super);
	        function InlineBlot() {
	          return _super !== null && _super.apply(this, arguments) || this;
	        }
	        InlineBlot.formats = function (domNode) {
	          if (domNode.tagName === InlineBlot.tagName) return undefined;
	          return _super.formats.call(this, domNode);
	        };
	        InlineBlot.prototype.format = function (name, value) {
	          var _this = this;
	          if (name === this.statics.blotName && !value) {
	            this.children.forEach(function (child) {
	              if (!(child instanceof format_1.default)) {
	                child = child.wrap(InlineBlot.blotName, true);
	              }
	              _this.attributes.copy(child);
	            });
	            this.unwrap();
	          } else {
	            _super.prototype.format.call(this, name, value);
	          }
	        };
	        InlineBlot.prototype.formatAt = function (index, length, name, value) {
	          if (this.formats()[name] != null || Registry.query(name, Registry.Scope.ATTRIBUTE)) {
	            var blot = this.isolate(index, length);
	            blot.format(name, value);
	          } else {
	            _super.prototype.formatAt.call(this, index, length, name, value);
	          }
	        };
	        InlineBlot.prototype.optimize = function (context) {
	          _super.prototype.optimize.call(this, context);
	          var formats = this.formats();
	          if (Object.keys(formats).length === 0) {
	            return this.unwrap(); // unformatted span
	          }
	          var next = this.next;
	          if (next instanceof InlineBlot && next.prev === this && isEqual(formats, next.formats())) {
	            next.moveChildren(this);
	            next.remove();
	          }
	        };
	        return InlineBlot;
	      }(format_1.default);
	      InlineBlot.blotName = 'inline';
	      InlineBlot.scope = Registry.Scope.INLINE_BLOT;
	      InlineBlot.tagName = 'SPAN';
	      exports.default = InlineBlot;
	
	      /***/
	    },
	    /* 59 */
	    /***/function (module, exports, __webpack_require__) {
	
	      "use strict";
	
	      var __extends = this && this.__extends || function () {
	        var extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function (d, b) {
	          d.__proto__ = b;
	        } || function (d, b) {
	          for (var p in b) {
	            if (b.hasOwnProperty(p)) d[p] = b[p];
	          }
	        };
	        return function (d, b) {
	          extendStatics(d, b);
	          function __() {
	            this.constructor = d;
	          }
	          d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	        };
	      }();
	      Object.defineProperty(exports, "__esModule", { value: true });
	      var container_1 = __webpack_require__(21);
	      var Registry = __webpack_require__(2);
	      var OBSERVER_CONFIG = {
	        attributes: true,
	        characterData: true,
	        characterDataOldValue: true,
	        childList: true,
	        subtree: true
	      };
	      var MAX_OPTIMIZE_ITERATIONS = 100;
	      var ScrollBlot = function (_super) {
	        __extends(ScrollBlot, _super);
	        function ScrollBlot(node) {
	          var _this = _super.call(this, node) || this;
	          _this.parent = null;
	          _this.observer = new MutationObserver(function (mutations) {
	            _this.update(mutations);
	          });
	          _this.observer.observe(_this.domNode, OBSERVER_CONFIG);
	          return _this;
	        }
	        ScrollBlot.prototype.detach = function () {
	          _super.prototype.detach.call(this);
	          this.observer.disconnect();
	        };
	        ScrollBlot.prototype.deleteAt = function (index, length) {
	          this.update();
	          if (index === 0 && length === this.length()) {
	            this.children.forEach(function (child) {
	              child.remove();
	            });
	          } else {
	            _super.prototype.deleteAt.call(this, index, length);
	          }
	        };
	        ScrollBlot.prototype.formatAt = function (index, length, name, value) {
	          this.update();
	          _super.prototype.formatAt.call(this, index, length, name, value);
	        };
	        ScrollBlot.prototype.insertAt = function (index, value, def) {
	          this.update();
	          _super.prototype.insertAt.call(this, index, value, def);
	        };
	        ScrollBlot.prototype.optimize = function (mutations, context) {
	          var _this = this;
	          if (mutations === void 0) {
	            mutations = [];
	          }
	          if (context === void 0) {
	            context = {};
	          }
	          _super.prototype.optimize.call(this, context);
	          // We must modify mutations directly, cannot make copy and then modify
	          var records = [].slice.call(this.observer.takeRecords());
	          // Array.push currently seems to be implemented by a non-tail recursive function
	          // so we cannot just mutations.push.apply(mutations, this.observer.takeRecords());
	          while (records.length > 0) {
	            mutations.push(records.pop());
	          } // TODO use WeakMap
	          var mark = function mark(blot, markParent) {
	            if (markParent === void 0) {
	              markParent = true;
	            }
	            if (blot == null || blot === _this) return;
	            if (blot.domNode.parentNode == null) return;
	            if (blot.domNode[Registry.DATA_KEY].mutations == null) {
	              blot.domNode[Registry.DATA_KEY].mutations = [];
	            }
	            if (markParent) mark(blot.parent);
	          };
	          var optimize = function optimize(blot) {
	            if (blot.domNode[Registry.DATA_KEY] == null || blot.domNode[Registry.DATA_KEY].mutations == null) {
	              return;
	            }
	            if (blot instanceof container_1.default) {
	              blot.children.forEach(optimize);
	            }
	            blot.optimize(context);
	          };
	          var remaining = mutations;
	          for (var i = 0; remaining.length > 0; i += 1) {
	            if (i >= MAX_OPTIMIZE_ITERATIONS) {
	              throw new Error('[Parchment] Maximum optimize iterations reached');
	            }
	            remaining.forEach(function (mutation) {
	              var blot = Registry.find(mutation.target, true);
	              if (blot == null) return;
	              if (blot.domNode === mutation.target) {
	                if (mutation.type === 'childList') {
	                  mark(Registry.find(mutation.previousSibling, false));
	                  [].forEach.call(mutation.addedNodes, function (node) {
	                    var child = Registry.find(node, false);
	                    mark(child, false);
	                    if (child instanceof container_1.default) {
	                      child.children.forEach(function (grandChild) {
	                        mark(grandChild, false);
	                      });
	                    }
	                  });
	                } else if (mutation.type === 'attributes') {
	                  mark(blot.prev);
	                }
	              }
	              mark(blot);
	            });
	            this.children.forEach(optimize);
	            remaining = [].slice.call(this.observer.takeRecords());
	            records = remaining.slice();
	            while (records.length > 0) {
	              mutations.push(records.pop());
	            }
	          }
	        };
	        ScrollBlot.prototype.update = function (mutations, context) {
	          var _this = this;
	          if (context === void 0) {
	            context = {};
	          }
	          mutations = mutations || this.observer.takeRecords();
	          // TODO use WeakMap
	          mutations.map(function (mutation) {
	            var blot = Registry.find(mutation.target, true);
	            if (blot == null) return;
	            if (blot.domNode[Registry.DATA_KEY].mutations == null) {
	              blot.domNode[Registry.DATA_KEY].mutations = [mutation];
	              return blot;
	            } else {
	              blot.domNode[Registry.DATA_KEY].mutations.push(mutation);
	              return null;
	            }
	          }).forEach(function (blot) {
	            if (blot == null || blot === _this || blot.domNode[Registry.DATA_KEY] == null) return;
	            blot.update(blot.domNode[Registry.DATA_KEY].mutations || [], context);
	          });
	          if (this.domNode[Registry.DATA_KEY].mutations != null) {
	            _super.prototype.update.call(this, this.domNode[Registry.DATA_KEY].mutations, context);
	          }
	          this.optimize(mutations, context);
	        };
	        return ScrollBlot;
	      }(container_1.default);
	      ScrollBlot.blotName = 'scroll';
	      ScrollBlot.defaultChild = 'block';
	      ScrollBlot.scope = Registry.Scope.BLOCK_BLOT;
	      ScrollBlot.tagName = 'DIV';
	      exports.default = ScrollBlot;
	
	      /***/
	    },
	    /* 60 */
	    /***/function (module, exports, __webpack_require__) {
	
	      "use strict";
	
	      var __extends = this && this.__extends || function () {
	        var extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function (d, b) {
	          d.__proto__ = b;
	        } || function (d, b) {
	          for (var p in b) {
	            if (b.hasOwnProperty(p)) d[p] = b[p];
	          }
	        };
	        return function (d, b) {
	          extendStatics(d, b);
	          function __() {
	            this.constructor = d;
	          }
	          d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	        };
	      }();
	      Object.defineProperty(exports, "__esModule", { value: true });
	      var leaf_1 = __webpack_require__(23);
	      var Registry = __webpack_require__(2);
	      var TextBlot = function (_super) {
	        __extends(TextBlot, _super);
	        function TextBlot(node) {
	          var _this = _super.call(this, node) || this;
	          _this.text = _this.statics.value(_this.domNode);
	          return _this;
	        }
	        TextBlot.create = function (value) {
	          return document.createTextNode(value);
	        };
	        TextBlot.value = function (domNode) {
	          var text = domNode.data;
	          if (text["normalize"]) text = text["normalize"]();
	          return text;
	        };
	        TextBlot.prototype.deleteAt = function (index, length) {
	          this.domNode.data = this.text = this.text.slice(0, index) + this.text.slice(index + length);
	        };
	        TextBlot.prototype.index = function (node, offset) {
	          if (this.domNode === node) {
	            return offset;
	          }
	          return -1;
	        };
	        TextBlot.prototype.insertAt = function (index, value, def) {
	          if (def == null) {
	            this.text = this.text.slice(0, index) + value + this.text.slice(index);
	            this.domNode.data = this.text;
	          } else {
	            _super.prototype.insertAt.call(this, index, value, def);
	          }
	        };
	        TextBlot.prototype.length = function () {
	          return this.text.length;
	        };
	        TextBlot.prototype.optimize = function (context) {
	          _super.prototype.optimize.call(this, context);
	          this.text = this.statics.value(this.domNode);
	          if (this.text.length === 0) {
	            this.remove();
	          } else if (this.next instanceof TextBlot && this.next.prev === this) {
	            this.insertAt(this.length(), this.next.value());
	            this.next.remove();
	          }
	        };
	        TextBlot.prototype.position = function (index, inclusive) {
	          if (inclusive === void 0) {
	            inclusive = false;
	          }
	          return [this.domNode, index];
	        };
	        TextBlot.prototype.split = function (index, force) {
	          if (force === void 0) {
	            force = false;
	          }
	          if (!force) {
	            if (index === 0) return this;
	            if (index === this.length()) return this.next;
	          }
	          var after = Registry.create(this.domNode.splitText(index));
	          this.parent.insertBefore(after, this.next);
	          this.text = this.statics.value(this.domNode);
	          return after;
	        };
	        TextBlot.prototype.update = function (mutations, context) {
	          var _this = this;
	          if (mutations.some(function (mutation) {
	            return mutation.type === 'characterData' && mutation.target === _this.domNode;
	          })) {
	            this.text = this.statics.value(this.domNode);
	          }
	        };
	        TextBlot.prototype.value = function () {
	          return this.text;
	        };
	        return TextBlot;
	      }(leaf_1.default);
	      TextBlot.blotName = 'text';
	      TextBlot.scope = Registry.Scope.INLINE_BLOT;
	      exports.default = TextBlot;
	
	      /***/
	    },
	    /* 61 */
	    /***/function (module, exports, __webpack_require__) {
	
	      "use strict";
	
	      Object.defineProperty(exports, "__esModule", { value: true });
	      var LinkedList = function () {
	        function LinkedList() {
	          this.head = this.tail = undefined;
	          this.length = 0;
	        }
	        LinkedList.prototype.append = function () {
	          var nodes = [];
	          for (var _i = 0; _i < arguments.length; _i++) {
	            nodes[_i] = arguments[_i];
	          }
	          this.insertBefore(nodes[0], undefined);
	          if (nodes.length > 1) {
	            this.append.apply(this, nodes.slice(1));
	          }
	        };
	        LinkedList.prototype.contains = function (node) {
	          var cur,
	              next = this.iterator();
	          while (cur = next()) {
	            if (cur === node) return true;
	          }
	          return false;
	        };
	        LinkedList.prototype.insertBefore = function (node, refNode) {
	          node.next = refNode;
	          if (refNode != null) {
	            node.prev = refNode.prev;
	            if (refNode.prev != null) {
	              refNode.prev.next = node;
	            }
	            refNode.prev = node;
	            if (refNode === this.head) {
	              this.head = node;
	            }
	          } else if (this.tail != null) {
	            this.tail.next = node;
	            node.prev = this.tail;
	            this.tail = node;
	          } else {
	            node.prev = undefined;
	            this.head = this.tail = node;
	          }
	          this.length += 1;
	        };
	        LinkedList.prototype.offset = function (target) {
	          var index = 0,
	              cur = this.head;
	          while (cur != null) {
	            if (cur === target) return index;
	            index += cur.length();
	            cur = cur.next;
	          }
	          return -1;
	        };
	        LinkedList.prototype.remove = function (node) {
	          if (!this.contains(node)) return;
	          if (node.prev != null) node.prev.next = node.next;
	          if (node.next != null) node.next.prev = node.prev;
	          if (node === this.head) this.head = node.next;
	          if (node === this.tail) this.tail = node.prev;
	          this.length -= 1;
	        };
	        LinkedList.prototype.iterator = function (curNode) {
	          if (curNode === void 0) {
	            curNode = this.head;
	          }
	          // TODO use yield when we can
	          return function () {
	            var ret = curNode;
	            if (curNode != null) curNode = curNode.next;
	            return ret;
	          };
	        };
	        LinkedList.prototype.find = function (index, inclusive) {
	          if (inclusive === void 0) {
	            inclusive = false;
	          }
	          var cur,
	              next = this.iterator();
	          while (cur = next()) {
	            var length = cur.length();
	            if (index < length || inclusive && index === length && (cur.next == null || cur.next.length() !== 0)) {
	              return [cur, index];
	            }
	            index -= length;
	          }
	          return [null, 0];
	        };
	        LinkedList.prototype.forEach = function (callback) {
	          var cur,
	              next = this.iterator();
	          while (cur = next()) {
	            callback(cur);
	          }
	        };
	        LinkedList.prototype.forEachAt = function (index, length, callback) {
	          if (length <= 0) return;
	          var _a = this.find(index),
	              startNode = _a[0],
	              offset = _a[1];
	          var cur,
	              curIndex = index - offset,
	              next = this.iterator(startNode);
	          while ((cur = next()) && curIndex < index + length) {
	            var curLength = cur.length();
	            if (index > curIndex) {
	              callback(cur, index - curIndex, Math.min(length, curIndex + curLength - index));
	            } else {
	              callback(cur, 0, Math.min(curLength, index + length - curIndex));
	            }
	            curIndex += curLength;
	          }
	        };
	        LinkedList.prototype.map = function (callback) {
	          return this.reduce(function (memo, cur) {
	            memo.push(callback(cur));
	            return memo;
	          }, []);
	        };
	        LinkedList.prototype.reduce = function (callback, memo) {
	          var cur,
	              next = this.iterator();
	          while (cur = next()) {
	            memo = callback(memo, cur);
	          }
	          return memo;
	        };
	        return LinkedList;
	      }();
	      exports.default = LinkedList;
	
	      /***/
	    },
	    /* 62 */
	    /***/function (module, exports, __webpack_require__) {
	
	      "use strict";
	
	      var _core = __webpack_require__(29);
	
	      var _core2 = _interopRequireDefault(_core);
	
	      var _align = __webpack_require__(36);
	
	      var _direction = __webpack_require__(38);
	
	      var _indent = __webpack_require__(67);
	
	      var _blockquote = __webpack_require__(64);
	
	      var _blockquote2 = _interopRequireDefault(_blockquote);
	
	      var _header = __webpack_require__(65);
	
	      var _header2 = _interopRequireDefault(_header);
	
	      var _list = __webpack_require__(69);
	
	      var _list2 = _interopRequireDefault(_list);
	
	      var _background = __webpack_require__(37);
	
	      var _color = __webpack_require__(26);
	
	      var _font = __webpack_require__(39);
	
	      var _size = __webpack_require__(40);
	
	      var _bold = __webpack_require__(45);
	
	      var _bold2 = _interopRequireDefault(_bold);
	
	      var _italic = __webpack_require__(68);
	
	      var _italic2 = _interopRequireDefault(_italic);
	
	      var _link = __webpack_require__(27);
	
	      var _link2 = _interopRequireDefault(_link);
	
	      var _script = __webpack_require__(70);
	
	      var _script2 = _interopRequireDefault(_script);
	
	      var _strike = __webpack_require__(71);
	
	      var _strike2 = _interopRequireDefault(_strike);
	
	      var _underline = __webpack_require__(72);
	
	      var _underline2 = _interopRequireDefault(_underline);
	
	      var _image = __webpack_require__(66);
	
	      var _image2 = _interopRequireDefault(_image);
	
	      var _video = __webpack_require__(73);
	
	      var _video2 = _interopRequireDefault(_video);
	
	      var _code = __webpack_require__(17);
	
	      var _code2 = _interopRequireDefault(_code);
	
	      var _formula = __webpack_require__(74);
	
	      var _formula2 = _interopRequireDefault(_formula);
	
	      var _syntax = __webpack_require__(75);
	
	      var _syntax2 = _interopRequireDefault(_syntax);
	
	      var _toolbar = __webpack_require__(47);
	
	      var _toolbar2 = _interopRequireDefault(_toolbar);
	
	      var _icons = __webpack_require__(41);
	
	      var _icons2 = _interopRequireDefault(_icons);
	
	      var _picker = __webpack_require__(28);
	
	      var _picker2 = _interopRequireDefault(_picker);
	
	      var _colorPicker = __webpack_require__(48);
	
	      var _colorPicker2 = _interopRequireDefault(_colorPicker);
	
	      var _iconPicker = __webpack_require__(49);
	
	      var _iconPicker2 = _interopRequireDefault(_iconPicker);
	
	      var _tooltip = __webpack_require__(50);
	
	      var _tooltip2 = _interopRequireDefault(_tooltip);
	
	      var _bubble = __webpack_require__(76);
	
	      var _bubble2 = _interopRequireDefault(_bubble);
	
	      var _snow = __webpack_require__(63);
	
	      var _snow2 = _interopRequireDefault(_snow);
	
	      function _interopRequireDefault(obj) {
	        return obj && obj.__esModule ? obj : { default: obj };
	      }
	
	      _core2.default.register({
	        'attributors/attribute/direction': _direction.DirectionAttribute,
	
	        'attributors/class/align': _align.AlignClass,
	        'attributors/class/background': _background.BackgroundClass,
	        'attributors/class/color': _color.ColorClass,
	        'attributors/class/direction': _direction.DirectionClass,
	        'attributors/class/font': _font.FontClass,
	        'attributors/class/size': _size.SizeClass,
	
	        'attributors/style/align': _align.AlignStyle,
	        'attributors/style/background': _background.BackgroundStyle,
	        'attributors/style/color': _color.ColorStyle,
	        'attributors/style/direction': _direction.DirectionStyle,
	        'attributors/style/font': _font.FontStyle,
	        'attributors/style/size': _size.SizeStyle
	      }, true);
	
	      _core2.default.register({
	        'formats/align': _align.AlignClass,
	        'formats/direction': _direction.DirectionClass,
	        'formats/indent': _indent.IndentClass,
	
	        'formats/background': _background.BackgroundStyle,
	        'formats/color': _color.ColorStyle,
	        'formats/font': _font.FontClass,
	        'formats/size': _size.SizeClass,
	
	        'formats/blockquote': _blockquote2.default,
	        'formats/code-block': _code2.default,
	        'formats/header': _header2.default,
	        'formats/list': _list2.default,
	
	        'formats/bold': _bold2.default,
	        'formats/code': _code.Code,
	        'formats/italic': _italic2.default,
	        'formats/link': _link2.default,
	        'formats/script': _script2.default,
	        'formats/strike': _strike2.default,
	        'formats/underline': _underline2.default,
	
	        'formats/image': _image2.default,
	        'formats/video': _video2.default,
	
	        'formats/list/item': _list.ListItem,
	
	        'modules/formula': _formula2.default,
	        'modules/syntax': _syntax2.default,
	        'modules/toolbar': _toolbar2.default,
	
	        'themes/bubble': _bubble2.default,
	        'themes/snow': _snow2.default,
	
	        'ui/icons': _icons2.default,
	        'ui/picker': _picker2.default,
	        'ui/icon-picker': _iconPicker2.default,
	        'ui/color-picker': _colorPicker2.default,
	        'ui/tooltip': _tooltip2.default
	      }, true);
	
	      module.exports = _core2.default;
	
	      /***/
	    },
	    /* 63 */
	    /***/function (module, exports, __webpack_require__) {
	
	      "use strict";
	
	      Object.defineProperty(exports, "__esModule", {
	        value: true
	      });
	
	      var _slicedToArray = function () {
	        function sliceIterator(arr, i) {
	          var _arr = [];var _n = true;var _d = false;var _e = undefined;try {
	            for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
	              _arr.push(_s.value);if (i && _arr.length === i) break;
	            }
	          } catch (err) {
	            _d = true;_e = err;
	          } finally {
	            try {
	              if (!_n && _i["return"]) _i["return"]();
	            } finally {
	              if (_d) throw _e;
	            }
	          }return _arr;
	        }return function (arr, i) {
	          if (Array.isArray(arr)) {
	            return arr;
	          } else if (Symbol.iterator in Object(arr)) {
	            return sliceIterator(arr, i);
	          } else {
	            throw new TypeError("Invalid attempt to destructure non-iterable instance");
	          }
	        };
	      }();
	
	      var _get = function get(object, property, receiver) {
	        if (object === null) object = Function.prototype;var desc = Object.getOwnPropertyDescriptor(object, property);if (desc === undefined) {
	          var parent = Object.getPrototypeOf(object);if (parent === null) {
	            return undefined;
	          } else {
	            return get(parent, property, receiver);
	          }
	        } else if ("value" in desc) {
	          return desc.value;
	        } else {
	          var getter = desc.get;if (getter === undefined) {
	            return undefined;
	          }return getter.call(receiver);
	        }
	      };
	
	      var _createClass = function () {
	        function defineProperties(target, props) {
	          for (var i = 0; i < props.length; i++) {
	            var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
	          }
	        }return function (Constructor, protoProps, staticProps) {
	          if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
	        };
	      }();
	
	      var _extend = __webpack_require__(3);
	
	      var _extend2 = _interopRequireDefault(_extend);
	
	      var _emitter = __webpack_require__(9);
	
	      var _emitter2 = _interopRequireDefault(_emitter);
	
	      var _base = __webpack_require__(43);
	
	      var _base2 = _interopRequireDefault(_base);
	
	      var _link = __webpack_require__(27);
	
	      var _link2 = _interopRequireDefault(_link);
	
	      var _selection = __webpack_require__(15);
	
	      var _icons = __webpack_require__(41);
	
	      var _icons2 = _interopRequireDefault(_icons);
	
	      function _interopRequireDefault(obj) {
	        return obj && obj.__esModule ? obj : { default: obj };
	      }
	
	      function _classCallCheck(instance, Constructor) {
	        if (!(instance instanceof Constructor)) {
	          throw new TypeError("Cannot call a class as a function");
	        }
	      }
	
	      function _possibleConstructorReturn(self, call) {
	        if (!self) {
	          throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
	        }return call && ((typeof call === 'undefined' ? 'undefined' : _typeof2(call)) === "object" || typeof call === "function") ? call : self;
	      }
	
	      function _inherits(subClass, superClass) {
	        if (typeof superClass !== "function" && superClass !== null) {
	          throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === 'undefined' ? 'undefined' : _typeof2(superClass)));
	        }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
	      }
	
	      var TOOLBAR_CONFIG = [[{ header: ['1', '2', '3', false] }], ['bold', 'italic', 'underline', 'link'], [{ list: 'ordered' }, { list: 'bullet' }], ['clean']];
	
	      var SnowTheme = function (_BaseTheme) {
	        _inherits(SnowTheme, _BaseTheme);
	
	        function SnowTheme(quill, options) {
	          _classCallCheck(this, SnowTheme);
	
	          if (options.modules.toolbar != null && options.modules.toolbar.container == null) {
	            options.modules.toolbar.container = TOOLBAR_CONFIG;
	          }
	
	          var _this = _possibleConstructorReturn(this, (SnowTheme.__proto__ || Object.getPrototypeOf(SnowTheme)).call(this, quill, options));
	
	          _this.quill.container.classList.add('ql-snow');
	          return _this;
	        }
	
	        _createClass(SnowTheme, [{
	          key: 'extendToolbar',
	          value: function extendToolbar(toolbar) {
	            toolbar.container.classList.add('ql-snow');
	            this.buildButtons([].slice.call(toolbar.container.querySelectorAll('button')), _icons2.default);
	            this.buildPickers([].slice.call(toolbar.container.querySelectorAll('select')), _icons2.default);
	            this.tooltip = new SnowTooltip(this.quill, this.options.bounds);
	            if (toolbar.container.querySelector('.ql-link')) {
	              this.quill.keyboard.addBinding({ key: 'K', shortKey: true }, function (range, context) {
	                toolbar.handlers['link'].call(toolbar, !context.format.link);
	              });
	            }
	          }
	        }]);
	
	        return SnowTheme;
	      }(_base2.default);
	
	      SnowTheme.DEFAULTS = (0, _extend2.default)(true, {}, _base2.default.DEFAULTS, {
	        modules: {
	          toolbar: {
	            handlers: {
	              link: function link(value) {
	                if (value) {
	                  var range = this.quill.getSelection();
	                  if (range == null || range.length == 0) return;
	                  var preview = this.quill.getText(range);
	                  if (/^\S+@\S+\.\S+$/.test(preview) && preview.indexOf('mailto:') !== 0) {
	                    preview = 'mailto:' + preview;
	                  }
	                  var tooltip = this.quill.theme.tooltip;
	                  tooltip.edit('link', preview);
	                } else {
	                  this.quill.format('link', false);
	                }
	              }
	            }
	          }
	        }
	      });
	
	      var SnowTooltip = function (_BaseTooltip) {
	        _inherits(SnowTooltip, _BaseTooltip);
	
	        function SnowTooltip(quill, bounds) {
	          _classCallCheck(this, SnowTooltip);
	
	          var _this2 = _possibleConstructorReturn(this, (SnowTooltip.__proto__ || Object.getPrototypeOf(SnowTooltip)).call(this, quill, bounds));
	
	          _this2.preview = _this2.root.querySelector('a.ql-preview');
	          return _this2;
	        }
	
	        _createClass(SnowTooltip, [{
	          key: 'listen',
	          value: function listen() {
	            var _this3 = this;
	
	            _get(SnowTooltip.prototype.__proto__ || Object.getPrototypeOf(SnowTooltip.prototype), 'listen', this).call(this);
	            this.root.querySelector('a.ql-action').addEventListener('click', function (event) {
	              if (_this3.root.classList.contains('ql-editing')) {
	                _this3.save();
	              } else {
	                _this3.edit('link', _this3.preview.textContent);
	              }
	              event.preventDefault();
	            });
	            this.root.querySelector('a.ql-remove').addEventListener('click', function (event) {
	              if (_this3.linkRange != null) {
	                var range = _this3.linkRange;
	                _this3.restoreFocus();
	                _this3.quill.formatText(range, 'link', false, _emitter2.default.sources.USER);
	                delete _this3.linkRange;
	              }
	              event.preventDefault();
	              _this3.hide();
	            });
	            this.quill.on(_emitter2.default.events.SELECTION_CHANGE, function (range, oldRange, source) {
	              if (range == null) return;
	              if (range.length === 0 && source === _emitter2.default.sources.USER) {
	                var _quill$scroll$descend = _this3.quill.scroll.descendant(_link2.default, range.index),
	                    _quill$scroll$descend2 = _slicedToArray(_quill$scroll$descend, 2),
	                    link = _quill$scroll$descend2[0],
	                    offset = _quill$scroll$descend2[1];
	
	                if (link != null) {
	                  _this3.linkRange = new _selection.Range(range.index - offset, link.length());
	                  var preview = _link2.default.formats(link.domNode);
	                  _this3.preview.textContent = preview;
	                  _this3.preview.setAttribute('href', preview);
	                  _this3.show();
	                  _this3.position(_this3.quill.getBounds(_this3.linkRange));
	                  return;
	                }
	              } else {
	                delete _this3.linkRange;
	              }
	              _this3.hide();
	            });
	          }
	        }, {
	          key: 'show',
	          value: function show() {
	            _get(SnowTooltip.prototype.__proto__ || Object.getPrototypeOf(SnowTooltip.prototype), 'show', this).call(this);
	            this.root.removeAttribute('data-mode');
	          }
	        }]);
	
	        return SnowTooltip;
	      }(_base.BaseTooltip);
	
	      SnowTooltip.TEMPLATE = ['<a class="ql-preview" target="_blank" href="about:blank"></a>', '<input type="text" data-formula="e=mc^2" data-link="https://quilljs.com" data-video="Embed URL">', '<a class="ql-action"></a>', '<a class="ql-remove"></a>'].join('');
	
	      exports.default = SnowTheme;
	
	      /***/
	    },
	    /* 64 */
	    /***/function (module, exports, __webpack_require__) {
	
	      "use strict";
	
	      Object.defineProperty(exports, "__esModule", {
	        value: true
	      });
	
	      var _block = __webpack_require__(4);
	
	      var _block2 = _interopRequireDefault(_block);
	
	      function _interopRequireDefault(obj) {
	        return obj && obj.__esModule ? obj : { default: obj };
	      }
	
	      function _classCallCheck(instance, Constructor) {
	        if (!(instance instanceof Constructor)) {
	          throw new TypeError("Cannot call a class as a function");
	        }
	      }
	
	      function _possibleConstructorReturn(self, call) {
	        if (!self) {
	          throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
	        }return call && ((typeof call === 'undefined' ? 'undefined' : _typeof2(call)) === "object" || typeof call === "function") ? call : self;
	      }
	
	      function _inherits(subClass, superClass) {
	        if (typeof superClass !== "function" && superClass !== null) {
	          throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === 'undefined' ? 'undefined' : _typeof2(superClass)));
	        }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
	      }
	
	      var Blockquote = function (_Block) {
	        _inherits(Blockquote, _Block);
	
	        function Blockquote() {
	          _classCallCheck(this, Blockquote);
	
	          return _possibleConstructorReturn(this, (Blockquote.__proto__ || Object.getPrototypeOf(Blockquote)).apply(this, arguments));
	        }
	
	        return Blockquote;
	      }(_block2.default);
	
	      Blockquote.blotName = 'blockquote';
	      Blockquote.tagName = 'blockquote';
	
	      exports.default = Blockquote;
	
	      /***/
	    },
	    /* 65 */
	    /***/function (module, exports, __webpack_require__) {
	
	      "use strict";
	
	      Object.defineProperty(exports, "__esModule", {
	        value: true
	      });
	
	      var _createClass = function () {
	        function defineProperties(target, props) {
	          for (var i = 0; i < props.length; i++) {
	            var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
	          }
	        }return function (Constructor, protoProps, staticProps) {
	          if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
	        };
	      }();
	
	      var _block = __webpack_require__(4);
	
	      var _block2 = _interopRequireDefault(_block);
	
	      function _interopRequireDefault(obj) {
	        return obj && obj.__esModule ? obj : { default: obj };
	      }
	
	      function _classCallCheck(instance, Constructor) {
	        if (!(instance instanceof Constructor)) {
	          throw new TypeError("Cannot call a class as a function");
	        }
	      }
	
	      function _possibleConstructorReturn(self, call) {
	        if (!self) {
	          throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
	        }return call && ((typeof call === 'undefined' ? 'undefined' : _typeof2(call)) === "object" || typeof call === "function") ? call : self;
	      }
	
	      function _inherits(subClass, superClass) {
	        if (typeof superClass !== "function" && superClass !== null) {
	          throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === 'undefined' ? 'undefined' : _typeof2(superClass)));
	        }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
	      }
	
	      var Header = function (_Block) {
	        _inherits(Header, _Block);
	
	        function Header() {
	          _classCallCheck(this, Header);
	
	          return _possibleConstructorReturn(this, (Header.__proto__ || Object.getPrototypeOf(Header)).apply(this, arguments));
	        }
	
	        _createClass(Header, null, [{
	          key: 'formats',
	          value: function formats(domNode) {
	            return this.tagName.indexOf(domNode.tagName) + 1;
	          }
	        }]);
	
	        return Header;
	      }(_block2.default);
	
	      Header.blotName = 'header';
	      Header.tagName = ['H1', 'H2', 'H3', 'H4', 'H5', 'H6'];
	
	      exports.default = Header;
	
	      /***/
	    },
	    /* 66 */
	    /***/function (module, exports, __webpack_require__) {
	
	      "use strict";
	
	      Object.defineProperty(exports, "__esModule", {
	        value: true
	      });
	
	      var _createClass = function () {
	        function defineProperties(target, props) {
	          for (var i = 0; i < props.length; i++) {
	            var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
	          }
	        }return function (Constructor, protoProps, staticProps) {
	          if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
	        };
	      }();
	
	      var _get = function get(object, property, receiver) {
	        if (object === null) object = Function.prototype;var desc = Object.getOwnPropertyDescriptor(object, property);if (desc === undefined) {
	          var parent = Object.getPrototypeOf(object);if (parent === null) {
	            return undefined;
	          } else {
	            return get(parent, property, receiver);
	          }
	        } else if ("value" in desc) {
	          return desc.value;
	        } else {
	          var getter = desc.get;if (getter === undefined) {
	            return undefined;
	          }return getter.call(receiver);
	        }
	      };
	
	      var _embed = __webpack_require__(5);
	
	      var _embed2 = _interopRequireDefault(_embed);
	
	      var _link = __webpack_require__(27);
	
	      function _interopRequireDefault(obj) {
	        return obj && obj.__esModule ? obj : { default: obj };
	      }
	
	      function _classCallCheck(instance, Constructor) {
	        if (!(instance instanceof Constructor)) {
	          throw new TypeError("Cannot call a class as a function");
	        }
	      }
	
	      function _possibleConstructorReturn(self, call) {
	        if (!self) {
	          throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
	        }return call && ((typeof call === 'undefined' ? 'undefined' : _typeof2(call)) === "object" || typeof call === "function") ? call : self;
	      }
	
	      function _inherits(subClass, superClass) {
	        if (typeof superClass !== "function" && superClass !== null) {
	          throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === 'undefined' ? 'undefined' : _typeof2(superClass)));
	        }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
	      }
	
	      var ATTRIBUTES = ['alt', 'height', 'width'];
	
	      var Image = function (_Embed) {
	        _inherits(Image, _Embed);
	
	        function Image() {
	          _classCallCheck(this, Image);
	
	          return _possibleConstructorReturn(this, (Image.__proto__ || Object.getPrototypeOf(Image)).apply(this, arguments));
	        }
	
	        _createClass(Image, [{
	          key: 'format',
	          value: function format(name, value) {
	            if (ATTRIBUTES.indexOf(name) > -1) {
	              if (value) {
	                this.domNode.setAttribute(name, value);
	              } else {
	                this.domNode.removeAttribute(name);
	              }
	            } else {
	              _get(Image.prototype.__proto__ || Object.getPrototypeOf(Image.prototype), 'format', this).call(this, name, value);
	            }
	          }
	        }], [{
	          key: 'create',
	          value: function create(value) {
	            var node = _get(Image.__proto__ || Object.getPrototypeOf(Image), 'create', this).call(this, value);
	            if (typeof value === 'string') {
	              node.setAttribute('src', this.sanitize(value));
	            }
	            return node;
	          }
	        }, {
	          key: 'formats',
	          value: function formats(domNode) {
	            return ATTRIBUTES.reduce(function (formats, attribute) {
	              if (domNode.hasAttribute(attribute)) {
	                formats[attribute] = domNode.getAttribute(attribute);
	              }
	              return formats;
	            }, {});
	          }
	        }, {
	          key: 'match',
	          value: function match(url) {
	            return (/\.(jpe?g|gif|png)$/.test(url) || /^data:image\/.+;base64/.test(url)
	            );
	          }
	        }, {
	          key: 'sanitize',
	          value: function sanitize(url) {
	            return (0, _link.sanitize)(url, ['http', 'https', 'data']) ? url : '//:0';
	          }
	        }, {
	          key: 'value',
	          value: function value(domNode) {
	            return domNode.getAttribute('src');
	          }
	        }]);
	
	        return Image;
	      }(_embed2.default);
	
	      Image.blotName = 'image';
	      Image.tagName = 'IMG';
	
	      exports.default = Image;
	
	      /***/
	    },
	    /* 67 */
	    /***/function (module, exports, __webpack_require__) {
	
	      "use strict";
	
	      Object.defineProperty(exports, "__esModule", {
	        value: true
	      });
	      exports.IndentClass = undefined;
	
	      var _createClass = function () {
	        function defineProperties(target, props) {
	          for (var i = 0; i < props.length; i++) {
	            var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
	          }
	        }return function (Constructor, protoProps, staticProps) {
	          if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
	        };
	      }();
	
	      var _get = function get(object, property, receiver) {
	        if (object === null) object = Function.prototype;var desc = Object.getOwnPropertyDescriptor(object, property);if (desc === undefined) {
	          var parent = Object.getPrototypeOf(object);if (parent === null) {
	            return undefined;
	          } else {
	            return get(parent, property, receiver);
	          }
	        } else if ("value" in desc) {
	          return desc.value;
	        } else {
	          var getter = desc.get;if (getter === undefined) {
	            return undefined;
	          }return getter.call(receiver);
	        }
	      };
	
	      var _parchment = __webpack_require__(0);
	
	      var _parchment2 = _interopRequireDefault(_parchment);
	
	      function _interopRequireDefault(obj) {
	        return obj && obj.__esModule ? obj : { default: obj };
	      }
	
	      function _classCallCheck(instance, Constructor) {
	        if (!(instance instanceof Constructor)) {
	          throw new TypeError("Cannot call a class as a function");
	        }
	      }
	
	      function _possibleConstructorReturn(self, call) {
	        if (!self) {
	          throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
	        }return call && ((typeof call === 'undefined' ? 'undefined' : _typeof2(call)) === "object" || typeof call === "function") ? call : self;
	      }
	
	      function _inherits(subClass, superClass) {
	        if (typeof superClass !== "function" && superClass !== null) {
	          throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === 'undefined' ? 'undefined' : _typeof2(superClass)));
	        }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
	      }
	
	      var IdentAttributor = function (_Parchment$Attributor) {
	        _inherits(IdentAttributor, _Parchment$Attributor);
	
	        function IdentAttributor() {
	          _classCallCheck(this, IdentAttributor);
	
	          return _possibleConstructorReturn(this, (IdentAttributor.__proto__ || Object.getPrototypeOf(IdentAttributor)).apply(this, arguments));
	        }
	
	        _createClass(IdentAttributor, [{
	          key: 'add',
	          value: function add(node, value) {
	            if (value === '+1' || value === '-1') {
	              var indent = this.value(node) || 0;
	              value = value === '+1' ? indent + 1 : indent - 1;
	            }
	            if (value === 0) {
	              this.remove(node);
	              return true;
	            } else {
	              return _get(IdentAttributor.prototype.__proto__ || Object.getPrototypeOf(IdentAttributor.prototype), 'add', this).call(this, node, value);
	            }
	          }
	        }, {
	          key: 'canAdd',
	          value: function canAdd(node, value) {
	            return _get(IdentAttributor.prototype.__proto__ || Object.getPrototypeOf(IdentAttributor.prototype), 'canAdd', this).call(this, node, value) || _get(IdentAttributor.prototype.__proto__ || Object.getPrototypeOf(IdentAttributor.prototype), 'canAdd', this).call(this, node, parseInt(value));
	          }
	        }, {
	          key: 'value',
	          value: function value(node) {
	            return parseInt(_get(IdentAttributor.prototype.__proto__ || Object.getPrototypeOf(IdentAttributor.prototype), 'value', this).call(this, node)) || undefined; // Don't return NaN
	          }
	        }]);
	
	        return IdentAttributor;
	      }(_parchment2.default.Attributor.Class);
	
	      var IndentClass = new IdentAttributor('indent', 'ql-indent', {
	        scope: _parchment2.default.Scope.BLOCK,
	        whitelist: [1, 2, 3, 4, 5, 6, 7, 8]
	      });
	
	      exports.IndentClass = IndentClass;
	
	      /***/
	    },
	    /* 68 */
	    /***/function (module, exports, __webpack_require__) {
	
	      "use strict";
	
	      Object.defineProperty(exports, "__esModule", {
	        value: true
	      });
	
	      var _bold = __webpack_require__(45);
	
	      var _bold2 = _interopRequireDefault(_bold);
	
	      function _interopRequireDefault(obj) {
	        return obj && obj.__esModule ? obj : { default: obj };
	      }
	
	      function _classCallCheck(instance, Constructor) {
	        if (!(instance instanceof Constructor)) {
	          throw new TypeError("Cannot call a class as a function");
	        }
	      }
	
	      function _possibleConstructorReturn(self, call) {
	        if (!self) {
	          throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
	        }return call && ((typeof call === 'undefined' ? 'undefined' : _typeof2(call)) === "object" || typeof call === "function") ? call : self;
	      }
	
	      function _inherits(subClass, superClass) {
	        if (typeof superClass !== "function" && superClass !== null) {
	          throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === 'undefined' ? 'undefined' : _typeof2(superClass)));
	        }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
	      }
	
	      var Italic = function (_Bold) {
	        _inherits(Italic, _Bold);
	
	        function Italic() {
	          _classCallCheck(this, Italic);
	
	          return _possibleConstructorReturn(this, (Italic.__proto__ || Object.getPrototypeOf(Italic)).apply(this, arguments));
	        }
	
	        return Italic;
	      }(_bold2.default);
	
	      Italic.blotName = 'italic';
	      Italic.tagName = ['EM', 'I'];
	
	      exports.default = Italic;
	
	      /***/
	    },
	    /* 69 */
	    /***/function (module, exports, __webpack_require__) {
	
	      "use strict";
	
	      Object.defineProperty(exports, "__esModule", {
	        value: true
	      });
	      exports.default = exports.ListItem = undefined;
	
	      var _createClass = function () {
	        function defineProperties(target, props) {
	          for (var i = 0; i < props.length; i++) {
	            var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
	          }
	        }return function (Constructor, protoProps, staticProps) {
	          if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
	        };
	      }();
	
	      var _get = function get(object, property, receiver) {
	        if (object === null) object = Function.prototype;var desc = Object.getOwnPropertyDescriptor(object, property);if (desc === undefined) {
	          var parent = Object.getPrototypeOf(object);if (parent === null) {
	            return undefined;
	          } else {
	            return get(parent, property, receiver);
	          }
	        } else if ("value" in desc) {
	          return desc.value;
	        } else {
	          var getter = desc.get;if (getter === undefined) {
	            return undefined;
	          }return getter.call(receiver);
	        }
	      };
	
	      var _parchment = __webpack_require__(0);
	
	      var _parchment2 = _interopRequireDefault(_parchment);
	
	      var _block = __webpack_require__(4);
	
	      var _block2 = _interopRequireDefault(_block);
	
	      var _container = __webpack_require__(24);
	
	      var _container2 = _interopRequireDefault(_container);
	
	      function _interopRequireDefault(obj) {
	        return obj && obj.__esModule ? obj : { default: obj };
	      }
	
	      function _defineProperty(obj, key, value) {
	        if (key in obj) {
	          Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });
	        } else {
	          obj[key] = value;
	        }return obj;
	      }
	
	      function _classCallCheck(instance, Constructor) {
	        if (!(instance instanceof Constructor)) {
	          throw new TypeError("Cannot call a class as a function");
	        }
	      }
	
	      function _possibleConstructorReturn(self, call) {
	        if (!self) {
	          throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
	        }return call && ((typeof call === 'undefined' ? 'undefined' : _typeof2(call)) === "object" || typeof call === "function") ? call : self;
	      }
	
	      function _inherits(subClass, superClass) {
	        if (typeof superClass !== "function" && superClass !== null) {
	          throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === 'undefined' ? 'undefined' : _typeof2(superClass)));
	        }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
	      }
	
	      var ListItem = function (_Block) {
	        _inherits(ListItem, _Block);
	
	        function ListItem() {
	          _classCallCheck(this, ListItem);
	
	          return _possibleConstructorReturn(this, (ListItem.__proto__ || Object.getPrototypeOf(ListItem)).apply(this, arguments));
	        }
	
	        _createClass(ListItem, [{
	          key: 'format',
	          value: function format(name, value) {
	            if (name === List.blotName && !value) {
	              this.replaceWith(_parchment2.default.create(this.statics.scope));
	            } else {
	              _get(ListItem.prototype.__proto__ || Object.getPrototypeOf(ListItem.prototype), 'format', this).call(this, name, value);
	            }
	          }
	        }, {
	          key: 'remove',
	          value: function remove() {
	            if (this.prev == null && this.next == null) {
	              this.parent.remove();
	            } else {
	              _get(ListItem.prototype.__proto__ || Object.getPrototypeOf(ListItem.prototype), 'remove', this).call(this);
	            }
	          }
	        }, {
	          key: 'replaceWith',
	          value: function replaceWith(name, value) {
	            this.parent.isolate(this.offset(this.parent), this.length());
	            if (name === this.parent.statics.blotName) {
	              this.parent.replaceWith(name, value);
	              return this;
	            } else {
	              this.parent.unwrap();
	              return _get(ListItem.prototype.__proto__ || Object.getPrototypeOf(ListItem.prototype), 'replaceWith', this).call(this, name, value);
	            }
	          }
	        }], [{
	          key: 'formats',
	          value: function formats(domNode) {
	            return domNode.tagName === this.tagName ? undefined : _get(ListItem.__proto__ || Object.getPrototypeOf(ListItem), 'formats', this).call(this, domNode);
	          }
	        }]);
	
	        return ListItem;
	      }(_block2.default);
	
	      ListItem.blotName = 'list-item';
	      ListItem.tagName = 'LI';
	
	      var List = function (_Container) {
	        _inherits(List, _Container);
	
	        _createClass(List, null, [{
	          key: 'create',
	          value: function create(value) {
	            var tagName = value === 'ordered' ? 'OL' : 'UL';
	            var node = _get(List.__proto__ || Object.getPrototypeOf(List), 'create', this).call(this, tagName);
	            if (value === 'checked' || value === 'unchecked') {
	              node.setAttribute('data-checked', value === 'checked');
	            }
	            return node;
	          }
	        }, {
	          key: 'formats',
	          value: function formats(domNode) {
	            if (domNode.tagName === 'OL') return 'ordered';
	            if (domNode.tagName === 'UL') {
	              if (domNode.hasAttribute('data-checked')) {
	                return domNode.getAttribute('data-checked') === 'true' ? 'checked' : 'unchecked';
	              } else {
	                return 'bullet';
	              }
	            }
	            return undefined;
	          }
	        }]);
	
	        function List(domNode) {
	          _classCallCheck(this, List);
	
	          var _this2 = _possibleConstructorReturn(this, (List.__proto__ || Object.getPrototypeOf(List)).call(this, domNode));
	
	          domNode.addEventListener('click', function (e) {
	            if (e.target.parentNode !== domNode) return;
	            var format = _this2.statics.formats(domNode);
	            var blot = _parchment2.default.find(e.target);
	            if (format === 'checked') {
	              blot.format('list', 'unchecked');
	            } else if (format === 'unchecked') {
	              blot.format('list', 'checked');
	            }
	          });
	          return _this2;
	        }
	
	        _createClass(List, [{
	          key: 'format',
	          value: function format(name, value) {
	            if (this.children.length > 0) {
	              this.children.tail.format(name, value);
	            }
	          }
	        }, {
	          key: 'formats',
	          value: function formats() {
	            // We don't inherit from FormatBlot
	            return _defineProperty({}, this.statics.blotName, this.statics.formats(this.domNode));
	          }
	        }, {
	          key: 'insertBefore',
	          value: function insertBefore(blot, ref) {
	            if (blot instanceof ListItem) {
	              _get(List.prototype.__proto__ || Object.getPrototypeOf(List.prototype), 'insertBefore', this).call(this, blot, ref);
	            } else {
	              var index = ref == null ? this.length() : ref.offset(this);
	              var after = this.split(index);
	              after.parent.insertBefore(blot, after);
	            }
	          }
	        }, {
	          key: 'optimize',
	          value: function optimize(context) {
	            _get(List.prototype.__proto__ || Object.getPrototypeOf(List.prototype), 'optimize', this).call(this, context);
	            var next = this.next;
	            if (next != null && next.prev === this && next.statics.blotName === this.statics.blotName && next.domNode.tagName === this.domNode.tagName && next.domNode.getAttribute('data-checked') === this.domNode.getAttribute('data-checked')) {
	              next.moveChildren(this);
	              next.remove();
	            }
	          }
	        }, {
	          key: 'replace',
	          value: function replace(target) {
	            if (target.statics.blotName !== this.statics.blotName) {
	              var item = _parchment2.default.create(this.statics.defaultChild);
	              target.moveChildren(item);
	              this.appendChild(item);
	            }
	            _get(List.prototype.__proto__ || Object.getPrototypeOf(List.prototype), 'replace', this).call(this, target);
	          }
	        }]);
	
	        return List;
	      }(_container2.default);
	
	      List.blotName = 'list';
	      List.scope = _parchment2.default.Scope.BLOCK_BLOT;
	      List.tagName = ['OL', 'UL'];
	      List.defaultChild = 'list-item';
	      List.allowedChildren = [ListItem];
	
	      exports.ListItem = ListItem;
	      exports.default = List;
	
	      /***/
	    },
	    /* 70 */
	    /***/function (module, exports, __webpack_require__) {
	
	      "use strict";
	
	      Object.defineProperty(exports, "__esModule", {
	        value: true
	      });
	
	      var _createClass = function () {
	        function defineProperties(target, props) {
	          for (var i = 0; i < props.length; i++) {
	            var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
	          }
	        }return function (Constructor, protoProps, staticProps) {
	          if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
	        };
	      }();
	
	      var _get = function get(object, property, receiver) {
	        if (object === null) object = Function.prototype;var desc = Object.getOwnPropertyDescriptor(object, property);if (desc === undefined) {
	          var parent = Object.getPrototypeOf(object);if (parent === null) {
	            return undefined;
	          } else {
	            return get(parent, property, receiver);
	          }
	        } else if ("value" in desc) {
	          return desc.value;
	        } else {
	          var getter = desc.get;if (getter === undefined) {
	            return undefined;
	          }return getter.call(receiver);
	        }
	      };
	
	      var _inline = __webpack_require__(7);
	
	      var _inline2 = _interopRequireDefault(_inline);
	
	      function _interopRequireDefault(obj) {
	        return obj && obj.__esModule ? obj : { default: obj };
	      }
	
	      function _classCallCheck(instance, Constructor) {
	        if (!(instance instanceof Constructor)) {
	          throw new TypeError("Cannot call a class as a function");
	        }
	      }
	
	      function _possibleConstructorReturn(self, call) {
	        if (!self) {
	          throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
	        }return call && ((typeof call === 'undefined' ? 'undefined' : _typeof2(call)) === "object" || typeof call === "function") ? call : self;
	      }
	
	      function _inherits(subClass, superClass) {
	        if (typeof superClass !== "function" && superClass !== null) {
	          throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === 'undefined' ? 'undefined' : _typeof2(superClass)));
	        }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
	      }
	
	      var Script = function (_Inline) {
	        _inherits(Script, _Inline);
	
	        function Script() {
	          _classCallCheck(this, Script);
	
	          return _possibleConstructorReturn(this, (Script.__proto__ || Object.getPrototypeOf(Script)).apply(this, arguments));
	        }
	
	        _createClass(Script, null, [{
	          key: 'create',
	          value: function create(value) {
	            if (value === 'super') {
	              return document.createElement('sup');
	            } else if (value === 'sub') {
	              return document.createElement('sub');
	            } else {
	              return _get(Script.__proto__ || Object.getPrototypeOf(Script), 'create', this).call(this, value);
	            }
	          }
	        }, {
	          key: 'formats',
	          value: function formats(domNode) {
	            if (domNode.tagName === 'SUB') return 'sub';
	            if (domNode.tagName === 'SUP') return 'super';
	            return undefined;
	          }
	        }]);
	
	        return Script;
	      }(_inline2.default);
	
	      Script.blotName = 'script';
	      Script.tagName = ['SUB', 'SUP'];
	
	      exports.default = Script;
	
	      /***/
	    },
	    /* 71 */
	    /***/function (module, exports, __webpack_require__) {
	
	      "use strict";
	
	      Object.defineProperty(exports, "__esModule", {
	        value: true
	      });
	
	      var _inline = __webpack_require__(7);
	
	      var _inline2 = _interopRequireDefault(_inline);
	
	      function _interopRequireDefault(obj) {
	        return obj && obj.__esModule ? obj : { default: obj };
	      }
	
	      function _classCallCheck(instance, Constructor) {
	        if (!(instance instanceof Constructor)) {
	          throw new TypeError("Cannot call a class as a function");
	        }
	      }
	
	      function _possibleConstructorReturn(self, call) {
	        if (!self) {
	          throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
	        }return call && ((typeof call === 'undefined' ? 'undefined' : _typeof2(call)) === "object" || typeof call === "function") ? call : self;
	      }
	
	      function _inherits(subClass, superClass) {
	        if (typeof superClass !== "function" && superClass !== null) {
	          throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === 'undefined' ? 'undefined' : _typeof2(superClass)));
	        }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
	      }
	
	      var Strike = function (_Inline) {
	        _inherits(Strike, _Inline);
	
	        function Strike() {
	          _classCallCheck(this, Strike);
	
	          return _possibleConstructorReturn(this, (Strike.__proto__ || Object.getPrototypeOf(Strike)).apply(this, arguments));
	        }
	
	        return Strike;
	      }(_inline2.default);
	
	      Strike.blotName = 'strike';
	      Strike.tagName = 'S';
	
	      exports.default = Strike;
	
	      /***/
	    },
	    /* 72 */
	    /***/function (module, exports, __webpack_require__) {
	
	      "use strict";
	
	      Object.defineProperty(exports, "__esModule", {
	        value: true
	      });
	
	      var _inline = __webpack_require__(7);
	
	      var _inline2 = _interopRequireDefault(_inline);
	
	      function _interopRequireDefault(obj) {
	        return obj && obj.__esModule ? obj : { default: obj };
	      }
	
	      function _classCallCheck(instance, Constructor) {
	        if (!(instance instanceof Constructor)) {
	          throw new TypeError("Cannot call a class as a function");
	        }
	      }
	
	      function _possibleConstructorReturn(self, call) {
	        if (!self) {
	          throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
	        }return call && ((typeof call === 'undefined' ? 'undefined' : _typeof2(call)) === "object" || typeof call === "function") ? call : self;
	      }
	
	      function _inherits(subClass, superClass) {
	        if (typeof superClass !== "function" && superClass !== null) {
	          throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === 'undefined' ? 'undefined' : _typeof2(superClass)));
	        }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
	      }
	
	      var Underline = function (_Inline) {
	        _inherits(Underline, _Inline);
	
	        function Underline() {
	          _classCallCheck(this, Underline);
	
	          return _possibleConstructorReturn(this, (Underline.__proto__ || Object.getPrototypeOf(Underline)).apply(this, arguments));
	        }
	
	        return Underline;
	      }(_inline2.default);
	
	      Underline.blotName = 'underline';
	      Underline.tagName = 'U';
	
	      exports.default = Underline;
	
	      /***/
	    },
	    /* 73 */
	    /***/function (module, exports, __webpack_require__) {
	
	      "use strict";
	
	      Object.defineProperty(exports, "__esModule", {
	        value: true
	      });
	
	      var _createClass = function () {
	        function defineProperties(target, props) {
	          for (var i = 0; i < props.length; i++) {
	            var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
	          }
	        }return function (Constructor, protoProps, staticProps) {
	          if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
	        };
	      }();
	
	      var _get = function get(object, property, receiver) {
	        if (object === null) object = Function.prototype;var desc = Object.getOwnPropertyDescriptor(object, property);if (desc === undefined) {
	          var parent = Object.getPrototypeOf(object);if (parent === null) {
	            return undefined;
	          } else {
	            return get(parent, property, receiver);
	          }
	        } else if ("value" in desc) {
	          return desc.value;
	        } else {
	          var getter = desc.get;if (getter === undefined) {
	            return undefined;
	          }return getter.call(receiver);
	        }
	      };
	
	      var _block = __webpack_require__(4);
	
	      var _link = __webpack_require__(27);
	
	      var _link2 = _interopRequireDefault(_link);
	
	      function _interopRequireDefault(obj) {
	        return obj && obj.__esModule ? obj : { default: obj };
	      }
	
	      function _classCallCheck(instance, Constructor) {
	        if (!(instance instanceof Constructor)) {
	          throw new TypeError("Cannot call a class as a function");
	        }
	      }
	
	      function _possibleConstructorReturn(self, call) {
	        if (!self) {
	          throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
	        }return call && ((typeof call === 'undefined' ? 'undefined' : _typeof2(call)) === "object" || typeof call === "function") ? call : self;
	      }
	
	      function _inherits(subClass, superClass) {
	        if (typeof superClass !== "function" && superClass !== null) {
	          throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === 'undefined' ? 'undefined' : _typeof2(superClass)));
	        }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
	      }
	
	      var ATTRIBUTES = ['height', 'width'];
	
	      var Video = function (_BlockEmbed) {
	        _inherits(Video, _BlockEmbed);
	
	        function Video() {
	          _classCallCheck(this, Video);
	
	          return _possibleConstructorReturn(this, (Video.__proto__ || Object.getPrototypeOf(Video)).apply(this, arguments));
	        }
	
	        _createClass(Video, [{
	          key: 'format',
	          value: function format(name, value) {
	            if (ATTRIBUTES.indexOf(name) > -1) {
	              if (value) {
	                this.domNode.setAttribute(name, value);
	              } else {
	                this.domNode.removeAttribute(name);
	              }
	            } else {
	              _get(Video.prototype.__proto__ || Object.getPrototypeOf(Video.prototype), 'format', this).call(this, name, value);
	            }
	          }
	        }], [{
	          key: 'create',
	          value: function create(value) {
	            var node = _get(Video.__proto__ || Object.getPrototypeOf(Video), 'create', this).call(this, value);
	            node.setAttribute('frameborder', '0');
	            node.setAttribute('allowfullscreen', true);
	            node.setAttribute('src', this.sanitize(value));
	            return node;
	          }
	        }, {
	          key: 'formats',
	          value: function formats(domNode) {
	            return ATTRIBUTES.reduce(function (formats, attribute) {
	              if (domNode.hasAttribute(attribute)) {
	                formats[attribute] = domNode.getAttribute(attribute);
	              }
	              return formats;
	            }, {});
	          }
	        }, {
	          key: 'sanitize',
	          value: function sanitize(url) {
	            return _link2.default.sanitize(url);
	          }
	        }, {
	          key: 'value',
	          value: function value(domNode) {
	            return domNode.getAttribute('src');
	          }
	        }]);
	
	        return Video;
	      }(_block.BlockEmbed);
	
	      Video.blotName = 'video';
	      Video.className = 'ql-video';
	      Video.tagName = 'IFRAME';
	
	      exports.default = Video;
	
	      /***/
	    },
	    /* 74 */
	    /***/function (module, exports, __webpack_require__) {
	
	      "use strict";
	
	      Object.defineProperty(exports, "__esModule", {
	        value: true
	      });
	      exports.default = exports.FormulaBlot = undefined;
	
	      var _createClass = function () {
	        function defineProperties(target, props) {
	          for (var i = 0; i < props.length; i++) {
	            var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
	          }
	        }return function (Constructor, protoProps, staticProps) {
	          if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
	        };
	      }();
	
	      var _get = function get(object, property, receiver) {
	        if (object === null) object = Function.prototype;var desc = Object.getOwnPropertyDescriptor(object, property);if (desc === undefined) {
	          var parent = Object.getPrototypeOf(object);if (parent === null) {
	            return undefined;
	          } else {
	            return get(parent, property, receiver);
	          }
	        } else if ("value" in desc) {
	          return desc.value;
	        } else {
	          var getter = desc.get;if (getter === undefined) {
	            return undefined;
	          }return getter.call(receiver);
	        }
	      };
	
	      var _embed = __webpack_require__(5);
	
	      var _quill = __webpack_require__(6);
	
	      var _quill2 = _interopRequireDefault(_quill);
	
	      var _module = __webpack_require__(10);
	
	      var _module2 = _interopRequireDefault(_module);
	
	      function _interopRequireDefault(obj) {
	        return obj && obj.__esModule ? obj : { default: obj };
	      }
	
	      function _classCallCheck(instance, Constructor) {
	        if (!(instance instanceof Constructor)) {
	          throw new TypeError("Cannot call a class as a function");
	        }
	      }
	
	      function _possibleConstructorReturn(self, call) {
	        if (!self) {
	          throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
	        }return call && ((typeof call === 'undefined' ? 'undefined' : _typeof2(call)) === "object" || typeof call === "function") ? call : self;
	      }
	
	      function _inherits(subClass, superClass) {
	        if (typeof superClass !== "function" && superClass !== null) {
	          throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === 'undefined' ? 'undefined' : _typeof2(superClass)));
	        }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
	      }
	
	      var FormulaBlot = function (_InlineEmbed) {
	        _inherits(FormulaBlot, _InlineEmbed);
	
	        function FormulaBlot() {
	          _classCallCheck(this, FormulaBlot);
	
	          return _possibleConstructorReturn(this, (FormulaBlot.__proto__ || Object.getPrototypeOf(FormulaBlot)).apply(this, arguments));
	        }
	
	        _createClass(FormulaBlot, null, [{
	          key: 'create',
	          value: function create(value) {
	            var node = _get(FormulaBlot.__proto__ || Object.getPrototypeOf(FormulaBlot), 'create', this).call(this, value);
	            if (typeof value === 'string') {
	              window.katex.render(value, node);
	              node.setAttribute('data-value', value);
	            }
	            return node;
	          }
	        }, {
	          key: 'value',
	          value: function value(domNode) {
	            return domNode.getAttribute('data-value');
	          }
	        }]);
	
	        return FormulaBlot;
	      }(_embed.InlineEmbed);
	
	      FormulaBlot.blotName = 'formula';
	      FormulaBlot.className = 'ql-formula';
	      FormulaBlot.tagName = 'SPAN';
	
	      var Formula = function (_Module) {
	        _inherits(Formula, _Module);
	
	        _createClass(Formula, null, [{
	          key: 'register',
	          value: function register() {
	            _quill2.default.register(FormulaBlot, true);
	          }
	        }]);
	
	        function Formula() {
	          _classCallCheck(this, Formula);
	
	          var _this2 = _possibleConstructorReturn(this, (Formula.__proto__ || Object.getPrototypeOf(Formula)).call(this));
	
	          if (window.katex == null) {
	            throw new Error('Formula module requires KaTeX.');
	          }
	          return _this2;
	        }
	
	        return Formula;
	      }(_module2.default);
	
	      exports.FormulaBlot = FormulaBlot;
	      exports.default = Formula;
	
	      /***/
	    },
	    /* 75 */
	    /***/function (module, exports, __webpack_require__) {
	
	      "use strict";
	
	      Object.defineProperty(exports, "__esModule", {
	        value: true
	      });
	      exports.default = exports.CodeToken = exports.CodeBlock = undefined;
	
	      var _createClass = function () {
	        function defineProperties(target, props) {
	          for (var i = 0; i < props.length; i++) {
	            var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
	          }
	        }return function (Constructor, protoProps, staticProps) {
	          if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
	        };
	      }();
	
	      var _get = function get(object, property, receiver) {
	        if (object === null) object = Function.prototype;var desc = Object.getOwnPropertyDescriptor(object, property);if (desc === undefined) {
	          var parent = Object.getPrototypeOf(object);if (parent === null) {
	            return undefined;
	          } else {
	            return get(parent, property, receiver);
	          }
	        } else if ("value" in desc) {
	          return desc.value;
	        } else {
	          var getter = desc.get;if (getter === undefined) {
	            return undefined;
	          }return getter.call(receiver);
	        }
	      };
	
	      var _parchment = __webpack_require__(0);
	
	      var _parchment2 = _interopRequireDefault(_parchment);
	
	      var _quill = __webpack_require__(6);
	
	      var _quill2 = _interopRequireDefault(_quill);
	
	      var _module = __webpack_require__(10);
	
	      var _module2 = _interopRequireDefault(_module);
	
	      var _code = __webpack_require__(17);
	
	      var _code2 = _interopRequireDefault(_code);
	
	      function _interopRequireDefault(obj) {
	        return obj && obj.__esModule ? obj : { default: obj };
	      }
	
	      function _classCallCheck(instance, Constructor) {
	        if (!(instance instanceof Constructor)) {
	          throw new TypeError("Cannot call a class as a function");
	        }
	      }
	
	      function _possibleConstructorReturn(self, call) {
	        if (!self) {
	          throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
	        }return call && ((typeof call === 'undefined' ? 'undefined' : _typeof2(call)) === "object" || typeof call === "function") ? call : self;
	      }
	
	      function _inherits(subClass, superClass) {
	        if (typeof superClass !== "function" && superClass !== null) {
	          throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === 'undefined' ? 'undefined' : _typeof2(superClass)));
	        }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
	      }
	
	      var SyntaxCodeBlock = function (_CodeBlock) {
	        _inherits(SyntaxCodeBlock, _CodeBlock);
	
	        function SyntaxCodeBlock() {
	          _classCallCheck(this, SyntaxCodeBlock);
	
	          return _possibleConstructorReturn(this, (SyntaxCodeBlock.__proto__ || Object.getPrototypeOf(SyntaxCodeBlock)).apply(this, arguments));
	        }
	
	        _createClass(SyntaxCodeBlock, [{
	          key: 'replaceWith',
	          value: function replaceWith(block) {
	            this.domNode.textContent = this.domNode.textContent;
	            this.attach();
	            _get(SyntaxCodeBlock.prototype.__proto__ || Object.getPrototypeOf(SyntaxCodeBlock.prototype), 'replaceWith', this).call(this, block);
	          }
	        }, {
	          key: 'highlight',
	          value: function highlight(_highlight) {
	            var text = this.domNode.textContent;
	            if (this.cachedText !== text) {
	              if (text.trim().length > 0 || this.cachedText == null) {
	                this.domNode.innerHTML = _highlight(text);
	                this.domNode.normalize();
	                this.attach();
	              }
	              this.cachedText = text;
	            }
	          }
	        }]);
	
	        return SyntaxCodeBlock;
	      }(_code2.default);
	
	      SyntaxCodeBlock.className = 'ql-syntax';
	
	      var CodeToken = new _parchment2.default.Attributor.Class('token', 'hljs', {
	        scope: _parchment2.default.Scope.INLINE
	      });
	
	      var Syntax = function (_Module) {
	        _inherits(Syntax, _Module);
	
	        _createClass(Syntax, null, [{
	          key: 'register',
	          value: function register() {
	            _quill2.default.register(CodeToken, true);
	            _quill2.default.register(SyntaxCodeBlock, true);
	          }
	        }]);
	
	        function Syntax(quill, options) {
	          _classCallCheck(this, Syntax);
	
	          var _this2 = _possibleConstructorReturn(this, (Syntax.__proto__ || Object.getPrototypeOf(Syntax)).call(this, quill, options));
	
	          if (typeof _this2.options.highlight !== 'function') {
	            throw new Error('Syntax module requires highlight.js. Please include the library on the page before Quill.');
	          }
	          var timer = null;
	          _this2.quill.on(_quill2.default.events.SCROLL_OPTIMIZE, function () {
	            clearTimeout(timer);
	            timer = setTimeout(function () {
	              _this2.highlight();
	              timer = null;
	            }, _this2.options.interval);
	          });
	          _this2.highlight();
	          return _this2;
	        }
	
	        _createClass(Syntax, [{
	          key: 'highlight',
	          value: function highlight() {
	            var _this3 = this;
	
	            if (this.quill.selection.composing) return;
	            this.quill.update(_quill2.default.sources.USER);
	            var range = this.quill.getSelection();
	            this.quill.scroll.descendants(SyntaxCodeBlock).forEach(function (code) {
	              code.highlight(_this3.options.highlight);
	            });
	            this.quill.update(_quill2.default.sources.SILENT);
	            if (range != null) {
	              this.quill.setSelection(range, _quill2.default.sources.SILENT);
	            }
	          }
	        }]);
	
	        return Syntax;
	      }(_module2.default);
	
	      Syntax.DEFAULTS = {
	        highlight: function () {
	          if (window.hljs == null) return null;
	          return function (text) {
	            var result = window.hljs.highlightAuto(text);
	            return result.value;
	          };
	        }(),
	        interval: 1000
	      };
	
	      exports.CodeBlock = SyntaxCodeBlock;
	      exports.CodeToken = CodeToken;
	      exports.default = Syntax;
	
	      /***/
	    },
	    /* 76 */
	    /***/function (module, exports, __webpack_require__) {
	
	      "use strict";
	
	      Object.defineProperty(exports, "__esModule", {
	        value: true
	      });
	      exports.default = exports.BubbleTooltip = undefined;
	
	      var _get = function get(object, property, receiver) {
	        if (object === null) object = Function.prototype;var desc = Object.getOwnPropertyDescriptor(object, property);if (desc === undefined) {
	          var parent = Object.getPrototypeOf(object);if (parent === null) {
	            return undefined;
	          } else {
	            return get(parent, property, receiver);
	          }
	        } else if ("value" in desc) {
	          return desc.value;
	        } else {
	          var getter = desc.get;if (getter === undefined) {
	            return undefined;
	          }return getter.call(receiver);
	        }
	      };
	
	      var _createClass = function () {
	        function defineProperties(target, props) {
	          for (var i = 0; i < props.length; i++) {
	            var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
	          }
	        }return function (Constructor, protoProps, staticProps) {
	          if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
	        };
	      }();
	
	      var _extend = __webpack_require__(3);
	
	      var _extend2 = _interopRequireDefault(_extend);
	
	      var _emitter = __webpack_require__(9);
	
	      var _emitter2 = _interopRequireDefault(_emitter);
	
	      var _base = __webpack_require__(43);
	
	      var _base2 = _interopRequireDefault(_base);
	
	      var _selection = __webpack_require__(15);
	
	      var _icons = __webpack_require__(41);
	
	      var _icons2 = _interopRequireDefault(_icons);
	
	      function _interopRequireDefault(obj) {
	        return obj && obj.__esModule ? obj : { default: obj };
	      }
	
	      function _classCallCheck(instance, Constructor) {
	        if (!(instance instanceof Constructor)) {
	          throw new TypeError("Cannot call a class as a function");
	        }
	      }
	
	      function _possibleConstructorReturn(self, call) {
	        if (!self) {
	          throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
	        }return call && ((typeof call === 'undefined' ? 'undefined' : _typeof2(call)) === "object" || typeof call === "function") ? call : self;
	      }
	
	      function _inherits(subClass, superClass) {
	        if (typeof superClass !== "function" && superClass !== null) {
	          throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === 'undefined' ? 'undefined' : _typeof2(superClass)));
	        }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
	      }
	
	      var TOOLBAR_CONFIG = [['bold', 'italic', 'link'], [{ header: 1 }, { header: 2 }, 'blockquote']];
	
	      var BubbleTheme = function (_BaseTheme) {
	        _inherits(BubbleTheme, _BaseTheme);
	
	        function BubbleTheme(quill, options) {
	          _classCallCheck(this, BubbleTheme);
	
	          if (options.modules.toolbar != null && options.modules.toolbar.container == null) {
	            options.modules.toolbar.container = TOOLBAR_CONFIG;
	          }
	
	          var _this = _possibleConstructorReturn(this, (BubbleTheme.__proto__ || Object.getPrototypeOf(BubbleTheme)).call(this, quill, options));
	
	          _this.quill.container.classList.add('ql-bubble');
	          return _this;
	        }
	
	        _createClass(BubbleTheme, [{
	          key: 'extendToolbar',
	          value: function extendToolbar(toolbar) {
	            this.tooltip = new BubbleTooltip(this.quill, this.options.bounds);
	            this.tooltip.root.appendChild(toolbar.container);
	            this.buildButtons([].slice.call(toolbar.container.querySelectorAll('button')), _icons2.default);
	            this.buildPickers([].slice.call(toolbar.container.querySelectorAll('select')), _icons2.default);
	          }
	        }]);
	
	        return BubbleTheme;
	      }(_base2.default);
	
	      BubbleTheme.DEFAULTS = (0, _extend2.default)(true, {}, _base2.default.DEFAULTS, {
	        modules: {
	          toolbar: {
	            handlers: {
	              link: function link(value) {
	                if (!value) {
	                  this.quill.format('link', false);
	                } else {
	                  this.quill.theme.tooltip.edit();
	                }
	              }
	            }
	          }
	        }
	      });
	
	      var BubbleTooltip = function (_BaseTooltip) {
	        _inherits(BubbleTooltip, _BaseTooltip);
	
	        function BubbleTooltip(quill, bounds) {
	          _classCallCheck(this, BubbleTooltip);
	
	          var _this2 = _possibleConstructorReturn(this, (BubbleTooltip.__proto__ || Object.getPrototypeOf(BubbleTooltip)).call(this, quill, bounds));
	
	          _this2.quill.on(_emitter2.default.events.EDITOR_CHANGE, function (type, range, oldRange, source) {
	            if (type !== _emitter2.default.events.SELECTION_CHANGE) return;
	            if (range != null && range.length > 0 && source === _emitter2.default.sources.USER) {
	              _this2.show();
	              // Lock our width so we will expand beyond our offsetParent boundaries
	              _this2.root.style.left = '0px';
	              _this2.root.style.width = '';
	              _this2.root.style.width = _this2.root.offsetWidth + 'px';
	              var lines = _this2.quill.getLines(range.index, range.length);
	              if (lines.length === 1) {
	                _this2.position(_this2.quill.getBounds(range));
	              } else {
	                var lastLine = lines[lines.length - 1];
	                var index = _this2.quill.getIndex(lastLine);
	                var length = Math.min(lastLine.length() - 1, range.index + range.length - index);
	                var _bounds = _this2.quill.getBounds(new _selection.Range(index, length));
	                _this2.position(_bounds);
	              }
	            } else if (document.activeElement !== _this2.textbox && _this2.quill.hasFocus()) {
	              _this2.hide();
	            }
	          });
	          return _this2;
	        }
	
	        _createClass(BubbleTooltip, [{
	          key: 'listen',
	          value: function listen() {
	            var _this3 = this;
	
	            _get(BubbleTooltip.prototype.__proto__ || Object.getPrototypeOf(BubbleTooltip.prototype), 'listen', this).call(this);
	            this.root.querySelector('.ql-close').addEventListener('click', function () {
	              _this3.root.classList.remove('ql-editing');
	            });
	            this.quill.on(_emitter2.default.events.SCROLL_OPTIMIZE, function () {
	              // Let selection be restored by toolbar handlers before repositioning
	              setTimeout(function () {
	                if (_this3.root.classList.contains('ql-hidden')) return;
	                var range = _this3.quill.getSelection();
	                if (range != null) {
	                  _this3.position(_this3.quill.getBounds(range));
	                }
	              }, 1);
	            });
	          }
	        }, {
	          key: 'cancel',
	          value: function cancel() {
	            this.show();
	          }
	        }, {
	          key: 'position',
	          value: function position(reference) {
	            var shift = _get(BubbleTooltip.prototype.__proto__ || Object.getPrototypeOf(BubbleTooltip.prototype), 'position', this).call(this, reference);
	            var arrow = this.root.querySelector('.ql-tooltip-arrow');
	            arrow.style.marginLeft = '';
	            if (shift === 0) return shift;
	            arrow.style.marginLeft = -1 * shift - arrow.offsetWidth / 2 + 'px';
	          }
	        }]);
	
	        return BubbleTooltip;
	      }(_base.BaseTooltip);
	
	      BubbleTooltip.TEMPLATE = ['<span class="ql-tooltip-arrow"></span>', '<div class="ql-tooltip-editor">', '<input type="text" data-formula="e=mc^2" data-link="https://quilljs.com" data-video="Embed URL">', '<a class="ql-close"></a>', '</div>'].join('');
	
	      exports.BubbleTooltip = BubbleTooltip;
	      exports.default = BubbleTheme;
	
	      /***/
	    },
	    /* 77 */
	    /***/function (module, exports) {
	
	      module.exports = "<svg viewbox=\"0 0 18 18\"> <line class=ql-stroke x1=15 x2=3 y1=9 y2=9></line> <line class=ql-stroke x1=14 x2=4 y1=14 y2=14></line> <line class=ql-stroke x1=12 x2=6 y1=4 y2=4></line> </svg>";
	
	      /***/
	    },
	    /* 78 */
	    /***/function (module, exports) {
	
	      module.exports = "<svg viewbox=\"0 0 18 18\"> <line class=ql-stroke x1=15 x2=3 y1=9 y2=9></line> <line class=ql-stroke x1=15 x2=3 y1=14 y2=14></line> <line class=ql-stroke x1=15 x2=3 y1=4 y2=4></line> </svg>";
	
	      /***/
	    },
	    /* 79 */
	    /***/function (module, exports) {
	
	      module.exports = "<svg viewbox=\"0 0 18 18\"> <line class=ql-stroke x1=3 x2=15 y1=9 y2=9></line> <line class=ql-stroke x1=3 x2=13 y1=14 y2=14></line> <line class=ql-stroke x1=3 x2=9 y1=4 y2=4></line> </svg>";
	
	      /***/
	    },
	    /* 80 */
	    /***/function (module, exports) {
	
	      module.exports = "<svg viewbox=\"0 0 18 18\"> <line class=ql-stroke x1=15 x2=3 y1=9 y2=9></line> <line class=ql-stroke x1=15 x2=5 y1=14 y2=14></line> <line class=ql-stroke x1=15 x2=9 y1=4 y2=4></line> </svg>";
	
	      /***/
	    },
	    /* 81 */
	    /***/function (module, exports) {
	
	      module.exports = "<svg viewbox=\"0 0 18 18\"> <g class=\"ql-fill ql-color-label\"> <polygon points=\"6 6.868 6 6 5 6 5 7 5.942 7 6 6.868\"></polygon> <rect height=1 width=1 x=4 y=4></rect> <polygon points=\"6.817 5 6 5 6 6 6.38 6 6.817 5\"></polygon> <rect height=1 width=1 x=2 y=6></rect> <rect height=1 width=1 x=3 y=5></rect> <rect height=1 width=1 x=4 y=7></rect> <polygon points=\"4 11.439 4 11 3 11 3 12 3.755 12 4 11.439\"></polygon> <rect height=1 width=1 x=2 y=12></rect> <rect height=1 width=1 x=2 y=9></rect> <rect height=1 width=1 x=2 y=15></rect> <polygon points=\"4.63 10 4 10 4 11 4.192 11 4.63 10\"></polygon> <rect height=1 width=1 x=3 y=8></rect> <path d=M10.832,4.2L11,4.582V4H10.708A1.948,1.948,0,0,1,10.832,4.2Z></path> <path d=M7,4.582L7.168,4.2A1.929,1.929,0,0,1,7.292,4H7V4.582Z></path> <path d=M8,13H7.683l-0.351.8a1.933,1.933,0,0,1-.124.2H8V13Z></path> <rect height=1 width=1 x=12 y=2></rect> <rect height=1 width=1 x=11 y=3></rect> <path d=M9,3H8V3.282A1.985,1.985,0,0,1,9,3Z></path> <rect height=1 width=1 x=2 y=3></rect> <rect height=1 width=1 x=6 y=2></rect> <rect height=1 width=1 x=3 y=2></rect> <rect height=1 width=1 x=5 y=3></rect> <rect height=1 width=1 x=9 y=2></rect> <rect height=1 width=1 x=15 y=14></rect> <polygon points=\"13.447 10.174 13.469 10.225 13.472 10.232 13.808 11 14 11 14 10 13.37 10 13.447 10.174\"></polygon> <rect height=1 width=1 x=13 y=7></rect> <rect height=1 width=1 x=15 y=5></rect> <rect height=1 width=1 x=14 y=6></rect> <rect height=1 width=1 x=15 y=8></rect> <rect height=1 width=1 x=14 y=9></rect> <path d=M3.775,14H3v1H4V14.314A1.97,1.97,0,0,1,3.775,14Z></path> <rect height=1 width=1 x=14 y=3></rect> <polygon points=\"12 6.868 12 6 11.62 6 12 6.868\"></polygon> <rect height=1 width=1 x=15 y=2></rect> <rect height=1 width=1 x=12 y=5></rect> <rect height=1 width=1 x=13 y=4></rect> <polygon points=\"12.933 9 13 9 13 8 12.495 8 12.933 9\"></polygon> <rect height=1 width=1 x=9 y=14></rect> <rect height=1 width=1 x=8 y=15></rect> <path d=M6,14.926V15H7V14.316A1.993,1.993,0,0,1,6,14.926Z></path> <rect height=1 width=1 x=5 y=15></rect> <path d=M10.668,13.8L10.317,13H10v1h0.792A1.947,1.947,0,0,1,10.668,13.8Z></path> <rect height=1 width=1 x=11 y=15></rect> <path d=M14.332,12.2a1.99,1.99,0,0,1,.166.8H15V12H14.245Z></path> <rect height=1 width=1 x=14 y=15></rect> <rect height=1 width=1 x=15 y=11></rect> </g> <polyline class=ql-stroke points=\"5.5 13 9 5 12.5 13\"></polyline> <line class=ql-stroke x1=11.63 x2=6.38 y1=11 y2=11></line> </svg>";
	
	      /***/
	    },
	    /* 82 */
	    /***/function (module, exports) {
	
	      module.exports = "<svg viewbox=\"0 0 18 18\"> <rect class=\"ql-fill ql-stroke\" height=3 width=3 x=4 y=5></rect> <rect class=\"ql-fill ql-stroke\" height=3 width=3 x=11 y=5></rect> <path class=\"ql-even ql-fill ql-stroke\" d=M7,8c0,4.031-3,5-3,5></path> <path class=\"ql-even ql-fill ql-stroke\" d=M14,8c0,4.031-3,5-3,5></path> </svg>";
	
	      /***/
	    },
	    /* 83 */
	    /***/function (module, exports) {
	
	      module.exports = "<svg viewbox=\"0 0 18 18\"> <path class=ql-stroke d=M5,4H9.5A2.5,2.5,0,0,1,12,6.5v0A2.5,2.5,0,0,1,9.5,9H5A0,0,0,0,1,5,9V4A0,0,0,0,1,5,4Z></path> <path class=ql-stroke d=M5,9h5.5A2.5,2.5,0,0,1,13,11.5v0A2.5,2.5,0,0,1,10.5,14H5a0,0,0,0,1,0,0V9A0,0,0,0,1,5,9Z></path> </svg>";
	
	      /***/
	    },
	    /* 84 */
	    /***/function (module, exports) {
	
	      module.exports = "<svg class=\"\" viewbox=\"0 0 18 18\"> <line class=ql-stroke x1=5 x2=13 y1=3 y2=3></line> <line class=ql-stroke x1=6 x2=9.35 y1=12 y2=3></line> <line class=ql-stroke x1=11 x2=15 y1=11 y2=15></line> <line class=ql-stroke x1=15 x2=11 y1=11 y2=15></line> <rect class=ql-fill height=1 rx=0.5 ry=0.5 width=7 x=2 y=14></rect> </svg>";
	
	      /***/
	    },
	    /* 85 */
	    /***/function (module, exports) {
	
	      module.exports = "<svg viewbox=\"0 0 18 18\"> <line class=\"ql-color-label ql-stroke ql-transparent\" x1=3 x2=15 y1=15 y2=15></line> <polyline class=ql-stroke points=\"5.5 11 9 3 12.5 11\"></polyline> <line class=ql-stroke x1=11.63 x2=6.38 y1=9 y2=9></line> </svg>";
	
	      /***/
	    },
	    /* 86 */
	    /***/function (module, exports) {
	
	      module.exports = "<svg viewbox=\"0 0 18 18\"> <polygon class=\"ql-stroke ql-fill\" points=\"3 11 5 9 3 7 3 11\"></polygon> <line class=\"ql-stroke ql-fill\" x1=15 x2=11 y1=4 y2=4></line> <path class=ql-fill d=M11,3a3,3,0,0,0,0,6h1V3H11Z></path> <rect class=ql-fill height=11 width=1 x=11 y=4></rect> <rect class=ql-fill height=11 width=1 x=13 y=4></rect> </svg>";
	
	      /***/
	    },
	    /* 87 */
	    /***/function (module, exports) {
	
	      module.exports = "<svg viewbox=\"0 0 18 18\"> <polygon class=\"ql-stroke ql-fill\" points=\"15 12 13 10 15 8 15 12\"></polygon> <line class=\"ql-stroke ql-fill\" x1=9 x2=5 y1=4 y2=4></line> <path class=ql-fill d=M5,3A3,3,0,0,0,5,9H6V3H5Z></path> <rect class=ql-fill height=11 width=1 x=5 y=4></rect> <rect class=ql-fill height=11 width=1 x=7 y=4></rect> </svg>";
	
	      /***/
	    },
	    /* 88 */
	    /***/function (module, exports) {
	
	      module.exports = "<svg viewbox=\"0 0 18 18\"> <polygon class=ql-stroke points=\"7 11 9 13 11 11 7 11\"></polygon> <polygon class=ql-stroke points=\"7 7 9 5 11 7 7 7\"></polygon> </svg>";
	
	      /***/
	    },
	    /* 89 */
	    /***/function (module, exports) {
	
	      module.exports = "<svg viewbox=\"0 0 18 18\"> <path class=ql-fill d=M14,16H4a1,1,0,0,1,0-2H14A1,1,0,0,1,14,16Z /> <path class=ql-fill d=M14,4H4A1,1,0,0,1,4,2H14A1,1,0,0,1,14,4Z /> <rect class=ql-fill x=3 y=6 width=12 height=6 rx=1 ry=1 /> </svg>";
	
	      /***/
	    },
	    /* 90 */
	    /***/function (module, exports) {
	
	      module.exports = "<svg viewbox=\"0 0 18 18\"> <path class=ql-fill d=M13,16H5a1,1,0,0,1,0-2h8A1,1,0,0,1,13,16Z /> <path class=ql-fill d=M13,4H5A1,1,0,0,1,5,2h8A1,1,0,0,1,13,4Z /> <rect class=ql-fill x=2 y=6 width=14 height=6 rx=1 ry=1 /> </svg>";
	
	      /***/
	    },
	    /* 91 */
	    /***/function (module, exports) {
	
	      module.exports = "<svg viewbox=\"0 0 18 18\"> <path class=ql-fill d=M15,8H13a1,1,0,0,1,0-2h2A1,1,0,0,1,15,8Z /> <path class=ql-fill d=M15,12H13a1,1,0,0,1,0-2h2A1,1,0,0,1,15,12Z /> <path class=ql-fill d=M15,16H5a1,1,0,0,1,0-2H15A1,1,0,0,1,15,16Z /> <path class=ql-fill d=M15,4H5A1,1,0,0,1,5,2H15A1,1,0,0,1,15,4Z /> <rect class=ql-fill x=2 y=6 width=8 height=6 rx=1 ry=1 /> </svg>";
	
	      /***/
	    },
	    /* 92 */
	    /***/function (module, exports) {
	
	      module.exports = "<svg viewbox=\"0 0 18 18\"> <path class=ql-fill d=M5,8H3A1,1,0,0,1,3,6H5A1,1,0,0,1,5,8Z /> <path class=ql-fill d=M5,12H3a1,1,0,0,1,0-2H5A1,1,0,0,1,5,12Z /> <path class=ql-fill d=M13,16H3a1,1,0,0,1,0-2H13A1,1,0,0,1,13,16Z /> <path class=ql-fill d=M13,4H3A1,1,0,0,1,3,2H13A1,1,0,0,1,13,4Z /> <rect class=ql-fill x=8 y=6 width=8 height=6 rx=1 ry=1 transform=\"translate(24 18) rotate(-180)\"/> </svg>";
	
	      /***/
	    },
	    /* 93 */
	    /***/function (module, exports) {
	
	      module.exports = "<svg viewbox=\"0 0 18 18\"> <path class=ql-fill d=M11.759,2.482a2.561,2.561,0,0,0-3.53.607A7.656,7.656,0,0,0,6.8,6.2C6.109,9.188,5.275,14.677,4.15,14.927a1.545,1.545,0,0,0-1.3-.933A0.922,0.922,0,0,0,2,15.036S1.954,16,4.119,16s3.091-2.691,3.7-5.553c0.177-.826.36-1.726,0.554-2.6L8.775,6.2c0.381-1.421.807-2.521,1.306-2.676a1.014,1.014,0,0,0,1.02.56A0.966,0.966,0,0,0,11.759,2.482Z></path> <rect class=ql-fill height=1.6 rx=0.8 ry=0.8 width=5 x=5.15 y=6.2></rect> <path class=ql-fill d=M13.663,12.027a1.662,1.662,0,0,1,.266-0.276q0.193,0.069.456,0.138a2.1,2.1,0,0,0,.535.069,1.075,1.075,0,0,0,.767-0.3,1.044,1.044,0,0,0,.314-0.8,0.84,0.84,0,0,0-.238-0.619,0.8,0.8,0,0,0-.594-0.239,1.154,1.154,0,0,0-.781.3,4.607,4.607,0,0,0-.781,1q-0.091.15-.218,0.346l-0.246.38c-0.068-.288-0.137-0.582-0.212-0.885-0.459-1.847-2.494-.984-2.941-0.8-0.482.2-.353,0.647-0.094,0.529a0.869,0.869,0,0,1,1.281.585c0.217,0.751.377,1.436,0.527,2.038a5.688,5.688,0,0,1-.362.467,2.69,2.69,0,0,1-.264.271q-0.221-.08-0.471-0.147a2.029,2.029,0,0,0-.522-0.066,1.079,1.079,0,0,0-.768.3A1.058,1.058,0,0,0,9,15.131a0.82,0.82,0,0,0,.832.852,1.134,1.134,0,0,0,.787-0.3,5.11,5.11,0,0,0,.776-0.993q0.141-.219.215-0.34c0.046-.076.122-0.194,0.223-0.346a2.786,2.786,0,0,0,.918,1.726,2.582,2.582,0,0,0,2.376-.185c0.317-.181.212-0.565,0-0.494A0.807,0.807,0,0,1,14.176,15a5.159,5.159,0,0,1-.913-2.446l0,0Q13.487,12.24,13.663,12.027Z></path> </svg>";
	
	      /***/
	    },
	    /* 94 */
	    /***/function (module, exports) {
	
	      module.exports = "<svg viewbox=\"0 0 18 18\"> <line class=ql-stroke x1=3 x2=3 y1=4 y2=14></line> <line class=ql-stroke x1=11 x2=11 y1=4 y2=14></line> <line class=ql-stroke x1=11 x2=3 y1=9 y2=9></line> <path class=\"ql-stroke ql-thin\" d=M15.5,14.5h-2c0-.234,1.85-1.076,1.85-2.234a0.959,0.959,0,0,0-1.85-.109></path> </svg>";
	
	      /***/
	    },
	    /* 95 */
	    /***/function (module, exports) {
	
	      module.exports = "<svg viewbox=\"0 0 18 18\"> <line class=ql-stroke x1=3 x2=3 y1=4 y2=14></line> <line class=ql-stroke x1=11 x2=11 y1=4 y2=14></line> <line class=ql-stroke x1=11 x2=3 y1=9 y2=9></line> <line class=\"ql-stroke ql-thin\" x1=13.5 x2=15.5 y1=14.5 y2=14.5></line> <path class=ql-fill d=M14.5,15a0.5,0.5,0,0,1-.5-0.5V12.085l-0.276.138A0.5,0.5,0,0,1,13.053,12c-0.124-.247-0.023-0.324.224-0.447l1-.5A0.5,0.5,0,0,1,15,11.5v3A0.5,0.5,0,0,1,14.5,15Z></path> </svg>";
	
	      /***/
	    },
	    /* 96 */
	    /***/function (module, exports) {
	
	      module.exports = "<svg viewbox=\"0 0 18 18\"> <rect class=ql-stroke height=10 width=12 x=3 y=4></rect> <circle class=ql-fill cx=6 cy=7 r=1></circle> <polyline class=\"ql-even ql-fill\" points=\"5 12 5 11 7 9 8 10 11 7 13 9 13 12 5 12\"></polyline> </svg>";
	
	      /***/
	    },
	    /* 97 */
	    /***/function (module, exports) {
	
	      module.exports = "<svg viewbox=\"0 0 18 18\"> <line class=ql-stroke x1=3 x2=15 y1=14 y2=14></line> <line class=ql-stroke x1=3 x2=15 y1=4 y2=4></line> <line class=ql-stroke x1=9 x2=15 y1=9 y2=9></line> <polyline class=\"ql-fill ql-stroke\" points=\"3 7 3 11 5 9 3 7\"></polyline> </svg>";
	
	      /***/
	    },
	    /* 98 */
	    /***/function (module, exports) {
	
	      module.exports = "<svg viewbox=\"0 0 18 18\"> <line class=ql-stroke x1=7 x2=13 y1=4 y2=4></line> <line class=ql-stroke x1=5 x2=11 y1=14 y2=14></line> <line class=ql-stroke x1=8 x2=10 y1=14 y2=4></line> </svg>";
	
	      /***/
	    },
	    /* 99 */
	    /***/function (module, exports) {
	
	      module.exports = "<svg viewbox=\"0 0 18 18\"> <line class=ql-stroke x1=7 x2=11 y1=7 y2=11></line> <path class=\"ql-even ql-stroke\" d=M8.9,4.577a3.476,3.476,0,0,1,.36,4.679A3.476,3.476,0,0,1,4.577,8.9C3.185,7.5,2.035,6.4,4.217,4.217S7.5,3.185,8.9,4.577Z></path> <path class=\"ql-even ql-stroke\" d=M13.423,9.1a3.476,3.476,0,0,0-4.679-.36,3.476,3.476,0,0,0,.36,4.679c1.392,1.392,2.5,2.542,4.679.36S14.815,10.5,13.423,9.1Z></path> </svg>";
	
	      /***/
	    },
	    /* 100 */
	    /***/function (module, exports) {
	
	      module.exports = "<svg viewbox=\"0 0 18 18\"> <line class=ql-stroke x1=6 x2=15 y1=4 y2=4></line> <line class=ql-stroke x1=6 x2=15 y1=9 y2=9></line> <line class=ql-stroke x1=6 x2=15 y1=14 y2=14></line> <line class=ql-stroke x1=3 x2=3 y1=4 y2=4></line> <line class=ql-stroke x1=3 x2=3 y1=9 y2=9></line> <line class=ql-stroke x1=3 x2=3 y1=14 y2=14></line> </svg>";
	
	      /***/
	    },
	    /* 101 */
	    /***/function (module, exports) {
	
	      module.exports = "<svg class=\"\" viewbox=\"0 0 18 18\"> <line class=ql-stroke x1=9 x2=15 y1=4 y2=4></line> <polyline class=ql-stroke points=\"3 4 4 5 6 3\"></polyline> <line class=ql-stroke x1=9 x2=15 y1=14 y2=14></line> <polyline class=ql-stroke points=\"3 14 4 15 6 13\"></polyline> <line class=ql-stroke x1=9 x2=15 y1=9 y2=9></line> <polyline class=ql-stroke points=\"3 9 4 10 6 8\"></polyline> </svg>";
	
	      /***/
	    },
	    /* 102 */
	    /***/function (module, exports) {
	
	      module.exports = "<svg viewbox=\"0 0 18 18\"> <line class=ql-stroke x1=7 x2=15 y1=4 y2=4></line> <line class=ql-stroke x1=7 x2=15 y1=9 y2=9></line> <line class=ql-stroke x1=7 x2=15 y1=14 y2=14></line> <line class=\"ql-stroke ql-thin\" x1=2.5 x2=4.5 y1=5.5 y2=5.5></line> <path class=ql-fill d=M3.5,6A0.5,0.5,0,0,1,3,5.5V3.085l-0.276.138A0.5,0.5,0,0,1,2.053,3c-0.124-.247-0.023-0.324.224-0.447l1-.5A0.5,0.5,0,0,1,4,2.5v3A0.5,0.5,0,0,1,3.5,6Z></path> <path class=\"ql-stroke ql-thin\" d=M4.5,10.5h-2c0-.234,1.85-1.076,1.85-2.234A0.959,0.959,0,0,0,2.5,8.156></path> <path class=\"ql-stroke ql-thin\" d=M2.5,14.846a0.959,0.959,0,0,0,1.85-.109A0.7,0.7,0,0,0,3.75,14a0.688,0.688,0,0,0,.6-0.736,0.959,0.959,0,0,0-1.85-.109></path> </svg>";
	
	      /***/
	    },
	    /* 103 */
	    /***/function (module, exports) {
	
	      module.exports = "<svg viewbox=\"0 0 18 18\"> <line class=ql-stroke x1=3 x2=15 y1=14 y2=14></line> <line class=ql-stroke x1=3 x2=15 y1=4 y2=4></line> <line class=ql-stroke x1=9 x2=15 y1=9 y2=9></line> <polyline class=ql-stroke points=\"5 7 5 11 3 9 5 7\"></polyline> </svg>";
	
	      /***/
	    },
	    /* 104 */
	    /***/function (module, exports) {
	
	      module.exports = "<svg viewbox=\"0 0 18 18\"> <line class=\"ql-stroke ql-thin\" x1=15.5 x2=2.5 y1=8.5 y2=9.5></line> <path class=ql-fill d=M9.007,8C6.542,7.791,6,7.519,6,6.5,6,5.792,7.283,5,9,5c1.571,0,2.765.679,2.969,1.309a1,1,0,0,0,1.9-.617C13.356,4.106,11.354,3,9,3,6.2,3,4,4.538,4,6.5a3.2,3.2,0,0,0,.5,1.843Z></path> <path class=ql-fill d=M8.984,10C11.457,10.208,12,10.479,12,11.5c0,0.708-1.283,1.5-3,1.5-1.571,0-2.765-.679-2.969-1.309a1,1,0,1,0-1.9.617C4.644,13.894,6.646,15,9,15c2.8,0,5-1.538,5-3.5a3.2,3.2,0,0,0-.5-1.843Z></path> </svg>";
	
	      /***/
	    },
	    /* 105 */
	    /***/function (module, exports) {
	
	      module.exports = "<svg viewbox=\"0 0 18 18\"> <path class=ql-fill d=M15.5,15H13.861a3.858,3.858,0,0,0,1.914-2.975,1.8,1.8,0,0,0-1.6-1.751A1.921,1.921,0,0,0,12.021,11.7a0.50013,0.50013,0,1,0,.957.291h0a0.914,0.914,0,0,1,1.053-.725,0.81,0.81,0,0,1,.744.762c0,1.076-1.16971,1.86982-1.93971,2.43082A1.45639,1.45639,0,0,0,12,15.5a0.5,0.5,0,0,0,.5.5h3A0.5,0.5,0,0,0,15.5,15Z /> <path class=ql-fill d=M9.65,5.241a1,1,0,0,0-1.409.108L6,7.964,3.759,5.349A1,1,0,0,0,2.192,6.59178Q2.21541,6.6213,2.241,6.649L4.684,9.5,2.241,12.35A1,1,0,0,0,3.71,13.70722q0.02557-.02768.049-0.05722L6,11.036,8.241,13.65a1,1,0,1,0,1.567-1.24277Q9.78459,12.3777,9.759,12.35L7.316,9.5,9.759,6.651A1,1,0,0,0,9.65,5.241Z /> </svg>";
	
	      /***/
	    },
	    /* 106 */
	    /***/function (module, exports) {
	
	      module.exports = "<svg viewbox=\"0 0 18 18\"> <path class=ql-fill d=M15.5,7H13.861a4.015,4.015,0,0,0,1.914-2.975,1.8,1.8,0,0,0-1.6-1.751A1.922,1.922,0,0,0,12.021,3.7a0.5,0.5,0,1,0,.957.291,0.917,0.917,0,0,1,1.053-.725,0.81,0.81,0,0,1,.744.762c0,1.077-1.164,1.925-1.934,2.486A1.423,1.423,0,0,0,12,7.5a0.5,0.5,0,0,0,.5.5h3A0.5,0.5,0,0,0,15.5,7Z /> <path class=ql-fill d=M9.651,5.241a1,1,0,0,0-1.41.108L6,7.964,3.759,5.349a1,1,0,1,0-1.519,1.3L4.683,9.5,2.241,12.35a1,1,0,1,0,1.519,1.3L6,11.036,8.241,13.65a1,1,0,0,0,1.519-1.3L7.317,9.5,9.759,6.651A1,1,0,0,0,9.651,5.241Z /> </svg>";
	
	      /***/
	    },
	    /* 107 */
	    /***/function (module, exports) {
	
	      module.exports = "<svg viewbox=\"0 0 18 18\"> <path class=ql-stroke d=M5,3V9a4.012,4.012,0,0,0,4,4H9a4.012,4.012,0,0,0,4-4V3></path> <rect class=ql-fill height=1 rx=0.5 ry=0.5 width=12 x=3 y=15></rect> </svg>";
	
	      /***/
	    },
	    /* 108 */
	    /***/function (module, exports) {
	
	      module.exports = "<svg viewbox=\"0 0 18 18\"> <rect class=ql-stroke height=12 width=12 x=3 y=3></rect> <rect class=ql-fill height=12 width=1 x=5 y=3></rect> <rect class=ql-fill height=12 width=1 x=12 y=3></rect> <rect class=ql-fill height=2 width=8 x=5 y=8></rect> <rect class=ql-fill height=1 width=3 x=3 y=5></rect> <rect class=ql-fill height=1 width=3 x=3 y=7></rect> <rect class=ql-fill height=1 width=3 x=3 y=10></rect> <rect class=ql-fill height=1 width=3 x=3 y=12></rect> <rect class=ql-fill height=1 width=3 x=12 y=5></rect> <rect class=ql-fill height=1 width=3 x=12 y=7></rect> <rect class=ql-fill height=1 width=3 x=12 y=10></rect> <rect class=ql-fill height=1 width=3 x=12 y=12></rect> </svg>";
	
	      /***/
	    },,,,,,,,,,,,,,,,,,,,,,,,,,,,,
	    /* 109 */
	    /* 110 */
	    /* 111 */
	    /* 112 */
	    /* 113 */
	    /* 114 */
	    /* 115 */
	    /* 116 */
	    /* 117 */
	    /* 118 */
	    /* 119 */
	    /* 120 */
	    /* 121 */
	    /* 122 */
	    /* 123 */
	    /* 124 */
	    /* 125 */
	    /* 126 */
	    /* 127 */
	    /* 128 */
	    /* 129 */
	    /* 130 */
	    /* 131 */
	    /* 132 */
	    /* 133 */
	    /* 134 */
	    /* 135 */
	    /* 136 */
	    /* 137 */
	    /***/function (module, exports, __webpack_require__) {
	
	      module.exports = __webpack_require__(62);
	
	      /***/
	    }])
	  );
	});
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(290).Buffer, __webpack_require__(205)(module)))

/***/ }),
/* 660 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var React = __webpack_require__(1);
	var ReactDOM = __webpack_require__(36);
	var QuillMixin = __webpack_require__(661);
	var find = __webpack_require__(662);
	var some = __webpack_require__(775);
	var isEqual = __webpack_require__(783);
	var T = React.PropTypes;
	
	var QuillComponent = React.createClass({
	
		displayName: 'Quill',
	
		mixins: [QuillMixin],
	
		propTypes: {
			id: T.string,
			className: T.string,
			theme: T.string,
			style: T.object,
			readOnly: T.bool,
			value: T.string,
			defaultValue: T.string,
			placeholder: T.string,
			bounds: T.oneOfType([T.string, T.element]),
			onKeyPress: T.func,
			onKeyDown: T.func,
			onKeyUp: T.func,
			onChange: T.func,
			onChangeSelection: T.func,
	
			modules: function modules(props) {
				var isNotObject = T.object.apply(this, arguments);
				if (isNotObject) return isNotObject;
	
				if (props.modules && props.modules.toolbar && props.modules.toolbar[0] && props.modules.toolbar[0].type) return new Error('Since v1.0.0, React Quill will not create a custom toolbar for you ' + 'anymore. Create a toolbar explictly, or let Quill create one. ' + 'See: https://github.com/zenoamaro/react-quill#upgrading-to-react-quill-v100');
			},
	
			toolbar: function toolbar(props) {
				if ('toolbar' in props) return new Error('The `toolbar` prop has been deprecated. Use `modules.toolbar` instead. ' + 'See: https://github.com/zenoamaro/react-quill#upgrading-to-react-quill-v100');
			},
	
			formats: function formats(props) {
				var isNotArrayOfString = T.arrayOf(T.string).apply(this, arguments);
	
				if (isNotArrayOfString) return new Error('You cannot specify custom `formats` anymore. Use Parchment instead.  ' + 'See: https://github.com/zenoamaro/react-quill#upgrading-to-react-quill-v100.');
			},
	
			styles: function styles(props) {
				if ('styles' in props) return new Error('The `styles` prop has been deprecated. Use custom stylesheets instead. ' + 'See: https://github.com/zenoamaro/react-quill#upgrading-to-react-quill-v100.');
			},
	
			pollInterval: function pollInterval(props) {
				if ('pollInterval' in props) return new Error('The `pollInterval` property does not have any effect anymore. ' + 'You can safely remove it from your props.' + 'See: https://github.com/zenoamaro/react-quill#upgrading-to-react-quill-v100.');
			},
	
			children: function children(props) {
				// Validate that the editor has only one child element and it is not a <textarea>
				var isNotASingleElement = React.PropTypes.element.apply(this, arguments);
				if (isNotASingleElement) return new Error('The Quill editing area can only be composed of a single React element.');
	
				if (React.Children.count(props.children)) {
					var child = React.Children.only(props.children);
					if (child.type === 'textarea') return new Error('Quill does not support editing on a <textarea>. Use a <div> instead.');
				}
			}
		},
	
		/*
	 Changing one of these props should cause a full re-render.
	 */
		dirtyProps: ['modules', 'formats', 'bounds', 'theme', 'children'],
	
		/*
	 Changing one of these props should cause a regular update.
	 */
		cleanProps: ['id', 'className', 'style', 'placeholder', 'onKeyPress', 'onKeyDown', 'onKeyUp', 'onChange', 'onChangeSelection'],
	
		getDefaultProps: function getDefaultProps() {
			return {
				theme: 'snow',
				modules: {}
			};
		},
	
		/*
	 We consider the component to be controlled if `value` is being sent in props.
	 */
		isControlled: function isControlled() {
			return 'value' in this.props;
		},
	
		getInitialState: function getInitialState() {
			return {
				generation: 0,
				value: this.isControlled() ? this.props.value : this.props.defaultValue
			};
		},
	
		componentWillReceiveProps: function componentWillReceiveProps(nextProps, nextState) {
			var editor = this.editor;
	
			// If the component is unmounted and mounted too quickly
			// an error is thrown in setEditorContents since editor is
			// still undefined. Must check if editor is undefined
			// before performing this call.
			if (!editor) return;
	
			// Update only if we've been passed a new `value`.
			// This leaves components using `defaultValue` alone.
			if ('value' in nextProps) {
				// NOTE: Seeing that Quill is missing a way to prevent
				//       edits, we have to settle for a hybrid between
				//       controlled and uncontrolled mode. We can't prevent
				//       the change, but we'll still override content
				//       whenever `value` differs from current state.
				if (nextProps.value !== this.getEditorContents()) {
					this.setEditorContents(editor, nextProps.value);
				}
			}
	
			// We can update readOnly state in-place.
			if ('readOnly' in nextProps) {
				if (nextProps.readOnly !== this.props.readOnly) {
					this.setEditorReadOnly(editor, nextProps.readOnly);
				}
			}
	
			// If we need to regenerate the component, we can avoid a detailed
			// in-place update step, and just let everything rerender.
			if (this.shouldComponentRegenerate(nextProps, nextState)) {
				return this.regenerate();
			}
		},
	
		componentDidMount: function componentDidMount() {
			this.editor = this.createEditor(this.getEditingArea(), this.getEditorConfig());
			// Restore editor from Quill's native formats in regeneration scenario
			if (this.quillDelta) {
				this.editor.setContents(this.quillDelta);
				this.editor.setSelection(this.quillSelection);
				this.editor.focus();
				this.quillDelta = this.quillSelection = null;
				return;
			}
			if (this.state.value) {
				this.setEditorContents(this.editor, this.state.value);
				return;
			}
		},
	
		componentWillUnmount: function componentWillUnmount() {
			var editor;if (editor = this.getEditor()) {
				this.unhookEditor(editor);
				this.editor = null;
			}
		},
	
		shouldComponentUpdate: function shouldComponentUpdate(nextProps, nextState) {
			var self = this;
	
			// If the component has been regenerated, we already know we should update.
			if (this.state.generation !== nextState.generation) {
				return true;
			}
	
			// Compare props that require React updating the DOM.
			return some(this.cleanProps, function (prop) {
				// Note that `isEqual` compares deeply, making it safe to perform
				// non-immutable updates, at the cost of performance.
				return !isEqual(nextProps[prop], self.props[prop]);
			});
		},
	
		shouldComponentRegenerate: function shouldComponentRegenerate(nextProps, nextState) {
			var self = this;
			// Whenever a `dirtyProp` changes, the editor needs reinstantiation.
			return some(this.dirtyProps, function (prop) {
				// Note that `isEqual` compares deeply, making it safe to perform
				// non-immutable updates, at the cost of performance.
				return !isEqual(nextProps[prop], self.props[prop]);
			});
		},
	
		/*
	 If we could not update settings from the new props in-place, we have to tear
	 down everything and re-render from scratch.
	 */
		componentWillUpdate: function componentWillUpdate(nextProps, nextState) {
			if (this.state.generation !== nextState.generation) {
				this.componentWillUnmount();
			}
		},
	
		componentDidUpdate: function componentDidUpdate(prevProps, prevState) {
			if (this.state.generation !== prevState.generation) {
				this.componentDidMount();
			}
		},
	
		getEditorConfig: function getEditorConfig() {
			return {
				bounds: this.props.bounds,
				formats: this.props.formats,
				modules: this.props.modules,
				placeholder: this.props.placeholder,
				readOnly: this.props.readOnly,
				theme: this.props.theme
			};
		},
	
		getEditor: function getEditor() {
			return this.editor;
		},
	
		getEditingArea: function getEditingArea() {
			return ReactDOM.findDOMNode(this.editingArea);
		},
	
		getEditorContents: function getEditorContents() {
			return this.state.value;
		},
	
		getEditorSelection: function getEditorSelection() {
			return this.state.selection;
		},
	
		/*
	 Regenerating the editor will cause the whole tree, including the container,
	 to be cleaned up and re-rendered from scratch.
	 */
		regenerate: function regenerate() {
			// Cache selection and contents in Quill's native format to be restored later
			this.quillDelta = this.editor.getContents();
			this.quillSelection = this.editor.getSelection();
			this.setState({
				generation: this.state.generation + 1
			});
		},
	
		/*
	 Renders an editor area, unless it has been provided one to clone.
	 */
		renderEditingArea: function renderEditingArea() {
			var self = this;
			var children = this.props.children;
	
			var properties = {
				key: this.state.generation,
				ref: function ref(element) {
					self.editingArea = element;
				}
			};
	
			var customElement = React.Children.count(children) ? React.Children.only(children) : null;
	
			var editingArea = customElement ? React.cloneElement(customElement, properties) : React.DOM.div(properties);
	
			return editingArea;
		},
	
		render: function render() {
			return React.DOM.div({
				id: this.props.id,
				style: this.props.style,
				key: this.state.generation,
				className: ['quill'].concat(this.props.className).join(' '),
				onKeyPress: this.props.onKeyPress,
				onKeyDown: this.props.onKeyDown,
				onKeyUp: this.props.onKeyUp }, this.renderEditingArea());
		},
	
		onEditorChangeText: function onEditorChangeText(value, delta, source, editor) {
			if (value !== this.getEditorContents()) {
				this.setState({ value: value });
				if (this.props.onChange) {
					this.props.onChange(value, delta, source, editor);
				}
			}
		},
	
		onEditorChangeSelection: function onEditorChangeSelection(range, source, editor) {
			var s = this.getEditorSelection() || {};
			var r = range || {};
			if (r.length !== s.length || r.index !== s.index) {
				this.setState({ selection: range });
				if (this.props.onChangeSelection) {
					this.props.onChangeSelection(range, source, editor);
				}
			}
		},
	
		focus: function focus() {
			this.editor.focus();
		},
	
		blur: function blur() {
			this.setEditorSelection(this.editor, null);
		}
	
	});
	
	module.exports = QuillComponent;

/***/ }),
/* 661 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var Quill = __webpack_require__(659);
	
	var QuillMixin = {
	
		/**
	 Creates an editor on the given element. The editor will
	 be passed the configuration, have its events bound,
	 */
		createEditor: function createEditor($el, config) {
			var editor = new Quill($el, config);
			this.hookEditor(editor);
			return editor;
		},
	
		hookEditor: function hookEditor(editor) {
			// Expose the editor on change events via a weaker,
			// unprivileged proxy object that does not allow
			// accidentally modifying editor state.
			var unprivilegedEditor = this.makeUnprivilegedEditor(editor);
	
			this.handleTextChange = function (delta, oldDelta, source) {
				if (this.onEditorChangeText) {
					this.onEditorChangeText(editor.root.innerHTML, delta, source, unprivilegedEditor);
					this.onEditorChangeSelection(editor.getSelection(), source, unprivilegedEditor);
				}
			}.bind(this);
	
			this.handleSelectionChange = function (range, oldRange, source) {
				if (this.onEditorChangeSelection) {
					this.onEditorChangeSelection(range, source, unprivilegedEditor);
				}
			}.bind(this);
	
			editor.on('text-change', this.handleTextChange);
			editor.on('selection-change', this.handleSelectionChange);
		},
	
		unhookEditor: function unhookEditor(editor) {
			editor.off('selection-change');
			editor.off('editor-change');
		},
	
		setEditorReadOnly: function setEditorReadOnly(editor, value) {
			value ? editor.disable() : editor.enable();
		},
	
		/*
	 Replace the contents of the editor, but keep
	 the previous selection hanging around so that
	 the cursor won't move.
	 */
		setEditorContents: function setEditorContents(editor, value) {
			var sel = editor.getSelection();
			editor.clipboard.dangerouslyPasteHTML(value || '');
			if (sel) this.setEditorSelection(editor, sel);
		},
	
		setEditorSelection: function setEditorSelection(editor, range) {
			if (range) {
				// Validate bounds before applying.
				var length = editor.getLength();
				range.index = Math.max(0, Math.min(range.index, length - 1));
				range.length = Math.max(0, Math.min(range.length, length - 1 - range.index));
			}
			editor.setSelection(range);
		},
	
		/*
	 Returns an weaker, unprivileged proxy object that only
	 exposes read-only accessors found on the editor instance,
	 without any state-modificating methods.
	 */
		makeUnprivilegedEditor: function makeUnprivilegedEditor(editor) {
			var e = editor;
			return {
				getLength: function getLength() {
					return e.getLength.apply(e, arguments);
				},
				getText: function getText() {
					return e.getText.apply(e, arguments);
				},
				getContents: function getContents() {
					return e.getContents.apply(e, arguments);
				},
				getSelection: function getSelection() {
					return e.getSelection.apply(e, arguments);
				},
				getBounds: function getBounds() {
					return e.getBounds.apply(e, arguments);
				}
			};
		}
	
	};
	
	module.exports = QuillMixin;

/***/ }),
/* 662 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var createFind = __webpack_require__(663),
	    findIndex = __webpack_require__(770);
	
	/**
	 * Iterates over elements of `collection`, returning the first element
	 * `predicate` returns truthy for. The predicate is invoked with three
	 * arguments: (value, index|key, collection).
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Collection
	 * @param {Array|Object} collection The collection to inspect.
	 * @param {Function} [predicate=_.identity] The function invoked per iteration.
	 * @param {number} [fromIndex=0] The index to search from.
	 * @returns {*} Returns the matched element, else `undefined`.
	 * @example
	 *
	 * var users = [
	 *   { 'user': 'barney',  'age': 36, 'active': true },
	 *   { 'user': 'fred',    'age': 40, 'active': false },
	 *   { 'user': 'pebbles', 'age': 1,  'active': true }
	 * ];
	 *
	 * _.find(users, function(o) { return o.age < 40; });
	 * // => object for 'barney'
	 *
	 * // The `_.matches` iteratee shorthand.
	 * _.find(users, { 'age': 1, 'active': true });
	 * // => object for 'pebbles'
	 *
	 * // The `_.matchesProperty` iteratee shorthand.
	 * _.find(users, ['active', false]);
	 * // => object for 'fred'
	 *
	 * // The `_.property` iteratee shorthand.
	 * _.find(users, 'active');
	 * // => object for 'barney'
	 */
	var find = createFind(findIndex);
	
	module.exports = find;

/***/ }),
/* 663 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var baseIteratee = __webpack_require__(664),
	    isArrayLike = __webpack_require__(741),
	    keys = __webpack_require__(725);
	
	/**
	 * Creates a `_.find` or `_.findLast` function.
	 *
	 * @private
	 * @param {Function} findIndexFunc The function to find the collection index.
	 * @returns {Function} Returns the new find function.
	 */
	function createFind(findIndexFunc) {
	  return function (collection, predicate, fromIndex) {
	    var iterable = Object(collection);
	    if (!isArrayLike(collection)) {
	      var iteratee = baseIteratee(predicate, 3);
	      collection = keys(collection);
	      predicate = function predicate(key) {
	        return iteratee(iterable[key], key, iterable);
	      };
	    }
	    var index = findIndexFunc(collection, predicate, fromIndex);
	    return index > -1 ? iterable[iteratee ? collection[index] : index] : undefined;
	  };
	}
	
	module.exports = createFind;

/***/ }),
/* 664 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
	
	var baseMatches = __webpack_require__(665),
	    baseMatchesProperty = __webpack_require__(750),
	    identity = __webpack_require__(766),
	    isArray = __webpack_require__(721),
	    property = __webpack_require__(767);
	
	/**
	 * The base implementation of `_.iteratee`.
	 *
	 * @private
	 * @param {*} [value=_.identity] The value to convert to an iteratee.
	 * @returns {Function} Returns the iteratee.
	 */
	function baseIteratee(value) {
	  // Don't store the `typeof` result in a variable to avoid a JIT bug in Safari 9.
	  // See https://bugs.webkit.org/show_bug.cgi?id=156034 for more details.
	  if (typeof value == 'function') {
	    return value;
	  }
	  if (value == null) {
	    return identity;
	  }
	  if ((typeof value === 'undefined' ? 'undefined' : _typeof(value)) == 'object') {
	    return isArray(value) ? baseMatchesProperty(value[0], value[1]) : baseMatches(value);
	  }
	  return property(value);
	}
	
	module.exports = baseIteratee;

/***/ }),
/* 665 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var baseIsMatch = __webpack_require__(666),
	    getMatchData = __webpack_require__(747),
	    matchesStrictComparable = __webpack_require__(749);
	
	/**
	 * The base implementation of `_.matches` which doesn't clone `source`.
	 *
	 * @private
	 * @param {Object} source The object of property values to match.
	 * @returns {Function} Returns the new spec function.
	 */
	function baseMatches(source) {
	  var matchData = getMatchData(source);
	  if (matchData.length == 1 && matchData[0][2]) {
	    return matchesStrictComparable(matchData[0][0], matchData[0][1]);
	  }
	  return function (object) {
	    return object === source || baseIsMatch(object, source, matchData);
	  };
	}
	
	module.exports = baseMatches;

/***/ }),
/* 666 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var Stack = __webpack_require__(667),
	    baseIsEqual = __webpack_require__(705);
	
	/** Used to compose bitmasks for value comparisons. */
	var COMPARE_PARTIAL_FLAG = 1,
	    COMPARE_UNORDERED_FLAG = 2;
	
	/**
	 * The base implementation of `_.isMatch` without support for iteratee shorthands.
	 *
	 * @private
	 * @param {Object} object The object to inspect.
	 * @param {Object} source The object of property values to match.
	 * @param {Array} matchData The property names, values, and compare flags to match.
	 * @param {Function} [customizer] The function to customize comparisons.
	 * @returns {boolean} Returns `true` if `object` is a match, else `false`.
	 */
	function baseIsMatch(object, source, matchData, customizer) {
	  var index = matchData.length,
	      length = index,
	      noCustomizer = !customizer;
	
	  if (object == null) {
	    return !length;
	  }
	  object = Object(object);
	  while (index--) {
	    var data = matchData[index];
	    if (noCustomizer && data[2] ? data[1] !== object[data[0]] : !(data[0] in object)) {
	      return false;
	    }
	  }
	  while (++index < length) {
	    data = matchData[index];
	    var key = data[0],
	        objValue = object[key],
	        srcValue = data[1];
	
	    if (noCustomizer && data[2]) {
	      if (objValue === undefined && !(key in object)) {
	        return false;
	      }
	    } else {
	      var stack = new Stack();
	      if (customizer) {
	        var result = customizer(objValue, srcValue, key, object, source, stack);
	      }
	      if (!(result === undefined ? baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG, customizer, stack) : result)) {
	        return false;
	      }
	    }
	  }
	  return true;
	}
	
	module.exports = baseIsMatch;

/***/ }),
/* 667 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var ListCache = __webpack_require__(668),
	    stackClear = __webpack_require__(676),
	    stackDelete = __webpack_require__(677),
	    stackGet = __webpack_require__(678),
	    stackHas = __webpack_require__(679),
	    stackSet = __webpack_require__(680);
	
	/**
	 * Creates a stack cache object to store key-value pairs.
	 *
	 * @private
	 * @constructor
	 * @param {Array} [entries] The key-value pairs to cache.
	 */
	function Stack(entries) {
	  var data = this.__data__ = new ListCache(entries);
	  this.size = data.size;
	}
	
	// Add methods to `Stack`.
	Stack.prototype.clear = stackClear;
	Stack.prototype['delete'] = stackDelete;
	Stack.prototype.get = stackGet;
	Stack.prototype.has = stackHas;
	Stack.prototype.set = stackSet;
	
	module.exports = Stack;

/***/ }),
/* 668 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var listCacheClear = __webpack_require__(669),
	    listCacheDelete = __webpack_require__(670),
	    listCacheGet = __webpack_require__(673),
	    listCacheHas = __webpack_require__(674),
	    listCacheSet = __webpack_require__(675);
	
	/**
	 * Creates an list cache object.
	 *
	 * @private
	 * @constructor
	 * @param {Array} [entries] The key-value pairs to cache.
	 */
	function ListCache(entries) {
	    var index = -1,
	        length = entries == null ? 0 : entries.length;
	
	    this.clear();
	    while (++index < length) {
	        var entry = entries[index];
	        this.set(entry[0], entry[1]);
	    }
	}
	
	// Add methods to `ListCache`.
	ListCache.prototype.clear = listCacheClear;
	ListCache.prototype['delete'] = listCacheDelete;
	ListCache.prototype.get = listCacheGet;
	ListCache.prototype.has = listCacheHas;
	ListCache.prototype.set = listCacheSet;
	
	module.exports = ListCache;

/***/ }),
/* 669 */
/***/ (function(module, exports) {

	"use strict";
	
	/**
	 * Removes all key-value entries from the list cache.
	 *
	 * @private
	 * @name clear
	 * @memberOf ListCache
	 */
	function listCacheClear() {
	  this.__data__ = [];
	  this.size = 0;
	}
	
	module.exports = listCacheClear;

/***/ }),
/* 670 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var assocIndexOf = __webpack_require__(671);
	
	/** Used for built-in method references. */
	var arrayProto = Array.prototype;
	
	/** Built-in value references. */
	var splice = arrayProto.splice;
	
	/**
	 * Removes `key` and its value from the list cache.
	 *
	 * @private
	 * @name delete
	 * @memberOf ListCache
	 * @param {string} key The key of the value to remove.
	 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
	 */
	function listCacheDelete(key) {
	  var data = this.__data__,
	      index = assocIndexOf(data, key);
	
	  if (index < 0) {
	    return false;
	  }
	  var lastIndex = data.length - 1;
	  if (index == lastIndex) {
	    data.pop();
	  } else {
	    splice.call(data, index, 1);
	  }
	  --this.size;
	  return true;
	}
	
	module.exports = listCacheDelete;

/***/ }),
/* 671 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var eq = __webpack_require__(672);
	
	/**
	 * Gets the index at which the `key` is found in `array` of key-value pairs.
	 *
	 * @private
	 * @param {Array} array The array to inspect.
	 * @param {*} key The key to search for.
	 * @returns {number} Returns the index of the matched value, else `-1`.
	 */
	function assocIndexOf(array, key) {
	  var length = array.length;
	  while (length--) {
	    if (eq(array[length][0], key)) {
	      return length;
	    }
	  }
	  return -1;
	}
	
	module.exports = assocIndexOf;

/***/ }),
/* 672 */
/***/ (function(module, exports) {

	"use strict";
	
	/**
	 * Performs a
	 * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
	 * comparison between two values to determine if they are equivalent.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Lang
	 * @param {*} value The value to compare.
	 * @param {*} other The other value to compare.
	 * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
	 * @example
	 *
	 * var object = { 'a': 1 };
	 * var other = { 'a': 1 };
	 *
	 * _.eq(object, object);
	 * // => true
	 *
	 * _.eq(object, other);
	 * // => false
	 *
	 * _.eq('a', 'a');
	 * // => true
	 *
	 * _.eq('a', Object('a'));
	 * // => false
	 *
	 * _.eq(NaN, NaN);
	 * // => true
	 */
	function eq(value, other) {
	  return value === other || value !== value && other !== other;
	}
	
	module.exports = eq;

/***/ }),
/* 673 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var assocIndexOf = __webpack_require__(671);
	
	/**
	 * Gets the list cache value for `key`.
	 *
	 * @private
	 * @name get
	 * @memberOf ListCache
	 * @param {string} key The key of the value to get.
	 * @returns {*} Returns the entry value.
	 */
	function listCacheGet(key) {
	  var data = this.__data__,
	      index = assocIndexOf(data, key);
	
	  return index < 0 ? undefined : data[index][1];
	}
	
	module.exports = listCacheGet;

/***/ }),
/* 674 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var assocIndexOf = __webpack_require__(671);
	
	/**
	 * Checks if a list cache value for `key` exists.
	 *
	 * @private
	 * @name has
	 * @memberOf ListCache
	 * @param {string} key The key of the entry to check.
	 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
	 */
	function listCacheHas(key) {
	  return assocIndexOf(this.__data__, key) > -1;
	}
	
	module.exports = listCacheHas;

/***/ }),
/* 675 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var assocIndexOf = __webpack_require__(671);
	
	/**
	 * Sets the list cache `key` to `value`.
	 *
	 * @private
	 * @name set
	 * @memberOf ListCache
	 * @param {string} key The key of the value to set.
	 * @param {*} value The value to set.
	 * @returns {Object} Returns the list cache instance.
	 */
	function listCacheSet(key, value) {
	  var data = this.__data__,
	      index = assocIndexOf(data, key);
	
	  if (index < 0) {
	    ++this.size;
	    data.push([key, value]);
	  } else {
	    data[index][1] = value;
	  }
	  return this;
	}
	
	module.exports = listCacheSet;

/***/ }),
/* 676 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var ListCache = __webpack_require__(668);
	
	/**
	 * Removes all key-value entries from the stack.
	 *
	 * @private
	 * @name clear
	 * @memberOf Stack
	 */
	function stackClear() {
	  this.__data__ = new ListCache();
	  this.size = 0;
	}
	
	module.exports = stackClear;

/***/ }),
/* 677 */
/***/ (function(module, exports) {

	'use strict';
	
	/**
	 * Removes `key` and its value from the stack.
	 *
	 * @private
	 * @name delete
	 * @memberOf Stack
	 * @param {string} key The key of the value to remove.
	 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
	 */
	function stackDelete(key) {
	  var data = this.__data__,
	      result = data['delete'](key);
	
	  this.size = data.size;
	  return result;
	}
	
	module.exports = stackDelete;

/***/ }),
/* 678 */
/***/ (function(module, exports) {

	"use strict";
	
	/**
	 * Gets the stack value for `key`.
	 *
	 * @private
	 * @name get
	 * @memberOf Stack
	 * @param {string} key The key of the value to get.
	 * @returns {*} Returns the entry value.
	 */
	function stackGet(key) {
	  return this.__data__.get(key);
	}
	
	module.exports = stackGet;

/***/ }),
/* 679 */
/***/ (function(module, exports) {

	"use strict";
	
	/**
	 * Checks if a stack value for `key` exists.
	 *
	 * @private
	 * @name has
	 * @memberOf Stack
	 * @param {string} key The key of the entry to check.
	 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
	 */
	function stackHas(key) {
	  return this.__data__.has(key);
	}
	
	module.exports = stackHas;

/***/ }),
/* 680 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var ListCache = __webpack_require__(668),
	    Map = __webpack_require__(681),
	    MapCache = __webpack_require__(690);
	
	/** Used as the size to enable large array optimizations. */
	var LARGE_ARRAY_SIZE = 200;
	
	/**
	 * Sets the stack `key` to `value`.
	 *
	 * @private
	 * @name set
	 * @memberOf Stack
	 * @param {string} key The key of the value to set.
	 * @param {*} value The value to set.
	 * @returns {Object} Returns the stack cache instance.
	 */
	function stackSet(key, value) {
	  var data = this.__data__;
	  if (data instanceof ListCache) {
	    var pairs = data.__data__;
	    if (!Map || pairs.length < LARGE_ARRAY_SIZE - 1) {
	      pairs.push([key, value]);
	      this.size = ++data.size;
	      return this;
	    }
	    data = this.__data__ = new MapCache(pairs);
	  }
	  data.set(key, value);
	  this.size = data.size;
	  return this;
	}
	
	module.exports = stackSet;

/***/ }),
/* 681 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var getNative = __webpack_require__(682),
	    root = __webpack_require__(196);
	
	/* Built-in method references that are verified to be native. */
	var Map = getNative(root, 'Map');
	
	module.exports = Map;

/***/ }),
/* 682 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var baseIsNative = __webpack_require__(683),
	    getValue = __webpack_require__(689);
	
	/**
	 * Gets the native function at `key` of `object`.
	 *
	 * @private
	 * @param {Object} object The object to query.
	 * @param {string} key The key of the method to get.
	 * @returns {*} Returns the function if it's native, else `undefined`.
	 */
	function getNative(object, key) {
	  var value = getValue(object, key);
	  return baseIsNative(value) ? value : undefined;
	}
	
	module.exports = getNative;

/***/ }),
/* 683 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var isFunction = __webpack_require__(684),
	    isMasked = __webpack_require__(686),
	    isObject = __webpack_require__(685),
	    toSource = __webpack_require__(688);
	
	/**
	 * Used to match `RegExp`
	 * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).
	 */
	var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;
	
	/** Used to detect host constructors (Safari). */
	var reIsHostCtor = /^\[object .+?Constructor\]$/;
	
	/** Used for built-in method references. */
	var funcProto = Function.prototype,
	    objectProto = Object.prototype;
	
	/** Used to resolve the decompiled source of functions. */
	var funcToString = funcProto.toString;
	
	/** Used to check objects for own properties. */
	var hasOwnProperty = objectProto.hasOwnProperty;
	
	/** Used to detect if a method is native. */
	var reIsNative = RegExp('^' + funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\$&').replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$');
	
	/**
	 * The base implementation of `_.isNative` without bad shim checks.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a native function,
	 *  else `false`.
	 */
	function baseIsNative(value) {
	  if (!isObject(value) || isMasked(value)) {
	    return false;
	  }
	  var pattern = isFunction(value) ? reIsNative : reIsHostCtor;
	  return pattern.test(toSource(value));
	}
	
	module.exports = baseIsNative;

/***/ }),
/* 684 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var baseGetTag = __webpack_require__(194),
	    isObject = __webpack_require__(685);
	
	/** `Object#toString` result references. */
	var asyncTag = '[object AsyncFunction]',
	    funcTag = '[object Function]',
	    genTag = '[object GeneratorFunction]',
	    proxyTag = '[object Proxy]';
	
	/**
	 * Checks if `value` is classified as a `Function` object.
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a function, else `false`.
	 * @example
	 *
	 * _.isFunction(_);
	 * // => true
	 *
	 * _.isFunction(/abc/);
	 * // => false
	 */
	function isFunction(value) {
	    if (!isObject(value)) {
	        return false;
	    }
	    // The use of `Object#toString` avoids issues with the `typeof` operator
	    // in Safari 9 which returns 'object' for typed arrays and other constructors.
	    var tag = baseGetTag(value);
	    return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
	}
	
	module.exports = isFunction;

/***/ }),
/* 685 */
/***/ (function(module, exports) {

	'use strict';
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
	
	/**
	 * Checks if `value` is the
	 * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
	 * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is an object, else `false`.
	 * @example
	 *
	 * _.isObject({});
	 * // => true
	 *
	 * _.isObject([1, 2, 3]);
	 * // => true
	 *
	 * _.isObject(_.noop);
	 * // => true
	 *
	 * _.isObject(null);
	 * // => false
	 */
	function isObject(value) {
	  var type = typeof value === 'undefined' ? 'undefined' : _typeof(value);
	  return value != null && (type == 'object' || type == 'function');
	}
	
	module.exports = isObject;

/***/ }),
/* 686 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var coreJsData = __webpack_require__(687);
	
	/** Used to detect methods masquerading as native. */
	var maskSrcKey = function () {
	  var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');
	  return uid ? 'Symbol(src)_1.' + uid : '';
	}();
	
	/**
	 * Checks if `func` has its source masked.
	 *
	 * @private
	 * @param {Function} func The function to check.
	 * @returns {boolean} Returns `true` if `func` is masked, else `false`.
	 */
	function isMasked(func) {
	  return !!maskSrcKey && maskSrcKey in func;
	}
	
	module.exports = isMasked;

/***/ }),
/* 687 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var root = __webpack_require__(196);
	
	/** Used to detect overreaching core-js shims. */
	var coreJsData = root['__core-js_shared__'];
	
	module.exports = coreJsData;

/***/ }),
/* 688 */
/***/ (function(module, exports) {

	'use strict';
	
	/** Used for built-in method references. */
	var funcProto = Function.prototype;
	
	/** Used to resolve the decompiled source of functions. */
	var funcToString = funcProto.toString;
	
	/**
	 * Converts `func` to its source code.
	 *
	 * @private
	 * @param {Function} func The function to convert.
	 * @returns {string} Returns the source code.
	 */
	function toSource(func) {
	  if (func != null) {
	    try {
	      return funcToString.call(func);
	    } catch (e) {}
	    try {
	      return func + '';
	    } catch (e) {}
	  }
	  return '';
	}
	
	module.exports = toSource;

/***/ }),
/* 689 */
/***/ (function(module, exports) {

	"use strict";
	
	/**
	 * Gets the value at `key` of `object`.
	 *
	 * @private
	 * @param {Object} [object] The object to query.
	 * @param {string} key The key of the property to get.
	 * @returns {*} Returns the property value.
	 */
	function getValue(object, key) {
	  return object == null ? undefined : object[key];
	}
	
	module.exports = getValue;

/***/ }),
/* 690 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var mapCacheClear = __webpack_require__(691),
	    mapCacheDelete = __webpack_require__(699),
	    mapCacheGet = __webpack_require__(702),
	    mapCacheHas = __webpack_require__(703),
	    mapCacheSet = __webpack_require__(704);
	
	/**
	 * Creates a map cache object to store key-value pairs.
	 *
	 * @private
	 * @constructor
	 * @param {Array} [entries] The key-value pairs to cache.
	 */
	function MapCache(entries) {
	    var index = -1,
	        length = entries == null ? 0 : entries.length;
	
	    this.clear();
	    while (++index < length) {
	        var entry = entries[index];
	        this.set(entry[0], entry[1]);
	    }
	}
	
	// Add methods to `MapCache`.
	MapCache.prototype.clear = mapCacheClear;
	MapCache.prototype['delete'] = mapCacheDelete;
	MapCache.prototype.get = mapCacheGet;
	MapCache.prototype.has = mapCacheHas;
	MapCache.prototype.set = mapCacheSet;
	
	module.exports = MapCache;

/***/ }),
/* 691 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var Hash = __webpack_require__(692),
	    ListCache = __webpack_require__(668),
	    Map = __webpack_require__(681);
	
	/**
	 * Removes all key-value entries from the map.
	 *
	 * @private
	 * @name clear
	 * @memberOf MapCache
	 */
	function mapCacheClear() {
	  this.size = 0;
	  this.__data__ = {
	    'hash': new Hash(),
	    'map': new (Map || ListCache)(),
	    'string': new Hash()
	  };
	}
	
	module.exports = mapCacheClear;

/***/ }),
/* 692 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var hashClear = __webpack_require__(693),
	    hashDelete = __webpack_require__(695),
	    hashGet = __webpack_require__(696),
	    hashHas = __webpack_require__(697),
	    hashSet = __webpack_require__(698);
	
	/**
	 * Creates a hash object.
	 *
	 * @private
	 * @constructor
	 * @param {Array} [entries] The key-value pairs to cache.
	 */
	function Hash(entries) {
	    var index = -1,
	        length = entries == null ? 0 : entries.length;
	
	    this.clear();
	    while (++index < length) {
	        var entry = entries[index];
	        this.set(entry[0], entry[1]);
	    }
	}
	
	// Add methods to `Hash`.
	Hash.prototype.clear = hashClear;
	Hash.prototype['delete'] = hashDelete;
	Hash.prototype.get = hashGet;
	Hash.prototype.has = hashHas;
	Hash.prototype.set = hashSet;
	
	module.exports = Hash;

/***/ }),
/* 693 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var nativeCreate = __webpack_require__(694);
	
	/**
	 * Removes all key-value entries from the hash.
	 *
	 * @private
	 * @name clear
	 * @memberOf Hash
	 */
	function hashClear() {
	  this.__data__ = nativeCreate ? nativeCreate(null) : {};
	  this.size = 0;
	}
	
	module.exports = hashClear;

/***/ }),
/* 694 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var getNative = __webpack_require__(682);
	
	/* Built-in method references that are verified to be native. */
	var nativeCreate = getNative(Object, 'create');
	
	module.exports = nativeCreate;

/***/ }),
/* 695 */
/***/ (function(module, exports) {

	"use strict";
	
	/**
	 * Removes `key` and its value from the hash.
	 *
	 * @private
	 * @name delete
	 * @memberOf Hash
	 * @param {Object} hash The hash to modify.
	 * @param {string} key The key of the value to remove.
	 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
	 */
	function hashDelete(key) {
	  var result = this.has(key) && delete this.__data__[key];
	  this.size -= result ? 1 : 0;
	  return result;
	}
	
	module.exports = hashDelete;

/***/ }),
/* 696 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var nativeCreate = __webpack_require__(694);
	
	/** Used to stand-in for `undefined` hash values. */
	var HASH_UNDEFINED = '__lodash_hash_undefined__';
	
	/** Used for built-in method references. */
	var objectProto = Object.prototype;
	
	/** Used to check objects for own properties. */
	var hasOwnProperty = objectProto.hasOwnProperty;
	
	/**
	 * Gets the hash value for `key`.
	 *
	 * @private
	 * @name get
	 * @memberOf Hash
	 * @param {string} key The key of the value to get.
	 * @returns {*} Returns the entry value.
	 */
	function hashGet(key) {
	  var data = this.__data__;
	  if (nativeCreate) {
	    var result = data[key];
	    return result === HASH_UNDEFINED ? undefined : result;
	  }
	  return hasOwnProperty.call(data, key) ? data[key] : undefined;
	}
	
	module.exports = hashGet;

/***/ }),
/* 697 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var nativeCreate = __webpack_require__(694);
	
	/** Used for built-in method references. */
	var objectProto = Object.prototype;
	
	/** Used to check objects for own properties. */
	var hasOwnProperty = objectProto.hasOwnProperty;
	
	/**
	 * Checks if a hash value for `key` exists.
	 *
	 * @private
	 * @name has
	 * @memberOf Hash
	 * @param {string} key The key of the entry to check.
	 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
	 */
	function hashHas(key) {
	  var data = this.__data__;
	  return nativeCreate ? data[key] !== undefined : hasOwnProperty.call(data, key);
	}
	
	module.exports = hashHas;

/***/ }),
/* 698 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var nativeCreate = __webpack_require__(694);
	
	/** Used to stand-in for `undefined` hash values. */
	var HASH_UNDEFINED = '__lodash_hash_undefined__';
	
	/**
	 * Sets the hash `key` to `value`.
	 *
	 * @private
	 * @name set
	 * @memberOf Hash
	 * @param {string} key The key of the value to set.
	 * @param {*} value The value to set.
	 * @returns {Object} Returns the hash instance.
	 */
	function hashSet(key, value) {
	  var data = this.__data__;
	  this.size += this.has(key) ? 0 : 1;
	  data[key] = nativeCreate && value === undefined ? HASH_UNDEFINED : value;
	  return this;
	}
	
	module.exports = hashSet;

/***/ }),
/* 699 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var getMapData = __webpack_require__(700);
	
	/**
	 * Removes `key` and its value from the map.
	 *
	 * @private
	 * @name delete
	 * @memberOf MapCache
	 * @param {string} key The key of the value to remove.
	 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
	 */
	function mapCacheDelete(key) {
	  var result = getMapData(this, key)['delete'](key);
	  this.size -= result ? 1 : 0;
	  return result;
	}
	
	module.exports = mapCacheDelete;

/***/ }),
/* 700 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var isKeyable = __webpack_require__(701);
	
	/**
	 * Gets the data for `map`.
	 *
	 * @private
	 * @param {Object} map The map to query.
	 * @param {string} key The reference key.
	 * @returns {*} Returns the map data.
	 */
	function getMapData(map, key) {
	  var data = map.__data__;
	  return isKeyable(key) ? data[typeof key == 'string' ? 'string' : 'hash'] : data.map;
	}
	
	module.exports = getMapData;

/***/ }),
/* 701 */
/***/ (function(module, exports) {

	'use strict';
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
	
	/**
	 * Checks if `value` is suitable for use as unique object key.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is suitable, else `false`.
	 */
	function isKeyable(value) {
	  var type = typeof value === 'undefined' ? 'undefined' : _typeof(value);
	  return type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean' ? value !== '__proto__' : value === null;
	}
	
	module.exports = isKeyable;

/***/ }),
/* 702 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var getMapData = __webpack_require__(700);
	
	/**
	 * Gets the map value for `key`.
	 *
	 * @private
	 * @name get
	 * @memberOf MapCache
	 * @param {string} key The key of the value to get.
	 * @returns {*} Returns the entry value.
	 */
	function mapCacheGet(key) {
	  return getMapData(this, key).get(key);
	}
	
	module.exports = mapCacheGet;

/***/ }),
/* 703 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var getMapData = __webpack_require__(700);
	
	/**
	 * Checks if a map value for `key` exists.
	 *
	 * @private
	 * @name has
	 * @memberOf MapCache
	 * @param {string} key The key of the entry to check.
	 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
	 */
	function mapCacheHas(key) {
	  return getMapData(this, key).has(key);
	}
	
	module.exports = mapCacheHas;

/***/ }),
/* 704 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var getMapData = __webpack_require__(700);
	
	/**
	 * Sets the map `key` to `value`.
	 *
	 * @private
	 * @name set
	 * @memberOf MapCache
	 * @param {string} key The key of the value to set.
	 * @param {*} value The value to set.
	 * @returns {Object} Returns the map cache instance.
	 */
	function mapCacheSet(key, value) {
	  var data = getMapData(this, key),
	      size = data.size;
	
	  data.set(key, value);
	  this.size += data.size == size ? 0 : 1;
	  return this;
	}
	
	module.exports = mapCacheSet;

/***/ }),
/* 705 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var baseIsEqualDeep = __webpack_require__(706),
	    isObjectLike = __webpack_require__(202);
	
	/**
	 * The base implementation of `_.isEqual` which supports partial comparisons
	 * and tracks traversed objects.
	 *
	 * @private
	 * @param {*} value The value to compare.
	 * @param {*} other The other value to compare.
	 * @param {boolean} bitmask The bitmask flags.
	 *  1 - Unordered comparison
	 *  2 - Partial comparison
	 * @param {Function} [customizer] The function to customize comparisons.
	 * @param {Object} [stack] Tracks traversed `value` and `other` objects.
	 * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
	 */
	function baseIsEqual(value, other, bitmask, customizer, stack) {
	  if (value === other) {
	    return true;
	  }
	  if (value == null || other == null || !isObjectLike(value) && !isObjectLike(other)) {
	    return value !== value && other !== other;
	  }
	  return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);
	}
	
	module.exports = baseIsEqual;

/***/ }),
/* 706 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var Stack = __webpack_require__(667),
	    equalArrays = __webpack_require__(707),
	    equalByTag = __webpack_require__(713),
	    equalObjects = __webpack_require__(717),
	    getTag = __webpack_require__(742),
	    isArray = __webpack_require__(721),
	    isBuffer = __webpack_require__(730),
	    isTypedArray = __webpack_require__(733);
	
	/** Used to compose bitmasks for value comparisons. */
	var COMPARE_PARTIAL_FLAG = 1;
	
	/** `Object#toString` result references. */
	var argsTag = '[object Arguments]',
	    arrayTag = '[object Array]',
	    objectTag = '[object Object]';
	
	/** Used for built-in method references. */
	var objectProto = Object.prototype;
	
	/** Used to check objects for own properties. */
	var hasOwnProperty = objectProto.hasOwnProperty;
	
	/**
	 * A specialized version of `baseIsEqual` for arrays and objects which performs
	 * deep comparisons and tracks traversed objects enabling objects with circular
	 * references to be compared.
	 *
	 * @private
	 * @param {Object} object The object to compare.
	 * @param {Object} other The other object to compare.
	 * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
	 * @param {Function} customizer The function to customize comparisons.
	 * @param {Function} equalFunc The function to determine equivalents of values.
	 * @param {Object} [stack] Tracks traversed `object` and `other` objects.
	 * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
	 */
	function baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {
	  var objIsArr = isArray(object),
	      othIsArr = isArray(other),
	      objTag = objIsArr ? arrayTag : getTag(object),
	      othTag = othIsArr ? arrayTag : getTag(other);
	
	  objTag = objTag == argsTag ? objectTag : objTag;
	  othTag = othTag == argsTag ? objectTag : othTag;
	
	  var objIsObj = objTag == objectTag,
	      othIsObj = othTag == objectTag,
	      isSameTag = objTag == othTag;
	
	  if (isSameTag && isBuffer(object)) {
	    if (!isBuffer(other)) {
	      return false;
	    }
	    objIsArr = true;
	    objIsObj = false;
	  }
	  if (isSameTag && !objIsObj) {
	    stack || (stack = new Stack());
	    return objIsArr || isTypedArray(object) ? equalArrays(object, other, bitmask, customizer, equalFunc, stack) : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);
	  }
	  if (!(bitmask & COMPARE_PARTIAL_FLAG)) {
	    var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),
	        othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');
	
	    if (objIsWrapped || othIsWrapped) {
	      var objUnwrapped = objIsWrapped ? object.value() : object,
	          othUnwrapped = othIsWrapped ? other.value() : other;
	
	      stack || (stack = new Stack());
	      return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);
	    }
	  }
	  if (!isSameTag) {
	    return false;
	  }
	  stack || (stack = new Stack());
	  return equalObjects(object, other, bitmask, customizer, equalFunc, stack);
	}
	
	module.exports = baseIsEqualDeep;

/***/ }),
/* 707 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var SetCache = __webpack_require__(708),
	    arraySome = __webpack_require__(711),
	    cacheHas = __webpack_require__(712);
	
	/** Used to compose bitmasks for value comparisons. */
	var COMPARE_PARTIAL_FLAG = 1,
	    COMPARE_UNORDERED_FLAG = 2;
	
	/**
	 * A specialized version of `baseIsEqualDeep` for arrays with support for
	 * partial deep comparisons.
	 *
	 * @private
	 * @param {Array} array The array to compare.
	 * @param {Array} other The other array to compare.
	 * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
	 * @param {Function} customizer The function to customize comparisons.
	 * @param {Function} equalFunc The function to determine equivalents of values.
	 * @param {Object} stack Tracks traversed `array` and `other` objects.
	 * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.
	 */
	function equalArrays(array, other, bitmask, customizer, equalFunc, stack) {
	  var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
	      arrLength = array.length,
	      othLength = other.length;
	
	  if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
	    return false;
	  }
	  // Assume cyclic values are equal.
	  var stacked = stack.get(array);
	  if (stacked && stack.get(other)) {
	    return stacked == other;
	  }
	  var index = -1,
	      result = true,
	      seen = bitmask & COMPARE_UNORDERED_FLAG ? new SetCache() : undefined;
	
	  stack.set(array, other);
	  stack.set(other, array);
	
	  // Ignore non-index properties.
	  while (++index < arrLength) {
	    var arrValue = array[index],
	        othValue = other[index];
	
	    if (customizer) {
	      var compared = isPartial ? customizer(othValue, arrValue, index, other, array, stack) : customizer(arrValue, othValue, index, array, other, stack);
	    }
	    if (compared !== undefined) {
	      if (compared) {
	        continue;
	      }
	      result = false;
	      break;
	    }
	    // Recursively compare arrays (susceptible to call stack limits).
	    if (seen) {
	      if (!arraySome(other, function (othValue, othIndex) {
	        if (!cacheHas(seen, othIndex) && (arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
	          return seen.push(othIndex);
	        }
	      })) {
	        result = false;
	        break;
	      }
	    } else if (!(arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
	      result = false;
	      break;
	    }
	  }
	  stack['delete'](array);
	  stack['delete'](other);
	  return result;
	}
	
	module.exports = equalArrays;

/***/ }),
/* 708 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var MapCache = __webpack_require__(690),
	    setCacheAdd = __webpack_require__(709),
	    setCacheHas = __webpack_require__(710);
	
	/**
	 *
	 * Creates an array cache object to store unique values.
	 *
	 * @private
	 * @constructor
	 * @param {Array} [values] The values to cache.
	 */
	function SetCache(values) {
	    var index = -1,
	        length = values == null ? 0 : values.length;
	
	    this.__data__ = new MapCache();
	    while (++index < length) {
	        this.add(values[index]);
	    }
	}
	
	// Add methods to `SetCache`.
	SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;
	SetCache.prototype.has = setCacheHas;
	
	module.exports = SetCache;

/***/ }),
/* 709 */
/***/ (function(module, exports) {

	'use strict';
	
	/** Used to stand-in for `undefined` hash values. */
	var HASH_UNDEFINED = '__lodash_hash_undefined__';
	
	/**
	 * Adds `value` to the array cache.
	 *
	 * @private
	 * @name add
	 * @memberOf SetCache
	 * @alias push
	 * @param {*} value The value to cache.
	 * @returns {Object} Returns the cache instance.
	 */
	function setCacheAdd(value) {
	  this.__data__.set(value, HASH_UNDEFINED);
	  return this;
	}
	
	module.exports = setCacheAdd;

/***/ }),
/* 710 */
/***/ (function(module, exports) {

	"use strict";
	
	/**
	 * Checks if `value` is in the array cache.
	 *
	 * @private
	 * @name has
	 * @memberOf SetCache
	 * @param {*} value The value to search for.
	 * @returns {number} Returns `true` if `value` is found, else `false`.
	 */
	function setCacheHas(value) {
	  return this.__data__.has(value);
	}
	
	module.exports = setCacheHas;

/***/ }),
/* 711 */
/***/ (function(module, exports) {

	"use strict";
	
	/**
	 * A specialized version of `_.some` for arrays without support for iteratee
	 * shorthands.
	 *
	 * @private
	 * @param {Array} [array] The array to iterate over.
	 * @param {Function} predicate The function invoked per iteration.
	 * @returns {boolean} Returns `true` if any element passes the predicate check,
	 *  else `false`.
	 */
	function arraySome(array, predicate) {
	  var index = -1,
	      length = array == null ? 0 : array.length;
	
	  while (++index < length) {
	    if (predicate(array[index], index, array)) {
	      return true;
	    }
	  }
	  return false;
	}
	
	module.exports = arraySome;

/***/ }),
/* 712 */
/***/ (function(module, exports) {

	"use strict";
	
	/**
	 * Checks if a `cache` value for `key` exists.
	 *
	 * @private
	 * @param {Object} cache The cache to query.
	 * @param {string} key The key of the entry to check.
	 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
	 */
	function cacheHas(cache, key) {
	  return cache.has(key);
	}
	
	module.exports = cacheHas;

/***/ }),
/* 713 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var _Symbol = __webpack_require__(195),
	    Uint8Array = __webpack_require__(714),
	    eq = __webpack_require__(672),
	    equalArrays = __webpack_require__(707),
	    mapToArray = __webpack_require__(715),
	    setToArray = __webpack_require__(716);
	
	/** Used to compose bitmasks for value comparisons. */
	var COMPARE_PARTIAL_FLAG = 1,
	    COMPARE_UNORDERED_FLAG = 2;
	
	/** `Object#toString` result references. */
	var boolTag = '[object Boolean]',
	    dateTag = '[object Date]',
	    errorTag = '[object Error]',
	    mapTag = '[object Map]',
	    numberTag = '[object Number]',
	    regexpTag = '[object RegExp]',
	    setTag = '[object Set]',
	    stringTag = '[object String]',
	    symbolTag = '[object Symbol]';
	
	var arrayBufferTag = '[object ArrayBuffer]',
	    dataViewTag = '[object DataView]';
	
	/** Used to convert symbols to primitives and strings. */
	var symbolProto = _Symbol ? _Symbol.prototype : undefined,
	    symbolValueOf = symbolProto ? symbolProto.valueOf : undefined;
	
	/**
	 * A specialized version of `baseIsEqualDeep` for comparing objects of
	 * the same `toStringTag`.
	 *
	 * **Note:** This function only supports comparing values with tags of
	 * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
	 *
	 * @private
	 * @param {Object} object The object to compare.
	 * @param {Object} other The other object to compare.
	 * @param {string} tag The `toStringTag` of the objects to compare.
	 * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
	 * @param {Function} customizer The function to customize comparisons.
	 * @param {Function} equalFunc The function to determine equivalents of values.
	 * @param {Object} stack Tracks traversed `object` and `other` objects.
	 * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
	 */
	function equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {
	  switch (tag) {
	    case dataViewTag:
	      if (object.byteLength != other.byteLength || object.byteOffset != other.byteOffset) {
	        return false;
	      }
	      object = object.buffer;
	      other = other.buffer;
	
	    case arrayBufferTag:
	      if (object.byteLength != other.byteLength || !equalFunc(new Uint8Array(object), new Uint8Array(other))) {
	        return false;
	      }
	      return true;
	
	    case boolTag:
	    case dateTag:
	    case numberTag:
	      // Coerce booleans to `1` or `0` and dates to milliseconds.
	      // Invalid dates are coerced to `NaN`.
	      return eq(+object, +other);
	
	    case errorTag:
	      return object.name == other.name && object.message == other.message;
	
	    case regexpTag:
	    case stringTag:
	      // Coerce regexes to strings and treat strings, primitives and objects,
	      // as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring
	      // for more details.
	      return object == other + '';
	
	    case mapTag:
	      var convert = mapToArray;
	
	    case setTag:
	      var isPartial = bitmask & COMPARE_PARTIAL_FLAG;
	      convert || (convert = setToArray);
	
	      if (object.size != other.size && !isPartial) {
	        return false;
	      }
	      // Assume cyclic values are equal.
	      var stacked = stack.get(object);
	      if (stacked) {
	        return stacked == other;
	      }
	      bitmask |= COMPARE_UNORDERED_FLAG;
	
	      // Recursively compare objects (susceptible to call stack limits).
	      stack.set(object, other);
	      var result = equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);
	      stack['delete'](object);
	      return result;
	
	    case symbolTag:
	      if (symbolValueOf) {
	        return symbolValueOf.call(object) == symbolValueOf.call(other);
	      }
	  }
	  return false;
	}
	
	module.exports = equalByTag;

/***/ }),
/* 714 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var root = __webpack_require__(196);
	
	/** Built-in value references. */
	var Uint8Array = root.Uint8Array;
	
	module.exports = Uint8Array;

/***/ }),
/* 715 */
/***/ (function(module, exports) {

	"use strict";
	
	/**
	 * Converts `map` to its key-value pairs.
	 *
	 * @private
	 * @param {Object} map The map to convert.
	 * @returns {Array} Returns the key-value pairs.
	 */
	function mapToArray(map) {
	  var index = -1,
	      result = Array(map.size);
	
	  map.forEach(function (value, key) {
	    result[++index] = [key, value];
	  });
	  return result;
	}
	
	module.exports = mapToArray;

/***/ }),
/* 716 */
/***/ (function(module, exports) {

	"use strict";
	
	/**
	 * Converts `set` to an array of its values.
	 *
	 * @private
	 * @param {Object} set The set to convert.
	 * @returns {Array} Returns the values.
	 */
	function setToArray(set) {
	  var index = -1,
	      result = Array(set.size);
	
	  set.forEach(function (value) {
	    result[++index] = value;
	  });
	  return result;
	}
	
	module.exports = setToArray;

/***/ }),
/* 717 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var getAllKeys = __webpack_require__(718);
	
	/** Used to compose bitmasks for value comparisons. */
	var COMPARE_PARTIAL_FLAG = 1;
	
	/** Used for built-in method references. */
	var objectProto = Object.prototype;
	
	/** Used to check objects for own properties. */
	var hasOwnProperty = objectProto.hasOwnProperty;
	
	/**
	 * A specialized version of `baseIsEqualDeep` for objects with support for
	 * partial deep comparisons.
	 *
	 * @private
	 * @param {Object} object The object to compare.
	 * @param {Object} other The other object to compare.
	 * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
	 * @param {Function} customizer The function to customize comparisons.
	 * @param {Function} equalFunc The function to determine equivalents of values.
	 * @param {Object} stack Tracks traversed `object` and `other` objects.
	 * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
	 */
	function equalObjects(object, other, bitmask, customizer, equalFunc, stack) {
	  var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
	      objProps = getAllKeys(object),
	      objLength = objProps.length,
	      othProps = getAllKeys(other),
	      othLength = othProps.length;
	
	  if (objLength != othLength && !isPartial) {
	    return false;
	  }
	  var index = objLength;
	  while (index--) {
	    var key = objProps[index];
	    if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {
	      return false;
	    }
	  }
	  // Assume cyclic values are equal.
	  var stacked = stack.get(object);
	  if (stacked && stack.get(other)) {
	    return stacked == other;
	  }
	  var result = true;
	  stack.set(object, other);
	  stack.set(other, object);
	
	  var skipCtor = isPartial;
	  while (++index < objLength) {
	    key = objProps[index];
	    var objValue = object[key],
	        othValue = other[key];
	
	    if (customizer) {
	      var compared = isPartial ? customizer(othValue, objValue, key, other, object, stack) : customizer(objValue, othValue, key, object, other, stack);
	    }
	    // Recursively compare objects (susceptible to call stack limits).
	    if (!(compared === undefined ? objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack) : compared)) {
	      result = false;
	      break;
	    }
	    skipCtor || (skipCtor = key == 'constructor');
	  }
	  if (result && !skipCtor) {
	    var objCtor = object.constructor,
	        othCtor = other.constructor;
	
	    // Non `Object` object instances with different constructors are not equal.
	    if (objCtor != othCtor && 'constructor' in object && 'constructor' in other && !(typeof objCtor == 'function' && objCtor instanceof objCtor && typeof othCtor == 'function' && othCtor instanceof othCtor)) {
	      result = false;
	    }
	  }
	  stack['delete'](object);
	  stack['delete'](other);
	  return result;
	}
	
	module.exports = equalObjects;

/***/ }),
/* 718 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var baseGetAllKeys = __webpack_require__(719),
	    getSymbols = __webpack_require__(722),
	    keys = __webpack_require__(725);
	
	/**
	 * Creates an array of own enumerable property names and symbols of `object`.
	 *
	 * @private
	 * @param {Object} object The object to query.
	 * @returns {Array} Returns the array of property names and symbols.
	 */
	function getAllKeys(object) {
	  return baseGetAllKeys(object, keys, getSymbols);
	}
	
	module.exports = getAllKeys;

/***/ }),
/* 719 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var arrayPush = __webpack_require__(720),
	    isArray = __webpack_require__(721);
	
	/**
	 * The base implementation of `getAllKeys` and `getAllKeysIn` which uses
	 * `keysFunc` and `symbolsFunc` to get the enumerable property names and
	 * symbols of `object`.
	 *
	 * @private
	 * @param {Object} object The object to query.
	 * @param {Function} keysFunc The function to get the keys of `object`.
	 * @param {Function} symbolsFunc The function to get the symbols of `object`.
	 * @returns {Array} Returns the array of property names and symbols.
	 */
	function baseGetAllKeys(object, keysFunc, symbolsFunc) {
	  var result = keysFunc(object);
	  return isArray(object) ? result : arrayPush(result, symbolsFunc(object));
	}
	
	module.exports = baseGetAllKeys;

/***/ }),
/* 720 */
/***/ (function(module, exports) {

	"use strict";
	
	/**
	 * Appends the elements of `values` to `array`.
	 *
	 * @private
	 * @param {Array} array The array to modify.
	 * @param {Array} values The values to append.
	 * @returns {Array} Returns `array`.
	 */
	function arrayPush(array, values) {
	  var index = -1,
	      length = values.length,
	      offset = array.length;
	
	  while (++index < length) {
	    array[offset + index] = values[index];
	  }
	  return array;
	}
	
	module.exports = arrayPush;

/***/ }),
/* 721 */
/***/ (function(module, exports) {

	"use strict";
	
	/**
	 * Checks if `value` is classified as an `Array` object.
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is an array, else `false`.
	 * @example
	 *
	 * _.isArray([1, 2, 3]);
	 * // => true
	 *
	 * _.isArray(document.body.children);
	 * // => false
	 *
	 * _.isArray('abc');
	 * // => false
	 *
	 * _.isArray(_.noop);
	 * // => false
	 */
	var isArray = Array.isArray;
	
	module.exports = isArray;

/***/ }),
/* 722 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var arrayFilter = __webpack_require__(723),
	    stubArray = __webpack_require__(724);
	
	/** Used for built-in method references. */
	var objectProto = Object.prototype;
	
	/** Built-in value references. */
	var propertyIsEnumerable = objectProto.propertyIsEnumerable;
	
	/* Built-in method references for those with the same name as other `lodash` methods. */
	var nativeGetSymbols = Object.getOwnPropertySymbols;
	
	/**
	 * Creates an array of the own enumerable symbols of `object`.
	 *
	 * @private
	 * @param {Object} object The object to query.
	 * @returns {Array} Returns the array of symbols.
	 */
	var getSymbols = !nativeGetSymbols ? stubArray : function (object) {
	  if (object == null) {
	    return [];
	  }
	  object = Object(object);
	  return arrayFilter(nativeGetSymbols(object), function (symbol) {
	    return propertyIsEnumerable.call(object, symbol);
	  });
	};
	
	module.exports = getSymbols;

/***/ }),
/* 723 */
/***/ (function(module, exports) {

	"use strict";
	
	/**
	 * A specialized version of `_.filter` for arrays without support for
	 * iteratee shorthands.
	 *
	 * @private
	 * @param {Array} [array] The array to iterate over.
	 * @param {Function} predicate The function invoked per iteration.
	 * @returns {Array} Returns the new filtered array.
	 */
	function arrayFilter(array, predicate) {
	  var index = -1,
	      length = array == null ? 0 : array.length,
	      resIndex = 0,
	      result = [];
	
	  while (++index < length) {
	    var value = array[index];
	    if (predicate(value, index, array)) {
	      result[resIndex++] = value;
	    }
	  }
	  return result;
	}
	
	module.exports = arrayFilter;

/***/ }),
/* 724 */
/***/ (function(module, exports) {

	"use strict";
	
	/**
	 * This method returns a new empty array.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.13.0
	 * @category Util
	 * @returns {Array} Returns the new empty array.
	 * @example
	 *
	 * var arrays = _.times(2, _.stubArray);
	 *
	 * console.log(arrays);
	 * // => [[], []]
	 *
	 * console.log(arrays[0] === arrays[1]);
	 * // => false
	 */
	function stubArray() {
	  return [];
	}
	
	module.exports = stubArray;

/***/ }),
/* 725 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var arrayLikeKeys = __webpack_require__(726),
	    baseKeys = __webpack_require__(738),
	    isArrayLike = __webpack_require__(741);
	
	/**
	 * Creates an array of the own enumerable property names of `object`.
	 *
	 * **Note:** Non-object values are coerced to objects. See the
	 * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
	 * for more details.
	 *
	 * @static
	 * @since 0.1.0
	 * @memberOf _
	 * @category Object
	 * @param {Object} object The object to query.
	 * @returns {Array} Returns the array of property names.
	 * @example
	 *
	 * function Foo() {
	 *   this.a = 1;
	 *   this.b = 2;
	 * }
	 *
	 * Foo.prototype.c = 3;
	 *
	 * _.keys(new Foo);
	 * // => ['a', 'b'] (iteration order is not guaranteed)
	 *
	 * _.keys('hi');
	 * // => ['0', '1']
	 */
	function keys(object) {
	  return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
	}
	
	module.exports = keys;

/***/ }),
/* 726 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var baseTimes = __webpack_require__(727),
	    isArguments = __webpack_require__(728),
	    isArray = __webpack_require__(721),
	    isBuffer = __webpack_require__(730),
	    isIndex = __webpack_require__(732),
	    isTypedArray = __webpack_require__(733);
	
	/** Used for built-in method references. */
	var objectProto = Object.prototype;
	
	/** Used to check objects for own properties. */
	var hasOwnProperty = objectProto.hasOwnProperty;
	
	/**
	 * Creates an array of the enumerable property names of the array-like `value`.
	 *
	 * @private
	 * @param {*} value The value to query.
	 * @param {boolean} inherited Specify returning inherited property names.
	 * @returns {Array} Returns the array of property names.
	 */
	function arrayLikeKeys(value, inherited) {
	  var isArr = isArray(value),
	      isArg = !isArr && isArguments(value),
	      isBuff = !isArr && !isArg && isBuffer(value),
	      isType = !isArr && !isArg && !isBuff && isTypedArray(value),
	      skipIndexes = isArr || isArg || isBuff || isType,
	      result = skipIndexes ? baseTimes(value.length, String) : [],
	      length = result.length;
	
	  for (var key in value) {
	    if ((inherited || hasOwnProperty.call(value, key)) && !(skipIndexes && (
	    // Safari 9 has enumerable `arguments.length` in strict mode.
	    key == 'length' ||
	    // Node.js 0.10 has enumerable non-index properties on buffers.
	    isBuff && (key == 'offset' || key == 'parent') ||
	    // PhantomJS 2 has enumerable non-index properties on typed arrays.
	    isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset') ||
	    // Skip index properties.
	    isIndex(key, length)))) {
	      result.push(key);
	    }
	  }
	  return result;
	}
	
	module.exports = arrayLikeKeys;

/***/ }),
/* 727 */
/***/ (function(module, exports) {

	"use strict";
	
	/**
	 * The base implementation of `_.times` without support for iteratee shorthands
	 * or max array length checks.
	 *
	 * @private
	 * @param {number} n The number of times to invoke `iteratee`.
	 * @param {Function} iteratee The function invoked per iteration.
	 * @returns {Array} Returns the array of results.
	 */
	function baseTimes(n, iteratee) {
	  var index = -1,
	      result = Array(n);
	
	  while (++index < n) {
	    result[index] = iteratee(index);
	  }
	  return result;
	}
	
	module.exports = baseTimes;

/***/ }),
/* 728 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var baseIsArguments = __webpack_require__(729),
	    isObjectLike = __webpack_require__(202);
	
	/** Used for built-in method references. */
	var objectProto = Object.prototype;
	
	/** Used to check objects for own properties. */
	var hasOwnProperty = objectProto.hasOwnProperty;
	
	/** Built-in value references. */
	var propertyIsEnumerable = objectProto.propertyIsEnumerable;
	
	/**
	 * Checks if `value` is likely an `arguments` object.
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is an `arguments` object,
	 *  else `false`.
	 * @example
	 *
	 * _.isArguments(function() { return arguments; }());
	 * // => true
	 *
	 * _.isArguments([1, 2, 3]);
	 * // => false
	 */
	var isArguments = baseIsArguments(function () {
	    return arguments;
	}()) ? baseIsArguments : function (value) {
	    return isObjectLike(value) && hasOwnProperty.call(value, 'callee') && !propertyIsEnumerable.call(value, 'callee');
	};
	
	module.exports = isArguments;

/***/ }),
/* 729 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var baseGetTag = __webpack_require__(194),
	    isObjectLike = __webpack_require__(202);
	
	/** `Object#toString` result references. */
	var argsTag = '[object Arguments]';
	
	/**
	 * The base implementation of `_.isArguments`.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is an `arguments` object,
	 */
	function baseIsArguments(value) {
	  return isObjectLike(value) && baseGetTag(value) == argsTag;
	}
	
	module.exports = baseIsArguments;

/***/ }),
/* 730 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(module) {'use strict';
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
	
	var root = __webpack_require__(196),
	    stubFalse = __webpack_require__(731);
	
	/** Detect free variable `exports`. */
	var freeExports = ( false ? 'undefined' : _typeof(exports)) == 'object' && exports && !exports.nodeType && exports;
	
	/** Detect free variable `module`. */
	var freeModule = freeExports && ( false ? 'undefined' : _typeof(module)) == 'object' && module && !module.nodeType && module;
	
	/** Detect the popular CommonJS extension `module.exports`. */
	var moduleExports = freeModule && freeModule.exports === freeExports;
	
	/** Built-in value references. */
	var Buffer = moduleExports ? root.Buffer : undefined;
	
	/* Built-in method references for those with the same name as other `lodash` methods. */
	var nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined;
	
	/**
	 * Checks if `value` is a buffer.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.3.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.
	 * @example
	 *
	 * _.isBuffer(new Buffer(2));
	 * // => true
	 *
	 * _.isBuffer(new Uint8Array(2));
	 * // => false
	 */
	var isBuffer = nativeIsBuffer || stubFalse;
	
	module.exports = isBuffer;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(205)(module)))

/***/ }),
/* 731 */
/***/ (function(module, exports) {

	"use strict";
	
	/**
	 * This method returns `false`.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.13.0
	 * @category Util
	 * @returns {boolean} Returns `false`.
	 * @example
	 *
	 * _.times(2, _.stubFalse);
	 * // => [false, false]
	 */
	function stubFalse() {
	  return false;
	}
	
	module.exports = stubFalse;

/***/ }),
/* 732 */
/***/ (function(module, exports) {

	'use strict';
	
	/** Used as references for various `Number` constants. */
	var MAX_SAFE_INTEGER = 9007199254740991;
	
	/** Used to detect unsigned integer values. */
	var reIsUint = /^(?:0|[1-9]\d*)$/;
	
	/**
	 * Checks if `value` is a valid array-like index.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
	 * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
	 */
	function isIndex(value, length) {
	  length = length == null ? MAX_SAFE_INTEGER : length;
	  return !!length && (typeof value == 'number' || reIsUint.test(value)) && value > -1 && value % 1 == 0 && value < length;
	}
	
	module.exports = isIndex;

/***/ }),
/* 733 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var baseIsTypedArray = __webpack_require__(734),
	    baseUnary = __webpack_require__(736),
	    nodeUtil = __webpack_require__(737);
	
	/* Node.js helper references. */
	var nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;
	
	/**
	 * Checks if `value` is classified as a typed array.
	 *
	 * @static
	 * @memberOf _
	 * @since 3.0.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
	 * @example
	 *
	 * _.isTypedArray(new Uint8Array);
	 * // => true
	 *
	 * _.isTypedArray([]);
	 * // => false
	 */
	var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;
	
	module.exports = isTypedArray;

/***/ }),
/* 734 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var baseGetTag = __webpack_require__(194),
	    isLength = __webpack_require__(735),
	    isObjectLike = __webpack_require__(202);
	
	/** `Object#toString` result references. */
	var argsTag = '[object Arguments]',
	    arrayTag = '[object Array]',
	    boolTag = '[object Boolean]',
	    dateTag = '[object Date]',
	    errorTag = '[object Error]',
	    funcTag = '[object Function]',
	    mapTag = '[object Map]',
	    numberTag = '[object Number]',
	    objectTag = '[object Object]',
	    regexpTag = '[object RegExp]',
	    setTag = '[object Set]',
	    stringTag = '[object String]',
	    weakMapTag = '[object WeakMap]';
	
	var arrayBufferTag = '[object ArrayBuffer]',
	    dataViewTag = '[object DataView]',
	    float32Tag = '[object Float32Array]',
	    float64Tag = '[object Float64Array]',
	    int8Tag = '[object Int8Array]',
	    int16Tag = '[object Int16Array]',
	    int32Tag = '[object Int32Array]',
	    uint8Tag = '[object Uint8Array]',
	    uint8ClampedTag = '[object Uint8ClampedArray]',
	    uint16Tag = '[object Uint16Array]',
	    uint32Tag = '[object Uint32Array]';
	
	/** Used to identify `toStringTag` values of typed arrays. */
	var typedArrayTags = {};
	typedArrayTags[float32Tag] = typedArrayTags[float64Tag] = typedArrayTags[int8Tag] = typedArrayTags[int16Tag] = typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] = typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] = typedArrayTags[uint32Tag] = true;
	typedArrayTags[argsTag] = typedArrayTags[arrayTag] = typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] = typedArrayTags[dataViewTag] = typedArrayTags[dateTag] = typedArrayTags[errorTag] = typedArrayTags[funcTag] = typedArrayTags[mapTag] = typedArrayTags[numberTag] = typedArrayTags[objectTag] = typedArrayTags[regexpTag] = typedArrayTags[setTag] = typedArrayTags[stringTag] = typedArrayTags[weakMapTag] = false;
	
	/**
	 * The base implementation of `_.isTypedArray` without Node.js optimizations.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
	 */
	function baseIsTypedArray(value) {
	    return isObjectLike(value) && isLength(value.length) && !!typedArrayTags[baseGetTag(value)];
	}
	
	module.exports = baseIsTypedArray;

/***/ }),
/* 735 */
/***/ (function(module, exports) {

	'use strict';
	
	/** Used as references for various `Number` constants. */
	var MAX_SAFE_INTEGER = 9007199254740991;
	
	/**
	 * Checks if `value` is a valid array-like length.
	 *
	 * **Note:** This method is loosely based on
	 * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
	 * @example
	 *
	 * _.isLength(3);
	 * // => true
	 *
	 * _.isLength(Number.MIN_VALUE);
	 * // => false
	 *
	 * _.isLength(Infinity);
	 * // => false
	 *
	 * _.isLength('3');
	 * // => false
	 */
	function isLength(value) {
	  return typeof value == 'number' && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
	}
	
	module.exports = isLength;

/***/ }),
/* 736 */
/***/ (function(module, exports) {

	"use strict";
	
	/**
	 * The base implementation of `_.unary` without support for storing metadata.
	 *
	 * @private
	 * @param {Function} func The function to cap arguments for.
	 * @returns {Function} Returns the new capped function.
	 */
	function baseUnary(func) {
	  return function (value) {
	    return func(value);
	  };
	}
	
	module.exports = baseUnary;

/***/ }),
/* 737 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(module) {'use strict';
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
	
	var freeGlobal = __webpack_require__(197);
	
	/** Detect free variable `exports`. */
	var freeExports = ( false ? 'undefined' : _typeof(exports)) == 'object' && exports && !exports.nodeType && exports;
	
	/** Detect free variable `module`. */
	var freeModule = freeExports && ( false ? 'undefined' : _typeof(module)) == 'object' && module && !module.nodeType && module;
	
	/** Detect the popular CommonJS extension `module.exports`. */
	var moduleExports = freeModule && freeModule.exports === freeExports;
	
	/** Detect free variable `process` from Node.js. */
	var freeProcess = moduleExports && freeGlobal.process;
	
	/** Used to access faster Node.js helpers. */
	var nodeUtil = function () {
	  try {
	    return freeProcess && freeProcess.binding && freeProcess.binding('util');
	  } catch (e) {}
	}();
	
	module.exports = nodeUtil;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(205)(module)))

/***/ }),
/* 738 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var isPrototype = __webpack_require__(739),
	    nativeKeys = __webpack_require__(740);
	
	/** Used for built-in method references. */
	var objectProto = Object.prototype;
	
	/** Used to check objects for own properties. */
	var hasOwnProperty = objectProto.hasOwnProperty;
	
	/**
	 * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.
	 *
	 * @private
	 * @param {Object} object The object to query.
	 * @returns {Array} Returns the array of property names.
	 */
	function baseKeys(object) {
	  if (!isPrototype(object)) {
	    return nativeKeys(object);
	  }
	  var result = [];
	  for (var key in Object(object)) {
	    if (hasOwnProperty.call(object, key) && key != 'constructor') {
	      result.push(key);
	    }
	  }
	  return result;
	}
	
	module.exports = baseKeys;

/***/ }),
/* 739 */
/***/ (function(module, exports) {

	'use strict';
	
	/** Used for built-in method references. */
	var objectProto = Object.prototype;
	
	/**
	 * Checks if `value` is likely a prototype object.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.
	 */
	function isPrototype(value) {
	  var Ctor = value && value.constructor,
	      proto = typeof Ctor == 'function' && Ctor.prototype || objectProto;
	
	  return value === proto;
	}
	
	module.exports = isPrototype;

/***/ }),
/* 740 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var overArg = __webpack_require__(201);
	
	/* Built-in method references for those with the same name as other `lodash` methods. */
	var nativeKeys = overArg(Object.keys, Object);
	
	module.exports = nativeKeys;

/***/ }),
/* 741 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var isFunction = __webpack_require__(684),
	    isLength = __webpack_require__(735);
	
	/**
	 * Checks if `value` is array-like. A value is considered array-like if it's
	 * not a function and has a `value.length` that's an integer greater than or
	 * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
	 * @example
	 *
	 * _.isArrayLike([1, 2, 3]);
	 * // => true
	 *
	 * _.isArrayLike(document.body.children);
	 * // => true
	 *
	 * _.isArrayLike('abc');
	 * // => true
	 *
	 * _.isArrayLike(_.noop);
	 * // => false
	 */
	function isArrayLike(value) {
	  return value != null && isLength(value.length) && !isFunction(value);
	}
	
	module.exports = isArrayLike;

/***/ }),
/* 742 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var DataView = __webpack_require__(743),
	    Map = __webpack_require__(681),
	    Promise = __webpack_require__(744),
	    Set = __webpack_require__(745),
	    WeakMap = __webpack_require__(746),
	    baseGetTag = __webpack_require__(194),
	    toSource = __webpack_require__(688);
	
	/** `Object#toString` result references. */
	var mapTag = '[object Map]',
	    objectTag = '[object Object]',
	    promiseTag = '[object Promise]',
	    setTag = '[object Set]',
	    weakMapTag = '[object WeakMap]';
	
	var dataViewTag = '[object DataView]';
	
	/** Used to detect maps, sets, and weakmaps. */
	var dataViewCtorString = toSource(DataView),
	    mapCtorString = toSource(Map),
	    promiseCtorString = toSource(Promise),
	    setCtorString = toSource(Set),
	    weakMapCtorString = toSource(WeakMap);
	
	/**
	 * Gets the `toStringTag` of `value`.
	 *
	 * @private
	 * @param {*} value The value to query.
	 * @returns {string} Returns the `toStringTag`.
	 */
	var getTag = baseGetTag;
	
	// Fallback for data views, maps, sets, and weak maps in IE 11 and promises in Node.js < 6.
	if (DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag || Map && getTag(new Map()) != mapTag || Promise && getTag(Promise.resolve()) != promiseTag || Set && getTag(new Set()) != setTag || WeakMap && getTag(new WeakMap()) != weakMapTag) {
	    getTag = function getTag(value) {
	        var result = baseGetTag(value),
	            Ctor = result == objectTag ? value.constructor : undefined,
	            ctorString = Ctor ? toSource(Ctor) : '';
	
	        if (ctorString) {
	            switch (ctorString) {
	                case dataViewCtorString:
	                    return dataViewTag;
	                case mapCtorString:
	                    return mapTag;
	                case promiseCtorString:
	                    return promiseTag;
	                case setCtorString:
	                    return setTag;
	                case weakMapCtorString:
	                    return weakMapTag;
	            }
	        }
	        return result;
	    };
	}
	
	module.exports = getTag;

/***/ }),
/* 743 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var getNative = __webpack_require__(682),
	    root = __webpack_require__(196);
	
	/* Built-in method references that are verified to be native. */
	var DataView = getNative(root, 'DataView');
	
	module.exports = DataView;

/***/ }),
/* 744 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var getNative = __webpack_require__(682),
	    root = __webpack_require__(196);
	
	/* Built-in method references that are verified to be native. */
	var Promise = getNative(root, 'Promise');
	
	module.exports = Promise;

/***/ }),
/* 745 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var getNative = __webpack_require__(682),
	    root = __webpack_require__(196);
	
	/* Built-in method references that are verified to be native. */
	var Set = getNative(root, 'Set');
	
	module.exports = Set;

/***/ }),
/* 746 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var getNative = __webpack_require__(682),
	    root = __webpack_require__(196);
	
	/* Built-in method references that are verified to be native. */
	var WeakMap = getNative(root, 'WeakMap');
	
	module.exports = WeakMap;

/***/ }),
/* 747 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var isStrictComparable = __webpack_require__(748),
	    keys = __webpack_require__(725);
	
	/**
	 * Gets the property names, values, and compare flags of `object`.
	 *
	 * @private
	 * @param {Object} object The object to query.
	 * @returns {Array} Returns the match data of `object`.
	 */
	function getMatchData(object) {
	    var result = keys(object),
	        length = result.length;
	
	    while (length--) {
	        var key = result[length],
	            value = object[key];
	
	        result[length] = [key, value, isStrictComparable(value)];
	    }
	    return result;
	}
	
	module.exports = getMatchData;

/***/ }),
/* 748 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var isObject = __webpack_require__(685);
	
	/**
	 * Checks if `value` is suitable for strict equality comparisons, i.e. `===`.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` if suitable for strict
	 *  equality comparisons, else `false`.
	 */
	function isStrictComparable(value) {
	  return value === value && !isObject(value);
	}
	
	module.exports = isStrictComparable;

/***/ }),
/* 749 */
/***/ (function(module, exports) {

	"use strict";
	
	/**
	 * A specialized version of `matchesProperty` for source values suitable
	 * for strict equality comparisons, i.e. `===`.
	 *
	 * @private
	 * @param {string} key The key of the property to get.
	 * @param {*} srcValue The value to match.
	 * @returns {Function} Returns the new spec function.
	 */
	function matchesStrictComparable(key, srcValue) {
	  return function (object) {
	    if (object == null) {
	      return false;
	    }
	    return object[key] === srcValue && (srcValue !== undefined || key in Object(object));
	  };
	}
	
	module.exports = matchesStrictComparable;

/***/ }),
/* 750 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var baseIsEqual = __webpack_require__(705),
	    get = __webpack_require__(751),
	    hasIn = __webpack_require__(763),
	    isKey = __webpack_require__(754),
	    isStrictComparable = __webpack_require__(748),
	    matchesStrictComparable = __webpack_require__(749),
	    toKey = __webpack_require__(762);
	
	/** Used to compose bitmasks for value comparisons. */
	var COMPARE_PARTIAL_FLAG = 1,
	    COMPARE_UNORDERED_FLAG = 2;
	
	/**
	 * The base implementation of `_.matchesProperty` which doesn't clone `srcValue`.
	 *
	 * @private
	 * @param {string} path The path of the property to get.
	 * @param {*} srcValue The value to match.
	 * @returns {Function} Returns the new spec function.
	 */
	function baseMatchesProperty(path, srcValue) {
	  if (isKey(path) && isStrictComparable(srcValue)) {
	    return matchesStrictComparable(toKey(path), srcValue);
	  }
	  return function (object) {
	    var objValue = get(object, path);
	    return objValue === undefined && objValue === srcValue ? hasIn(object, path) : baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG);
	  };
	}
	
	module.exports = baseMatchesProperty;

/***/ }),
/* 751 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var baseGet = __webpack_require__(752);
	
	/**
	 * Gets the value at `path` of `object`. If the resolved value is
	 * `undefined`, the `defaultValue` is returned in its place.
	 *
	 * @static
	 * @memberOf _
	 * @since 3.7.0
	 * @category Object
	 * @param {Object} object The object to query.
	 * @param {Array|string} path The path of the property to get.
	 * @param {*} [defaultValue] The value returned for `undefined` resolved values.
	 * @returns {*} Returns the resolved value.
	 * @example
	 *
	 * var object = { 'a': [{ 'b': { 'c': 3 } }] };
	 *
	 * _.get(object, 'a[0].b.c');
	 * // => 3
	 *
	 * _.get(object, ['a', '0', 'b', 'c']);
	 * // => 3
	 *
	 * _.get(object, 'a.b.c', 'default');
	 * // => 'default'
	 */
	function get(object, path, defaultValue) {
	  var result = object == null ? undefined : baseGet(object, path);
	  return result === undefined ? defaultValue : result;
	}
	
	module.exports = get;

/***/ }),
/* 752 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var castPath = __webpack_require__(753),
	    toKey = __webpack_require__(762);
	
	/**
	 * The base implementation of `_.get` without support for default values.
	 *
	 * @private
	 * @param {Object} object The object to query.
	 * @param {Array|string} path The path of the property to get.
	 * @returns {*} Returns the resolved value.
	 */
	function baseGet(object, path) {
	  path = castPath(path, object);
	
	  var index = 0,
	      length = path.length;
	
	  while (object != null && index < length) {
	    object = object[toKey(path[index++])];
	  }
	  return index && index == length ? object : undefined;
	}
	
	module.exports = baseGet;

/***/ }),
/* 753 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var isArray = __webpack_require__(721),
	    isKey = __webpack_require__(754),
	    stringToPath = __webpack_require__(756),
	    toString = __webpack_require__(759);
	
	/**
	 * Casts `value` to a path array if it's not one.
	 *
	 * @private
	 * @param {*} value The value to inspect.
	 * @param {Object} [object] The object to query keys on.
	 * @returns {Array} Returns the cast property path array.
	 */
	function castPath(value, object) {
	  if (isArray(value)) {
	    return value;
	  }
	  return isKey(value, object) ? [value] : stringToPath(toString(value));
	}
	
	module.exports = castPath;

/***/ }),
/* 754 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
	
	var isArray = __webpack_require__(721),
	    isSymbol = __webpack_require__(755);
	
	/** Used to match property names within property paths. */
	var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,
	    reIsPlainProp = /^\w*$/;
	
	/**
	 * Checks if `value` is a property name and not a property path.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @param {Object} [object] The object to query keys on.
	 * @returns {boolean} Returns `true` if `value` is a property name, else `false`.
	 */
	function isKey(value, object) {
	  if (isArray(value)) {
	    return false;
	  }
	  var type = typeof value === 'undefined' ? 'undefined' : _typeof(value);
	  if (type == 'number' || type == 'symbol' || type == 'boolean' || value == null || isSymbol(value)) {
	    return true;
	  }
	  return reIsPlainProp.test(value) || !reIsDeepProp.test(value) || object != null && value in Object(object);
	}
	
	module.exports = isKey;

/***/ }),
/* 755 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
	
	var baseGetTag = __webpack_require__(194),
	    isObjectLike = __webpack_require__(202);
	
	/** `Object#toString` result references. */
	var symbolTag = '[object Symbol]';
	
	/**
	 * Checks if `value` is classified as a `Symbol` primitive or object.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
	 * @example
	 *
	 * _.isSymbol(Symbol.iterator);
	 * // => true
	 *
	 * _.isSymbol('abc');
	 * // => false
	 */
	function isSymbol(value) {
	    return (typeof value === 'undefined' ? 'undefined' : _typeof(value)) == 'symbol' || isObjectLike(value) && baseGetTag(value) == symbolTag;
	}
	
	module.exports = isSymbol;

/***/ }),
/* 756 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var memoizeCapped = __webpack_require__(757);
	
	/** Used to match property names within property paths. */
	var reLeadingDot = /^\./,
	    rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;
	
	/** Used to match backslashes in property paths. */
	var reEscapeChar = /\\(\\)?/g;
	
	/**
	 * Converts `string` to a property path array.
	 *
	 * @private
	 * @param {string} string The string to convert.
	 * @returns {Array} Returns the property path array.
	 */
	var stringToPath = memoizeCapped(function (string) {
	  var result = [];
	  if (reLeadingDot.test(string)) {
	    result.push('');
	  }
	  string.replace(rePropName, function (match, number, quote, string) {
	    result.push(quote ? string.replace(reEscapeChar, '$1') : number || match);
	  });
	  return result;
	});
	
	module.exports = stringToPath;

/***/ }),
/* 757 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var memoize = __webpack_require__(758);
	
	/** Used as the maximum memoize cache size. */
	var MAX_MEMOIZE_SIZE = 500;
	
	/**
	 * A specialized version of `_.memoize` which clears the memoized function's
	 * cache when it exceeds `MAX_MEMOIZE_SIZE`.
	 *
	 * @private
	 * @param {Function} func The function to have its output memoized.
	 * @returns {Function} Returns the new memoized function.
	 */
	function memoizeCapped(func) {
	  var result = memoize(func, function (key) {
	    if (cache.size === MAX_MEMOIZE_SIZE) {
	      cache.clear();
	    }
	    return key;
	  });
	
	  var cache = result.cache;
	  return result;
	}
	
	module.exports = memoizeCapped;

/***/ }),
/* 758 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var MapCache = __webpack_require__(690);
	
	/** Error message constants. */
	var FUNC_ERROR_TEXT = 'Expected a function';
	
	/**
	 * Creates a function that memoizes the result of `func`. If `resolver` is
	 * provided, it determines the cache key for storing the result based on the
	 * arguments provided to the memoized function. By default, the first argument
	 * provided to the memoized function is used as the map cache key. The `func`
	 * is invoked with the `this` binding of the memoized function.
	 *
	 * **Note:** The cache is exposed as the `cache` property on the memoized
	 * function. Its creation may be customized by replacing the `_.memoize.Cache`
	 * constructor with one whose instances implement the
	 * [`Map`](http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object)
	 * method interface of `clear`, `delete`, `get`, `has`, and `set`.
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Function
	 * @param {Function} func The function to have its output memoized.
	 * @param {Function} [resolver] The function to resolve the cache key.
	 * @returns {Function} Returns the new memoized function.
	 * @example
	 *
	 * var object = { 'a': 1, 'b': 2 };
	 * var other = { 'c': 3, 'd': 4 };
	 *
	 * var values = _.memoize(_.values);
	 * values(object);
	 * // => [1, 2]
	 *
	 * values(other);
	 * // => [3, 4]
	 *
	 * object.a = 2;
	 * values(object);
	 * // => [1, 2]
	 *
	 * // Modify the result cache.
	 * values.cache.set(object, ['a', 'b']);
	 * values(object);
	 * // => ['a', 'b']
	 *
	 * // Replace `_.memoize.Cache`.
	 * _.memoize.Cache = WeakMap;
	 */
	function memoize(func, resolver) {
	  if (typeof func != 'function' || resolver != null && typeof resolver != 'function') {
	    throw new TypeError(FUNC_ERROR_TEXT);
	  }
	  var memoized = function memoized() {
	    var args = arguments,
	        key = resolver ? resolver.apply(this, args) : args[0],
	        cache = memoized.cache;
	
	    if (cache.has(key)) {
	      return cache.get(key);
	    }
	    var result = func.apply(this, args);
	    memoized.cache = cache.set(key, result) || cache;
	    return result;
	  };
	  memoized.cache = new (memoize.Cache || MapCache)();
	  return memoized;
	}
	
	// Expose `MapCache`.
	memoize.Cache = MapCache;
	
	module.exports = memoize;

/***/ }),
/* 759 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var baseToString = __webpack_require__(760);
	
	/**
	 * Converts `value` to a string. An empty string is returned for `null`
	 * and `undefined` values. The sign of `-0` is preserved.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Lang
	 * @param {*} value The value to convert.
	 * @returns {string} Returns the converted string.
	 * @example
	 *
	 * _.toString(null);
	 * // => ''
	 *
	 * _.toString(-0);
	 * // => '-0'
	 *
	 * _.toString([1, 2, 3]);
	 * // => '1,2,3'
	 */
	function toString(value) {
	  return value == null ? '' : baseToString(value);
	}
	
	module.exports = toString;

/***/ }),
/* 760 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var _Symbol = __webpack_require__(195),
	    arrayMap = __webpack_require__(761),
	    isArray = __webpack_require__(721),
	    isSymbol = __webpack_require__(755);
	
	/** Used as references for various `Number` constants. */
	var INFINITY = 1 / 0;
	
	/** Used to convert symbols to primitives and strings. */
	var symbolProto = _Symbol ? _Symbol.prototype : undefined,
	    symbolToString = symbolProto ? symbolProto.toString : undefined;
	
	/**
	 * The base implementation of `_.toString` which doesn't convert nullish
	 * values to empty strings.
	 *
	 * @private
	 * @param {*} value The value to process.
	 * @returns {string} Returns the string.
	 */
	function baseToString(value) {
	  // Exit early for strings to avoid a performance hit in some environments.
	  if (typeof value == 'string') {
	    return value;
	  }
	  if (isArray(value)) {
	    // Recursively convert values (susceptible to call stack limits).
	    return arrayMap(value, baseToString) + '';
	  }
	  if (isSymbol(value)) {
	    return symbolToString ? symbolToString.call(value) : '';
	  }
	  var result = value + '';
	  return result == '0' && 1 / value == -INFINITY ? '-0' : result;
	}
	
	module.exports = baseToString;

/***/ }),
/* 761 */
/***/ (function(module, exports) {

	"use strict";
	
	/**
	 * A specialized version of `_.map` for arrays without support for iteratee
	 * shorthands.
	 *
	 * @private
	 * @param {Array} [array] The array to iterate over.
	 * @param {Function} iteratee The function invoked per iteration.
	 * @returns {Array} Returns the new mapped array.
	 */
	function arrayMap(array, iteratee) {
	  var index = -1,
	      length = array == null ? 0 : array.length,
	      result = Array(length);
	
	  while (++index < length) {
	    result[index] = iteratee(array[index], index, array);
	  }
	  return result;
	}
	
	module.exports = arrayMap;

/***/ }),
/* 762 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var isSymbol = __webpack_require__(755);
	
	/** Used as references for various `Number` constants. */
	var INFINITY = 1 / 0;
	
	/**
	 * Converts `value` to a string key if it's not a string or symbol.
	 *
	 * @private
	 * @param {*} value The value to inspect.
	 * @returns {string|symbol} Returns the key.
	 */
	function toKey(value) {
	  if (typeof value == 'string' || isSymbol(value)) {
	    return value;
	  }
	  var result = value + '';
	  return result == '0' && 1 / value == -INFINITY ? '-0' : result;
	}
	
	module.exports = toKey;

/***/ }),
/* 763 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var baseHasIn = __webpack_require__(764),
	    hasPath = __webpack_require__(765);
	
	/**
	 * Checks if `path` is a direct or inherited property of `object`.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Object
	 * @param {Object} object The object to query.
	 * @param {Array|string} path The path to check.
	 * @returns {boolean} Returns `true` if `path` exists, else `false`.
	 * @example
	 *
	 * var object = _.create({ 'a': _.create({ 'b': 2 }) });
	 *
	 * _.hasIn(object, 'a');
	 * // => true
	 *
	 * _.hasIn(object, 'a.b');
	 * // => true
	 *
	 * _.hasIn(object, ['a', 'b']);
	 * // => true
	 *
	 * _.hasIn(object, 'b');
	 * // => false
	 */
	function hasIn(object, path) {
	  return object != null && hasPath(object, path, baseHasIn);
	}
	
	module.exports = hasIn;

/***/ }),
/* 764 */
/***/ (function(module, exports) {

	"use strict";
	
	/**
	 * The base implementation of `_.hasIn` without support for deep paths.
	 *
	 * @private
	 * @param {Object} [object] The object to query.
	 * @param {Array|string} key The key to check.
	 * @returns {boolean} Returns `true` if `key` exists, else `false`.
	 */
	function baseHasIn(object, key) {
	  return object != null && key in Object(object);
	}
	
	module.exports = baseHasIn;

/***/ }),
/* 765 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var castPath = __webpack_require__(753),
	    isArguments = __webpack_require__(728),
	    isArray = __webpack_require__(721),
	    isIndex = __webpack_require__(732),
	    isLength = __webpack_require__(735),
	    toKey = __webpack_require__(762);
	
	/**
	 * Checks if `path` exists on `object`.
	 *
	 * @private
	 * @param {Object} object The object to query.
	 * @param {Array|string} path The path to check.
	 * @param {Function} hasFunc The function to check properties.
	 * @returns {boolean} Returns `true` if `path` exists, else `false`.
	 */
	function hasPath(object, path, hasFunc) {
	  path = castPath(path, object);
	
	  var index = -1,
	      length = path.length,
	      result = false;
	
	  while (++index < length) {
	    var key = toKey(path[index]);
	    if (!(result = object != null && hasFunc(object, key))) {
	      break;
	    }
	    object = object[key];
	  }
	  if (result || ++index != length) {
	    return result;
	  }
	  length = object == null ? 0 : object.length;
	  return !!length && isLength(length) && isIndex(key, length) && (isArray(object) || isArguments(object));
	}
	
	module.exports = hasPath;

/***/ }),
/* 766 */
/***/ (function(module, exports) {

	"use strict";
	
	/**
	 * This method returns the first argument it receives.
	 *
	 * @static
	 * @since 0.1.0
	 * @memberOf _
	 * @category Util
	 * @param {*} value Any value.
	 * @returns {*} Returns `value`.
	 * @example
	 *
	 * var object = { 'a': 1 };
	 *
	 * console.log(_.identity(object) === object);
	 * // => true
	 */
	function identity(value) {
	  return value;
	}
	
	module.exports = identity;

/***/ }),
/* 767 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var baseProperty = __webpack_require__(768),
	    basePropertyDeep = __webpack_require__(769),
	    isKey = __webpack_require__(754),
	    toKey = __webpack_require__(762);
	
	/**
	 * Creates a function that returns the value at `path` of a given object.
	 *
	 * @static
	 * @memberOf _
	 * @since 2.4.0
	 * @category Util
	 * @param {Array|string} path The path of the property to get.
	 * @returns {Function} Returns the new accessor function.
	 * @example
	 *
	 * var objects = [
	 *   { 'a': { 'b': 2 } },
	 *   { 'a': { 'b': 1 } }
	 * ];
	 *
	 * _.map(objects, _.property('a.b'));
	 * // => [2, 1]
	 *
	 * _.map(_.sortBy(objects, _.property(['a', 'b'])), 'a.b');
	 * // => [1, 2]
	 */
	function property(path) {
	  return isKey(path) ? baseProperty(toKey(path)) : basePropertyDeep(path);
	}
	
	module.exports = property;

/***/ }),
/* 768 */
/***/ (function(module, exports) {

	"use strict";
	
	/**
	 * The base implementation of `_.property` without support for deep paths.
	 *
	 * @private
	 * @param {string} key The key of the property to get.
	 * @returns {Function} Returns the new accessor function.
	 */
	function baseProperty(key) {
	  return function (object) {
	    return object == null ? undefined : object[key];
	  };
	}
	
	module.exports = baseProperty;

/***/ }),
/* 769 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var baseGet = __webpack_require__(752);
	
	/**
	 * A specialized version of `baseProperty` which supports deep paths.
	 *
	 * @private
	 * @param {Array|string} path The path of the property to get.
	 * @returns {Function} Returns the new accessor function.
	 */
	function basePropertyDeep(path) {
	  return function (object) {
	    return baseGet(object, path);
	  };
	}
	
	module.exports = basePropertyDeep;

/***/ }),
/* 770 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var baseFindIndex = __webpack_require__(771),
	    baseIteratee = __webpack_require__(664),
	    toInteger = __webpack_require__(772);
	
	/* Built-in method references for those with the same name as other `lodash` methods. */
	var nativeMax = Math.max;
	
	/**
	 * This method is like `_.find` except that it returns the index of the first
	 * element `predicate` returns truthy for instead of the element itself.
	 *
	 * @static
	 * @memberOf _
	 * @since 1.1.0
	 * @category Array
	 * @param {Array} array The array to inspect.
	 * @param {Function} [predicate=_.identity] The function invoked per iteration.
	 * @param {number} [fromIndex=0] The index to search from.
	 * @returns {number} Returns the index of the found element, else `-1`.
	 * @example
	 *
	 * var users = [
	 *   { 'user': 'barney',  'active': false },
	 *   { 'user': 'fred',    'active': false },
	 *   { 'user': 'pebbles', 'active': true }
	 * ];
	 *
	 * _.findIndex(users, function(o) { return o.user == 'barney'; });
	 * // => 0
	 *
	 * // The `_.matches` iteratee shorthand.
	 * _.findIndex(users, { 'user': 'fred', 'active': false });
	 * // => 1
	 *
	 * // The `_.matchesProperty` iteratee shorthand.
	 * _.findIndex(users, ['active', false]);
	 * // => 0
	 *
	 * // The `_.property` iteratee shorthand.
	 * _.findIndex(users, 'active');
	 * // => 2
	 */
	function findIndex(array, predicate, fromIndex) {
	  var length = array == null ? 0 : array.length;
	  if (!length) {
	    return -1;
	  }
	  var index = fromIndex == null ? 0 : toInteger(fromIndex);
	  if (index < 0) {
	    index = nativeMax(length + index, 0);
	  }
	  return baseFindIndex(array, baseIteratee(predicate, 3), index);
	}
	
	module.exports = findIndex;

/***/ }),
/* 771 */
/***/ (function(module, exports) {

	"use strict";
	
	/**
	 * The base implementation of `_.findIndex` and `_.findLastIndex` without
	 * support for iteratee shorthands.
	 *
	 * @private
	 * @param {Array} array The array to inspect.
	 * @param {Function} predicate The function invoked per iteration.
	 * @param {number} fromIndex The index to search from.
	 * @param {boolean} [fromRight] Specify iterating from right to left.
	 * @returns {number} Returns the index of the matched value, else `-1`.
	 */
	function baseFindIndex(array, predicate, fromIndex, fromRight) {
	  var length = array.length,
	      index = fromIndex + (fromRight ? 1 : -1);
	
	  while (fromRight ? index-- : ++index < length) {
	    if (predicate(array[index], index, array)) {
	      return index;
	    }
	  }
	  return -1;
	}
	
	module.exports = baseFindIndex;

/***/ }),
/* 772 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var toFinite = __webpack_require__(773);
	
	/**
	 * Converts `value` to an integer.
	 *
	 * **Note:** This method is loosely based on
	 * [`ToInteger`](http://www.ecma-international.org/ecma-262/7.0/#sec-tointeger).
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Lang
	 * @param {*} value The value to convert.
	 * @returns {number} Returns the converted integer.
	 * @example
	 *
	 * _.toInteger(3.2);
	 * // => 3
	 *
	 * _.toInteger(Number.MIN_VALUE);
	 * // => 0
	 *
	 * _.toInteger(Infinity);
	 * // => 1.7976931348623157e+308
	 *
	 * _.toInteger('3.2');
	 * // => 3
	 */
	function toInteger(value) {
	  var result = toFinite(value),
	      remainder = result % 1;
	
	  return result === result ? remainder ? result - remainder : result : 0;
	}
	
	module.exports = toInteger;

/***/ }),
/* 773 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var toNumber = __webpack_require__(774);
	
	/** Used as references for various `Number` constants. */
	var INFINITY = 1 / 0,
	    MAX_INTEGER = 1.7976931348623157e+308;
	
	/**
	 * Converts `value` to a finite number.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.12.0
	 * @category Lang
	 * @param {*} value The value to convert.
	 * @returns {number} Returns the converted number.
	 * @example
	 *
	 * _.toFinite(3.2);
	 * // => 3.2
	 *
	 * _.toFinite(Number.MIN_VALUE);
	 * // => 5e-324
	 *
	 * _.toFinite(Infinity);
	 * // => 1.7976931348623157e+308
	 *
	 * _.toFinite('3.2');
	 * // => 3.2
	 */
	function toFinite(value) {
	  if (!value) {
	    return value === 0 ? value : 0;
	  }
	  value = toNumber(value);
	  if (value === INFINITY || value === -INFINITY) {
	    var sign = value < 0 ? -1 : 1;
	    return sign * MAX_INTEGER;
	  }
	  return value === value ? value : 0;
	}
	
	module.exports = toFinite;

/***/ }),
/* 774 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var isObject = __webpack_require__(685),
	    isSymbol = __webpack_require__(755);
	
	/** Used as references for various `Number` constants. */
	var NAN = 0 / 0;
	
	/** Used to match leading and trailing whitespace. */
	var reTrim = /^\s+|\s+$/g;
	
	/** Used to detect bad signed hexadecimal string values. */
	var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;
	
	/** Used to detect binary string values. */
	var reIsBinary = /^0b[01]+$/i;
	
	/** Used to detect octal string values. */
	var reIsOctal = /^0o[0-7]+$/i;
	
	/** Built-in method references without a dependency on `root`. */
	var freeParseInt = parseInt;
	
	/**
	 * Converts `value` to a number.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Lang
	 * @param {*} value The value to process.
	 * @returns {number} Returns the number.
	 * @example
	 *
	 * _.toNumber(3.2);
	 * // => 3.2
	 *
	 * _.toNumber(Number.MIN_VALUE);
	 * // => 5e-324
	 *
	 * _.toNumber(Infinity);
	 * // => Infinity
	 *
	 * _.toNumber('3.2');
	 * // => 3.2
	 */
	function toNumber(value) {
	  if (typeof value == 'number') {
	    return value;
	  }
	  if (isSymbol(value)) {
	    return NAN;
	  }
	  if (isObject(value)) {
	    var other = typeof value.valueOf == 'function' ? value.valueOf() : value;
	    value = isObject(other) ? other + '' : other;
	  }
	  if (typeof value != 'string') {
	    return value === 0 ? value : +value;
	  }
	  value = value.replace(reTrim, '');
	  var isBinary = reIsBinary.test(value);
	  return isBinary || reIsOctal.test(value) ? freeParseInt(value.slice(2), isBinary ? 2 : 8) : reIsBadHex.test(value) ? NAN : +value;
	}
	
	module.exports = toNumber;

/***/ }),
/* 775 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var arraySome = __webpack_require__(711),
	    baseIteratee = __webpack_require__(664),
	    baseSome = __webpack_require__(776),
	    isArray = __webpack_require__(721),
	    isIterateeCall = __webpack_require__(782);
	
	/**
	 * Checks if `predicate` returns truthy for **any** element of `collection`.
	 * Iteration is stopped once `predicate` returns truthy. The predicate is
	 * invoked with three arguments: (value, index|key, collection).
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Collection
	 * @param {Array|Object} collection The collection to iterate over.
	 * @param {Function} [predicate=_.identity] The function invoked per iteration.
	 * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
	 * @returns {boolean} Returns `true` if any element passes the predicate check,
	 *  else `false`.
	 * @example
	 *
	 * _.some([null, 0, 'yes', false], Boolean);
	 * // => true
	 *
	 * var users = [
	 *   { 'user': 'barney', 'active': true },
	 *   { 'user': 'fred',   'active': false }
	 * ];
	 *
	 * // The `_.matches` iteratee shorthand.
	 * _.some(users, { 'user': 'barney', 'active': false });
	 * // => false
	 *
	 * // The `_.matchesProperty` iteratee shorthand.
	 * _.some(users, ['active', false]);
	 * // => true
	 *
	 * // The `_.property` iteratee shorthand.
	 * _.some(users, 'active');
	 * // => true
	 */
	function some(collection, predicate, guard) {
	  var func = isArray(collection) ? arraySome : baseSome;
	  if (guard && isIterateeCall(collection, predicate, guard)) {
	    predicate = undefined;
	  }
	  return func(collection, baseIteratee(predicate, 3));
	}
	
	module.exports = some;

/***/ }),
/* 776 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var baseEach = __webpack_require__(777);
	
	/**
	 * The base implementation of `_.some` without support for iteratee shorthands.
	 *
	 * @private
	 * @param {Array|Object} collection The collection to iterate over.
	 * @param {Function} predicate The function invoked per iteration.
	 * @returns {boolean} Returns `true` if any element passes the predicate check,
	 *  else `false`.
	 */
	function baseSome(collection, predicate) {
	  var result;
	
	  baseEach(collection, function (value, index, collection) {
	    result = predicate(value, index, collection);
	    return !result;
	  });
	  return !!result;
	}
	
	module.exports = baseSome;

/***/ }),
/* 777 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var baseForOwn = __webpack_require__(778),
	    createBaseEach = __webpack_require__(781);
	
	/**
	 * The base implementation of `_.forEach` without support for iteratee shorthands.
	 *
	 * @private
	 * @param {Array|Object} collection The collection to iterate over.
	 * @param {Function} iteratee The function invoked per iteration.
	 * @returns {Array|Object} Returns `collection`.
	 */
	var baseEach = createBaseEach(baseForOwn);
	
	module.exports = baseEach;

/***/ }),
/* 778 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var baseFor = __webpack_require__(779),
	    keys = __webpack_require__(725);
	
	/**
	 * The base implementation of `_.forOwn` without support for iteratee shorthands.
	 *
	 * @private
	 * @param {Object} object The object to iterate over.
	 * @param {Function} iteratee The function invoked per iteration.
	 * @returns {Object} Returns `object`.
	 */
	function baseForOwn(object, iteratee) {
	  return object && baseFor(object, iteratee, keys);
	}
	
	module.exports = baseForOwn;

/***/ }),
/* 779 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var createBaseFor = __webpack_require__(780);
	
	/**
	 * The base implementation of `baseForOwn` which iterates over `object`
	 * properties returned by `keysFunc` and invokes `iteratee` for each property.
	 * Iteratee functions may exit iteration early by explicitly returning `false`.
	 *
	 * @private
	 * @param {Object} object The object to iterate over.
	 * @param {Function} iteratee The function invoked per iteration.
	 * @param {Function} keysFunc The function to get the keys of `object`.
	 * @returns {Object} Returns `object`.
	 */
	var baseFor = createBaseFor();
	
	module.exports = baseFor;

/***/ }),
/* 780 */
/***/ (function(module, exports) {

	"use strict";
	
	/**
	 * Creates a base function for methods like `_.forIn` and `_.forOwn`.
	 *
	 * @private
	 * @param {boolean} [fromRight] Specify iterating from right to left.
	 * @returns {Function} Returns the new base function.
	 */
	function createBaseFor(fromRight) {
	  return function (object, iteratee, keysFunc) {
	    var index = -1,
	        iterable = Object(object),
	        props = keysFunc(object),
	        length = props.length;
	
	    while (length--) {
	      var key = props[fromRight ? length : ++index];
	      if (iteratee(iterable[key], key, iterable) === false) {
	        break;
	      }
	    }
	    return object;
	  };
	}
	
	module.exports = createBaseFor;

/***/ }),
/* 781 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var isArrayLike = __webpack_require__(741);
	
	/**
	 * Creates a `baseEach` or `baseEachRight` function.
	 *
	 * @private
	 * @param {Function} eachFunc The function to iterate over a collection.
	 * @param {boolean} [fromRight] Specify iterating from right to left.
	 * @returns {Function} Returns the new base function.
	 */
	function createBaseEach(eachFunc, fromRight) {
	  return function (collection, iteratee) {
	    if (collection == null) {
	      return collection;
	    }
	    if (!isArrayLike(collection)) {
	      return eachFunc(collection, iteratee);
	    }
	    var length = collection.length,
	        index = fromRight ? length : -1,
	        iterable = Object(collection);
	
	    while (fromRight ? index-- : ++index < length) {
	      if (iteratee(iterable[index], index, iterable) === false) {
	        break;
	      }
	    }
	    return collection;
	  };
	}
	
	module.exports = createBaseEach;

/***/ }),
/* 782 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
	
	var eq = __webpack_require__(672),
	    isArrayLike = __webpack_require__(741),
	    isIndex = __webpack_require__(732),
	    isObject = __webpack_require__(685);
	
	/**
	 * Checks if the given arguments are from an iteratee call.
	 *
	 * @private
	 * @param {*} value The potential iteratee value argument.
	 * @param {*} index The potential iteratee index or key argument.
	 * @param {*} object The potential iteratee object argument.
	 * @returns {boolean} Returns `true` if the arguments are from an iteratee call,
	 *  else `false`.
	 */
	function isIterateeCall(value, index, object) {
	  if (!isObject(object)) {
	    return false;
	  }
	  var type = typeof index === 'undefined' ? 'undefined' : _typeof(index);
	  if (type == 'number' ? isArrayLike(object) && isIndex(index, object.length) : type == 'string' && index in object) {
	    return eq(object[index], value);
	  }
	  return false;
	}
	
	module.exports = isIterateeCall;

/***/ }),
/* 783 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var baseIsEqual = __webpack_require__(705);
	
	/**
	 * Performs a deep comparison between two values to determine if they are
	 * equivalent.
	 *
	 * **Note:** This method supports comparing arrays, array buffers, booleans,
	 * date objects, error objects, maps, numbers, `Object` objects, regexes,
	 * sets, strings, symbols, and typed arrays. `Object` objects are compared
	 * by their own, not inherited, enumerable properties. Functions and DOM
	 * nodes are compared by strict equality, i.e. `===`.
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Lang
	 * @param {*} value The value to compare.
	 * @param {*} other The other value to compare.
	 * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
	 * @example
	 *
	 * var object = { 'a': 1 };
	 * var other = { 'a': 1 };
	 *
	 * _.isEqual(object, other);
	 * // => true
	 *
	 * object === other;
	 * // => false
	 */
	function isEqual(value, other) {
	  return baseIsEqual(value, other);
	}
	
	module.exports = isEqual;

/***/ }),
/* 784 */
/***/ (function(module, exports, __webpack_require__) {

	/*
	QuillToolbar is deprecated. Consider switching to the official Quill
	toolbar format, or providing your own toolbar instead.
	See https://quilljs.com/docs/modules/toolbar
	*/
	
	'use strict';
	
	var React = __webpack_require__(1);
	var ReactDOMServer = __webpack_require__(785);
	var find = __webpack_require__(662);
	var isEqual = __webpack_require__(783);
	var T = React.PropTypes;
	
	var defaultColors = ['rgb(  0,   0,   0)', 'rgb(230,   0,   0)', 'rgb(255, 153,   0)', 'rgb(255, 255,   0)', 'rgb(  0, 138,   0)', 'rgb(  0, 102, 204)', 'rgb(153,  51, 255)', 'rgb(255, 255, 255)', 'rgb(250, 204, 204)', 'rgb(255, 235, 204)', 'rgb(255, 255, 204)', 'rgb(204, 232, 204)', 'rgb(204, 224, 245)', 'rgb(235, 214, 255)', 'rgb(187, 187, 187)', 'rgb(240, 102, 102)', 'rgb(255, 194, 102)', 'rgb(255, 255, 102)', 'rgb(102, 185, 102)', 'rgb(102, 163, 224)', 'rgb(194, 133, 255)', 'rgb(136, 136, 136)', 'rgb(161,   0,   0)', 'rgb(178, 107,   0)', 'rgb(178, 178,   0)', 'rgb(  0,  97,   0)', 'rgb(  0,  71, 178)', 'rgb(107,  36, 178)', 'rgb( 68,  68,  68)', 'rgb( 92,   0,   0)', 'rgb(102,  61,   0)', 'rgb(102, 102,   0)', 'rgb(  0,  55,   0)', 'rgb(  0,  41, 102)', 'rgb( 61,  20,  10)'].map(function (color) {
		return { value: color };
	});
	
	var defaultItems = [{ label: 'Formats', type: 'group', items: [{ label: 'Font', type: 'font', items: [{ label: 'Sans Serif', value: 'sans-serif', selected: true }, { label: 'Serif', value: 'serif' }, { label: 'Monospace', value: 'monospace' }] }, { label: 'Size', type: 'size', items: [{ label: 'Small', value: '10px' }, { label: 'Normal', value: '13px', selected: true }, { label: 'Large', value: '18px' }, { label: 'Huge', value: '32px' }] }, { label: 'Alignment', type: 'align', items: [{ label: '', value: '', selected: true }, { label: '', value: 'center' }, { label: '', value: 'right' }, { label: '', value: 'justify' }] }] }, { label: 'Text', type: 'group', items: [{ type: 'bold', label: 'Bold' }, { type: 'italic', label: 'Italic' }, { type: 'strike', label: 'Strike' }, { type: 'underline', label: 'Underline' }, { type: 'color', label: 'Color', items: defaultColors }, { type: 'background', label: 'Background color', items: defaultColors }, { type: 'link', label: 'Link' }] }, { label: 'Blocks', type: 'group', items: [{ type: 'list', value: 'bullet' }, { type: 'list', value: 'ordered' }] }, { label: 'Blocks', type: 'group', items: [{ type: 'image', label: 'Image' }] }];
	
	var toolbarOptions = [['bold', 'italic', 'underline', 'strike'], // toggled buttons
	['blockquote', 'code-block'], [{ 'header': 1 }, { 'header': 2 }], // custom button values
	[{ 'list': 'ordered' }, { 'list': 'bullet' }], [{ 'script': 'sub' }, { 'script': 'super' }], // superscript/subscript
	[{ 'indent': '-1' }, { 'indent': '+1' }], // outdent/indent
	[{ 'direction': 'rtl' }], // text direction
	
	[{ 'size': ['small', false, 'large', 'huge'] }], // custom dropdown
	[{ 'header': [1, 2, 3, 4, 5, 6, false] }], [{ 'color': [] }, { 'background': [] }], // dropdown with defaults from theme
	[{ 'font': [] }], [{ 'align': [] }], ['clean'] // remove formatting button
	];
	
	var QuillToolbar = React.createClass({
	
		displayName: 'Quill Toolbar',
	
		propTypes: {
			id: T.string,
			className: T.string,
			style: T.object,
			items: T.array
		},
	
		getDefaultProps: function getDefaultProps() {
			return {
				items: defaultItems
			};
		},
	
		componentDidMount: function componentDidMount() {
			console.warn('QuillToolbar is deprecated. Consider switching to the official Quill ' + 'toolbar format, or providing your own toolbar instead. ' + 'See: https://github.com/zenoamaro/react-quill#upgrading-to-react-quill-v1-0-0');
		},
	
		shouldComponentUpdate: function shouldComponentUpdate(nextProps, nextState) {
			return !isEqual(nextProps, this.props);
		},
	
		renderGroup: function renderGroup(item, key) {
			return React.DOM.span({
				key: item.label || key,
				className: 'ql-formats' }, item.items.map(this.renderItem));
		},
	
		renderChoiceItem: function renderChoiceItem(item, key) {
			return React.DOM.option({
				key: item.label || item.value || key,
				value: item.value }, item.label);
		},
	
		renderChoices: function renderChoices(item, key) {
			var choiceItems = item.items.map(this.renderChoiceItem);
			var selectedItem = find(item.items, function (item) {
				return item.selected;
			});
			var attrs = {
				key: item.label || key,
				title: item.label,
				className: 'ql-' + item.type,
				value: selectedItem.value
			};
			return React.DOM.select(attrs, choiceItems);
		},
	
		renderButton: function renderButton(item, key) {
			return React.DOM.button({
				type: 'button',
				key: item.label || item.value || key,
				value: item.value,
				className: 'ql-' + item.type,
				title: item.label }, item.children);
		},
	
		renderAction: function renderAction(item, key) {
			return React.DOM.button({
				key: item.label || item.value || key,
				className: 'ql-' + item.type,
				title: item.label }, item.children);
		},
	
		/* jshint maxcomplexity: false */
		renderItem: function renderItem(item, key) {
			switch (item.type) {
				case 'group':
					return this.renderGroup(item, key);
				case 'font':
				case 'header':
				case 'align':
				case 'size':
				case 'color':
				case 'background':
					return this.renderChoices(item, key);
				case 'bold':
				case 'italic':
				case 'underline':
				case 'strike':
				case 'link':
				case 'list':
				case 'bullet':
				case 'ordered':
				case 'indent':
				case 'image':
				case 'video':
					return this.renderButton(item, key);
				default:
					return this.renderAction(item, key);
			}
		},
	
		getClassName: function getClassName() {
			return 'quill-toolbar ' + (this.props.className || '');
		},
	
		render: function render() {
			var children = this.props.items.map(this.renderItem);
			var html = children.map(ReactDOMServer.renderToStaticMarkup).join('');
			return React.DOM.div({
				id: this.props.id,
				className: this.getClassName(),
				style: this.props.style,
				dangerouslySetInnerHTML: { __html: html }
			});
		}
	
	});
	
	module.exports = QuillToolbar;
	QuillToolbar.defaultItems = defaultItems;
	QuillToolbar.defaultColors = defaultColors;

/***/ }),
/* 785 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports = __webpack_require__(786);

/***/ }),
/* 786 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var ReactDefaultInjection = __webpack_require__(42);
	var ReactServerRendering = __webpack_require__(787);
	var ReactVersion = __webpack_require__(175);
	
	ReactDefaultInjection.inject();
	
	var ReactDOMServer = {
	  renderToString: ReactServerRendering.renderToString,
	  renderToStaticMarkup: ReactServerRendering.renderToStaticMarkup,
	  version: ReactVersion
	};
	
	module.exports = ReactDOMServer;

/***/ }),
/* 787 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	'use strict';
	
	var _prodInvariant = __webpack_require__(39);
	
	var React = __webpack_require__(2);
	var ReactDOMContainerInfo = __webpack_require__(171);
	var ReactDefaultBatchingStrategy = __webpack_require__(144);
	var ReactInstrumentation = __webpack_require__(66);
	var ReactMarkupChecksum = __webpack_require__(173);
	var ReactReconciler = __webpack_require__(63);
	var ReactServerBatchingStrategy = __webpack_require__(788);
	var ReactServerRenderingTransaction = __webpack_require__(137);
	var ReactUpdates = __webpack_require__(60);
	
	var emptyObject = __webpack_require__(20);
	var instantiateReactComponent = __webpack_require__(122);
	var invariant = __webpack_require__(8);
	
	var pendingTransactions = 0;
	
	/**
	 * @param {ReactElement} element
	 * @return {string} the HTML markup
	 */
	function renderToStringImpl(element, makeStaticMarkup) {
	  var transaction;
	  try {
	    ReactUpdates.injection.injectBatchingStrategy(ReactServerBatchingStrategy);
	
	    transaction = ReactServerRenderingTransaction.getPooled(makeStaticMarkup);
	
	    pendingTransactions++;
	
	    return transaction.perform(function () {
	      var componentInstance = instantiateReactComponent(element, true);
	      var markup = ReactReconciler.mountComponent(componentInstance, transaction, null, ReactDOMContainerInfo(), emptyObject, 0 /* parentDebugID */
	      );
	      if (process.env.NODE_ENV !== 'production') {
	        ReactInstrumentation.debugTool.onUnmountComponent(componentInstance._debugID);
	      }
	      if (!makeStaticMarkup) {
	        markup = ReactMarkupChecksum.addChecksumToMarkup(markup);
	      }
	      return markup;
	    }, null);
	  } finally {
	    pendingTransactions--;
	    ReactServerRenderingTransaction.release(transaction);
	    // Revert to the DOM batching strategy since these two renderers
	    // currently share these stateful modules.
	    if (!pendingTransactions) {
	      ReactUpdates.injection.injectBatchingStrategy(ReactDefaultBatchingStrategy);
	    }
	  }
	}
	
	/**
	 * Render a ReactElement to its initial HTML. This should only be used on the
	 * server.
	 * See https://facebook.github.io/react/docs/top-level-api.html#reactdomserver.rendertostring
	 */
	function renderToString(element) {
	  !React.isValidElement(element) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'renderToString(): You must pass a valid ReactElement.') : _prodInvariant('46') : void 0;
	  return renderToStringImpl(element, false);
	}
	
	/**
	 * Similar to renderToString, except this doesn't create extra DOM attributes
	 * such as data-react-id that React uses internally.
	 * See https://facebook.github.io/react/docs/top-level-api.html#reactdomserver.rendertostaticmarkup
	 */
	function renderToStaticMarkup(element) {
	  !React.isValidElement(element) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'renderToStaticMarkup(): You must pass a valid ReactElement.') : _prodInvariant('47') : void 0;
	  return renderToStringImpl(element, true);
	}
	
	module.exports = {
	  renderToString: renderToString,
	  renderToStaticMarkup: renderToStaticMarkup
	};
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ }),
/* 788 */
/***/ (function(module, exports) {

	/**
	 * Copyright 2014-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	
	'use strict';
	
	var ReactServerBatchingStrategy = {
	  isBatchingUpdates: false,
	  batchedUpdates: function batchedUpdates(callback) {
	    // Don't do anything here. During the server rendering we don't want to
	    // schedule any updates. We will simply ignore them.
	  }
	};
	
	module.exports = ReactServerBatchingStrategy;

/***/ }),
/* 789 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _react = __webpack_require__(1);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _reactRedux = __webpack_require__(182);
	
	var _reactRouterDom = __webpack_require__(220);
	
	var _reactDropzone = __webpack_require__(790);
	
	var _reactDropzone2 = _interopRequireDefault(_reactDropzone);
	
	var _superagent = __webpack_require__(260);
	
	var _superagent2 = _interopRequireDefault(_superagent);
	
	var _index = __webpack_require__(259);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	var CLOUDINARY_UPLOAD_PRESET = 'm7lw5icy';
	var CLOUDINARY_UPLOAD_URL = 'https://api.cloudinary.com/v1_1/hpyyiawap/image/upload';
	
	var UserRegistration = function (_React$Component) {
	  _inherits(UserRegistration, _React$Component);
	
	  function UserRegistration(props) {
	    _classCallCheck(this, UserRegistration);
	
	    var _this = _possibleConstructorReturn(this, (UserRegistration.__proto__ || Object.getPrototypeOf(UserRegistration)).call(this, props));
	
	    _this.state = {
	      uploadedFile: null,
	      uploadedFileCloudinaryUrl: ''
	    };
	    return _this;
	  }
	
	  _createClass(UserRegistration, [{
	    key: 'onImageDrop',
	    value: function onImageDrop(files) {
	      this.setState({
	        uploadedFile: files[0]
	      });
	
	      this.handleImageUpload(files[0]);
	    }
	  }, {
	    key: 'handleImageUpload',
	    value: function handleImageUpload(file) {
	      var _this2 = this;
	
	      var upload = _superagent2.default.post(CLOUDINARY_UPLOAD_URL).field('upload_preset', CLOUDINARY_UPLOAD_PRESET).field('file', file);
	
	      upload.end(function (err, response) {
	        if (err) {
	          console.error(err);
	        }
	
	        if (response.body.secure_url !== '') {
	          _this2.setState({
	            uploadedFileCloudinaryUrl: response.body.secure_url
	          });
	        }
	      });
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	      return _react2.default.createElement(
	        'div',
	        { className: 'WriteContract' },
	        _react2.default.createElement(
	          'form',
	          { method: 'post', onSubmit: function onSubmit(e) {
	              registerNewUser(e);
	            } },
	          _react2.default.createElement(
	            'h3',
	            null,
	            'New User Registration'
	          ),
	          _react2.default.createElement(
	            'label',
	            null,
	            'First Name:'
	          ),
	          _react2.default.createElement('br', null),
	          _react2.default.createElement('input', { className: 'userRegField', type: 'text', name: 'fName' }),
	          _react2.default.createElement('br', null),
	          _react2.default.createElement(
	            'label',
	            null,
	            'Last Name:'
	          ),
	          _react2.default.createElement('br', null),
	          _react2.default.createElement('input', { className: 'userRegField', type: 'text', name: 'lName' }),
	          _react2.default.createElement('br', null),
	          _react2.default.createElement(
	            'label',
	            null,
	            'Organisation:'
	          ),
	          _react2.default.createElement('br', null),
	          _react2.default.createElement('input', { className: 'userRegField', type: 'text', name: 'organisation' }),
	          _react2.default.createElement('br', null),
	          _react2.default.createElement(
	            'label',
	            null,
	            'Phone Number:'
	          ),
	          _react2.default.createElement('br', null),
	          _react2.default.createElement('input', { className: 'userRegField', type: 'text', name: 'phone' }),
	          _react2.default.createElement('br', null),
	          _react2.default.createElement(
	            'label',
	            null,
	            'Email:'
	          ),
	          _react2.default.createElement('br', null),
	          _react2.default.createElement('input', { className: 'userRegField', type: 'text', name: 'email' }),
	          _react2.default.createElement('br', null),
	          _react2.default.createElement(
	            'label',
	            null,
	            'Password:'
	          ),
	          _react2.default.createElement('br', null),
	          _react2.default.createElement('input', { className: 'userRegField', type: 'password', name: 'password' }),
	          _react2.default.createElement('br', null),
	          _react2.default.createElement(
	            'label',
	            null,
	            'Street Address:'
	          ),
	          _react2.default.createElement('br', null),
	          _react2.default.createElement('input', { className: 'userRegField', type: 'text', name: 'street' }),
	          _react2.default.createElement('br', null),
	          _react2.default.createElement(
	            'label',
	            null,
	            'Suburb:'
	          ),
	          _react2.default.createElement('br', null),
	          _react2.default.createElement('input', { className: 'userRegField', type: 'text', name: 'suburb' }),
	          _react2.default.createElement('br', null),
	          _react2.default.createElement(
	            'label',
	            null,
	            'Profile Picture URL:'
	          ),
	          _react2.default.createElement('input', { type: 'text', name: 'user_image_url', readOnly: 'readonly', value: this.state.uploadedFileCloudinaryUrl }),
	          _react2.default.createElement('br', null),
	          _react2.default.createElement(
	            'div',
	            { className: 'imageButtonAndDisplay' },
	            _react2.default.createElement(
	              _reactDropzone2.default,
	              { className: 'dropzone',
	                onDrop: this.onImageDrop.bind(this),
	                multiple: false,
	                accept: 'image/*' },
	              _react2.default.createElement(
	                'div',
	                { className: 'uploadButton' },
	                'Drop an image or click to select a file to upload.'
	              )
	            ),
	            _react2.default.createElement(
	              'div',
	              { className: 'imageContainer' },
	              this.state.uploadedFileCloudinaryUrl === '' ? null : _react2.default.createElement(
	                'div',
	                null,
	                _react2.default.createElement('img', { className: 'uploadImage', src: this.state.uploadedFileCloudinaryUrl })
	              )
	            )
	          ),
	          _react2.default.createElement(
	            'button',
	            { type: 'submit', className: 'newUser-submit', value: 'Sign Me Up!', name: 'submit' },
	            'Submit'
	          )
	        )
	      );
	    }
	  }]);
	
	  return UserRegistration;
	}(_react2.default.Component);
	
	function registerNewUser(e) {
	  var form = e.target.elements;
	  e.preventDefault(e);
	  var userRegistrationForm = {
	    fName: form.fName.value,
	    lName: form.lName.value,
	    organisation: form.organisation.value,
	    phone: form.phone.value,
	    email: form.email.value,
	    street_address: form.street.value,
	    suburb: form.suburb.value,
	    user_image_url: form.user_image_url.value,
	    password: form.password.value
	  };
	  (0, _index.addNewUser)(userRegistrationForm, testCallback);
	}
	
	function testCallback(err, status) {
	  if (err) {
	    console.log(err);
	  } else {
	    console.log(status);
	  }
	}
	
	function mapStateToProps(state) {
	  return {
	    dispatch: state.dispatch
	  };
	}
	
	exports.default = (0, _reactRedux.connect)(mapStateToProps)(UserRegistration);

/***/ }),
/* 790 */
/***/ (function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/* WEBPACK VAR INJECTION */(function(module) {'use strict';
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
	
	(function webpackUniversalModuleDefinition(root, factory) {
		if (( false ? 'undefined' : _typeof(exports)) === 'object' && ( false ? 'undefined' : _typeof(module)) === 'object') module.exports = factory(__webpack_require__(1), __webpack_require__(184));else if (true) !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(1), __webpack_require__(184)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));else if ((typeof exports === 'undefined' ? 'undefined' : _typeof(exports)) === 'object') exports["Dropzone"] = factory(require("react"), require("prop-types"));else root["Dropzone"] = factory(root["react"], root["prop-types"]);
	})(undefined, function (__WEBPACK_EXTERNAL_MODULE_2__, __WEBPACK_EXTERNAL_MODULE_3__) {
		return (/******/function (modules) {
				// webpackBootstrap
				/******/ // The module cache
				/******/var installedModules = {};
				/******/
				/******/ // The require function
				/******/function __webpack_require__(moduleId) {
					/******/
					/******/ // Check if module is in cache
					/******/if (installedModules[moduleId])
						/******/return installedModules[moduleId].exports;
					/******/
					/******/ // Create a new module (and put it into the cache)
					/******/var module = installedModules[moduleId] = {
						/******/exports: {},
						/******/id: moduleId,
						/******/loaded: false
						/******/ };
					/******/
					/******/ // Execute the module function
					/******/modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
					/******/
					/******/ // Flag the module as loaded
					/******/module.loaded = true;
					/******/
					/******/ // Return the exports of the module
					/******/return module.exports;
					/******/
				}
				/******/
				/******/
				/******/ // expose the modules object (__webpack_modules__)
				/******/__webpack_require__.m = modules;
				/******/
				/******/ // expose the module cache
				/******/__webpack_require__.c = installedModules;
				/******/
				/******/ // __webpack_public_path__
				/******/__webpack_require__.p = "";
				/******/
				/******/ // Load entry module and return exports
				/******/return __webpack_require__(0);
				/******/
			}(
			/************************************************************************/
			/******/[
			/* 0 */
			/***/function (module, exports, __webpack_require__) {
	
				/* WEBPACK VAR INJECTION */(function (process) {
					'use strict';
	
					Object.defineProperty(exports, "__esModule", {
						value: true
					});
	
					var _extends = Object.assign || function (target) {
						for (var i = 1; i < arguments.length; i++) {
							var source = arguments[i];for (var key in source) {
								if (Object.prototype.hasOwnProperty.call(source, key)) {
									target[key] = source[key];
								}
							}
						}return target;
					};
	
					var _createClass = function () {
						function defineProperties(target, props) {
							for (var i = 0; i < props.length; i++) {
								var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
							}
						}return function (Constructor, protoProps, staticProps) {
							if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
						};
					}();
	
					var _react = __webpack_require__(2);
	
					var _react2 = _interopRequireDefault(_react);
	
					var _propTypes = __webpack_require__(3);
	
					var _propTypes2 = _interopRequireDefault(_propTypes);
	
					var _attrAccept = __webpack_require__(4);
	
					var _attrAccept2 = _interopRequireDefault(_attrAccept);
	
					var _getDataTransferItems = __webpack_require__(5);
	
					var _getDataTransferItems2 = _interopRequireDefault(_getDataTransferItems);
	
					function _interopRequireDefault(obj) {
						return obj && obj.__esModule ? obj : { default: obj };
					}
	
					function _objectWithoutProperties(obj, keys) {
						var target = {};for (var i in obj) {
							if (keys.indexOf(i) >= 0) continue;if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;target[i] = obj[i];
						}return target;
					}
	
					function _toConsumableArray(arr) {
						if (Array.isArray(arr)) {
							for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) {
								arr2[i] = arr[i];
							}return arr2;
						} else {
							return Array.from(arr);
						}
					}
	
					function _classCallCheck(instance, Constructor) {
						if (!(instance instanceof Constructor)) {
							throw new TypeError("Cannot call a class as a function");
						}
					}
	
					function _possibleConstructorReturn(self, call) {
						if (!self) {
							throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
						}return call && ((typeof call === 'undefined' ? 'undefined' : _typeof(call)) === "object" || typeof call === "function") ? call : self;
					}
	
					function _inherits(subClass, superClass) {
						if (typeof superClass !== "function" && superClass !== null) {
							throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === 'undefined' ? 'undefined' : _typeof(superClass)));
						}subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
					} /* eslint prefer-template: 0 */
	
					var supportMultiple = typeof document !== 'undefined' && document && document.createElement ? 'multiple' in document.createElement('input') : true;
	
					function fileAccepted(file, accept) {
						// Firefox versions prior to 53 return a bogus MIME type for every file drag, so dragovers with
						// that MIME type will always be accepted
						return file.type === 'application/x-moz-file' || (0, _attrAccept2.default)(file, accept);
					}
	
					var Dropzone = function (_React$Component) {
						_inherits(Dropzone, _React$Component);
	
						_createClass(Dropzone, null, [{
							key: 'onDocumentDragOver',
							value: function onDocumentDragOver(evt) {
								// allow the entire document to be a drag target
								evt.preventDefault();
							}
						}]);
	
						function Dropzone(props, context) {
							_classCallCheck(this, Dropzone);
	
							var _this = _possibleConstructorReturn(this, (Dropzone.__proto__ || Object.getPrototypeOf(Dropzone)).call(this, props, context));
	
							_this.renderChildren = function (children, isDragActive, isDragReject) {
								if (typeof children === 'function') {
									return children(_extends({}, _this.state, { isDragActive: isDragActive, isDragReject: isDragReject }));
								}
								return children;
							};
	
							_this.onClick = _this.onClick.bind(_this);
							_this.onDocumentDrop = _this.onDocumentDrop.bind(_this);
							_this.onDragStart = _this.onDragStart.bind(_this);
							_this.onDragEnter = _this.onDragEnter.bind(_this);
							_this.onDragLeave = _this.onDragLeave.bind(_this);
							_this.onDragOver = _this.onDragOver.bind(_this);
							_this.onDrop = _this.onDrop.bind(_this);
							_this.onFileDialogCancel = _this.onFileDialogCancel.bind(_this);
							_this.setRef = _this.setRef.bind(_this);
							_this.setRefs = _this.setRefs.bind(_this);
							_this.onInputElementClick = _this.onInputElementClick.bind(_this);
							_this.isFileDialogActive = false;
							_this.state = {
								draggedFiles: [],
								acceptedFiles: [],
								rejectedFiles: []
							};
							return _this;
						}
	
						_createClass(Dropzone, [{
							key: 'componentDidMount',
							value: function componentDidMount() {
								var preventDropOnDocument = this.props.preventDropOnDocument;
	
								this.dragTargets = [];
	
								if (preventDropOnDocument) {
									document.addEventListener('dragover', Dropzone.onDocumentDragOver, false);
									document.addEventListener('drop', this.onDocumentDrop, false);
								}
								this.fileInputEl.addEventListener('click', this.onInputElementClick, false);
								// Tried implementing addEventListener, but didn't work out
								document.body.onfocus = this.onFileDialogCancel;
							}
						}, {
							key: 'componentWillUnmount',
							value: function componentWillUnmount() {
								var preventDropOnDocument = this.props.preventDropOnDocument;
	
								if (preventDropOnDocument) {
									document.removeEventListener('dragover', Dropzone.onDocumentDragOver);
									document.removeEventListener('drop', this.onDocumentDrop);
								}
								this.fileInputEl.removeEventListener('click', this.onInputElementClick, false);
								// Can be replaced with removeEventListener, if addEventListener works
								document.body.onfocus = null;
							}
						}, {
							key: 'onDocumentDrop',
							value: function onDocumentDrop(evt) {
								if (this.node.contains(evt.target)) {
									// if we intercepted an event for our instance, let it propagate down to the instance's onDrop handler
									return;
								}
								evt.preventDefault();
								this.dragTargets = [];
							}
						}, {
							key: 'onDragStart',
							value: function onDragStart(evt) {
								if (this.props.onDragStart) {
									this.props.onDragStart.call(this, evt);
								}
							}
						}, {
							key: 'onDragEnter',
							value: function onDragEnter(evt) {
								evt.preventDefault();
	
								// Count the dropzone and any children that are entered.
								if (this.dragTargets.indexOf(evt.target) === -1) {
									this.dragTargets.push(evt.target);
								}
	
								this.setState({ draggedFiles: (0, _getDataTransferItems2.default)(evt) });
	
								if (this.props.onDragEnter) {
									this.props.onDragEnter.call(this, evt);
								}
							}
						}, {
							key: 'onDragOver',
							value: function onDragOver(evt) {
								// eslint-disable-line class-methods-use-this
								evt.preventDefault();
								evt.stopPropagation();
								try {
									evt.dataTransfer.dropEffect = 'copy'; // eslint-disable-line no-param-reassign
								} catch (err) {
									// continue regardless of error
								}
	
								if (this.props.onDragOver) {
									this.props.onDragOver.call(this, evt);
								}
								return false;
							}
						}, {
							key: 'onDragLeave',
							value: function onDragLeave(evt) {
								var _this2 = this;
	
								evt.preventDefault();
	
								// Only deactivate once the dropzone and all children have been left.
								this.dragTargets = this.dragTargets.filter(function (el) {
									return el !== evt.target && _this2.node.contains(el);
								});
								if (this.dragTargets.length > 0) {
									return;
								}
	
								// Clear dragging files state
								this.setState({ draggedFiles: [] });
	
								if (this.props.onDragLeave) {
									this.props.onDragLeave.call(this, evt);
								}
							}
						}, {
							key: 'onDrop',
							value: function onDrop(evt) {
								var _this3 = this;
	
								var _props = this.props,
								    onDrop = _props.onDrop,
								    onDropAccepted = _props.onDropAccepted,
								    onDropRejected = _props.onDropRejected,
								    multiple = _props.multiple,
								    disablePreview = _props.disablePreview,
								    accept = _props.accept;
	
								var fileList = (0, _getDataTransferItems2.default)(evt);
								var acceptedFiles = [];
								var rejectedFiles = [];
	
								// Stop default browser behavior
								evt.preventDefault();
	
								// Reset the counter along with the drag on a drop.
								this.dragTargets = [];
								this.isFileDialogActive = false;
	
								fileList.forEach(function (file) {
									if (!disablePreview) {
										try {
											file.preview = window.URL.createObjectURL(file); // eslint-disable-line no-param-reassign
										} catch (err) {
											if (process.env.NODE_ENV !== 'production') {
												console.error('Failed to generate preview for file', file, err); // eslint-disable-line no-console
											}
										}
									}
	
									if (fileAccepted(file, accept) && _this3.fileMatchSize(file)) {
										acceptedFiles.push(file);
									} else {
										rejectedFiles.push(file);
									}
								});
	
								if (!multiple) {
									// if not in multi mode add any extra accepted files to rejected.
									// This will allow end users to easily ignore a multi file drop in "single" mode.
									rejectedFiles.push.apply(rejectedFiles, _toConsumableArray(acceptedFiles.splice(1)));
								}
	
								if (onDrop) {
									onDrop.call(this, acceptedFiles, rejectedFiles, evt);
								}
	
								if (rejectedFiles.length > 0 && onDropRejected) {
									onDropRejected.call(this, rejectedFiles, evt);
								}
	
								if (acceptedFiles.length > 0 && onDropAccepted) {
									onDropAccepted.call(this, acceptedFiles, evt);
								}
	
								// Clear files value
								this.draggedFiles = null;
	
								// Reset drag state
								this.setState({
									draggedFiles: [],
									acceptedFiles: acceptedFiles,
									rejectedFiles: rejectedFiles
								});
							}
						}, {
							key: 'onClick',
							value: function onClick(evt) {
								var _props2 = this.props,
								    onClick = _props2.onClick,
								    disableClick = _props2.disableClick;
	
								if (!disableClick) {
									evt.stopPropagation();
									this.open();
									if (onClick) {
										onClick.call(this, evt);
									}
								}
							}
						}, {
							key: 'onInputElementClick',
							value: function onInputElementClick(evt) {
								evt.stopPropagation();
								if (this.props.inputProps && this.props.inputProps.onClick) {
									this.props.inputProps.onClick();
								}
							}
						}, {
							key: 'onFileDialogCancel',
							value: function onFileDialogCancel() {
								// timeout will not recognize context of this method
								var onFileDialogCancel = this.props.onFileDialogCancel;
								var fileInputEl = this.fileInputEl;
								var isFileDialogActive = this.isFileDialogActive;
								// execute the timeout only if the onFileDialogCancel is defined and FileDialog
								// is opened in the browser
	
								if (onFileDialogCancel && isFileDialogActive) {
									setTimeout(function () {
										// Returns an object as FileList
										var FileList = fileInputEl.files;
										if (!FileList.length) {
											isFileDialogActive = false;
											onFileDialogCancel();
										}
									}, 300);
								}
							}
						}, {
							key: 'setRef',
							value: function setRef(ref) {
								this.node = ref;
							}
						}, {
							key: 'setRefs',
							value: function setRefs(ref) {
								this.fileInputEl = ref;
							}
						}, {
							key: 'fileMatchSize',
							value: function fileMatchSize(file) {
								return file.size <= this.props.maxSize && file.size >= this.props.minSize;
							}
						}, {
							key: 'allFilesAccepted',
							value: function allFilesAccepted(files) {
								var _this4 = this;
	
								return files.every(function (file) {
									return fileAccepted(file, _this4.props.accept);
								});
							}
	
							/**
	       * Open system file upload dialog.
	       *
	       * @public
	       */
	
						}, {
							key: 'open',
							value: function open() {
								this.isFileDialogActive = true;
								this.fileInputEl.value = null;
								this.fileInputEl.click();
							}
						}, {
							key: 'render',
							value: function render() {
								var _props3 = this.props,
								    accept = _props3.accept,
								    activeClassName = _props3.activeClassName,
								    inputProps = _props3.inputProps,
								    multiple = _props3.multiple,
								    name = _props3.name,
								    rejectClassName = _props3.rejectClassName,
								    children = _props3.children,
								    rest = _objectWithoutProperties(_props3, ['accept', 'activeClassName', 'inputProps', 'multiple', 'name', 'rejectClassName', 'children']);
	
								var activeStyle = rest.activeStyle,
								    className = rest.className,
								    rejectStyle = rest.rejectStyle,
								    style = rest.style,
								    props = _objectWithoutProperties(rest, ['activeStyle', 'className', 'rejectStyle', 'style']);
	
								var draggedFiles = this.state.draggedFiles;
	
								var filesCount = draggedFiles.length;
								var isMultipleAllowed = multiple || filesCount <= 1;
								var isDragActive = filesCount > 0 && this.allFilesAccepted(draggedFiles);
								var isDragReject = filesCount > 0 && (!isDragActive || !isMultipleAllowed);
	
								className = className || '';
	
								if (isDragActive && activeClassName) {
									className += ' ' + activeClassName;
								}
								if (isDragReject && rejectClassName) {
									className += ' ' + rejectClassName;
								}
	
								if (!className && !style && !activeStyle && !rejectStyle) {
									style = {
										width: 200,
										height: 200,
										borderWidth: 2,
										borderColor: '#666',
										borderStyle: 'dashed',
										borderRadius: 5
									};
									activeStyle = {
										borderStyle: 'solid',
										borderColor: '#6c6',
										backgroundColor: '#eee'
									};
									rejectStyle = {
										borderStyle: 'solid',
										borderColor: '#c66',
										backgroundColor: '#eee'
									};
								}
	
								var appliedStyle = void 0;
								if (activeStyle && isDragActive) {
									appliedStyle = _extends({}, style, activeStyle);
								} else if (rejectStyle && isDragReject) {
									appliedStyle = _extends({}, style, rejectStyle);
								} else {
									appliedStyle = _extends({}, style);
								}
	
								var inputAttributes = {
									accept: accept,
									type: 'file',
									style: { display: 'none' },
									multiple: supportMultiple && multiple,
									ref: this.setRefs,
									onChange: this.onDrop
								};
	
								if (name && name.length) {
									inputAttributes.name = name;
								}
	
								// Remove custom properties before passing them to the wrapper div element
								var customProps = ['acceptedFiles', 'preventDropOnDocument', 'disablePreview', 'disableClick', 'onDropAccepted', 'onDropRejected', 'onFileDialogCancel', 'maxSize', 'minSize'];
								var divProps = _extends({}, props);
								customProps.forEach(function (prop) {
									return delete divProps[prop];
								});
	
								return _react2.default.createElement('div', _extends({
									className: className,
									style: appliedStyle
								}, divProps /* expand user provided props first so event handlers are never overridden */, {
									onClick: this.onClick,
									onDragStart: this.onDragStart,
									onDragEnter: this.onDragEnter,
									onDragOver: this.onDragOver,
									onDragLeave: this.onDragLeave,
									onDrop: this.onDrop,
									ref: this.setRef
								}), this.renderChildren(children, isDragActive, isDragReject), _react2.default.createElement('input', _extends({}, inputProps /* expand user provided inputProps first so inputAttributes override them */, inputAttributes)));
							}
						}]);
	
						return Dropzone;
					}(_react2.default.Component);
	
					Dropzone.propTypes = {
						/**
	      * Allow specific types of files. See https://github.com/okonet/attr-accept for more information.
	      * Keep in mind that mime type determination is not reliable accross platforms. CSV files,
	      * for example, are reported as text/plain under macOS but as application/vnd.ms-excel under
	      * Windows. In some cases there might not be a mime type set at all.
	      * See: https://github.com/okonet/react-dropzone/issues/276
	      */
						accept: _propTypes2.default.string,
	
						/**
	      * Contents of the dropzone
	      */
						children: _propTypes2.default.oneOfType([_propTypes2.default.node, _propTypes2.default.func]),
	
						/**
	      * Disallow clicking on the dropzone container to open file dialog
	      */
						disableClick: _propTypes2.default.bool,
	
						/**
	      * Enable/disable preview generation
	      */
						disablePreview: _propTypes2.default.bool,
	
						/**
	      * If false, allow dropped items to take over the current browser window
	      */
						preventDropOnDocument: _propTypes2.default.bool,
	
						/**
	      * Pass additional attributes to the `<input type="file"/>` tag
	      */
						inputProps: _propTypes2.default.object,
	
						/**
	      * Allow dropping multiple files
	      */
						multiple: _propTypes2.default.bool,
	
						/**
	      * `name` attribute for the input tag
	      */
						name: _propTypes2.default.string,
	
						/**
	      * Maximum file size
	      */
						maxSize: _propTypes2.default.number,
	
						/**
	      * Minimum file size
	      */
						minSize: _propTypes2.default.number,
	
						/**
	      * className
	      */
						className: _propTypes2.default.string,
	
						/**
	      * className for accepted state
	      */
						activeClassName: _propTypes2.default.string,
	
						/**
	      * className for rejected state
	      */
						rejectClassName: _propTypes2.default.string,
	
						/**
	      * CSS styles to apply
	      */
						style: _propTypes2.default.object,
	
						/**
	      * CSS styles to apply when drop will be accepted
	      */
						activeStyle: _propTypes2.default.object,
	
						/**
	      * CSS styles to apply when drop will be rejected
	      */
						rejectStyle: _propTypes2.default.object,
	
						/**
	      * onClick callback
	      * @param {Event} event
	      */
						onClick: _propTypes2.default.func,
	
						/**
	      * onDrop callback
	      */
						onDrop: _propTypes2.default.func,
	
						/**
	      * onDropAccepted callback
	      */
						onDropAccepted: _propTypes2.default.func,
	
						/**
	      * onDropRejected callback
	      */
						onDropRejected: _propTypes2.default.func,
	
						/**
	      * onDragStart callback
	      */
						onDragStart: _propTypes2.default.func,
	
						/**
	      * onDragEnter callback
	      */
						onDragEnter: _propTypes2.default.func,
	
						/**
	      * onDragOver callback
	      */
						onDragOver: _propTypes2.default.func,
	
						/**
	      * onDragLeave callback
	      */
						onDragLeave: _propTypes2.default.func,
	
						/**
	      * Provide a callback on clicking the cancel button of the file dialog
	      */
						onFileDialogCancel: _propTypes2.default.func
					};
	
					Dropzone.defaultProps = {
						preventDropOnDocument: true,
						disablePreview: false,
						disableClick: false,
						multiple: true,
						maxSize: Infinity,
						minSize: 0
					};
	
					exports.default = Dropzone;
					module.exports = exports['default'];
					/* WEBPACK VAR INJECTION */
				}).call(exports, __webpack_require__(1));
	
				/***/
			},
			/* 1 */
			/***/function (module, exports) {
	
				// shim for using process in browser
				var process = module.exports = {};
	
				// cached from whatever global is present so that test runners that stub it
				// don't break things.  But we need to wrap it in a try catch in case it is
				// wrapped in strict mode code which doesn't define any globals.  It's inside a
				// function because try/catches deoptimize in certain engines.
	
				var cachedSetTimeout;
				var cachedClearTimeout;
	
				function defaultSetTimout() {
					throw new Error('setTimeout has not been defined');
				}
				function defaultClearTimeout() {
					throw new Error('clearTimeout has not been defined');
				}
				(function () {
					try {
						if (typeof setTimeout === 'function') {
							cachedSetTimeout = setTimeout;
						} else {
							cachedSetTimeout = defaultSetTimout;
						}
					} catch (e) {
						cachedSetTimeout = defaultSetTimout;
					}
					try {
						if (typeof clearTimeout === 'function') {
							cachedClearTimeout = clearTimeout;
						} else {
							cachedClearTimeout = defaultClearTimeout;
						}
					} catch (e) {
						cachedClearTimeout = defaultClearTimeout;
					}
				})();
				function runTimeout(fun) {
					if (cachedSetTimeout === setTimeout) {
						//normal enviroments in sane situations
						return setTimeout(fun, 0);
					}
					// if setTimeout wasn't available but was latter defined
					if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
						cachedSetTimeout = setTimeout;
						return setTimeout(fun, 0);
					}
					try {
						// when when somebody has screwed with setTimeout but no I.E. maddness
						return cachedSetTimeout(fun, 0);
					} catch (e) {
						try {
							// When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
							return cachedSetTimeout.call(null, fun, 0);
						} catch (e) {
							// same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
							return cachedSetTimeout.call(this, fun, 0);
						}
					}
				}
				function runClearTimeout(marker) {
					if (cachedClearTimeout === clearTimeout) {
						//normal enviroments in sane situations
						return clearTimeout(marker);
					}
					// if clearTimeout wasn't available but was latter defined
					if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
						cachedClearTimeout = clearTimeout;
						return clearTimeout(marker);
					}
					try {
						// when when somebody has screwed with setTimeout but no I.E. maddness
						return cachedClearTimeout(marker);
					} catch (e) {
						try {
							// When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
							return cachedClearTimeout.call(null, marker);
						} catch (e) {
							// same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
							// Some versions of I.E. have different rules for clearTimeout vs setTimeout
							return cachedClearTimeout.call(this, marker);
						}
					}
				}
				var queue = [];
				var draining = false;
				var currentQueue;
				var queueIndex = -1;
	
				function cleanUpNextTick() {
					if (!draining || !currentQueue) {
						return;
					}
					draining = false;
					if (currentQueue.length) {
						queue = currentQueue.concat(queue);
					} else {
						queueIndex = -1;
					}
					if (queue.length) {
						drainQueue();
					}
				}
	
				function drainQueue() {
					if (draining) {
						return;
					}
					var timeout = runTimeout(cleanUpNextTick);
					draining = true;
	
					var len = queue.length;
					while (len) {
						currentQueue = queue;
						queue = [];
						while (++queueIndex < len) {
							if (currentQueue) {
								currentQueue[queueIndex].run();
							}
						}
						queueIndex = -1;
						len = queue.length;
					}
					currentQueue = null;
					draining = false;
					runClearTimeout(timeout);
				}
	
				process.nextTick = function (fun) {
					var args = new Array(arguments.length - 1);
					if (arguments.length > 1) {
						for (var i = 1; i < arguments.length; i++) {
							args[i - 1] = arguments[i];
						}
					}
					queue.push(new Item(fun, args));
					if (queue.length === 1 && !draining) {
						runTimeout(drainQueue);
					}
				};
	
				// v8 likes predictible objects
				function Item(fun, array) {
					this.fun = fun;
					this.array = array;
				}
				Item.prototype.run = function () {
					this.fun.apply(null, this.array);
				};
				process.title = 'browser';
				process.browser = true;
				process.env = {};
				process.argv = [];
				process.version = ''; // empty string to avoid regexp issues
				process.versions = {};
	
				function noop() {}
	
				process.on = noop;
				process.addListener = noop;
				process.once = noop;
				process.off = noop;
				process.removeListener = noop;
				process.removeAllListeners = noop;
				process.emit = noop;
				process.prependListener = noop;
				process.prependOnceListener = noop;
	
				process.listeners = function (name) {
					return [];
				};
	
				process.binding = function (name) {
					throw new Error('process.binding is not supported');
				};
	
				process.cwd = function () {
					return '/';
				};
				process.chdir = function (dir) {
					throw new Error('process.chdir is not supported');
				};
				process.umask = function () {
					return 0;
				};
	
				/***/
			},
			/* 2 */
			/***/function (module, exports) {
	
				module.exports = __WEBPACK_EXTERNAL_MODULE_2__;
	
				/***/
			},
			/* 3 */
			/***/function (module, exports) {
	
				module.exports = __WEBPACK_EXTERNAL_MODULE_3__;
	
				/***/
			},
			/* 4 */
			/***/function (module, exports) {
	
				module.exports = function (t) {
					function n(e) {
						if (r[e]) return r[e].exports;var o = r[e] = { exports: {}, id: e, loaded: !1 };return t[e].call(o.exports, o, o.exports, n), o.loaded = !0, o.exports;
					}var r = {};return n.m = t, n.c = r, n.p = "", n(0);
				}([function (t, n, r) {
					"use strict";
					n.__esModule = !0, r(8), r(9), n["default"] = function (t, n) {
						if (t && n) {
							var r = function () {
								var r = Array.isArray(n) ? n : n.split(","),
								    e = t.name || "",
								    o = t.type || "",
								    i = o.replace(/\/.*$/, "");return { v: r.some(function (t) {
										var n = t.trim();return "." === n.charAt(0) ? e.toLowerCase().endsWith(n.toLowerCase()) : /\/\*$/.test(n) ? i === n.replace(/\/.*$/, "") : o === n;
									}) };
							}();if ("object" == (typeof r === 'undefined' ? 'undefined' : _typeof(r))) return r.v;
						}return !0;
					}, t.exports = n["default"];
				}, function (t, n) {
					var r = t.exports = { version: "1.2.2" };"number" == typeof __e && (__e = r);
				}, function (t, n) {
					var r = t.exports = "undefined" != typeof window && window.Math == Math ? window : "undefined" != typeof self && self.Math == Math ? self : Function("return this")();"number" == typeof __g && (__g = r);
				}, function (t, n, r) {
					var e = r(2),
					    o = r(1),
					    i = r(4),
					    u = r(19),
					    c = "prototype",
					    f = function f(t, n) {
						return function () {
							return t.apply(n, arguments);
						};
					},
					    s = function s(t, n, r) {
						var a,
						    p,
						    l,
						    y,
						    d = t & s.G,
						    h = t & s.P,
						    v = d ? e : t & s.S ? e[n] || (e[n] = {}) : (e[n] || {})[c],
						    x = d ? o : o[n] || (o[n] = {});d && (r = n);for (a in r) {
							p = !(t & s.F) && v && a in v, l = (p ? v : r)[a], y = t & s.B && p ? f(l, e) : h && "function" == typeof l ? f(Function.call, l) : l, v && !p && u(v, a, l), x[a] != l && i(x, a, y), h && ((x[c] || (x[c] = {}))[a] = l);
						}
					};e.core = o, s.F = 1, s.G = 2, s.S = 4, s.P = 8, s.B = 16, s.W = 32, t.exports = s;
				}, function (t, n, r) {
					var e = r(5),
					    o = r(18);t.exports = r(22) ? function (t, n, r) {
						return e.setDesc(t, n, o(1, r));
					} : function (t, n, r) {
						return t[n] = r, t;
					};
				}, function (t, n) {
					var r = Object;t.exports = { create: r.create, getProto: r.getPrototypeOf, isEnum: {}.propertyIsEnumerable, getDesc: r.getOwnPropertyDescriptor, setDesc: r.defineProperty, setDescs: r.defineProperties, getKeys: r.keys, getNames: r.getOwnPropertyNames, getSymbols: r.getOwnPropertySymbols, each: [].forEach };
				}, function (t, n) {
					var r = 0,
					    e = Math.random();t.exports = function (t) {
						return "Symbol(".concat(void 0 === t ? "" : t, ")_", (++r + e).toString(36));
					};
				}, function (t, n, r) {
					var e = r(20)("wks"),
					    o = r(2).Symbol;t.exports = function (t) {
						return e[t] || (e[t] = o && o[t] || (o || r(6))("Symbol." + t));
					};
				}, function (t, n, r) {
					r(26), t.exports = r(1).Array.some;
				}, function (t, n, r) {
					r(25), t.exports = r(1).String.endsWith;
				}, function (t, n) {
					t.exports = function (t) {
						if ("function" != typeof t) throw TypeError(t + " is not a function!");return t;
					};
				}, function (t, n) {
					var r = {}.toString;t.exports = function (t) {
						return r.call(t).slice(8, -1);
					};
				}, function (t, n, r) {
					var e = r(10);t.exports = function (t, n, r) {
						if (e(t), void 0 === n) return t;switch (r) {case 1:
								return function (r) {
									return t.call(n, r);
								};case 2:
								return function (r, e) {
									return t.call(n, r, e);
								};case 3:
								return function (r, e, o) {
									return t.call(n, r, e, o);
								};}return function () {
							return t.apply(n, arguments);
						};
					};
				}, function (t, n) {
					t.exports = function (t) {
						if (void 0 == t) throw TypeError("Can't call method on  " + t);return t;
					};
				}, function (t, n, r) {
					t.exports = function (t) {
						var n = /./;try {
							"/./"[t](n);
						} catch (e) {
							try {
								return n[r(7)("match")] = !1, !"/./"[t](n);
							} catch (o) {}
						}return !0;
					};
				}, function (t, n) {
					t.exports = function (t) {
						try {
							return !!t();
						} catch (n) {
							return !0;
						}
					};
				}, function (t, n) {
					t.exports = function (t) {
						return "object" == (typeof t === 'undefined' ? 'undefined' : _typeof(t)) ? null !== t : "function" == typeof t;
					};
				}, function (t, n, r) {
					var e = r(16),
					    o = r(11),
					    i = r(7)("match");t.exports = function (t) {
						var n;return e(t) && (void 0 !== (n = t[i]) ? !!n : "RegExp" == o(t));
					};
				}, function (t, n) {
					t.exports = function (t, n) {
						return { enumerable: !(1 & t), configurable: !(2 & t), writable: !(4 & t), value: n };
					};
				}, function (t, n, r) {
					var e = r(2),
					    o = r(4),
					    i = r(6)("src"),
					    u = "toString",
					    c = Function[u],
					    f = ("" + c).split(u);r(1).inspectSource = function (t) {
						return c.call(t);
					}, (t.exports = function (t, n, r, u) {
						"function" == typeof r && (o(r, i, t[n] ? "" + t[n] : f.join(String(n))), "name" in r || (r.name = n)), t === e ? t[n] = r : (u || delete t[n], o(t, n, r));
					})(Function.prototype, u, function () {
						return "function" == typeof this && this[i] || c.call(this);
					});
				}, function (t, n, r) {
					var e = r(2),
					    o = "__core-js_shared__",
					    i = e[o] || (e[o] = {});t.exports = function (t) {
						return i[t] || (i[t] = {});
					};
				}, function (t, n, r) {
					var e = r(17),
					    o = r(13);t.exports = function (t, n, r) {
						if (e(n)) throw TypeError("String#" + r + " doesn't accept regex!");return String(o(t));
					};
				}, function (t, n, r) {
					t.exports = !r(15)(function () {
						return 7 != Object.defineProperty({}, "a", { get: function get() {
								return 7;
							} }).a;
					});
				}, function (t, n) {
					var r = Math.ceil,
					    e = Math.floor;t.exports = function (t) {
						return isNaN(t = +t) ? 0 : (t > 0 ? e : r)(t);
					};
				}, function (t, n, r) {
					var e = r(23),
					    o = Math.min;t.exports = function (t) {
						return t > 0 ? o(e(t), 9007199254740991) : 0;
					};
				}, function (t, n, r) {
					"use strict";
					var e = r(3),
					    o = r(24),
					    i = r(21),
					    u = "endsWith",
					    c = ""[u];e(e.P + e.F * r(14)(u), "String", { endsWith: function endsWith(t) {
							var n = i(this, t, u),
							    r = arguments,
							    e = r.length > 1 ? r[1] : void 0,
							    f = o(n.length),
							    s = void 0 === e ? f : Math.min(o(e), f),
							    a = String(t);return c ? c.call(n, a, s) : n.slice(s - a.length, s) === a;
						} });
				}, function (t, n, r) {
					var e = r(5),
					    o = r(3),
					    i = r(1).Array || Array,
					    u = {},
					    c = function c(t, n) {
						e.each.call(t.split(","), function (t) {
							void 0 == n && t in i ? u[t] = i[t] : t in [] && (u[t] = r(12)(Function.call, [][t], n));
						});
					};c("pop,reverse,shift,keys,values,entries", 1), c("indexOf,every,some,forEach,map,filter,find,findIndex,includes", 3), c("join,slice,concat,push,splice,unshift,sort,lastIndexOf,reduce,reduceRight,copyWithin,fill"), o(o.S, "Array", u);
				}]);
	
				/***/
			},
			/* 5 */
			/***/function (module, exports) {
	
				"use strict";
	
				Object.defineProperty(exports, "__esModule", {
					value: true
				});
				exports.default = getDataTransferFiles;
				function getDataTransferFiles(event) {
					var dataTransferItemsList = [];
					if (event.dataTransfer) {
						var dt = event.dataTransfer;
						if (dt.files && dt.files.length) {
							dataTransferItemsList = dt.files;
						} else if (dt.items && dt.items.length) {
							// During the drag even the dataTransfer.files is null
							// but Chrome implements some drag store, which is accesible via dataTransfer.items
							dataTransferItemsList = dt.items;
						}
					} else if (event.target && event.target.files) {
						dataTransferItemsList = event.target.files;
					}
					// Convert from DataTransferItemsList to the native Array
					return Array.prototype.slice.call(dataTransferItemsList);
				}
				module.exports = exports["default"];
	
				/***/
			}])
		);
	});
	
	/******/;
	//# sourceMappingURL=index.js.map
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(205)(module)))

/***/ })
/******/ ]);
//# sourceMappingURL=bundle.js.map